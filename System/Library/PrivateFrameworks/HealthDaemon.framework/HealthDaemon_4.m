void sub_1BD10DA08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(unsigned char *)(v13 + 626) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(unsigned char *)(result + 627) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(unsigned char *)(a1 + 626)) {
      goto LABEL_12;
    }
    v7 = 0;
LABEL_14:
    uint64_t v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval((id *)a1, v7, a3);
    goto LABEL_15;
  }
  v7 = [v6 dateIntervalForIntervalsContainingInterval:v5];

  if (!*(unsigned char *)(a1 + 626)) {
    goto LABEL_14;
  }
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 648);
    *(void *)(a1 + 648) = 0;

    v7 = 0;
    uint64_t v11 = 1;
    *(unsigned char *)(a1 + 625) = 1;
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 625))
  {
    v8 = *(void **)(a1 + 648);
    if (!v8)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      v10 = *(void **)(a1 + 648);
      *(void *)(a1 + 648) = v9;

      v8 = *(void **)(a1 + 648);
    }
    [v8 addObject:v7];
  }
  uint64_t v11 = 1;
LABEL_15:

  return v11;
}

void sub_1BD10DD08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    *(unsigned char *)(a1 + 624) = 1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v9[3] = &unk_1E63043E8;
    uint64_t v12 = a1;
    id v10 = v5;
    id v11 = WeakRetained;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 112))(a1, v9, a3);
    if (v7 && *(unsigned char *)(a1 + 624) && !*(void *)(a1 + 40)) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to query for initial statistics: no data source available.");
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1BD10DE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::reset(uint64_t result)
{
  *(unsigned char *)(result + 624) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 encodeBool:*(unsigned __int8 *)(a1 + 624) forKey:@"needs_config"];
  id v12 = v3;
  v32 = &unk_1F1726FA0;
  v33 = 0;
  int v38 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
  LOBYTE(v38) = 1;
  uint64_t v34 = v4;
  uint64_t v35 = 0;
  statistics::StatisticsEngine::makeCurrentBucket((uint64_t)&v32);
  v13 = &unk_1F171B9C8;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  int v31 = 511;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 0;
  int8x16_t v14 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  uint64_t v5 = *(void *)(a1 + 136);
  char v29 = *(unsigned char *)(a1 + 144);
  char v30 = *(unsigned char *)(a1 + 145);
  BOOL v28 = *(_DWORD *)(a1 + 148) == 0;
  int8x16_t v15 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  uint64_t v7 = *(int8x16_t **)(a1 + 216);
  if (v7 != *(int8x16_t **)(a1 + 224))
  {
    v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v7, *v7, 8uLL);
    int8x16_t v40 = v7[1];
    char v43 = 0;
    HIBYTE(v42) = v7[2].i8[9];
    LOBYTE(v42) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>();
  }
  statistics::StatisticsBucket::makeStatistics((uint64_t)&v13);
  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::archive((uint64_t)&v39, (int *)(a1 + 240));
  statistics::Statistics::operator=(*((statistics **)&v22 + 1), (uint64_t)&v39);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v39);
  uint64_t v8 = *(void *)(a1 + 384);
  if (v8 != a1 + 392)
  {
    HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::archive((uint64_t)&v39, (int *)(v8 + 40));
    uint64_t v9 = *(void *)(v8 + 32);
    v46 |= 0x200u;
    uint64_t v45 = v9;
    PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>();
  }
  id v10 = *(int8x16_t **)(a1 + 184);
  if (v10 != *(int8x16_t **)(a1 + 192))
  {
    v39 = (char *)&unk_1F1727540;
    v41.i32[0] = 3;
    int8x16_t v40 = vextq_s8(*v10, *v10, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>();
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v13);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v13);
  id v11 = *(int8x16_t **)(a1 + 592);
  if (v11 != *(int8x16_t **)(a1 + 600))
  {
    v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v11, *v11, 8uLL);
    int8x16_t v40 = v11[1];
    __int16 v42 = 0;
    char v43 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>();
  }
  PB::Writer::Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v39);
  [v12 encodeBytes:v40.i64[0] length:&v39[-v40.i64[0]] forKey:@"hdsce_archived_representation"];
  PB::Writer::~Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);
}

void sub_1BD10E25C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v60 = a2;
  *(unsigned char *)(a1 + 624) = [v60 decodeBoolForKey:@"needs_config"];
  id v3 = v60;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)&v64.n128_i64[1], 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)v65 = 0u;
  long long v66 = 0u;
  unint64_t v109 = 0;
  id v63 = v3;
  PB::Reader::Reader((PB::Reader *)v108, (const unsigned __int8 *)[v63 decodeBytesForKey:@"hdsce_archived_representation" returnedLength:&v109]);
  uint64_t v62 = a1;
  v101 = &unk_1F1726FA0;
  uint64_t v102 = 0;
  uint64_t v106 = 0;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  int v107 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v101, (PB::Reader *)v108);
  v64.n128_u64[0] = v103;
  if (v102)
  {
    uint64_t v71 = 0;
    memset(v74, 0, sizeof(v74));
    long long v79 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    LOWORD(v82) = 0;
    memset(v83, 0, 74);
    uint64_t v86 = 0;
    __p = 0;
    int v78 = 0;
    v76 = 0;
    unint64_t v77 = 0;
    v85 = 0;
    v84 = &v85;
    long long v87 = 0u;
    long long v88 = 0u;
    int v89 = 1065353216;
    long long v90 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    uint64_t v93 = 0;
    int v94 = 1065353216;
    long long v95 = 0u;
    long long v96 = 0u;
    int v97 = 1065353216;
    long long v98 = 0u;
    long long v99 = 0u;
    int v100 = 1065353216;
    int8x16_t v67 = vextq_s8(*(int8x16_t *)(v102 + 8), *(int8x16_t *)(v102 + 8), 8uLL);
    uint64_t v4 = *(void *)(v102 + 72);
    uint64_t v68 = *(void *)(v102 + 64);
    char v69 = *(unsigned char *)(v102 + 185);
    char v70 = *(unsigned char *)(v102 + 186);
    int8x16_t v72 = vextq_s8(*(int8x16_t *)(v102 + 24), *(int8x16_t *)(v102 + 24), 8uLL);
    uint64_t v73 = v4;
    uint64_t v5 = *(void *)(v102 + 80);
    uint64_t v6 = *(void *)(v102 + 88);
    v61 = (void *)v102;
    if (v5 != v6)
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(*(void *)v5 + 24);
        uint64_t v9 = *(void *)(*(void *)v5 + 32);
        uint64_t v10 = *(void *)(*(void *)v5 + 8);
        uint64_t v11 = *(void *)(*(void *)v5 + 16);
        char v12 = *(unsigned char *)(*(void *)v5 + 41);
        char v13 = *(unsigned char *)(*(void *)v5 + 40);
        if ((unint64_t)v7 >= v77)
        {
          int8x16_t v14 = (char *)__p;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)__p) >> 4);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v77 - (void)__p) >> 4) > v16) {
            unint64_t v16 = 0x5555555555555556 * ((uint64_t)(v77 - (void)__p) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v77 - (void)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v17 = 0x555555555555555;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17)
          {
            unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            uint64_t v7 = v76;
            int8x16_t v14 = (char *)__p;
          }
          else
          {
            uint64_t v18 = 0;
          }
          uint64_t v19 = (void *)(v17 + 48 * v15);
          *uint64_t v19 = v9;
          v19[1] = v8;
          v19[2] = v10;
          v19[3] = v11;
          *((_WORD *)v19 + 16) = 1;
          *((unsigned char *)v19 + 40) = 0;
          *((unsigned char *)v19 + 41) = v12;
          *((unsigned char *)v19 + 42) = v13;
          uint64_t v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              long long v21 = *((_OWORD *)v7 - 3);
              long long v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            int8x16_t v14 = (char *)__p;
          }
          uint64_t v7 = (char *)(v19 + 6);
          __p = v20;
          v76 = (char *)(v19 + 6);
          unint64_t v77 = v17 + 48 * v18;
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)uint64_t v7 = v9;
          *((void *)v7 + 1) = v8;
          *((void *)v7 + 2) = v10;
          *((void *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        v76 = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    long long v23 = (void *)v61[13];
    if (v23)
    {
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::unarchive((uint64_t)&v110, v23);
      int v78 = v110;
      uint64_t v82 = v114;
      long long v79 = v111;
      long long v80 = v112;
      long long v81 = v113;
      v83[0] = v115;
      if (v83[1])
      {
        v83[2] = v83[1];
        operator delete((void *)v83[1]);
      }
      *(_OWORD *)&v83[1] = v116;
      v83[3] = v117;
      uint64_t v117 = 0;
      long long v116 = 0uLL;
      v83[4] = v118;
      *(_OWORD *)&v83[5] = v119;
      *(_OWORD *)&v83[7] = v120;
      LOWORD(v83[9]) = v121;
    }
    long long v25 = (void **)v61[17];
    for (i = (void **)v61[18]; v25 != i; ++v25)
    {
      uint64_t v26 = (uint64_t)*v25;
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::unarchive((uint64_t)&v110, *v25);
      uint64_t v27 = *(void *)(v26 + 144);
      BOOL v28 = v85;
      for (j = &v85; ; BOOL v28 = *j)
      {
        char v30 = j;
        if (!v28) {
          break;
        }
        while (1)
        {
          j = (uint64_t **)v28;
          uint64_t v31 = v28[4];
          if (v31 > v27) {
            break;
          }
          if (v31 >= v27)
          {
            v32 = (char *)j;
            goto LABEL_37;
          }
          BOOL v28 = j[1];
          if (!v28)
          {
            char v30 = j + 1;
            goto LABEL_34;
          }
        }
      }
LABEL_34:
      v32 = (char *)operator new(0xB8uLL);
      *((void *)v32 + 4) = v27;
      *(_OWORD *)(v32 + 40) = 0u;
      *(_OWORD *)(v32 + 56) = 0u;
      *(_OWORD *)(v32 + 72) = 0u;
      *(_OWORD *)(v32 + 88) = 0u;
      *(_OWORD *)(v32 + 104) = 0u;
      *(_OWORD *)(v32 + 120) = 0u;
      *(_OWORD *)(v32 + 136) = 0u;
      *(_OWORD *)(v32 + 152) = 0u;
      *(_OWORD *)(v32 + 168) = 0u;
      *(void *)v32 = 0;
      *((void *)v32 + 1) = 0;
      *((void *)v32 + 2) = j;
      *char v30 = (uint64_t *)v32;
      v33 = (uint64_t *)v32;
      if (*v84)
      {
        v84 = (uint64_t **)*v84;
        v33 = *v30;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v85, v33);
      ++v86;
LABEL_37:
      uint64_t v34 = (void *)*((void *)v32 + 14);
      *((_DWORD *)v32 + 10) = v110;
      uint64_t v35 = v114;
      long long v37 = v112;
      long long v36 = v113;
      *((_OWORD *)v32 + 3) = v111;
      *((_OWORD *)v32 + 4) = v37;
      *((_OWORD *)v32 + 5) = v36;
      *((void *)v32 + 12) = v35;
      *((void *)v32 + 13) = v115;
      if (v34)
      {
        *((void *)v32 + 15) = v34;
        operator delete(v34);
        *((void *)v32 + 14) = 0;
        *((void *)v32 + 15) = 0;
        *((void *)v32 + 16) = 0;
      }
      *((_OWORD *)v32 + 7) = v116;
      *((void *)v32 + 16) = v117;
      uint64_t v117 = 0;
      long long v116 = 0uLL;
      *((void *)v32 + 17) = v118;
      long long v38 = v120;
      *((_OWORD *)v32 + 9) = v119;
      *((_OWORD *)v32 + 10) = v38;
      *((_WORD *)v32 + 88) = v121;
    }
    uint64_t v39 = v61[5];
    for (uint64_t k = v61[6]; v39 != k; v39 += 8)
    {
      double v42 = *(double *)(*(void *)v39 + 8);
      double v41 = *(double *)(*(void *)v39 + 16);
      if (v42 >= v41) {
        double v43 = *(double *)(*(void *)v39 + 16);
      }
      else {
        double v43 = *(double *)(*(void *)v39 + 8);
      }
      if (v41 < v42) {
        double v41 = *(double *)(*(void *)v39 + 8);
      }
      HKIntervalMask<double>::_insertInterval(v74, v43, v41);
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::operator=((uint64_t)&v64.n128_i64[1], (uint64_t)&v67);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v67);
  }
  uint64_t v44 = v104;
  uint64_t v45 = v105;
  if (v104 != v105)
  {
    int v46 = (char *)v65[1];
    do
    {
      uint64_t v47 = *(void *)(*(void *)v44 + 24);
      uint64_t v48 = *(void *)(*(void *)v44 + 32);
      uint64_t v49 = *(void *)(*(void *)v44 + 8);
      uint64_t v50 = *(void *)(*(void *)v44 + 16);
      if ((unint64_t)v46 >= (unint64_t)v66)
      {
        v51 = (char *)v65[0];
        unint64_t v52 = 0xCCCCCCCCCCCCCCCDLL * ((v46 - (char *)v65[0]) >> 3);
        unint64_t v53 = v52 + 1;
        if (v52 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(v66 - (unint64_t)v65[0]) >> 3) > v53) {
          unint64_t v53 = 0x999999999999999ALL * ((uint64_t)(v66 - (unint64_t)v65[0]) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v66 - (unint64_t)v65[0]) >> 3) >= 0x333333333333333) {
          unint64_t v54 = 0x666666666666666;
        }
        else {
          unint64_t v54 = v53;
        }
        if (v54)
        {
          unint64_t v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v54);
          int v46 = (char *)v65[1];
          v51 = (char *)v65[0];
        }
        else
        {
          uint64_t v55 = 0;
        }
        unint64_t v56 = v54 + 40 * v52;
        *(void *)unint64_t v56 = v48;
        *(void *)(v56 + 8) = v47;
        *(void *)(v56 + 16) = v49;
        *(void *)(v56 + 24) = v50;
        *(_WORD *)(v56 + 32) = 1;
        v57 = (char *)v56;
        if (v46 != v51)
        {
          do
          {
            long long v58 = *(_OWORD *)(v46 - 40);
            long long v59 = *(_OWORD *)(v46 - 24);
            *((_WORD *)v57 - 4) = *((_WORD *)v46 - 4);
            *(_OWORD *)(v57 - 24) = v59;
            *(_OWORD *)(v57 - 40) = v58;
            v57 -= 40;
            v46 -= 40;
          }
          while (v46 != v51);
          v51 = (char *)v65[0];
        }
        int v46 = (char *)(v56 + 40);
        v65[0] = v57;
        v65[1] = (void *)(v56 + 40);
        *(void *)&long long v66 = v54 + 40 * v55;
        if (v51) {
          operator delete(v51);
        }
      }
      else
      {
        *(void *)int v46 = v48;
        *((void *)v46 + 1) = v47;
        *((void *)v46 + 2) = v49;
        *((void *)v46 + 3) = v50;
        *((_WORD *)v46 + 16) = 1;
        v46 += 40;
      }
      v65[1] = v46;
      v44 += 8;
    }
    while (v44 != v45);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v101);

  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::operator=((void *)(v62 + 112), &v64);
  if (v65[0])
  {
    v65[1] = v65[0];
    operator delete(v65[0]);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v64.n128_i64[1]);
}

void sub_1BD10EA34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table((uint64_t)&STACK[0x3F0]);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a3);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x3A0]);
  uint64_t v10 = (void *)STACK[0x388];
  if (STACK[0x388])
  {
    STACK[0x390] = (unint64_t)v10;
    operator delete(v10);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x360]);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::destroy((void *)STACK[0x350]);
  uint64_t v11 = (void *)STACK[0x300];
  if (STACK[0x300])
  {
    STACK[0x308] = (unint64_t)v11;
    operator delete(v11);
  }
  char v12 = (void *)STACK[0x2A0];
  if (STACK[0x2A0])
  {
    STACK[0x2A8] = (unint64_t)v12;
    operator delete(v12);
  }
  objc_destroyWeak((id *)&STACK[0x298]);
  char v13 = (void *)STACK[0x280];
  if (STACK[0x280])
  {
    STACK[0x288] = (unint64_t)v13;
    operator delete(v13);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x420]);
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_WORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 242) = 0u;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(void *)(a1 + 264) = a1 + 272;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_DWORD *)(a1 + 320) = 1065353216;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(void *)(a1 + 376) = 0;
  *(_DWORD *)(a1 + 384) = 1065353216;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_DWORD *)(a1 + 424) = 1065353216;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_DWORD *)(a1 + 464) = 1065353216;
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_configureForStartTime(uint64_t a1)
{
  unint64_t v28 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
    uint64_t v4 = [v2 dateIntervalContainingDate:v3 index:&v28];

    uint64_t v5 = [v4 startDate];
    [v5 timeIntervalSinceReferenceDate];
    double v7 = v6;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
LABEL_5:
    double v13 = v9;

    goto LABEL_6;
  }
  id v10 = *(id *)(a1 + 64);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v11 = [v10 startDate];
    [v11 timeIntervalSinceReferenceDate];
    double v7 = v12;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
    goto LABEL_5;
  }
  double v7 = -1.79769313e308;
  double v13 = 1.79769313e308;
LABEL_6:

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v21, WeakRetained, v7, v13);

  if (*(void *)(a1 + 32) == 1) {
    char v23 = 1;
  }
  uint64_t v22 = *(void *)(a1 + 56);
  char v24 = *(unsigned char *)(a1 + 24) & 1;
  if (v27 != (char *)(a1 + 72)) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27, *(char **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4);
  }
  objc_storeStrong(&v26, *(id *)(a1 + 640));
  if (!*(void *)(a1 + 40)) {
    int v25 = 0;
  }
  unint64_t v15 = v28;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v21);
  v18.n128_u64[0] = v15;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)&v18.n128_i64[1], (uint64_t)v17);
  long long __p = 0u;
  long long v20 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::operator=((void *)(a1 + 112), &v18);

  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v18.n128_i64[1]);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v17);
  *(unsigned char *)(a1 + 624) = 0;
  return HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v21);
}

void sub_1BD10EEB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 96);
  double v7 = *(unsigned char **)(a2 + 104);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(void *)(a1 + 96) = v10;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(void *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  long long v12 = *(_OWORD *)(a2 + 128);
  long long v13 = *(_OWORD *)(a2 + 144);
  long long v14 = *(_OWORD *)(a2 + 160);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(_OWORD *)(a1 + 144) = v13;
  *(_OWORD *)(a1 + 160) = v14;
  *(_OWORD *)(a1 + 128) = v12;
  uint64_t v15 = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 184) = v15;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 192), *(const void **)(a2 + 192), *(void *)(a2 + 200), (uint64_t)(*(void *)(a2 + 200) - *(void *)(a2 + 192)) >> 4);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  long long v16 = *(_OWORD *)(a2 + 240);
  uint64_t v17 = *(void *)(a2 + 256);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v16;
  __n128 v18 = (void *)(a1 + 272);
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 256) = v17;
  *(void *)(a1 + 264) = a1 + 272;
  uint64_t v19 = *(void **)(a2 + 264);
  if (v19 != (void *)(a2 + 272))
  {
    long long v20 = 0;
    long long v21 = (void *)(a1 + 272);
    while (1)
    {
      uint64_t v22 = (void *)(a1 + 272);
      if (v21 == v18) {
        goto LABEL_12;
      }
      char v23 = v20;
      char v24 = (void *)(a1 + 272);
      if (v20)
      {
        do
        {
          uint64_t v22 = v23;
          char v23 = (void *)v23[1];
        }
        while (v23);
      }
      else
      {
        do
        {
          uint64_t v22 = (void *)v24[2];
          BOOL v25 = *v22 == (void)v24;
          char v24 = v22;
        }
        while (v25);
      }
      uint64_t v26 = v19[4];
      if (v22[4] < v26)
      {
LABEL_12:
        if (v20) {
          uint64_t v27 = (uint64_t **)v22;
        }
        else {
          uint64_t v27 = (uint64_t **)(a1 + 272);
        }
        if (v20) {
          unint64_t v28 = (uint64_t **)(v22 + 1);
        }
        else {
          unint64_t v28 = (uint64_t **)(a1 + 272);
        }
        if (!*v28)
        {
LABEL_28:
          uint64_t v31 = operator new(0xB8uLL);
          v31[4] = v19[4];
          *((_DWORD *)v31 + 10) = *((_DWORD *)v19 + 10);
          long long v32 = *((_OWORD *)v19 + 3);
          long long v33 = *((_OWORD *)v19 + 4);
          long long v34 = *((_OWORD *)v19 + 5);
          v31[12] = v19[12];
          *((_OWORD *)v31 + 4) = v33;
          *((_OWORD *)v31 + 5) = v34;
          *((_OWORD *)v31 + 3) = v32;
          uint64_t v35 = v19[13];
          v31[14] = 0;
          v31[13] = v35;
          v31[15] = 0;
          v31[16] = 0;
          std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v31 + 14, (const void *)v19[14], v19[15], (uint64_t)(v19[15] - v19[14]) >> 4);
          v31[17] = v19[17];
          long long v36 = *((_OWORD *)v19 + 9);
          long long v37 = *((_OWORD *)v19 + 10);
          v31[22] = v19[22];
          *((_OWORD *)v31 + 9) = v36;
          *((_OWORD *)v31 + 10) = v37;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 264), (uint64_t)v27, v28, v31);
        }
      }
      else
      {
        unint64_t v28 = (uint64_t **)(a1 + 272);
        uint64_t v27 = (uint64_t **)(a1 + 272);
        if (!v20) {
          goto LABEL_28;
        }
        char v29 = v20;
        while (1)
        {
          while (1)
          {
            uint64_t v27 = (uint64_t **)v29;
            uint64_t v30 = v29[4];
            if (v30 <= v26) {
              break;
            }
            char v29 = *v27;
            unint64_t v28 = v27;
            if (!*v27) {
              goto LABEL_28;
            }
          }
          if (v30 >= v26) {
            break;
          }
          char v29 = v27[1];
          if (!v29)
          {
            unint64_t v28 = v27 + 1;
            goto LABEL_28;
          }
        }
      }
      long long v38 = (void *)v19[1];
      if (v38)
      {
        do
        {
          uint64_t v39 = v38;
          long long v38 = (void *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          uint64_t v39 = (void *)v19[2];
          BOOL v25 = *v39 == (void)v19;
          uint64_t v19 = v39;
        }
        while (!v25);
      }
      if (v39 == (void *)(a2 + 272)) {
        break;
      }
      long long v20 = (void *)*v18;
      long long v21 = *(void **)(a1 + 264);
      uint64_t v19 = v39;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 288, a2 + 288);
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 328), *(const void **)(a2 + 328), *(void *)(a2 + 336), (uint64_t)(*(void *)(a2 + 336) - *(void *)(a2 + 328)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 352, a2 + 352);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 392, a2 + 392);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 432, a2 + 432);
  return a1;
}

void sub_1BD10F27C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, id *location, void **a12)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v17);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  uint64_t v19 = *v15;
  if (*v15)
  {
    *(void *)(v12 + 336) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::destroy(*v13);
  long long v20 = *a9;
  if (*a9)
  {
    *(void *)(v12 + 200) = v20;
    operator delete(v20);
  }
  long long v21 = *a10;
  if (*a10)
  {
    *(void *)(v12 + 104) = v21;
    operator delete(v21);
  }
  objc_destroyWeak(location);
  uint64_t v22 = *a12;
  if (*a12)
  {
    *(void *)(v12 + 72) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  double v4 = *(double *)a2;
  id v5 = objc_alloc(MEMORY[0x1E4F1C9C8]);
  long long v6 = (double *)(a2 + 40);
  if (v4 != -1.79769313e308) {
    long long v6 = (double *)a2;
  }
  int8x16_t v72 = (void *)[v5 initWithTimeIntervalSinceReferenceDate:*v6];
  if (*(double *)(a2 + 8) == 1.79769313e308) {
    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 48)];
  }
  else {
    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 8)];
  }
  uint64_t v8 = (void *)v7;
  id v9 = *(id *)(a1 + 16);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v10 = *(id *)(a1 + 16);
    if ([v10 shouldUseUnderlyingTypeForStatistics])
    {
      uint64_t v11 = [v10 underlyingSampleType];

      id v9 = (id)v11;
    }
  }
  uint64_t v12 = (void *)[objc_alloc(MEMORY[0x1E4F2B5B0]) initWithDataType:v9 startDate:v72 endDate:v8];
  if (*(unsigned char *)(a1 + 24))
  {
    v2 = (id *)(a1 + 48);
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      id v14 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      uint64_t v15 = *(uint64_t **)(a2 + 328);
      uint64_t v16 = *(uint64_t **)(a2 + 336);
      while (v15 != v16)
      {
        uint64_t v17 = *v15;
        id v18 = objc_loadWeakRetained(v2);
        uint64_t v19 = [v18 sourceForSourceID:v17];

        if (v19)
        {
          if (([v14 containsObject:v19] & 1) == 0) {
            [v14 addObject:v19];
          }
        }

        ++v15;
      }
      v2 = (id *)[v14 copy];
      [v12 _setSources:v2];
    }
  }

  v80[0] = &unk_1F1725070;
  v80[3] = v80;
  id v73 = v12;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)v82, (uint64_t)v80);
  v84 = 0;
  long long v20 = operator new(0x28uLL);
  *long long v20 = &unk_1F1724F50;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(v20 + 1), (uint64_t)v82);
  v84 = v20;
  id v21 = v73;
  uint64_t v22 = (void *)MEMORY[0x1E4F2B370];
  char v23 = [MEMORY[0x1E4F2B618] secondUnit];
  __n128 v24 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v76, a2);
  if (!v84) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v25 = (*(uint64_t (**)(void *, unsigned char *, __n128))(*v84 + 48))(v84, v76, v24);
  uint64_t v26 = *(double **)(v25 + 8);
  double v27 = 0.0;
  while (v26 != *(double **)(v25 + 16))
  {
    double v29 = *v26;
    double v28 = v26[1];
    v26 += 2;
    double v27 = v27 + v28 - v29;
  }
  uint64_t v30 = [v22 quantityWithUnit:v23 doubleValue:v27 + *(double *)(v25 + 32)];
  [v21 setDuration:v30];

  if (__p)
  {
    long long v79 = __p;
    operator delete(__p);
  }

  __n128 v31 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v76, a2);
  if (!v84) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  objc_msgSend(v21, "setDataCount:", *(void *)(*(uint64_t (**)(void *, unsigned char *, __n128))(*v84 + 48))(v84, v76, v31));
  if (__p)
  {
    long long v79 = __p;
    operator delete(__p);
  }
  if (*(unsigned char *)(a1 + 24))
  {
    id v32 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v33 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier((uint64_t)v76, a2);
    for (i = v77; i; i = (uint64_t **)*i)
    {
      uint64_t v35 = i[2];
      long long v36 = (void *)MEMORY[0x1E4F2B370];
      long long v37 = [MEMORY[0x1E4F2B618] secondUnit];
      if (!v84) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v38 = (*(uint64_t (**)(void *, uint64_t *))(*v84 + 48))(v84, (uint64_t *)i + 3);
      uint64_t v39 = *(double **)(v38 + 8);
      double v40 = 0.0;
      while (v39 != *(double **)(v38 + 16))
      {
        double v42 = *v39;
        double v41 = v39[1];
        v39 += 2;
        double v40 = v40 + v41 - v42;
      }
      double v43 = [v36 quantityWithUnit:v37 doubleValue:v40 + *(double *)(v38 + 32)];
      [v32 setObject:v43 forKeyedSubscript:v35];

      if (!v84) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)(*(uint64_t (**)(void *, uint64_t *))(*v84 + 48))(v84, (uint64_t *)i + 3));
      v2 = (id *)objc_claimAutoreleasedReturnValue();
      [v33 setObject:v2 forKeyedSubscript:v35];
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::~__hash_table((uint64_t)v76);
    [v21 setDurationBySource:v32];
    [v21 setDataCountBySource:v33];
  }
  std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v83);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v82);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)v81, (uint64_t)v80);
  v84 = 0;
  uint64_t v44 = operator new(0x28uLL);
  *uint64_t v44 = &unk_1F1724FE0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(v44 + 1), (uint64_t)v81);
  v84 = v44;
  id v75 = v21;
  uint64_t v45 = (void *)MEMORY[0x1E4F2B370];
  int v46 = [MEMORY[0x1E4F2B618] secondUnit];
  __n128 v47 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v76, a2);
  if (!v84) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  objc_msgSend(v45, "quantityWithUnit:doubleValue:", v46, *(double *)(*(uint64_t (**)(void *, unsigned char *, __n128))(*v84 + 48))(v84, v76, v47));
  id v48 = (id)objc_claimAutoreleasedReturnValue();
  [v75 setDuration:v48];

  if (__p)
  {
    long long v79 = __p;
    operator delete(__p);
  }

  __n128 v49 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v76, a2);
  if (!v84) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  objc_msgSend(v75, "setDataCount:", *(void *)((*(uint64_t (**)(void *, unsigned char *, __n128))(*v84 + 48))(v84, v76, v49) + 8));
  if (__p)
  {
    long long v79 = __p;
    operator delete(__p);
  }
  __n128 v50 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v76, a2);
  if (!v84) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v51 = (*(uint64_t (**)(void *, unsigned char *, __n128))(*v84 + 48))(v84, v76, v50);
  double v52 = *(double *)(v51 + 24);
  double v53 = *(double *)(v51 + 32);
  if (__p)
  {
    long long v79 = __p;
    operator delete(__p);
  }
  unint64_t v54 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v52, v53);
  [v75 setMostRecentQuantityDateInterval:v54];

  if (*(unsigned char *)(a1 + 24))
  {
    id v55 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v48 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v56 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier((uint64_t)v76, a2);
    for (j = v77; j; j = (uint64_t **)*j)
    {
      long long v58 = j[2];
      long long v59 = (void *)MEMORY[0x1E4F2B370];
      id v60 = [MEMORY[0x1E4F2B618] secondUnit];
      if (!v84) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      v61 = objc_msgSend(v59, "quantityWithUnit:doubleValue:", v60, *(double *)(*(uint64_t (**)(void *, uint64_t *))(*v84 + 48))(v84, (uint64_t *)j + 3));
      [v55 setObject:v61 forKeyedSubscript:v58];

      if (!v84) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v62 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)((*(uint64_t (**)(void *, uint64_t *))(*v84 + 48))(v84, (uint64_t *)j + 3) + 8));
      [v48 setObject:v62 forKeyedSubscript:v58];

      if (!v84) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v63 = (*(uint64_t (**)(void *, uint64_t *))(*v84 + 48))(v84, (uint64_t *)j + 3);
      objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", *(double *)(v63 + 24), *(double *)(v63 + 32));
      v2 = (id *)objc_claimAutoreleasedReturnValue();
      [v56 setObject:v2 forKeyedSubscript:v58];
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::~__hash_table((uint64_t)v76);
    [v75 setDurationBySource:v55];
    [v75 setDataCountBySource:v48];
    [v75 setMostRecentQuantityDateIntervalBySource:v56];
  }
  std::__function::__value_func<HDStatisticsAverageSampleDuration const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v83);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v81);

  std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v80);
  __n128 v64 = [*(id *)(a1 + 16) _unitForChangeInCanonicalUnit];
  v65 = [v75 averageQuantity];
  if (v65)
  {
    id v48 = [v75 averageQuantity];
    if (([v48 isCompatibleWithUnit:v64] & 1) == 0)
    {

LABEL_67:
      [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8], @"Expected compatibility with %@", v64 format];
      goto LABEL_68;
    }
  }
  long long v66 = [v75 minimumQuantity];
  if (v66)
  {
    v2 = [v75 minimumQuantity];
    if (![v2 isCompatibleWithUnit:v64])
    {
      int v67 = 1;
      goto LABEL_61;
    }
  }
  uint64_t v68 = [v75 maximumQuantity];
  if (v68)
  {
    char v69 = [v75 maximumQuantity];
    int v70 = [v69 isCompatibleWithUnit:v64];

    int v67 = v70 ^ 1;
    if (v66) {
      goto LABEL_61;
    }
  }
  else
  {
    int v67 = 0;
    if (v66)
    {
LABEL_61:

      if (v65) {
        goto LABEL_62;
      }
LABEL_66:

      if (!v67) {
        goto LABEL_68;
      }
      goto LABEL_67;
    }
  }
  if (!v65) {
    goto LABEL_66;
  }
LABEL_62:

  if (v67) {
    goto LABEL_67;
  }
LABEL_68:

  return v75;
}

void sub_1BD10FDF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (v38) {
  if (v36)
  }

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 312);
  uint64_t v2 = *(void *)(a1 + 328);
  if (v1 != (*(void *)(a1 + 336) - v2) >> 3)
  {
    double v4 = (void **)(a1 + 328);
    *(void *)(a1 + 336) = v2;
    std::vector<long long>::reserve((void **)(a1 + 328), v1);
    id v5 = *(void **)(a1 + 304);
    if (v5)
    {
      long long v6 = *(char **)(a1 + 336);
      do
      {
        uint64_t v7 = v5[2];
        unint64_t v8 = *(void *)(a1 + 344);
        if ((unint64_t)v6 >= v8)
        {
          id v10 = (char *)*v4;
          uint64_t v11 = (v6 - (unsigned char *)*v4) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            id v10 = *(char **)(a1 + 328);
            long long v6 = *(char **)(a1 + 336);
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v16 = (void *)(v14 + 8 * v11);
          void *v16 = v7;
          id v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            uint64_t v17 = *((void *)v6 - 1);
            v6 -= 8;
            *--uint64_t v16 = v17;
          }
          *(void *)(a1 + 328) = v16;
          *(void *)(a1 + 336) = v9;
          *(void *)(a1 + 344) = v14 + 8 * v15;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)long long v6 = v7;
          id v9 = v6 + 8;
        }
        *(void *)(a1 + 336) = v9;
        id v5 = (void *)*v5;
        long long v6 = v9;
      }
      while (v5);
    }
    id v18 = (id *)(a1 + 88);
    id WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      id v20 = objc_loadWeakRetained(v18);
      [v20 orderSourceIDs:v4];
    }
  }
}

void sub_1BD110294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2) {
    a2 = v4 * floor(a2 / v4);
  }
  double v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    uint64_t v102 = (char **)(a1 + 96);
    location = (id *)(a1 + 88);
    long long v99 = (uint64_t *)(a1 + 120);
    int v94 = (void *)(a1 + 272);
    long long v95 = (double **)(a1 + 192);
    do
    {
      unint64_t v6 = *(void *)(a1 + 96);
      uint64_t v7 = *(long long **)(a1 + 104);
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v7 - v6) >> 4);
      if (v8)
      {
        if (v8 != 1)
        {
          double v16 = a2;
          double v17 = a2;
          double v18 = v5;
          uint64_t v19 = *(void *)(a1 + 96);
          if ((long long *)v6 != v7)
          {
            do
            {
              double v20 = *(double *)(v19 + 8);
              double v21 = *(double *)(v19 + 16);
              if (v20 > v18 && v20 < v17) {
                double v17 = *(double *)(v19 + 8);
              }
              if (v21 > v5) {
                double v23 = *(double *)(v19 + 16);
              }
              else {
                double v23 = v16;
              }
              if (v21 < v16)
              {
                double v18 = v5;
                double v16 = v23;
              }
              v19 += 48;
            }
            while ((long long *)v19 != v7);
          }
          if (v16 >= v17) {
            double v24 = v17;
          }
          else {
            double v24 = v16;
          }
          double v25 = *(double *)(a1 + 16);
          if (v25 > 0.0)
          {
            double v26 = v25 * floor(v24 / v25);
            double v27 = v25 * floor((v25 + v5) / v25);
            if (v26 >= v27) {
              double v24 = v26;
            }
            else {
              double v24 = v27;
            }
          }
          *uint64_t v102 = 0;
          v102[1] = 0;
          v102[2] = 0;
          if ((long long *)v6 != v7)
          {
            if (v8 > 0x555555555555555) {
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            }
            double v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v8);
            __n128 v31 = *(char **)(a1 + 96);
            uint64_t v30 = *(char **)(a1 + 104);
            id v32 = v28;
            if (v30 != v31)
            {
              do
              {
                long long v33 = *((_OWORD *)v30 - 3);
                long long v34 = *((_OWORD *)v30 - 2);
                *(_OWORD *)(v32 - 21) = *(_OWORD *)(v30 - 21);
                *((_OWORD *)v32 - 3) = v33;
                *((_OWORD *)v32 - 2) = v34;
                v32 -= 48;
                v30 -= 48;
              }
              while (v30 != v31);
              uint64_t v30 = *v102;
            }
            *(void *)(a1 + 96) = v32;
            *(void *)(a1 + 104) = v28;
            *(void *)(a1 + 112) = &v28[48 * v29];
            if (v30) {
              operator delete(v30);
            }
          }
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_updateSourceOrder(a1);
          id WeakRetained = objc_loadWeakRetained(location);

          if (WeakRetained)
          {
            *(void *)&v106.var0 = a1;
            unint64_t v36 = 126 - 2 * __clz(v8);
            if ((long long *)v6 == v7) {
              uint64_t v37 = 0;
            }
            else {
              uint64_t v37 = v36;
            }
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(v6, v7, (uint64_t)&v106, v37, 1);
          }
          if (*(unsigned char *)(a1 + 25)) {
            id v98 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
          }
          else {
            id v98 = 0;
          }
          int v97 = (void *)v6;
          if ((long long *)v6 == v7)
          {
LABEL_118:
            *(double *)(a1 + 216) = HKIntervalMask<double>::removeIntervalsBefore(v95, v24) + *(double *)(a1 + 216);
            long long v87 = *(void **)(a1 + 264);
            if (v87 != v94)
            {
              do
              {
                *((double *)v87 + 17) = HKIntervalMask<double>::removeIntervalsBefore((double **)v87 + 14, v24)
                                      + *((double *)v87 + 17);
                long long v88 = (void *)v87[1];
                if (v88)
                {
                  do
                  {
                    int v89 = v88;
                    long long v88 = (void *)*v88;
                  }
                  while (v88);
                }
                else
                {
                  do
                  {
                    int v89 = (void *)v87[2];
                    BOOL v90 = *v89 == (void)v87;
                    long long v87 = v89;
                  }
                  while (!v90);
                }
                long long v87 = v89;
              }
              while (v89 != v94);
            }
            *(double *)(a1 + 56) = v24;

            if (v97) {
              operator delete(v97);
            }
            goto LABEL_127;
          }
          int64_t v100 = 0;
          v101 = v7;
          char v38 = 0;
          unint64_t v39 = v6;
          while (2)
          {
            long long v104 = 0u;
            long long v105 = 0u;
            BOOL var4 = 0;
            long long v40 = *(_OWORD *)(v39 + 16);
            *(_OWORD *)&v106.var0 = *(_OWORD *)v39;
            *(_OWORD *)&v106.var2 = v40;
            *(void *)&v106.BOOL var4 = *(void *)(v39 + 32);
            double var1 = v106.var1;
            if (v106.var4 && v106.var1 > v24)
            {
              long long v45 = *(_OWORD *)(v39 + 16);
              long long v104 = *(_OWORD *)v39;
              long long v105 = v45;
              BOOL var4 = v106.var4;
              BOOL var5 = v106.var5;
              p_BOOL var4 = &v106.var4;
            }
            else
            {
              BOOL var5 = 0;
              p_BOOL var4 = &var4;
            }
            BOOL *p_var4 = 0;
            if (v106.var4)
            {
              for (i = *(double **)(a1 + 64); i != *(double **)(a1 + 72) && var1 >= *i; i += 2)
              {
                if (var1 < i[1])
                {
                  v106.BOOL var4 = 0;
                  int v47 = *(unsigned __int8 *)(v39 + 42);
                  LOBYTE(v48) = *(unsigned char *)(v39 + 41);
                  char v49 = *(unsigned char *)(v39 + 40);
                  goto LABEL_92;
                }
              }
              int v47 = *(unsigned __int8 *)(v39 + 42);
              int v48 = *(unsigned __int8 *)(v39 + 41);
              char v49 = *(unsigned char *)(v39 + 40);
              if (v38)
              {
                unint64_t var3 = v106.var3;
                if (v100 == v106.var3 || *(unsigned char *)(a1 + 24))
                {
                  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::addSample(v99, &v106, v47 == 0);
                  int v47 = 1;
                }
              }
              else
              {
                HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::addSample(v99, &v106, v47 == 0);
                int v47 = 1;
                unint64_t var3 = v106.var3;
                int64_t v100 = v106.var3;
              }
              if (!*(unsigned char *)(a1 + 25)) {
                goto LABEL_91;
              }
              id v56 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a1, var3);
              if (!v56) {
                goto LABEL_90;
              }
              v57 = [v98 objectForKeyedSubscript:v56];
              long long v58 = v57;
              if (v57)
              {
                if ([v57 longLongValue] != var3 && !*(unsigned char *)(a1 + 24))
                {
LABEL_89:

LABEL_90:
LABEL_91:
                  char v38 = 1;
LABEL_92:
                  BOOL v67 = var4;
                  if (var4)
                  {
                    BOOL v68 = v47 != 0;
                    unint64_t v69 = *(void *)(a1 + 104);
                    unint64_t v70 = *(void *)(a1 + 112);
                    if (v69 < v70)
                    {
                      long long v71 = v105;
                      *(_OWORD *)unint64_t v69 = v104;
                      *(_OWORD *)(v69 + 16) = v71;
                      *(unsigned char *)(v69 + 32) = v67;
                      *(unsigned char *)(v69 + 33) = var5;
                      *(unsigned char *)(v69 + 40) = v49;
                      *(unsigned char *)(v69 + 41) = v48;
                      *(unsigned char *)(v69 + 42) = v68;
                      id v55 = (_OWORD *)(v69 + 48);
                      uint64_t v7 = v101;
                      goto LABEL_116;
                    }
                    unint64_t v72 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v69 - (void)*v102) >> 4);
                    unint64_t v73 = v72 + 1;
                    if (v72 + 1 > 0x555555555555555) {
                      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                    }
                    unint64_t v74 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v70 - (void)*v102) >> 4);
                    if (2 * v74 > v73) {
                      unint64_t v73 = 2 * v74;
                    }
                    if (v74 >= 0x2AAAAAAAAAAAAAALL) {
                      unint64_t v62 = 0x555555555555555;
                    }
                    else {
                      unint64_t v62 = v73;
                    }
                    if (v62) {
                      unint64_t v62 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v62);
                    }
                    else {
                      uint64_t v63 = 0;
                    }
                    unint64_t v75 = v62 + 48 * v72;
                    long long v76 = v105;
                    *(_OWORD *)unint64_t v75 = v104;
                    *(_OWORD *)(v75 + 16) = v76;
                    *(unsigned char *)(v75 + 32) = v67;
                    *(unsigned char *)(v75 + 33) = var5;
                    *(unsigned char *)(v75 + 40) = v49;
                    *(unsigned char *)(v75 + 41) = v48;
                    *(unsigned char *)(v75 + 42) = v68;
                    int v78 = *(char **)(a1 + 96);
                    unint64_t v77 = *(char **)(a1 + 104);
                    unint64_t v79 = v75;
                    if (v77 != v78)
                    {
                      uint64_t v7 = v101;
                      do
                      {
                        long long v80 = *((_OWORD *)v77 - 3);
                        long long v81 = *((_OWORD *)v77 - 2);
                        *(_OWORD *)(v79 - 21) = *(_OWORD *)(v77 - 21);
                        *(_OWORD *)(v79 - 48) = v80;
                        *(_OWORD *)(v79 - 32) = v81;
                        v79 -= 48;
                        v77 -= 48;
                      }
                      while (v77 != v78);
                      goto LABEL_113;
                    }
                    uint64_t v7 = v101;
                    goto LABEL_114;
                  }
                  uint64_t v7 = v101;
LABEL_117:
                  v39 += 48;
                  if ((long long *)v39 == v7) {
                    goto LABEL_118;
                  }
                  continue;
                }
              }
              else
              {
                __n128 v64 = [NSNumber numberWithLongLong:var3];
                [v98 setObject:v64 forKeyedSubscript:v56];
              }
              unint64_t v65 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(a1, var3);
              long long v66 = (uint64_t *)HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_statisticsForSource(a1, v65);
              HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::addSample(v66, &v106, v48 == 0);
              LOBYTE(v48) = 1;
              goto LABEL_89;
            }
            break;
          }
          uint64_t v51 = *(long long **)(a1 + 104);
          unint64_t v52 = *(void *)(a1 + 112);
          if ((unint64_t)v51 < v52)
          {
            long long v53 = *(_OWORD *)v39;
            long long v54 = *(_OWORD *)(v39 + 32);
            v51[1] = *(_OWORD *)(v39 + 16);
            v51[2] = v54;
            long long *v51 = v53;
            id v55 = v51 + 3;
            goto LABEL_116;
          }
          unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * (((char *)v51 - *v102) >> 4);
          unint64_t v60 = v59 + 1;
          if (v59 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - (void)*v102) >> 4);
          if (2 * v61 > v60) {
            unint64_t v60 = 2 * v61;
          }
          if (v61 >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v62 = 0x555555555555555;
          }
          else {
            unint64_t v62 = v60;
          }
          if (v62) {
            unint64_t v62 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v62);
          }
          else {
            uint64_t v63 = 0;
          }
          unint64_t v75 = v62 + 48 * v59;
          long long v82 = *(_OWORD *)v39;
          long long v83 = *(_OWORD *)(v39 + 32);
          *(_OWORD *)(v75 + 16) = *(_OWORD *)(v39 + 16);
          *(_OWORD *)(v75 + 32) = v83;
          *(_OWORD *)unint64_t v75 = v82;
          v84 = *(char **)(a1 + 96);
          unint64_t v77 = *(char **)(a1 + 104);
          unint64_t v79 = v75;
          if (v77 != v84)
          {
            do
            {
              long long v85 = *((_OWORD *)v77 - 3);
              long long v86 = *((_OWORD *)v77 - 2);
              *(_OWORD *)(v79 - 21) = *(_OWORD *)(v77 - 21);
              *(_OWORD *)(v79 - 48) = v85;
              *(_OWORD *)(v79 - 32) = v86;
              v79 -= 48;
              v77 -= 48;
            }
            while (v77 != v84);
LABEL_113:
            unint64_t v77 = *v102;
          }
LABEL_114:
          id v55 = (_OWORD *)(v75 + 48);
          *(void *)(a1 + 96) = v79;
          *(void *)(a1 + 104) = v75 + 48;
          *(void *)(a1 + 112) = v62 + 48 * v63;
          if (v77) {
            operator delete(v77);
          }
LABEL_116:
          *(void *)(a1 + 104) = v55;
          goto LABEL_117;
        }
        int v9 = *(unsigned __int8 *)(v6 + 42);
        int v10 = *(unsigned __int8 *)(v6 + 41);
        __int16 v109 = 0;
        long long v107 = 0u;
        long long v108 = 0u;
        long long v11 = *(_OWORD *)(v6 + 16);
        *(_OWORD *)&v106.var0 = *(_OWORD *)v6;
        *(_OWORD *)&v106.var2 = v11;
        *(void *)&v106.BOOL var4 = *(void *)(v6 + 32);
        unint64_t v12 = *(double **)(a1 + 64);
        for (j = *(double **)(a1 + 72); v12 != j; v12 += 2)
        {
          if (v106.var1 < *v12) {
            break;
          }
          if (v106.var1 < v12[1]) {
            goto LABEL_15;
          }
        }
        if (v106.var4)
        {
          HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::addSample(v99, &v106, v9 == 0);
          if (*(unsigned char *)(a1 + 25))
          {
            unint64_t v14 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(a1, v106.var3);
            uint64_t v15 = (uint64_t *)HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_statisticsForSource(a1, v14);
            HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::addSample(v15, &v106, v10 == 0);
          }
        }
LABEL_15:
        *(void *)(a1 + 104) = *(void *)(a1 + 96);
      }
      *(double *)(a1 + 56) = a2;
LABEL_127:
      double v91 = *(double *)(a1 + 56);
      if (v91 == v5)
      {
        long long v92 = [MEMORY[0x1E4F28B00] currentHandler];
        uint64_t v93 = objc_msgSend(NSString, "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration, HDStatisticsTimeInterval>>>::_mergeThroughTime(double) [Statistics = HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration, HDStatisticsTimeInterval>>]");
        [v92 handleFailureInFunction:v93 file:@"HDStatisticsBucket.hpp" lineNumber:234 description:@"Failed to make forward progress during statistics merge."];

        double v91 = *(double *)(a1 + 56);
      }
      double v5 = v91;
    }
    while (v91 < a2);
  }
}

void sub_1BD110AD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::addSample(uint64_t *result, HDRawQuantitySample *a2, int a3)
{
  double v4 = a2;
  double v5 = result;
  int v6 = 2 * (a2->var0 != -1.79769313e308);
  if (a2->var0 == 1.79769313e308) {
    int v6 = 1;
  }
  switch(v6)
  {
    case 0:
      if (*(_DWORD *)result || result[2]) {
        return result;
      }
      *((double *)result + 1) = a2->var2 - a2->var1;
      result[2] = 1;
      int v10 = result + 8;
      goto LABEL_26;
    case 1:
      if (*(_DWORD *)result) {
        return result;
      }
      int v11 = 1;
      break;
    case 2:
      if (*(_DWORD *)result == 2)
      {
        double v7 = a2->var2 - a2->var1;
        uint64_t v8 = result[2];
        if (v8)
        {
          uint64_t v9 = v8 + 1;
          double v7 = *((double *)result + 1) + (v7 - *((double *)result + 1)) / (double)v9;
        }
        else
        {
          uint64_t v9 = 1;
        }
        *((double *)result + 1) = v7;
        result[2] = v9;
        int v10 = result + 8;
        int v19 = 1;
        goto LABEL_29;
      }
      int v11 = 2;
      break;
    default:
      return result;
  }
  *(_DWORD *)result = v11;
  *(_OWORD *)(result + 1) = 0u;
  unint64_t v12 = (double *)(result + 1);
  unint64_t v14 = result + 9;
  uint64_t v13 = (void *)result[9];
  *(_OWORD *)(v5 + 3) = 0u;
  *(_OWORD *)(v5 + 5) = 0u;
  *(_OWORD *)(v5 + 7) = 0u;
  if (!v13)
  {
    *unint64_t v14 = 0uLL;
    *(_OWORD *)(v5 + 11) = 0uLL;
LABEL_21:
    *(_OWORD *)(v5 + 3) = *(_OWORD *)(v5 + 13);
    *(_OWORD *)(v5 + 5) = *(_OWORD *)(v5 + 15);
    *((_WORD *)v5 + 28) = *((_WORD *)v5 + 68);
    goto LABEL_22;
  }
  v5[10] = (uint64_t)v13;
  operator delete(v13);
  int v15 = *((unsigned __int8 *)v5 + 56);
  *unint64_t v14 = 0u;
  *(_OWORD *)(v5 + 11) = 0u;
  if (!v15 || *((double *)v5 + 4) <= *((double *)v5 + 14)) {
    goto LABEL_21;
  }
LABEL_22:
  double v16 = v4->var2 - v4->var1;
  uint64_t v17 = v5[2];
  if (v17)
  {
    uint64_t v18 = v17 + 1;
    double v16 = *v12 + (v16 - *v12) / (double)v18;
  }
  else
  {
    uint64_t v18 = 1;
  }
  *((double *)v5 + 1) = v16;
  v5[2] = v18;
  int v10 = v5 + 8;
LABEL_26:
  a2 = v4;
  int v19 = a3;
LABEL_29:

  return HDStatisticsTimeInterval::addSample(v10, a2, v19);
}

unint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    double v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((void *)(a1 + 352), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a1, a2);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      id v10 = v6;
      double v7 = (void *)(a1 + 392);
      uint64_t v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        int v11 = &v10;
        *((void *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        id v6 = v10;
      }
    }
  }
  return a2;
}

void sub_1BD110E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  double v4 = (id *)(a1 + 88);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    id v6 = (void *)(a1 + 432);
    double v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
    if (v7)
    {
      id v8 = (id)v7[3];
    }
    else
    {
      id v9 = objc_loadWeakRetained(v4);
      id v8 = [v9 bundleIdentifierForSourceID:a2];

      if (v8)
      {
        id v10 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
        objc_storeStrong(v10 + 3, v8);
      }
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1BD110EEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v12 = a2 - 3;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 4);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v103 = *((void *)a2 - 3);
                uint64_t v104 = *(void *)(v13 + 24);
                if (v103 == v104) {
                  return;
                }
                long long v105 = *(char **)(*(void *)a3 + 328);
                HDRawQuantitySample v106 = *(char **)(*(void *)a3 + 336);
                long long v107 = v105;
                long long v108 = v105;
                if (v105 == v106) {
                  goto LABEL_171;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)v13, (long long *)(v13 + 48), a2 - 3, a3);
                return;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, (uint64_t)(a2 - 3), a3);
                return;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, v13 + 144, (uint64_t)(a2 - 3), a3);
                return;
              default:
                JUMPOUT(0);
            }
            do
            {
              if (*(void *)v108 == v103) {
                goto LABEL_168;
              }
              v108 += 8;
            }
            while (v108 != v106);
            long long v108 = *(char **)(*(void *)a3 + 336);
LABEL_168:
            while (*(void *)v107 != v104)
            {
              v107 += 8;
              if (v107 == v106)
              {
                long long v107 = *(char **)(*(void *)a3 + 336);
                break;
              }
            }
LABEL_171:
            if (v108 - v105 < v107 - v105)
            {
              *(_OWORD *)v226 = *(_OWORD *)(v13 + 16);
              *(_OWORD *)&v226[16] = *(_OWORD *)(v13 + 32);
              long long v218 = *(_OWORD *)v13;
              long long v109 = *v12;
              long long v110 = *(a2 - 2);
              *(_OWORD *)(v13 + 27) = *(long long *)((char *)a2 - 21);
              *(_OWORD *)unint64_t v13 = v109;
              *(_OWORD *)(v13 + 16) = v110;
              *(long long *)((char *)a2 - 21) = *(_OWORD *)&v226[11];
              long long *v12 = v218;
              *(a2 - 2) = *(_OWORD *)v226;
            }
            return;
          }
          if (v14 <= 1151)
          {
            long long v111 = (long long *)(v13 + 48);
            BOOL v113 = (long long *)v13 == a2 || v111 == a2;
            if (a5)
            {
              if (!v113)
              {
                unint64_t v114 = v13;
                do
                {
                  unint64_t v115 = v114;
                  unint64_t v114 = (unint64_t)v111;
                  uint64_t v116 = *(void *)(v115 + 72);
                  uint64_t v117 = *(void *)(v115 + 24);
                  if (v116 != v117)
                  {
                    uint64_t v118 = *(char **)(*(void *)a3 + 328);
                    long long v119 = *(char **)(*(void *)a3 + 336);
                    long long v120 = v118;
                    __int16 v121 = v118;
                    if (v118 != v119)
                    {
                      do
                      {
                        if (*(void *)v121 == v116) {
                          goto LABEL_196;
                        }
                        v121 += 8;
                      }
                      while (v121 != v119);
                      __int16 v121 = *(char **)(*(void *)a3 + 336);
LABEL_196:
                      while (*(void *)v120 != v117)
                      {
                        v120 += 8;
                        if (v120 == v119)
                        {
                          long long v120 = *(char **)(*(void *)a3 + 336);
                          break;
                        }
                      }
                    }
                    if (v121 - v118 < v120 - v118)
                    {
                      uint64_t v227 = *(void *)(v114 + 16);
                      long long v219 = *(_OWORD *)v114;
                      long long v236 = *(_OWORD *)(v115 + 80);
                      unint64_t v122 = v114;
                      while (1)
                      {
                        long long v123 = *(_OWORD *)(v115 + 16);
                        *(_OWORD *)unint64_t v122 = *(_OWORD *)v115;
                        *(_OWORD *)(v122 + 16) = v123;
                        *(_OWORD *)(v122 + 27) = *(_OWORD *)(v115 + 27);
                        if (v115 == v13) {
                          break;
                        }
                        unint64_t v122 = v115;
                        uint64_t v124 = *(void *)(v115 - 24);
                        if (v116 != v124)
                        {
                          v125 = *(char **)(*(void *)a3 + 328);
                          v126 = *(char **)(*(void *)a3 + 336);
                          v127 = v125;
                          v128 = v125;
                          if (v125 != v126)
                          {
                            do
                            {
                              if (*(void *)v128 == v116) {
                                goto LABEL_208;
                              }
                              v128 += 8;
                            }
                            while (v128 != v126);
                            v128 = *(char **)(*(void *)a3 + 336);
LABEL_208:
                            while (*(void *)v127 != v124)
                            {
                              v127 += 8;
                              if (v127 == v126)
                              {
                                v127 = *(char **)(*(void *)a3 + 336);
                                break;
                              }
                            }
                          }
                          unint64_t v115 = v122 - 48;
                          if (v128 - v125 < v127 - v125) {
                            continue;
                          }
                        }
                        goto LABEL_212;
                      }
                      unint64_t v122 = v13;
LABEL_212:
                      *(_OWORD *)unint64_t v122 = v219;
                      *(void *)(v122 + 16) = v227;
                      *(void *)(v122 + 24) = v116;
                      *(void *)(v122 + 32) = v236;
                      *(_DWORD *)(v122 + 39) = *(_DWORD *)((char *)&v236 + 7);
                    }
                  }
                  long long v111 = (long long *)(v114 + 48);
                }
                while ((long long *)(v114 + 48) != a2);
              }
            }
            else if (!v113)
            {
              do
              {
                unint64_t v201 = a1;
                a1 = (unint64_t)v111;
                uint64_t v202 = *(void *)(v201 + 72);
                uint64_t v203 = *(void *)(v201 + 24);
                if (v202 != v203)
                {
                  v204 = *(char **)(*(void *)a3 + 328);
                  v205 = *(char **)(*(void *)a3 + 336);
                  v206 = v204;
                  v207 = v204;
                  if (v204 != v205)
                  {
                    do
                    {
                      if (*(void *)v207 == v202) {
                        goto LABEL_312;
                      }
                      v207 += 8;
                    }
                    while (v207 != v205);
                    v207 = *(char **)(*(void *)a3 + 336);
LABEL_312:
                    while (*(void *)v206 != v203)
                    {
                      v206 += 8;
                      if (v206 == v205)
                      {
                        v206 = *(char **)(*(void *)a3 + 336);
                        break;
                      }
                    }
                  }
                  if (v207 - v204 < v206 - v204)
                  {
                    uint64_t v230 = *(void *)(a1 + 16);
                    long long v222 = *(_OWORD *)a1;
                    long long v239 = *(_OWORD *)(v201 + 80);
                    unint64_t v208 = a1;
                    do
                    {
                      v209 = (_OWORD *)v208;
                      unint64_t v208 = v201;
                      long long v210 = *(_OWORD *)(v201 + 16);
                      _OWORD *v209 = *(_OWORD *)v201;
                      v209[1] = v210;
                      *(_OWORD *)((char *)v209 + 27) = *(_OWORD *)(v201 + 27);
                      uint64_t v211 = *(void *)(v201 - 24);
                      if (v202 == v211) {
                        break;
                      }
                      v212 = *(char **)(*(void *)a3 + 328);
                      v213 = *(char **)(*(void *)a3 + 336);
                      v214 = v212;
                      v215 = v212;
                      if (v212 != v213)
                      {
                        do
                        {
                          if (*(void *)v215 == v202) {
                            goto LABEL_322;
                          }
                          v215 += 8;
                        }
                        while (v215 != v213);
                        v215 = *(char **)(*(void *)a3 + 336);
LABEL_322:
                        while (*(void *)v214 != v211)
                        {
                          v214 += 8;
                          if (v214 == v213)
                          {
                            v214 = *(char **)(*(void *)a3 + 336);
                            break;
                          }
                        }
                      }
                      unint64_t v201 = v208 - 48;
                    }
                    while (v215 - v212 < v214 - v212);
                    *(_OWORD *)unint64_t v208 = v222;
                    *(void *)(v208 + 16) = v230;
                    *(void *)(v208 + 24) = v202;
                    *(void *)(v208 + 32) = v239;
                    *(_DWORD *)(v208 + 39) = *(_DWORD *)((char *)&v239 + 7);
                  }
                }
                long long v111 = (long long *)(a1 + 48);
              }
              while ((long long *)(a1 + 48) != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((long long *)v13 != a2)
            {
              int64_t v129 = (v15 - 2) >> 1;
              int64_t v130 = v129;
              do
              {
                int64_t v131 = v130;
                if (v129 >= v130)
                {
                  uint64_t v132 = (2 * v130) | 1;
                  unint64_t v133 = v13 + 48 * v132;
                  if (2 * v131 + 2 < (uint64_t)v15)
                  {
                    uint64_t v134 = *(void *)(v133 + 24);
                    uint64_t v135 = *(void *)(v133 + 72);
                    if (v134 != v135)
                    {
                      v137 = *(char **)(*(void *)a3 + 328);
                      v136 = *(char **)(*(void *)a3 + 336);
                      v138 = v137;
                      v139 = v137;
                      if (v137 != v136)
                      {
                        do
                        {
                          if (*(void *)v139 == v134) {
                            goto LABEL_224;
                          }
                          v139 += 8;
                        }
                        while (v139 != v136);
                        v139 = *(char **)(*(void *)a3 + 336);
LABEL_224:
                        while (*(void *)v138 != v135)
                        {
                          v138 += 8;
                          if (v138 == v136)
                          {
                            v138 = *(char **)(*(void *)a3 + 336);
                            break;
                          }
                        }
                      }
                      v133 += 48 * (v139 - v137 < v138 - v137);
                      if (v139 - v137 < v138 - v137) {
                        uint64_t v132 = 2 * v131 + 2;
                      }
                    }
                  }
                  unint64_t v140 = v13 + 48 * v131;
                  uint64_t v141 = *(void *)(v133 + 24);
                  uint64_t v142 = *(void *)(v140 + 24);
                  if (v141 == v142) {
                    goto LABEL_238;
                  }
                  v144 = *(char **)(*(void *)a3 + 328);
                  v143 = *(char **)(*(void *)a3 + 336);
                  v145 = v144;
                  v146 = v144;
                  if (v144 != v143)
                  {
                    do
                    {
                      if (*(void *)v146 == v141) {
                        goto LABEL_234;
                      }
                      v146 += 8;
                    }
                    while (v146 != v143);
                    v146 = *(char **)(*(void *)a3 + 336);
LABEL_234:
                    while (*(void *)v145 != v142)
                    {
                      v145 += 8;
                      if (v145 == v143)
                      {
                        v145 = *(char **)(*(void *)a3 + 336);
                        break;
                      }
                    }
                  }
                  if (v146 - v144 >= v145 - v144)
                  {
LABEL_238:
                    uint64_t v228 = *(void *)(v140 + 16);
                    long long v220 = *(_OWORD *)v140;
                    long long v237 = *(_OWORD *)(v140 + 32);
                    long long v147 = *(_OWORD *)v133;
                    long long v148 = *(_OWORD *)(v133 + 16);
                    *(_OWORD *)(v140 + 27) = *(_OWORD *)(v133 + 27);
                    *(_OWORD *)unint64_t v140 = v147;
                    *(_OWORD *)(v140 + 16) = v148;
                    if (v129 >= v132)
                    {
                      while (1)
                      {
                        uint64_t v150 = 2 * v132;
                        uint64_t v132 = (2 * v132) | 1;
                        unint64_t v149 = v13 + 48 * v132;
                        uint64_t v151 = v150 + 2;
                        if (v151 < (uint64_t)v15)
                        {
                          uint64_t v152 = *(void *)(v149 + 24);
                          uint64_t v153 = *(void *)(v149 + 72);
                          if (v152 != v153)
                          {
                            v154 = *(char **)(*(void *)a3 + 328);
                            v155 = *(char **)(*(void *)a3 + 336);
                            v156 = v154;
                            v157 = v154;
                            if (v154 != v155)
                            {
                              do
                              {
                                if (*(void *)v157 == v152) {
                                  goto LABEL_246;
                                }
                                v157 += 8;
                              }
                              while (v157 != v155);
                              v157 = *(char **)(*(void *)a3 + 336);
LABEL_246:
                              while (*(void *)v156 != v153)
                              {
                                v156 += 8;
                                if (v156 == v155)
                                {
                                  v156 = *(char **)(*(void *)a3 + 336);
                                  break;
                                }
                              }
                            }
                            v149 += 48 * (v157 - v154 < v156 - v154);
                            if (v157 - v154 < v156 - v154) {
                              uint64_t v132 = v151;
                            }
                          }
                        }
                        uint64_t v158 = *(void *)(v149 + 24);
                        if (v158 != v142)
                        {
                          v160 = *(char **)(*(void *)a3 + 328);
                          v159 = *(char **)(*(void *)a3 + 336);
                          v161 = v160;
                          v162 = v160;
                          if (v160 != v159)
                          {
                            do
                            {
                              if (*(void *)v162 == v158) {
                                goto LABEL_256;
                              }
                              v162 += 8;
                            }
                            while (v162 != v159);
                            v162 = *(char **)(*(void *)a3 + 336);
LABEL_256:
                            while (*(void *)v161 != v142)
                            {
                              v161 += 8;
                              if (v161 == v159)
                              {
                                v161 = *(char **)(*(void *)a3 + 336);
                                break;
                              }
                            }
                          }
                          if (v162 - v160 < v161 - v160) {
                            break;
                          }
                        }
                        long long v163 = *(_OWORD *)v149;
                        long long v164 = *(_OWORD *)(v149 + 16);
                        *(_OWORD *)(v133 + 27) = *(_OWORD *)(v149 + 27);
                        *(_OWORD *)unint64_t v133 = v163;
                        *(_OWORD *)(v133 + 16) = v164;
                        unint64_t v133 = v149;
                        if (v129 < v132) {
                          goto LABEL_261;
                        }
                      }
                    }
                    unint64_t v149 = v133;
LABEL_261:
                    *(_OWORD *)unint64_t v149 = v220;
                    *(void *)(v149 + 16) = v228;
                    *(void *)(v149 + 24) = v142;
                    *(void *)(v149 + 32) = v237;
                    *(_DWORD *)(v149 + 39) = *(_DWORD *)((char *)&v237 + 7);
                  }
                }
                int64_t v130 = v131 - 1;
              }
              while (v131);
              int64_t v165 = v14 / 0x30uLL;
              do
              {
                uint64_t v166 = 0;
                *(_OWORD *)v229 = *(_OWORD *)(v13 + 16);
                *(_OWORD *)&v229[16] = *(_OWORD *)(v13 + 32);
                long long v221 = *(_OWORD *)v13;
                uint64_t v167 = v165 - 2;
                if (v165 < 2) {
                  uint64_t v167 = v165 - 1;
                }
                uint64_t v168 = v167 >> 1;
                unint64_t v169 = v13;
                do
                {
                  v170 = (_OWORD *)v169;
                  v169 += 48 * v166 + 48;
                  uint64_t v171 = 2 * v166;
                  uint64_t v166 = (2 * v166) | 1;
                  uint64_t v172 = v171 + 2;
                  if (v171 + 2 < v165)
                  {
                    uint64_t v173 = *(void *)(v169 + 24);
                    uint64_t v174 = *(void *)(v169 + 72);
                    if (v173 != v174)
                    {
                      v176 = *(char **)(*(void *)a3 + 328);
                      v175 = *(char **)(*(void *)a3 + 336);
                      v177 = v176;
                      v178 = v176;
                      if (v176 != v175)
                      {
                        do
                        {
                          if (*(void *)v178 == v173) {
                            goto LABEL_273;
                          }
                          v178 += 8;
                        }
                        while (v178 != v175);
                        v178 = *(char **)(*(void *)a3 + 336);
LABEL_273:
                        while (*(void *)v177 != v174)
                        {
                          v177 += 8;
                          if (v177 == v175)
                          {
                            v177 = *(char **)(*(void *)a3 + 336);
                            break;
                          }
                        }
                      }
                      v169 += 48 * (v178 - v176 < v177 - v176);
                      if (v178 - v176 < v177 - v176) {
                        uint64_t v166 = v172;
                      }
                    }
                  }
                  long long v179 = *(_OWORD *)v169;
                  long long v180 = *(_OWORD *)(v169 + 16);
                  *(_OWORD *)((char *)v170 + 27) = *(_OWORD *)(v169 + 27);
                  _OWORD *v170 = v179;
                  v170[1] = v180;
                }
                while (v166 <= v168);
                a2 -= 3;
                if ((long long *)v169 == a2)
                {
                  *(_OWORD *)(v169 + 27) = *(_OWORD *)&v229[11];
                  *(_OWORD *)unint64_t v169 = v221;
                  *(_OWORD *)(v169 + 16) = *(_OWORD *)v229;
                }
                else
                {
                  long long v181 = *a2;
                  long long v182 = a2[1];
                  *(_OWORD *)(v169 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v169 = v181;
                  *(_OWORD *)(v169 + 16) = v182;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v229[11];
                  *a2 = v221;
                  a2[1] = *(_OWORD *)v229;
                  uint64_t v183 = v169 - v13 + 48;
                  if (v183 >= 49)
                  {
                    unint64_t v184 = (v183 / 0x30uLL - 2) >> 1;
                    unint64_t v185 = v13 + 48 * v184;
                    uint64_t v186 = *(void *)(v185 + 24);
                    uint64_t v187 = *(void *)(v169 + 24);
                    if (v186 != v187)
                    {
                      v189 = *(char **)(*(void *)a3 + 328);
                      v188 = *(char **)(*(void *)a3 + 336);
                      v190 = v189;
                      v191 = v189;
                      if (v189 != v188)
                      {
                        do
                        {
                          if (*(void *)v191 == v186) {
                            goto LABEL_286;
                          }
                          v191 += 8;
                        }
                        while (v191 != v188);
                        v191 = *(char **)(*(void *)a3 + 336);
LABEL_286:
                        while (*(void *)v190 != v187)
                        {
                          v190 += 8;
                          if (v190 == v188)
                          {
                            v190 = *(char **)(*(void *)a3 + 336);
                            break;
                          }
                        }
                      }
                      if (v191 - v189 < v190 - v189)
                      {
                        uint64_t v242 = *(void *)(v169 + 16);
                        long long v238 = *(_OWORD *)v169;
                        long long v233 = *(_OWORD *)(v169 + 32);
                        do
                        {
                          v192 = (_OWORD *)v169;
                          unint64_t v169 = v185;
                          long long v193 = *(_OWORD *)v185;
                          long long v194 = *(_OWORD *)(v185 + 16);
                          *(_OWORD *)((char *)v192 + 27) = *(_OWORD *)(v185 + 27);
                          _OWORD *v192 = v193;
                          v192[1] = v194;
                          if (!v184) {
                            break;
                          }
                          unint64_t v184 = (v184 - 1) >> 1;
                          unint64_t v185 = v13 + 48 * v184;
                          uint64_t v195 = *(void *)(v185 + 24);
                          if (v195 == v187) {
                            break;
                          }
                          v197 = *(char **)(*(void *)a3 + 328);
                          v196 = *(char **)(*(void *)a3 + 336);
                          v198 = v197;
                          v199 = v197;
                          if (v197 != v196)
                          {
                            do
                            {
                              if (*(void *)v199 == v195) {
                                goto LABEL_297;
                              }
                              v199 += 8;
                            }
                            while (v199 != v196);
                            v199 = *(char **)(*(void *)a3 + 336);
LABEL_297:
                            while (*(void *)v198 != v187)
                            {
                              v198 += 8;
                              if (v198 == v196)
                              {
                                v198 = *(char **)(*(void *)a3 + 336);
                                break;
                              }
                            }
                          }
                        }
                        while (v199 - v197 < v198 - v197);
                        *(_OWORD *)unint64_t v169 = v238;
                        *(void *)(v169 + 16) = v242;
                        *(void *)(v169 + 24) = v187;
                        *(void *)(v169 + 32) = v233;
                        *(_DWORD *)(v169 + 39) = *(_DWORD *)((char *)&v233 + 7);
                      }
                    }
                  }
                }
              }
              while (v165-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          uint64_t v17 = (long long *)(v13 + 48 * (v15 >> 1));
          if ((unint64_t)v14 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v15 >> 1)), a2 - 3, a3);
            uint64_t v18 = 3 * v16;
            int v19 = (long long *)(a1 + 48 * v16 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48), v19, a2 - 6, a3);
            double v20 = (long long *)(a1 + 48 + 16 * v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 96), v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v19, v17, v20, a3);
            *(_OWORD *)v223 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v223[16] = *(_OWORD *)(a1 + 32);
            long long v216 = *(_OWORD *)a1;
            long long v21 = *(long long *)((char *)v17 + 27);
            long long v22 = v17[1];
            *(_OWORD *)a1 = *v17;
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(a1 + 27) = v21;
            *(long long *)((char *)v17 + 27) = *(_OWORD *)&v223[11];
            *uint64_t v17 = v216;
            v17[1] = *(_OWORD *)v223;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48 * (v15 >> 1)), (long long *)a1, a2 - 3, a3);
          }
          --a4;
          if (a5)
          {
            uint64_t v23 = *(void *)(a1 + 24);
            uint64_t v24 = *(void *)a3;
            break;
          }
          uint64_t v25 = *(void *)(a1 - 24);
          uint64_t v23 = *(void *)(a1 + 24);
          if (v25 != v23)
          {
            uint64_t v24 = *(void *)a3;
            double v26 = *(char **)(*(void *)a3 + 328);
            double v27 = *(char **)(*(void *)a3 + 336);
            double v28 = v26;
            uint64_t v29 = v26;
            if (v26 != v27)
            {
              do
              {
                if (*(void *)v29 == v25) {
                  goto LABEL_16;
                }
                v29 += 8;
              }
              while (v29 != v27);
              uint64_t v29 = *(char **)(*(void *)a3 + 336);
LABEL_16:
              while (*(void *)v28 != v23)
              {
                v28 += 8;
                if (v28 == v27)
                {
                  double v28 = *(char **)(*(void *)a3 + 336);
                  break;
                }
              }
            }
            if (v29 - v26 < v28 - v26) {
              break;
            }
          }
          uint64_t v241 = *(void *)(a1 + 16);
          long long v232 = *(_OWORD *)(a1 + 32);
          long long v235 = *(_OWORD *)a1;
          uint64_t v67 = *((void *)a2 - 3);
          if (v23 == v67) {
            goto LABEL_107;
          }
          BOOL v68 = *(char **)(*(void *)a3 + 328);
          unint64_t v69 = *(char **)(*(void *)a3 + 336);
          if (v68 == v69)
          {
            long long v71 = *(char **)(*(void *)a3 + 328);
            unint64_t v70 = v71;
          }
          else
          {
            unint64_t v70 = *(char **)(*(void *)a3 + 328);
            while (*(void *)v70 != v23)
            {
              v70 += 8;
              if (v70 == v69)
              {
                unint64_t v70 = *(char **)(*(void *)a3 + 336);
                break;
              }
            }
            long long v71 = *(char **)(*(void *)a3 + 328);
            while (*(void *)v71 != v67)
            {
              v71 += 8;
              if (v71 == v69)
              {
                long long v71 = *(char **)(*(void *)a3 + 336);
                break;
              }
            }
          }
          if (v70 - v68 >= v71 - v68)
          {
LABEL_107:
            unint64_t v13 = a1 + 48;
            if (a1 + 48 < (unint64_t)a2)
            {
              uint64_t v75 = *(void *)a3;
              unint64_t v76 = a1;
              do
              {
                uint64_t v77 = *(void *)(v76 + 72);
                unint64_t v76 = v13;
                if (v23 != v77)
                {
                  int v78 = *(char **)(v75 + 328);
                  unint64_t v79 = *(char **)(v75 + 336);
                  long long v80 = v78;
                  long long v81 = v78;
                  if (v78 != v79)
                  {
                    do
                    {
                      if (*(void *)v81 == v23) {
                        goto LABEL_114;
                      }
                      v81 += 8;
                    }
                    while (v81 != v79);
                    long long v81 = *(char **)(v75 + 336);
LABEL_114:
                    while (*(void *)v80 != v77)
                    {
                      v80 += 8;
                      if (v80 == v79)
                      {
                        long long v80 = *(char **)(v75 + 336);
                        break;
                      }
                    }
                  }
                  if (v81 - v78 < v80 - v78) {
                    break;
                  }
                }
                v13 += 48;
              }
              while (v76 + 48 < (unint64_t)a2);
            }
          }
          else
          {
            unint64_t v13 = a1;
            do
            {
              do
              {
                uint64_t v72 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v72);
              if (v68 == v69)
              {
                unint64_t v74 = *(char **)(*(void *)a3 + 328);
                unint64_t v73 = v74;
              }
              else
              {
                unint64_t v73 = *(char **)(*(void *)a3 + 328);
                while (*(void *)v73 != v23)
                {
                  v73 += 8;
                  if (v73 == v69)
                  {
                    unint64_t v73 = *(char **)(*(void *)a3 + 336);
                    break;
                  }
                }
                unint64_t v74 = *(char **)(*(void *)a3 + 328);
                while (*(void *)v74 != v72)
                {
                  v74 += 8;
                  if (v74 == v69)
                  {
                    unint64_t v74 = *(char **)(*(void *)a3 + 336);
                    break;
                  }
                }
              }
            }
            while (v73 - v68 >= v74 - v68);
          }
          long long v82 = a2;
          if (v13 < (unint64_t)a2)
          {
            uint64_t v83 = *(void *)a3;
            long long v82 = a2;
            do
            {
              uint64_t v84 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v84) {
                break;
              }
              long long v85 = *(char **)(v83 + 328);
              long long v86 = *(char **)(v83 + 336);
              long long v87 = v85;
              long long v88 = v85;
              if (v85 != v86)
              {
                do
                {
                  if (*(void *)v88 == v23) {
                    goto LABEL_126;
                  }
                  v88 += 8;
                }
                while (v88 != v86);
                long long v88 = *(char **)(v83 + 336);
LABEL_126:
                while (*(void *)v87 != v84)
                {
                  v87 += 8;
                  if (v87 == v86)
                  {
                    long long v87 = *(char **)(v83 + 336);
                    break;
                  }
                }
              }
            }
            while (v88 - v85 < v87 - v85);
          }
          while (v13 < (unint64_t)v82)
          {
            *(_OWORD *)v225 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v225[16] = *(_OWORD *)(v13 + 32);
            long long v217 = *(_OWORD *)v13;
            long long v89 = *v82;
            long long v90 = v82[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v82 + 27);
            *(_OWORD *)unint64_t v13 = v89;
            *(_OWORD *)(v13 + 16) = v90;
            *(long long *)((char *)v82 + 27) = *(_OWORD *)&v225[11];
            *long long v82 = v217;
            v82[1] = *(_OWORD *)v225;
            uint64_t v91 = *(void *)a3;
            do
            {
              do
              {
                uint64_t v92 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v92);
              uint64_t v93 = *(char **)(v91 + 328);
              int v94 = *(char **)(v91 + 336);
              if (v93 == v94)
              {
                long long v96 = *(char **)(v91 + 328);
                long long v95 = v96;
              }
              else
              {
                long long v95 = *(char **)(v91 + 328);
                while (*(void *)v95 != v23)
                {
                  v95 += 8;
                  if (v95 == v94)
                  {
                    long long v95 = *(char **)(v91 + 336);
                    break;
                  }
                }
                long long v96 = *(char **)(v91 + 328);
                while (*(void *)v96 != v92)
                {
                  v96 += 8;
                  if (v96 == v94)
                  {
                    long long v96 = *(char **)(v91 + 336);
                    break;
                  }
                }
              }
            }
            while (v95 - v93 >= v96 - v93);
            do
            {
              uint64_t v97 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v97) {
                break;
              }
              if (v93 == v94)
              {
                long long v99 = v93;
                id v98 = v93;
              }
              else
              {
                id v98 = v93;
                while (*(void *)v98 != v23)
                {
                  v98 += 8;
                  if (v98 == v94)
                  {
                    id v98 = v94;
                    break;
                  }
                }
                long long v99 = v93;
                while (*(void *)v99 != v97)
                {
                  v99 += 8;
                  if (v99 == v94)
                  {
                    long long v99 = v94;
                    break;
                  }
                }
              }
            }
            while (v98 - v93 < v99 - v93);
          }
          int64_t v100 = (long long *)(v13 - 48);
          BOOL v5 = v13 - 48 >= a1;
          BOOL v6 = v13 - 48 == a1;
          if (v13 - 48 != a1)
          {
            long long v101 = *v100;
            long long v102 = *(_OWORD *)(v13 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
            *(_OWORD *)a1 = v101;
            *(_OWORD *)(a1 + 16) = v102;
          }
          a5 = 0;
          *int64_t v100 = v235;
          *(void *)(v13 - 32) = v241;
          *(void *)(v13 - 24) = v23;
          *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v232 + 7);
          *(void *)(v13 - 16) = v232;
        }
        uint64_t v240 = *(void *)(a1 + 16);
        long long v231 = *(_OWORD *)(a1 + 32);
        long long v234 = *(_OWORD *)a1;
        unint64_t v30 = a1;
        do
        {
          unint64_t v31 = v30;
          v30 += 48;
          uint64_t v32 = *(void *)(v31 + 72);
          if (v32 == v23) {
            break;
          }
          long long v33 = *(char **)(v24 + 328);
          long long v34 = *(char **)(v24 + 336);
          uint64_t v35 = v33;
          unint64_t v36 = v33;
          if (v33 != v34)
          {
            do
            {
              if (*(void *)v36 == v32) {
                goto LABEL_26;
              }
              v36 += 8;
            }
            while (v36 != v34);
            unint64_t v36 = *(char **)(v24 + 336);
LABEL_26:
            while (*(void *)v35 != v23)
            {
              v35 += 8;
              if (v35 == v34)
              {
                uint64_t v35 = *(char **)(v24 + 336);
                break;
              }
            }
          }
        }
        while (v36 - v33 < v35 - v33);
        uint64_t v37 = a2;
        if (v31 == a1)
        {
          uint64_t v37 = a2;
          if (v30 < (unint64_t)a2)
          {
            uint64_t v37 = a2;
            do
            {
              uint64_t v43 = *((void *)v37 - 3);
              v37 -= 3;
              if (v43 != v23)
              {
                uint64_t v44 = *(char **)(v24 + 328);
                long long v45 = *(char **)(v24 + 336);
                int v46 = v44;
                int v47 = v44;
                if (v44 != v45)
                {
                  do
                  {
                    if (*(void *)v47 == v43) {
                      goto LABEL_48;
                    }
                    v47 += 8;
                  }
                  while (v47 != v45);
                  int v47 = *(char **)(v24 + 336);
LABEL_48:
                  while (*(void *)v46 != v23)
                  {
                    v46 += 8;
                    if (v46 == v45)
                    {
                      int v46 = *(char **)(v24 + 336);
                      break;
                    }
                  }
                }
                if (v47 - v44 < v46 - v44) {
                  break;
                }
              }
            }
            while (v30 < (unint64_t)v37);
          }
        }
        else
        {
          do
          {
            do
            {
              uint64_t v38 = *((void *)v37 - 3);
              v37 -= 3;
            }
            while (v38 == v23);
            unint64_t v39 = *(char **)(v24 + 328);
            long long v40 = *(char **)(v24 + 336);
            double v41 = v39;
            double v42 = v39;
            if (v39 != v40)
            {
              do
              {
                if (*(void *)v42 == v38) {
                  goto LABEL_36;
                }
                v42 += 8;
              }
              while (v42 != v40);
              double v42 = *(char **)(v24 + 336);
LABEL_36:
              while (*(void *)v41 != v23)
              {
                v41 += 8;
                if (v41 == v40)
                {
                  double v41 = *(char **)(v24 + 336);
                  break;
                }
              }
            }
          }
          while (v42 - v39 >= v41 - v39);
        }
        unint64_t v13 = v30;
        if (v30 < (unint64_t)v37)
        {
          int v48 = v37;
          do
          {
            *(_OWORD *)v224 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v224[16] = *(_OWORD *)(v13 + 32);
            long long v49 = *(_OWORD *)v13;
            long long v51 = *v48;
            long long v50 = v48[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v48 + 27);
            *(_OWORD *)unint64_t v13 = v51;
            *(_OWORD *)(v13 + 16) = v50;
            *(long long *)((char *)v48 + 27) = *(_OWORD *)&v224[11];
            *int v48 = v49;
            v48[1] = *(_OWORD *)v224;
            uint64_t v52 = *(void *)a3;
            do
            {
              uint64_t v53 = *(void *)(v13 + 72);
              v13 += 48;
              if (v53 == v23) {
                break;
              }
              long long v54 = *(char **)(v52 + 328);
              id v55 = *(char **)(v52 + 336);
              id v56 = v54;
              v57 = v54;
              if (v54 != v55)
              {
                do
                {
                  if (*(void *)v57 == v53) {
                    goto LABEL_61;
                  }
                  v57 += 8;
                }
                while (v57 != v55);
                v57 = *(char **)(v52 + 336);
LABEL_61:
                while (*(void *)v56 != v23)
                {
                  v56 += 8;
                  if (v56 == v55)
                  {
                    id v56 = *(char **)(v52 + 336);
                    break;
                  }
                }
              }
            }
            while (v57 - v54 < v56 - v54);
            do
            {
              do
              {
                uint64_t v58 = *((void *)v48 - 3);
                v48 -= 3;
              }
              while (v58 == v23);
              unint64_t v59 = *(char **)(v52 + 328);
              unint64_t v60 = *(char **)(v52 + 336);
              unint64_t v61 = v59;
              unint64_t v62 = v59;
              if (v59 != v60)
              {
                do
                {
                  if (*(void *)v62 == v58) {
                    goto LABEL_70;
                  }
                  v62 += 8;
                }
                while (v62 != v60);
                unint64_t v62 = *(char **)(v52 + 336);
LABEL_70:
                while (*(void *)v61 != v23)
                {
                  v61 += 8;
                  if (v61 == v60)
                  {
                    unint64_t v61 = *(char **)(v52 + 336);
                    break;
                  }
                }
              }
            }
            while (v62 - v59 >= v61 - v59);
          }
          while (v13 < (unint64_t)v48);
        }
        uint64_t v63 = (long long *)(v13 - 48);
        if (v13 - 48 != a1)
        {
          long long v64 = *v63;
          long long v65 = *(_OWORD *)(v13 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
          *(_OWORD *)a1 = v64;
          *(_OWORD *)(a1 + 16) = v65;
        }
        *uint64_t v63 = v234;
        *(void *)(v13 - 32) = v240;
        *(void *)(v13 - 24) = v23;
        *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v231 + 7);
        *(void *)(v13 - 16) = v231;
        if (v30 >= (unint64_t)v37) {
          break;
        }
LABEL_80:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(a1, v13 - 48, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, v13 - 48, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v13, (uint64_t)a2, a3))
      {
        break;
      }
      if (!v66) {
        goto LABEL_80;
      }
    }
    a2 = (long long *)(v13 - 48);
    if (!v66) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 - 24);
      uint64_t v9 = *(void *)(a1 + 24);
      if (v8 == v9) {
        return result;
      }
      id v10 = *(char **)(*(void *)a3 + 328);
      int v11 = *(char **)(*(void *)a3 + 336);
      unint64_t v12 = v10;
      unint64_t v13 = v10;
      if (v10 == v11) {
        goto LABEL_10;
      }
      do
      {
        if (*(void *)v13 == v8) {
          goto LABEL_7;
        }
        v13 += 8;
      }
      while (v13 != v11);
      unint64_t v13 = *(char **)(*(void *)a3 + 336);
      do
      {
LABEL_7:
        if (*(void *)v12 == v9) {
          goto LABEL_10;
        }
        v12 += 8;
      }
      while (v12 != v11);
      unint64_t v12 = *(char **)(*(void *)a3 + 336);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        uint64_t v14 = (long long *)(a2 - 48);
        long long v15 = *(_OWORD *)a1;
        *(_OWORD *)uint64_t v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        long long v16 = *(_OWORD *)(a2 - 21);
        long long v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *uint64_t v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(long long *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), a3);
      uint64_t v19 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      int v20 = 0;
      break;
  }
  while (1)
  {
    uint64_t v21 = *(void *)(v19 + 24);
    uint64_t v22 = *(void *)(v18 + 24);
    if (v21 != v22)
    {
      uint64_t v23 = *(char **)(*(void *)a3 + 328);
      uint64_t v24 = *(char **)(*(void *)a3 + 336);
      uint64_t v25 = v23;
      double v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(void *)v26 == v21) {
            goto LABEL_19;
          }
          v26 += 8;
        }
        while (v26 != v24);
        double v26 = *(char **)(*(void *)a3 + 336);
LABEL_19:
        while (*(void *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            uint64_t v25 = *(char **)(*(void *)a3 + 336);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        long long v34 = *(_OWORD *)v19;
        uint64_t v36 = *(void *)(v19 + 16);
        long long v37 = *(_OWORD *)(v19 + 32);
        uint64_t v27 = v19;
        while (1)
        {
          long long v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1) {
            break;
          }
          uint64_t v27 = v18;
          uint64_t v29 = *(void *)(v18 - 24);
          if (v21 != v29)
          {
            unint64_t v30 = *(char **)(*(void *)a3 + 328);
            unint64_t v31 = *(char **)(*(void *)a3 + 336);
            uint64_t v32 = v30;
            long long v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(void *)v33 == v21) {
                  goto LABEL_30;
                }
                v33 += 8;
              }
              while (v33 != v31);
              long long v33 = *(char **)(*(void *)a3 + 336);
LABEL_30:
              while (*(void *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  uint64_t v32 = *(char **)(*(void *)a3 + 336);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30) {
              continue;
            }
          }
          goto LABEL_36;
        }
        uint64_t v27 = a1;
LABEL_36:
        *(_OWORD *)uint64_t v27 = v34;
        *(void *)(v27 + 16) = v36;
        *(void *)(v27 + 24) = v21;
        *(void *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8) {
          return v19 + 48 == a2;
        }
      }
    }
    uint64_t v18 = v19;
    v19 += 48;
    if (v19 == a2) {
      return 1;
    }
  }
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  id v3 = *(void **)(a2 + 264);
  int v48 = (void *)(a2 + 272);
  if (v3 == (void *)(a2 + 272)) {
    return;
  }
  long long v50 = (void *)(a1 + 16);
  do
  {
    BOOL v5 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a2, v3[4]);
    uint64_t v6 = v5;
    if (!v5) {
      goto LABEL_80;
    }
    unint64_t v7 = [v5 hash];
    unint64_t v8 = v7;
    unint64_t v9 = *(void *)(a1 + 8);
    if (!v9) {
      goto LABEL_21;
    }
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v51 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v2 = v7;
      if (v7 >= v9) {
        unint64_t v2 = v7 % v9;
      }
    }
    else
    {
      unint64_t v2 = (v9 - 1) & v7;
    }
    int v11 = *(uint64_t ***)(*(void *)a1 + 8 * v2);
    if (!v11 || (unint64_t v12 = *v11) == 0)
    {
LABEL_21:
      uint64_t v19 = (char *)operator new(0xA8uLL);
      v52[0] = v19;
      v52[1] = v50;
      *(void *)uint64_t v19 = 0;
      *((void *)v19 + 1) = v8;
      *((void *)v19 + 2) = v6;
      *(_OWORD *)(v19 + 24) = 0u;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      *(_OWORD *)(v19 + 104) = 0u;
      *(_OWORD *)(v19 + 120) = 0u;
      *(_OWORD *)(v19 + 136) = 0u;
      *(_OWORD *)(v19 + 152) = 0u;
      char v53 = 1;
      float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v21 = *(float *)(a1 + 32);
      if (v9 && (float)(v21 * (float)v9) >= v20)
      {
LABEL_67:
        long long v37 = *(void **)(*(void *)a1 + 8 * v2);
        unint64_t v12 = (uint64_t *)v52[0];
        if (v37)
        {
          *(void *)v52[0] = *v37;
        }
        else
        {
          *(void *)v52[0] = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = v12;
          *(void *)(*(void *)a1 + 8 * v2) = v50;
          if (!*v12)
          {
LABEL_76:
            v52[0] = 0;
            ++*(void *)(a1 + 24);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v52);
            goto LABEL_77;
          }
          unint64_t v38 = *(void *)(*v12 + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v38 >= v9) {
              v38 %= v9;
            }
          }
          else
          {
            v38 &= v9 - 1;
          }
          long long v37 = (void *)(*(void *)a1 + 8 * v38);
        }
        *long long v37 = v12;
        goto LABEL_76;
      }
      BOOL v22 = (v9 & (v9 - 1)) != 0;
      if (v9 < 3) {
        BOOL v22 = 1;
      }
      unint64_t v23 = v22 | (2 * v9);
      unint64_t v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      else {
        int8x8_t prime = (int8x8_t)v23;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v9 = *(void *)(a1 + 8);
      if (*(void *)&prime > v9) {
        goto LABEL_33;
      }
      if (*(void *)&prime < v9)
      {
        unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          unint64_t v32 = std::__next_prime(v32);
        }
        else
        {
          uint64_t v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2) {
            unint64_t v32 = v34;
          }
        }
        if (*(void *)&prime <= v32) {
          int8x8_t prime = (int8x8_t)v32;
        }
        if (*(void *)&prime >= v9)
        {
          unint64_t v9 = *(void *)(a1 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            double v26 = operator new(8 * *(void *)&prime);
            uint64_t v27 = *(void **)a1;
            *(void *)a1 = v26;
            if (v27) {
              operator delete(v27);
            }
            uint64_t v28 = 0;
            *(int8x8_t *)(a1 + 8) = prime;
            do
              *(void *)(*(void *)a1 + 8 * v28++) = 0;
            while (*(void *)&prime != v28);
            uint64_t v29 = (void *)*v50;
            if (*v50)
            {
              unint64_t v30 = v29[1];
              uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(void *)&prime) {
                  v30 %= *(void *)&prime;
                }
              }
              else
              {
                v30 &= *(void *)&prime - 1;
              }
              *(void *)(*(void *)a1 + 8 * v30) = v50;
              uint64_t v35 = (void *)*v29;
              if (*v29)
              {
                do
                {
                  unint64_t v36 = v35[1];
                  if (v31.u32[0] > 1uLL)
                  {
                    if (v36 >= *(void *)&prime) {
                      v36 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v36 &= *(void *)&prime - 1;
                  }
                  if (v36 != v30)
                  {
                    if (!*(void *)(*(void *)a1 + 8 * v36))
                    {
                      *(void *)(*(void *)a1 + 8 * v36) = v29;
                      goto LABEL_58;
                    }
                    *uint64_t v29 = *v35;
                    *uint64_t v35 = **(void **)(*(void *)a1 + 8 * v36);
                    **(void **)(*(void *)a1 + 8 * v36) = v35;
                    uint64_t v35 = v29;
                  }
                  unint64_t v36 = v30;
LABEL_58:
                  uint64_t v29 = v35;
                  uint64_t v35 = (void *)*v35;
                  unint64_t v30 = v36;
                }
                while (v35);
              }
            }
            unint64_t v9 = (unint64_t)prime;
            goto LABEL_62;
          }
          int v47 = *(void **)a1;
          *(void *)a1 = 0;
          if (v47) {
            operator delete(v47);
          }
          unint64_t v9 = 0;
          *(void *)(a1 + 8) = 0;
        }
      }
LABEL_62:
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v8 >= v9) {
          unint64_t v2 = v8 % v9;
        }
        else {
          unint64_t v2 = v8;
        }
      }
      else
      {
        unint64_t v2 = (v9 - 1) & v8;
      }
      goto LABEL_67;
    }
    while (1)
    {
      unint64_t v13 = v12[1];
      if (v13 == v8) {
        break;
      }
      if (v51 > 1)
      {
        if (v13 >= v9) {
          v13 %= v9;
        }
      }
      else
      {
        v13 &= v9 - 1;
      }
      if (v13 != v2) {
        goto LABEL_21;
      }
LABEL_20:
      unint64_t v12 = (uint64_t *)*v12;
      if (!v12) {
        goto LABEL_21;
      }
    }
    id v14 = (id)v12[2];
    long long v15 = v6;
    id v16 = v6;
    long long v17 = v16;
    if (v14 != v16)
    {
      char v18 = [v14 isEqualToString:v16];

      uint64_t v6 = v15;
      if (v18) {
        goto LABEL_77;
      }
      goto LABEL_20;
    }

    uint64_t v6 = v15;
LABEL_77:
    *((_DWORD *)v12 + 6) = *((_DWORD *)v3 + 10);
    long long v39 = *((_OWORD *)v3 + 3);
    long long v40 = *((_OWORD *)v3 + 4);
    long long v41 = *((_OWORD *)v3 + 5);
    v12[10] = v3[12];
    *((_OWORD *)v12 + 3) = v40;
    *((_OWORD *)v12 + 4) = v41;
    *((_OWORD *)v12 + 2) = v39;
    v12[11] = v3[13];
    if (v12 + 2 != v3 + 4) {
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)v12 + 96, (char *)v3[14], v3[15], (uint64_t)(v3[15] - v3[14]) >> 4);
    }
    v12[15] = v3[17];
    long long v42 = *((_OWORD *)v3 + 9);
    long long v43 = *((_OWORD *)v3 + 10);
    *((_WORD *)v12 + 80) = *((_WORD *)v3 + 88);
    *((_OWORD *)v12 + 8) = v42;
    *((_OWORD *)v12 + 9) = v43;

LABEL_80:
    uint64_t v44 = (void *)v3[1];
    if (v44)
    {
      do
      {
        long long v45 = v44;
        uint64_t v44 = (void *)*v44;
      }
      while (v44);
    }
    else
    {
      do
      {
        long long v45 = (void *)v3[2];
        BOOL v46 = *v45 == (void)v3;
        id v3 = v45;
      }
      while (!v46);
    }
    id v3 = v45;
  }
  while (v45 != v48);
}

void sub_1BD112AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);

  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::~__hash_table(v6);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1724F50;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1724F50;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C187B8A0);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1F1724F50;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BD112CA8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1724F50;
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48))(v1) + 56;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1724FE0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1724FE0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C187B8A0);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1F1724FE0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BD112F40(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1724FE0;
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  unint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsAverageSampleDuration const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::~__func()
{
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F1725070;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1725070;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 624))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a4, 3, @"Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date");
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
  }
  double v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(void *)(a1 + 40) && a3) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_advanceToTime(a1, v8);
    }
    HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    unint64_t v9 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    uint64_t v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v9, a4);
  }
  return v10;
}

void sub_1BD113350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_advanceToTime(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 128) <= a2)
  {
    uint64_t v4 = a1 + 112;
    uint64_t v5 = a1 + 120;
    do
    {
      uint64_t v6 = *(void *)(a1 + 600);
      uint64_t v7 = *(void *)(a1 + 592);
      if (v6 == v7)
      {
        uint64_t v22 = 0;
        long long v15 = *(void **)(a1 + 40);
        id v16 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a2];
        double v8 = [v15 dateIntervalContainingDate:v16 index:&v22];

        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        unint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v17 = v22;
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v19 = v18;
        float v20 = [v8 endDate];
        [v20 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::resetToBucket(v4, v17, v19, v21);
      }
      else
      {
        double v8 = [*(id *)(a1 + 40) dateIntervalAtIndex:*(void *)(a1 + 112) + 1];
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        unint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v12 = v11;
        unint64_t v13 = [v8 endDate];
        [v13 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::advanceBucket(v4, v12, v14);
      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_didChangeBucket(a1, v9);
      if (v6 != v7) {
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
      }
    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1BD11355C(_Unwind_Exception *exception_object)
{
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = (double *)(a1 + 8);
  uint64_t v6 = *(uint64_t **)a2;
  double v7 = *(double *)(a2 + 8);
  double v8 = *(uint64_t **)(a2 + 16);
  unint64_t v9 = *(uint64_t **)(a2 + 24);
  char v63 = *(unsigned char *)(a2 + 32);
  char v10 = v63;
  char v11 = *(unsigned char *)(a2 + 33);
  char v67 = 0;
  if (v63 && v7 >= *v5)
  {
    double v14 = &v63;
    char v12 = v11;
    char v67 = v63;
    long long v15 = v6;
    double v16 = v7;
    double v17 = *(double *)&v8;
    unint64_t v13 = (unint64_t)v9;
  }
  else
  {
    char v12 = 0;
    unint64_t v13 = 0;
    double v14 = &v67;
    long long v15 = 0;
    double v16 = 0.0;
    double v17 = 0.0;
  }
  *double v14 = 0;
  char v66 = 0;
  if (v67 && ((double v18 = *(double *)(a1 + 16), *(_DWORD *)(a1 + 36)) ? (v19 = v16 < v18) : (v19 = v16 <= v18), !v19))
  {
    double v21 = &v67;
    char v61 = v12;
    char v66 = v67;
    unint64_t v20 = v13;
    double v62 = v17;
    double v22 = v16;
    unint64_t v23 = v15;
  }
  else
  {
    double v62 = 0.0;
    char v61 = 0;
    unint64_t v20 = 0;
    double v21 = &v66;
    double v22 = 0.0;
    unint64_t v23 = 0;
  }
  *double v21 = 0;
  char v24 = v67;
  if (v67)
  {
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 296, v13, v13);
    uint64_t v25 = *(char **)(a1 + 112);
    if (v25 == *(char **)(a1 + 104) && *(uint64_t *)(a1 + 144) <= 0)
    {
      double v28 = *(double *)(a1 + 8);
      double v29 = *(double *)(a1 + 16);
      if (v16 >= v28) {
        double v28 = v16;
      }
      if (v29 >= v17) {
        double v29 = v17;
      }
      *(double *)(a1 + 48) = v28;
      *(double *)(a1 + 56) = v29;
    }
    else
    {
      if (v16 < *(double *)(a1 + 48))
      {
        double v26 = *(double *)(a1 + 8);
        if (v16 >= v26) {
          double v26 = v16;
        }
        *(double *)(a1 + 48) = v26;
      }
      if (v17 > *(double *)(a1 + 56))
      {
        double v27 = *(double *)(a1 + 16);
        if (v27 >= v17) {
          double v27 = v17;
        }
        *(double *)(a1 + 56) = v27;
      }
    }
    if (*(unsigned char *)(a1 + 32))
    {
      double v30 = *(double *)(a1 + 64);
      if (v16 < v30) {
        double v30 = v16;
      }
      *(double *)(a1 + 64) = v30;
    }
    if (a3 && v16 < *(double *)(a1 + 16))
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v5, v16);
      uint64_t v25 = *(char **)(a1 + 112);
    }
    unint64_t v31 = *(void *)(a1 + 120);
    if ((unint64_t)v25 >= v31)
    {
      unint64_t v33 = 0x555555555555555;
      uint64_t v34 = *(char **)(a1 + 104);
      unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v34) >> 4);
      unint64_t v36 = v35 + 1;
      if (v35 + 1 > 0x555555555555555) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - (void)v34) >> 4);
      if (2 * v37 > v36) {
        unint64_t v36 = 2 * v37;
      }
      if (v37 < 0x2AAAAAAAAAAAAAALL) {
        unint64_t v33 = v36;
      }
      if (v33)
      {
        unint64_t v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v33);
        uint64_t v34 = *(char **)(a1 + 104);
        uint64_t v25 = *(char **)(a1 + 112);
      }
      else
      {
        uint64_t v38 = 0;
      }
      unint64_t v39 = v33 + 48 * v35;
      *(void *)unint64_t v39 = v15;
      *(double *)(v39 + 8) = v16;
      *(double *)(v39 + 16) = v17;
      *(void *)(v39 + 24) = v13;
      unint64_t v40 = v33 + 48 * v38;
      *(unsigned char *)(v39 + 32) = v24;
      *(unsigned char *)(v39 + 33) = v12;
      *(_WORD *)(v39 + 40) = 0;
      *(unsigned char *)(v39 + 42) = 0;
      unint64_t v32 = (void *)(v39 + 48);
      if (v25 != v34)
      {
        do
        {
          long long v41 = *((_OWORD *)v25 - 3);
          long long v42 = *((_OWORD *)v25 - 2);
          *(_OWORD *)(v39 - 21) = *(_OWORD *)(v25 - 21);
          *(_OWORD *)(v39 - 48) = v41;
          *(_OWORD *)(v39 - 32) = v42;
          v39 -= 48;
          v25 -= 48;
        }
        while (v25 != v34);
        uint64_t v34 = *(char **)(a1 + 104);
      }
      *(void *)(a1 + 104) = v39;
      *(void *)(a1 + 112) = v32;
      *(void *)(a1 + 120) = v40;
      if (v34) {
        operator delete(v34);
      }
    }
    else
    {
      *(void *)uint64_t v25 = v15;
      *((double *)v25 + 1) = v16;
      *((double *)v25 + 2) = v17;
      *((void *)v25 + 3) = v13;
      v25[32] = v24;
      v25[33] = v12;
      *((_WORD *)v25 + 20) = 0;
      unint64_t v32 = v25 + 48;
      v25[42] = 0;
    }
    *(void *)(a1 + 112) = v32;
    if (!*(unsigned char *)(a1 + 264) || *(double *)(a1 + 240) <= v7)
    {
      *(void *)(a1 + 232) = v6;
      *(double *)(a1 + 240) = v7;
      *(double *)(a1 + 248) = *(double *)&v8;
      *(void *)(a1 + 256) = v9;
      *(unsigned char *)(a1 + 264) = v10;
      *(unsigned char *)(a1 + 265) = v11;
      if (!*(unsigned char *)(a1 + 184) || *(double *)(a1 + 160) <= v7)
      {
        *(void *)(a1 + 152) = v6;
        *(double *)(a1 + 160) = v7;
        *(double *)(a1 + 168) = *(double *)&v8;
        *(void *)(a1 + 176) = v9;
        *(unsigned char *)(a1 + 184) = v10;
        *(unsigned char *)(a1 + 185) = v11;
      }
    }
    if (*(unsigned char *)(a1 + 33))
    {
      unint64_t v43 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID((uint64_t)v5, v13);
      uint64_t v44 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_statisticsForSource((uint64_t)v5, v43);
      if (!*((unsigned char *)v44 + 136) || *((double *)v44 + 14) <= v7)
      {
        v44[13] = v6;
        *((double *)v44 + 14) = v7;
        v44[15] = v8;
        v44[16] = v9;
        *((unsigned char *)v44 + 136) = v10;
        *((unsigned char *)v44 + 137) = v11;
        if (!*((unsigned char *)v44 + 56) || *((double *)v44 + 4) <= v7)
        {
          v44[3] = v6;
          *((double *)v44 + 4) = v7;
          v44[5] = v8;
          v44[6] = v9;
          *((unsigned char *)v44 + 56) = v10;
          *((unsigned char *)v44 + 57) = v11;
        }
      }
    }
  }
  char v45 = v66;
  if (v66)
  {
    unint64_t v46 = *(void *)(a1 + 488);
    unint64_t v47 = *(void *)(a1 + 496);
    if (v46 >= v47)
    {
      uint64_t v49 = *(void *)(a1 + 480);
      unint64_t v50 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v46 - v49) >> 3);
      unint64_t v51 = v50 + 1;
      if (v50 + 1 > 0x666666666666666) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v52 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v47 - v49) >> 3);
      if (2 * v52 > v51) {
        unint64_t v51 = 2 * v52;
      }
      if (v52 >= 0x333333333333333) {
        unint64_t v53 = 0x666666666666666;
      }
      else {
        unint64_t v53 = v51;
      }
      if (v53) {
        unint64_t v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v53);
      }
      else {
        uint64_t v54 = 0;
      }
      unint64_t v55 = v53 + 40 * v50;
      unint64_t v56 = v53 + 40 * v54;
      *(void *)unint64_t v55 = v23;
      *(double *)(v55 + 8) = v22;
      *(double *)(v55 + 16) = v62;
      *(void *)(v55 + 24) = v20;
      *(unsigned char *)(v55 + 32) = v45;
      *(unsigned char *)(v55 + 33) = v61;
      *(_DWORD *)(v55 + 34) = v64;
      *(_WORD *)(v55 + 38) = v65;
      unint64_t v48 = v55 + 40;
      uint64_t v58 = *(char **)(a1 + 480);
      v57 = *(char **)(a1 + 488);
      if (v57 != v58)
      {
        do
        {
          long long v59 = *(_OWORD *)(v57 - 40);
          long long v60 = *(_OWORD *)(v57 - 24);
          *(_WORD *)(v55 - 8) = *((_WORD *)v57 - 4);
          *(_OWORD *)(v55 - 24) = v60;
          *(_OWORD *)(v55 - 40) = v59;
          v55 -= 40;
          v57 -= 40;
        }
        while (v57 != v58);
        v57 = *(char **)(a1 + 480);
      }
      *(void *)(a1 + 480) = v55;
      *(void *)(a1 + 488) = v48;
      *(void *)(a1 + 496) = v56;
      if (v57) {
        operator delete(v57);
      }
    }
    else
    {
      *(void *)unint64_t v46 = v23;
      *(double *)(v46 + 8) = v22;
      *(double *)(v46 + 16) = v62;
      *(void *)(v46 + 24) = v20;
      *(unsigned char *)(v46 + 32) = v45;
      *(unsigned char *)(v46 + 33) = v61;
      *(_DWORD *)(v46 + 34) = v64;
      *(_WORD *)(v46 + 38) = v65;
      unint64_t v48 = v46 + 40;
    }
    *(void *)(a1 + 488) = v48;
  }
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 626))
  {
    *(unsigned char *)(a1 + 628) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 628) = 0;
    unint64_t v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      uint64_t v4 = v2;
      uint64_t v3 = (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      if (v3) {
        v4[2](v4, v3);
      }

      unint64_t v2 = v4;
    }
  }
}

void sub_1BD113B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  unint64_t v9 = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 480), *(void *)(a1 + 488), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 488) - *(void *)(a1 + 480)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::resetToBucket(a1, *(void *)a1 + 1, a2, a3);
  uint64_t v6 = v9;
  double v7 = v10;
  if (v9 != v10)
  {
    uint64_t v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BD113C80(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8 = (id *)(a1 + 40);
  objc_storeStrong((id *)(a1 + 504), *(id *)(a1 + 40));
  *((double *)v8 - 4) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  long long v9 = 0uLL;
  memset(v18, 0, sizeof(v18));
  char v10 = *(void **)(a1 + 200);
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)&v18[4];
  *(_OWORD *)(a1 + 152) = *(_OWORD *)&v18[20];
  *(_OWORD *)(a1 + 168) = *(_OWORD *)&v18[36];
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  if (v10)
  {
    *(void *)(a1 + 208) = v10;
    operator delete(v10);
    long long v9 = 0uLL;
  }
  *(_WORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 232) = v9;
  *(_OWORD *)(a1 + 248) = v9;
  *(_OWORD *)(a1 + 200) = v9;
  *(_OWORD *)(a1 + 216) = v9;
  if (*(void *)(a1 + 288))
  {
    uint64_t v11 = *(void **)(a1 + 272);
    uint64_t v12 = *(void *)(a1 + 280);
    *(void *)(a1 + 272) = a1 + 280;
    *(void *)(v12 + 16) = 0;
    *(void *)(a1 + 280) = 0;
    *(void *)(a1 + 288) = 0;
    if (v11[1]) {
      unint64_t v13 = (void *)v11[1];
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      double v14 = (void *)v13[2];
      if (v14)
      {
        long long v15 = (void *)*v14;
        if ((void *)*v14 == v13)
        {
          *double v14 = 0;
          while (1)
          {
            double v17 = (void *)v14[1];
            if (!v17) {
              break;
            }
            do
            {
              double v14 = v17;
              double v17 = (void *)*v17;
            }
            while (v17);
          }
        }
        else
        {
          for (v14[1] = 0; v15; long long v15 = (void *)v14[1])
          {
            do
            {
              double v14 = v15;
              long long v15 = (void *)*v15;
            }
            while (v15);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::destroy(v13);
        for (i = (void *)v14[2]; i; i = (void *)i[2])
          double v14 = i;
        unint64_t v13 = v14;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::destroy(v13);
  }
  objc_storeStrong(v8, *(id *)(a1 + 504));
  *(void *)(a1 + 488) = *(void *)(a1 + 480);
  *(void *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 628))
  {
    if (v3)
    {
      id v6 = v3;
      uint64_t v4 = _Block_copy(*(const void **)(a1 + 96));
      uint64_t v5 = v4;
      if (v4) {
        (*((void (**)(void *, id))v4 + 2))(v4, v6);
      }

      id v3 = v6;
    }
    *(unsigned char *)(a1 + 628) = 0;
  }
}

void sub_1BD113EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 startDate];
  id v6 = [v4 startDate];
  uint64_t v7 = [v5 compare:v6];

  return v7;
}

void sub_1BD113F3C(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 13);
  if (WeakRetained)
  {
    if (v5
      && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_currentBucketInterval((uint64_t)a1),
          (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v8 = [v5 endDate];
      long long v9 = [v7 startDate];
      if (objc_msgSend(v8, "hk_isAfterDate:", v9))
      {
        char v10 = [v5 startDate];
        uint64_t v11 = [v7 endDate];
        char v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);
      }
      else
      {
        char v12 = 0;
      }

      unint64_t v13 = _Block_copy(a1[12]);
      if ((v12 & 1) == 0) {
        operator new();
      }
    }
    else
    {
      unint64_t v13 = _Block_copy(a1[12]);
    }
    *((unsigned char *)a1 + 624) = 1;
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
    v27[3] = &unk_1E6308FF8;
    id v15 = v5;
    id v28 = v15;
    id v16 = v13;
    id v29 = v16;
    (*((void (**)(id *, void *))*a1 + 9))(a1, v27);
    if (v5)
    {
      double v17 = [v15 startDate];
      [v17 timeIntervalSinceReferenceDate];
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_configureForStartTime((uint64_t)a1);
    }
    else
    {
      (*((void (**)(id *))*a1 + 4))(a1);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
    v21[3] = &unk_1E6309060;
    char v24 = a1;
    id v5 = v15;
    char v26 = 1;
    id v22 = v5;
    uint64_t v25 = a1;
    id v23 = WeakRetained;
    uint64_t v14 = (*((uint64_t (**)(id *, void *, uint64_t))*a1 + 14))(a1, v21, a3);
    double v18 = _Block_copy(v16);
    id v19 = a1[12];
    a1[12] = v18;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to invalidate interval: no data source available.");
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1BD11438C(_Unwind_Exception *a1)
{
  MEMORY[0x1C187B8A0](v4, 0x10F1C40E5794905);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_11;
  }
  id v3 = [v10 endDate];
  uint64_t v4 = [*(id *)(a1 + 32) startDate];
  char v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    id v6 = [v10 startDate];
    uint64_t v7 = [*(id *)(a1 + 32) endDate];
    char v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_11:
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9) {
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
      }
    }
  }
}

void sub_1BD114570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = [*(id *)(a1 + 32) startDate];
  [v5 timeIntervalSinceReferenceDate];
  uint64_t v7 = v6;

  char v8 = [*(id *)(a1 + 32) endDate];
  [v8 timeIntervalSinceReferenceDate];
  uint64_t v10 = v9;

  uint64_t v11 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  uint64_t v13 = *(void *)(a1 + 32);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  char v32 = *(unsigned char *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  uint64_t v31 = *(void *)(a1 + 56);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  uint64_t v14 = [v11 collectionCalculator:WeakRetained queryForInterval:v13 error:a2 sampleHandler:v30 mergeHandler:v29];

  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15 != v4)
    {
      id v16 = [*(id *)(a1 + 32) endDate];
      [v16 timeIntervalSinceReferenceDate];
      if (*(void *)(v15 + 40))
      {
        double v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          id v19 = [*(id *)(v15 + 40) dateIntervalAtIndex:*(void *)(v15 + 112) + 1];
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          unint64_t v20 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(v15, v15 + 120);
          double v21 = [v19 startDate];
          [v21 timeIntervalSinceReferenceDate];
          double v23 = v22;
          char v24 = [v19 endDate];
          [v24 timeIntervalSinceReferenceDate];
          HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            char v26 = _Block_copy(*(const void **)(v15 + 96));
            double v27 = v26;
            if (v26) {
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);
            }
          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_didChangeBucket(v15, 0);
        }
      }
    }
  }
  return v14;
}

void sub_1BD11481C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3()
{
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 624)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
  }
  if (*(void *)(a1 + 40)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_advanceToTime(a1, a2);
  }
  if (*(double *)(a1 + 128) > a2)
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_mergeThroughTime(a1 + 120, a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 32) < *(double *)(v10 + 8))
                {
                  uint64_t v129 = *(void *)(v10 + 32);
                  long long v113 = *(_OWORD *)v10;
                  long long v121 = *(_OWORD *)(v10 + 16);
                  long long v52 = *(_OWORD *)(a2 - 40);
                  long long v53 = *(_OWORD *)(a2 - 24);
                  *(_WORD *)(v10 + 32) = *(_WORD *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(_WORD *)(a2 - 8) = v129;
                  *(_OWORD *)(a2 - 24) = v121;
                  *(_OWORD *)(a2 - 40) = v113;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v10, (double *)(v10 + 40), (double *)(a2 - 40));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, v10 + 120, a2 - 40);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            uint64_t v54 = (void *)(v10 + 40);
            BOOL v56 = v10 == a2 || v54 == (void *)a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  long long v59 = v54;
                  double v60 = *(double *)(v58 + 48);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *v54;
                    long long v114 = *(_OWORD *)(v58 + 56);
                    uint64_t v122 = *(void *)(v58 + 72);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      uint64_t v63 = v10 + v62;
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      *(_OWORD *)(v63 + 40) = *(_OWORD *)(v10 + v62);
                      *(_OWORD *)(v63 + 56) = v64;
                      *(_WORD *)(v63 + 72) = *(_WORD *)(v10 + v62 + 32);
                      if (!v62) {
                        break;
                      }
                      v62 -= 40;
                      if (v60 >= *(double *)(v63 - 32))
                      {
                        uint64_t v65 = v10 + v62 + 40;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = v114;
                    *(_WORD *)(v65 + 32) = v122;
                  }
                  uint64_t v54 = v59 + 5;
                  v57 += 40;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 5 != (void *)a2);
              }
            }
            else if (!v56)
            {
              do
              {
                id v98 = v54;
                double v99 = *(double *)(a1 + 48);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *v54;
                  long long v117 = *(_OWORD *)(a1 + 56);
                  uint64_t v125 = *(void *)(a1 + 72);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(_OWORD *)(v101 - 3);
                    *(_OWORD *)long long v101 = *(_OWORD *)(v101 - 5);
                    *((_OWORD *)v101 + 1) = v102;
                    *((_WORD *)v101 + 16) = *((_WORD *)v101 - 4);
                    double v103 = *((double *)v101 - 9);
                    v101 -= 5;
                  }
                  while (v99 < v103);
                  void *v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *((_WORD *)v101 + 16) = v125;
                  *((_OWORD *)v101 + 1) = v117;
                }
                v54 += 5;
                a1 = (unint64_t)v98;
              }
              while (v98 + 5 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 40 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v10 + 40 * v69 + 8) < *(double *)(v70 + 48))
                  {
                    v70 += 40;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  double v71 = *(double *)(v10 + 40 * v68 + 8);
                  if (*(double *)(v70 + 8) >= v71)
                  {
                    unint64_t v72 = v10 + 40 * v68;
                    uint64_t v73 = *(void *)v72;
                    uint64_t v123 = *(void *)(v72 + 32);
                    long long v115 = *(_OWORD *)(v72 + 16);
                    do
                    {
                      unint64_t v74 = v72;
                      unint64_t v72 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_WORD *)(v74 + 32) = *(_WORD *)(v70 + 32);
                      *(_OWORD *)unint64_t v74 = v75;
                      *(_OWORD *)(v74 + 16) = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 40 * v77;
                      uint64_t v78 = 2 * v69 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v10 + 40 * v77 + 8) < *(double *)(v70 + 48))
                      {
                        v70 += 40;
                        uint64_t v77 = v78;
                      }
                      uint64_t v69 = v77;
                    }
                    while (*(double *)(v70 + 8) >= v71);
                    *(void *)unint64_t v72 = v73;
                    *(double *)(v72 + 8) = v71;
                    *(_OWORD *)(v72 + 16) = v115;
                    *(_WORD *)(v72 + 32) = v123;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x28uLL;
              do
              {
                uint64_t v80 = 0;
                uint64_t v130 = *(void *)(v10 + 32);
                long long v116 = *(_OWORD *)v10;
                long long v124 = *(_OWORD *)(v10 + 16);
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = v81;
                  uint64_t v83 = v80 + 1;
                  v81 += 40 * (v80 + 1);
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v85 = v84 + 2;
                  if (v85 < v79 && *(double *)(v82 + 40 * v83 + 8) < *(double *)(v81 + 48))
                  {
                    v81 += 40;
                    uint64_t v80 = v85;
                  }
                  long long v86 = *(_OWORD *)v81;
                  long long v87 = *(_OWORD *)(v81 + 16);
                  *(_WORD *)(v82 + 32) = *(_WORD *)(v81 + 32);
                  *(_OWORD *)unint64_t v82 = v86;
                  *(_OWORD *)(v82 + 16) = v87;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 40;
                if (v81 == a2)
                {
                  *(_WORD *)(v81 + 32) = v130;
                  *(_OWORD *)unint64_t v81 = v116;
                  *(_OWORD *)(v81 + 16) = v124;
                }
                else
                {
                  long long v88 = *(_OWORD *)a2;
                  long long v89 = *(_OWORD *)(a2 + 16);
                  *(_WORD *)(v81 + 32) = *(_WORD *)(a2 + 32);
                  *(_OWORD *)unint64_t v81 = v88;
                  *(_OWORD *)(v81 + 16) = v89;
                  *(_WORD *)(a2 + 32) = v130;
                  *(_OWORD *)a2 = v116;
                  *(_OWORD *)(a2 + 16) = v124;
                  uint64_t v90 = v81 - v10 + 40;
                  if (v90 >= 41)
                  {
                    unint64_t v91 = (v90 / 0x28uLL - 2) >> 1;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v10 + 40 * v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      uint64_t v109 = *(void *)(v81 + 32);
                      long long v106 = *(_OWORD *)(v81 + 16);
                      do
                      {
                        unint64_t v94 = v81;
                        unint64_t v81 = v10 + 40 * v91;
                        long long v95 = *(_OWORD *)v81;
                        long long v96 = *(_OWORD *)(v81 + 16);
                        *(_WORD *)(v94 + 32) = *(_WORD *)(v81 + 32);
                        *(_OWORD *)unint64_t v94 = v95;
                        *(_OWORD *)(v94 + 16) = v96;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 40 * v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_WORD *)(v81 + 32) = v109;
                      *(_OWORD *)(v81 + 16) = v106;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40 * (v12 >> 1)), (double *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            id v16 = (double *)(a1 + 40 * v13 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40), v16, (double *)(a2 - 80));
            double v17 = (double *)(a1 + 40 + 8 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 80), v17, (double *)(a2 - 120));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v16, (double *)v14, v17);
            uint64_t v126 = *(void *)(a1 + 32);
            long long v110 = *(_OWORD *)a1;
            long long v118 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 16) = v19;
            *(_WORD *)(v14 + 32) = v126;
            *(_OWORD *)unint64_t v14 = v110;
            *(_OWORD *)(v14 + 16) = v118;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40 * (v12 >> 1)), (double *)a1, (double *)(a2 - 40));
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 32) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          long long v105 = *(_OWORD *)(a1 + 16);
          uint64_t v108 = *(void *)(a1 + 32);
          if (v20 >= *(double *)(a2 - 32))
          {
            unint64_t v41 = a1 + 40;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 40;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 40;
              double v40 = *(double *)(v39 + 48);
              v39 += 40;
            }
            while (v20 >= v40);
          }
          unint64_t v43 = a2;
          if (v10 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              unint64_t v43 = v44 - 40;
              double v45 = *(double *)(v44 - 32);
              v44 -= 40;
            }
            while (v20 < v45);
          }
          while (v10 < v43)
          {
            uint64_t v128 = *(void *)(v10 + 32);
            long long v112 = *(_OWORD *)v10;
            long long v120 = *(_OWORD *)(v10 + 16);
            long long v46 = *(_OWORD *)v43;
            long long v47 = *(_OWORD *)(v43 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v43 + 32);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(_WORD *)(v43 + 32) = v128;
            *(_OWORD *)unint64_t v43 = v112;
            *(_OWORD *)(v43 + 16) = v120;
            do
            {
              double v48 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *(double *)(v43 - 32);
              v43 -= 40;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 40);
            long long v51 = *(_OWORD *)(v10 - 24);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 40) = v38;
          *(double *)(v10 - 32) = v20;
          *(_WORD *)(v10 - 8) = v108;
          *(_OWORD *)(v10 - 24) = v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        long long v104 = *(_OWORD *)(a1 + 16);
        uint64_t v107 = *(void *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 48);
          v21 += 40;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        unint64_t v25 = a2;
        if (v21 == 40)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 40;
            double v29 = *(double *)(v28 - 32);
            v28 -= 40;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 40;
            double v27 = *(double *)(v25 - 32);
            v25 -= 40;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v127 = *(void *)(v10 + 32);
            long long v111 = *(_OWORD *)v10;
            long long v119 = *(_OWORD *)(v10 + 16);
            long long v31 = *(_OWORD *)v30;
            long long v32 = *(_OWORD *)(v30 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v30 + 32);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(_WORD *)(v30 + 32) = v127;
            *(_OWORD *)unint64_t v30 = v111;
            *(_OWORD *)(v30 + 16) = v119;
            do
            {
              double v33 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v33 < v20);
            do
            {
              double v34 = *(double *)(v30 - 32);
              v30 -= 40;
            }
            while (v34 >= v20);
          }
          while (v10 < v30);
        }
        if (v10 - 40 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 40);
          long long v36 = *(_OWORD *)(v10 - 24);
          *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 40) = v22;
        *(double *)(v10 - 32) = v20;
        *(_WORD *)(v10 - 8) = v107;
        *(_OWORD *)(v10 - 24) = v104;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 40;
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        __int16 v9 = *(_WORD *)(a2 - 8);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      uint64_t v16 = *(void *)v12;
      long long v21 = *(_OWORD *)(v12 + 16);
      uint64_t v22 = *(void *)(v12 + 32);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(void *)uint64_t v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(void *a1, uint64_t a2)
{
  id v3 = (void *)a1[5];
  uint64_t v4 = a1[6];
  BOOL v5 = (void *)a1[4];
  uint64_t v6 = [v5 dateInterval];
  void v9[4] = v4;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  uint64_t v7 = [v3 collectionCalculator:v5 queryForInterval:v6 error:a2 sampleHandler:v10 mergeHandler:v9];

  return v7;
}

void sub_1BD115520(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10 = *(void *)(a1 + 32);
  *(double *)int v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  char v15 = 1;
  uint64_t v11 = [MEMORY[0x1E4F1C9C8] distantFuture];
  [v11 timeIntervalSinceReferenceDate];
  BOOL v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1BD1155C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
}

void HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::archive(uint64_t a1, int *a2)
{
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 112);
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F171B978;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  statistics::Statistics::makePrimaryStatistics(a1);
  HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>::archive((uint64_t)v6, (int8x16_t *)(a2 + 2));
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v6);
  statistics::Statistics::~Statistics((statistics::Statistics *)v6);
  uint64_t v5 = *a2;
  *(_DWORD *)(a1 + 204) |= 0x100u;
  *(void *)(a1 + 136) = v5;
  statistics::Statistics::makeMostRecentDatum(a1);
  v6[0] = &unk_1F17206F8;
  int v10 = 127;
  int8x16_t v7 = vextq_s8(*(int8x16_t *)(a2 + 26), *(int8x16_t *)(a2 + 26), 8uLL);
  v6[1] = *((void *)a2 + 15);
  v6[2] = *((void *)a2 + 16);
  __int16 v8 = 0;
  char v9 = 0;
  statistics::RawQuantitySample::operator=(*v4, (uint64_t)v6);
  PB::Base::~Base((PB::Base *)v6);
}

void sub_1BD1156F4(_Unwind_Exception *a1)
{
  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

void HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>::archive(uint64_t a1, int8x16_t *a2)
{
  *(void *)a1 = &unk_1F171B978;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (statistics **)(a1 + 8);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = 0;
  statistics::Statistics::makePrimaryStatistics(a1);
  HDStatisticsAverageSampleDuration::archive(a2, (uint64_t)v5);
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v5);
  statistics::Statistics::~Statistics((statistics::Statistics *)v5);
  statistics::Statistics::makeAuxiliaryStatistics(a1);
  HDStatisticsTimeInterval::archive((HDStatisticsTimeInterval *)&a2[3].u64[1], (uint64_t)v5);
  statistics::Statistics::operator=(*v4, (uint64_t)v5);
  statistics::Statistics::~Statistics((statistics::Statistics *)v5);
}

void sub_1BD1157CC(_Unwind_Exception *a1)
{
  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::unarchive(uint64_t a1, void *a2)
{
  *(_DWORD *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v5 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_WORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 122) = 0u;
  uint64_t v6 = a2[16];
  if (v6)
  {
    HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>::unarchive((uint64_t)v12, *(HDStatisticsTimeInterval **)(v6 + 8), *(void **)(v6 + 128));
    uint64_t v7 = v14;
    *(void *)(v5 + 48) = v13;
    long long v8 = v12[1];
    *(_OWORD *)uint64_t v5 = v12[0];
    *(_OWORD *)(v5 + 16) = v8;
    *(_OWORD *)(v5 + 32) = v12[2];
    *(void *)(a1 + 64) = v7;
    double result = v17;
    uint64_t v9 = v16;
    *(_OWORD *)(a1 + 72) = v15;
    *(void *)(a1 + 88) = v9;
    *(double *)(a1 + 96) = result;
  }
  *(_DWORD *)a1 = a2[17];
  uint64_t v10 = a2[14];
  if (v10)
  {
    double result = *(double *)(v10 + 8);
    uint64_t v11 = *(void *)(v10 + 16);
    *(int8x16_t *)(a1 + 104) = vextq_s8(*(int8x16_t *)(v10 + 24), *(int8x16_t *)(v10 + 24), 8uLL);
    *(double *)(a1 + 120) = result;
    *(void *)(a1 + 128) = v11;
    *(_WORD *)(a1 + 136) = 1;
  }
  return result;
}

double HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>::unarchive(uint64_t a1, HDStatisticsTimeInterval *this, void *a3)
{
  *(_WORD *)(a1 + 48) = 0;
  int8x16_t v4 = 0uLL;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0;
  if (a3)
  {
    uint64_t v5 = a3[3];
    uint64_t v6 = a3[14];
    if (v6)
    {
      int8x16_t v4 = *(int8x16_t *)(v6 + 24);
      uint64_t v7 = *(void *)(v6 + 8);
      char v8 = 1;
      uint64_t v6 = *(void *)(v6 + 16);
    }
    else
    {
      char v8 = 0;
      uint64_t v7 = 0;
    }
    *(void *)a1 = a3[12];
    *(void *)(a1 + 8) = v5;
    int8x16_t v4 = vextq_s8(v4, v4, 8uLL);
    *(int8x16_t *)(a1 + 16) = v4;
    *(void *)(a1 + 32) = v7;
    *(void *)(a1 + 40) = v6;
    *(unsigned char *)(a1 + 48) = v8;
    *(unsigned char *)(a1 + 49) = 0;
  }
  if (this)
  {
    HDStatisticsTimeInterval::unarchive(this, (uint64_t)&v11);
    *(void *)(a1 + 56) = v11;
    v4.i64[0] = v14;
    uint64_t v9 = v13;
    *(_OWORD *)(a1 + 64) = v12;
    *(void *)(a1 + 80) = v9;
    *(void *)(a1 + 88) = v4.i64[0];
  }
  return *(double *)v4.i64;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6 = a3;
  uint64_t v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = &unk_1F1725120;
  double v9 = 900.0;
  if ((v6 & 0x10) == 0) {
    double v9 = 0.0;
  }
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(void *)(v8 + 104) = 0;
  *(void *)(v8 + 112) = 0;
  *(void *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_WORD *)(a1 + 576) = 1;
  *(unsigned char *)(a1 + 578) = 0;
  *(unsigned char *)(a1 + 580) = 0;
  *(void *)(a1 + 584) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(void *)(a1 + 624) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);

  JUMPOUT(0x1C187B8A0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1F1725120;
  unint64_t v2 = *(void **)(a1 + 608);
  if (v2)
  {
    *(void *)(a1 + 616) = v2;
    operator delete(v2);
  }

  id v3 = *(void **)(a1 + 544);
  if (v3)
  {
    *(void *)(a1 + 552) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  int8x16_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(unsigned char *)(result + 576) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::setDateInterval(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 copy];
  int8x16_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;

  uint64_t v5 = [v6 startDate];
  [v5 timeIntervalSinceReferenceDate];
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
}

void sub_1BD115B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(void *)(a1 + 40))
  {
    id v5 = v3;
    [v3 timeIntervalSinceReferenceDate];
    *(void *)(a1 + 584) = v4;
    id v3 = v5;
  }
}

void sub_1BD115B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::setStatisticsConfiguration(id *a1, void *a2)
{
  objc_storeStrong(a1 + 74, a2);
  id v7 = a2;
  id v4 = a1[74];
  id v5 = a1[71];
  a1[71] = v4;
  id v6 = v4;

  objc_storeStrong(a1 + 19, a1[71]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (*(void *)(a1 + 40)) {
    return 1;
  }
  BOOL v7 = *(void *)(a1 + 224) == *(void *)(a1 + 216) && *(uint64_t *)(a1 + 248) < 1
    || HKIntervalMask<double>::firstDifference(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)a2, *(void *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (v7) {
    return 1;
  }
  double v9 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128);

  return v9(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 copy];
  id v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v3;
}

void sub_1BD115D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::dataSource(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));

  return WeakRetained;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::currentStatistics(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 576))
  {
    uint64_t v1 = 0;
  }
  else
  {
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_updateSourceOrder((uint64_t)v4);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_mergeThroughTime((uint64_t)v4, v5);
    uint64_t v1 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v4);
  }

  return v1;
}

void sub_1BD115E44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(a1 + 64);
  BOOL v7 = v6;
  if (v6)
  {
    uint64_t v8 = [v6 startDate];
    [v8 timeIntervalSinceReferenceDate];
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    uint64_t v10 = [v7 endDate];
    [v10 timeIntervalSinceReferenceDate];
    double v12 = v11;
    double v13 = *(double *)(a2 + 8);

    if (v12 < v13) {
      goto LABEL_9;
    }
  }
  if (!*(unsigned char *)(a1 + 578))
  {
LABEL_11:
    uint64_t v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 577))
  {
LABEL_9:
    uint64_t v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(unsigned char *)(a1 + 579)) {
      goto LABEL_11;
    }
    unint64_t v17 = *(void *)(a1 + 616);
    unint64_t v18 = *(void *)(a1 + 624);
    if (v17 >= v18)
    {
      uint64_t v22 = *(void *)(a1 + 608);
      unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      unint64_t v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24) {
        unint64_t v24 = 2 * v25;
      }
      if (v25 >= 0x333333333333333) {
        unint64_t v26 = 0x666666666666666;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26) {
        unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      }
      else {
        uint64_t v27 = 0;
      }
      unint64_t v28 = v26 + 40 * v23;
      unint64_t v29 = v26 + 40 * v27;
      long long v30 = *(_OWORD *)a2;
      long long v31 = *(_OWORD *)(a2 + 16);
      *(void *)(v28 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      unint64_t v21 = v28 + 40;
      long long v32 = *(char **)(a1 + 616);
      double v33 = *(char **)(a1 + 608);
      if (v32 != v33)
      {
        do
        {
          long long v34 = *(_OWORD *)(v32 - 40);
          long long v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        long long v32 = *(char **)(a1 + 608);
      }
      *(void *)(a1 + 608) = v28;
      *(void *)(a1 + 616) = v21;
      *(void *)(a1 + 624) = v29;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      long long v19 = *(_OWORD *)a2;
      long long v20 = *(_OWORD *)(a2 + 16);
      *(void *)(v17 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      unint64_t v21 = v17 + 40;
    }
    *(void *)(a1 + 616) = v21;
    goto LABEL_9;
  }
  uint64_t v14 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
  uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1BD1160B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = v5;
  if (*(unsigned char *)(a1 + 578))
  {
    uint64_t v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 578) = 1;
  uint64_t v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    uint64_t v7 = 0;
    goto LABEL_82;
  }
  uint64_t v65 = v6;
  if (*(unsigned char *)(a1 + 577)) {
    goto LABEL_5;
  }
  double v9 = *(void **)(a1 + 600);
  if (!v9)
  {
    id v68 = 0;
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 40))
  {
LABEL_5:
    int v8 = 0;
    id v68 = 0;
    goto LABEL_29;
  }
  [v9 sortUsingComparator:&__block_literal_global_923];
  id v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v10 = *(id *)(a1 + 600);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  if (!v11)
  {

    id v12 = 0;
    goto LABEL_27;
  }
  id v12 = 0;
  uint64_t v13 = *(void *)v70;
  do
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (*(void *)v70 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(id *)(*((void *)&v69 + 1) + 8 * i);
      uint64_t v16 = v15;
      if (v12)
      {
        unint64_t v17 = [v15 startDate];
        unint64_t v18 = [v12 endDate];
        int v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          long long v20 = [v16 endDate];
          unint64_t v21 = [v12 endDate];
          int v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22) {
            goto LABEL_21;
          }
          id v23 = objc_alloc(MEMORY[0x1E4F28C18]);
          unint64_t v24 = [v12 startDate];
          unint64_t v25 = [v16 endDate];
          id v26 = (id)[v23 initWithStartDate:v24 endDate:v25];
        }
        else
        {
          [v68 addObject:v12];
          id v26 = v16;
        }
        id v12 = v26;
      }
      else
      {
        id v12 = v15;
      }
LABEL_21:
    }
    uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  }
  while (v11);

  if (v12) {
    [v68 addObject:v12];
  }
LABEL_27:

LABEL_28:
  int v8 = 1;
LABEL_29:
  uint64_t v27 = *(void **)(a1 + 600);
  *(void *)(a1 + 600) = 0;

  *(unsigned char *)(a1 + 577) = 0;
  if (!v8)
  {
    unint64_t v38 = *(void *)(a1 + 608);
    *(void *)(a1 + 624) = 0;
    *(void *)(a1 + 616) = 0;
    *(void *)(a1 + 608) = 0;
    unint64_t v39 = v38;
    goto LABEL_47;
  }
  unint64_t v28 = [v68 lastObject];
  if (v28)
  {
    unint64_t v29 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_currentBucketInterval(a1);
    long long v30 = [v29 endDate];
    long long v31 = [v28 endDate];
    int v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      double v33 = [v28 endDate];
      [v33 timeIntervalSinceReferenceDate];
      double v35 = v34;

      uint64_t v36 = *(void *)(a1 + 608);
      BOOL v37 = *(long long **)(a1 + 616);
      while ((long long *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((long long *)v36 != v37)
          {
            double v40 = (long long *)(v36 + 40);
            if ((long long *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  long long v41 = *v40;
                  long long v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)uint64_t v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                double v40 = (long long *)((char *)v40 + 40);
              }
              while (v40 != v37);
              BOOL v37 = *(long long **)(a1 + 616);
            }
          }
          if ((long long *)v36 != v37) {
            *(void *)(a1 + 616) = v36;
          }
          break;
        }
        v36 += 40;
      }
    }
  }
  unint64_t v38 = *(void *)(a1 + 608);
  unint64_t v39 = *(void *)(a1 + 616);
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 616) = 0;
  if (![v68 count]) {
    goto LABEL_60;
  }
LABEL_47:
  id v43 = v68;
  long long __p = (void *)v38;
  if (v43)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v44 = v43;
    uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v70;
      while (2)
      {
        for (uint64_t j = 0; j != v45; ++j)
        {
          if (*(void *)v70 != v46) {
            objc_enumerationMutation(v44);
          }
          id v48 = *(id *)(*((void *)&v69 + 1) + 8 * j);
          int v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval((id *)a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
        if (v45) {
          continue;
        }
        break;
      }
    }

LABEL_59:
    unint64_t v38 = (unint64_t)__p;
LABEL_60:
    unint64_t v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v51;
    }
    int v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    long long __p = (void *)v38;
    if (v39 != v38)
    {
      uint64_t v54 = v38;
      uint64_t v50 = v67;
      do
      {
        int v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_primitiveAddSample(a1, v54, 1, v50);
        int v53 = v55;
        v54 += 40;
        if (v54 == v39) {
          char v56 = 0;
        }
        else {
          char v56 = v55;
        }
        uint64_t v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval((id *)a1, 0, v67))goto LABEL_59; {
LABEL_70:
    }
    int v53 = 0;
  }
  if (*(void *)(a1 + 40) && *(void *)(a1 + 552) != *(void *)(a1 + 544))
  {
    do
    {
      uint64_t v57 = objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(void *)(a1 + 112) + 1, v50, v65);
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      unint64_t v58 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, a1 + 120);
      long long v59 = [v57 startDate];
      [v59 timeIntervalSinceReferenceDate];
      double v61 = v60;
      uint64_t v62 = [v57 endDate];
      [v62 timeIntervalSinceReferenceDate];
      HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
    }
    while (*(void *)(a1 + 552) != *(void *)(a1 + 544));
  }
  *(unsigned char *)(a1 + 578) = 0;
  if (__p) {
    operator delete(__p);
  }

  if (v53)
  {
    if (*(unsigned char *)(a1 + 580))
    {
      *(unsigned char *)(a1 + 580) = 0;
      id v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
      uint64_t v7 = 1;
      goto LABEL_82;
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v6 = v65;
LABEL_82:
  *(unsigned char *)(a1 + 578) = 0;
LABEL_83:

  return v7;
}

void sub_1BD1167B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    *(unsigned char *)(v13 + 578) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(unsigned char *)(result + 579) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(unsigned char *)(a1 + 578)) {
      goto LABEL_12;
    }
    uint64_t v7 = 0;
LABEL_14:
    uint64_t v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval((id *)a1, v7, a3);
    goto LABEL_15;
  }
  uint64_t v7 = [v6 dateIntervalForIntervalsContainingInterval:v5];

  if (!*(unsigned char *)(a1 + 578)) {
    goto LABEL_14;
  }
  if (!v7)
  {
LABEL_12:
    id v12 = *(void **)(a1 + 600);
    *(void *)(a1 + 600) = 0;

    uint64_t v7 = 0;
    uint64_t v11 = 1;
    *(unsigned char *)(a1 + 577) = 1;
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 577))
  {
    int v8 = *(void **)(a1 + 600);
    if (!v8)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      id v10 = *(void **)(a1 + 600);
      *(void *)(a1 + 600) = v9;

      int v8 = *(void **)(a1 + 600);
    }
    [v8 addObject:v7];
  }
  uint64_t v11 = 1;
LABEL_15:

  return v11;
}

void sub_1BD116AB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    *(unsigned char *)(a1 + 576) = 1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v9[3] = &unk_1E63043E8;
    uint64_t v12 = a1;
    id v10 = v5;
    id v11 = WeakRetained;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 112))(a1, v9, a3);
    if (v7 && *(unsigned char *)(a1 + 576) && !*(void *)(a1 + 40)) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to query for initial statistics: no data source available.");
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1BD116C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::reset(uint64_t result)
{
  *(unsigned char *)(result + 576) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 encodeBool:*(unsigned __int8 *)(a1 + 576) forKey:@"needs_config"];
  id v12 = v3;
  int v32 = &unk_1F1726FA0;
  double v33 = 0;
  int v38 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
  LOBYTE(v38) = 1;
  uint64_t v34 = v4;
  uint64_t v35 = 0;
  statistics::StatisticsEngine::makeCurrentBucket((uint64_t)&v32);
  uint64_t v13 = &unk_1F171B9C8;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  int v31 = 511;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 0;
  int8x16_t v14 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  uint64_t v5 = *(void *)(a1 + 136);
  char v29 = *(unsigned char *)(a1 + 144);
  char v30 = *(unsigned char *)(a1 + 145);
  BOOL v28 = *(_DWORD *)(a1 + 148) == 0;
  int8x16_t v15 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  uint64_t v7 = *(int8x16_t **)(a1 + 216);
  if (v7 != *(int8x16_t **)(a1 + 224))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v7, *v7, 8uLL);
    int8x16_t v40 = v7[1];
    char v43 = 0;
    HIBYTE(v42) = v7[2].i8[9];
    LOBYTE(v42) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>();
  }
  statistics::StatisticsBucket::makeStatistics((uint64_t)&v13);
  HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>::archive((uint64_t)&v39, (int8x16_t *)(a1 + 240));
  statistics::Statistics::operator=(*((statistics **)&v22 + 1), (uint64_t)&v39);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v39);
  uint64_t v8 = *(void *)(a1 + 336);
  if (v8 != a1 + 344)
  {
    HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>::archive((uint64_t)&v39, (int8x16_t *)(v8 + 40));
    uint64_t v9 = *(void *)(v8 + 32);
    v46 |= 0x200u;
    uint64_t v45 = v9;
    PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>();
  }
  id v10 = *(int8x16_t **)(a1 + 184);
  if (v10 != *(int8x16_t **)(a1 + 192))
  {
    unint64_t v39 = (char *)&unk_1F1727540;
    v41.i32[0] = 3;
    int8x16_t v40 = vextq_s8(*v10, *v10, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>();
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v13);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v13);
  id v11 = *(int8x16_t **)(a1 + 544);
  if (v11 != *(int8x16_t **)(a1 + 552))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v11, *v11, 8uLL);
    int8x16_t v40 = v11[1];
    __int16 v42 = 0;
    char v43 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>();
  }
  PB::Writer::Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v39);
  [v12 encodeBytes:v40.i64[0] length:&v39[-v40.i64[0]] forKey:@"hdsce_archived_representation"];
  PB::Writer::~Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);
}

void sub_1BD11700C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v59 = a2;
  *(unsigned char *)(a1 + 576) = [v59 decodeBoolForKey:@"needs_config"];
  id v3 = v59;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)&v63.n128_i64[1], 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)long long v64 = 0u;
  long long v65 = 0u;
  uint64_t v102 = 0;
  id v62 = v3;
  PB::Reader::Reader((PB::Reader *)v101, (const unsigned __int8 *)[v62 decodeBytesForKey:@"hdsce_archived_representation" returnedLength:&v102]);
  unint64_t v94 = &unk_1F1726FA0;
  uint64_t v95 = 0;
  uint64_t v99 = 0;
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  int v100 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v94, (PB::Reader *)v101);
  uint64_t v61 = a1;
  v63.n128_u64[0] = v96;
  if (v95)
  {
    uint64_t v70 = 0;
    memset(v73, 0, sizeof(v73));
    memset(&v75[64], 0, 32);
    uint64_t v79 = 0;
    uint64_t v78 = 0;
    *(_OWORD *)long long __p = 0u;
    memset(v75, 0, 58);
    uint64_t v76 = 0;
    uint64_t v77 = &v78;
    long long v80 = 0u;
    long long v81 = 0u;
    int v82 = 1065353216;
    long long v83 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    uint64_t v86 = 0;
    int v87 = 1065353216;
    long long v88 = 0u;
    long long v89 = 0u;
    int v90 = 1065353216;
    long long v91 = 0u;
    long long v92 = 0u;
    int v93 = 1065353216;
    int8x16_t v66 = vextq_s8(*(int8x16_t *)(v95 + 8), *(int8x16_t *)(v95 + 8), 8uLL);
    uint64_t v4 = *(void *)(v95 + 72);
    uint64_t v67 = *(void *)(v95 + 64);
    char v68 = *(unsigned char *)(v95 + 185);
    char v69 = *(unsigned char *)(v95 + 186);
    int8x16_t v71 = vextq_s8(*(int8x16_t *)(v95 + 24), *(int8x16_t *)(v95 + 24), 8uLL);
    uint64_t v72 = v4;
    uint64_t v6 = *(void *)(v95 + 80);
    uint64_t v5 = *(void *)(v95 + 88);
    double v60 = (void *)v95;
    if (v6 != v5)
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(*(void *)v6 + 24);
        uint64_t v9 = *(void *)(*(void *)v6 + 32);
        uint64_t v10 = *(void *)(*(void *)v6 + 8);
        uint64_t v11 = *(void *)(*(void *)v6 + 16);
        char v12 = *(unsigned char *)(*(void *)v6 + 41);
        char v13 = *(unsigned char *)(*(void *)v6 + 40);
        if ((unint64_t)v7 >= *(void *)v75)
        {
          int8x16_t v14 = (char *)__p[0];
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (char *)__p[0]) >> 4);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(*(void *)v75 - (unint64_t)__p[0]) >> 4) > v16) {
            unint64_t v16 = 0x5555555555555556 * ((uint64_t)(*(void *)v75 - (unint64_t)__p[0]) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v75 - (unint64_t)__p[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v17 = 0x555555555555555;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17)
          {
            unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            uint64_t v7 = (char *)__p[1];
            int8x16_t v14 = (char *)__p[0];
          }
          else
          {
            uint64_t v18 = 0;
          }
          unint64_t v19 = v17 + 48 * v15;
          *(void *)unint64_t v19 = v9;
          *(void *)(v19 + 8) = v8;
          *(void *)(v19 + 16) = v10;
          *(void *)(v19 + 24) = v11;
          *(_WORD *)(v19 + 32) = 1;
          *(unsigned char *)(v19 + 40) = 0;
          *(unsigned char *)(v19 + 41) = v12;
          *(unsigned char *)(v19 + 42) = v13;
          uint64_t v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              long long v21 = *((_OWORD *)v7 - 3);
              long long v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            int8x16_t v14 = (char *)__p[0];
          }
          uint64_t v7 = (char *)(v19 + 48);
          __p[0] = v20;
          __p[1] = (void *)(v19 + 48);
          *(void *)long long v75 = v17 + 48 * v18;
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)uint64_t v7 = v9;
          *((void *)v7 + 1) = v8;
          *((void *)v7 + 2) = v10;
          *((void *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        __p[1] = v7;
        v6 += 8;
      }
      while (v6 != v5);
    }
    uint64_t v23 = v60[13];
    if (v23)
    {
      HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>::unarchive((uint64_t)&v103, *(HDStatisticsTimeInterval **)(v23 + 8), *(void **)(v23 + 128));
      *(_OWORD *)&v75[8] = v103;
      *(_OWORD *)&v75[24] = v104;
      *(_OWORD *)&v75[40] = v105;
      *(void *)&v75[56] = v106;
      *(void *)&v75[64] = v107;
      if (*(void *)&v75[72])
      {
        *(void *)&v75[80] = *(void *)&v75[72];
        operator delete(*(void **)&v75[72]);
      }
      *(_OWORD *)&v75[72] = v108;
      *(void *)&v75[88] = v109;
      uint64_t v109 = 0;
      long long v108 = 0uLL;
      uint64_t v76 = v110;
    }
    long long v24 = (uint64_t *)v60[17];
    for (uint64_t i = (uint64_t *)v60[18]; v24 != i; ++v24)
    {
      uint64_t v26 = *v24;
      HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>::unarchive((uint64_t)&v103, *(HDStatisticsTimeInterval **)(*v24 + 8), *(void **)(*v24 + 128));
      uint64_t v27 = *(void *)(v26 + 144);
      BOOL v28 = v78;
      char v29 = &v78;
      char v30 = &v78;
      if (v78)
      {
        do
        {
          while (1)
          {
            char v30 = (uint64_t **)v28;
            uint64_t v31 = v28[4];
            if (v31 <= v27) {
              break;
            }
            BOOL v28 = *v30;
            char v29 = v30;
            if (!*v30) {
              goto LABEL_34;
            }
          }
          if (v31 >= v27)
          {
            double v33 = (char *)v30;
            goto LABEL_37;
          }
          BOOL v28 = v30[1];
        }
        while (v28);
        char v29 = v30 + 1;
      }
LABEL_34:
      double v33 = (char *)operator new(0x88uLL);
      *((void *)v33 + 4) = v27;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *(_OWORD *)(v33 + 120) = 0u;
      *(void *)double v33 = 0;
      *((void *)v33 + 1) = 0;
      *((void *)v33 + 2) = v30;
      *char v29 = (uint64_t *)v33;
      int v32 = (uint64_t *)v33;
      if (*v77)
      {
        uint64_t v77 = (uint64_t **)*v77;
        int v32 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v78, v32);
      ++v79;
LABEL_37:
      uint64_t v34 = v106;
      long long v36 = v104;
      long long v35 = v105;
      uint64_t v37 = (void *)*((void *)v33 + 13);
      *(_OWORD *)(v33 + 40) = v103;
      *(_OWORD *)(v33 + 56) = v36;
      *(_OWORD *)(v33 + 72) = v35;
      *((void *)v33 + 11) = v34;
      *((void *)v33 + 12) = v107;
      if (v37)
      {
        *((void *)v33 + 14) = v37;
        operator delete(v37);
        *((void *)v33 + 13) = 0;
        *((void *)v33 + 14) = 0;
        *((void *)v33 + 15) = 0;
      }
      *(_OWORD *)(v33 + 104) = v108;
      *((void *)v33 + 15) = v109;
      uint64_t v109 = 0;
      long long v108 = 0uLL;
      *((void *)v33 + 16) = v110;
    }
    uint64_t v38 = v60[5];
    for (uint64_t j = v60[6]; v38 != j; v38 += 8)
    {
      double v41 = *(double *)(*(void *)v38 + 8);
      double v40 = *(double *)(*(void *)v38 + 16);
      if (v41 >= v40) {
        double v42 = *(double *)(*(void *)v38 + 16);
      }
      else {
        double v42 = *(double *)(*(void *)v38 + 8);
      }
      if (v40 < v41) {
        double v40 = *(double *)(*(void *)v38 + 8);
      }
      HKIntervalMask<double>::_insertInterval(v73, v42, v40);
    }
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::operator=((uint64_t)&v63.n128_i64[1], (uint64_t)&v66);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v66);
  }
  uint64_t v43 = v97;
  uint64_t v44 = v98;
  if (v97 != v98)
  {
    uint64_t v45 = (char *)v64[1];
    do
    {
      uint64_t v46 = *(void *)(*(void *)v43 + 24);
      uint64_t v47 = *(void *)(*(void *)v43 + 32);
      uint64_t v48 = *(void *)(*(void *)v43 + 8);
      uint64_t v49 = *(void *)(*(void *)v43 + 16);
      if ((unint64_t)v45 >= (unint64_t)v65)
      {
        uint64_t v50 = (char *)v64[0];
        unint64_t v51 = 0xCCCCCCCCCCCCCCCDLL * ((v45 - (char *)v64[0]) >> 3);
        unint64_t v52 = v51 + 1;
        if (v51 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(v65 - (unint64_t)v64[0]) >> 3) > v52) {
          unint64_t v52 = 0x999999999999999ALL * ((uint64_t)(v65 - (unint64_t)v64[0]) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v65 - (unint64_t)v64[0]) >> 3) >= 0x333333333333333) {
          unint64_t v53 = 0x666666666666666;
        }
        else {
          unint64_t v53 = v52;
        }
        if (v53)
        {
          unint64_t v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v53);
          uint64_t v50 = (char *)v64[0];
          uint64_t v45 = (char *)v64[1];
        }
        else
        {
          uint64_t v54 = 0;
        }
        unint64_t v55 = v53 + 40 * v51;
        *(void *)unint64_t v55 = v47;
        *(void *)(v55 + 8) = v46;
        *(void *)(v55 + 16) = v48;
        *(void *)(v55 + 24) = v49;
        *(_WORD *)(v55 + 32) = 1;
        char v56 = (char *)v55;
        if (v45 != v50)
        {
          do
          {
            long long v57 = *(_OWORD *)(v45 - 40);
            long long v58 = *(_OWORD *)(v45 - 24);
            *((_WORD *)v56 - 4) = *((_WORD *)v45 - 4);
            *(_OWORD *)(v56 - 24) = v58;
            *(_OWORD *)(v56 - 40) = v57;
            v56 -= 40;
            v45 -= 40;
          }
          while (v45 != v50);
          uint64_t v50 = (char *)v64[0];
        }
        uint64_t v45 = (char *)(v55 + 40);
        v64[0] = v56;
        v64[1] = (void *)(v55 + 40);
        *(void *)&long long v65 = v53 + 40 * v54;
        if (v50) {
          operator delete(v50);
        }
      }
      else
      {
        *(void *)uint64_t v45 = v47;
        *((void *)v45 + 1) = v46;
        *((void *)v45 + 2) = v48;
        *((void *)v45 + 3) = v49;
        *((_WORD *)v45 + 16) = 1;
        v45 += 40;
      }
      v64[1] = v45;
      v43 += 8;
    }
    while (v43 != v44);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v94);

  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::operator=((void *)(v61 + 112), &v63);
  if (v64[0])
  {
    v64[1] = v64[0];
    operator delete(v64[0]);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v63.n128_i64[1]);
}

void sub_1BD117764(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table((uint64_t)&STACK[0x380]);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a2);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x330]);
  uint64_t v8 = (void *)STACK[0x318];
  if (STACK[0x318])
  {
    STACK[0x320] = (unint64_t)v8;
    operator delete(v8);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x2F0]);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::destroy((void *)STACK[0x2E0]);
  uint64_t v9 = (void *)STACK[0x2B8];
  if (STACK[0x2B8])
  {
    STACK[0x2C0] = (unint64_t)v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v10;
    operator delete(v10);
  }
  objc_destroyWeak((id *)&STACK[0x258]);
  uint64_t v11 = (void *)STACK[0x240];
  if (STACK[0x240])
  {
    STACK[0x248] = (unint64_t)v11;
    operator delete(v11);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x3B0]);
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 154) = 0u;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = a1 + 224;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 272) = 1065353216;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(void *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 376) = 1065353216;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_DWORD *)(a1 + 416) = 1065353216;
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_configureForStartTime(uint64_t a1)
{
  unint64_t v28 = 0;
  unint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
    uint64_t v4 = [v2 dateIntervalContainingDate:v3 index:&v28];

    uint64_t v5 = [v4 startDate];
    [v5 timeIntervalSinceReferenceDate];
    double v7 = v6;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
LABEL_5:
    double v13 = v9;

    goto LABEL_6;
  }
  id v10 = *(id *)(a1 + 64);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v11 = [v10 startDate];
    [v11 timeIntervalSinceReferenceDate];
    double v7 = v12;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
    goto LABEL_5;
  }
  double v7 = -1.79769313e308;
  double v13 = 1.79769313e308;
LABEL_6:

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v21, WeakRetained, v7, v13);

  if (*(void *)(a1 + 32) == 1) {
    char v23 = 1;
  }
  uint64_t v22 = *(void *)(a1 + 56);
  char v24 = *(unsigned char *)(a1 + 24) & 1;
  if (v27 != (char *)(a1 + 72)) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27, *(char **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4);
  }
  objc_storeStrong(&v26, *(id *)(a1 + 592));
  if (!*(void *)(a1 + 40)) {
    int v25 = 0;
  }
  unint64_t v15 = v28;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v21);
  v18.n128_u64[0] = v15;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)&v18.n128_i64[1], (uint64_t)v17);
  long long __p = 0u;
  long long v20 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::operator=((void *)(a1 + 112), &v18);

  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v18.n128_i64[1]);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v17);
  *(unsigned char *)(a1 + 576) = 0;
  return HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v21);
}

void sub_1BD117BD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 96);
  double v7 = *(unsigned char **)(a2 + 104);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(void *)(a1 + 96) = v10;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(void *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  long long v12 = *(_OWORD *)(a2 + 120);
  long long v13 = *(_OWORD *)(a2 + 136);
  long long v14 = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v14;
  *(_OWORD *)(a1 + 136) = v13;
  *(_OWORD *)(a1 + 120) = v12;
  uint64_t v15 = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 176) = v15;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 184), *(const void **)(a2 + 184), *(void *)(a2 + 192), (uint64_t)(*(void *)(a2 + 192) - *(void *)(a2 + 184)) >> 4);
  uint64_t v16 = *(void *)(a2 + 208);
  *(void *)(a1 + 224) = 0;
  unint64_t v17 = (void *)(a1 + 224);
  *(void *)(a1 + 208) = v16;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 216) = a1 + 224;
  __n128 v18 = *(void **)(a2 + 216);
  if (v18 != (void *)(a2 + 224))
  {
    unint64_t v19 = 0;
    long long v20 = (void *)(a1 + 224);
    while (1)
    {
      long long v21 = (void *)(a1 + 224);
      if (v20 == v17) {
        goto LABEL_12;
      }
      uint64_t v22 = v19;
      char v23 = (void *)(a1 + 224);
      if (v19)
      {
        do
        {
          long long v21 = v22;
          uint64_t v22 = (void *)v22[1];
        }
        while (v22);
      }
      else
      {
        do
        {
          long long v21 = (void *)v23[2];
          BOOL v24 = *v21 == (void)v23;
          char v23 = v21;
        }
        while (v24);
      }
      uint64_t v25 = v18[4];
      if (v21[4] < v25)
      {
LABEL_12:
        if (v19) {
          id v26 = (uint64_t **)v21;
        }
        else {
          id v26 = (uint64_t **)(a1 + 224);
        }
        if (v19) {
          uint64_t v27 = (uint64_t **)(v21 + 1);
        }
        else {
          uint64_t v27 = (uint64_t **)(a1 + 224);
        }
        if (!*v27)
        {
LABEL_28:
          char v30 = (char *)operator new(0x88uLL);
          *((void *)v30 + 4) = v18[4];
          long long v31 = *(_OWORD *)(v18 + 5);
          long long v32 = *(_OWORD *)(v18 + 7);
          long long v33 = *(_OWORD *)(v18 + 9);
          *((void *)v30 + 11) = v18[11];
          *(_OWORD *)(v30 + 72) = v33;
          *(_OWORD *)(v30 + 56) = v32;
          *(_OWORD *)(v30 + 40) = v31;
          uint64_t v34 = v18[12];
          *((void *)v30 + 13) = 0;
          *((void *)v30 + 12) = v34;
          *((void *)v30 + 14) = 0;
          *((void *)v30 + 15) = 0;
          std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)v30 + 13, (const void *)v18[13], v18[14], (uint64_t)(v18[14] - v18[13]) >> 4);
          *((void *)v30 + 16) = v18[16];
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 216), (uint64_t)v26, v27, (uint64_t *)v30);
        }
      }
      else
      {
        uint64_t v27 = (uint64_t **)(a1 + 224);
        id v26 = (uint64_t **)(a1 + 224);
        if (!v19) {
          goto LABEL_28;
        }
        unint64_t v28 = v19;
        while (1)
        {
          while (1)
          {
            id v26 = (uint64_t **)v28;
            uint64_t v29 = v28[4];
            if (v29 <= v25) {
              break;
            }
            unint64_t v28 = *v26;
            uint64_t v27 = v26;
            if (!*v26) {
              goto LABEL_28;
            }
          }
          if (v29 >= v25) {
            break;
          }
          unint64_t v28 = v26[1];
          if (!v28)
          {
            uint64_t v27 = v26 + 1;
            goto LABEL_28;
          }
        }
      }
      long long v35 = (void *)v18[1];
      if (v35)
      {
        do
        {
          long long v36 = v35;
          long long v35 = (void *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          long long v36 = (void *)v18[2];
          BOOL v24 = *v36 == (void)v18;
          __n128 v18 = v36;
        }
        while (!v24);
      }
      if (v36 == (void *)(a2 + 224)) {
        break;
      }
      unint64_t v19 = (void *)*v17;
      long long v20 = *(void **)(a1 + 216);
      __n128 v18 = v36;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 240, a2 + 240);
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 280), *(const void **)(a2 + 280), *(void *)(a2 + 288), (uint64_t)(*(void *)(a2 + 288) - *(void *)(a2 + 280)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 304, a2 + 304);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 344, a2 + 344);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 384, a2 + 384);
  return a1;
}

void sub_1BD117F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, id *location, void **a12)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v17);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  unint64_t v19 = *v15;
  if (*v15)
  {
    *(void *)(v13 + 288) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::destroy(*v12);
  long long v20 = *a9;
  if (*a9)
  {
    *(void *)(v13 + 192) = v20;
    operator delete(v20);
  }
  long long v21 = *a10;
  if (*a10)
  {
    *(void *)(v13 + 104) = v21;
    operator delete(v21);
  }
  objc_destroyWeak(location);
  uint64_t v22 = *a12;
  if (*a12)
  {
    *(void *)(v13 + 72) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  double v4 = *(double *)a2;
  id v5 = objc_alloc(MEMORY[0x1E4F1C9C8]);
  long long v6 = (double *)(a2 + 40);
  if (v4 != -1.79769313e308) {
    long long v6 = (double *)a2;
  }
  int v87 = (void *)[v5 initWithTimeIntervalSinceReferenceDate:*v6];
  if (*(double *)(a2 + 8) == 1.79769313e308) {
    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 48)];
  }
  else {
    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 8)];
  }
  uint64_t v8 = (void *)v7;
  id v9 = *(id *)(a1 + 16);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v10 = *(id *)(a1 + 16);
    if ([v10 shouldUseUnderlyingTypeForStatistics])
    {
      uint64_t v11 = [v10 underlyingSampleType];

      id v9 = (id)v11;
    }
  }
  long long v12 = (void *)[objc_alloc(MEMORY[0x1E4F2B5B0]) initWithDataType:v9 startDate:v87 endDate:v8];
  uint64_t v86 = a1;
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v13 = (id *)(a1 + 48);
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      id v15 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      uint64_t v16 = *(uint64_t **)(a2 + 280);
      uint64_t v17 = *(uint64_t **)(a2 + 288);
      while (v16 != v17)
      {
        uint64_t v18 = *v16;
        id v19 = objc_loadWeakRetained(v13);
        long long v20 = [v19 sourceForSourceID:v18];

        if (v20)
        {
          if (([v15 containsObject:v20] & 1) == 0) {
            [v15 addObject:v20];
          }
        }

        ++v16;
      }
      long long v21 = (void *)[v15 copy];
      [v12 _setSources:v21];
    }
  }

  v100[0] = &unk_1F1725310;
  v100[3] = v100;
  id v88 = v12;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)v102, (uint64_t)v100);
  long long v104 = 0;
  uint64_t v22 = operator new(0x28uLL);
  *uint64_t v22 = &unk_1F17251F0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(v22 + 1), (uint64_t)v102);
  long long v104 = v22;
  id v23 = v88;
  BOOL v24 = (void *)MEMORY[0x1E4F2B370];
  id v89 = v23;
  uint64_t v25 = [MEMORY[0x1E4F2B618] secondUnit];
  long long v26 = *(_OWORD *)(a2 + 136);
  long long v91 = *(_OWORD *)(a2 + 120);
  long long v92 = v26;
  long long v93 = *(_OWORD *)(a2 + 152);
  uint64_t v27 = *(void *)(a2 + 176);
  uint64_t v94 = *(void *)(a2 + 168);
  uint64_t v95 = v27;
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  unint64_t v28 = *(const void **)(a2 + 184);
  uint64_t v29 = *(void *)(a2 + 192);
  long long __p = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v28, v29, (v29 - (uint64_t)v28) >> 4);
  uint64_t v99 = *(void *)(a2 + 208);
  if (!v104) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v30 = (*(uint64_t (**)(void *, long long *))(*v104 + 48))(v104, &v91);
  long long v31 = *(double **)(v30 + 8);
  double v32 = 0.0;
  while (v31 != *(double **)(v30 + 16))
  {
    double v34 = *v31;
    double v33 = v31[1];
    v31 += 2;
    double v32 = v32 + v33 - v34;
  }
  long long v35 = [v24 quantityWithUnit:v25 doubleValue:v32 + *(double *)(v30 + 32)];
  [v23 setDuration:v35];

  if (__p)
  {
    uint64_t v97 = __p;
    operator delete(__p);
  }

  long long v36 = (long long *)(a2 + 120);
  long long v37 = *(_OWORD *)(a2 + 136);
  long long v91 = *(_OWORD *)(a2 + 120);
  long long v92 = v37;
  long long v93 = *(_OWORD *)(a2 + 152);
  uint64_t v39 = *(void *)(a2 + 176);
  uint64_t v38 = *(const void **)(a2 + 184);
  uint64_t v94 = *(void *)(a2 + 168);
  uint64_t v95 = v39;
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  uint64_t v40 = *(void *)(a2 + 192);
  long long __p = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v38, v40, (v40 - (uint64_t)v38) >> 4);
  uint64_t v99 = *(void *)(a2 + 208);
  if (!v104) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  objc_msgSend(v23, "setDataCount:", *(void *)(*(uint64_t (**)(void *, long long *))(*v104 + 48))(v104, &v91));
  if (__p)
  {
    uint64_t v97 = __p;
    operator delete(__p);
  }
  if (*(unsigned char *)(v86 + 24))
  {
    id v41 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v42 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier((uint64_t)&v91, a2);
    for (uint64_t i = (uint64_t **)v92; i; uint64_t i = (uint64_t **)*i)
    {
      uint64_t v44 = i[2];
      uint64_t v45 = (void *)MEMORY[0x1E4F2B370];
      uint64_t v46 = [MEMORY[0x1E4F2B618] secondUnit];
      if (!v104) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v47 = (*(uint64_t (**)(void *, uint64_t *))(*v104 + 48))(v104, (uint64_t *)i + 3);
      uint64_t v48 = *(double **)(v47 + 8);
      double v49 = 0.0;
      while (v48 != *(double **)(v47 + 16))
      {
        double v51 = *v48;
        double v50 = v48[1];
        v48 += 2;
        double v49 = v49 + v50 - v51;
      }
      unint64_t v52 = [v45 quantityWithUnit:v46 doubleValue:v49 + *(double *)(v47 + 32)];
      [v41 setObject:v52 forKeyedSubscript:v44];

      if (!v104) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      unint64_t v53 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)(*(uint64_t (**)(void *, uint64_t *))(*v104 + 48))(v104, (uint64_t *)i + 3));
      [v42 setObject:v53 forKeyedSubscript:v44];
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)&v91);
    [v89 setDurationBySource:v41];
    [v89 setDataCountBySource:v42];
  }
  std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v103);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v102);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)v101, (uint64_t)v100);
  long long v104 = 0;
  uint64_t v54 = operator new(0x28uLL);
  *uint64_t v54 = &unk_1F1725280;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(v54 + 1), (uint64_t)v101);
  long long v104 = v54;
  id v90 = v89;
  unint64_t v55 = (void *)MEMORY[0x1E4F2B370];
  char v56 = [MEMORY[0x1E4F2B618] secondUnit];
  long long v57 = *(_OWORD *)(a2 + 136);
  long long v91 = *v36;
  long long v92 = v57;
  long long v93 = *(_OWORD *)(a2 + 152);
  uint64_t v59 = *(void *)(a2 + 176);
  long long v58 = *(const void **)(a2 + 184);
  uint64_t v94 = *(void *)(a2 + 168);
  uint64_t v95 = v59;
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  uint64_t v60 = *(void *)(a2 + 192);
  long long __p = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v58, v60, (v60 - (uint64_t)v58) >> 4);
  uint64_t v99 = *(void *)(a2 + 208);
  if (!v104) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v61 = objc_msgSend(v55, "quantityWithUnit:doubleValue:", v56, *(double *)(*(uint64_t (**)(void *, long long *))(*v104 + 48))(v104, &v91));
  [v90 setDuration:v61];

  if (__p)
  {
    uint64_t v97 = __p;
    operator delete(__p);
  }

  long long v62 = *(_OWORD *)(a2 + 136);
  long long v91 = *v36;
  long long v92 = v62;
  long long v93 = *(_OWORD *)(a2 + 152);
  uint64_t v64 = *(void *)(a2 + 176);
  __n128 v63 = *(const void **)(a2 + 184);
  uint64_t v94 = *(void *)(a2 + 168);
  uint64_t v95 = v64;
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  uint64_t v65 = *(void *)(a2 + 192);
  long long __p = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v63, v65, (v65 - (uint64_t)v63) >> 4);
  uint64_t v99 = *(void *)(a2 + 208);
  if (!v104) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  objc_msgSend(v90, "setDataCount:", *(void *)((*(uint64_t (**)(void *, long long *))(*v104 + 48))(v104, &v91) + 8));
  if (__p)
  {
    uint64_t v97 = __p;
    operator delete(__p);
  }
  long long v66 = *(_OWORD *)(a2 + 136);
  long long v91 = *v36;
  long long v92 = v66;
  long long v93 = *(_OWORD *)(a2 + 152);
  uint64_t v68 = *(void *)(a2 + 176);
  uint64_t v67 = *(const void **)(a2 + 184);
  uint64_t v94 = *(void *)(a2 + 168);
  uint64_t v95 = v68;
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  uint64_t v69 = *(void *)(a2 + 192);
  long long __p = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v67, v69, (v69 - (uint64_t)v67) >> 4);
  uint64_t v99 = *(void *)(a2 + 208);
  if (!v104) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v70 = (*(uint64_t (**)(void *, long long *))(*v104 + 48))(v104, &v91);
  double v71 = *(double *)(v70 + 24);
  double v72 = *(double *)(v70 + 32);
  if (__p)
  {
    uint64_t v97 = __p;
    operator delete(__p);
  }
  uint64_t v73 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v71, v72);
  [v90 setMostRecentQuantityDateInterval:v73];

  if (*(unsigned char *)(v86 + 24))
  {
    id v74 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v75 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v76 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier((uint64_t)&v91, a2);
    for (uint64_t j = (uint64_t **)v92; j; uint64_t j = (uint64_t **)*j)
    {
      uint64_t v78 = j[2];
      uint64_t v79 = (void *)MEMORY[0x1E4F2B370];
      long long v80 = [MEMORY[0x1E4F2B618] secondUnit];
      if (!v104) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      long long v81 = objc_msgSend(v79, "quantityWithUnit:doubleValue:", v80, *(double *)(*(uint64_t (**)(void *, uint64_t *))(*v104 + 48))(v104, (uint64_t *)j + 3));
      [v74 setObject:v81 forKeyedSubscript:v78];

      if (!v104) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      int v82 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)((*(uint64_t (**)(void *, uint64_t *))(*v104 + 48))(v104, (uint64_t *)j + 3) + 8));
      [v75 setObject:v82 forKeyedSubscript:v78];

      if (!v104) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v83 = (*(uint64_t (**)(void *, uint64_t *))(*v104 + 48))(v104, (uint64_t *)j + 3);
      long long v84 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", *(double *)(v83 + 24), *(double *)(v83 + 32));
      [v76 setObject:v84 forKeyedSubscript:v78];
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)&v91);
    [v90 setDurationBySource:v74];
    [v90 setDataCountBySource:v75];
    [v90 setMostRecentQuantityDateIntervalBySource:v76];
  }
  std::__function::__value_func<HDStatisticsAverageSampleDuration const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v103);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v101);

  std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v100);

  return v90;
}

void sub_1BD118AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 264);
  uint64_t v2 = *(void *)(a1 + 280);
  if (v1 != (*(void *)(a1 + 288) - v2) >> 3)
  {
    double v4 = (void **)(a1 + 280);
    *(void *)(a1 + 288) = v2;
    std::vector<long long>::reserve((void **)(a1 + 280), v1);
    id v5 = *(void **)(a1 + 256);
    if (v5)
    {
      long long v6 = *(char **)(a1 + 288);
      do
      {
        uint64_t v7 = v5[2];
        unint64_t v8 = *(void *)(a1 + 296);
        if ((unint64_t)v6 >= v8)
        {
          id v10 = (char *)*v4;
          uint64_t v11 = (v6 - (unsigned char *)*v4) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            id v10 = *(char **)(a1 + 280);
            long long v6 = *(char **)(a1 + 288);
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v16 = (void *)(v14 + 8 * v11);
          void *v16 = v7;
          id v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            uint64_t v17 = *((void *)v6 - 1);
            v6 -= 8;
            *--uint64_t v16 = v17;
          }
          *(void *)(a1 + 280) = v16;
          *(void *)(a1 + 288) = v9;
          *(void *)(a1 + 296) = v14 + 8 * v15;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)long long v6 = v7;
          id v9 = v6 + 8;
        }
        *(void *)(a1 + 288) = v9;
        id v5 = (void *)*v5;
        long long v6 = v9;
      }
      while (v5);
    }
    uint64_t v18 = (id *)(a1 + 88);
    id WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      id v20 = objc_loadWeakRetained(v18);
      [v20 orderSourceIDs:v4];
    }
  }
}

void sub_1BD118EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2) {
    a2 = v4 * floor(a2 / v4);
  }
  double v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    long long v116 = (char **)(a1 + 96);
    location = (id *)(a1 + 88);
    long long v114 = (uint64_t *)(a1 + 176);
    uint64_t v109 = (void *)(a1 + 224);
    uint64_t v110 = (double **)(a1 + 184);
    do
    {
      unint64_t v6 = *(void *)(a1 + 96);
      uint64_t v7 = *(long long **)(a1 + 104);
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v7 - v6) >> 4);
      if (v8)
      {
        if (v8 != 1)
        {
          double v18 = a2;
          double v19 = a2;
          double v20 = v5;
          uint64_t v21 = *(void *)(a1 + 96);
          if ((long long *)v6 != v7)
          {
            do
            {
              double v22 = *(double *)(v21 + 8);
              double v23 = *(double *)(v21 + 16);
              if (v22 > v20 && v22 < v19) {
                double v19 = *(double *)(v21 + 8);
              }
              if (v23 > v5) {
                double v25 = *(double *)(v21 + 16);
              }
              else {
                double v25 = v18;
              }
              if (v23 < v18)
              {
                double v20 = v5;
                double v18 = v25;
              }
              v21 += 48;
            }
            while ((long long *)v21 != v7);
          }
          if (v18 >= v19) {
            double v26 = v19;
          }
          else {
            double v26 = v18;
          }
          double v27 = *(double *)(a1 + 16);
          if (v27 > 0.0)
          {
            double v28 = v27 * floor(v26 / v27);
            double v29 = v27 * floor((v27 + v5) / v27);
            if (v28 >= v29) {
              double v26 = v28;
            }
            else {
              double v26 = v29;
            }
          }
          *long long v116 = 0;
          v116[1] = 0;
          v116[2] = 0;
          if ((long long *)v6 != v7)
          {
            if (v8 > 0x555555555555555) {
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v8);
            double v33 = *(char **)(a1 + 96);
            double v32 = *(char **)(a1 + 104);
            double v34 = v30;
            if (v32 != v33)
            {
              do
              {
                long long v35 = *((_OWORD *)v32 - 3);
                long long v36 = *((_OWORD *)v32 - 2);
                *(_OWORD *)(v34 - 21) = *(_OWORD *)(v32 - 21);
                *((_OWORD *)v34 - 3) = v35;
                *((_OWORD *)v34 - 2) = v36;
                v34 -= 48;
                v32 -= 48;
              }
              while (v32 != v33);
              double v32 = *v116;
            }
            *(void *)(a1 + 96) = v34;
            *(void *)(a1 + 104) = v30;
            *(void *)(a1 + 112) = &v30[48 * v31];
            if (v32) {
              operator delete(v32);
            }
          }
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_updateSourceOrder(a1);
          id WeakRetained = objc_loadWeakRetained(location);

          if (WeakRetained)
          {
            *(void *)&v121.var0 = a1;
            unint64_t v38 = 126 - 2 * __clz(v8);
            if ((long long *)v6 == v7) {
              uint64_t v39 = 0;
            }
            else {
              uint64_t v39 = v38;
            }
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(v6, v7, (uint64_t)&v121, v39, 1);
          }
          if (*(unsigned char *)(a1 + 25)) {
            id v113 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
          }
          else {
            id v113 = 0;
          }
          long long v112 = (void *)v6;
          if ((long long *)v6 == v7)
          {
LABEL_123:
            *(double *)(a1 + 208) = HKIntervalMask<double>::removeIntervalsBefore(v110, v26) + *(double *)(a1 + 208);
            uint64_t v98 = *(void **)(a1 + 216);
            if (v98 != v109)
            {
              do
              {
                *((double *)v98 + 16) = HKIntervalMask<double>::removeIntervalsBefore((double **)v98 + 13, v26)
                                      + *((double *)v98 + 16);
                uint64_t v99 = (void *)v98[1];
                if (v99)
                {
                  do
                  {
                    int v100 = v99;
                    uint64_t v99 = (void *)*v99;
                  }
                  while (v99);
                }
                else
                {
                  do
                  {
                    int v100 = (void *)v98[2];
                    BOOL v101 = *v100 == (void)v98;
                    uint64_t v98 = v100;
                  }
                  while (!v101);
                }
                uint64_t v98 = v100;
              }
              while (v100 != v109);
            }
            *(double *)(a1 + 56) = v26;

            if (v112) {
              operator delete(v112);
            }
            goto LABEL_140;
          }
          int64_t v115 = 0;
          char v40 = 0;
          unint64_t v41 = v6;
          while (2)
          {
            long long v119 = 0u;
            long long v120 = 0u;
            BOOL var4 = 0;
            long long v42 = *(_OWORD *)(v41 + 16);
            *(_OWORD *)&v121.var0 = *(_OWORD *)v41;
            *(_OWORD *)&v121.var2 = v42;
            *(void *)&v121.BOOL var4 = *(void *)(v41 + 32);
            double var1 = v121.var1;
            if (v121.var4 && v121.var1 > v26)
            {
              long long v47 = *(_OWORD *)(v41 + 16);
              long long v119 = *(_OWORD *)v41;
              long long v120 = v47;
              BOOL var4 = v121.var4;
              BOOL var5 = v121.var5;
              p_BOOL var4 = &v121.var4;
            }
            else
            {
              BOOL var5 = 0;
              p_BOOL var4 = &var4;
            }
            BOOL *p_var4 = 0;
            if (v121.var4)
            {
              for (uint64_t i = *(double **)(a1 + 64); i != *(double **)(a1 + 72) && var1 >= *i; i += 2)
              {
                if (var1 < i[1])
                {
                  v121.BOOL var4 = 0;
                  int v49 = *(unsigned __int8 *)(v41 + 42);
                  LOBYTE(v50) = *(unsigned char *)(v41 + 41);
                  char v117 = *(unsigned char *)(v41 + 40);
                  goto LABEL_103;
                }
              }
              int v49 = *(unsigned __int8 *)(v41 + 42);
              int v50 = *(unsigned __int8 *)(v41 + 41);
              char v117 = *(unsigned char *)(v41 + 40);
              if (v40)
              {
                unint64_t var3 = v121.var3;
                if (v115 == v121.var3 || *(unsigned char *)(a1 + 24))
                {
                  double v52 = v121.var2 - var1;
                  uint64_t v53 = *(void *)(a1 + 128);
                  if (v53)
                  {
                    uint64_t v54 = v53 + 1;
                    double v52 = *(double *)(a1 + 120) + (v52 - *(double *)(a1 + 120)) / (double)v54;
                  }
                  else
                  {
                    uint64_t v54 = 1;
                  }
                  *(double *)(a1 + 120) = v52;
                  *(void *)(a1 + 128) = v54;
                  HDStatisticsTimeInterval::addSample(v114, &v121, v49 == 0);
                  int v49 = 1;
                }
              }
              else
              {
                double v60 = v121.var2 - var1;
                uint64_t v61 = *(void *)(a1 + 128);
                if (v61)
                {
                  uint64_t v62 = v61 + 1;
                  double v60 = *(double *)(a1 + 120) + (v60 - *(double *)(a1 + 120)) / (double)v62;
                }
                else
                {
                  uint64_t v62 = 1;
                }
                *(double *)(a1 + 120) = v60;
                *(void *)(a1 + 128) = v62;
                HDStatisticsTimeInterval::addSample(v114, &v121, v49 == 0);
                int v49 = 1;
                unint64_t var3 = v121.var3;
                int64_t v115 = v121.var3;
              }
              if (*(unsigned char *)(a1 + 25))
              {
                uint64_t v68 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, var3);
                if (v68)
                {
                  uint64_t v69 = [v113 objectForKeyedSubscript:v68];
                  uint64_t v70 = v69;
                  if (v69)
                  {
                    if ([v69 longLongValue] == var3 || *(unsigned char *)(a1 + 24))
                    {
                      unint64_t v71 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, var3);
                      double v72 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v71);
                      goto LABEL_92;
                    }
                  }
                  else
                  {
                    uint64_t v73 = [NSNumber numberWithLongLong:var3];
                    [v113 setObject:v73 forKeyedSubscript:v68];

                    unint64_t v74 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, var3);
                    double v72 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v74);
LABEL_92:
                    double v75 = v121.var2 - var1;
                    id v76 = v72[1];
                    if (v76)
                    {
                      uint64_t v77 = (uint64_t)v76 + 1;
                      double v75 = *(double *)v72 + (v75 - *(double *)v72) / (double)v77;
                    }
                    else
                    {
                      uint64_t v77 = 1;
                    }
                    *(double *)double v72 = v75;
                    v72[1] = (uint64_t *)v77;
                    HDStatisticsTimeInterval::addSample((uint64_t *)v72 + 7, &v121, v50 == 0);
                    LOBYTE(v50) = 1;
                  }
                }
              }
              char v40 = 1;
LABEL_103:
              BOOL v86 = var4;
              if (var4)
              {
                BOOL v87 = v49 != 0;
                unint64_t v88 = *(void *)(a1 + 104);
                unint64_t v89 = *(void *)(a1 + 112);
                if (v88 < v89)
                {
                  long long v90 = v120;
                  *(_OWORD *)unint64_t v88 = v119;
                  *(_OWORD *)(v88 + 16) = v90;
                  *(unsigned char *)(v88 + 32) = v86;
                  *(unsigned char *)(v88 + 33) = var5;
                  *(unsigned char *)(v88 + 40) = v117;
                  *(unsigned char *)(v88 + 41) = v50;
                  *(unsigned char *)(v88 + 42) = v87;
                  uint64_t v59 = (_OWORD *)(v88 + 48);
                  goto LABEL_121;
                }
                unint64_t v91 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v88 - (void)*v116) >> 4);
                unint64_t v92 = v91 + 1;
                if (v91 + 1 > 0x555555555555555) {
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v93 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v89 - (void)*v116) >> 4);
                if (2 * v93 > v92) {
                  unint64_t v92 = 2 * v93;
                }
                if (v93 >= 0x2AAAAAAAAAAAAAALL) {
                  unint64_t v66 = 0x555555555555555;
                }
                else {
                  unint64_t v66 = v92;
                }
                if (v66) {
                  unint64_t v66 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v66);
                }
                else {
                  uint64_t v67 = 0;
                }
                unint64_t v78 = v66 + 48 * v91;
                long long v94 = v120;
                *(_OWORD *)unint64_t v78 = v119;
                *(_OWORD *)(v78 + 16) = v94;
                *(unsigned char *)(v78 + 32) = v86;
                *(unsigned char *)(v78 + 33) = var5;
                *(unsigned char *)(v78 + 40) = v117;
                *(unsigned char *)(v78 + 41) = v50;
                *(unsigned char *)(v78 + 42) = v87;
                uint64_t v95 = *(char **)(a1 + 96);
                long long v81 = *(char **)(a1 + 104);
                unint64_t v83 = v78;
                if (v81 != v95)
                {
                  do
                  {
                    long long v96 = *((_OWORD *)v81 - 3);
                    long long v97 = *((_OWORD *)v81 - 2);
                    *(_OWORD *)(v83 - 21) = *(_OWORD *)(v81 - 21);
                    *(_OWORD *)(v83 - 48) = v96;
                    *(_OWORD *)(v83 - 32) = v97;
                    v83 -= 48;
                    v81 -= 48;
                  }
                  while (v81 != v95);
                  goto LABEL_118;
                }
                goto LABEL_119;
              }
            }
            else
            {
              unint64_t v55 = *(_OWORD **)(a1 + 104);
              unint64_t v56 = *(void *)(a1 + 112);
              if ((unint64_t)v55 < v56)
              {
                long long v57 = *(_OWORD *)v41;
                long long v58 = *(_OWORD *)(v41 + 32);
                v55[1] = *(_OWORD *)(v41 + 16);
                v55[2] = v58;
                *unint64_t v55 = v57;
                uint64_t v59 = v55 + 3;
                goto LABEL_121;
              }
              unint64_t v63 = 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - *v116) >> 4);
              unint64_t v64 = v63 + 1;
              if (v63 + 1 > 0x555555555555555) {
                std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - (void)*v116) >> 4);
              if (2 * v65 > v64) {
                unint64_t v64 = 2 * v65;
              }
              if (v65 >= 0x2AAAAAAAAAAAAAALL) {
                unint64_t v66 = 0x555555555555555;
              }
              else {
                unint64_t v66 = v64;
              }
              if (v66) {
                unint64_t v66 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v66);
              }
              else {
                uint64_t v67 = 0;
              }
              unint64_t v78 = v66 + 48 * v63;
              long long v79 = *(_OWORD *)v41;
              long long v80 = *(_OWORD *)(v41 + 32);
              *(_OWORD *)(v78 + 16) = *(_OWORD *)(v41 + 16);
              *(_OWORD *)(v78 + 32) = v80;
              *(_OWORD *)unint64_t v78 = v79;
              int v82 = *(char **)(a1 + 96);
              long long v81 = *(char **)(a1 + 104);
              unint64_t v83 = v78;
              if (v81 != v82)
              {
                do
                {
                  long long v84 = *((_OWORD *)v81 - 3);
                  long long v85 = *((_OWORD *)v81 - 2);
                  *(_OWORD *)(v83 - 21) = *(_OWORD *)(v81 - 21);
                  *(_OWORD *)(v83 - 48) = v84;
                  *(_OWORD *)(v83 - 32) = v85;
                  v83 -= 48;
                  v81 -= 48;
                }
                while (v81 != v82);
LABEL_118:
                long long v81 = *v116;
              }
LABEL_119:
              uint64_t v59 = (_OWORD *)(v78 + 48);
              *(void *)(a1 + 96) = v83;
              *(void *)(a1 + 104) = v78 + 48;
              *(void *)(a1 + 112) = v66 + 48 * v67;
              if (v81) {
                operator delete(v81);
              }
LABEL_121:
              *(void *)(a1 + 104) = v59;
            }
            v41 += 48;
            if ((long long *)v41 == v7) {
              goto LABEL_123;
            }
            continue;
          }
        }
        int v9 = *(unsigned __int8 *)(v6 + 42);
        int v10 = *(unsigned __int8 *)(v6 + 41);
        __int16 v124 = 0;
        long long v122 = 0u;
        long long v123 = 0u;
        long long v11 = *(_OWORD *)(v6 + 16);
        *(_OWORD *)&v121.var0 = *(_OWORD *)v6;
        *(_OWORD *)&v121.var2 = v11;
        *(void *)&v121.BOOL var4 = *(void *)(v6 + 32);
        unint64_t v12 = *(double **)(a1 + 64);
        for (uint64_t j = *(double **)(a1 + 72); v12 != j; v12 += 2)
        {
          if (v121.var1 < *v12) {
            break;
          }
          if (v121.var1 < v12[1]) {
            goto LABEL_138;
          }
        }
        if (v121.var4)
        {
          double v14 = v121.var2 - v121.var1;
          uint64_t v15 = *(void *)(a1 + 128);
          if (v15)
          {
            uint64_t v16 = v15 + 1;
            double v17 = *(double *)(a1 + 120) + (v14 - *(double *)(a1 + 120)) / (double)v16;
          }
          else
          {
            double v17 = v121.var2 - v121.var1;
            uint64_t v16 = 1;
          }
          *(double *)(a1 + 120) = v17;
          *(void *)(a1 + 128) = v16;
          HDStatisticsTimeInterval::addSample(v114, &v121, v9 == 0);
          if (*(unsigned char *)(a1 + 25))
          {
            unint64_t v102 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v121.var3);
            long long v103 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v102);
            long long v104 = v103[1];
            if (v104)
            {
              uint64_t v105 = (uint64_t)v104 + 1;
              double v14 = *(double *)v103 + (v14 - *(double *)v103) / (double)v105;
            }
            else
            {
              uint64_t v105 = 1;
            }
            *(double *)long long v103 = v14;
            v103[1] = (uint64_t *)v105;
            HDStatisticsTimeInterval::addSample((uint64_t *)v103 + 7, &v121, v10 == 0);
          }
        }
LABEL_138:
        *(void *)(a1 + 104) = *(void *)(a1 + 96);
      }
      *(double *)(a1 + 56) = a2;
LABEL_140:
      double v106 = *(double *)(a1 + 56);
      if (v106 == v5)
      {
        uint64_t v107 = [MEMORY[0x1E4F28B00] currentHandler];
        long long v108 = objc_msgSend(NSString, "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration, HDStatisticsTimeInterval>>::_mergeThroughTime(double) [Statistics = HDStatisticsCombined<HDStatisticsAverageSampleDuration, HDStatisticsTimeInterval>]");
        [v107 handleFailureInFunction:v108 file:@"HDStatisticsBucket.hpp" lineNumber:234 description:@"Failed to make forward progress during statistics merge."];

        double v106 = *(double *)(a1 + 56);
      }
      double v5 = v106;
    }
    while (v106 < a2);
  }
}

void sub_1BD119858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    double v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((void *)(a1 + 304), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, a2);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      id v10 = v6;
      uint64_t v7 = (void *)(a1 + 344);
      unint64_t v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        long long v11 = &v10;
        *((void *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        id v6 = v10;
      }
    }
  }
  return a2;
}

void sub_1BD1199A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  double v4 = (id *)(a1 + 88);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    id v6 = (void *)(a1 + 384);
    uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
    if (v7)
    {
      id v8 = (id)v7[3];
    }
    else
    {
      id v9 = objc_loadWeakRetained(v4);
      id v8 = [v9 bundleIdentifierForSourceID:a2];

      if (v8)
      {
        id v10 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
        objc_storeStrong(v10 + 3, v8);
      }
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1BD119A88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v12 = a2 - 3;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 4);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v103 = *((void *)a2 - 3);
                uint64_t v104 = *(void *)(v13 + 24);
                if (v103 == v104) {
                  return;
                }
                uint64_t v105 = *(char **)(*(void *)a3 + 280);
                double v106 = *(char **)(*(void *)a3 + 288);
                uint64_t v107 = v105;
                long long v108 = v105;
                if (v105 == v106) {
                  goto LABEL_171;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)v13, (long long *)(v13 + 48), a2 - 3, a3);
                return;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, (uint64_t)(a2 - 3), a3);
                return;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, v13 + 144, (uint64_t)(a2 - 3), a3);
                return;
              default:
                JUMPOUT(0);
            }
            do
            {
              if (*(void *)v108 == v103) {
                goto LABEL_168;
              }
              v108 += 8;
            }
            while (v108 != v106);
            long long v108 = *(char **)(*(void *)a3 + 288);
LABEL_168:
            while (*(void *)v107 != v104)
            {
              v107 += 8;
              if (v107 == v106)
              {
                uint64_t v107 = *(char **)(*(void *)a3 + 288);
                break;
              }
            }
LABEL_171:
            if (v108 - v105 < v107 - v105)
            {
              *(_OWORD *)v226 = *(_OWORD *)(v13 + 16);
              *(_OWORD *)&v226[16] = *(_OWORD *)(v13 + 32);
              long long v218 = *(_OWORD *)v13;
              long long v109 = *v12;
              long long v110 = *(a2 - 2);
              *(_OWORD *)(v13 + 27) = *(long long *)((char *)a2 - 21);
              *(_OWORD *)unint64_t v13 = v109;
              *(_OWORD *)(v13 + 16) = v110;
              *(long long *)((char *)a2 - 21) = *(_OWORD *)&v226[11];
              long long *v12 = v218;
              *(a2 - 2) = *(_OWORD *)v226;
            }
            return;
          }
          if (v14 <= 1151)
          {
            long long v111 = (long long *)(v13 + 48);
            BOOL v113 = (long long *)v13 == a2 || v111 == a2;
            if (a5)
            {
              if (!v113)
              {
                unint64_t v114 = v13;
                do
                {
                  unint64_t v115 = v114;
                  unint64_t v114 = (unint64_t)v111;
                  uint64_t v116 = *(void *)(v115 + 72);
                  uint64_t v117 = *(void *)(v115 + 24);
                  if (v116 != v117)
                  {
                    long long v118 = *(char **)(*(void *)a3 + 280);
                    long long v119 = *(char **)(*(void *)a3 + 288);
                    long long v120 = v118;
                    HDRawQuantitySample v121 = v118;
                    if (v118 != v119)
                    {
                      do
                      {
                        if (*(void *)v121 == v116) {
                          goto LABEL_196;
                        }
                        v121 += 8;
                      }
                      while (v121 != v119);
                      HDRawQuantitySample v121 = *(char **)(*(void *)a3 + 288);
LABEL_196:
                      while (*(void *)v120 != v117)
                      {
                        v120 += 8;
                        if (v120 == v119)
                        {
                          long long v120 = *(char **)(*(void *)a3 + 288);
                          break;
                        }
                      }
                    }
                    if (v121 - v118 < v120 - v118)
                    {
                      uint64_t v227 = *(void *)(v114 + 16);
                      long long v219 = *(_OWORD *)v114;
                      long long v236 = *(_OWORD *)(v115 + 80);
                      unint64_t v122 = v114;
                      while (1)
                      {
                        long long v123 = *(_OWORD *)(v115 + 16);
                        *(_OWORD *)unint64_t v122 = *(_OWORD *)v115;
                        *(_OWORD *)(v122 + 16) = v123;
                        *(_OWORD *)(v122 + 27) = *(_OWORD *)(v115 + 27);
                        if (v115 == v13) {
                          break;
                        }
                        unint64_t v122 = v115;
                        uint64_t v124 = *(void *)(v115 - 24);
                        if (v116 != v124)
                        {
                          uint64_t v125 = *(char **)(*(void *)a3 + 280);
                          uint64_t v126 = *(char **)(*(void *)a3 + 288);
                          uint64_t v127 = v125;
                          uint64_t v128 = v125;
                          if (v125 != v126)
                          {
                            do
                            {
                              if (*(void *)v128 == v116) {
                                goto LABEL_208;
                              }
                              v128 += 8;
                            }
                            while (v128 != v126);
                            uint64_t v128 = *(char **)(*(void *)a3 + 288);
LABEL_208:
                            while (*(void *)v127 != v124)
                            {
                              v127 += 8;
                              if (v127 == v126)
                              {
                                uint64_t v127 = *(char **)(*(void *)a3 + 288);
                                break;
                              }
                            }
                          }
                          unint64_t v115 = v122 - 48;
                          if (v128 - v125 < v127 - v125) {
                            continue;
                          }
                        }
                        goto LABEL_212;
                      }
                      unint64_t v122 = v13;
LABEL_212:
                      *(_OWORD *)unint64_t v122 = v219;
                      *(void *)(v122 + 16) = v227;
                      *(void *)(v122 + 24) = v116;
                      *(void *)(v122 + 32) = v236;
                      *(_DWORD *)(v122 + 39) = *(_DWORD *)((char *)&v236 + 7);
                    }
                  }
                  long long v111 = (long long *)(v114 + 48);
                }
                while ((long long *)(v114 + 48) != a2);
              }
            }
            else if (!v113)
            {
              do
              {
                unint64_t v201 = a1;
                a1 = (unint64_t)v111;
                uint64_t v202 = *(void *)(v201 + 72);
                uint64_t v203 = *(void *)(v201 + 24);
                if (v202 != v203)
                {
                  v204 = *(char **)(*(void *)a3 + 280);
                  v205 = *(char **)(*(void *)a3 + 288);
                  v206 = v204;
                  v207 = v204;
                  if (v204 != v205)
                  {
                    do
                    {
                      if (*(void *)v207 == v202) {
                        goto LABEL_312;
                      }
                      v207 += 8;
                    }
                    while (v207 != v205);
                    v207 = *(char **)(*(void *)a3 + 288);
LABEL_312:
                    while (*(void *)v206 != v203)
                    {
                      v206 += 8;
                      if (v206 == v205)
                      {
                        v206 = *(char **)(*(void *)a3 + 288);
                        break;
                      }
                    }
                  }
                  if (v207 - v204 < v206 - v204)
                  {
                    uint64_t v230 = *(void *)(a1 + 16);
                    long long v222 = *(_OWORD *)a1;
                    long long v239 = *(_OWORD *)(v201 + 80);
                    unint64_t v208 = a1;
                    do
                    {
                      v209 = (_OWORD *)v208;
                      unint64_t v208 = v201;
                      long long v210 = *(_OWORD *)(v201 + 16);
                      _OWORD *v209 = *(_OWORD *)v201;
                      v209[1] = v210;
                      *(_OWORD *)((char *)v209 + 27) = *(_OWORD *)(v201 + 27);
                      uint64_t v211 = *(void *)(v201 - 24);
                      if (v202 == v211) {
                        break;
                      }
                      v212 = *(char **)(*(void *)a3 + 280);
                      v213 = *(char **)(*(void *)a3 + 288);
                      v214 = v212;
                      v215 = v212;
                      if (v212 != v213)
                      {
                        do
                        {
                          if (*(void *)v215 == v202) {
                            goto LABEL_322;
                          }
                          v215 += 8;
                        }
                        while (v215 != v213);
                        v215 = *(char **)(*(void *)a3 + 288);
LABEL_322:
                        while (*(void *)v214 != v211)
                        {
                          v214 += 8;
                          if (v214 == v213)
                          {
                            v214 = *(char **)(*(void *)a3 + 288);
                            break;
                          }
                        }
                      }
                      unint64_t v201 = v208 - 48;
                    }
                    while (v215 - v212 < v214 - v212);
                    *(_OWORD *)unint64_t v208 = v222;
                    *(void *)(v208 + 16) = v230;
                    *(void *)(v208 + 24) = v202;
                    *(void *)(v208 + 32) = v239;
                    *(_DWORD *)(v208 + 39) = *(_DWORD *)((char *)&v239 + 7);
                  }
                }
                long long v111 = (long long *)(a1 + 48);
              }
              while ((long long *)(a1 + 48) != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((long long *)v13 != a2)
            {
              int64_t v129 = (v15 - 2) >> 1;
              int64_t v130 = v129;
              do
              {
                int64_t v131 = v130;
                if (v129 >= v130)
                {
                  uint64_t v132 = (2 * v130) | 1;
                  unint64_t v133 = v13 + 48 * v132;
                  if (2 * v131 + 2 < (uint64_t)v15)
                  {
                    uint64_t v134 = *(void *)(v133 + 24);
                    uint64_t v135 = *(void *)(v133 + 72);
                    if (v134 != v135)
                    {
                      v137 = *(char **)(*(void *)a3 + 280);
                      v136 = *(char **)(*(void *)a3 + 288);
                      v138 = v137;
                      v139 = v137;
                      if (v137 != v136)
                      {
                        do
                        {
                          if (*(void *)v139 == v134) {
                            goto LABEL_224;
                          }
                          v139 += 8;
                        }
                        while (v139 != v136);
                        v139 = *(char **)(*(void *)a3 + 288);
LABEL_224:
                        while (*(void *)v138 != v135)
                        {
                          v138 += 8;
                          if (v138 == v136)
                          {
                            v138 = *(char **)(*(void *)a3 + 288);
                            break;
                          }
                        }
                      }
                      v133 += 48 * (v139 - v137 < v138 - v137);
                      if (v139 - v137 < v138 - v137) {
                        uint64_t v132 = 2 * v131 + 2;
                      }
                    }
                  }
                  unint64_t v140 = v13 + 48 * v131;
                  uint64_t v141 = *(void *)(v133 + 24);
                  uint64_t v142 = *(void *)(v140 + 24);
                  if (v141 == v142) {
                    goto LABEL_238;
                  }
                  v144 = *(char **)(*(void *)a3 + 280);
                  v143 = *(char **)(*(void *)a3 + 288);
                  v145 = v144;
                  v146 = v144;
                  if (v144 != v143)
                  {
                    do
                    {
                      if (*(void *)v146 == v141) {
                        goto LABEL_234;
                      }
                      v146 += 8;
                    }
                    while (v146 != v143);
                    v146 = *(char **)(*(void *)a3 + 288);
LABEL_234:
                    while (*(void *)v145 != v142)
                    {
                      v145 += 8;
                      if (v145 == v143)
                      {
                        v145 = *(char **)(*(void *)a3 + 288);
                        break;
                      }
                    }
                  }
                  if (v146 - v144 >= v145 - v144)
                  {
LABEL_238:
                    uint64_t v228 = *(void *)(v140 + 16);
                    long long v220 = *(_OWORD *)v140;
                    long long v237 = *(_OWORD *)(v140 + 32);
                    long long v147 = *(_OWORD *)v133;
                    long long v148 = *(_OWORD *)(v133 + 16);
                    *(_OWORD *)(v140 + 27) = *(_OWORD *)(v133 + 27);
                    *(_OWORD *)unint64_t v140 = v147;
                    *(_OWORD *)(v140 + 16) = v148;
                    if (v129 >= v132)
                    {
                      while (1)
                      {
                        uint64_t v150 = 2 * v132;
                        uint64_t v132 = (2 * v132) | 1;
                        unint64_t v149 = v13 + 48 * v132;
                        uint64_t v151 = v150 + 2;
                        if (v151 < (uint64_t)v15)
                        {
                          uint64_t v152 = *(void *)(v149 + 24);
                          uint64_t v153 = *(void *)(v149 + 72);
                          if (v152 != v153)
                          {
                            v154 = *(char **)(*(void *)a3 + 280);
                            v155 = *(char **)(*(void *)a3 + 288);
                            v156 = v154;
                            v157 = v154;
                            if (v154 != v155)
                            {
                              do
                              {
                                if (*(void *)v157 == v152) {
                                  goto LABEL_246;
                                }
                                v157 += 8;
                              }
                              while (v157 != v155);
                              v157 = *(char **)(*(void *)a3 + 288);
LABEL_246:
                              while (*(void *)v156 != v153)
                              {
                                v156 += 8;
                                if (v156 == v155)
                                {
                                  v156 = *(char **)(*(void *)a3 + 288);
                                  break;
                                }
                              }
                            }
                            v149 += 48 * (v157 - v154 < v156 - v154);
                            if (v157 - v154 < v156 - v154) {
                              uint64_t v132 = v151;
                            }
                          }
                        }
                        uint64_t v158 = *(void *)(v149 + 24);
                        if (v158 != v142)
                        {
                          v160 = *(char **)(*(void *)a3 + 280);
                          v159 = *(char **)(*(void *)a3 + 288);
                          v161 = v160;
                          v162 = v160;
                          if (v160 != v159)
                          {
                            do
                            {
                              if (*(void *)v162 == v158) {
                                goto LABEL_256;
                              }
                              v162 += 8;
                            }
                            while (v162 != v159);
                            v162 = *(char **)(*(void *)a3 + 288);
LABEL_256:
                            while (*(void *)v161 != v142)
                            {
                              v161 += 8;
                              if (v161 == v159)
                              {
                                v161 = *(char **)(*(void *)a3 + 288);
                                break;
                              }
                            }
                          }
                          if (v162 - v160 < v161 - v160) {
                            break;
                          }
                        }
                        long long v163 = *(_OWORD *)v149;
                        long long v164 = *(_OWORD *)(v149 + 16);
                        *(_OWORD *)(v133 + 27) = *(_OWORD *)(v149 + 27);
                        *(_OWORD *)unint64_t v133 = v163;
                        *(_OWORD *)(v133 + 16) = v164;
                        unint64_t v133 = v149;
                        if (v129 < v132) {
                          goto LABEL_261;
                        }
                      }
                    }
                    unint64_t v149 = v133;
LABEL_261:
                    *(_OWORD *)unint64_t v149 = v220;
                    *(void *)(v149 + 16) = v228;
                    *(void *)(v149 + 24) = v142;
                    *(void *)(v149 + 32) = v237;
                    *(_DWORD *)(v149 + 39) = *(_DWORD *)((char *)&v237 + 7);
                  }
                }
                int64_t v130 = v131 - 1;
              }
              while (v131);
              int64_t v165 = v14 / 0x30uLL;
              do
              {
                uint64_t v166 = 0;
                *(_OWORD *)v229 = *(_OWORD *)(v13 + 16);
                *(_OWORD *)&v229[16] = *(_OWORD *)(v13 + 32);
                long long v221 = *(_OWORD *)v13;
                uint64_t v167 = v165 - 2;
                if (v165 < 2) {
                  uint64_t v167 = v165 - 1;
                }
                uint64_t v168 = v167 >> 1;
                unint64_t v169 = v13;
                do
                {
                  v170 = (_OWORD *)v169;
                  v169 += 48 * v166 + 48;
                  uint64_t v171 = 2 * v166;
                  uint64_t v166 = (2 * v166) | 1;
                  uint64_t v172 = v171 + 2;
                  if (v171 + 2 < v165)
                  {
                    uint64_t v173 = *(void *)(v169 + 24);
                    uint64_t v174 = *(void *)(v169 + 72);
                    if (v173 != v174)
                    {
                      v176 = *(char **)(*(void *)a3 + 280);
                      v175 = *(char **)(*(void *)a3 + 288);
                      v177 = v176;
                      v178 = v176;
                      if (v176 != v175)
                      {
                        do
                        {
                          if (*(void *)v178 == v173) {
                            goto LABEL_273;
                          }
                          v178 += 8;
                        }
                        while (v178 != v175);
                        v178 = *(char **)(*(void *)a3 + 288);
LABEL_273:
                        while (*(void *)v177 != v174)
                        {
                          v177 += 8;
                          if (v177 == v175)
                          {
                            v177 = *(char **)(*(void *)a3 + 288);
                            break;
                          }
                        }
                      }
                      v169 += 48 * (v178 - v176 < v177 - v176);
                      if (v178 - v176 < v177 - v176) {
                        uint64_t v166 = v172;
                      }
                    }
                  }
                  long long v179 = *(_OWORD *)v169;
                  long long v180 = *(_OWORD *)(v169 + 16);
                  *(_OWORD *)((char *)v170 + 27) = *(_OWORD *)(v169 + 27);
                  _OWORD *v170 = v179;
                  v170[1] = v180;
                }
                while (v166 <= v168);
                a2 -= 3;
                if ((long long *)v169 == a2)
                {
                  *(_OWORD *)(v169 + 27) = *(_OWORD *)&v229[11];
                  *(_OWORD *)unint64_t v169 = v221;
                  *(_OWORD *)(v169 + 16) = *(_OWORD *)v229;
                }
                else
                {
                  long long v181 = *a2;
                  long long v182 = a2[1];
                  *(_OWORD *)(v169 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v169 = v181;
                  *(_OWORD *)(v169 + 16) = v182;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v229[11];
                  *a2 = v221;
                  a2[1] = *(_OWORD *)v229;
                  uint64_t v183 = v169 - v13 + 48;
                  if (v183 >= 49)
                  {
                    unint64_t v184 = (v183 / 0x30uLL - 2) >> 1;
                    unint64_t v185 = v13 + 48 * v184;
                    uint64_t v186 = *(void *)(v185 + 24);
                    uint64_t v187 = *(void *)(v169 + 24);
                    if (v186 != v187)
                    {
                      v189 = *(char **)(*(void *)a3 + 280);
                      v188 = *(char **)(*(void *)a3 + 288);
                      v190 = v189;
                      v191 = v189;
                      if (v189 != v188)
                      {
                        do
                        {
                          if (*(void *)v191 == v186) {
                            goto LABEL_286;
                          }
                          v191 += 8;
                        }
                        while (v191 != v188);
                        v191 = *(char **)(*(void *)a3 + 288);
LABEL_286:
                        while (*(void *)v190 != v187)
                        {
                          v190 += 8;
                          if (v190 == v188)
                          {
                            v190 = *(char **)(*(void *)a3 + 288);
                            break;
                          }
                        }
                      }
                      if (v191 - v189 < v190 - v189)
                      {
                        uint64_t v242 = *(void *)(v169 + 16);
                        long long v238 = *(_OWORD *)v169;
                        long long v233 = *(_OWORD *)(v169 + 32);
                        do
                        {
                          v192 = (_OWORD *)v169;
                          unint64_t v169 = v185;
                          long long v193 = *(_OWORD *)v185;
                          long long v194 = *(_OWORD *)(v185 + 16);
                          *(_OWORD *)((char *)v192 + 27) = *(_OWORD *)(v185 + 27);
                          _OWORD *v192 = v193;
                          v192[1] = v194;
                          if (!v184) {
                            break;
                          }
                          unint64_t v184 = (v184 - 1) >> 1;
                          unint64_t v185 = v13 + 48 * v184;
                          uint64_t v195 = *(void *)(v185 + 24);
                          if (v195 == v187) {
                            break;
                          }
                          v197 = *(char **)(*(void *)a3 + 280);
                          v196 = *(char **)(*(void *)a3 + 288);
                          v198 = v197;
                          v199 = v197;
                          if (v197 != v196)
                          {
                            do
                            {
                              if (*(void *)v199 == v195) {
                                goto LABEL_297;
                              }
                              v199 += 8;
                            }
                            while (v199 != v196);
                            v199 = *(char **)(*(void *)a3 + 288);
LABEL_297:
                            while (*(void *)v198 != v187)
                            {
                              v198 += 8;
                              if (v198 == v196)
                              {
                                v198 = *(char **)(*(void *)a3 + 288);
                                break;
                              }
                            }
                          }
                        }
                        while (v199 - v197 < v198 - v197);
                        *(_OWORD *)unint64_t v169 = v238;
                        *(void *)(v169 + 16) = v242;
                        *(void *)(v169 + 24) = v187;
                        *(void *)(v169 + 32) = v233;
                        *(_DWORD *)(v169 + 39) = *(_DWORD *)((char *)&v233 + 7);
                      }
                    }
                  }
                }
              }
              while (v165-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          double v17 = (long long *)(v13 + 48 * (v15 >> 1));
          if ((unint64_t)v14 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v15 >> 1)), a2 - 3, a3);
            uint64_t v18 = 3 * v16;
            double v19 = (long long *)(a1 + 48 * v16 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)(a1 + 48), v19, a2 - 6, a3);
            double v20 = (long long *)(a1 + 48 + 16 * v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)(a1 + 96), v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(v19, v17, v20, a3);
            *(_OWORD *)v223 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v223[16] = *(_OWORD *)(a1 + 32);
            long long v216 = *(_OWORD *)a1;
            long long v21 = *(long long *)((char *)v17 + 27);
            long long v22 = v17[1];
            *(_OWORD *)a1 = *v17;
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(a1 + 27) = v21;
            *(long long *)((char *)v17 + 27) = *(_OWORD *)&v223[11];
            *double v17 = v216;
            v17[1] = *(_OWORD *)v223;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)(a1 + 48 * (v15 >> 1)), (long long *)a1, a2 - 3, a3);
          }
          --a4;
          if (a5)
          {
            uint64_t v23 = *(void *)(a1 + 24);
            uint64_t v24 = *(void *)a3;
            break;
          }
          uint64_t v25 = *(void *)(a1 - 24);
          uint64_t v23 = *(void *)(a1 + 24);
          if (v25 != v23)
          {
            uint64_t v24 = *(void *)a3;
            double v26 = *(char **)(*(void *)a3 + 280);
            double v27 = *(char **)(*(void *)a3 + 288);
            double v28 = v26;
            double v29 = v26;
            if (v26 != v27)
            {
              do
              {
                if (*(void *)v29 == v25) {
                  goto LABEL_16;
                }
                v29 += 8;
              }
              while (v29 != v27);
              double v29 = *(char **)(*(void *)a3 + 288);
LABEL_16:
              while (*(void *)v28 != v23)
              {
                v28 += 8;
                if (v28 == v27)
                {
                  double v28 = *(char **)(*(void *)a3 + 288);
                  break;
                }
              }
            }
            if (v29 - v26 < v28 - v26) {
              break;
            }
          }
          uint64_t v241 = *(void *)(a1 + 16);
          long long v232 = *(_OWORD *)(a1 + 32);
          long long v235 = *(_OWORD *)a1;
          uint64_t v67 = *((void *)a2 - 3);
          if (v23 == v67) {
            goto LABEL_107;
          }
          uint64_t v68 = *(char **)(*(void *)a3 + 280);
          uint64_t v69 = *(char **)(*(void *)a3 + 288);
          if (v68 == v69)
          {
            unint64_t v71 = *(char **)(*(void *)a3 + 280);
            uint64_t v70 = v71;
          }
          else
          {
            uint64_t v70 = *(char **)(*(void *)a3 + 280);
            while (*(void *)v70 != v23)
            {
              v70 += 8;
              if (v70 == v69)
              {
                uint64_t v70 = *(char **)(*(void *)a3 + 288);
                break;
              }
            }
            unint64_t v71 = *(char **)(*(void *)a3 + 280);
            while (*(void *)v71 != v67)
            {
              v71 += 8;
              if (v71 == v69)
              {
                unint64_t v71 = *(char **)(*(void *)a3 + 288);
                break;
              }
            }
          }
          if (v70 - v68 >= v71 - v68)
          {
LABEL_107:
            unint64_t v13 = a1 + 48;
            if (a1 + 48 < (unint64_t)a2)
            {
              uint64_t v75 = *(void *)a3;
              unint64_t v76 = a1;
              do
              {
                uint64_t v77 = *(void *)(v76 + 72);
                unint64_t v76 = v13;
                if (v23 != v77)
                {
                  unint64_t v78 = *(char **)(v75 + 280);
                  long long v79 = *(char **)(v75 + 288);
                  long long v80 = v78;
                  long long v81 = v78;
                  if (v78 != v79)
                  {
                    do
                    {
                      if (*(void *)v81 == v23) {
                        goto LABEL_114;
                      }
                      v81 += 8;
                    }
                    while (v81 != v79);
                    long long v81 = *(char **)(v75 + 288);
LABEL_114:
                    while (*(void *)v80 != v77)
                    {
                      v80 += 8;
                      if (v80 == v79)
                      {
                        long long v80 = *(char **)(v75 + 288);
                        break;
                      }
                    }
                  }
                  if (v81 - v78 < v80 - v78) {
                    break;
                  }
                }
                v13 += 48;
              }
              while (v76 + 48 < (unint64_t)a2);
            }
          }
          else
          {
            unint64_t v13 = a1;
            do
            {
              do
              {
                uint64_t v72 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v72);
              if (v68 == v69)
              {
                unint64_t v74 = *(char **)(*(void *)a3 + 280);
                uint64_t v73 = v74;
              }
              else
              {
                uint64_t v73 = *(char **)(*(void *)a3 + 280);
                while (*(void *)v73 != v23)
                {
                  v73 += 8;
                  if (v73 == v69)
                  {
                    uint64_t v73 = *(char **)(*(void *)a3 + 288);
                    break;
                  }
                }
                unint64_t v74 = *(char **)(*(void *)a3 + 280);
                while (*(void *)v74 != v72)
                {
                  v74 += 8;
                  if (v74 == v69)
                  {
                    unint64_t v74 = *(char **)(*(void *)a3 + 288);
                    break;
                  }
                }
              }
            }
            while (v73 - v68 >= v74 - v68);
          }
          int v82 = a2;
          if (v13 < (unint64_t)a2)
          {
            uint64_t v83 = *(void *)a3;
            int v82 = a2;
            do
            {
              uint64_t v84 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v84) {
                break;
              }
              long long v85 = *(char **)(v83 + 280);
              BOOL v86 = *(char **)(v83 + 288);
              BOOL v87 = v85;
              unint64_t v88 = v85;
              if (v85 != v86)
              {
                do
                {
                  if (*(void *)v88 == v23) {
                    goto LABEL_126;
                  }
                  v88 += 8;
                }
                while (v88 != v86);
                unint64_t v88 = *(char **)(v83 + 288);
LABEL_126:
                while (*(void *)v87 != v84)
                {
                  v87 += 8;
                  if (v87 == v86)
                  {
                    BOOL v87 = *(char **)(v83 + 288);
                    break;
                  }
                }
              }
            }
            while (v88 - v85 < v87 - v85);
          }
          while (v13 < (unint64_t)v82)
          {
            *(_OWORD *)v225 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v225[16] = *(_OWORD *)(v13 + 32);
            long long v217 = *(_OWORD *)v13;
            long long v89 = *v82;
            long long v90 = v82[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v82 + 27);
            *(_OWORD *)unint64_t v13 = v89;
            *(_OWORD *)(v13 + 16) = v90;
            *(long long *)((char *)v82 + 27) = *(_OWORD *)&v225[11];
            *int v82 = v217;
            v82[1] = *(_OWORD *)v225;
            uint64_t v91 = *(void *)a3;
            do
            {
              do
              {
                uint64_t v92 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v92);
              unint64_t v93 = *(char **)(v91 + 280);
              long long v94 = *(char **)(v91 + 288);
              if (v93 == v94)
              {
                long long v96 = *(char **)(v91 + 280);
                uint64_t v95 = v96;
              }
              else
              {
                uint64_t v95 = *(char **)(v91 + 280);
                while (*(void *)v95 != v23)
                {
                  v95 += 8;
                  if (v95 == v94)
                  {
                    uint64_t v95 = *(char **)(v91 + 288);
                    break;
                  }
                }
                long long v96 = *(char **)(v91 + 280);
                while (*(void *)v96 != v92)
                {
                  v96 += 8;
                  if (v96 == v94)
                  {
                    long long v96 = *(char **)(v91 + 288);
                    break;
                  }
                }
              }
            }
            while (v95 - v93 >= v96 - v93);
            do
            {
              uint64_t v97 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v97) {
                break;
              }
              if (v93 == v94)
              {
                uint64_t v99 = v93;
                uint64_t v98 = v93;
              }
              else
              {
                uint64_t v98 = v93;
                while (*(void *)v98 != v23)
                {
                  v98 += 8;
                  if (v98 == v94)
                  {
                    uint64_t v98 = v94;
                    break;
                  }
                }
                uint64_t v99 = v93;
                while (*(void *)v99 != v97)
                {
                  v99 += 8;
                  if (v99 == v94)
                  {
                    uint64_t v99 = v94;
                    break;
                  }
                }
              }
            }
            while (v98 - v93 < v99 - v93);
          }
          int v100 = (long long *)(v13 - 48);
          BOOL v5 = v13 - 48 >= a1;
          BOOL v6 = v13 - 48 == a1;
          if (v13 - 48 != a1)
          {
            long long v101 = *v100;
            long long v102 = *(_OWORD *)(v13 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
            *(_OWORD *)a1 = v101;
            *(_OWORD *)(a1 + 16) = v102;
          }
          a5 = 0;
          *int v100 = v235;
          *(void *)(v13 - 32) = v241;
          *(void *)(v13 - 24) = v23;
          *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v232 + 7);
          *(void *)(v13 - 16) = v232;
        }
        uint64_t v240 = *(void *)(a1 + 16);
        long long v231 = *(_OWORD *)(a1 + 32);
        long long v234 = *(_OWORD *)a1;
        unint64_t v30 = a1;
        do
        {
          unint64_t v31 = v30;
          v30 += 48;
          uint64_t v32 = *(void *)(v31 + 72);
          if (v32 == v23) {
            break;
          }
          double v33 = *(char **)(v24 + 280);
          double v34 = *(char **)(v24 + 288);
          long long v35 = v33;
          long long v36 = v33;
          if (v33 != v34)
          {
            do
            {
              if (*(void *)v36 == v32) {
                goto LABEL_26;
              }
              v36 += 8;
            }
            while (v36 != v34);
            long long v36 = *(char **)(v24 + 288);
LABEL_26:
            while (*(void *)v35 != v23)
            {
              v35 += 8;
              if (v35 == v34)
              {
                long long v35 = *(char **)(v24 + 288);
                break;
              }
            }
          }
        }
        while (v36 - v33 < v35 - v33);
        long long v37 = a2;
        if (v31 == a1)
        {
          long long v37 = a2;
          if (v30 < (unint64_t)a2)
          {
            long long v37 = a2;
            do
            {
              uint64_t v43 = *((void *)v37 - 3);
              v37 -= 3;
              if (v43 != v23)
              {
                uint64_t v44 = *(char **)(v24 + 280);
                uint64_t v45 = *(char **)(v24 + 288);
                uint64_t v46 = v44;
                long long v47 = v44;
                if (v44 != v45)
                {
                  do
                  {
                    if (*(void *)v47 == v43) {
                      goto LABEL_48;
                    }
                    v47 += 8;
                  }
                  while (v47 != v45);
                  long long v47 = *(char **)(v24 + 288);
LABEL_48:
                  while (*(void *)v46 != v23)
                  {
                    v46 += 8;
                    if (v46 == v45)
                    {
                      uint64_t v46 = *(char **)(v24 + 288);
                      break;
                    }
                  }
                }
                if (v47 - v44 < v46 - v44) {
                  break;
                }
              }
            }
            while (v30 < (unint64_t)v37);
          }
        }
        else
        {
          do
          {
            do
            {
              uint64_t v38 = *((void *)v37 - 3);
              v37 -= 3;
            }
            while (v38 == v23);
            uint64_t v39 = *(char **)(v24 + 280);
            char v40 = *(char **)(v24 + 288);
            unint64_t v41 = v39;
            long long v42 = v39;
            if (v39 != v40)
            {
              do
              {
                if (*(void *)v42 == v38) {
                  goto LABEL_36;
                }
                v42 += 8;
              }
              while (v42 != v40);
              long long v42 = *(char **)(v24 + 288);
LABEL_36:
              while (*(void *)v41 != v23)
              {
                v41 += 8;
                if (v41 == v40)
                {
                  unint64_t v41 = *(char **)(v24 + 288);
                  break;
                }
              }
            }
          }
          while (v42 - v39 >= v41 - v39);
        }
        unint64_t v13 = v30;
        if (v30 < (unint64_t)v37)
        {
          uint64_t v48 = v37;
          do
          {
            *(_OWORD *)v224 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v224[16] = *(_OWORD *)(v13 + 32);
            long long v49 = *(_OWORD *)v13;
            long long v51 = *v48;
            long long v50 = v48[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v48 + 27);
            *(_OWORD *)unint64_t v13 = v51;
            *(_OWORD *)(v13 + 16) = v50;
            *(long long *)((char *)v48 + 27) = *(_OWORD *)&v224[11];
            *uint64_t v48 = v49;
            v48[1] = *(_OWORD *)v224;
            uint64_t v52 = *(void *)a3;
            do
            {
              uint64_t v53 = *(void *)(v13 + 72);
              v13 += 48;
              if (v53 == v23) {
                break;
              }
              uint64_t v54 = *(char **)(v52 + 280);
              unint64_t v55 = *(char **)(v52 + 288);
              unint64_t v56 = v54;
              long long v57 = v54;
              if (v54 != v55)
              {
                do
                {
                  if (*(void *)v57 == v53) {
                    goto LABEL_61;
                  }
                  v57 += 8;
                }
                while (v57 != v55);
                long long v57 = *(char **)(v52 + 288);
LABEL_61:
                while (*(void *)v56 != v23)
                {
                  v56 += 8;
                  if (v56 == v55)
                  {
                    unint64_t v56 = *(char **)(v52 + 288);
                    break;
                  }
                }
              }
            }
            while (v57 - v54 < v56 - v54);
            do
            {
              do
              {
                uint64_t v58 = *((void *)v48 - 3);
                v48 -= 3;
              }
              while (v58 == v23);
              uint64_t v59 = *(char **)(v52 + 280);
              double v60 = *(char **)(v52 + 288);
              uint64_t v61 = v59;
              uint64_t v62 = v59;
              if (v59 != v60)
              {
                do
                {
                  if (*(void *)v62 == v58) {
                    goto LABEL_70;
                  }
                  v62 += 8;
                }
                while (v62 != v60);
                uint64_t v62 = *(char **)(v52 + 288);
LABEL_70:
                while (*(void *)v61 != v23)
                {
                  v61 += 8;
                  if (v61 == v60)
                  {
                    uint64_t v61 = *(char **)(v52 + 288);
                    break;
                  }
                }
              }
            }
            while (v62 - v59 >= v61 - v59);
          }
          while (v13 < (unint64_t)v48);
        }
        unint64_t v63 = (long long *)(v13 - 48);
        if (v13 - 48 != a1)
        {
          long long v64 = *v63;
          long long v65 = *(_OWORD *)(v13 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
          *(_OWORD *)a1 = v64;
          *(_OWORD *)(a1 + 16) = v65;
        }
        *unint64_t v63 = v234;
        *(void *)(v13 - 32) = v240;
        *(void *)(v13 - 24) = v23;
        *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v231 + 7);
        *(void *)(v13 - 16) = v231;
        if (v30 >= (unint64_t)v37) {
          break;
        }
LABEL_80:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(a1, v13 - 48, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, v13 - 48, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_SampleRemainder*>(v13, (uint64_t)a2, a3))
      {
        break;
      }
      if (!v66) {
        goto LABEL_80;
      }
    }
    a2 = (long long *)(v13 - 48);
    if (!v66) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 - 24);
      uint64_t v9 = *(void *)(a1 + 24);
      if (v8 == v9) {
        return result;
      }
      id v10 = *(char **)(*(void *)a3 + 280);
      long long v11 = *(char **)(*(void *)a3 + 288);
      unint64_t v12 = v10;
      unint64_t v13 = v10;
      if (v10 == v11) {
        goto LABEL_10;
      }
      do
      {
        if (*(void *)v13 == v8) {
          goto LABEL_7;
        }
        v13 += 8;
      }
      while (v13 != v11);
      unint64_t v13 = *(char **)(*(void *)a3 + 288);
      do
      {
LABEL_7:
        if (*(void *)v12 == v9) {
          goto LABEL_10;
        }
        v12 += 8;
      }
      while (v12 != v11);
      unint64_t v12 = *(char **)(*(void *)a3 + 288);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        uint64_t v14 = (long long *)(a2 - 48);
        long long v15 = *(_OWORD *)a1;
        *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        long long v16 = *(_OWORD *)(a2 - 21);
        long long v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *uint64_t v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(long long *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), a3);
      uint64_t v19 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      int v20 = 0;
      break;
  }
  while (1)
  {
    uint64_t v21 = *(void *)(v19 + 24);
    uint64_t v22 = *(void *)(v18 + 24);
    if (v21 != v22)
    {
      uint64_t v23 = *(char **)(*(void *)a3 + 280);
      uint64_t v24 = *(char **)(*(void *)a3 + 288);
      uint64_t v25 = v23;
      double v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(void *)v26 == v21) {
            goto LABEL_19;
          }
          v26 += 8;
        }
        while (v26 != v24);
        double v26 = *(char **)(*(void *)a3 + 288);
LABEL_19:
        while (*(void *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            uint64_t v25 = *(char **)(*(void *)a3 + 288);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        long long v34 = *(_OWORD *)v19;
        uint64_t v36 = *(void *)(v19 + 16);
        long long v37 = *(_OWORD *)(v19 + 32);
        uint64_t v27 = v19;
        while (1)
        {
          long long v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1) {
            break;
          }
          uint64_t v27 = v18;
          uint64_t v29 = *(void *)(v18 - 24);
          if (v21 != v29)
          {
            unint64_t v30 = *(char **)(*(void *)a3 + 280);
            unint64_t v31 = *(char **)(*(void *)a3 + 288);
            uint64_t v32 = v30;
            double v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(void *)v33 == v21) {
                  goto LABEL_30;
                }
                v33 += 8;
              }
              while (v33 != v31);
              double v33 = *(char **)(*(void *)a3 + 288);
LABEL_30:
              while (*(void *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  uint64_t v32 = *(char **)(*(void *)a3 + 288);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30) {
              continue;
            }
          }
          goto LABEL_36;
        }
        uint64_t v27 = a1;
LABEL_36:
        *(_OWORD *)uint64_t v27 = v34;
        *(void *)(v27 + 16) = v36;
        *(void *)(v27 + 24) = v21;
        *(void *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8) {
          return v19 + 48 == a2;
        }
      }
    }
    uint64_t v18 = v19;
    v19 += 48;
    if (v19 == a2) {
      return 1;
    }
  }
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  id v3 = *(void **)(a2 + 216);
  uint64_t v46 = (void *)(a2 + 224);
  if (v3 == (void *)(a2 + 224)) {
    return;
  }
  uint64_t v48 = (void *)(a1 + 16);
  do
  {
    BOOL v5 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a2, v3[4]);
    uint64_t v6 = v5;
    if (!v5) {
      goto LABEL_80;
    }
    unint64_t v7 = [v5 hash];
    unint64_t v8 = v7;
    unint64_t v9 = *(void *)(a1 + 8);
    if (!v9) {
      goto LABEL_21;
    }
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v49 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v2 = v7;
      if (v7 >= v9) {
        unint64_t v2 = v7 % v9;
      }
    }
    else
    {
      unint64_t v2 = (v9 - 1) & v7;
    }
    long long v11 = *(char ***)(*(void *)a1 + 8 * v2);
    if (!v11 || (unint64_t v12 = *v11) == 0)
    {
LABEL_21:
      uint64_t v19 = (char *)operator new(0x78uLL);
      v50[0] = v19;
      v50[1] = v48;
      *(void *)uint64_t v19 = 0;
      *((void *)v19 + 1) = v8;
      *((void *)v19 + 2) = v6;
      *(_OWORD *)(v19 + 24) = 0u;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      *(_OWORD *)(v19 + 104) = 0u;
      char v51 = 1;
      float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v21 = *(float *)(a1 + 32);
      if (v9 && (float)(v21 * (float)v9) >= v20)
      {
LABEL_67:
        long long v37 = *(char ***)(*(void *)a1 + 8 * v2);
        unint64_t v12 = (char *)v50[0];
        if (v37)
        {
          *(void *)v50[0] = *v37;
        }
        else
        {
          *(void *)v50[0] = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = v12;
          *(void *)(*(void *)a1 + 8 * v2) = v48;
          if (!*(void *)v12)
          {
LABEL_76:
            v50[0] = 0;
            ++*(void *)(a1 + 24);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v50);
            goto LABEL_77;
          }
          unint64_t v38 = *(void *)(*(void *)v12 + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v38 >= v9) {
              v38 %= v9;
            }
          }
          else
          {
            v38 &= v9 - 1;
          }
          long long v37 = (char **)(*(void *)a1 + 8 * v38);
        }
        *long long v37 = v12;
        goto LABEL_76;
      }
      BOOL v22 = (v9 & (v9 - 1)) != 0;
      if (v9 < 3) {
        BOOL v22 = 1;
      }
      unint64_t v23 = v22 | (2 * v9);
      unint64_t v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      else {
        int8x8_t prime = (int8x8_t)v23;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v9 = *(void *)(a1 + 8);
      if (*(void *)&prime > v9) {
        goto LABEL_33;
      }
      if (*(void *)&prime < v9)
      {
        unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          unint64_t v32 = std::__next_prime(v32);
        }
        else
        {
          uint64_t v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2) {
            unint64_t v32 = v34;
          }
        }
        if (*(void *)&prime <= v32) {
          int8x8_t prime = (int8x8_t)v32;
        }
        if (*(void *)&prime >= v9)
        {
          unint64_t v9 = *(void *)(a1 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            double v26 = operator new(8 * *(void *)&prime);
            uint64_t v27 = *(void **)a1;
            *(void *)a1 = v26;
            if (v27) {
              operator delete(v27);
            }
            uint64_t v28 = 0;
            *(int8x8_t *)(a1 + 8) = prime;
            do
              *(void *)(*(void *)a1 + 8 * v28++) = 0;
            while (*(void *)&prime != v28);
            uint64_t v29 = (void *)*v48;
            if (*v48)
            {
              unint64_t v30 = v29[1];
              uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(void *)&prime) {
                  v30 %= *(void *)&prime;
                }
              }
              else
              {
                v30 &= *(void *)&prime - 1;
              }
              *(void *)(*(void *)a1 + 8 * v30) = v48;
              long long v35 = (void *)*v29;
              if (*v29)
              {
                do
                {
                  unint64_t v36 = v35[1];
                  if (v31.u32[0] > 1uLL)
                  {
                    if (v36 >= *(void *)&prime) {
                      v36 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v36 &= *(void *)&prime - 1;
                  }
                  if (v36 != v30)
                  {
                    if (!*(void *)(*(void *)a1 + 8 * v36))
                    {
                      *(void *)(*(void *)a1 + 8 * v36) = v29;
                      goto LABEL_58;
                    }
                    *uint64_t v29 = *v35;
                    *long long v35 = **(void **)(*(void *)a1 + 8 * v36);
                    **(void **)(*(void *)a1 + 8 * v36) = v35;
                    long long v35 = v29;
                  }
                  unint64_t v36 = v30;
LABEL_58:
                  uint64_t v29 = v35;
                  long long v35 = (void *)*v35;
                  unint64_t v30 = v36;
                }
                while (v35);
              }
            }
            unint64_t v9 = (unint64_t)prime;
            goto LABEL_62;
          }
          uint64_t v45 = *(void **)a1;
          *(void *)a1 = 0;
          if (v45) {
            operator delete(v45);
          }
          unint64_t v9 = 0;
          *(void *)(a1 + 8) = 0;
        }
      }
LABEL_62:
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v8 >= v9) {
          unint64_t v2 = v8 % v9;
        }
        else {
          unint64_t v2 = v8;
        }
      }
      else
      {
        unint64_t v2 = (v9 - 1) & v8;
      }
      goto LABEL_67;
    }
    while (1)
    {
      unint64_t v13 = *((void *)v12 + 1);
      if (v13 == v8) {
        break;
      }
      if (v49 > 1)
      {
        if (v13 >= v9) {
          v13 %= v9;
        }
      }
      else
      {
        v13 &= v9 - 1;
      }
      if (v13 != v2) {
        goto LABEL_21;
      }
LABEL_20:
      unint64_t v12 = *(char **)v12;
      if (!v12) {
        goto LABEL_21;
      }
    }
    id v14 = *((id *)v12 + 2);
    long long v15 = v6;
    id v16 = v6;
    long long v17 = v16;
    if (v14 != v16)
    {
      char v18 = [v14 isEqualToString:v16];

      uint64_t v6 = v15;
      if (v18) {
        goto LABEL_77;
      }
      goto LABEL_20;
    }

    uint64_t v6 = v15;
LABEL_77:
    long long v39 = *(_OWORD *)(v3 + 5);
    long long v40 = *(_OWORD *)(v3 + 7);
    long long v41 = *(_OWORD *)(v3 + 9);
    *((void *)v12 + 9) = v3[11];
    *(_OWORD *)(v12 + 56) = v41;
    *(_OWORD *)(v12 + 40) = v40;
    *(_OWORD *)(v12 + 24) = v39;
    *((void *)v12 + 10) = v3[12];
    if (v12 + 16 != (char *)(v3 + 4)) {
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v12 + 88, (char *)v3[13], v3[14], (uint64_t)(v3[14] - v3[13]) >> 4);
    }
    *((void *)v12 + 14) = v3[16];

LABEL_80:
    long long v42 = (void *)v3[1];
    if (v42)
    {
      do
      {
        uint64_t v43 = v42;
        long long v42 = (void *)*v42;
      }
      while (v42);
    }
    else
    {
      do
      {
        uint64_t v43 = (void *)v3[2];
        BOOL v44 = *v43 == (void)v3;
        id v3 = v43;
      }
      while (!v44);
    }
    id v3 = v43;
  }
  while (v43 != v46);
}

void sub_1BD11B648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);

  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::~__hash_table(v6);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F17251F0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F17251F0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C187B8A0);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1F17251F0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BD11B828(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F17251F0;
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48))(v1) + 56;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1725280;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1725280;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C187B8A0);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1F1725280;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BD11BAC0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1725280;
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  unint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsAverageSampleDuration const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::~__func()
{
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F1725310;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1725310;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 576))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a4, 3, @"Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date");
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  }
  double v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(void *)(a1 + 40) && a3) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_advanceToTime(a1, v8);
    }
    HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    unint64_t v9 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    uint64_t v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v9, a4);
  }
  return v10;
}

void sub_1BD11BED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_advanceToTime(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 128) <= a2)
  {
    uint64_t v4 = a1 + 112;
    uint64_t v5 = a1 + 120;
    do
    {
      uint64_t v6 = *(void *)(a1 + 552);
      uint64_t v7 = *(void *)(a1 + 544);
      if (v6 == v7)
      {
        uint64_t v22 = 0;
        long long v15 = *(void **)(a1 + 40);
        id v16 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a2];
        double v8 = [v15 dateIntervalContainingDate:v16 index:&v22];

        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        unint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v17 = v22;
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v19 = v18;
        float v20 = [v8 endDate];
        [v20 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::resetToBucket(v4, v17, v19, v21);
      }
      else
      {
        double v8 = [*(id *)(a1 + 40) dateIntervalAtIndex:*(void *)(a1 + 112) + 1];
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        unint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v12 = v11;
        unint64_t v13 = [v8 endDate];
        [v13 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::advanceBucket(v4, v12, v14);
      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_didChangeBucket(a1, v9);
      if (v6 != v7) {
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
      }
    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1BD11C0DC(_Unwind_Exception *exception_object)
{
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = (double *)(a1 + 8);
  uint64_t v6 = *(uint64_t **)a2;
  double v7 = *(double *)(a2 + 8);
  double v8 = *(uint64_t **)(a2 + 16);
  unint64_t v9 = *(uint64_t **)(a2 + 24);
  char v63 = *(unsigned char *)(a2 + 32);
  char v10 = v63;
  char v11 = *(unsigned char *)(a2 + 33);
  char v65 = 0;
  if (v63 && v7 >= *v5)
  {
    double v14 = &v63;
    char v12 = v11;
    char v65 = v63;
    long long v15 = v6;
    double v16 = v7;
    double v17 = *(double *)&v8;
    unint64_t v13 = (unint64_t)v9;
  }
  else
  {
    char v12 = 0;
    unint64_t v13 = 0;
    double v14 = &v65;
    long long v15 = 0;
    double v16 = 0.0;
    double v17 = 0.0;
  }
  *double v14 = 0;
  char v64 = 0;
  if (v65 && ((double v18 = *(double *)(a1 + 16), *(_DWORD *)(a1 + 36)) ? (v19 = v16 < v18) : (v19 = v16 <= v18), !v19))
  {
    double v21 = &v65;
    char v61 = v12;
    char v64 = v65;
    unint64_t v20 = v13;
    double v62 = v17;
    double v22 = v16;
    unint64_t v23 = v15;
  }
  else
  {
    double v62 = 0.0;
    char v61 = 0;
    unint64_t v20 = 0;
    double v21 = &v64;
    double v22 = 0.0;
    unint64_t v23 = 0;
  }
  *double v21 = 0;
  char v24 = v65;
  if (v65)
  {
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 248, v13, v13);
    uint64_t v25 = *(char **)(a1 + 112);
    if (v25 == *(char **)(a1 + 104) && *(uint64_t *)(a1 + 136) <= 0)
    {
      double v28 = *(double *)(a1 + 8);
      double v29 = *(double *)(a1 + 16);
      if (v16 >= v28) {
        double v28 = v16;
      }
      if (v29 >= v17) {
        double v29 = v17;
      }
      *(double *)(a1 + 48) = v28;
      *(double *)(a1 + 56) = v29;
    }
    else
    {
      if (v16 < *(double *)(a1 + 48))
      {
        double v26 = *(double *)(a1 + 8);
        if (v16 >= v26) {
          double v26 = v16;
        }
        *(double *)(a1 + 48) = v26;
      }
      if (v17 > *(double *)(a1 + 56))
      {
        double v27 = *(double *)(a1 + 16);
        if (v27 >= v17) {
          double v27 = v17;
        }
        *(double *)(a1 + 56) = v27;
      }
    }
    if (*(unsigned char *)(a1 + 32))
    {
      double v30 = *(double *)(a1 + 64);
      if (v16 < v30) {
        double v30 = v16;
      }
      *(double *)(a1 + 64) = v30;
    }
    if (a3 && v16 < *(double *)(a1 + 16))
    {
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_mergeThroughTime((uint64_t)v5, v16);
      uint64_t v25 = *(char **)(a1 + 112);
    }
    unint64_t v31 = *(void *)(a1 + 120);
    if ((unint64_t)v25 >= v31)
    {
      unint64_t v33 = 0x555555555555555;
      uint64_t v34 = *(char **)(a1 + 104);
      unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v34) >> 4);
      unint64_t v36 = v35 + 1;
      if (v35 + 1 > 0x555555555555555) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - (void)v34) >> 4);
      if (2 * v37 > v36) {
        unint64_t v36 = 2 * v37;
      }
      if (v37 < 0x2AAAAAAAAAAAAAALL) {
        unint64_t v33 = v36;
      }
      if (v33)
      {
        unint64_t v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v33);
        uint64_t v34 = *(char **)(a1 + 104);
        uint64_t v25 = *(char **)(a1 + 112);
      }
      else
      {
        uint64_t v38 = 0;
      }
      unint64_t v39 = v33 + 48 * v35;
      *(void *)unint64_t v39 = v15;
      *(double *)(v39 + 8) = v16;
      *(double *)(v39 + 16) = v17;
      *(void *)(v39 + 24) = v13;
      unint64_t v40 = v33 + 48 * v38;
      *(unsigned char *)(v39 + 32) = v24;
      *(unsigned char *)(v39 + 33) = v12;
      *(_WORD *)(v39 + 40) = 0;
      *(unsigned char *)(v39 + 42) = 0;
      unint64_t v32 = (void *)(v39 + 48);
      if (v25 != v34)
      {
        do
        {
          long long v41 = *((_OWORD *)v25 - 3);
          long long v42 = *((_OWORD *)v25 - 2);
          *(_OWORD *)(v39 - 21) = *(_OWORD *)(v25 - 21);
          *(_OWORD *)(v39 - 48) = v41;
          *(_OWORD *)(v39 - 32) = v42;
          v39 -= 48;
          v25 -= 48;
        }
        while (v25 != v34);
        uint64_t v34 = *(char **)(a1 + 104);
      }
      *(void *)(a1 + 104) = v39;
      *(void *)(a1 + 112) = v32;
      *(void *)(a1 + 120) = v40;
      if (v34) {
        operator delete(v34);
      }
    }
    else
    {
      *(void *)uint64_t v25 = v15;
      *((double *)v25 + 1) = v16;
      *((double *)v25 + 2) = v17;
      *((void *)v25 + 3) = v13;
      v25[32] = v24;
      v25[33] = v12;
      *((_WORD *)v25 + 20) = 0;
      unint64_t v32 = v25 + 48;
      v25[42] = 0;
    }
    *(void *)(a1 + 112) = v32;
    if (!*(unsigned char *)(a1 + 176) || *(double *)(a1 + 152) <= v7)
    {
      *(void *)(a1 + 144) = v6;
      *(double *)(a1 + 152) = v7;
      *(double *)(a1 + 160) = *(double *)&v8;
      *(void *)(a1 + 168) = v9;
      *(unsigned char *)(a1 + 176) = v10;
      *(unsigned char *)(a1 + 177) = v11;
    }
    if (*(unsigned char *)(a1 + 33))
    {
      unint64_t v43 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID((uint64_t)v5, v13);
      BOOL v44 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_statisticsForSource((uint64_t)v5, v43);
      if (!*((unsigned char *)v44 + 48) || *((double *)v44 + 3) <= v7)
      {
        v44[2] = v6;
        *((double *)v44 + 3) = v7;
        v44[4] = v8;
        v44[5] = v9;
        *((unsigned char *)v44 + 48) = v10;
        *((unsigned char *)v44 + 49) = v11;
      }
    }
  }
  char v45 = v64;
  if (v64)
  {
    unint64_t v46 = *(void *)(a1 + 440);
    unint64_t v47 = *(void *)(a1 + 448);
    if (v46 >= v47)
    {
      uint64_t v49 = *(void *)(a1 + 432);
      unint64_t v50 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v46 - v49) >> 3);
      unint64_t v51 = v50 + 1;
      if (v50 + 1 > 0x666666666666666) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v52 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v47 - v49) >> 3);
      if (2 * v52 > v51) {
        unint64_t v51 = 2 * v52;
      }
      if (v52 >= 0x333333333333333) {
        unint64_t v53 = 0x666666666666666;
      }
      else {
        unint64_t v53 = v51;
      }
      if (v53) {
        unint64_t v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v53);
      }
      else {
        uint64_t v54 = 0;
      }
      unint64_t v55 = v53 + 40 * v50;
      unint64_t v56 = v53 + 40 * v54;
      *(void *)unint64_t v55 = v23;
      *(double *)(v55 + 8) = v22;
      *(double *)(v55 + 16) = v62;
      *(void *)(v55 + 24) = v20;
      *(unsigned char *)(v55 + 32) = v45;
      *(unsigned char *)(v55 + 33) = v61;
      unint64_t v48 = v55 + 40;
      uint64_t v58 = *(char **)(a1 + 432);
      long long v57 = *(char **)(a1 + 440);
      if (v57 != v58)
      {
        do
        {
          long long v59 = *(_OWORD *)(v57 - 40);
          long long v60 = *(_OWORD *)(v57 - 24);
          *(_WORD *)(v55 - 8) = *((_WORD *)v57 - 4);
          *(_OWORD *)(v55 - 24) = v60;
          *(_OWORD *)(v55 - 40) = v59;
          v55 -= 40;
          v57 -= 40;
        }
        while (v57 != v58);
        long long v57 = *(char **)(a1 + 432);
      }
      *(void *)(a1 + 432) = v55;
      *(void *)(a1 + 440) = v48;
      *(void *)(a1 + 448) = v56;
      if (v57) {
        operator delete(v57);
      }
    }
    else
    {
      *(void *)unint64_t v46 = v23;
      *(double *)(v46 + 8) = v22;
      *(double *)(v46 + 16) = v62;
      *(void *)(v46 + 24) = v20;
      *(unsigned char *)(v46 + 32) = v45;
      unint64_t v48 = v46 + 40;
      *(unsigned char *)(v46 + 33) = v61;
    }
    *(void *)(a1 + 440) = v48;
  }
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 578))
  {
    *(unsigned char *)(a1 + 580) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 580) = 0;
    unint64_t v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      uint64_t v4 = v2;
      uint64_t v3 = (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      if (v3) {
        v4[2](v4, v3);
      }

      unint64_t v2 = v4;
    }
  }
}

void sub_1BD11C694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  unint64_t v9 = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 432), *(void *)(a1 + 440), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 440) - *(void *)(a1 + 432)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::resetToBucket(a1, *(void *)a1 + 1, a2, a3);
  uint64_t v6 = v9;
  double v7 = v10;
  if (v9 != v10)
  {
    uint64_t v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BD11C790(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 580))
  {
    if (v3)
    {
      id v6 = v3;
      uint64_t v4 = _Block_copy(*(const void **)(a1 + 96));
      uint64_t v5 = v4;
      if (v4) {
        (*((void (**)(void *, id))v4 + 2))(v4, v6);
      }

      id v3 = v6;
    }
    *(unsigned char *)(a1 + 580) = 0;
  }
}

void sub_1BD11C824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 startDate];
  id v6 = [v4 startDate];
  uint64_t v7 = [v5 compare:v6];

  return v7;
}

void sub_1BD11C8AC(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 13);
  if (WeakRetained)
  {
    if (v5
      && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_currentBucketInterval((uint64_t)a1),
          (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v8 = [v5 endDate];
      unint64_t v9 = [v7 startDate];
      if (objc_msgSend(v8, "hk_isAfterDate:", v9))
      {
        char v10 = [v5 startDate];
        uint64_t v11 = [v7 endDate];
        char v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);
      }
      else
      {
        char v12 = 0;
      }

      unint64_t v13 = _Block_copy(a1[12]);
      if ((v12 & 1) == 0) {
        operator new();
      }
    }
    else
    {
      unint64_t v13 = _Block_copy(a1[12]);
    }
    *((unsigned char *)a1 + 576) = 1;
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
    v27[3] = &unk_1E6308FF8;
    id v15 = v5;
    id v28 = v15;
    id v16 = v13;
    id v29 = v16;
    (*((void (**)(id *, void *))*a1 + 9))(a1, v27);
    if (v5)
    {
      double v17 = [v15 startDate];
      [v17 timeIntervalSinceReferenceDate];
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_configureForStartTime((uint64_t)a1);
    }
    else
    {
      (*((void (**)(id *))*a1 + 4))(a1);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
    v21[3] = &unk_1E6309060;
    char v24 = a1;
    id v5 = v15;
    char v26 = 1;
    id v22 = v5;
    uint64_t v25 = a1;
    id v23 = WeakRetained;
    uint64_t v14 = (*((uint64_t (**)(id *, void *, uint64_t))*a1 + 14))(a1, v21, a3);
    double v18 = _Block_copy(v16);
    id v19 = a1[12];
    a1[12] = v18;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to invalidate interval: no data source available.");
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1BD11CCFC(_Unwind_Exception *a1)
{
  MEMORY[0x1C187B8A0](v4, 0x10F1C409A2B2ECELL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_11;
  }
  id v3 = [v10 endDate];
  uint64_t v4 = [*(id *)(a1 + 32) startDate];
  char v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    id v6 = [v10 startDate];
    uint64_t v7 = [*(id *)(a1 + 32) endDate];
    char v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_11:
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9) {
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
      }
    }
  }
}

void sub_1BD11CEE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = [*(id *)(a1 + 32) startDate];
  [v5 timeIntervalSinceReferenceDate];
  uint64_t v7 = v6;

  char v8 = [*(id *)(a1 + 32) endDate];
  [v8 timeIntervalSinceReferenceDate];
  uint64_t v10 = v9;

  uint64_t v11 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  uint64_t v13 = *(void *)(a1 + 32);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  char v32 = *(unsigned char *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  uint64_t v31 = *(void *)(a1 + 56);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  uint64_t v14 = [v11 collectionCalculator:WeakRetained queryForInterval:v13 error:a2 sampleHandler:v30 mergeHandler:v29];

  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15 != v4)
    {
      id v16 = [*(id *)(a1 + 32) endDate];
      [v16 timeIntervalSinceReferenceDate];
      if (*(void *)(v15 + 40))
      {
        double v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          id v19 = [*(id *)(v15 + 40) dateIntervalAtIndex:*(void *)(v15 + 112) + 1];
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          unint64_t v20 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(v15, v15 + 120);
          double v21 = [v19 startDate];
          [v21 timeIntervalSinceReferenceDate];
          double v23 = v22;
          char v24 = [v19 endDate];
          [v24 timeIntervalSinceReferenceDate];
          HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            char v26 = _Block_copy(*(const void **)(v15 + 96));
            double v27 = v26;
            if (v26) {
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);
            }
          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_didChangeBucket(v15, 0);
        }
      }
    }
  }
  return v14;
}

void sub_1BD11D18C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3()
{
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 576)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  }
  if (*(void *)(a1 + 40)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_advanceToTime(a1, a2);
  }
  if (*(double *)(a1 + 128) > a2)
  {
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 32) < *(double *)(v10 + 8))
                {
                  uint64_t v129 = *(void *)(v10 + 32);
                  long long v113 = *(_OWORD *)v10;
                  long long v121 = *(_OWORD *)(v10 + 16);
                  long long v52 = *(_OWORD *)(a2 - 40);
                  long long v53 = *(_OWORD *)(a2 - 24);
                  *(_WORD *)(v10 + 32) = *(_WORD *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(_WORD *)(a2 - 8) = v129;
                  *(_OWORD *)(a2 - 24) = v121;
                  *(_OWORD *)(a2 - 40) = v113;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v10, (double *)(v10 + 40), (double *)(a2 - 40));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, v10 + 120, a2 - 40);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            uint64_t v54 = (void *)(v10 + 40);
            BOOL v56 = v10 == a2 || v54 == (void *)a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  long long v59 = v54;
                  double v60 = *(double *)(v58 + 48);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *v54;
                    long long v114 = *(_OWORD *)(v58 + 56);
                    uint64_t v122 = *(void *)(v58 + 72);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      uint64_t v63 = v10 + v62;
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      *(_OWORD *)(v63 + 40) = *(_OWORD *)(v10 + v62);
                      *(_OWORD *)(v63 + 56) = v64;
                      *(_WORD *)(v63 + 72) = *(_WORD *)(v10 + v62 + 32);
                      if (!v62) {
                        break;
                      }
                      v62 -= 40;
                      if (v60 >= *(double *)(v63 - 32))
                      {
                        uint64_t v65 = v10 + v62 + 40;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = v114;
                    *(_WORD *)(v65 + 32) = v122;
                  }
                  uint64_t v54 = v59 + 5;
                  v57 += 40;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 5 != (void *)a2);
              }
            }
            else if (!v56)
            {
              do
              {
                uint64_t v98 = v54;
                double v99 = *(double *)(a1 + 48);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *v54;
                  long long v117 = *(_OWORD *)(a1 + 56);
                  uint64_t v125 = *(void *)(a1 + 72);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(_OWORD *)(v101 - 3);
                    *(_OWORD *)long long v101 = *(_OWORD *)(v101 - 5);
                    *((_OWORD *)v101 + 1) = v102;
                    *((_WORD *)v101 + 16) = *((_WORD *)v101 - 4);
                    double v103 = *((double *)v101 - 9);
                    v101 -= 5;
                  }
                  while (v99 < v103);
                  void *v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *((_WORD *)v101 + 16) = v125;
                  *((_OWORD *)v101 + 1) = v117;
                }
                v54 += 5;
                a1 = (unint64_t)v98;
              }
              while (v98 + 5 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 40 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v10 + 40 * v69 + 8) < *(double *)(v70 + 48))
                  {
                    v70 += 40;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  double v71 = *(double *)(v10 + 40 * v68 + 8);
                  if (*(double *)(v70 + 8) >= v71)
                  {
                    unint64_t v72 = v10 + 40 * v68;
                    uint64_t v73 = *(void *)v72;
                    uint64_t v123 = *(void *)(v72 + 32);
                    long long v115 = *(_OWORD *)(v72 + 16);
                    do
                    {
                      unint64_t v74 = v72;
                      unint64_t v72 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_WORD *)(v74 + 32) = *(_WORD *)(v70 + 32);
                      *(_OWORD *)unint64_t v74 = v75;
                      *(_OWORD *)(v74 + 16) = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 40 * v77;
                      uint64_t v78 = 2 * v69 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v10 + 40 * v77 + 8) < *(double *)(v70 + 48))
                      {
                        v70 += 40;
                        uint64_t v77 = v78;
                      }
                      uint64_t v69 = v77;
                    }
                    while (*(double *)(v70 + 8) >= v71);
                    *(void *)unint64_t v72 = v73;
                    *(double *)(v72 + 8) = v71;
                    *(_OWORD *)(v72 + 16) = v115;
                    *(_WORD *)(v72 + 32) = v123;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x28uLL;
              do
              {
                uint64_t v80 = 0;
                uint64_t v130 = *(void *)(v10 + 32);
                long long v116 = *(_OWORD *)v10;
                long long v124 = *(_OWORD *)(v10 + 16);
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = v81;
                  uint64_t v83 = v80 + 1;
                  v81 += 40 * (v80 + 1);
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v85 = v84 + 2;
                  if (v85 < v79 && *(double *)(v82 + 40 * v83 + 8) < *(double *)(v81 + 48))
                  {
                    v81 += 40;
                    uint64_t v80 = v85;
                  }
                  long long v86 = *(_OWORD *)v81;
                  long long v87 = *(_OWORD *)(v81 + 16);
                  *(_WORD *)(v82 + 32) = *(_WORD *)(v81 + 32);
                  *(_OWORD *)unint64_t v82 = v86;
                  *(_OWORD *)(v82 + 16) = v87;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 40;
                if (v81 == a2)
                {
                  *(_WORD *)(v81 + 32) = v130;
                  *(_OWORD *)unint64_t v81 = v116;
                  *(_OWORD *)(v81 + 16) = v124;
                }
                else
                {
                  long long v88 = *(_OWORD *)a2;
                  long long v89 = *(_OWORD *)(a2 + 16);
                  *(_WORD *)(v81 + 32) = *(_WORD *)(a2 + 32);
                  *(_OWORD *)unint64_t v81 = v88;
                  *(_OWORD *)(v81 + 16) = v89;
                  *(_WORD *)(a2 + 32) = v130;
                  *(_OWORD *)a2 = v116;
                  *(_OWORD *)(a2 + 16) = v124;
                  uint64_t v90 = v81 - v10 + 40;
                  if (v90 >= 41)
                  {
                    unint64_t v91 = (v90 / 0x28uLL - 2) >> 1;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v10 + 40 * v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      uint64_t v109 = *(void *)(v81 + 32);
                      long long v106 = *(_OWORD *)(v81 + 16);
                      do
                      {
                        unint64_t v94 = v81;
                        unint64_t v81 = v10 + 40 * v91;
                        long long v95 = *(_OWORD *)v81;
                        long long v96 = *(_OWORD *)(v81 + 16);
                        *(_WORD *)(v94 + 32) = *(_WORD *)(v81 + 32);
                        *(_OWORD *)unint64_t v94 = v95;
                        *(_OWORD *)(v94 + 16) = v96;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 40 * v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_WORD *)(v81 + 32) = v109;
                      *(_OWORD *)(v81 + 16) = v106;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40 * (v12 >> 1)), (double *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            id v16 = (double *)(a1 + 40 * v13 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40), v16, (double *)(a2 - 80));
            double v17 = (double *)(a1 + 40 + 8 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 80), v17, (double *)(a2 - 120));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v16, (double *)v14, v17);
            uint64_t v126 = *(void *)(a1 + 32);
            long long v110 = *(_OWORD *)a1;
            long long v118 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 16) = v19;
            *(_WORD *)(v14 + 32) = v126;
            *(_OWORD *)unint64_t v14 = v110;
            *(_OWORD *)(v14 + 16) = v118;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40 * (v12 >> 1)), (double *)a1, (double *)(a2 - 40));
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 32) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          long long v105 = *(_OWORD *)(a1 + 16);
          uint64_t v108 = *(void *)(a1 + 32);
          if (v20 >= *(double *)(a2 - 32))
          {
            unint64_t v41 = a1 + 40;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 40;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 40;
              double v40 = *(double *)(v39 + 48);
              v39 += 40;
            }
            while (v20 >= v40);
          }
          unint64_t v43 = a2;
          if (v10 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              unint64_t v43 = v44 - 40;
              double v45 = *(double *)(v44 - 32);
              v44 -= 40;
            }
            while (v20 < v45);
          }
          while (v10 < v43)
          {
            uint64_t v128 = *(void *)(v10 + 32);
            long long v112 = *(_OWORD *)v10;
            long long v120 = *(_OWORD *)(v10 + 16);
            long long v46 = *(_OWORD *)v43;
            long long v47 = *(_OWORD *)(v43 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v43 + 32);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(_WORD *)(v43 + 32) = v128;
            *(_OWORD *)unint64_t v43 = v112;
            *(_OWORD *)(v43 + 16) = v120;
            do
            {
              double v48 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *(double *)(v43 - 32);
              v43 -= 40;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 40);
            long long v51 = *(_OWORD *)(v10 - 24);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 40) = v38;
          *(double *)(v10 - 32) = v20;
          *(_WORD *)(v10 - 8) = v108;
          *(_OWORD *)(v10 - 24) = v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        long long v104 = *(_OWORD *)(a1 + 16);
        uint64_t v107 = *(void *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 48);
          v21 += 40;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        unint64_t v25 = a2;
        if (v21 == 40)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 40;
            double v29 = *(double *)(v28 - 32);
            v28 -= 40;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 40;
            double v27 = *(double *)(v25 - 32);
            v25 -= 40;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v127 = *(void *)(v10 + 32);
            long long v111 = *(_OWORD *)v10;
            long long v119 = *(_OWORD *)(v10 + 16);
            long long v31 = *(_OWORD *)v30;
            long long v32 = *(_OWORD *)(v30 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v30 + 32);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(_WORD *)(v30 + 32) = v127;
            *(_OWORD *)unint64_t v30 = v111;
            *(_OWORD *)(v30 + 16) = v119;
            do
            {
              double v33 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v33 < v20);
            do
            {
              double v34 = *(double *)(v30 - 32);
              v30 -= 40;
            }
            while (v34 >= v20);
          }
          while (v10 < v30);
        }
        if (v10 - 40 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 40);
          long long v36 = *(_OWORD *)(v10 - 24);
          *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 40) = v22;
        *(double *)(v10 - 32) = v20;
        *(_WORD *)(v10 - 8) = v107;
        *(_OWORD *)(v10 - 24) = v104;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 40;
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        __int16 v9 = *(_WORD *)(a2 - 8);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      uint64_t v16 = *(void *)v12;
      long long v21 = *(_OWORD *)(v12 + 16);
      uint64_t v22 = *(void *)(v12 + 32);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(void *)uint64_t v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(void *a1, uint64_t a2)
{
  id v3 = (void *)a1[5];
  uint64_t v4 = a1[6];
  BOOL v5 = (void *)a1[4];
  uint64_t v6 = [v5 dateInterval];
  void v9[4] = v4;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  uint64_t v7 = [v3 collectionCalculator:v5 queryForInterval:v6 error:a2 sampleHandler:v10 mergeHandler:v9];

  return v7;
}

void sub_1BD11DE90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10 = *(void *)(a1 + 32);
  *(double *)int v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  char v15 = 1;
  uint64_t v11 = [MEMORY[0x1E4F1C9C8] distantFuture];
  [v11 timeIntervalSinceReferenceDate];
  BOOL v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1BD11DF34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6 = a3;
  uint64_t v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = &unk_1F17253C0;
  double v9 = 900.0;
  if ((v6 & 0x10) == 0) {
    double v9 = 0.0;
  }
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(void *)(v8 + 104) = 0;
  *(void *)(v8 + 112) = 0;
  *(void *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_WORD *)(a1 + 584) = 1;
  *(unsigned char *)(a1 + 586) = 0;
  *(unsigned char *)(a1 + 588) = 0;
  *(void *)(a1 + 592) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(void *)(a1 + 632) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);

  JUMPOUT(0x1C187B8A0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1F17253C0;
  unint64_t v2 = *(void **)(a1 + 616);
  if (v2)
  {
    *(void *)(a1 + 624) = v2;
    operator delete(v2);
  }

  id v3 = *(void **)(a1 + 552);
  if (v3)
  {
    *(void *)(a1 + 560) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(unsigned char *)(result + 584) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::setDateInterval(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 copy];
  uint64_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;

  BOOL v5 = [v6 startDate];
  [v5 timeIntervalSinceReferenceDate];
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_configureForStartTime(a1);
}

void sub_1BD11E0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(void *)(a1 + 40))
  {
    id v5 = v3;
    [v3 timeIntervalSinceReferenceDate];
    *(void *)(a1 + 592) = v4;
    id v3 = v5;
  }
}

void sub_1BD11E158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::setStatisticsConfiguration(id *a1, void *a2)
{
  objc_storeStrong(a1 + 75, a2);
  id v7 = a2;
  id v4 = a1[75];
  id v5 = a1[72];
  a1[72] = v4;
  id v6 = v4;

  objc_storeStrong(a1 + 19, a1[72]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (*(void *)(a1 + 40)) {
    return 1;
  }
  BOOL v7 = *(void *)(a1 + 224) == *(void *)(a1 + 216) && *(uint64_t *)(a1 + 256) < 1
    || HKIntervalMask<double>::firstDifference(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)a2, *(void *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (v7) {
    return 1;
  }
  double v9 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128);

  return v9(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 copy];
  id v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v3;
}

void sub_1BD11E340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::dataSource(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));

  return WeakRetained;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::currentStatistics(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 584))
  {
    uint64_t v1 = 0;
  }
  else
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_updateSourceOrder((uint64_t)v4);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_mergeThroughTime((uint64_t)v4, v4[1]);
    uint64_t v1 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsBucket((uint64_t)v4);
  }

  return v1;
}

void sub_1BD11E410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(a1 + 64);
  BOOL v7 = v6;
  if (v6)
  {
    uint64_t v8 = [v6 startDate];
    [v8 timeIntervalSinceReferenceDate];
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    uint64_t v10 = [v7 endDate];
    [v10 timeIntervalSinceReferenceDate];
    double v12 = v11;
    double v13 = *(double *)(a2 + 8);

    if (v12 < v13) {
      goto LABEL_9;
    }
  }
  if (!*(unsigned char *)(a1 + 586))
  {
LABEL_11:
    uint64_t v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 585))
  {
LABEL_9:
    uint64_t v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(unsigned char *)(a1 + 587)) {
      goto LABEL_11;
    }
    unint64_t v17 = *(void *)(a1 + 624);
    unint64_t v18 = *(void *)(a1 + 632);
    if (v17 >= v18)
    {
      uint64_t v22 = *(void *)(a1 + 616);
      unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      unint64_t v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24) {
        unint64_t v24 = 2 * v25;
      }
      if (v25 >= 0x333333333333333) {
        unint64_t v26 = 0x666666666666666;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26) {
        unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      }
      else {
        uint64_t v27 = 0;
      }
      unint64_t v28 = v26 + 40 * v23;
      unint64_t v29 = v26 + 40 * v27;
      long long v30 = *(_OWORD *)a2;
      long long v31 = *(_OWORD *)(a2 + 16);
      *(void *)(v28 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      unint64_t v21 = v28 + 40;
      long long v32 = *(char **)(a1 + 624);
      double v33 = *(char **)(a1 + 616);
      if (v32 != v33)
      {
        do
        {
          long long v34 = *(_OWORD *)(v32 - 40);
          long long v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        long long v32 = *(char **)(a1 + 616);
      }
      *(void *)(a1 + 616) = v28;
      *(void *)(a1 + 624) = v21;
      *(void *)(a1 + 632) = v29;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      long long v19 = *(_OWORD *)a2;
      long long v20 = *(_OWORD *)(a2 + 16);
      *(void *)(v17 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      unint64_t v21 = v17 + 40;
    }
    *(void *)(a1 + 624) = v21;
    goto LABEL_9;
  }
  int v14 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
  uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1BD11E680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = v5;
  if (*(unsigned char *)(a1 + 586))
  {
    uint64_t v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 586) = 1;
  uint64_t v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    uint64_t v7 = 0;
    goto LABEL_82;
  }
  uint64_t v65 = v6;
  if (*(unsigned char *)(a1 + 585)) {
    goto LABEL_5;
  }
  double v9 = *(void **)(a1 + 608);
  if (!v9)
  {
    id v68 = 0;
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 40))
  {
LABEL_5:
    int v8 = 0;
    id v68 = 0;
    goto LABEL_29;
  }
  [v9 sortUsingComparator:&__block_literal_global_932];
  id v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v10 = *(id *)(a1 + 608);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  if (!v11)
  {

    id v12 = 0;
    goto LABEL_27;
  }
  id v12 = 0;
  uint64_t v13 = *(void *)v70;
  do
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (*(void *)v70 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(id *)(*((void *)&v69 + 1) + 8 * i);
      BOOL v16 = v15;
      if (v12)
      {
        unint64_t v17 = [v15 startDate];
        unint64_t v18 = [v12 endDate];
        int v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          long long v20 = [v16 endDate];
          unint64_t v21 = [v12 endDate];
          int v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22) {
            goto LABEL_21;
          }
          id v23 = objc_alloc(MEMORY[0x1E4F28C18]);
          unint64_t v24 = [v12 startDate];
          unint64_t v25 = [v16 endDate];
          id v26 = (id)[v23 initWithStartDate:v24 endDate:v25];
        }
        else
        {
          [v68 addObject:v12];
          id v26 = v16;
        }
        id v12 = v26;
      }
      else
      {
        id v12 = v15;
      }
LABEL_21:
    }
    uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  }
  while (v11);

  if (v12) {
    [v68 addObject:v12];
  }
LABEL_27:

LABEL_28:
  int v8 = 1;
LABEL_29:
  uint64_t v27 = *(void **)(a1 + 608);
  *(void *)(a1 + 608) = 0;

  *(unsigned char *)(a1 + 585) = 0;
  if (!v8)
  {
    unint64_t v38 = *(void *)(a1 + 616);
    *(void *)(a1 + 632) = 0;
    *(void *)(a1 + 624) = 0;
    *(void *)(a1 + 616) = 0;
    unint64_t v39 = v38;
    goto LABEL_47;
  }
  unint64_t v28 = [v68 lastObject];
  if (v28)
  {
    unint64_t v29 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_currentBucketInterval(a1);
    long long v30 = [v29 endDate];
    long long v31 = [v28 endDate];
    int v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      double v33 = [v28 endDate];
      [v33 timeIntervalSinceReferenceDate];
      double v35 = v34;

      uint64_t v36 = *(void *)(a1 + 616);
      BOOL v37 = *(long long **)(a1 + 624);
      while ((long long *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((long long *)v36 != v37)
          {
            double v40 = (long long *)(v36 + 40);
            if ((long long *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  long long v41 = *v40;
                  long long v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)uint64_t v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                double v40 = (long long *)((char *)v40 + 40);
              }
              while (v40 != v37);
              BOOL v37 = *(long long **)(a1 + 624);
            }
          }
          if ((long long *)v36 != v37) {
            *(void *)(a1 + 624) = v36;
          }
          break;
        }
        v36 += 40;
      }
    }
  }
  unint64_t v38 = *(void *)(a1 + 616);
  unint64_t v39 = *(void *)(a1 + 624);
  *(void *)(a1 + 632) = 0;
  *(void *)(a1 + 616) = 0;
  *(void *)(a1 + 624) = 0;
  if (![v68 count]) {
    goto LABEL_60;
  }
LABEL_47:
  id v43 = v68;
  long long __p = (void *)v38;
  if (v43)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v44 = v43;
    uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v70;
      while (2)
      {
        for (uint64_t j = 0; j != v45; ++j)
        {
          if (*(void *)v70 != v46) {
            objc_enumerationMutation(v44);
          }
          id v48 = *(id *)(*((void *)&v69 + 1) + 8 * j);
          int v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_primitiveInvalidateInterval((id *)a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
        if (v45) {
          continue;
        }
        break;
      }
    }

LABEL_59:
    unint64_t v38 = (unint64_t)__p;
LABEL_60:
    unint64_t v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v51;
    }
    int v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    long long __p = (void *)v38;
    if (v39 != v38)
    {
      uint64_t v54 = v38;
      uint64_t v50 = v67;
      do
      {
        int v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_primitiveAddSample(a1, v54, 1, v50);
        int v53 = v55;
        v54 += 40;
        if (v54 == v39) {
          char v56 = 0;
        }
        else {
          char v56 = v55;
        }
        uint64_t v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_primitiveInvalidateInterval((id *)a1, 0, v67))goto LABEL_59; {
LABEL_70:
    }
    int v53 = 0;
  }
  if (*(void *)(a1 + 40) && *(void *)(a1 + 560) != *(void *)(a1 + 552))
  {
    do
    {
      uint64_t v57 = objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(void *)(a1 + 112) + 1, v50, v65);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      unint64_t v58 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_statisticsFromFinishedBucket(a1, a1 + 120);
      long long v59 = [v57 startDate];
      [v59 timeIntervalSinceReferenceDate];
      double v61 = v60;
      uint64_t v62 = [v57 endDate];
      [v62 timeIntervalSinceReferenceDate];
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_notifyForCurrentBucket(a1);
    }
    while (*(void *)(a1 + 560) != *(void *)(a1 + 552));
  }
  *(unsigned char *)(a1 + 586) = 0;
  if (__p) {
    operator delete(__p);
  }

  if (v53)
  {
    if (*(unsigned char *)(a1 + 588))
    {
      *(unsigned char *)(a1 + 588) = 0;
      id v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_notifyForCurrentBucket(a1);
      uint64_t v7 = 1;
      goto LABEL_82;
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v6 = v65;
LABEL_82:
  *(unsigned char *)(a1 + 586) = 0;
LABEL_83:

  return v7;
}

void sub_1BD11ED84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    *(unsigned char *)(v13 + 586) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(unsigned char *)(result + 587) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(unsigned char *)(a1 + 586)) {
      goto LABEL_12;
    }
    uint64_t v7 = 0;
LABEL_14:
    uint64_t v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_primitiveInvalidateInterval((id *)a1, v7, a3);
    goto LABEL_15;
  }
  uint64_t v7 = [v6 dateIntervalForIntervalsContainingInterval:v5];

  if (!*(unsigned char *)(a1 + 586)) {
    goto LABEL_14;
  }
  if (!v7)
  {
LABEL_12:
    id v12 = *(void **)(a1 + 608);
    *(void *)(a1 + 608) = 0;

    uint64_t v7 = 0;
    uint64_t v11 = 1;
    *(unsigned char *)(a1 + 585) = 1;
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 585))
  {
    int v8 = *(void **)(a1 + 608);
    if (!v8)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      id v10 = *(void **)(a1 + 608);
      *(void *)(a1 + 608) = v9;

      int v8 = *(void **)(a1 + 608);
    }
    [v8 addObject:v7];
  }
  uint64_t v11 = 1;
LABEL_15:

  return v11;
}

void sub_1BD11F084(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    *(unsigned char *)(a1 + 584) = 1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI33HDStatisticsAverageSampleDurationEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v9[3] = &unk_1E63043E8;
    uint64_t v12 = a1;
    id v10 = v5;
    id v11 = WeakRetained;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 112))(a1, v9, a3);
    if (v7 && *(unsigned char *)(a1 + 584) && !*(void *)(a1 + 40)) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_configureForStartTime(a1);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to query for initial statistics: no data source available.");
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1BD11F1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::reset(uint64_t result)
{
  *(unsigned char *)(result + 584) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 encodeBool:*(unsigned __int8 *)(a1 + 584) forKey:@"needs_config"];
  id v12 = v3;
  int v32 = &unk_1F1726FA0;
  double v33 = 0;
  int v38 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
  LOBYTE(v38) = 1;
  uint64_t v34 = v4;
  uint64_t v35 = 0;
  statistics::StatisticsEngine::makeCurrentBucket((uint64_t)&v32);
  uint64_t v13 = &unk_1F171B9C8;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  int v31 = 511;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 0;
  int8x16_t v14 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  uint64_t v5 = *(void *)(a1 + 136);
  char v29 = *(unsigned char *)(a1 + 144);
  char v30 = *(unsigned char *)(a1 + 145);
  BOOL v28 = *(_DWORD *)(a1 + 148) == 0;
  int8x16_t v15 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  uint64_t v7 = *(int8x16_t **)(a1 + 216);
  if (v7 != *(int8x16_t **)(a1 + 224))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v7, *v7, 8uLL);
    int8x16_t v40 = v7[1];
    char v43 = 0;
    HIBYTE(v42) = v7[2].i8[9];
    LOBYTE(v42) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>();
  }
  statistics::StatisticsBucket::makeStatistics((uint64_t)&v13);
  HDStatisticsRelative<HDStatisticsAverageSampleDuration>::archive((uint64_t)&v39, (int *)(a1 + 240));
  statistics::Statistics::operator=(*((statistics **)&v22 + 1), (uint64_t)&v39);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v39);
  uint64_t v8 = *(void *)(a1 + 344);
  if (v8 != a1 + 352)
  {
    HDStatisticsRelative<HDStatisticsAverageSampleDuration>::archive((uint64_t)&v39, (int *)(v8 + 40));
    uint64_t v9 = *(void *)(v8 + 32);
    v46 |= 0x200u;
    uint64_t v45 = v9;
    PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>();
  }
  id v10 = *(int8x16_t **)(a1 + 184);
  if (v10 != *(int8x16_t **)(a1 + 192))
  {
    unint64_t v39 = (char *)&unk_1F1727540;
    v41.i32[0] = 3;
    int8x16_t v40 = vextq_s8(*v10, *v10, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>();
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v13);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v13);
  id v11 = *(int8x16_t **)(a1 + 552);
  if (v11 != *(int8x16_t **)(a1 + 560))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v11, *v11, 8uLL);
    int8x16_t v40 = v11[1];
    __int16 v42 = 0;
    char v43 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>();
  }
  PB::Writer::Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v39);
  [v12 encodeBytes:v40.i64[0] length:&v39[-v40.i64[0]] forKey:@"hdsce_archived_representation"];
  PB::Writer::~Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);
}

void sub_1BD11F5D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v60 = a2;
  *(unsigned char *)(a1 + 584) = [v60 decodeBoolForKey:@"needs_config"];
  id v3 = v60;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::HDStatisticsBucket((uint64_t)v65, 0, -1.79769313e308, 1.79769313e308);
  long long v66 = 0u;
  long long v67 = 0u;
  uint64_t v108 = 0;
  id v63 = v3;
  PB::Reader::Reader((PB::Reader *)v107, (const unsigned __int8 *)[v63 decodeBytesForKey:@"hdsce_archived_representation" returnedLength:&v108]);
  uint64_t v62 = a1;
  uint64_t v100 = &unk_1F1726FA0;
  uint64_t v101 = 0;
  uint64_t v105 = 0;
  uint64_t v103 = 0;
  uint64_t v104 = 0;
  int v106 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v100, (PB::Reader *)v107);
  uint64_t v64 = v102;
  if (v101)
  {
    uint64_t v72 = 0;
    memset(v75, 0, sizeof(v75));
    long long __p = 0;
    memset(&v79[8], 0, 50);
    long long v80 = 0u;
    long long v81 = 0u;
    LOWORD(v82) = 0;
    uint64_t v85 = 0;
    unint64_t v78 = 0;
    uint64_t v77 = 0;
    *(_DWORD *)int64_t v79 = 0;
    uint64_t v84 = 0;
    uint64_t v83 = &v84;
    long long v87 = 0u;
    long long v86 = 0u;
    int v88 = 1065353216;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v91 = 0u;
    uint64_t v92 = 0;
    int v93 = 1065353216;
    long long v94 = 0u;
    long long v95 = 0u;
    int v96 = 1065353216;
    long long v97 = 0u;
    long long v98 = 0u;
    int v99 = 1065353216;
    int8x16_t v68 = vextq_s8(*(int8x16_t *)(v101 + 8), *(int8x16_t *)(v101 + 8), 8uLL);
    uint64_t v4 = *(void *)(v101 + 72);
    uint64_t v69 = *(void *)(v101 + 64);
    char v70 = *(unsigned char *)(v101 + 185);
    char v71 = *(unsigned char *)(v101 + 186);
    int8x16_t v73 = vextq_s8(*(int8x16_t *)(v101 + 24), *(int8x16_t *)(v101 + 24), 8uLL);
    uint64_t v74 = v4;
    uint64_t v6 = *(void *)(v101 + 80);
    uint64_t v5 = *(void *)(v101 + 88);
    double v61 = (void *)v101;
    if (v6 != v5)
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(*(void *)v6 + 24);
        uint64_t v9 = *(void *)(*(void *)v6 + 32);
        uint64_t v10 = *(void *)(*(void *)v6 + 8);
        uint64_t v11 = *(void *)(*(void *)v6 + 16);
        char v12 = *(unsigned char *)(*(void *)v6 + 41);
        char v13 = *(unsigned char *)(*(void *)v6 + 40);
        if ((unint64_t)v7 >= v78)
        {
          int8x16_t v14 = (char *)__p;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)__p) >> 4);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v78 - (void)__p) >> 4) > v16) {
            unint64_t v16 = 0x5555555555555556 * ((uint64_t)(v78 - (void)__p) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v78 - (void)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v17 = 0x555555555555555;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17)
          {
            unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            uint64_t v7 = v77;
            int8x16_t v14 = (char *)__p;
          }
          else
          {
            uint64_t v18 = 0;
          }
          uint64_t v19 = (void *)(v17 + 48 * v15);
          *uint64_t v19 = v9;
          v19[1] = v8;
          v19[2] = v10;
          v19[3] = v11;
          *((_WORD *)v19 + 16) = 1;
          *((unsigned char *)v19 + 40) = 0;
          *((unsigned char *)v19 + 41) = v12;
          *((unsigned char *)v19 + 42) = v13;
          uint64_t v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              long long v21 = *((_OWORD *)v7 - 3);
              long long v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            int8x16_t v14 = (char *)__p;
          }
          uint64_t v7 = (char *)(v19 + 6);
          long long __p = v20;
          uint64_t v77 = (char *)(v19 + 6);
          unint64_t v78 = v17 + 48 * v18;
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)uint64_t v7 = v9;
          *((void *)v7 + 1) = v8;
          *((void *)v7 + 2) = v10;
          *((void *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        uint64_t v77 = v7;
        v6 += 8;
      }
      while (v6 != v5);
    }
    long long v23 = (void *)v61[13];
    if (v23)
    {
      HDStatisticsRelative<HDStatisticsAverageSampleDuration>::unarchive((uint64_t)&v109, v23);
      long long v80 = v113;
      long long v81 = v114;
      uint64_t v82 = v115;
      *(_OWORD *)int64_t v79 = v109;
      *(_OWORD *)&v79[16] = v110;
      *(_OWORD *)&v79[32] = v111;
      *(_OWORD *)&v79[48] = v112;
    }
    long long v24 = (void **)v61[17];
    long long v25 = (void **)v61[18];
    while (v24 != v25)
    {
      uint64_t v26 = (uint64_t)*v24;
      HDStatisticsRelative<HDStatisticsAverageSampleDuration>::unarchive((uint64_t)&v109, *v24);
      uint64_t v27 = *(void *)(v26 + 144);
      BOOL v28 = v84;
      char v29 = &v84;
      char v30 = &v84;
      if (v84)
      {
        do
        {
          while (1)
          {
            char v30 = (uint64_t **)v28;
            uint64_t v31 = v28[4];
            if (v31 <= v27) {
              break;
            }
            BOOL v28 = *v30;
            char v29 = v30;
            if (!*v30) {
              goto LABEL_33;
            }
          }
          if (v31 >= v27)
          {
            double v33 = (char *)v30;
            goto LABEL_36;
          }
          BOOL v28 = v30[1];
        }
        while (v28);
        char v29 = v30 + 1;
      }
LABEL_33:
      double v33 = (char *)operator new(0x90uLL);
      *((void *)v33 + 4) = v27;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *(_OWORD *)(v33 + 120) = 0u;
      *((void *)v33 + 17) = 0;
      *(void *)double v33 = 0;
      *((void *)v33 + 1) = 0;
      *((void *)v33 + 2) = v30;
      *char v29 = (uint64_t *)v33;
      int v32 = (uint64_t *)v33;
      if (*v83)
      {
        uint64_t v83 = (uint64_t **)*v83;
        int v32 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v84, v32);
      ++v85;
LABEL_36:
      uint64_t v34 = v115;
      long long v35 = v114;
      long long v36 = v113;
      long long v37 = v111;
      *(_OWORD *)(v33 + 88) = v112;
      *(_OWORD *)(v33 + 104) = v36;
      *(_OWORD *)(v33 + 120) = v35;
      long long v38 = v110;
      *(_OWORD *)(v33 + 40) = v109;
      *((void *)v33 + 17) = v34;
      *(_OWORD *)(v33 + 56) = v38;
      ++v24;
      *(_OWORD *)(v33 + 72) = v37;
    }
    uint64_t v39 = v61[5];
    for (uint64_t i = v61[6]; v39 != i; v39 += 8)
    {
      double v42 = *(double *)(*(void *)v39 + 8);
      double v41 = *(double *)(*(void *)v39 + 16);
      if (v42 >= v41) {
        double v43 = *(double *)(*(void *)v39 + 16);
      }
      else {
        double v43 = *(double *)(*(void *)v39 + 8);
      }
      if (v41 < v42) {
        double v41 = *(double *)(*(void *)v39 + 8);
      }
      HKIntervalMask<double>::_insertInterval(v75, v43, v41);
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::operator=((uint64_t)v65, (uint64_t)&v68);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsBucket((uint64_t)&v68);
  }
  uint64_t v44 = v103;
  uint64_t v45 = v104;
  if (v103 != v104)
  {
    unint64_t v46 = *((void *)&v66 + 1);
    do
    {
      uint64_t v47 = *(void *)(*(void *)v44 + 24);
      uint64_t v48 = *(void *)(*(void *)v44 + 32);
      uint64_t v49 = *(void *)(*(void *)v44 + 8);
      uint64_t v50 = *(void *)(*(void *)v44 + 16);
      if (v46 >= (unint64_t)v67)
      {
        unint64_t v51 = (void *)v66;
        unint64_t v52 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v46 - v66) >> 3);
        unint64_t v53 = v52 + 1;
        if (v52 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(v67 - v66) >> 3) > v53) {
          unint64_t v53 = 0x999999999999999ALL * ((uint64_t)(v67 - v66) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v67 - v66) >> 3) >= 0x333333333333333) {
          unint64_t v54 = 0x666666666666666;
        }
        else {
          unint64_t v54 = v53;
        }
        if (v54)
        {
          unint64_t v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v54);
          unint64_t v46 = *((void *)&v66 + 1);
          unint64_t v51 = (void *)v66;
        }
        else
        {
          uint64_t v55 = 0;
        }
        unint64_t v56 = v54 + 40 * v52;
        *(void *)unint64_t v56 = v48;
        *(void *)(v56 + 8) = v47;
        *(void *)(v56 + 16) = v49;
        *(void *)(v56 + 24) = v50;
        *(_WORD *)(v56 + 32) = 1;
        unint64_t v57 = v56;
        if ((void *)v46 != v51)
        {
          do
          {
            long long v58 = *(_OWORD *)(v46 - 40);
            long long v59 = *(_OWORD *)(v46 - 24);
            *(_WORD *)(v57 - 8) = *(_WORD *)(v46 - 8);
            *(_OWORD *)(v57 - 24) = v59;
            *(_OWORD *)(v57 - 40) = v58;
            v57 -= 40;
            v46 -= 40;
          }
          while ((void *)v46 != v51);
          unint64_t v51 = (void *)v66;
        }
        unint64_t v46 = v56 + 40;
        *(void *)&long long v66 = v57;
        *((void *)&v66 + 1) = v56 + 40;
        *(void *)&long long v67 = v54 + 40 * v55;
        if (v51) {
          operator delete(v51);
        }
      }
      else
      {
        *(void *)unint64_t v46 = v48;
        *(void *)(v46 + 8) = v47;
        *(void *)(v46 + 16) = v49;
        *(void *)(v46 + 24) = v50;
        *(_WORD *)(v46 + 32) = 1;
        v46 += 40;
      }
      *((void *)&v66 + 1) = v46;
      v44 += 8;
    }
    while (v44 != v45);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v100);

  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::operator=((void *)(v62 + 112), (uint64_t)&v64);
  if ((void)v66)
  {
    *((void *)&v66 + 1) = v66;
    operator delete((void *)v66);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsBucket((uint64_t)v65);
}

void sub_1BD11FCF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, ...)
{
  va_start(va, a8);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x3C8]);
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_WORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_WORD *)(a1 + 216) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(void *)(a1 + 224) = a1 + 232;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 280) = 1065353216;
  *(void *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_DWORD *)(a1 + 344) = 1065353216;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_DWORD *)(a1 + 384) = 1065353216;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_DWORD *)(a1 + 424) = 1065353216;
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_configureForStartTime(uint64_t a1)
{
  uint64_t v29 = 0;
  unint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
    uint64_t v4 = [v2 dateIntervalContainingDate:v3 index:&v29];

    uint64_t v5 = [v4 startDate];
    [v5 timeIntervalSinceReferenceDate];
    double v7 = v6;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
LABEL_5:
    double v13 = v9;

    goto LABEL_6;
  }
  id v10 = *(id *)(a1 + 64);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v11 = [v10 startDate];
    [v11 timeIntervalSinceReferenceDate];
    double v7 = v12;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
    goto LABEL_5;
  }
  double v7 = -1.79769313e308;
  double v13 = 1.79769313e308;
LABEL_6:

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::HDStatisticsBucket((uint64_t)v22, WeakRetained, v7, v13);

  if (*(void *)(a1 + 32) == 1) {
    char v24 = 1;
  }
  uint64_t v23 = *(void *)(a1 + 56);
  char v25 = *(unsigned char *)(a1 + 24) & 1;
  if (v28 != (char *)(a1 + 72)) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v28, *(char **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4);
  }
  objc_storeStrong(&v27, *(id *)(a1 + 600));
  if (!*(void *)(a1 + 40)) {
    int v26 = 0;
  }
  uint64_t v15 = v29;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v22);
  uint64_t v18 = v15;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::HDStatisticsBucket((uint64_t)v19, (uint64_t)v17);
  long long __p = 0u;
  long long v21 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::operator=((void *)(a1 + 112), (uint64_t)&v18);

  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsBucket((uint64_t)v19);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsBucket((uint64_t)v17);
  *(unsigned char *)(a1 + 584) = 0;
  return HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsBucket((uint64_t)v22);
}

void sub_1BD12014C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 96);
  double v7 = *(unsigned char **)(a2 + 104);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(void *)(a1 + 96) = v10;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(void *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  long long v12 = *(_OWORD *)(a2 + 168);
  long long v13 = *(_OWORD *)(a2 + 184);
  long long v14 = *(_OWORD *)(a2 + 200);
  uint64_t v15 = *(void *)(a2 + 216);
  long long v16 = *(_OWORD *)(a2 + 120);
  long long v17 = *(_OWORD *)(a2 + 136);
  long long v18 = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 232) = 0;
  uint64_t v19 = (void *)(a1 + 232);
  *(void *)(a1 + 224) = a1 + 232;
  *(_OWORD *)(a1 + 152) = v18;
  *(_OWORD *)(a1 + 136) = v17;
  *(_OWORD *)(a1 + 120) = v16;
  *(void *)(a1 + 216) = v15;
  *(_OWORD *)(a1 + 200) = v14;
  *(_OWORD *)(a1 + 184) = v13;
  *(_OWORD *)(a1 + 168) = v12;
  *(void *)(a1 + 240) = 0;
  uint64_t v20 = *(void **)(a2 + 224);
  if (v20 != (void *)(a2 + 232))
  {
    long long v21 = 0;
    long long v22 = (void *)(a1 + 232);
    while (1)
    {
      uint64_t v23 = v20[4];
      char v24 = (void *)(a1 + 232);
      if (v22 == v19) {
        goto LABEL_12;
      }
      char v25 = v21;
      int v26 = (void *)(a1 + 232);
      if (v21)
      {
        do
        {
          char v24 = v25;
          char v25 = (void *)v25[1];
        }
        while (v25);
      }
      else
      {
        do
        {
          char v24 = (void *)v26[2];
          BOOL v27 = *v24 == (void)v26;
          int v26 = v24;
        }
        while (v27);
      }
      if (v24[4] < v23)
      {
LABEL_12:
        if (v21) {
          BOOL v28 = (uint64_t **)v24;
        }
        else {
          BOOL v28 = (uint64_t **)(a1 + 232);
        }
        if (v21) {
          uint64_t v29 = (uint64_t **)(v24 + 1);
        }
        else {
          uint64_t v29 = (uint64_t **)(a1 + 232);
        }
        if (!*v29)
        {
LABEL_28:
          int v32 = (uint64_t *)operator new(0x90uLL);
          long long v33 = *((_OWORD *)v20 + 2);
          long long v34 = *((_OWORD *)v20 + 4);
          *((_OWORD *)v32 + 3) = *((_OWORD *)v20 + 3);
          *((_OWORD *)v32 + 4) = v34;
          *((_OWORD *)v32 + 2) = v33;
          long long v35 = *((_OWORD *)v20 + 5);
          long long v36 = *((_OWORD *)v20 + 6);
          long long v37 = *((_OWORD *)v20 + 8);
          *((_OWORD *)v32 + 7) = *((_OWORD *)v20 + 7);
          *((_OWORD *)v32 + 8) = v37;
          *((_OWORD *)v32 + 5) = v35;
          *((_OWORD *)v32 + 6) = v36;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 224), (uint64_t)v28, v29, v32);
        }
      }
      else
      {
        uint64_t v29 = (uint64_t **)(a1 + 232);
        BOOL v28 = (uint64_t **)(a1 + 232);
        if (!v21) {
          goto LABEL_28;
        }
        char v30 = v21;
        while (1)
        {
          while (1)
          {
            BOOL v28 = (uint64_t **)v30;
            uint64_t v31 = v30[4];
            if (v31 <= v23) {
              break;
            }
            char v30 = *v28;
            uint64_t v29 = v28;
            if (!*v28) {
              goto LABEL_28;
            }
          }
          if (v31 >= v23) {
            break;
          }
          char v30 = v28[1];
          if (!v30)
          {
            uint64_t v29 = v28 + 1;
            goto LABEL_28;
          }
        }
      }
      long long v38 = (void *)v20[1];
      if (v38)
      {
        do
        {
          uint64_t v39 = v38;
          long long v38 = (void *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          uint64_t v39 = (void *)v20[2];
          BOOL v27 = *v39 == (void)v20;
          uint64_t v20 = v39;
        }
        while (!v27);
      }
      if (v39 == (void *)(a2 + 232)) {
        break;
      }
      long long v21 = (void *)*v19;
      long long v22 = *(void **)(a1 + 224);
      uint64_t v20 = v39;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 248, a2 + 248);
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 288), *(const void **)(a2 + 288), *(void *)(a2 + 296), (uint64_t)(*(void *)(a2 + 296) - *(void *)(a2 + 288)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 312, a2 + 312);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 352, a2 + 352);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 392, a2 + 392);
  return a1;
}

void sub_1BD1204B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, id *location, void **a12)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v16);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v15);
  uint64_t v19 = *v14;
  if (*v14)
  {
    *(void *)(v12 + 296) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v13);
  std::__tree<long>::destroy(*v17);
  uint64_t v20 = *a10;
  if (*a10)
  {
    *(void *)(v12 + 104) = v20;
    operator delete(v20);
  }
  objc_destroyWeak(location);
  long long v21 = *a12;
  if (*a12)
  {
    *(void *)(v12 + 72) = v21;
    operator delete(v21);
  }

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  uint64_t v108 = *MEMORY[0x1E4F143B8];
  double v5 = *(double *)a2;
  id v6 = objc_alloc(MEMORY[0x1E4F1C9C8]);
  double v7 = (double *)(a2 + 40);
  if (v5 != -1.79769313e308) {
    double v7 = (double *)a2;
  }
  id v96 = (id)[v6 initWithTimeIntervalSinceReferenceDate:*v7];
  uint64_t v98 = a2;
  if (*(double *)(a2 + 8) == 1.79769313e308) {
    uint64_t v8 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 48)];
  }
  else {
    uint64_t v8 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 8)];
  }
  uint64_t v9 = (void *)v8;
  id v10 = *(id *)(a1 + 16);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v11 = *(id *)(a1 + 16);
    if ([v11 shouldUseUnderlyingTypeForStatistics])
    {
      uint64_t v12 = [v11 underlyingSampleType];

      id v10 = (id)v12;
    }
  }
  uint64_t v13 = (void *)[objc_alloc(MEMORY[0x1E4F2B5B0]) initWithDataType:v10 startDate:v96 endDate:v9];
  if (*(unsigned char *)(a1 + 24))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      uint64_t v15 = *(uint64_t **)(a2 + 288);
      uint64_t v16 = *(uint64_t **)(a2 + 296);
      while (v15 != v16)
      {
        uint64_t v17 = *v15;
        id v18 = objc_loadWeakRetained((id *)(a1 + 48));
        unint64_t v3 = [v18 sourceForSourceID:v17];

        if (v3)
        {
          if (([v2 containsObject:v3] & 1) == 0) {
            [v2 addObject:v3];
          }
        }

        ++v15;
      }
      uint64_t v19 = (void *)[v2 copy];
      [v13 _setSources:v19];
    }
  }

  v106[0] = &unk_1F1725490;
  uint64_t v107 = v106;
  id v97 = v13;
  uint64_t v20 = MEMORY[0x1E4F2B370];
  long long v21 = [MEMORY[0x1E4F2B618] secondUnit];
  long long v22 = *(_OWORD *)(v98 + 168);
  long long v23 = *(_OWORD *)(v98 + 200);
  long long v103 = *(_OWORD *)(v98 + 184);
  long long v104 = v23;
  uint64_t v105 = *(void *)(v98 + 216);
  long long v24 = *(_OWORD *)(v98 + 136);
  *(_OWORD *)long long __p = *(_OWORD *)(v98 + 120);
  long long v100 = v24;
  long long v101 = *(_OWORD *)(v98 + 152);
  long long v102 = v22;
  if (!v107) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  char v25 = objc_msgSend((id)v20, "quantityWithUnit:doubleValue:", v21, *(double *)(*(uint64_t (**)(void *, void **))(*v107 + 48))(v107, __p));
  [v97 setDuration:v25];

  long long v26 = *(_OWORD *)(v98 + 200);
  long long v103 = *(_OWORD *)(v98 + 184);
  long long v104 = v26;
  uint64_t v105 = *(void *)(v98 + 216);
  long long v27 = *(_OWORD *)(v98 + 136);
  *(_OWORD *)long long __p = *(_OWORD *)(v98 + 120);
  long long v100 = v27;
  long long v28 = *(_OWORD *)(v98 + 168);
  long long v101 = *(_OWORD *)(v98 + 152);
  long long v102 = v28;
  if (!v107) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  objc_msgSend(v97, "setDataCount:", *(void *)((*(uint64_t (**)(void *, void **))(*v107 + 48))(v107, __p) + 8));
  long long v29 = *(_OWORD *)(v98 + 200);
  long long v103 = *(_OWORD *)(v98 + 184);
  long long v104 = v29;
  uint64_t v105 = *(void *)(v98 + 216);
  long long v30 = *(_OWORD *)(v98 + 136);
  *(_OWORD *)long long __p = *(_OWORD *)(v98 + 120);
  long long v100 = v30;
  long long v31 = *(_OWORD *)(v98 + 168);
  long long v101 = *(_OWORD *)(v98 + 152);
  long long v102 = v31;
  if (!v107) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v32 = (*(uint64_t (**)(void *, void **))(*v107 + 48))(v107, __p);
  long long v33 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", *(double *)(v32 + 24), *(double *)(v32 + 32));
  [v97 setMostRecentQuantityDateInterval:v33];

  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    goto LABEL_123;
  }
  id v95 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v94 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v93 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  *(_OWORD *)long long __p = 0u;
  long long v100 = 0u;
  LODWORD(v101) = 1065353216;
  uint64_t v20 = *(void *)(v98 + 224);
  if (v20 == v98 + 232) {
    goto LABEL_122;
  }
  do
  {
    long long v34 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_bundleIdentifierForSourceID(v98, *(void *)(v20 + 32));
    id v2 = v34;
    if (!v34) {
      goto LABEL_100;
    }
    unint64_t v35 = [v34 hash];
    unint64_t v36 = v35;
    unint64_t v37 = (unint64_t)__p[1];
    if (!__p[1]) {
      goto LABEL_43;
    }
    uint8x8_t v38 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v38.i16[0] = vaddlv_u8(v38);
    unint64_t v39 = v38.u32[0];
    if (v38.u32[0] > 1uLL)
    {
      unint64_t v3 = v35;
      if ((void *)v35 >= __p[1]) {
        unint64_t v3 = v35 % (unint64_t)__p[1];
      }
    }
    else
    {
      unint64_t v3 = ((unint64_t)__p[1] - 1) & v35;
    }
    int8x16_t v40 = (void **)*((void *)__p[0] + v3);
    if (!v40 || (double v41 = (char *)*v40) == 0)
    {
LABEL_43:
      double v41 = (char *)operator new(0x80uLL);
      *(void *)double v41 = 0;
      *((void *)v41 + 1) = v36;
      *((void *)v41 + 2) = v2;
      *(_OWORD *)(v41 + 24) = 0u;
      *(_OWORD *)(v41 + 40) = 0u;
      *(_OWORD *)(v41 + 56) = 0u;
      *(_OWORD *)(v41 + 72) = 0u;
      *(_OWORD *)(v41 + 88) = 0u;
      *(_OWORD *)(v41 + 104) = 0u;
      *((void *)v41 + 15) = 0;
      float v47 = (float)(unint64_t)(*((void *)&v100 + 1) + 1);
      if (v37 && (float)(*(float *)&v101 * (float)v37) >= v47)
      {
LABEL_89:
        id v63 = __p[0];
        uint64_t v64 = (void *)*((void *)__p[0] + v3);
        if (v64)
        {
          *(void *)double v41 = *v64;
        }
        else
        {
          *(void *)double v41 = v100;
          *(void *)&long long v100 = v41;
          v63[v3] = &v100;
          if (!*(void *)v41)
          {
LABEL_98:
            ++*((void *)&v100 + 1);
            goto LABEL_99;
          }
          unint64_t v65 = *(void *)(*(void *)v41 + 8);
          if ((v37 & (v37 - 1)) != 0)
          {
            if (v65 >= v37) {
              v65 %= v37;
            }
          }
          else
          {
            v65 &= v37 - 1;
          }
          uint64_t v64 = (char *)__p[0] + 8 * v65;
        }
        *uint64_t v64 = v41;
        goto LABEL_98;
      }
      BOOL v48 = (v37 & (v37 - 1)) != 0;
      if (v37 < 3) {
        BOOL v48 = 1;
      }
      unint64_t v49 = v48 | (2 * v37);
      unint64_t v50 = vcvtps_u32_f32(v47 / *(float *)&v101);
      if (v49 <= v50) {
        int8x8_t prime = (int8x8_t)v50;
      }
      else {
        int8x8_t prime = (int8x8_t)v49;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v37 = (unint64_t)__p[1];
      if ((void *)*(void *)&prime > __p[1]) {
        goto LABEL_55;
      }
      if ((void *)*(void *)&prime < __p[1])
      {
        unint64_t v58 = vcvtps_u32_f32((float)*((unint64_t *)&v100 + 1) / *(float *)&v101);
        if (__p[1] < (void *)3
          || (uint8x8_t v59 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v59.i16[0] = vaddlv_u8(v59), v59.u32[0] > 1uLL))
        {
          unint64_t v58 = std::__next_prime(v58);
        }
        else
        {
          uint64_t v60 = 1 << -(char)__clz(v58 - 1);
          if (v58 >= 2) {
            unint64_t v58 = v60;
          }
        }
        if (*(void *)&prime <= v58) {
          int8x8_t prime = (int8x8_t)v58;
        }
        if (*(void *)&prime >= v37)
        {
          unint64_t v37 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_55:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v52 = operator new(8 * *(void *)&prime);
            unint64_t v53 = __p[0];
            __p[0] = v52;
            if (v53) {
              operator delete(v53);
            }
            uint64_t v54 = 0;
            __p[1] = (void *)prime;
            do
              *((void *)__p[0] + v54++) = 0;
            while (*(void *)&prime != v54);
            uint64_t v55 = (void **)v100;
            if ((void)v100)
            {
              unint64_t v56 = *(void *)(v100 + 8);
              uint8x8_t v57 = (uint8x8_t)vcnt_s8(prime);
              v57.i16[0] = vaddlv_u8(v57);
              if (v57.u32[0] > 1uLL)
              {
                if (v56 >= *(void *)&prime) {
                  v56 %= *(void *)&prime;
                }
              }
              else
              {
                v56 &= *(void *)&prime - 1;
              }
              *((void *)__p[0] + v56) = &v100;
              for (i = *v55; i; unint64_t v56 = v62)
              {
                unint64_t v62 = i[1];
                if (v57.u32[0] > 1uLL)
                {
                  if (v62 >= *(void *)&prime) {
                    v62 %= *(void *)&prime;
                  }
                }
                else
                {
                  v62 &= *(void *)&prime - 1;
                }
                if (v62 != v56)
                {
                  if (!*((void *)__p[0] + v62))
                  {
                    *((void *)__p[0] + v62) = v55;
                    goto LABEL_80;
                  }
                  *uint64_t v55 = (void *)*i;
                  void *i = **((void **)__p[0] + v62);
                  **((void **)__p[0] + v62) = i;
                  uint64_t i = v55;
                }
                unint64_t v62 = v56;
LABEL_80:
                uint64_t v55 = (void **)i;
                uint64_t i = (void *)*i;
              }
            }
            unint64_t v37 = (unint64_t)prime;
            goto LABEL_84;
          }
          uint64_t v74 = __p[0];
          __p[0] = 0;
          if (v74) {
            operator delete(v74);
          }
          unint64_t v37 = 0;
          __p[1] = 0;
        }
      }
LABEL_84:
      if ((v37 & (v37 - 1)) != 0)
      {
        if (v36 >= v37) {
          unint64_t v3 = v36 % v37;
        }
        else {
          unint64_t v3 = v36;
        }
      }
      else
      {
        unint64_t v3 = (v37 - 1) & v36;
      }
      goto LABEL_89;
    }
    unint64_t v92 = (unint64_t)__p[1] - 1;
    while (1)
    {
      unint64_t v42 = *((void *)v41 + 1);
      if (v42 == v36) {
        break;
      }
      if (v39 > 1)
      {
        if (v42 >= v37) {
          v42 %= v37;
        }
      }
      else
      {
        v42 &= v92;
      }
      if (v42 != v3) {
        goto LABEL_43;
      }
LABEL_42:
      double v41 = *(char **)v41;
      if (!v41) {
        goto LABEL_43;
      }
    }
    id v43 = *((id *)v41 + 2);
    id v44 = v2;
    uint64_t v45 = v44;
    if (v43 != v44)
    {
      char v46 = [v43 isEqualToString:v44];

      if (v46) {
        goto LABEL_99;
      }
      goto LABEL_42;
    }

LABEL_99:
    long long v66 = *(_OWORD *)(v20 + 40);
    long long v67 = *(_OWORD *)(v20 + 56);
    *(_OWORD *)(v41 + 56) = *(_OWORD *)(v20 + 72);
    *(_OWORD *)(v41 + 40) = v67;
    *(_OWORD *)(v41 + 24) = v66;
    long long v68 = *(_OWORD *)(v20 + 88);
    long long v69 = *(_OWORD *)(v20 + 104);
    long long v70 = *(_OWORD *)(v20 + 120);
    *((void *)v41 + 15) = *(void *)(v20 + 136);
    *(_OWORD *)(v41 + 104) = v70;
    *(_OWORD *)(v41 + 88) = v69;
    *(_OWORD *)(v41 + 72) = v68;

LABEL_100:
    char v71 = *(void **)(v20 + 8);
    if (v71)
    {
      do
      {
        uint64_t v72 = v71;
        char v71 = (void *)*v71;
      }
      while (v71);
    }
    else
    {
      do
      {
        uint64_t v72 = *(void **)(v20 + 16);
        BOOL v73 = *v72 == v20;
        uint64_t v20 = (uint64_t)v72;
      }
      while (!v73);
    }
    uint64_t v20 = (uint64_t)v72;
  }
  while (v72 != (void *)(v98 + 232));
  for (uint64_t j = (uint64_t **)v100; j; uint64_t j = (uint64_t **)*j)
  {
    long long v76 = j[2];
    uint64_t v77 = (void *)MEMORY[0x1E4F2B370];
    unint64_t v78 = [MEMORY[0x1E4F2B618] secondUnit];
    if (!v107) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    id v2 = j + 3;
    int64_t v79 = objc_msgSend(v77, "quantityWithUnit:doubleValue:", v78, *(double *)(*(uint64_t (**)(void *, uint64_t *))(*v107 + 48))(v107, (uint64_t *)j + 3));
    [v95 setObject:v79 forKeyedSubscript:v76];

    if (!v107) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    long long v80 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)((*(uint64_t (**)(void *, uint64_t *))(*v107 + 48))(v107, (uint64_t *)j + 3) + 8));
    [v94 setObject:v80 forKeyedSubscript:v76];

    if (!v107) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v81 = (*(uint64_t (**)(void *, uint64_t *))(*v107 + 48))(v107, (uint64_t *)j + 3);
    uint64_t v82 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", *(double *)(v81 + 24), *(double *)(v81 + 32));
    [v93 setObject:v82 forKeyedSubscript:v76];
  }
LABEL_122:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>>>::~__hash_table((uint64_t)__p);
  [v97 setDurationBySource:v95];
  [v97 setDataCountBySource:v94];
  [v97 setMostRecentQuantityDateIntervalBySource:v93];

LABEL_123:
  std::__function::__value_func<HDStatisticsAverageSampleDuration const& ()(HDStatisticsRelative<HDStatisticsAverageSampleDuration> const&)>::~__value_func[abi:ne180100](v106);
  uint64_t v83 = [*(id *)(a1 + 16) _unitForChangeInCanonicalUnit];
  uint64_t v84 = [v97 averageQuantity];
  if (v84)
  {
    uint64_t v20 = [v97 averageQuantity];
    if (([(id)v20 isCompatibleWithUnit:v83] & 1) == 0)
    {

      goto LABEL_137;
    }
  }
  uint64_t v85 = [v97 minimumQuantity];
  if (v85)
  {
    id v2 = [v97 minimumQuantity];
    if (![v2 isCompatibleWithUnit:v83])
    {
      int v86 = 1;
      goto LABEL_131;
    }
  }
  long long v87 = [v97 maximumQuantity];
  if (v87)
  {
    int v88 = [v97 maximumQuantity];
    int v89 = [v88 isCompatibleWithUnit:v83];

    int v86 = v89 ^ 1;
    if (v85) {
      goto LABEL_131;
    }
LABEL_135:
    if (!v84) {
      goto LABEL_136;
    }
LABEL_132:

    if ((v86 & 1) == 0) {
      goto LABEL_138;
    }
LABEL_137:
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8], @"Expected compatibility with %@", v83 format];
    goto LABEL_138;
  }
  int v86 = 0;
  if (!v85) {
    goto LABEL_135;
  }
LABEL_131:

  if (v84) {
    goto LABEL_132;
  }
LABEL_136:

  if (v86) {
    goto LABEL_137;
  }
LABEL_138:

  return v97;
}

void sub_1BD12118C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  if (v21) {
  if (v19)
  }

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 272);
  uint64_t v2 = *(void *)(a1 + 288);
  if (v1 != (*(void *)(a1 + 296) - v2) >> 3)
  {
    long long v4 = (void **)(a1 + 288);
    *(void *)(a1 + 296) = v2;
    std::vector<long long>::reserve((void **)(a1 + 288), v1);
    double v5 = *(void **)(a1 + 264);
    if (v5)
    {
      id v6 = *(char **)(a1 + 296);
      do
      {
        uint64_t v7 = v5[2];
        unint64_t v8 = *(void *)(a1 + 304);
        if ((unint64_t)v6 >= v8)
        {
          id v10 = (char *)*v4;
          uint64_t v11 = (v6 - (unsigned char *)*v4) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            id v10 = *(char **)(a1 + 288);
            id v6 = *(char **)(a1 + 296);
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v16 = (void *)(v14 + 8 * v11);
          void *v16 = v7;
          uint64_t v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            uint64_t v17 = *((void *)v6 - 1);
            v6 -= 8;
            *--uint64_t v16 = v17;
          }
          *(void *)(a1 + 288) = v16;
          *(void *)(a1 + 296) = v9;
          *(void *)(a1 + 304) = v14 + 8 * v15;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)id v6 = v7;
          uint64_t v9 = v6 + 8;
        }
        *(void *)(a1 + 296) = v9;
        double v5 = (void *)*v5;
        id v6 = v9;
      }
      while (v5);
    }
    id v18 = (id *)(a1 + 88);
    id WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      id v20 = objc_loadWeakRetained(v18);
      [v20 orderSourceIDs:v4];
    }
  }
}

void sub_1BD12151C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2) {
    a2 = v4 * floor(a2 / v4);
  }
  double v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    id v97 = (char **)(a1 + 96);
    location = (id *)(a1 + 88);
    uint64_t v95 = a1 + 120;
    long long v91 = (void *)(a1 + 232);
    do
    {
      unint64_t v6 = *(void *)(a1 + 96);
      uint64_t v7 = *(long long **)(a1 + 104);
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v7 - v6) >> 4);
      if (v8)
      {
        if (v8 != 1)
        {
          double v14 = a2;
          double v15 = a2;
          double v16 = v5;
          uint64_t v17 = *(void *)(a1 + 96);
          if ((long long *)v6 != v7)
          {
            do
            {
              double v18 = *(double *)(v17 + 8);
              double v19 = *(double *)(v17 + 16);
              if (v18 > v16 && v18 < v15) {
                double v15 = *(double *)(v17 + 8);
              }
              if (v19 > v5) {
                double v21 = *(double *)(v17 + 16);
              }
              else {
                double v21 = v14;
              }
              if (v19 < v14)
              {
                double v16 = v5;
                double v14 = v21;
              }
              v17 += 48;
            }
            while ((long long *)v17 != v7);
          }
          if (v14 >= v15) {
            double v22 = v15;
          }
          else {
            double v22 = v14;
          }
          double v23 = *(double *)(a1 + 16);
          if (v23 > 0.0)
          {
            double v24 = v23 * floor(v22 / v23);
            double v25 = v23 * floor((v23 + v5) / v23);
            if (v24 >= v25) {
              double v22 = v24;
            }
            else {
              double v22 = v25;
            }
          }
          *id v97 = 0;
          v97[1] = 0;
          v97[2] = 0;
          if ((long long *)v6 != v7)
          {
            if (v8 > 0x555555555555555) {
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            }
            long long v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v8);
            long long v29 = *(char **)(a1 + 96);
            long long v28 = *(char **)(a1 + 104);
            long long v30 = v26;
            if (v28 != v29)
            {
              do
              {
                long long v31 = *((_OWORD *)v28 - 3);
                long long v32 = *((_OWORD *)v28 - 2);
                *(_OWORD *)(v30 - 21) = *(_OWORD *)(v28 - 21);
                *((_OWORD *)v30 - 3) = v31;
                *((_OWORD *)v30 - 2) = v32;
                v30 -= 48;
                v28 -= 48;
              }
              while (v28 != v29);
              long long v28 = *v97;
            }
            *(void *)(a1 + 96) = v30;
            *(void *)(a1 + 104) = v26;
            *(void *)(a1 + 112) = &v26[48 * v27];
            if (v28) {
              operator delete(v28);
            }
          }
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_updateSourceOrder(a1);
          id WeakRetained = objc_loadWeakRetained(location);

          if (WeakRetained)
          {
            *(void *)&long long v101 = a1;
            unint64_t v34 = 126 - 2 * __clz(v8);
            if ((long long *)v6 == v7) {
              uint64_t v35 = 0;
            }
            else {
              uint64_t v35 = v34;
            }
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_SampleRemainder*,false>(v6, v7, (uint64_t)&v101, v35, 1);
          }
          if (*(unsigned char *)(a1 + 25)) {
            id v94 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
          }
          else {
            id v94 = 0;
          }
          id v93 = (void *)v6;
          if ((long long *)v6 == v7)
          {
LABEL_118:
            uint64_t v84 = *(void **)(a1 + 224);
            if (v84 != v91)
            {
              do
              {
                uint64_t v85 = (void *)v84[1];
                if (v85)
                {
                  do
                  {
                    int v86 = v85;
                    uint64_t v85 = (void *)*v85;
                  }
                  while (v85);
                }
                else
                {
                  do
                  {
                    int v86 = (void *)v84[2];
                    BOOL v87 = *v86 == (void)v84;
                    uint64_t v84 = v86;
                  }
                  while (!v87);
                }
                uint64_t v84 = v86;
              }
              while (v86 != v91);
            }
            *(double *)(a1 + 56) = v22;

            if (v93) {
              operator delete(v93);
            }
            goto LABEL_127;
          }
          uint64_t v96 = 0;
          char v36 = 0;
          unint64_t v37 = v6;
          while (2)
          {
            long long v99 = 0u;
            long long v100 = 0u;
            char v98 = 0;
            long long v38 = *(_OWORD *)(v37 + 16);
            long long v101 = *(_OWORD *)v37;
            long long v102 = v38;
            uint64_t v103 = *(void *)(v37 + 32);
            double v39 = *((double *)&v101 + 1);
            if ((_BYTE)v103) {
              BOOL v40 = *((double *)&v101 + 1) > v22;
            }
            else {
              BOOL v40 = 0;
            }
            if (v40)
            {
              long long v43 = *(_OWORD *)(v37 + 16);
              long long v99 = *(_OWORD *)v37;
              long long v100 = v43;
              char v98 = v103;
              char v41 = BYTE1(v103);
              unint64_t v42 = &v103;
            }
            else
            {
              char v41 = 0;
              unint64_t v42 = (uint64_t *)&v98;
            }
            *(unsigned char *)unint64_t v42 = 0;
            if ((_BYTE)v103)
            {
              for (uint64_t i = *(double **)(a1 + 64); i != *(double **)(a1 + 72) && v39 >= *i; i += 2)
              {
                if (v39 < i[1])
                {
                  LOBYTE(v103) = 0;
                  int v48 = *(unsigned __int8 *)(v37 + 42);
                  char v45 = *(unsigned char *)(v37 + 41);
                  char v46 = *(unsigned char *)(v37 + 40);
                  goto LABEL_92;
                }
              }
              char v45 = *(unsigned char *)(v37 + 41);
              char v46 = *(unsigned char *)(v37 + 40);
              if (v36)
              {
                unint64_t v47 = *((void *)&v102 + 1);
                if (v96 == *((void *)&v102 + 1) || *(unsigned char *)(a1 + 24))
                {
                  HDStatisticsRelative<HDStatisticsAverageSampleDuration>::addSample(v95, (double *)&v101);
                  int v48 = 1;
                }
                else
                {
                  int v48 = *(unsigned __int8 *)(v37 + 42);
                }
              }
              else
              {
                HDStatisticsRelative<HDStatisticsAverageSampleDuration>::addSample(v95, (double *)&v101);
                int v48 = 1;
                unint64_t v47 = *((void *)&v102 + 1);
                uint64_t v96 = *((void *)&v102 + 1);
              }
              if (!*(unsigned char *)(a1 + 25)) {
                goto LABEL_91;
              }
              unint64_t v53 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_bundleIdentifierForSourceID(a1, v47);
              if (!v53) {
                goto LABEL_90;
              }
              uint64_t v54 = [v94 objectForKeyedSubscript:v53];
              uint64_t v55 = v54;
              if (v54)
              {
                if ([v54 longLongValue] != v47 && !*(unsigned char *)(a1 + 24))
                {
LABEL_89:

LABEL_90:
LABEL_91:
                  char v36 = 1;
LABEL_92:
                  char v64 = v98;
                  if (!v98) {
                    goto LABEL_115;
                  }
                  BOOL v65 = v48 != 0;
                  unint64_t v49 = *(void *)(a1 + 104);
                  unint64_t v66 = *(void *)(a1 + 112);
                  if (v49 < v66)
                  {
                    long long v67 = v100;
                    *(_OWORD *)unint64_t v49 = v99;
                    *(_OWORD *)(v49 + 16) = v67;
                    *(unsigned char *)(v49 + 32) = v64;
                    *(unsigned char *)(v49 + 33) = v41;
                    *(unsigned char *)(v49 + 40) = v46;
                    *(unsigned char *)(v49 + 41) = v45;
                    *(unsigned char *)(v49 + 42) = v65;
LABEL_95:
                    unint64_t v68 = v49 + 48;
LABEL_114:
                    *(void *)(a1 + 104) = v68;
LABEL_115:
                    v37 += 48;
                    if ((long long *)v37 == v7) {
                      goto LABEL_118;
                    }
                    continue;
                  }
                  unint64_t v69 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - (void)*v97) >> 4);
                  unint64_t v70 = v69 + 1;
                  if (v69 + 1 > 0x555555555555555) {
                    std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - (void)*v97) >> 4);
                  if (2 * v71 > v70) {
                    unint64_t v70 = 2 * v71;
                  }
                  if (v71 >= 0x2AAAAAAAAAAAAAALL) {
                    unint64_t v59 = 0x555555555555555;
                  }
                  else {
                    unint64_t v59 = v70;
                  }
                  if (v59) {
                    unint64_t v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v59);
                  }
                  else {
                    uint64_t v60 = 0;
                  }
                  unint64_t v72 = v59 + 48 * v69;
                  long long v73 = v100;
                  *(_OWORD *)unint64_t v72 = v99;
                  *(_OWORD *)(v72 + 16) = v73;
                  *(unsigned char *)(v72 + 32) = v64;
                  *(unsigned char *)(v72 + 33) = v41;
                  *(unsigned char *)(v72 + 40) = v46;
                  *(unsigned char *)(v72 + 41) = v45;
                  *(unsigned char *)(v72 + 42) = v65;
                  long long v75 = *(char **)(a1 + 96);
                  uint64_t v74 = *(char **)(a1 + 104);
                  unint64_t v76 = v72;
                  if (v74 != v75)
                  {
                    do
                    {
                      long long v77 = *((_OWORD *)v74 - 3);
                      long long v78 = *((_OWORD *)v74 - 2);
                      *(_OWORD *)(v76 - 21) = *(_OWORD *)(v74 - 21);
                      *(_OWORD *)(v76 - 48) = v77;
                      *(_OWORD *)(v76 - 32) = v78;
                      v76 -= 48;
                      v74 -= 48;
                    }
                    while (v74 != v75);
                    goto LABEL_111;
                  }
                  goto LABEL_112;
                }
              }
              else
              {
                double v61 = [NSNumber numberWithLongLong:v47];
                [v94 setObject:v61 forKeyedSubscript:v53];
              }
              unint64_t v62 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_canonicalSourceIDForSourceID(a1, v47);
              id v63 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_statisticsForSource(a1, v62);
              HDStatisticsRelative<HDStatisticsAverageSampleDuration>::addSample((uint64_t)v63, (double *)&v101);
              char v45 = 1;
              goto LABEL_89;
            }
            break;
          }
          unint64_t v49 = *(void *)(a1 + 104);
          unint64_t v50 = *(void *)(a1 + 112);
          if (v49 < v50)
          {
            long long v51 = *(_OWORD *)v37;
            long long v52 = *(_OWORD *)(v37 + 32);
            *(_OWORD *)(v49 + 16) = *(_OWORD *)(v37 + 16);
            *(_OWORD *)(v49 + 32) = v52;
            *(_OWORD *)unint64_t v49 = v51;
            goto LABEL_95;
          }
          unint64_t v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - (void)*v97) >> 4);
          unint64_t v57 = v56 + 1;
          if (v56 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v58 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - (void)*v97) >> 4);
          if (2 * v58 > v57) {
            unint64_t v57 = 2 * v58;
          }
          if (v58 >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v59 = 0x555555555555555;
          }
          else {
            unint64_t v59 = v57;
          }
          if (v59) {
            unint64_t v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v59);
          }
          else {
            uint64_t v60 = 0;
          }
          unint64_t v72 = v59 + 48 * v56;
          long long v79 = *(_OWORD *)v37;
          long long v80 = *(_OWORD *)(v37 + 32);
          *(_OWORD *)(v72 + 16) = *(_OWORD *)(v37 + 16);
          *(_OWORD *)(v72 + 32) = v80;
          *(_OWORD *)unint64_t v72 = v79;
          uint64_t v81 = *(char **)(a1 + 96);
          uint64_t v74 = *(char **)(a1 + 104);
          unint64_t v76 = v72;
          if (v74 != v81)
          {
            do
            {
              long long v82 = *((_OWORD *)v74 - 3);
              long long v83 = *((_OWORD *)v74 - 2);
              *(_OWORD *)(v76 - 21) = *(_OWORD *)(v74 - 21);
              *(_OWORD *)(v76 - 48) = v82;
              *(_OWORD *)(v76 - 32) = v83;
              v76 -= 48;
              v74 -= 48;
            }
            while (v74 != v81);
LABEL_111:
            uint64_t v74 = *v97;
          }
LABEL_112:
          unint64_t v68 = v72 + 48;
          *(void *)(a1 + 96) = v76;
          *(void *)(a1 + 104) = v72 + 48;
          *(void *)(a1 + 112) = v59 + 48 * v60;
          if (v74) {
            operator delete(v74);
          }
          goto LABEL_114;
        }
        __int16 v106 = 0;
        long long v104 = 0u;
        long long v105 = 0u;
        long long v9 = *(_OWORD *)(v6 + 16);
        long long v101 = *(_OWORD *)v6;
        long long v102 = v9;
        uint64_t v103 = *(void *)(v6 + 32);
        id v10 = *(double **)(a1 + 64);
        for (uint64_t j = *(double **)(a1 + 72); v10 != j; v10 += 2)
        {
          if (*((double *)&v101 + 1) < *v10) {
            break;
          }
          if (*((double *)&v101 + 1) < v10[1]) {
            goto LABEL_15;
          }
        }
        if ((_BYTE)v103)
        {
          HDStatisticsRelative<HDStatisticsAverageSampleDuration>::addSample(v95, (double *)&v101);
          if (*(unsigned char *)(a1 + 25))
          {
            unint64_t v12 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_canonicalSourceIDForSourceID(a1, *((unint64_t *)&v102 + 1));
            uint64_t v13 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_statisticsForSource(a1, v12);
            HDStatisticsRelative<HDStatisticsAverageSampleDuration>::addSample((uint64_t)v13, (double *)&v101);
          }
        }
LABEL_15:
        *(void *)(a1 + 104) = *(void *)(a1 + 96);
      }
      *(double *)(a1 + 56) = a2;
LABEL_127:
      double v88 = *(double *)(a1 + 56);
      if (v88 == v5)
      {
        int v89 = [MEMORY[0x1E4F28B00] currentHandler];
        long long v90 = [NSString stringWithUTF8String:"void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_mergeThroughTime(double) [Statistics = HDStatisticsRelative<HDStatisticsAverageSampleDuration>]"];
        [v89 handleFailureInFunction:v90 file:@"HDStatisticsBucket.hpp" lineNumber:234 description:@"Failed to make forward progress during statistics merge."];

        double v88 = *(double *)(a1 + 56);
      }
      double v5 = v88;
    }
    while (v88 < a2);
  }
}

void sub_1BD121CE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t HDStatisticsRelative<HDStatisticsAverageSampleDuration>::addSample(uint64_t result, double *a2)
{
  int v2 = 2 * (*a2 != -1.79769313e308);
  if (*a2 == 1.79769313e308) {
    int v2 = 1;
  }
  if (v2)
  {
    if (v2 == 1)
    {
      if (!*(_DWORD *)result)
      {
        uint64_t v5 = 1;
        *(_DWORD *)BOOL result = 1;
        *(void *)(result + 56) = 0;
        *(_OWORD *)(result + 8) = 0u;
        *(_WORD *)(result + 56) = *(_WORD *)(result + 96);
        long long v6 = *(_OWORD *)(result + 64);
        *(_OWORD *)(result + 40) = *(_OWORD *)(result + 80);
        *(_OWORD *)(result + 24) = v6;
        double v3 = a2[2] - a2[1];
LABEL_17:
        *(double *)(result + 8) = v3;
        goto LABEL_18;
      }
    }
    else if (v2 == 2)
    {
      if (*(_DWORD *)result == 2)
      {
        double v3 = a2[2] - a2[1];
        uint64_t v4 = *(void *)(result + 16);
        if (v4)
        {
          uint64_t v5 = v4 + 1;
          double v3 = *(double *)(result + 8) + (v3 - *(double *)(result + 8)) / (double)v5;
        }
        else
        {
          uint64_t v5 = 1;
        }
        goto LABEL_17;
      }
      *(_DWORD *)BOOL result = 2;
      *(void *)(result + 56) = 0;
      *(_OWORD *)(result + 8) = 0u;
      *(_WORD *)(result + 56) = *(_WORD *)(result + 96);
      long long v7 = *(_OWORD *)(result + 64);
      *(_OWORD *)(result + 40) = *(_OWORD *)(result + 80);
      *(_OWORD *)(result + 24) = v7;
LABEL_15:
      *(double *)(result + 8) = a2[2] - a2[1];
      uint64_t v5 = 1;
LABEL_18:
      *(void *)(result + 16) = v5;
    }
  }
  else if (!*(_DWORD *)result && !*(void *)(result + 16))
  {
    goto LABEL_15;
  }
  return result;
}

unint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    uint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((void *)(a1 + 312), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_bundleIdentifierForSourceID(a1, a2);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      id v10 = v6;
      long long v7 = (void *)(a1 + 352);
      unint64_t v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        uint64_t v11 = &v10;
        *((void *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        id v6 = v10;
      }
    }
  }
  return a2;
}

void sub_1BD121F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  uint64_t v4 = (id *)(a1 + 88);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    id v6 = (void *)(a1 + 392);
    long long v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
    if (v7)
    {
      id v8 = (id)v7[3];
    }
    else
    {
      id v9 = objc_loadWeakRetained(v4);
      id v8 = [v9 bundleIdentifierForSourceID:a2];

      if (v8)
      {
        id v10 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
        objc_storeStrong(v10 + 3, v8);
      }
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1BD122014(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v12 = a2 - 3;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 4);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v103 = *((void *)a2 - 3);
                uint64_t v104 = *(void *)(v13 + 24);
                if (v103 == v104) {
                  return;
                }
                long long v105 = *(char **)(*(void *)a3 + 288);
                __int16 v106 = *(char **)(*(void *)a3 + 296);
                uint64_t v107 = v105;
                uint64_t v108 = v105;
                if (v105 == v106) {
                  goto LABEL_171;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>((long long *)v13, (long long *)(v13 + 48), a2 - 3, a3);
                return;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, (uint64_t)(a2 - 3), a3);
                return;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, v13 + 144, (uint64_t)(a2 - 3), a3);
                return;
              default:
                JUMPOUT(0);
            }
            do
            {
              if (*(void *)v108 == v103) {
                goto LABEL_168;
              }
              v108 += 8;
            }
            while (v108 != v106);
            uint64_t v108 = *(char **)(*(void *)a3 + 296);
LABEL_168:
            while (*(void *)v107 != v104)
            {
              v107 += 8;
              if (v107 == v106)
              {
                uint64_t v107 = *(char **)(*(void *)a3 + 296);
                break;
              }
            }
LABEL_171:
            if (v108 - v105 < v107 - v105)
            {
              *(_OWORD *)v226 = *(_OWORD *)(v13 + 16);
              *(_OWORD *)&v226[16] = *(_OWORD *)(v13 + 32);
              long long v218 = *(_OWORD *)v13;
              long long v109 = *v12;
              long long v110 = *(a2 - 2);
              *(_OWORD *)(v13 + 27) = *(long long *)((char *)a2 - 21);
              *(_OWORD *)unint64_t v13 = v109;
              *(_OWORD *)(v13 + 16) = v110;
              *(long long *)((char *)a2 - 21) = *(_OWORD *)&v226[11];
              long long *v12 = v218;
              *(a2 - 2) = *(_OWORD *)v226;
            }
            return;
          }
          if (v14 <= 1151)
          {
            long long v111 = (long long *)(v13 + 48);
            BOOL v113 = (long long *)v13 == a2 || v111 == a2;
            if (a5)
            {
              if (!v113)
              {
                unint64_t v114 = v13;
                do
                {
                  unint64_t v115 = v114;
                  unint64_t v114 = (unint64_t)v111;
                  uint64_t v116 = *(void *)(v115 + 72);
                  uint64_t v117 = *(void *)(v115 + 24);
                  if (v116 != v117)
                  {
                    long long v118 = *(char **)(*(void *)a3 + 288);
                    long long v119 = *(char **)(*(void *)a3 + 296);
                    long long v120 = v118;
                    long long v121 = v118;
                    if (v118 != v119)
                    {
                      do
                      {
                        if (*(void *)v121 == v116) {
                          goto LABEL_196;
                        }
                        v121 += 8;
                      }
                      while (v121 != v119);
                      long long v121 = *(char **)(*(void *)a3 + 296);
LABEL_196:
                      while (*(void *)v120 != v117)
                      {
                        v120 += 8;
                        if (v120 == v119)
                        {
                          long long v120 = *(char **)(*(void *)a3 + 296);
                          break;
                        }
                      }
                    }
                    if (v121 - v118 < v120 - v118)
                    {
                      uint64_t v227 = *(void *)(v114 + 16);
                      long long v219 = *(_OWORD *)v114;
                      long long v236 = *(_OWORD *)(v115 + 80);
                      unint64_t v122 = v114;
                      while (1)
                      {
                        long long v123 = *(_OWORD *)(v115 + 16);
                        *(_OWORD *)unint64_t v122 = *(_OWORD *)v115;
                        *(_OWORD *)(v122 + 16) = v123;
                        *(_OWORD *)(v122 + 27) = *(_OWORD *)(v115 + 27);
                        if (v115 == v13) {
                          break;
                        }
                        unint64_t v122 = v115;
                        uint64_t v124 = *(void *)(v115 - 24);
                        if (v116 != v124)
                        {
                          uint64_t v125 = *(char **)(*(void *)a3 + 288);
                          uint64_t v126 = *(char **)(*(void *)a3 + 296);
                          uint64_t v127 = v125;
                          uint64_t v128 = v125;
                          if (v125 != v126)
                          {
                            do
                            {
                              if (*(void *)v128 == v116) {
                                goto LABEL_208;
                              }
                              v128 += 8;
                            }
                            while (v128 != v126);
                            uint64_t v128 = *(char **)(*(void *)a3 + 296);
LABEL_208:
                            while (*(void *)v127 != v124)
                            {
                              v127 += 8;
                              if (v127 == v126)
                              {
                                uint64_t v127 = *(char **)(*(void *)a3 + 296);
                                break;
                              }
                            }
                          }
                          unint64_t v115 = v122 - 48;
                          if (v128 - v125 < v127 - v125) {
                            continue;
                          }
                        }
                        goto LABEL_212;
                      }
                      unint64_t v122 = v13;
LABEL_212:
                      *(_OWORD *)unint64_t v122 = v219;
                      *(void *)(v122 + 16) = v227;
                      *(void *)(v122 + 24) = v116;
                      *(void *)(v122 + 32) = v236;
                      *(_DWORD *)(v122 + 39) = *(_DWORD *)((char *)&v236 + 7);
                    }
                  }
                  long long v111 = (long long *)(v114 + 48);
                }
                while ((long long *)(v114 + 48) != a2);
              }
            }
            else if (!v113)
            {
              do
              {
                unint64_t v201 = a1;
                a1 = (unint64_t)v111;
                uint64_t v202 = *(void *)(v201 + 72);
                uint64_t v203 = *(void *)(v201 + 24);
                if (v202 != v203)
                {
                  v204 = *(char **)(*(void *)a3 + 288);
                  v205 = *(char **)(*(void *)a3 + 296);
                  v206 = v204;
                  v207 = v204;
                  if (v204 != v205)
                  {
                    do
                    {
                      if (*(void *)v207 == v202) {
                        goto LABEL_312;
                      }
                      v207 += 8;
                    }
                    while (v207 != v205);
                    v207 = *(char **)(*(void *)a3 + 296);
LABEL_312:
                    while (*(void *)v206 != v203)
                    {
                      v206 += 8;
                      if (v206 == v205)
                      {
                        v206 = *(char **)(*(void *)a3 + 296);
                        break;
                      }
                    }
                  }
                  if (v207 - v204 < v206 - v204)
                  {
                    uint64_t v230 = *(void *)(a1 + 16);
                    long long v222 = *(_OWORD *)a1;
                    long long v239 = *(_OWORD *)(v201 + 80);
                    unint64_t v208 = a1;
                    do
                    {
                      v209 = (_OWORD *)v208;
                      unint64_t v208 = v201;
                      long long v210 = *(_OWORD *)(v201 + 16);
                      _OWORD *v209 = *(_OWORD *)v201;
                      v209[1] = v210;
                      *(_OWORD *)((char *)v209 + 27) = *(_OWORD *)(v201 + 27);
                      uint64_t v211 = *(void *)(v201 - 24);
                      if (v202 == v211) {
                        break;
                      }
                      v212 = *(char **)(*(void *)a3 + 288);
                      v213 = *(char **)(*(void *)a3 + 296);
                      v214 = v212;
                      v215 = v212;
                      if (v212 != v213)
                      {
                        do
                        {
                          if (*(void *)v215 == v202) {
                            goto LABEL_322;
                          }
                          v215 += 8;
                        }
                        while (v215 != v213);
                        v215 = *(char **)(*(void *)a3 + 296);
LABEL_322:
                        while (*(void *)v214 != v211)
                        {
                          v214 += 8;
                          if (v214 == v213)
                          {
                            v214 = *(char **)(*(void *)a3 + 296);
                            break;
                          }
                        }
                      }
                      unint64_t v201 = v208 - 48;
                    }
                    while (v215 - v212 < v214 - v212);
                    *(_OWORD *)unint64_t v208 = v222;
                    *(void *)(v208 + 16) = v230;
                    *(void *)(v208 + 24) = v202;
                    *(void *)(v208 + 32) = v239;
                    *(_DWORD *)(v208 + 39) = *(_DWORD *)((char *)&v239 + 7);
                  }
                }
                long long v111 = (long long *)(a1 + 48);
              }
              while ((long long *)(a1 + 48) != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((long long *)v13 != a2)
            {
              int64_t v129 = (v15 - 2) >> 1;
              int64_t v130 = v129;
              do
              {
                int64_t v131 = v130;
                if (v129 >= v130)
                {
                  uint64_t v132 = (2 * v130) | 1;
                  unint64_t v133 = v13 + 48 * v132;
                  if (2 * v131 + 2 < (uint64_t)v15)
                  {
                    uint64_t v134 = *(void *)(v133 + 24);
                    uint64_t v135 = *(void *)(v133 + 72);
                    if (v134 != v135)
                    {
                      v137 = *(char **)(*(void *)a3 + 288);
                      v136 = *(char **)(*(void *)a3 + 296);
                      v138 = v137;
                      v139 = v137;
                      if (v137 != v136)
                      {
                        do
                        {
                          if (*(void *)v139 == v134) {
                            goto LABEL_224;
                          }
                          v139 += 8;
                        }
                        while (v139 != v136);
                        v139 = *(char **)(*(void *)a3 + 296);
LABEL_224:
                        while (*(void *)v138 != v135)
                        {
                          v138 += 8;
                          if (v138 == v136)
                          {
                            v138 = *(char **)(*(void *)a3 + 296);
                            break;
                          }
                        }
                      }
                      v133 += 48 * (v139 - v137 < v138 - v137);
                      if (v139 - v137 < v138 - v137) {
                        uint64_t v132 = 2 * v131 + 2;
                      }
                    }
                  }
                  unint64_t v140 = v13 + 48 * v131;
                  uint64_t v141 = *(void *)(v133 + 24);
                  uint64_t v142 = *(void *)(v140 + 24);
                  if (v141 == v142) {
                    goto LABEL_238;
                  }
                  v144 = *(char **)(*(void *)a3 + 288);
                  v143 = *(char **)(*(void *)a3 + 296);
                  v145 = v144;
                  v146 = v144;
                  if (v144 != v143)
                  {
                    do
                    {
                      if (*(void *)v146 == v141) {
                        goto LABEL_234;
                      }
                      v146 += 8;
                    }
                    while (v146 != v143);
                    v146 = *(char **)(*(void *)a3 + 296);
LABEL_234:
                    while (*(void *)v145 != v142)
                    {
                      v145 += 8;
                      if (v145 == v143)
                      {
                        v145 = *(char **)(*(void *)a3 + 296);
                        break;
                      }
                    }
                  }
                  if (v146 - v144 >= v145 - v144)
                  {
LABEL_238:
                    uint64_t v228 = *(void *)(v140 + 16);
                    long long v220 = *(_OWORD *)v140;
                    long long v237 = *(_OWORD *)(v140 + 32);
                    long long v147 = *(_OWORD *)v133;
                    long long v148 = *(_OWORD *)(v133 + 16);
                    *(_OWORD *)(v140 + 27) = *(_OWORD *)(v133 + 27);
                    *(_OWORD *)unint64_t v140 = v147;
                    *(_OWORD *)(v140 + 16) = v148;
                    if (v129 >= v132)
                    {
                      while (1)
                      {
                        uint64_t v150 = 2 * v132;
                        uint64_t v132 = (2 * v132) | 1;
                        unint64_t v149 = v13 + 48 * v132;
                        uint64_t v151 = v150 + 2;
                        if (v151 < (uint64_t)v15)
                        {
                          uint64_t v152 = *(void *)(v149 + 24);
                          uint64_t v153 = *(void *)(v149 + 72);
                          if (v152 != v153)
                          {
                            v154 = *(char **)(*(void *)a3 + 288);
                            v155 = *(char **)(*(void *)a3 + 296);
                            v156 = v154;
                            v157 = v154;
                            if (v154 != v155)
                            {
                              do
                              {
                                if (*(void *)v157 == v152) {
                                  goto LABEL_246;
                                }
                                v157 += 8;
                              }
                              while (v157 != v155);
                              v157 = *(char **)(*(void *)a3 + 296);
LABEL_246:
                              while (*(void *)v156 != v153)
                              {
                                v156 += 8;
                                if (v156 == v155)
                                {
                                  v156 = *(char **)(*(void *)a3 + 296);
                                  break;
                                }
                              }
                            }
                            v149 += 48 * (v157 - v154 < v156 - v154);
                            if (v157 - v154 < v156 - v154) {
                              uint64_t v132 = v151;
                            }
                          }
                        }
                        uint64_t v158 = *(void *)(v149 + 24);
                        if (v158 != v142)
                        {
                          v160 = *(char **)(*(void *)a3 + 288);
                          v159 = *(char **)(*(void *)a3 + 296);
                          v161 = v160;
                          v162 = v160;
                          if (v160 != v159)
                          {
                            do
                            {
                              if (*(void *)v162 == v158) {
                                goto LABEL_256;
                              }
                              v162 += 8;
                            }
                            while (v162 != v159);
                            v162 = *(char **)(*(void *)a3 + 296);
LABEL_256:
                            while (*(void *)v161 != v142)
                            {
                              v161 += 8;
                              if (v161 == v159)
                              {
                                v161 = *(char **)(*(void *)a3 + 296);
                                break;
                              }
                            }
                          }
                          if (v162 - v160 < v161 - v160) {
                            break;
                          }
                        }
                        long long v163 = *(_OWORD *)v149;
                        long long v164 = *(_OWORD *)(v149 + 16);
                        *(_OWORD *)(v133 + 27) = *(_OWORD *)(v149 + 27);
                        *(_OWORD *)unint64_t v133 = v163;
                        *(_OWORD *)(v133 + 16) = v164;
                        unint64_t v133 = v149;
                        if (v129 < v132) {
                          goto LABEL_261;
                        }
                      }
                    }
                    unint64_t v149 = v133;
LABEL_261:
                    *(_OWORD *)unint64_t v149 = v220;
                    *(void *)(v149 + 16) = v228;
                    *(void *)(v149 + 24) = v142;
                    *(void *)(v149 + 32) = v237;
                    *(_DWORD *)(v149 + 39) = *(_DWORD *)((char *)&v237 + 7);
                  }
                }
                int64_t v130 = v131 - 1;
              }
              while (v131);
              int64_t v165 = v14 / 0x30uLL;
              do
              {
                uint64_t v166 = 0;
                *(_OWORD *)v229 = *(_OWORD *)(v13 + 16);
                *(_OWORD *)&v229[16] = *(_OWORD *)(v13 + 32);
                long long v221 = *(_OWORD *)v13;
                uint64_t v167 = v165 - 2;
                if (v165 < 2) {
                  uint64_t v167 = v165 - 1;
                }
                uint64_t v168 = v167 >> 1;
                unint64_t v169 = v13;
                do
                {
                  v170 = (_OWORD *)v169;
                  v169 += 48 * v166 + 48;
                  uint64_t v171 = 2 * v166;
                  uint64_t v166 = (2 * v166) | 1;
                  uint64_t v172 = v171 + 2;
                  if (v171 + 2 < v165)
                  {
                    uint64_t v173 = *(void *)(v169 + 24);
                    uint64_t v174 = *(void *)(v169 + 72);
                    if (v173 != v174)
                    {
                      v176 = *(char **)(*(void *)a3 + 288);
                      v175 = *(char **)(*(void *)a3 + 296);
                      v177 = v176;
                      v178 = v176;
                      if (v176 != v175)
                      {
                        do
                        {
                          if (*(void *)v178 == v173) {
                            goto LABEL_273;
                          }
                          v178 += 8;
                        }
                        while (v178 != v175);
                        v178 = *(char **)(*(void *)a3 + 296);
LABEL_273:
                        while (*(void *)v177 != v174)
                        {
                          v177 += 8;
                          if (v177 == v175)
                          {
                            v177 = *(char **)(*(void *)a3 + 296);
                            break;
                          }
                        }
                      }
                      v169 += 48 * (v178 - v176 < v177 - v176);
                      if (v178 - v176 < v177 - v176) {
                        uint64_t v166 = v172;
                      }
                    }
                  }
                  long long v179 = *(_OWORD *)v169;
                  long long v180 = *(_OWORD *)(v169 + 16);
                  *(_OWORD *)((char *)v170 + 27) = *(_OWORD *)(v169 + 27);
                  _OWORD *v170 = v179;
                  v170[1] = v180;
                }
                while (v166 <= v168);
                a2 -= 3;
                if ((long long *)v169 == a2)
                {
                  *(_OWORD *)(v169 + 27) = *(_OWORD *)&v229[11];
                  *(_OWORD *)unint64_t v169 = v221;
                  *(_OWORD *)(v169 + 16) = *(_OWORD *)v229;
                }
                else
                {
                  long long v181 = *a2;
                  long long v182 = a2[1];
                  *(_OWORD *)(v169 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v169 = v181;
                  *(_OWORD *)(v169 + 16) = v182;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v229[11];
                  *a2 = v221;
                  a2[1] = *(_OWORD *)v229;
                  uint64_t v183 = v169 - v13 + 48;
                  if (v183 >= 49)
                  {
                    unint64_t v184 = (v183 / 0x30uLL - 2) >> 1;
                    unint64_t v185 = v13 + 48 * v184;
                    uint64_t v186 = *(void *)(v185 + 24);
                    uint64_t v187 = *(void *)(v169 + 24);
                    if (v186 != v187)
                    {
                      v189 = *(char **)(*(void *)a3 + 288);
                      v188 = *(char **)(*(void *)a3 + 296);
                      v190 = v189;
                      v191 = v189;
                      if (v189 != v188)
                      {
                        do
                        {
                          if (*(void *)v191 == v186) {
                            goto LABEL_286;
                          }
                          v191 += 8;
                        }
                        while (v191 != v188);
                        v191 = *(char **)(*(void *)a3 + 296);
LABEL_286:
                        while (*(void *)v190 != v187)
                        {
                          v190 += 8;
                          if (v190 == v188)
                          {
                            v190 = *(char **)(*(void *)a3 + 296);
                            break;
                          }
                        }
                      }
                      if (v191 - v189 < v190 - v189)
                      {
                        uint64_t v242 = *(void *)(v169 + 16);
                        long long v238 = *(_OWORD *)v169;
                        long long v233 = *(_OWORD *)(v169 + 32);
                        do
                        {
                          v192 = (_OWORD *)v169;
                          unint64_t v169 = v185;
                          long long v193 = *(_OWORD *)v185;
                          long long v194 = *(_OWORD *)(v185 + 16);
                          *(_OWORD *)((char *)v192 + 27) = *(_OWORD *)(v185 + 27);
                          _OWORD *v192 = v193;
                          v192[1] = v194;
                          if (!v184) {
                            break;
                          }
                          unint64_t v184 = (v184 - 1) >> 1;
                          unint64_t v185 = v13 + 48 * v184;
                          uint64_t v195 = *(void *)(v185 + 24);
                          if (v195 == v187) {
                            break;
                          }
                          v197 = *(char **)(*(void *)a3 + 288);
                          v196 = *(char **)(*(void *)a3 + 296);
                          v198 = v197;
                          v199 = v197;
                          if (v197 != v196)
                          {
                            do
                            {
                              if (*(void *)v199 == v195) {
                                goto LABEL_297;
                              }
                              v199 += 8;
                            }
                            while (v199 != v196);
                            v199 = *(char **)(*(void *)a3 + 296);
LABEL_297:
                            while (*(void *)v198 != v187)
                            {
                              v198 += 8;
                              if (v198 == v196)
                              {
                                v198 = *(char **)(*(void *)a3 + 296);
                                break;
                              }
                            }
                          }
                        }
                        while (v199 - v197 < v198 - v197);
                        *(_OWORD *)unint64_t v169 = v238;
                        *(void *)(v169 + 16) = v242;
                        *(void *)(v169 + 24) = v187;
                        *(void *)(v169 + 32) = v233;
                        *(_DWORD *)(v169 + 39) = *(_DWORD *)((char *)&v233 + 7);
                      }
                    }
                  }
                }
              }
              while (v165-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          uint64_t v17 = (long long *)(v13 + 48 * (v15 >> 1));
          if ((unint64_t)v14 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v15 >> 1)), a2 - 3, a3);
            uint64_t v18 = 3 * v16;
            double v19 = (long long *)(a1 + 48 * v16 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>((long long *)(a1 + 48), v19, a2 - 6, a3);
            id v20 = (long long *)(a1 + 48 + 16 * v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>((long long *)(a1 + 96), v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>(v19, v17, v20, a3);
            *(_OWORD *)v223 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v223[16] = *(_OWORD *)(a1 + 32);
            long long v216 = *(_OWORD *)a1;
            long long v21 = *(long long *)((char *)v17 + 27);
            long long v22 = v17[1];
            *(_OWORD *)a1 = *v17;
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(a1 + 27) = v21;
            *(long long *)((char *)v17 + 27) = *(_OWORD *)&v223[11];
            *uint64_t v17 = v216;
            v17[1] = *(_OWORD *)v223;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>((long long *)(a1 + 48 * (v15 >> 1)), (long long *)a1, a2 - 3, a3);
          }
          --a4;
          if (a5)
          {
            uint64_t v23 = *(void *)(a1 + 24);
            uint64_t v24 = *(void *)a3;
            break;
          }
          uint64_t v25 = *(void *)(a1 - 24);
          uint64_t v23 = *(void *)(a1 + 24);
          if (v25 != v23)
          {
            uint64_t v24 = *(void *)a3;
            long long v26 = *(char **)(*(void *)a3 + 288);
            uint64_t v27 = *(char **)(*(void *)a3 + 296);
            long long v28 = v26;
            long long v29 = v26;
            if (v26 != v27)
            {
              do
              {
                if (*(void *)v29 == v25) {
                  goto LABEL_16;
                }
                v29 += 8;
              }
              while (v29 != v27);
              long long v29 = *(char **)(*(void *)a3 + 296);
LABEL_16:
              while (*(void *)v28 != v23)
              {
                v28 += 8;
                if (v28 == v27)
                {
                  long long v28 = *(char **)(*(void *)a3 + 296);
                  break;
                }
              }
            }
            if (v29 - v26 < v28 - v26) {
              break;
            }
          }
          uint64_t v241 = *(void *)(a1 + 16);
          long long v232 = *(_OWORD *)(a1 + 32);
          long long v235 = *(_OWORD *)a1;
          uint64_t v67 = *((void *)a2 - 3);
          if (v23 == v67) {
            goto LABEL_107;
          }
          unint64_t v68 = *(char **)(*(void *)a3 + 288);
          unint64_t v69 = *(char **)(*(void *)a3 + 296);
          if (v68 == v69)
          {
            unint64_t v71 = *(char **)(*(void *)a3 + 288);
            unint64_t v70 = v71;
          }
          else
          {
            unint64_t v70 = *(char **)(*(void *)a3 + 288);
            while (*(void *)v70 != v23)
            {
              v70 += 8;
              if (v70 == v69)
              {
                unint64_t v70 = *(char **)(*(void *)a3 + 296);
                break;
              }
            }
            unint64_t v71 = *(char **)(*(void *)a3 + 288);
            while (*(void *)v71 != v67)
            {
              v71 += 8;
              if (v71 == v69)
              {
                unint64_t v71 = *(char **)(*(void *)a3 + 296);
                break;
              }
            }
          }
          if (v70 - v68 >= v71 - v68)
          {
LABEL_107:
            unint64_t v13 = a1 + 48;
            if (a1 + 48 < (unint64_t)a2)
            {
              uint64_t v75 = *(void *)a3;
              unint64_t v76 = a1;
              do
              {
                uint64_t v77 = *(void *)(v76 + 72);
                unint64_t v76 = v13;
                if (v23 != v77)
                {
                  long long v78 = *(char **)(v75 + 288);
                  long long v79 = *(char **)(v75 + 296);
                  long long v80 = v78;
                  uint64_t v81 = v78;
                  if (v78 != v79)
                  {
                    do
                    {
                      if (*(void *)v81 == v23) {
                        goto LABEL_114;
                      }
                      v81 += 8;
                    }
                    while (v81 != v79);
                    uint64_t v81 = *(char **)(v75 + 296);
LABEL_114:
                    while (*(void *)v80 != v77)
                    {
                      v80 += 8;
                      if (v80 == v79)
                      {
                        long long v80 = *(char **)(v75 + 296);
                        break;
                      }
                    }
                  }
                  if (v81 - v78 < v80 - v78) {
                    break;
                  }
                }
                v13 += 48;
              }
              while (v76 + 48 < (unint64_t)a2);
            }
          }
          else
          {
            unint64_t v13 = a1;
            do
            {
              do
              {
                uint64_t v72 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v72);
              if (v68 == v69)
              {
                uint64_t v74 = *(char **)(*(void *)a3 + 288);
                long long v73 = v74;
              }
              else
              {
                long long v73 = *(char **)(*(void *)a3 + 288);
                while (*(void *)v73 != v23)
                {
                  v73 += 8;
                  if (v73 == v69)
                  {
                    long long v73 = *(char **)(*(void *)a3 + 296);
                    break;
                  }
                }
                uint64_t v74 = *(char **)(*(void *)a3 + 288);
                while (*(void *)v74 != v72)
                {
                  v74 += 8;
                  if (v74 == v69)
                  {
                    uint64_t v74 = *(char **)(*(void *)a3 + 296);
                    break;
                  }
                }
              }
            }
            while (v73 - v68 >= v74 - v68);
          }
          long long v82 = a2;
          if (v13 < (unint64_t)a2)
          {
            uint64_t v83 = *(void *)a3;
            long long v82 = a2;
            do
            {
              uint64_t v84 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v84) {
                break;
              }
              uint64_t v85 = *(char **)(v83 + 288);
              int v86 = *(char **)(v83 + 296);
              BOOL v87 = v85;
              double v88 = v85;
              if (v85 != v86)
              {
                do
                {
                  if (*(void *)v88 == v23) {
                    goto LABEL_126;
                  }
                  v88 += 8;
                }
                while (v88 != v86);
                double v88 = *(char **)(v83 + 296);
LABEL_126:
                while (*(void *)v87 != v84)
                {
                  v87 += 8;
                  if (v87 == v86)
                  {
                    BOOL v87 = *(char **)(v83 + 296);
                    break;
                  }
                }
              }
            }
            while (v88 - v85 < v87 - v85);
          }
          while (v13 < (unint64_t)v82)
          {
            *(_OWORD *)v225 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v225[16] = *(_OWORD *)(v13 + 32);
            long long v217 = *(_OWORD *)v13;
            long long v89 = *v82;
            long long v90 = v82[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v82 + 27);
            *(_OWORD *)unint64_t v13 = v89;
            *(_OWORD *)(v13 + 16) = v90;
            *(long long *)((char *)v82 + 27) = *(_OWORD *)&v225[11];
            *long long v82 = v217;
            v82[1] = *(_OWORD *)v225;
            uint64_t v91 = *(void *)a3;
            do
            {
              do
              {
                uint64_t v92 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v92);
              id v93 = *(char **)(v91 + 288);
              id v94 = *(char **)(v91 + 296);
              if (v93 == v94)
              {
                uint64_t v96 = *(char **)(v91 + 288);
                uint64_t v95 = v96;
              }
              else
              {
                uint64_t v95 = *(char **)(v91 + 288);
                while (*(void *)v95 != v23)
                {
                  v95 += 8;
                  if (v95 == v94)
                  {
                    uint64_t v95 = *(char **)(v91 + 296);
                    break;
                  }
                }
                uint64_t v96 = *(char **)(v91 + 288);
                while (*(void *)v96 != v92)
                {
                  v96 += 8;
                  if (v96 == v94)
                  {
                    uint64_t v96 = *(char **)(v91 + 296);
                    break;
                  }
                }
              }
            }
            while (v95 - v93 >= v96 - v93);
            do
            {
              uint64_t v97 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v97) {
                break;
              }
              if (v93 == v94)
              {
                long long v99 = v93;
                char v98 = v93;
              }
              else
              {
                char v98 = v93;
                while (*(void *)v98 != v23)
                {
                  v98 += 8;
                  if (v98 == v94)
                  {
                    char v98 = v94;
                    break;
                  }
                }
                long long v99 = v93;
                while (*(void *)v99 != v97)
                {
                  v99 += 8;
                  if (v99 == v94)
                  {
                    long long v99 = v94;
                    break;
                  }
                }
              }
            }
            while (v98 - v93 < v99 - v93);
          }
          long long v100 = (long long *)(v13 - 48);
          BOOL v5 = v13 - 48 >= a1;
          BOOL v6 = v13 - 48 == a1;
          if (v13 - 48 != a1)
          {
            long long v101 = *v100;
            long long v102 = *(_OWORD *)(v13 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
            *(_OWORD *)a1 = v101;
            *(_OWORD *)(a1 + 16) = v102;
          }
          a5 = 0;
          *long long v100 = v235;
          *(void *)(v13 - 32) = v241;
          *(void *)(v13 - 24) = v23;
          *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v232 + 7);
          *(void *)(v13 - 16) = v232;
        }
        uint64_t v240 = *(void *)(a1 + 16);
        long long v231 = *(_OWORD *)(a1 + 32);
        long long v234 = *(_OWORD *)a1;
        unint64_t v30 = a1;
        do
        {
          unint64_t v31 = v30;
          v30 += 48;
          uint64_t v32 = *(void *)(v31 + 72);
          if (v32 == v23) {
            break;
          }
          long long v33 = *(char **)(v24 + 288);
          unint64_t v34 = *(char **)(v24 + 296);
          uint64_t v35 = v33;
          char v36 = v33;
          if (v33 != v34)
          {
            do
            {
              if (*(void *)v36 == v32) {
                goto LABEL_26;
              }
              v36 += 8;
            }
            while (v36 != v34);
            char v36 = *(char **)(v24 + 296);
LABEL_26:
            while (*(void *)v35 != v23)
            {
              v35 += 8;
              if (v35 == v34)
              {
                uint64_t v35 = *(char **)(v24 + 296);
                break;
              }
            }
          }
        }
        while (v36 - v33 < v35 - v33);
        unint64_t v37 = a2;
        if (v31 == a1)
        {
          unint64_t v37 = a2;
          if (v30 < (unint64_t)a2)
          {
            unint64_t v37 = a2;
            do
            {
              uint64_t v43 = *((void *)v37 - 3);
              v37 -= 3;
              if (v43 != v23)
              {
                id v44 = *(char **)(v24 + 288);
                char v45 = *(char **)(v24 + 296);
                char v46 = v44;
                unint64_t v47 = v44;
                if (v44 != v45)
                {
                  do
                  {
                    if (*(void *)v47 == v43) {
                      goto LABEL_48;
                    }
                    v47 += 8;
                  }
                  while (v47 != v45);
                  unint64_t v47 = *(char **)(v24 + 296);
LABEL_48:
                  while (*(void *)v46 != v23)
                  {
                    v46 += 8;
                    if (v46 == v45)
                    {
                      char v46 = *(char **)(v24 + 296);
                      break;
                    }
                  }
                }
                if (v47 - v44 < v46 - v44) {
                  break;
                }
              }
            }
            while (v30 < (unint64_t)v37);
          }
        }
        else
        {
          do
          {
            do
            {
              uint64_t v38 = *((void *)v37 - 3);
              v37 -= 3;
            }
            while (v38 == v23);
            double v39 = *(char **)(v24 + 288);
            BOOL v40 = *(char **)(v24 + 296);
            char v41 = v39;
            unint64_t v42 = v39;
            if (v39 != v40)
            {
              do
              {
                if (*(void *)v42 == v38) {
                  goto LABEL_36;
                }
                v42 += 8;
              }
              while (v42 != v40);
              unint64_t v42 = *(char **)(v24 + 296);
LABEL_36:
              while (*(void *)v41 != v23)
              {
                v41 += 8;
                if (v41 == v40)
                {
                  char v41 = *(char **)(v24 + 296);
                  break;
                }
              }
            }
          }
          while (v42 - v39 >= v41 - v39);
        }
        unint64_t v13 = v30;
        if (v30 < (unint64_t)v37)
        {
          int v48 = v37;
          do
          {
            *(_OWORD *)v224 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v224[16] = *(_OWORD *)(v13 + 32);
            long long v49 = *(_OWORD *)v13;
            long long v51 = *v48;
            long long v50 = v48[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v48 + 27);
            *(_OWORD *)unint64_t v13 = v51;
            *(_OWORD *)(v13 + 16) = v50;
            *(long long *)((char *)v48 + 27) = *(_OWORD *)&v224[11];
            *int v48 = v49;
            v48[1] = *(_OWORD *)v224;
            uint64_t v52 = *(void *)a3;
            do
            {
              uint64_t v53 = *(void *)(v13 + 72);
              v13 += 48;
              if (v53 == v23) {
                break;
              }
              uint64_t v54 = *(char **)(v52 + 288);
              uint64_t v55 = *(char **)(v52 + 296);
              unint64_t v56 = v54;
              unint64_t v57 = v54;
              if (v54 != v55)
              {
                do
                {
                  if (*(void *)v57 == v53) {
                    goto LABEL_61;
                  }
                  v57 += 8;
                }
                while (v57 != v55);
                unint64_t v57 = *(char **)(v52 + 296);
LABEL_61:
                while (*(void *)v56 != v23)
                {
                  v56 += 8;
                  if (v56 == v55)
                  {
                    unint64_t v56 = *(char **)(v52 + 296);
                    break;
                  }
                }
              }
            }
            while (v57 - v54 < v56 - v54);
            do
            {
              do
              {
                uint64_t v58 = *((void *)v48 - 3);
                v48 -= 3;
              }
              while (v58 == v23);
              unint64_t v59 = *(char **)(v52 + 288);
              uint64_t v60 = *(char **)(v52 + 296);
              double v61 = v59;
              unint64_t v62 = v59;
              if (v59 != v60)
              {
                do
                {
                  if (*(void *)v62 == v58) {
                    goto LABEL_70;
                  }
                  v62 += 8;
                }
                while (v62 != v60);
                unint64_t v62 = *(char **)(v52 + 296);
LABEL_70:
                while (*(void *)v61 != v23)
                {
                  v61 += 8;
                  if (v61 == v60)
                  {
                    double v61 = *(char **)(v52 + 296);
                    break;
                  }
                }
              }
            }
            while (v62 - v59 >= v61 - v59);
          }
          while (v13 < (unint64_t)v48);
        }
        id v63 = (long long *)(v13 - 48);
        if (v13 - 48 != a1)
        {
          long long v64 = *v63;
          long long v65 = *(_OWORD *)(v13 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
          *(_OWORD *)a1 = v64;
          *(_OWORD *)(a1 + 16) = v65;
        }
        *id v63 = v234;
        *(void *)(v13 - 32) = v240;
        *(void *)(v13 - 24) = v23;
        *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v231 + 7);
        *(void *)(v13 - 16) = v231;
        if (v30 >= (unint64_t)v37) {
          break;
        }
LABEL_80:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_SampleRemainder*,false>(a1, v13 - 48, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_SampleRemainder*>(a1, v13 - 48, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_SampleRemainder*>(v13, (uint64_t)a2, a3))
      {
        break;
      }
      if (!v66) {
        goto LABEL_80;
      }
    }
    a2 = (long long *)(v13 - 48);
    if (!v66) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 - 24);
      uint64_t v9 = *(void *)(a1 + 24);
      if (v8 == v9) {
        return result;
      }
      id v10 = *(char **)(*(void *)a3 + 288);
      uint64_t v11 = *(char **)(*(void *)a3 + 296);
      unint64_t v12 = v10;
      unint64_t v13 = v10;
      if (v10 == v11) {
        goto LABEL_10;
      }
      do
      {
        if (*(void *)v13 == v8) {
          goto LABEL_7;
        }
        v13 += 8;
      }
      while (v13 != v11);
      unint64_t v13 = *(char **)(*(void *)a3 + 296);
      do
      {
LABEL_7:
        if (*(void *)v12 == v9) {
          goto LABEL_10;
        }
        v12 += 8;
      }
      while (v12 != v11);
      unint64_t v12 = *(char **)(*(void *)a3 + 296);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        uint64_t v14 = (long long *)(a2 - 48);
        long long v15 = *(_OWORD *)a1;
        *(_OWORD *)uint64_t v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        long long v16 = *(_OWORD *)(a2 - 21);
        long long v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *uint64_t v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(long long *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), a3);
      uint64_t v19 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      int v20 = 0;
      break;
  }
  while (1)
  {
    uint64_t v21 = *(void *)(v19 + 24);
    uint64_t v22 = *(void *)(v18 + 24);
    if (v21 != v22)
    {
      uint64_t v23 = *(char **)(*(void *)a3 + 288);
      uint64_t v24 = *(char **)(*(void *)a3 + 296);
      uint64_t v25 = v23;
      long long v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(void *)v26 == v21) {
            goto LABEL_19;
          }
          v26 += 8;
        }
        while (v26 != v24);
        long long v26 = *(char **)(*(void *)a3 + 296);
LABEL_19:
        while (*(void *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            uint64_t v25 = *(char **)(*(void *)a3 + 296);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        long long v34 = *(_OWORD *)v19;
        uint64_t v36 = *(void *)(v19 + 16);
        long long v37 = *(_OWORD *)(v19 + 32);
        uint64_t v27 = v19;
        while (1)
        {
          long long v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1) {
            break;
          }
          uint64_t v27 = v18;
          uint64_t v29 = *(void *)(v18 - 24);
          if (v21 != v29)
          {
            unint64_t v30 = *(char **)(*(void *)a3 + 288);
            unint64_t v31 = *(char **)(*(void *)a3 + 296);
            uint64_t v32 = v30;
            long long v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(void *)v33 == v21) {
                  goto LABEL_30;
                }
                v33 += 8;
              }
              while (v33 != v31);
              long long v33 = *(char **)(*(void *)a3 + 296);
LABEL_30:
              while (*(void *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  uint64_t v32 = *(char **)(*(void *)a3 + 296);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30) {
              continue;
            }
          }
          goto LABEL_36;
        }
        uint64_t v27 = a1;
LABEL_36:
        *(_OWORD *)uint64_t v27 = v34;
        *(void *)(v27 + 16) = v36;
        *(void *)(v27 + 24) = v21;
        *(void *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8) {
          return v19 + 48 == a2;
        }
      }
    }
    uint64_t v18 = v19;
    v19 += 48;
    if (v19 == a2) {
      return 1;
    }
  }
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>> const&)::{lambda(HDStatisticsRelative<HDStatisticsAverageSampleDuration> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>> const&)::{lambda(HDStatisticsRelative<HDStatisticsAverageSampleDuration> const&)#1}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsRelative<HDStatisticsAverageSampleDuration> const&)>::~__func()
{
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>> const&)::{lambda(HDStatisticsRelative<HDStatisticsAverageSampleDuration> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>> const&)::{lambda(HDStatisticsRelative<HDStatisticsAverageSampleDuration> const&)#1}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsRelative<HDStatisticsAverageSampleDuration> const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F1725490;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>> const&)::{lambda(HDStatisticsRelative<HDStatisticsAverageSampleDuration> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>> const&)::{lambda(HDStatisticsRelative<HDStatisticsAverageSampleDuration> const&)#1}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsRelative<HDStatisticsAverageSampleDuration> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1725490;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>> const&)::{lambda(HDStatisticsRelative<HDStatisticsAverageSampleDuration> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>> const&)::{lambda(HDStatisticsRelative<HDStatisticsAverageSampleDuration> const&)#1}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsRelative<HDStatisticsAverageSampleDuration> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>> const&)::{lambda(HDStatisticsRelative<HDStatisticsAverageSampleDuration> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>> const&)::{lambda(HDStatisticsRelative<HDStatisticsAverageSampleDuration> const&)#1}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsRelative<HDStatisticsAverageSampleDuration> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>> const&)::{lambda(HDStatisticsRelative<HDStatisticsAverageSampleDuration> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>> const&)::{lambda(HDStatisticsRelative<HDStatisticsAverageSampleDuration> const&)#1}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsRelative<HDStatisticsAverageSampleDuration> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsAverageSampleDuration const& ()(HDStatisticsRelative<HDStatisticsAverageSampleDuration> const&)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 584))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a4, 3, @"Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date");
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_configureForStartTime(a1);
  }
  double v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(void *)(a1 + 40) && a3) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_advanceToTime(a1, v8);
    }
    HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    uint64_t v9 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    uint64_t v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v9, a4);
  }
  return v10;
}

void sub_1BD1238DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_advanceToTime(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 128) <= a2)
  {
    uint64_t v4 = a1 + 112;
    uint64_t v5 = a1 + 120;
    do
    {
      uint64_t v6 = *(void *)(a1 + 560);
      uint64_t v7 = *(void *)(a1 + 552);
      if (v6 == v7)
      {
        uint64_t v22 = 0;
        long long v15 = *(void **)(a1 + 40);
        long long v16 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a2];
        double v8 = [v15 dateIntervalContainingDate:v16 index:&v22];

        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v17 = v22;
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v19 = v18;
        int v20 = [v8 endDate];
        [v20 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::resetToBucket(v4, v17, v19, v21);
      }
      else
      {
        double v8 = [*(id *)(a1 + 40) dateIntervalAtIndex:*(void *)(a1 + 112) + 1];
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v12 = v11;
        unint64_t v13 = [v8 endDate];
        [v13 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::advanceBucket(v4, v12, v14);
      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_didChangeBucket(a1, v9);
      if (v6 != v7) {
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_notifyForCurrentBucket(a1);
      }
    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1BD123AE8(_Unwind_Exception *exception_object)
{
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = (double *)(a1 + 8);
  uint64_t v6 = *(uint64_t **)a2;
  double v7 = *(double *)(a2 + 8);
  double v8 = *(uint64_t **)(a2 + 16);
  uint64_t v9 = *(uint64_t **)(a2 + 24);
  char v63 = *(unsigned char *)(a2 + 32);
  char v10 = v63;
  char v11 = *(unsigned char *)(a2 + 33);
  char v67 = 0;
  if (v63 && v7 >= *v5)
  {
    double v14 = &v63;
    char v12 = v11;
    char v67 = v63;
    long long v15 = v6;
    double v16 = v7;
    double v17 = *(double *)&v8;
    unint64_t v13 = (unint64_t)v9;
  }
  else
  {
    char v12 = 0;
    unint64_t v13 = 0;
    double v14 = &v67;
    long long v15 = 0;
    double v16 = 0.0;
    double v17 = 0.0;
  }
  *double v14 = 0;
  char v66 = 0;
  if (v67 && ((double v18 = *(double *)(a1 + 16), *(_DWORD *)(a1 + 36)) ? (v19 = v16 < v18) : (v19 = v16 <= v18), !v19))
  {
    double v21 = &v67;
    char v61 = v12;
    char v66 = v67;
    unint64_t v20 = v13;
    double v62 = v17;
    double v22 = v16;
    uint64_t v23 = v15;
  }
  else
  {
    double v62 = 0.0;
    char v61 = 0;
    unint64_t v20 = 0;
    double v21 = &v66;
    double v22 = 0.0;
    uint64_t v23 = 0;
  }
  *double v21 = 0;
  char v24 = v67;
  if (v67)
  {
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 256, v13, v13);
    uint64_t v25 = *(char **)(a1 + 112);
    if (v25 == *(char **)(a1 + 104) && *(uint64_t *)(a1 + 144) <= 0)
    {
      double v28 = *(double *)(a1 + 8);
      double v29 = *(double *)(a1 + 16);
      if (v16 >= v28) {
        double v28 = v16;
      }
      if (v29 >= v17) {
        double v29 = v17;
      }
      *(double *)(a1 + 48) = v28;
      *(double *)(a1 + 56) = v29;
    }
    else
    {
      if (v16 < *(double *)(a1 + 48))
      {
        double v26 = *(double *)(a1 + 8);
        if (v16 >= v26) {
          double v26 = v16;
        }
        *(double *)(a1 + 48) = v26;
      }
      if (v17 > *(double *)(a1 + 56))
      {
        double v27 = *(double *)(a1 + 16);
        if (v27 >= v17) {
          double v27 = v17;
        }
        *(double *)(a1 + 56) = v27;
      }
    }
    if (*(unsigned char *)(a1 + 32))
    {
      double v30 = *(double *)(a1 + 64);
      if (v16 < v30) {
        double v30 = v16;
      }
      *(double *)(a1 + 64) = v30;
    }
    if (a3 && v16 < *(double *)(a1 + 16))
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_mergeThroughTime((uint64_t)v5, v16);
      uint64_t v25 = *(char **)(a1 + 112);
    }
    unint64_t v31 = *(void *)(a1 + 120);
    if ((unint64_t)v25 >= v31)
    {
      unint64_t v33 = 0x555555555555555;
      long long v34 = *(char **)(a1 + 104);
      unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v34) >> 4);
      unint64_t v36 = v35 + 1;
      if (v35 + 1 > 0x555555555555555) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - (void)v34) >> 4);
      if (2 * v37 > v36) {
        unint64_t v36 = 2 * v37;
      }
      if (v37 < 0x2AAAAAAAAAAAAAALL) {
        unint64_t v33 = v36;
      }
      if (v33)
      {
        unint64_t v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v33);
        long long v34 = *(char **)(a1 + 104);
        uint64_t v25 = *(char **)(a1 + 112);
      }
      else
      {
        uint64_t v38 = 0;
      }
      unint64_t v39 = v33 + 48 * v35;
      *(void *)unint64_t v39 = v15;
      *(double *)(v39 + 8) = v16;
      *(double *)(v39 + 16) = v17;
      *(void *)(v39 + 24) = v13;
      unint64_t v40 = v33 + 48 * v38;
      *(unsigned char *)(v39 + 32) = v24;
      *(unsigned char *)(v39 + 33) = v12;
      *(_WORD *)(v39 + 40) = 0;
      *(unsigned char *)(v39 + 42) = 0;
      uint64_t v32 = (void *)(v39 + 48);
      if (v25 != v34)
      {
        do
        {
          long long v41 = *((_OWORD *)v25 - 3);
          long long v42 = *((_OWORD *)v25 - 2);
          *(_OWORD *)(v39 - 21) = *(_OWORD *)(v25 - 21);
          *(_OWORD *)(v39 - 48) = v41;
          *(_OWORD *)(v39 - 32) = v42;
          v39 -= 48;
          v25 -= 48;
        }
        while (v25 != v34);
        long long v34 = *(char **)(a1 + 104);
      }
      *(void *)(a1 + 104) = v39;
      *(void *)(a1 + 112) = v32;
      *(void *)(a1 + 120) = v40;
      if (v34) {
        operator delete(v34);
      }
    }
    else
    {
      *(void *)uint64_t v25 = v15;
      *((double *)v25 + 1) = v16;
      *((double *)v25 + 2) = v17;
      *((void *)v25 + 3) = v13;
      v25[32] = v24;
      v25[33] = v12;
      *((_WORD *)v25 + 20) = 0;
      uint64_t v32 = v25 + 48;
      v25[42] = 0;
    }
    *(void *)(a1 + 112) = v32;
    if (!*(unsigned char *)(a1 + 224) || *(double *)(a1 + 200) <= v7)
    {
      *(void *)(a1 + 192) = v6;
      *(double *)(a1 + 200) = v7;
      *(double *)(a1 + 208) = *(double *)&v8;
      *(void *)(a1 + 216) = v9;
      *(unsigned char *)(a1 + 224) = v10;
      *(unsigned char *)(a1 + 225) = v11;
      if (!*(unsigned char *)(a1 + 184) || *(double *)(a1 + 160) <= v7)
      {
        *(void *)(a1 + 152) = v6;
        *(double *)(a1 + 160) = v7;
        *(double *)(a1 + 168) = *(double *)&v8;
        *(void *)(a1 + 176) = v9;
        *(unsigned char *)(a1 + 184) = v10;
        *(unsigned char *)(a1 + 185) = v11;
      }
    }
    if (*(unsigned char *)(a1 + 33))
    {
      unint64_t v43 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_canonicalSourceIDForSourceID((uint64_t)v5, v13);
      id v44 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_statisticsForSource((uint64_t)v5, v43);
      if (!*((unsigned char *)v44 + 96) || *((double *)v44 + 9) <= v7)
      {
        v44[8] = v6;
        *((double *)v44 + 9) = v7;
        v44[10] = v8;
        v44[11] = v9;
        *((unsigned char *)v44 + 96) = v10;
        *((unsigned char *)v44 + 97) = v11;
        if (!*((unsigned char *)v44 + 56) || *((double *)v44 + 4) <= v7)
        {
          v44[3] = v6;
          *((double *)v44 + 4) = v7;
          v44[5] = v8;
          v44[6] = v9;
          *((unsigned char *)v44 + 56) = v10;
          *((unsigned char *)v44 + 57) = v11;
        }
      }
    }
  }
  char v45 = v66;
  if (v66)
  {
    unint64_t v46 = *(void *)(a1 + 448);
    unint64_t v47 = *(void *)(a1 + 456);
    if (v46 >= v47)
    {
      uint64_t v49 = *(void *)(a1 + 440);
      unint64_t v50 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v46 - v49) >> 3);
      unint64_t v51 = v50 + 1;
      if (v50 + 1 > 0x666666666666666) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v52 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v47 - v49) >> 3);
      if (2 * v52 > v51) {
        unint64_t v51 = 2 * v52;
      }
      if (v52 >= 0x333333333333333) {
        unint64_t v53 = 0x666666666666666;
      }
      else {
        unint64_t v53 = v51;
      }
      if (v53) {
        unint64_t v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v53);
      }
      else {
        uint64_t v54 = 0;
      }
      unint64_t v55 = v53 + 40 * v50;
      unint64_t v56 = v53 + 40 * v54;
      *(void *)unint64_t v55 = v23;
      *(double *)(v55 + 8) = v22;
      *(double *)(v55 + 16) = v62;
      *(void *)(v55 + 24) = v20;
      *(unsigned char *)(v55 + 32) = v45;
      *(unsigned char *)(v55 + 33) = v61;
      *(_DWORD *)(v55 + 34) = v64;
      *(_WORD *)(v55 + 38) = v65;
      unint64_t v48 = v55 + 40;
      uint64_t v58 = *(char **)(a1 + 440);
      unint64_t v57 = *(char **)(a1 + 448);
      if (v57 != v58)
      {
        do
        {
          long long v59 = *(_OWORD *)(v57 - 40);
          long long v60 = *(_OWORD *)(v57 - 24);
          *(_WORD *)(v55 - 8) = *((_WORD *)v57 - 4);
          *(_OWORD *)(v55 - 24) = v60;
          *(_OWORD *)(v55 - 40) = v59;
          v55 -= 40;
          v57 -= 40;
        }
        while (v57 != v58);
        unint64_t v57 = *(char **)(a1 + 440);
      }
      *(void *)(a1 + 440) = v55;
      *(void *)(a1 + 448) = v48;
      *(void *)(a1 + 456) = v56;
      if (v57) {
        operator delete(v57);
      }
    }
    else
    {
      *(void *)unint64_t v46 = v23;
      *(double *)(v46 + 8) = v22;
      *(double *)(v46 + 16) = v62;
      *(void *)(v46 + 24) = v20;
      *(unsigned char *)(v46 + 32) = v45;
      *(unsigned char *)(v46 + 33) = v61;
      *(_DWORD *)(v46 + 34) = v64;
      *(_WORD *)(v46 + 38) = v65;
      unint64_t v48 = v46 + 40;
    }
    *(void *)(a1 + 448) = v48;
  }
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_notifyForCurrentBucket(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 586))
  {
    *(unsigned char *)(a1 + 588) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 588) = 0;
    int v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      uint64_t v4 = v2;
      double v3 = (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      if (v3) {
        v4[2](v4, v3);
      }

      int v2 = v4;
    }
  }
}

void sub_1BD124110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  uint64_t v9 = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 440), *(void *)(a1 + 448), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 448) - *(void *)(a1 + 440)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::resetToBucket(a1, *(void *)a1 + 1, a2, a3);
  uint64_t v6 = v9;
  double v7 = v10;
  if (v9 != v10)
  {
    uint64_t v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BD12420C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 588))
  {
    if (v3)
    {
      id v6 = v3;
      uint64_t v4 = _Block_copy(*(const void **)(a1 + 96));
      uint64_t v5 = v4;
      if (v4) {
        (*((void (**)(void *, id))v4 + 2))(v4, v6);
      }

      id v3 = v6;
    }
    *(unsigned char *)(a1 + 588) = 0;
  }
}

void sub_1BD1242A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI33HDStatisticsAverageSampleDurationEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 startDate];
  id v6 = [v4 startDate];
  uint64_t v7 = [v5 compare:v6];

  return v7;
}

void sub_1BD124328(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_primitiveInvalidateInterval(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 13);
  if (WeakRetained)
  {
    if (v5
      && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_currentBucketInterval((uint64_t)a1),
          (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v8 = [v5 endDate];
      uint64_t v9 = [v7 startDate];
      if (objc_msgSend(v8, "hk_isAfterDate:", v9))
      {
        char v10 = [v5 startDate];
        uint64_t v11 = [v7 endDate];
        char v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);
      }
      else
      {
        char v12 = 0;
      }

      unint64_t v13 = _Block_copy(a1[12]);
      if ((v12 & 1) == 0) {
        operator new();
      }
    }
    else
    {
      unint64_t v13 = _Block_copy(a1[12]);
    }
    *((unsigned char *)a1 + 584) = 1;
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI33HDStatisticsAverageSampleDurationEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
    v27[3] = &unk_1E6308FF8;
    id v15 = v5;
    id v28 = v15;
    id v16 = v13;
    id v29 = v16;
    (*((void (**)(id *, void *))*a1 + 9))(a1, v27);
    if (v5)
    {
      double v17 = [v15 startDate];
      [v17 timeIntervalSinceReferenceDate];
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_configureForStartTime((uint64_t)a1);
    }
    else
    {
      (*((void (**)(id *))*a1 + 4))(a1);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI33HDStatisticsAverageSampleDurationEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
    v21[3] = &unk_1E6309060;
    char v24 = a1;
    id v5 = v15;
    char v26 = 1;
    id v22 = v5;
    uint64_t v25 = a1;
    id v23 = WeakRetained;
    uint64_t v14 = (*((uint64_t (**)(id *, void *, uint64_t))*a1 + 14))(a1, v21, a3);
    double v18 = _Block_copy(v16);
    id v19 = a1[12];
    a1[12] = v18;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to invalidate interval: no data source available.");
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1BD124778(_Unwind_Exception *a1)
{
  MEMORY[0x1C187B8A0](v4, 0x10F1C40081539FBLL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI33HDStatisticsAverageSampleDurationEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_11;
  }
  id v3 = [v10 endDate];
  uint64_t v4 = [*(id *)(a1 + 32) startDate];
  char v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    id v6 = [v10 startDate];
    uint64_t v7 = [*(id *)(a1 + 32) endDate];
    char v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_11:
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9) {
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
      }
    }
  }
}

void sub_1BD12495C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI33HDStatisticsAverageSampleDurationEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = [*(id *)(a1 + 32) startDate];
  [v5 timeIntervalSinceReferenceDate];
  uint64_t v7 = v6;

  char v8 = [*(id *)(a1 + 32) endDate];
  [v8 timeIntervalSinceReferenceDate];
  uint64_t v10 = v9;

  uint64_t v11 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  uint64_t v13 = *(void *)(a1 + 32);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI33HDStatisticsAverageSampleDurationEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  char v32 = *(unsigned char *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  uint64_t v31 = *(void *)(a1 + 56);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI33HDStatisticsAverageSampleDurationEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  uint64_t v14 = [v11 collectionCalculator:WeakRetained queryForInterval:v13 error:a2 sampleHandler:v30 mergeHandler:v29];

  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15 != v4)
    {
      id v16 = [*(id *)(a1 + 32) endDate];
      [v16 timeIntervalSinceReferenceDate];
      if (*(void *)(v15 + 40))
      {
        double v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          id v19 = [*(id *)(v15 + 40) dateIntervalAtIndex:*(void *)(v15 + 112) + 1];
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          unint64_t v20 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_statisticsFromFinishedBucket(v15, v15 + 120);
          double v21 = [v19 startDate];
          [v21 timeIntervalSinceReferenceDate];
          double v23 = v22;
          char v24 = [v19 endDate];
          [v24 timeIntervalSinceReferenceDate];
          HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            char v26 = _Block_copy(*(const void **)(v15 + 96));
            double v27 = v26;
            if (v26) {
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);
            }
          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_didChangeBucket(v15, 0);
        }
      }
    }
  }
  return v14;
}

void sub_1BD124C08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI33HDStatisticsAverageSampleDurationEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3()
{
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI33HDStatisticsAverageSampleDurationEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 584)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_configureForStartTime(a1);
  }
  if (*(void *)(a1 + 40)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_advanceToTime(a1, a2);
  }
  if (*(double *)(a1 + 128) > a2)
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_mergeThroughTime(a1 + 120, a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 32) < *(double *)(v10 + 8))
                {
                  uint64_t v129 = *(void *)(v10 + 32);
                  long long v113 = *(_OWORD *)v10;
                  long long v121 = *(_OWORD *)(v10 + 16);
                  long long v52 = *(_OWORD *)(a2 - 40);
                  long long v53 = *(_OWORD *)(a2 - 24);
                  *(_WORD *)(v10 + 32) = *(_WORD *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(_WORD *)(a2 - 8) = v129;
                  *(_OWORD *)(a2 - 24) = v121;
                  *(_OWORD *)(a2 - 40) = v113;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v10, (double *)(v10 + 40), (double *)(a2 - 40));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, v10 + 120, a2 - 40);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            uint64_t v54 = (void *)(v10 + 40);
            BOOL v56 = v10 == a2 || v54 == (void *)a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  long long v59 = v54;
                  double v60 = *(double *)(v58 + 48);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *v54;
                    long long v114 = *(_OWORD *)(v58 + 56);
                    uint64_t v122 = *(void *)(v58 + 72);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      uint64_t v63 = v10 + v62;
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      *(_OWORD *)(v63 + 40) = *(_OWORD *)(v10 + v62);
                      *(_OWORD *)(v63 + 56) = v64;
                      *(_WORD *)(v63 + 72) = *(_WORD *)(v10 + v62 + 32);
                      if (!v62) {
                        break;
                      }
                      v62 -= 40;
                      if (v60 >= *(double *)(v63 - 32))
                      {
                        uint64_t v65 = v10 + v62 + 40;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = v114;
                    *(_WORD *)(v65 + 32) = v122;
                  }
                  uint64_t v54 = v59 + 5;
                  v57 += 40;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 5 != (void *)a2);
              }
            }
            else if (!v56)
            {
              do
              {
                char v98 = v54;
                double v99 = *(double *)(a1 + 48);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *v54;
                  long long v117 = *(_OWORD *)(a1 + 56);
                  uint64_t v125 = *(void *)(a1 + 72);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(_OWORD *)(v101 - 3);
                    *(_OWORD *)long long v101 = *(_OWORD *)(v101 - 5);
                    *((_OWORD *)v101 + 1) = v102;
                    *((_WORD *)v101 + 16) = *((_WORD *)v101 - 4);
                    double v103 = *((double *)v101 - 9);
                    v101 -= 5;
                  }
                  while (v99 < v103);
                  void *v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *((_WORD *)v101 + 16) = v125;
                  *((_OWORD *)v101 + 1) = v117;
                }
                v54 += 5;
                a1 = (unint64_t)v98;
              }
              while (v98 + 5 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 40 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v10 + 40 * v69 + 8) < *(double *)(v70 + 48))
                  {
                    v70 += 40;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  double v71 = *(double *)(v10 + 40 * v68 + 8);
                  if (*(double *)(v70 + 8) >= v71)
                  {
                    unint64_t v72 = v10 + 40 * v68;
                    uint64_t v73 = *(void *)v72;
                    uint64_t v123 = *(void *)(v72 + 32);
                    long long v115 = *(_OWORD *)(v72 + 16);
                    do
                    {
                      unint64_t v74 = v72;
                      unint64_t v72 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_WORD *)(v74 + 32) = *(_WORD *)(v70 + 32);
                      *(_OWORD *)unint64_t v74 = v75;
                      *(_OWORD *)(v74 + 16) = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 40 * v77;
                      uint64_t v78 = 2 * v69 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v10 + 40 * v77 + 8) < *(double *)(v70 + 48))
                      {
                        v70 += 40;
                        uint64_t v77 = v78;
                      }
                      uint64_t v69 = v77;
                    }
                    while (*(double *)(v70 + 8) >= v71);
                    *(void *)unint64_t v72 = v73;
                    *(double *)(v72 + 8) = v71;
                    *(_OWORD *)(v72 + 16) = v115;
                    *(_WORD *)(v72 + 32) = v123;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x28uLL;
              do
              {
                uint64_t v80 = 0;
                uint64_t v130 = *(void *)(v10 + 32);
                long long v116 = *(_OWORD *)v10;
                long long v124 = *(_OWORD *)(v10 + 16);
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = v81;
                  uint64_t v83 = v80 + 1;
                  v81 += 40 * (v80 + 1);
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v85 = v84 + 2;
                  if (v85 < v79 && *(double *)(v82 + 40 * v83 + 8) < *(double *)(v81 + 48))
                  {
                    v81 += 40;
                    uint64_t v80 = v85;
                  }
                  long long v86 = *(_OWORD *)v81;
                  long long v87 = *(_OWORD *)(v81 + 16);
                  *(_WORD *)(v82 + 32) = *(_WORD *)(v81 + 32);
                  *(_OWORD *)unint64_t v82 = v86;
                  *(_OWORD *)(v82 + 16) = v87;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 40;
                if (v81 == a2)
                {
                  *(_WORD *)(v81 + 32) = v130;
                  *(_OWORD *)unint64_t v81 = v116;
                  *(_OWORD *)(v81 + 16) = v124;
                }
                else
                {
                  long long v88 = *(_OWORD *)a2;
                  long long v89 = *(_OWORD *)(a2 + 16);
                  *(_WORD *)(v81 + 32) = *(_WORD *)(a2 + 32);
                  *(_OWORD *)unint64_t v81 = v88;
                  *(_OWORD *)(v81 + 16) = v89;
                  *(_WORD *)(a2 + 32) = v130;
                  *(_OWORD *)a2 = v116;
                  *(_OWORD *)(a2 + 16) = v124;
                  uint64_t v90 = v81 - v10 + 40;
                  if (v90 >= 41)
                  {
                    unint64_t v91 = (v90 / 0x28uLL - 2) >> 1;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v10 + 40 * v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      uint64_t v109 = *(void *)(v81 + 32);
                      long long v106 = *(_OWORD *)(v81 + 16);
                      do
                      {
                        unint64_t v94 = v81;
                        unint64_t v81 = v10 + 40 * v91;
                        long long v95 = *(_OWORD *)v81;
                        long long v96 = *(_OWORD *)(v81 + 16);
                        *(_WORD *)(v94 + 32) = *(_WORD *)(v81 + 32);
                        *(_OWORD *)unint64_t v94 = v95;
                        *(_OWORD *)(v94 + 16) = v96;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 40 * v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_WORD *)(v81 + 32) = v109;
                      *(_OWORD *)(v81 + 16) = v106;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40 * (v12 >> 1)), (double *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            id v16 = (double *)(a1 + 40 * v13 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40), v16, (double *)(a2 - 80));
            double v17 = (double *)(a1 + 40 + 8 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 80), v17, (double *)(a2 - 120));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v16, (double *)v14, v17);
            uint64_t v126 = *(void *)(a1 + 32);
            long long v110 = *(_OWORD *)a1;
            long long v118 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 16) = v19;
            *(_WORD *)(v14 + 32) = v126;
            *(_OWORD *)unint64_t v14 = v110;
            *(_OWORD *)(v14 + 16) = v118;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40 * (v12 >> 1)), (double *)a1, (double *)(a2 - 40));
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 32) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          long long v105 = *(_OWORD *)(a1 + 16);
          uint64_t v108 = *(void *)(a1 + 32);
          if (v20 >= *(double *)(a2 - 32))
          {
            unint64_t v41 = a1 + 40;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 40;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 40;
              double v40 = *(double *)(v39 + 48);
              v39 += 40;
            }
            while (v20 >= v40);
          }
          unint64_t v43 = a2;
          if (v10 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              unint64_t v43 = v44 - 40;
              double v45 = *(double *)(v44 - 32);
              v44 -= 40;
            }
            while (v20 < v45);
          }
          while (v10 < v43)
          {
            uint64_t v128 = *(void *)(v10 + 32);
            long long v112 = *(_OWORD *)v10;
            long long v120 = *(_OWORD *)(v10 + 16);
            long long v46 = *(_OWORD *)v43;
            long long v47 = *(_OWORD *)(v43 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v43 + 32);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(_WORD *)(v43 + 32) = v128;
            *(_OWORD *)unint64_t v43 = v112;
            *(_OWORD *)(v43 + 16) = v120;
            do
            {
              double v48 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *(double *)(v43 - 32);
              v43 -= 40;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 40);
            long long v51 = *(_OWORD *)(v10 - 24);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 40) = v38;
          *(double *)(v10 - 32) = v20;
          *(_WORD *)(v10 - 8) = v108;
          *(_OWORD *)(v10 - 24) = v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        long long v104 = *(_OWORD *)(a1 + 16);
        uint64_t v107 = *(void *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 48);
          v21 += 40;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        unint64_t v25 = a2;
        if (v21 == 40)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 40;
            double v29 = *(double *)(v28 - 32);
            v28 -= 40;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 40;
            double v27 = *(double *)(v25 - 32);
            v25 -= 40;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v127 = *(void *)(v10 + 32);
            long long v111 = *(_OWORD *)v10;
            long long v119 = *(_OWORD *)(v10 + 16);
            long long v31 = *(_OWORD *)v30;
            long long v32 = *(_OWORD *)(v30 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v30 + 32);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(_WORD *)(v30 + 32) = v127;
            *(_OWORD *)unint64_t v30 = v111;
            *(_OWORD *)(v30 + 16) = v119;
            do
            {
              double v33 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v33 < v20);
            do
            {
              double v34 = *(double *)(v30 - 32);
              v30 -= 40;
            }
            while (v34 >= v20);
          }
          while (v10 < v30);
        }
        if (v10 - 40 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 40);
          long long v36 = *(_OWORD *)(v10 - 24);
          *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 40) = v22;
        *(double *)(v10 - 32) = v20;
        *(_WORD *)(v10 - 8) = v107;
        *(_OWORD *)(v10 - 24) = v104;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 40;
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        __int16 v9 = *(_WORD *)(a2 - 8);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      uint64_t v16 = *(void *)v12;
      long long v21 = *(_OWORD *)(v12 + 16);
      uint64_t v22 = *(void *)(v12 + 32);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(void *)uint64_t v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI33HDStatisticsAverageSampleDurationEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(void *a1, uint64_t a2)
{
  id v3 = (void *)a1[5];
  uint64_t v4 = a1[6];
  BOOL v5 = (void *)a1[4];
  uint64_t v6 = [v5 dateInterval];
  void v9[4] = v4;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI33HDStatisticsAverageSampleDurationEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI33HDStatisticsAverageSampleDurationEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  uint64_t v7 = [v3 collectionCalculator:v5 queryForInterval:v6 error:a2 sampleHandler:v10 mergeHandler:v9];

  return v7;
}

void sub_1BD12590C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI33HDStatisticsAverageSampleDurationEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10 = *(void *)(a1 + 32);
  *(double *)int v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  char v15 = 1;
  uint64_t v11 = [MEMORY[0x1E4F1C9C8] distantFuture];
  [v11 timeIntervalSinceReferenceDate];
  BOOL v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1BD1259B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI33HDStatisticsAverageSampleDurationEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
}

void HDStatisticsRelative<HDStatisticsAverageSampleDuration>::archive(uint64_t a1, int *a2)
{
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 112);
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F171B978;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  statistics::Statistics::makePrimaryStatistics(a1);
  HDStatisticsAverageSampleDuration::archive((int8x16_t *)(a2 + 2), (uint64_t)v6);
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v6);
  statistics::Statistics::~Statistics((statistics::Statistics *)v6);
  uint64_t v5 = *a2;
  *(_DWORD *)(a1 + 204) |= 0x100u;
  *(void *)(a1 + 136) = v5;
  statistics::Statistics::makeMostRecentDatum(a1);
  v6[0] = &unk_1F17206F8;
  int v10 = 127;
  int8x16_t v7 = vextq_s8(*((int8x16_t *)a2 + 4), *((int8x16_t *)a2 + 4), 8uLL);
  v6[1] = *((void *)a2 + 10);
  v6[2] = *((void *)a2 + 11);
  __int16 v8 = 0;
  char v9 = 0;
  statistics::RawQuantitySample::operator=(*v4, (uint64_t)v6);
  PB::Base::~Base((PB::Base *)v6);
}

void sub_1BD125AE0(_Unwind_Exception *a1)
{
  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsAverageSampleDuration>::unarchive(uint64_t a1, void *a2)
{
  *(_WORD *)(a1 + 56) = 0;
  int8x16_t v2 = 0uLL;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_WORD *)(a1 + 96) = 0;
  id v3 = (void *)a2[16];
  if (v3)
  {
    uint64_t v4 = v3[3];
    uint64_t v5 = v3[12];
    uint64_t v6 = v3[14];
    if (v6)
    {
      int8x16_t v2 = *(int8x16_t *)(v6 + 24);
      uint64_t v7 = *(void *)(v6 + 8);
      char v8 = 1;
      uint64_t v6 = *(void *)(v6 + 16);
    }
    else
    {
      char v8 = 0;
      uint64_t v7 = 0;
    }
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v4;
    int8x16_t v2 = vextq_s8(v2, v2, 8uLL);
    *(int8x16_t *)(a1 + 24) = v2;
    *(void *)(a1 + 40) = v7;
    *(void *)(a1 + 48) = v6;
    *(unsigned char *)(a1 + 56) = v8;
    *(unsigned char *)(a1 + 57) = 0;
  }
  *(_DWORD *)a1 = a2[17];
  uint64_t v9 = a2[14];
  if (v9)
  {
    v2.i64[0] = *(void *)(v9 + 8);
    uint64_t v10 = *(void *)(v9 + 16);
    *(int8x16_t *)(a1 + 64) = vextq_s8(*(int8x16_t *)(v9 + 24), *(int8x16_t *)(v9 + 24), 8uLL);
    *(void *)(a1 + 80) = v2.i64[0];
    *(void *)(a1 + 88) = v10;
    *(_WORD *)(a1 + 96) = 1;
  }
  return *(double *)v2.i64;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6 = a3;
  uint64_t v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = &unk_1F1725540;
  double v9 = 900.0;
  if ((v6 & 0x10) == 0) {
    double v9 = 0.0;
  }
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(void *)(v8 + 104) = 0;
  *(void *)(v8 + 112) = 0;
  *(void *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsAverageSampleDuration>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_WORD *)(a1 + 536) = 1;
  *(unsigned char *)(a1 + 538) = 0;
  *(unsigned char *)(a1 + 540) = 0;
  *(void *)(a1 + 544) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(void *)(a1 + 584) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);

  JUMPOUT(0x1C187B8A0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1F1725540;
  int8x16_t v2 = *(void **)(a1 + 568);
  if (v2)
  {
    *(void *)(a1 + 576) = v2;
    operator delete(v2);
  }

  id v3 = *(void **)(a1 + 504);
  if (v3)
  {
    *(void *)(a1 + 512) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsCumulative>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(unsigned char *)(result + 536) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::setDateInterval(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 copy];
  uint64_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;

  uint64_t v5 = [v6 startDate];
  [v5 timeIntervalSinceReferenceDate];
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_configureForStartTime(a1);
}

void sub_1BD125D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(void *)(a1 + 40))
  {
    id v5 = v3;
    [v3 timeIntervalSinceReferenceDate];
    *(void *)(a1 + 544) = v4;
    id v3 = v5;
  }
}

void sub_1BD125DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::setStatisticsConfiguration(id *a1, void *a2)
{
  objc_storeStrong(a1 + 69, a2);
  id v7 = a2;
  id v4 = a1[69];
  id v5 = a1[66];
  a1[66] = v4;
  id v6 = v4;

  objc_storeStrong(a1 + 19, a1[66]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (*(void *)(a1 + 40)) {
    return 1;
  }
  BOOL v7 = *(void *)(a1 + 224) == *(void *)(a1 + 216) && *(uint64_t *)(a1 + 248) < 1
    || HKIntervalMask<double>::firstDifference(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)a2, *(void *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (v7) {
    return 1;
  }
  double v9 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128);

  return v9(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::setStatisticsHandler(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 copy];
  id v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v3;
}

void sub_1BD125F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::dataSource(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));

  return WeakRetained;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::currentStatistics(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 536))
  {
    unint64_t v1 = 0;
  }
  else
  {
    HDStatisticsBucket<HDStatisticsAverageSampleDuration>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
    HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_updateSourceOrder((uint64_t)v4);
    HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_mergeThroughTime((uint64_t)v4, v4[1]);
    unint64_t v1 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_statisticsFromFinishedBucket(a1, v4);
    HDStatisticsBucket<HDStatisticsCumulative>::~HDStatisticsBucket((uint64_t)v4);
  }

  return v1;
}

void sub_1BD126064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(a1 + 64);
  BOOL v7 = v6;
  if (v6)
  {
    uint64_t v8 = [v6 startDate];
    [v8 timeIntervalSinceReferenceDate];
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    uint64_t v10 = [v7 endDate];
    [v10 timeIntervalSinceReferenceDate];
    double v12 = v11;
    double v13 = *(double *)(a2 + 8);

    if (v12 < v13) {
      goto LABEL_9;
    }
  }
  if (!*(unsigned char *)(a1 + 538))
  {
LABEL_11:
    uint64_t v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 537))
  {
LABEL_9:
    uint64_t v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(unsigned char *)(a1 + 539)) {
      goto LABEL_11;
    }
    unint64_t v17 = *(void *)(a1 + 576);
    unint64_t v18 = *(void *)(a1 + 584);
    if (v17 >= v18)
    {
      uint64_t v22 = *(void *)(a1 + 568);
      unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      unint64_t v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24) {
        unint64_t v24 = 2 * v25;
      }
      if (v25 >= 0x333333333333333) {
        unint64_t v26 = 0x666666666666666;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26) {
        unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      }
      else {
        uint64_t v27 = 0;
      }
      unint64_t v28 = v26 + 40 * v23;
      unint64_t v29 = v26 + 40 * v27;
      long long v30 = *(_OWORD *)a2;
      long long v31 = *(_OWORD *)(a2 + 16);
      *(void *)(v28 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      unint64_t v21 = v28 + 40;
      long long v32 = *(char **)(a1 + 576);
      double v33 = *(char **)(a1 + 568);
      if (v32 != v33)
      {
        do
        {
          long long v34 = *(_OWORD *)(v32 - 40);
          long long v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        long long v32 = *(char **)(a1 + 568);
      }
      *(void *)(a1 + 568) = v28;
      *(void *)(a1 + 576) = v21;
      *(void *)(a1 + 584) = v29;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      long long v19 = *(_OWORD *)a2;
      long long v20 = *(_OWORD *)(a2 + 16);
      *(void *)(v17 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      unint64_t v21 = v17 + 40;
    }
    *(void *)(a1 + 576) = v21;
    goto LABEL_9;
  }
  int v14 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
  uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1BD1262D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = v5;
  if (*(unsigned char *)(a1 + 538))
  {
    uint64_t v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 538) = 1;
  uint64_t v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    uint64_t v7 = 0;
    goto LABEL_82;
  }
  uint64_t v65 = v6;
  if (*(unsigned char *)(a1 + 537)) {
    goto LABEL_5;
  }
  double v9 = *(void **)(a1 + 560);
  if (!v9)
  {
    id v68 = 0;
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 40))
  {
LABEL_5:
    int v8 = 0;
    id v68 = 0;
    goto LABEL_29;
  }
  [v9 sortUsingComparator:&__block_literal_global_941];
  id v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v10 = *(id *)(a1 + 560);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  if (!v11)
  {

    id v12 = 0;
    goto LABEL_27;
  }
  id v12 = 0;
  uint64_t v13 = *(void *)v70;
  do
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (*(void *)v70 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(id *)(*((void *)&v69 + 1) + 8 * i);
      BOOL v16 = v15;
      if (v12)
      {
        unint64_t v17 = [v15 startDate];
        unint64_t v18 = [v12 endDate];
        int v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          long long v20 = [v16 endDate];
          unint64_t v21 = [v12 endDate];
          int v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22) {
            goto LABEL_21;
          }
          id v23 = objc_alloc(MEMORY[0x1E4F28C18]);
          unint64_t v24 = [v12 startDate];
          unint64_t v25 = [v16 endDate];
          id v26 = (id)[v23 initWithStartDate:v24 endDate:v25];
        }
        else
        {
          [v68 addObject:v12];
          id v26 = v16;
        }
        id v12 = v26;
      }
      else
      {
        id v12 = v15;
      }
LABEL_21:
    }
    uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  }
  while (v11);

  if (v12) {
    [v68 addObject:v12];
  }
LABEL_27:

LABEL_28:
  int v8 = 1;
LABEL_29:
  uint64_t v27 = *(void **)(a1 + 560);
  *(void *)(a1 + 560) = 0;

  *(unsigned char *)(a1 + 537) = 0;
  if (!v8)
  {
    unint64_t v38 = *(void *)(a1 + 568);
    *(void *)(a1 + 584) = 0;
    *(void *)(a1 + 576) = 0;
    *(void *)(a1 + 568) = 0;
    unint64_t v39 = v38;
    goto LABEL_47;
  }
  unint64_t v28 = [v68 lastObject];
  if (v28)
  {
    unint64_t v29 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_currentBucketInterval(a1);
    long long v30 = [v29 endDate];
    long long v31 = [v28 endDate];
    int v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      double v33 = [v28 endDate];
      [v33 timeIntervalSinceReferenceDate];
      double v35 = v34;

      uint64_t v36 = *(void *)(a1 + 568);
      BOOL v37 = *(long long **)(a1 + 576);
      while ((long long *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((long long *)v36 != v37)
          {
            double v40 = (long long *)(v36 + 40);
            if ((long long *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  long long v41 = *v40;
                  long long v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)uint64_t v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                double v40 = (long long *)((char *)v40 + 40);
              }
              while (v40 != v37);
              BOOL v37 = *(long long **)(a1 + 576);
            }
          }
          if ((long long *)v36 != v37) {
            *(void *)(a1 + 576) = v36;
          }
          break;
        }
        v36 += 40;
      }
    }
  }
  unint64_t v38 = *(void *)(a1 + 568);
  unint64_t v39 = *(void *)(a1 + 576);
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 576) = 0;
  if (![v68 count]) {
    goto LABEL_60;
  }
LABEL_47:
  id v43 = v68;
  long long __p = (void *)v38;
  if (v43)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v44 = v43;
    uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v70;
      while (2)
      {
        for (uint64_t j = 0; j != v45; ++j)
        {
          if (*(void *)v70 != v46) {
            objc_enumerationMutation(v44);
          }
          id v48 = *(id *)(*((void *)&v69 + 1) + 8 * j);
          int v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_primitiveInvalidateInterval((id *)a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
        if (v45) {
          continue;
        }
        break;
      }
    }

LABEL_59:
    unint64_t v38 = (unint64_t)__p;
LABEL_60:
    unint64_t v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v51;
    }
    int v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    long long __p = (void *)v38;
    if (v39 != v38)
    {
      uint64_t v54 = v38;
      uint64_t v50 = v67;
      do
      {
        int v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_primitiveAddSample(a1, v54, 1, v50);
        int v53 = v55;
        v54 += 40;
        if (v54 == v39) {
          char v56 = 0;
        }
        else {
          char v56 = v55;
        }
        uint64_t v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_primitiveInvalidateInterval((id *)a1, 0, v67))goto LABEL_59; {
LABEL_70:
    }
    int v53 = 0;
  }
  if (*(void *)(a1 + 40) && *(void *)(a1 + 512) != *(void *)(a1 + 504))
  {
    do
    {
      uint64_t v57 = objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(void *)(a1 + 112) + 1, v50, v65);
      HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      unint64_t v58 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_statisticsFromFinishedBucket(a1, (double *)(a1 + 120));
      long long v59 = [v57 startDate];
      [v59 timeIntervalSinceReferenceDate];
      double v61 = v60;
      uint64_t v62 = [v57 endDate];
      [v62 timeIntervalSinceReferenceDate];
      HDStatisticsCollectionEngine<HDStatisticsAverageSampleDuration>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_notifyForCurrentBucket(a1);
    }
    while (*(void *)(a1 + 512) != *(void *)(a1 + 504));
  }
  *(unsigned char *)(a1 + 538) = 0;
  if (__p) {
    operator delete(__p);
  }

  if (v53)
  {
    if (*(unsigned char *)(a1 + 540))
    {
      *(unsigned char *)(a1 + 540) = 0;
      id v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_notifyForCurrentBucket(a1);
      uint64_t v7 = 1;
      goto LABEL_82;
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v6 = v65;
LABEL_82:
  *(unsigned char *)(a1 + 538) = 0;
LABEL_83:

  return v7;
}

void sub_1BD1269D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    *(unsigned char *)(v13 + 538) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::enableImmediateSampleInsertion(uint64_t result)
{
  *(unsigned char *)(result + 539) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(unsigned char *)(a1 + 538)) {
      goto LABEL_12;
    }
    uint64_t v7 = 0;
LABEL_14:
    uint64_t v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_primitiveInvalidateInterval((id *)a1, v7, a3);
    goto LABEL_15;
  }
  uint64_t v7 = [v6 dateIntervalForIntervalsContainingInterval:v5];

  if (!*(unsigned char *)(a1 + 538)) {
    goto LABEL_14;
  }
  if (!v7)
  {
LABEL_12:
    id v12 = *(void **)(a1 + 560);
    *(void *)(a1 + 560) = 0;

    uint64_t v7 = 0;
    uint64_t v11 = 1;
    *(unsigned char *)(a1 + 537) = 1;
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 537))
  {
    int v8 = *(void **)(a1 + 560);
    if (!v8)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      id v10 = *(void **)(a1 + 560);
      *(void *)(a1 + 560) = v9;

      int v8 = *(void **)(a1 + 560);
    }
    [v8 addObject:v7];
  }
  uint64_t v11 = 1;
LABEL_15:

  return v11;
}

void sub_1BD126CD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    *(unsigned char *)(a1 + 536) = 1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI33HDStatisticsAverageSampleDurationE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v9[3] = &unk_1E63043E8;
    uint64_t v12 = a1;
    id v10 = v5;
    id v11 = WeakRetained;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 112))(a1, v9, a3);
    if (v7 && *(unsigned char *)(a1 + 536) && !*(void *)(a1 + 40)) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_configureForStartTime(a1);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to query for initial statistics: no data source available.");
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1BD126E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::reset(uint64_t result)
{
  *(unsigned char *)(result + 536) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 encodeBool:*(unsigned __int8 *)(a1 + 536) forKey:@"needs_config"];
  id v12 = v3;
  int v32 = &unk_1F1726FA0;
  double v33 = 0;
  int v38 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
  LOBYTE(v38) = 1;
  uint64_t v34 = v4;
  uint64_t v35 = 0;
  statistics::StatisticsEngine::makeCurrentBucket((uint64_t)&v32);
  uint64_t v13 = &unk_1F171B9C8;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  int v31 = 511;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 0;
  int8x16_t v14 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  uint64_t v5 = *(void *)(a1 + 136);
  char v29 = *(unsigned char *)(a1 + 144);
  char v30 = *(unsigned char *)(a1 + 145);
  BOOL v28 = *(_DWORD *)(a1 + 148) == 0;
  int8x16_t v15 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  uint64_t v7 = *(int8x16_t **)(a1 + 216);
  if (v7 != *(int8x16_t **)(a1 + 224))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v7, *v7, 8uLL);
    int8x16_t v40 = v7[1];
    char v43 = 0;
    HIBYTE(v42) = v7[2].i8[9];
    LOBYTE(v42) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>();
  }
  statistics::StatisticsBucket::makeStatistics((uint64_t)&v13);
  HDStatisticsAverageSampleDuration::archive((int8x16_t *)(a1 + 240), (uint64_t)&v39);
  statistics::Statistics::operator=(*((statistics **)&v22 + 1), (uint64_t)&v39);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v39);
  uint64_t v8 = *(void *)(a1 + 296);
  if (v8 != a1 + 304)
  {
    HDStatisticsAverageSampleDuration::archive((int8x16_t *)(v8 + 40), (uint64_t)&v39);
    uint64_t v9 = *(void *)(v8 + 32);
    v46 |= 0x200u;
    uint64_t v45 = v9;
    PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>();
  }
  id v10 = *(int8x16_t **)(a1 + 184);
  if (v10 != *(int8x16_t **)(a1 + 192))
  {
    unint64_t v39 = (char *)&unk_1F1727540;
    v41.i32[0] = 3;
    int8x16_t v40 = vextq_s8(*v10, *v10, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>();
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v13);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v13);
  id v11 = *(int8x16_t **)(a1 + 504);
  if (v11 != *(int8x16_t **)(a1 + 512))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v11, *v11, 8uLL);
    int8x16_t v40 = v11[1];
    __int16 v42 = 0;
    char v43 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>();
  }
  PB::Writer::Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v39);
  [v12 encodeBytes:v40.i64[0] length:&v39[-v40.i64[0]] forKey:@"hdsce_archived_representation"];
  PB::Writer::~Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);
}

void sub_1BD127220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v67 = a2;
  *(unsigned char *)(a1 + 536) = [v67 decodeBoolForKey:@"needs_config"];
  id v3 = v67;
  HDStatisticsBucket<HDStatisticsAverageSampleDuration>::HDStatisticsBucket((uint64_t)v73, 0, -1.79769313e308, 1.79769313e308);
  long long v74 = 0u;
  long long v75 = 0u;
  v111[0] = 0;
  id v70 = v3;
  PB::Reader::Reader((PB::Reader *)v110, (const unsigned __int8 *)[v70 decodeBytesForKey:@"hdsce_archived_representation" returnedLength:v111]);
  uint64_t v69 = a1;
  double v103 = &unk_1F1726FA0;
  uint64_t v104 = 0;
  uint64_t v107 = 0;
  uint64_t v108 = 0;
  uint64_t v106 = 0;
  int v109 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v103, (PB::Reader *)v110);
  uint64_t v72 = v105;
  if (v104)
  {
    uint64_t v79 = 0;
    memset(v82, 0, sizeof(v82));
    uint64_t v88 = 0;
    long long v87 = 0;
    long long __p = 0u;
    long long v84 = 0u;
    memset(v85, 0, 42);
    long long v86 = &v87;
    long long v89 = 0u;
    long long v90 = 0u;
    int v91 = 1065353216;
    uint64_t v95 = 0;
    long long v93 = 0u;
    long long v94 = 0u;
    long long v92 = 0u;
    int v96 = 1065353216;
    long long v97 = 0u;
    long long v98 = 0u;
    int v99 = 1065353216;
    long long v100 = 0u;
    long long v101 = 0u;
    int v102 = 1065353216;
    int8x16_t v76 = vextq_s8(*(int8x16_t *)(v104 + 8), *(int8x16_t *)(v104 + 8), 8uLL);
    uint64_t v4 = *(void *)(v104 + 72);
    uint64_t v77 = *(void *)(v104 + 64);
    __int16 v78 = *(_WORD *)(v104 + 185);
    int8x16_t v80 = vextq_s8(*(int8x16_t *)(v104 + 24), *(int8x16_t *)(v104 + 24), 8uLL);
    uint64_t v81 = v4;
    uint64_t v6 = *(void *)(v104 + 80);
    uint64_t v5 = *(void *)(v104 + 88);
    id v68 = (void *)v104;
    if (v6 != v5)
    {
      unint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(*(void *)v6 + 24);
        uint64_t v9 = *(void *)(*(void *)v6 + 32);
        uint64_t v10 = *(void *)(*(void *)v6 + 8);
        uint64_t v11 = *(void *)(*(void *)v6 + 16);
        char v12 = *(unsigned char *)(*(void *)v6 + 41);
        char v13 = *(unsigned char *)(*(void *)v6 + 40);
        if (v7 >= (unint64_t)v84)
        {
          int8x16_t v14 = (void *)__p;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - __p) >> 4);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v84 - __p) >> 4) > v16) {
            unint64_t v16 = 0x5555555555555556 * ((uint64_t)(v84 - __p) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v84 - __p) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v17 = 0x555555555555555;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17)
          {
            unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            unint64_t v7 = *((void *)&__p + 1);
            int8x16_t v14 = (void *)__p;
          }
          else
          {
            uint64_t v18 = 0;
          }
          unint64_t v19 = v17 + 48 * v15;
          *(void *)unint64_t v19 = v9;
          *(void *)(v19 + 8) = v8;
          *(void *)(v19 + 16) = v10;
          *(void *)(v19 + 24) = v11;
          *(_WORD *)(v19 + 32) = 1;
          *(unsigned char *)(v19 + 40) = 0;
          *(unsigned char *)(v19 + 41) = v12;
          *(unsigned char *)(v19 + 42) = v13;
          unint64_t v20 = v19;
          if ((void *)v7 != v14)
          {
            do
            {
              long long v21 = *(_OWORD *)(v7 - 48);
              long long v22 = *(_OWORD *)(v7 - 32);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *(_OWORD *)(v20 - 48) = v21;
              *(_OWORD *)(v20 - 32) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while ((void *)v7 != v14);
            int8x16_t v14 = (void *)__p;
          }
          unint64_t v7 = v19 + 48;
          *(void *)&long long __p = v20;
          *((void *)&__p + 1) = v19 + 48;
          *(void *)&long long v84 = v17 + 48 * v18;
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)unint64_t v7 = v9;
          *(void *)(v7 + 8) = v8;
          *(void *)(v7 + 16) = v10;
          *(void *)(v7 + 24) = v11;
          *(_WORD *)(v7 + 32) = 1;
          *(unsigned char *)(v7 + 40) = 0;
          *(unsigned char *)(v7 + 41) = v12;
          *(unsigned char *)(v7 + 42) = v13;
          v7 += 48;
        }
        *((void *)&__p + 1) = v7;
        v6 += 8;
      }
      while (v6 != v5);
    }
    long long v23 = (void *)v68[13];
    if (v23)
    {
      uint64_t v24 = v23[3];
      uint64_t v25 = v23[12];
      uint64_t v26 = v23[14];
      if (v26)
      {
        int8x16_t v27 = *(int8x16_t *)(v26 + 24);
        uint64_t v28 = *(void *)(v26 + 8);
        unsigned __int8 v29 = 1;
        uint64_t v26 = *(void *)(v26 + 16);
      }
      else
      {
        unsigned __int8 v29 = 0;
        int8x16_t v27 = 0uLL;
        uint64_t v28 = 0;
      }
      *((void *)&v84 + 1) = v25;
      v85[0] = v24;
      *(int8x16_t *)&v85[1] = vextq_s8(v27, v27, 8uLL);
      v85[3] = v28;
      v85[4] = v26;
      LOWORD(v85[5]) = v29;
    }
    uint64_t v30 = v68[17];
    uint64_t v31 = v68[18];
    while (v30 != v31)
    {
      int v32 = *(void **)v30;
      uint64_t v33 = *(void *)(*(void *)v30 + 112);
      if (v33)
      {
        int8x16_t v71 = *(int8x16_t *)(v33 + 24);
        uint64_t v34 = *(void *)(v33 + 8);
        char v35 = 1;
        uint64_t v36 = *(void *)(v33 + 16);
      }
      else
      {
        uint64_t v36 = 0;
        char v35 = 0;
        uint64_t v34 = 0;
        int8x16_t v71 = 0u;
      }
      uint64_t v37 = v32[3];
      uint64_t v38 = v32[12];
      uint64_t v39 = v32[18];
      int8x16_t v40 = &v87;
      int8x16_t v41 = &v87;
      __int16 v42 = v87;
      if (v87)
      {
        do
        {
          while (1)
          {
            int8x16_t v41 = (uint64_t **)v42;
            uint64_t v43 = v42[4];
            if (v43 <= v39) {
              break;
            }
            __int16 v42 = *v41;
            int8x16_t v40 = v41;
            if (!*v41) {
              goto LABEL_39;
            }
          }
          if (v43 >= v39)
          {
            uint64_t v45 = (char *)v41;
            goto LABEL_42;
          }
          __int16 v42 = v41[1];
        }
        while (v42);
        int8x16_t v40 = v41 + 1;
      }
LABEL_39:
      uint64_t v45 = (char *)operator new(0x60uLL);
      *((void *)v45 + 4) = v39;
      *(_OWORD *)(v45 + 40) = 0u;
      *(_OWORD *)(v45 + 56) = 0u;
      *(_OWORD *)(v45 + 72) = 0u;
      *((void *)v45 + 11) = 0;
      *(void *)uint64_t v45 = 0;
      *((void *)v45 + 1) = 0;
      *((void *)v45 + 2) = v41;
      *int8x16_t v40 = (uint64_t *)v45;
      int v44 = (uint64_t *)v45;
      if (*v86)
      {
        long long v86 = (uint64_t **)*v86;
        int v44 = *v40;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v87, v44);
      ++v88;
LABEL_42:
      *((void *)v45 + 5) = v38;
      *((void *)v45 + 6) = v37;
      *(int8x16_t *)(v45 + 56) = vextq_s8(v71, v71, 8uLL);
      *((void *)v45 + 9) = v34;
      *((void *)v45 + 10) = v36;
      v45[88] = v35;
      v30 += 8;
      v45[89] = 0;
    }
    uint64_t v46 = v68[5];
    for (uint64_t i = v68[6]; v46 != i; v46 += 8)
    {
      double v49 = *(double *)(*(void *)v46 + 8);
      double v48 = *(double *)(*(void *)v46 + 16);
      if (v49 >= v48) {
        double v50 = *(double *)(*(void *)v46 + 16);
      }
      else {
        double v50 = *(double *)(*(void *)v46 + 8);
      }
      if (v48 < v49) {
        double v48 = *(double *)(*(void *)v46 + 8);
      }
      HKIntervalMask<double>::_insertInterval(v82, v50, v48);
    }
    HDStatisticsBucket<HDStatisticsCumulative>::operator=((uint64_t)v73, (uint64_t)&v76);
    HDStatisticsBucket<HDStatisticsCumulative>::~HDStatisticsBucket((uint64_t)&v76);
  }
  uint64_t v51 = v106;
  uint64_t v52 = v107;
  if (v106 != v107)
  {
    unint64_t v53 = *((void *)&v74 + 1);
    do
    {
      uint64_t v54 = *(void *)(*(void *)v51 + 24);
      uint64_t v55 = *(void *)(*(void *)v51 + 32);
      uint64_t v56 = *(void *)(*(void *)v51 + 8);
      uint64_t v57 = *(void *)(*(void *)v51 + 16);
      if (v53 >= (unint64_t)v75)
      {
        unint64_t v58 = (void *)v74;
        unint64_t v59 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v53 - v74) >> 3);
        unint64_t v60 = v59 + 1;
        if (v59 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(v75 - v74) >> 3) > v60) {
          unint64_t v60 = 0x999999999999999ALL * ((uint64_t)(v75 - v74) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v75 - v74) >> 3) >= 0x333333333333333) {
          unint64_t v61 = 0x666666666666666;
        }
        else {
          unint64_t v61 = v60;
        }
        if (v61)
        {
          unint64_t v61 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v61);
          unint64_t v53 = *((void *)&v74 + 1);
          unint64_t v58 = (void *)v74;
        }
        else
        {
          uint64_t v62 = 0;
        }
        unint64_t v63 = v61 + 40 * v59;
        *(void *)unint64_t v63 = v55;
        *(void *)(v63 + 8) = v54;
        *(void *)(v63 + 16) = v56;
        *(void *)(v63 + 24) = v57;
        *(_WORD *)(v63 + 32) = 1;
        unint64_t v64 = v63;
        if ((void *)v53 != v58)
        {
          do
          {
            long long v65 = *(_OWORD *)(v53 - 40);
            long long v66 = *(_OWORD *)(v53 - 24);
            *(_WORD *)(v64 - 8) = *(_WORD *)(v53 - 8);
            *(_OWORD *)(v64 - 24) = v66;
            *(_OWORD *)(v64 - 40) = v65;
            v64 -= 40;
            v53 -= 40;
          }
          while ((void *)v53 != v58);
          unint64_t v58 = (void *)v74;
        }
        unint64_t v53 = v63 + 40;
        *(void *)&long long v74 = v64;
        *((void *)&v74 + 1) = v63 + 40;
        *(void *)&long long v75 = v61 + 40 * v62;
        if (v58) {
          operator delete(v58);
        }
      }
      else
      {
        *(void *)unint64_t v53 = v55;
        *(void *)(v53 + 8) = v54;
        *(void *)(v53 + 16) = v56;
        *(void *)(v53 + 24) = v57;
        *(_WORD *)(v53 + 32) = 1;
        v53 += 40;
      }
      *((void *)&v74 + 1) = v53;
      v51 += 8;
    }
    while (v51 != v52);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v103);

  HDStatisticsCollectionEngine<HDStatisticsCumulative>::operator=((void *)(v69 + 112), (uint64_t)&v72);
  if ((void)v74)
  {
    *((void *)&v74 + 1) = v74;
    operator delete((void *)v74);
  }
  HDStatisticsBucket<HDStatisticsCumulative>::~HDStatisticsBucket((uint64_t)v73);
}

void sub_1BD12792C(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)(v10 - 224));
  HDStatisticsCollectionEngine<HDStatisticsCumulative>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsAverageSampleDuration>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 154) = 0u;
  *(void *)(a1 + 176) = a1 + 184;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 1065353216;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 1065353216;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 376) = 1065353216;
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_configureForStartTime(uint64_t a1)
{
  uint64_t v29 = 0;
  int8x16_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
    uint64_t v4 = [v2 dateIntervalContainingDate:v3 index:&v29];

    uint64_t v5 = [v4 startDate];
    [v5 timeIntervalSinceReferenceDate];
    double v7 = v6;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
LABEL_5:
    double v13 = v9;

    goto LABEL_6;
  }
  id v10 = *(id *)(a1 + 64);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v11 = [v10 startDate];
    [v11 timeIntervalSinceReferenceDate];
    double v7 = v12;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
    goto LABEL_5;
  }
  double v7 = -1.79769313e308;
  double v13 = 1.79769313e308;
LABEL_6:

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsAverageSampleDuration>::HDStatisticsBucket((uint64_t)v22, WeakRetained, v7, v13);

  if (*(void *)(a1 + 32) == 1) {
    char v24 = 1;
  }
  uint64_t v23 = *(void *)(a1 + 56);
  char v25 = *(unsigned char *)(a1 + 24) & 1;
  if (v28 != (char *)(a1 + 72)) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v28, *(char **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4);
  }
  objc_storeStrong(&v27, *(id *)(a1 + 552));
  if (!*(void *)(a1 + 40)) {
    int v26 = 0;
  }
  uint64_t v15 = v29;
  HDStatisticsBucket<HDStatisticsAverageSampleDuration>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v22);
  uint64_t v18 = v15;
  HDStatisticsBucket<HDStatisticsAverageSampleDuration>::HDStatisticsBucket((uint64_t)v19, (uint64_t)v17);
  long long __p = 0u;
  long long v21 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsCumulative>::operator=((void *)(a1 + 112), (uint64_t)&v18);

  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsCumulative>::~HDStatisticsBucket((uint64_t)v19);
  HDStatisticsBucket<HDStatisticsCumulative>::~HDStatisticsBucket((uint64_t)v17);
  *(unsigned char *)(a1 + 536) = 0;
  return HDStatisticsBucket<HDStatisticsCumulative>::~HDStatisticsBucket((uint64_t)v22);
}

void sub_1BD127D6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsAverageSampleDuration>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 96);
  double v7 = *(unsigned char **)(a2 + 104);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(void *)(a1 + 96) = v10;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(void *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  long long v12 = *(_OWORD *)(a2 + 120);
  long long v13 = *(_OWORD *)(a2 + 136);
  long long v14 = *(_OWORD *)(a2 + 152);
  uint64_t v15 = *(void *)(a2 + 168);
  *(void *)(a1 + 184) = 0;
  unint64_t v16 = (void *)(a1 + 184);
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 168) = v15;
  *(_OWORD *)(a1 + 152) = v14;
  *(_OWORD *)(a1 + 136) = v13;
  *(_OWORD *)(a1 + 120) = v12;
  *(void *)(a1 + 192) = 0;
  unint64_t v17 = *(void **)(a2 + 176);
  if (v17 != (void *)(a2 + 184))
  {
    uint64_t v18 = 0;
    unint64_t v19 = (void *)(a1 + 184);
    while (1)
    {
      uint64_t v20 = v17[4];
      long long v21 = (void *)(a1 + 184);
      if (v19 == v16) {
        goto LABEL_12;
      }
      long long v22 = v18;
      uint64_t v23 = (void *)(a1 + 184);
      if (v18)
      {
        do
        {
          long long v21 = v22;
          long long v22 = (void *)v22[1];
        }
        while (v22);
      }
      else
      {
        do
        {
          long long v21 = (void *)v23[2];
          BOOL v24 = *v21 == (void)v23;
          uint64_t v23 = v21;
        }
        while (v24);
      }
      if (v21[4] < v20)
      {
LABEL_12:
        if (v18) {
          char v25 = (uint64_t **)v21;
        }
        else {
          char v25 = (uint64_t **)(a1 + 184);
        }
        if (v18) {
          int v26 = (uint64_t **)(v21 + 1);
        }
        else {
          int v26 = (uint64_t **)(a1 + 184);
        }
        if (!*v26)
        {
LABEL_28:
          uint64_t v29 = (uint64_t *)operator new(0x60uLL);
          long long v30 = *((_OWORD *)v17 + 2);
          long long v31 = *((_OWORD *)v17 + 3);
          long long v32 = *((_OWORD *)v17 + 5);
          *((_OWORD *)v29 + 4) = *((_OWORD *)v17 + 4);
          *((_OWORD *)v29 + 5) = v32;
          *((_OWORD *)v29 + 2) = v30;
          *((_OWORD *)v29 + 3) = v31;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 176), (uint64_t)v25, v26, v29);
        }
      }
      else
      {
        int v26 = (uint64_t **)(a1 + 184);
        char v25 = (uint64_t **)(a1 + 184);
        if (!v18) {
          goto LABEL_28;
        }
        id v27 = v18;
        while (1)
        {
          while (1)
          {
            char v25 = (uint64_t **)v27;
            uint64_t v28 = v27[4];
            if (v28 <= v20) {
              break;
            }
            id v27 = *v25;
            int v26 = v25;
            if (!*v25) {
              goto LABEL_28;
            }
          }
          if (v28 >= v20) {
            break;
          }
          id v27 = v25[1];
          if (!v27)
          {
            int v26 = v25 + 1;
            goto LABEL_28;
          }
        }
      }
      uint64_t v33 = (void *)v17[1];
      if (v33)
      {
        do
        {
          uint64_t v34 = v33;
          uint64_t v33 = (void *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          uint64_t v34 = (void *)v17[2];
          BOOL v24 = *v34 == (void)v17;
          unint64_t v17 = v34;
        }
        while (!v24);
      }
      if (v34 == (void *)(a2 + 184)) {
        break;
      }
      uint64_t v18 = (void *)*v16;
      unint64_t v19 = *(void **)(a1 + 176);
      unint64_t v17 = v34;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 200, a2 + 200);
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 240), *(const void **)(a2 + 240), *(void *)(a2 + 248), (uint64_t)(*(void *)(a2 + 248) - *(void *)(a2 + 240)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 264, a2 + 264);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 304, a2 + 304);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 344, a2 + 344);
  return a1;
}

void sub_1BD1280AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, id *location, void **a12)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v16);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v15);
  unint64_t v19 = *v14;
  if (*v14)
  {
    *(void *)(v12 + 248) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v13);
  std::__tree<long>::destroy(*v17);
  uint64_t v20 = *a10;
  if (*a10)
  {
    *(void *)(v12 + 104) = v20;
    operator delete(v20);
  }
  objc_destroyWeak(location);
  long long v21 = *a12;
  if (*a12)
  {
    *(void *)(v12 + 72) = v21;
    operator delete(v21);
  }

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_statisticsFromFinishedBucket(uint64_t a1, double *a2)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  double v5 = *a2;
  id v6 = objc_alloc(MEMORY[0x1E4F1C9C8]);
  double v7 = a2 + 5;
  if (v5 != -1.79769313e308) {
    double v7 = a2;
  }
  id v83 = (id)[v6 initWithTimeIntervalSinceReferenceDate:*v7];
  uint64_t v86 = (uint64_t)a2;
  if (a2[1] == 1.79769313e308) {
    uint64_t v8 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:a2[6]];
  }
  else {
    uint64_t v8 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:a2[1]];
  }
  uint64_t v9 = (void *)v8;
  id v10 = *(id *)(a1 + 16);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v11 = *(id *)(a1 + 16);
    if ([v11 shouldUseUnderlyingTypeForStatistics])
    {
      uint64_t v12 = [v11 underlyingSampleType];

      id v10 = (id)v12;
    }
  }
  uint64_t v13 = (void *)[objc_alloc(MEMORY[0x1E4F2B5B0]) initWithDataType:v10 startDate:v83 endDate:v9];
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = a1 + 48;
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      int64_t v85 = v9;
      id v15 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      uint64_t v16 = *(uint64_t **)(v86 + 240);
      unint64_t v17 = *(uint64_t **)(v86 + 248);
      while (v16 != v17)
      {
        uint64_t v18 = *v16;
        id v19 = objc_loadWeakRetained((id *)(a1 + 48));
        uint64_t v20 = [v19 sourceForSourceID:v18];

        if (v20)
        {
          if (([v15 containsObject:v20] & 1) == 0) {
            [v15 addObject:v20];
          }
        }

        ++v16;
      }
      uint64_t v2 = [v15 copy];
      [v13 _setSources:v2];

      uint64_t v9 = v85;
    }
  }

  v91[0] = &unk_1F1725610;
  long long v92 = v91;
  id v84 = v13;
  long long v21 = (void *)MEMORY[0x1E4F2B370];
  long long v22 = [MEMORY[0x1E4F2B618] secondUnit];
  long long v23 = *(_OWORD *)(v86 + 136);
  *(_OWORD *)long long __p = *(_OWORD *)(v86 + 120);
  long long v88 = v23;
  long long v89 = *(_OWORD *)(v86 + 152);
  uint64_t v90 = *(void *)(v86 + 168);
  if (!v92) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  BOOL v24 = objc_msgSend(v21, "quantityWithUnit:doubleValue:", v22, *(double *)(*(uint64_t (**)(void *, void **))(*v92 + 48))(v92, __p));
  [v84 setDuration:v24];

  long long v25 = *(_OWORD *)(v86 + 136);
  *(_OWORD *)long long __p = *(_OWORD *)(v86 + 120);
  long long v88 = v25;
  long long v89 = *(_OWORD *)(v86 + 152);
  uint64_t v90 = *(void *)(v86 + 168);
  if (!v92) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  objc_msgSend(v84, "setDataCount:", *(void *)((*(uint64_t (**)(void *, void **))(*v92 + 48))(v92, __p) + 8));
  long long v26 = *(_OWORD *)(v86 + 136);
  *(_OWORD *)long long __p = *(_OWORD *)(v86 + 120);
  long long v88 = v26;
  long long v89 = *(_OWORD *)(v86 + 152);
  uint64_t v90 = *(void *)(v86 + 168);
  if (!v92) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v27 = (*(uint64_t (**)(void *, void **))(*v92 + 48))(v92, __p);
  uint64_t v28 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", *(double *)(v27 + 24), *(double *)(v27 + 32));
  [v84 setMostRecentQuantityDateInterval:v28];

  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    goto LABEL_123;
  }
  id v82 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v81 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v80 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  *(_OWORD *)long long __p = 0u;
  long long v88 = 0u;
  LODWORD(v89) = 1065353216;
  uint64_t v29 = *(void **)(v86 + 176);
  if (v29 == (void *)(v86 + 184)) {
    goto LABEL_122;
  }
  do
  {
    long long v30 = HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_bundleIdentifierForSourceID(v86, v29[4]);
    long long v31 = v30;
    if (!v30) {
      goto LABEL_100;
    }
    unint64_t v32 = [v30 hash];
    unint64_t v33 = v32;
    unint64_t v34 = (unint64_t)__p[1];
    if (!__p[1]) {
      goto LABEL_43;
    }
    uint8x8_t v35 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v35.i16[0] = vaddlv_u8(v35);
    unint64_t v36 = v35.u32[0];
    if (v35.u32[0] > 1uLL)
    {
      uint64_t v2 = v32;
      if ((void *)v32 >= __p[1]) {
        uint64_t v2 = v32 % (unint64_t)__p[1];
      }
    }
    else
    {
      uint64_t v2 = ((unint64_t)__p[1] - 1) & v32;
    }
    uint64_t v37 = (void **)*((void *)__p[0] + v2);
    if (!v37 || (uint64_t v38 = (char *)*v37) == 0)
    {
LABEL_43:
      uint64_t v38 = (char *)operator new(0x50uLL);
      *(void *)uint64_t v38 = 0;
      *((void *)v38 + 1) = v33;
      *((void *)v38 + 2) = v31;
      *(_OWORD *)(v38 + 24) = 0u;
      *(_OWORD *)(v38 + 40) = 0u;
      *(_OWORD *)(v38 + 56) = 0u;
      *((void *)v38 + 9) = 0;
      float v44 = (float)(unint64_t)(*((void *)&v88 + 1) + 1);
      if (v34 && (float)(*(float *)&v89 * (float)v34) >= v44)
      {
LABEL_89:
        unint64_t v60 = __p[0];
        unint64_t v61 = (void *)*((void *)__p[0] + v2);
        if (v61)
        {
          *(void *)uint64_t v38 = *v61;
        }
        else
        {
          *(void *)uint64_t v38 = v88;
          *(void *)&long long v88 = v38;
          v60[v2] = &v88;
          if (!*(void *)v38)
          {
LABEL_98:
            ++*((void *)&v88 + 1);
            goto LABEL_99;
          }
          unint64_t v62 = *(void *)(*(void *)v38 + 8);
          if ((v34 & (v34 - 1)) != 0)
          {
            if (v62 >= v34) {
              v62 %= v34;
            }
          }
          else
          {
            v62 &= v34 - 1;
          }
          unint64_t v61 = (char *)__p[0] + 8 * v62;
        }
        void *v61 = v38;
        goto LABEL_98;
      }
      BOOL v45 = (v34 & (v34 - 1)) != 0;
      if (v34 < 3) {
        BOOL v45 = 1;
      }
      unint64_t v46 = v45 | (2 * v34);
      unint64_t v47 = vcvtps_u32_f32(v44 / *(float *)&v89);
      if (v46 <= v47) {
        int8x8_t prime = (int8x8_t)v47;
      }
      else {
        int8x8_t prime = (int8x8_t)v46;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v34 = (unint64_t)__p[1];
      if ((void *)*(void *)&prime > __p[1]) {
        goto LABEL_55;
      }
      if ((void *)*(void *)&prime < __p[1])
      {
        unint64_t v55 = vcvtps_u32_f32((float)*((unint64_t *)&v88 + 1) / *(float *)&v89);
        if (__p[1] < (void *)3
          || (uint8x8_t v56 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v56.i16[0] = vaddlv_u8(v56), v56.u32[0] > 1uLL))
        {
          unint64_t v55 = std::__next_prime(v55);
        }
        else
        {
          uint64_t v57 = 1 << -(char)__clz(v55 - 1);
          if (v55 >= 2) {
            unint64_t v55 = v57;
          }
        }
        if (*(void *)&prime <= v55) {
          int8x8_t prime = (int8x8_t)v55;
        }
        if (*(void *)&prime >= v34)
        {
          unint64_t v34 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_55:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            double v49 = operator new(8 * *(void *)&prime);
            double v50 = __p[0];
            __p[0] = v49;
            if (v50) {
              operator delete(v50);
            }
            uint64_t v51 = 0;
            __p[1] = (void *)prime;
            do
              *((void *)__p[0] + v51++) = 0;
            while (*(void *)&prime != v51);
            uint64_t v52 = (void **)v88;
            if ((void)v88)
            {
              unint64_t v53 = *(void *)(v88 + 8);
              uint8x8_t v54 = (uint8x8_t)vcnt_s8(prime);
              v54.i16[0] = vaddlv_u8(v54);
              if (v54.u32[0] > 1uLL)
              {
                if (v53 >= *(void *)&prime) {
                  v53 %= *(void *)&prime;
                }
              }
              else
              {
                v53 &= *(void *)&prime - 1;
              }
              *((void *)__p[0] + v53) = &v88;
              for (i = *v52; i; unint64_t v53 = v59)
              {
                unint64_t v59 = i[1];
                if (v54.u32[0] > 1uLL)
                {
                  if (v59 >= *(void *)&prime) {
                    v59 %= *(void *)&prime;
                  }
                }
                else
                {
                  v59 &= *(void *)&prime - 1;
                }
                if (v59 != v53)
                {
                  if (!*((void *)__p[0] + v59))
                  {
                    *((void *)__p[0] + v59) = v52;
                    goto LABEL_80;
                  }
                  *uint64_t v52 = (void *)*i;
                  void *i = **((void **)__p[0] + v59);
                  **((void **)__p[0] + v59) = i;
                  uint64_t i = v52;
                }
                unint64_t v59 = v53;
LABEL_80:
                uint64_t v52 = (void **)i;
                uint64_t i = (void *)*i;
              }
            }
            unint64_t v34 = (unint64_t)prime;
            goto LABEL_84;
          }
          uint64_t v69 = __p[0];
          __p[0] = 0;
          if (v69) {
            operator delete(v69);
          }
          unint64_t v34 = 0;
          __p[1] = 0;
        }
      }
LABEL_84:
      if ((v34 & (v34 - 1)) != 0)
      {
        if (v33 >= v34) {
          uint64_t v2 = v33 % v34;
        }
        else {
          uint64_t v2 = v33;
        }
      }
      else
      {
        uint64_t v2 = (v34 - 1) & v33;
      }
      goto LABEL_89;
    }
    unint64_t v79 = (unint64_t)__p[1] - 1;
    while (1)
    {
      unint64_t v39 = *((void *)v38 + 1);
      if (v39 == v33) {
        break;
      }
      if (v36 > 1)
      {
        if (v39 >= v34) {
          v39 %= v34;
        }
      }
      else
      {
        v39 &= v79;
      }
      if (v39 != v2) {
        goto LABEL_43;
      }
LABEL_42:
      uint64_t v38 = *(char **)v38;
      if (!v38) {
        goto LABEL_43;
      }
    }
    id v40 = *((id *)v38 + 2);
    id v41 = v31;
    __int16 v42 = v41;
    if (v40 != v41)
    {
      char v43 = [v40 isEqualToString:v41];

      if (v43) {
        goto LABEL_99;
      }
      goto LABEL_42;
    }

LABEL_99:
    long long v63 = *(_OWORD *)(v29 + 5);
    long long v64 = *(_OWORD *)(v29 + 7);
    long long v65 = *(_OWORD *)(v29 + 9);
    *((void *)v38 + 9) = v29[11];
    *(_OWORD *)(v38 + 56) = v65;
    *(_OWORD *)(v38 + 40) = v64;
    *(_OWORD *)(v38 + 24) = v63;

LABEL_100:
    long long v66 = (void *)v29[1];
    if (v66)
    {
      do
      {
        id v67 = v66;
        long long v66 = (void *)*v66;
      }
      while (v66);
    }
    else
    {
      do
      {
        id v67 = (void *)v29[2];
        BOOL v68 = *v67 == (void)v29;
        uint64_t v29 = v67;
      }
      while (!v68);
    }
    uint64_t v29 = v67;
  }
  while (v67 != (void *)(v86 + 184));
  for (uint64_t j = (uint64_t **)v88; j; uint64_t j = (uint64_t **)*j)
  {
    int8x16_t v71 = j[2];
    uint64_t v72 = (void *)MEMORY[0x1E4F2B370];
    uint64_t v73 = [MEMORY[0x1E4F2B618] secondUnit];
    if (!v92) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    long long v74 = objc_msgSend(v72, "quantityWithUnit:doubleValue:", v73, *(double *)(*(uint64_t (**)(void *, uint64_t *))(*v92 + 48))(v92, (uint64_t *)j + 3));
    [v82 setObject:v74 forKeyedSubscript:v71];

    if (!v92) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    long long v75 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)((*(uint64_t (**)(void *, uint64_t *))(*v92 + 48))(v92, (uint64_t *)j + 3) + 8));
    [v81 setObject:v75 forKeyedSubscript:v71];

    if (!v92) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v76 = (*(uint64_t (**)(void *, uint64_t *))(*v92 + 48))(v92, (uint64_t *)j + 3);
    uint64_t v77 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", *(double *)(v76 + 24), *(double *)(v76 + 32));
    [v80 setObject:v77 forKeyedSubscript:v71];
  }
LABEL_122:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>>>::~__hash_table((uint64_t)__p);
  [v84 setDurationBySource:v82];
  [v84 setDataCountBySource:v81];
  [v84 setMostRecentQuantityDateIntervalBySource:v80];

LABEL_123:
  std::__function::__value_func<HDStatisticsAverageSampleDuration const& ()(HDStatisticsAverageSampleDuration const&)>::~__value_func[abi:ne180100](v91);

  return v84;
}

void sub_1BD128BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_updateSourceOrder(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 240);
  uint64_t v1 = *(void *)(a1 + 240);
  unint64_t v3 = *(void *)(a1 + 224);
  if (v3 != (*(void *)(a1 + 248) - v1) >> 3)
  {
    *(void *)(a1 + 248) = v1;
    std::vector<long long>::reserve((void **)(a1 + 240), v3);
    double v5 = *(void **)(a1 + 216);
    if (v5)
    {
      id v6 = *(char **)(a1 + 248);
      do
      {
        uint64_t v7 = v5[2];
        unint64_t v8 = *(void *)(a1 + 256);
        if ((unint64_t)v6 >= v8)
        {
          id v10 = (char *)*v2;
          uint64_t v11 = (v6 - (unsigned char *)*v2) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            id v10 = *(char **)(a1 + 240);
            id v6 = *(char **)(a1 + 248);
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v16 = (void *)(v14 + 8 * v11);
          void *v16 = v7;
          uint64_t v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            uint64_t v17 = *((void *)v6 - 1);
            v6 -= 8;
            *--uint64_t v16 = v17;
          }
          *(void *)(a1 + 240) = v16;
          *(void *)(a1 + 248) = v9;
          *(void *)(a1 + 256) = v14 + 8 * v15;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)id v6 = v7;
          uint64_t v9 = v6 + 8;
        }
        *(void *)(a1 + 248) = v9;
        double v5 = (void *)*v5;
        id v6 = v9;
      }
      while (v5);
    }
    uint64_t v18 = (id *)(a1 + 88);
    id WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      id v20 = objc_loadWeakRetained(v18);
      [v20 orderSourceIDs:v2];
    }
  }
}

void sub_1BD128F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2) {
    a2 = v4 * floor(a2 / v4);
  }
  double v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    long long v117 = (void **)(a1 + 96);
    long long v111 = (void *)(a1 + 184);
    location = (id *)(a1 + 88);
    do
    {
      id v6 = *(long long **)(a1 + 96);
      uint64_t v7 = *(long long **)(a1 + 104);
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (v7 - v6);
      if (v8)
      {
        if (v8 != 1)
        {
          double v13 = a2;
          double v14 = a2;
          double v15 = v5;
          uint64_t v16 = *(void *)(a1 + 96);
          if (v6 != v7)
          {
            do
            {
              double v17 = *(double *)(v16 + 8);
              double v18 = *(double *)(v16 + 16);
              if (v17 > v15 && v17 < v14) {
                double v14 = *(double *)(v16 + 8);
              }
              if (v18 > v5) {
                double v20 = *(double *)(v16 + 16);
              }
              else {
                double v20 = v13;
              }
              if (v18 < v13)
              {
                double v15 = v5;
                double v13 = v20;
              }
              v16 += 48;
            }
            while ((long long *)v16 != v7);
          }
          if (v13 >= v14) {
            double v21 = v14;
          }
          else {
            double v21 = v13;
          }
          double v22 = *(double *)(a1 + 16);
          if (v22 > 0.0)
          {
            double v23 = v22 * floor(v21 / v22);
            double v24 = v22 * floor((v22 + v5) / v22);
            if (v23 >= v24) {
              double v21 = v23;
            }
            else {
              double v21 = v24;
            }
          }
          *long long v117 = 0;
          v117[1] = 0;
          v117[2] = 0;
          if (v6 != v7)
          {
            if (v8 > 0x555555555555555) {
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            }
            long long v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v8);
            uint64_t v28 = *(char **)(a1 + 96);
            uint64_t v27 = *(char **)(a1 + 104);
            uint64_t v29 = v25;
            if (v27 != v28)
            {
              do
              {
                long long v30 = *((_OWORD *)v27 - 3);
                long long v31 = *((_OWORD *)v27 - 2);
                *(_OWORD *)(v29 - 21) = *(_OWORD *)(v27 - 21);
                *((_OWORD *)v29 - 3) = v30;
                *((_OWORD *)v29 - 2) = v31;
                v29 -= 48;
                v27 -= 48;
              }
              while (v27 != v28);
              uint64_t v27 = (char *)*v117;
            }
            *(void *)(a1 + 96) = v29;
            *(void *)(a1 + 104) = v25;
            *(void *)(a1 + 112) = &v25[48 * v26];
            if (v27) {
              operator delete(v27);
            }
          }
          HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_updateSourceOrder(a1);
          long long v113 = v6;
          id WeakRetained = objc_loadWeakRetained(location);

          if (WeakRetained)
          {
            uint64_t v120 = a1;
            unint64_t v33 = 126 - 2 * __clz(v8);
            if (v113 == v7) {
              uint64_t v34 = 0;
            }
            else {
              uint64_t v34 = v33;
            }
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_SampleRemainder*,false>((unint64_t)v113, v7, (uint64_t)&v120, v34, 1);
          }
          if (*(unsigned char *)(a1 + 25)) {
            id v114 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
          }
          else {
            id v114 = 0;
          }
          if (v113 == v7)
          {
LABEL_130:
            long long v100 = *(void **)(a1 + 176);
            if (v100 != v111)
            {
              do
              {
                long long v101 = (void *)v100[1];
                if (v101)
                {
                  do
                  {
                    int v102 = v101;
                    long long v101 = (void *)*v101;
                  }
                  while (v101);
                }
                else
                {
                  do
                  {
                    int v102 = (void *)v100[2];
                    BOOL v103 = *v102 == (void)v100;
                    long long v100 = v102;
                  }
                  while (!v103);
                }
                long long v100 = v102;
              }
              while (v102 != v111);
            }
            *(double *)(a1 + 56) = v21;

            if (v113) {
              operator delete(v113);
            }
            goto LABEL_147;
          }
          unint64_t v115 = 0;
          long long v116 = v7;
          char v39 = 0;
          id v40 = v113;
          while (2)
          {
            char v119 = 0;
            uint64_t v41 = *(void *)v40;
            double v42 = *((double *)v40 + 1);
            double v43 = *((double *)v40 + 2);
            unint64_t v44 = *((void *)v40 + 3);
            char v118 = *((unsigned char *)v40 + 32);
            if (v118) {
              BOOL v45 = v42 > v21;
            }
            else {
              BOOL v45 = 0;
            }
            if (v45)
            {
              char v46 = *((unsigned char *)v40 + 33);
              char v119 = v118;
              double v48 = &v118;
              unint64_t v47 = v44;
              double v49 = v43;
              double v50 = v42;
            }
            else
            {
              char v46 = 0;
              unint64_t v47 = 0;
              double v48 = &v119;
              double v49 = 0.0;
              double v50 = 0.0;
              uint64_t v41 = 0;
            }
            *double v48 = 0;
            if (v118)
            {
              for (uint64_t i = *(double **)(a1 + 64); i != *(double **)(a1 + 72) && v42 >= *i; i += 2)
              {
                if (v42 < i[1])
                {
                  char v118 = 0;
                  int v68 = *((unsigned __int8 *)v40 + 42);
                  char v52 = *((unsigned char *)v40 + 41);
                  char v53 = *((unsigned char *)v40 + 40);
                  goto LABEL_106;
                }
              }
              char v52 = *((unsigned char *)v40 + 41);
              char v53 = *((unsigned char *)v40 + 40);
              if (v39)
              {
                if (v115 == v44 || *(unsigned char *)(a1 + 24))
                {
                  double v54 = v43 - v42;
                  uint64_t v55 = *(void *)(a1 + 128);
                  if (v55)
                  {
                    uint64_t v56 = v55 + 1;
                    double v54 = *(double *)(a1 + 120) + (v54 - *(double *)(a1 + 120)) / (double)v56;
                  }
                  else
                  {
                    uint64_t v56 = 1;
                  }
                  goto LABEL_85;
                }
                int v68 = *((unsigned __int8 *)v40 + 42);
              }
              else
              {
                double v54 = v43 - v42;
                uint64_t v62 = *(void *)(a1 + 128);
                if (v62)
                {
                  uint64_t v56 = v62 + 1;
                  double v54 = *(double *)(a1 + 120) + (v54 - *(double *)(a1 + 120)) / (double)v56;
                }
                else
                {
                  uint64_t v56 = 1;
                }
                unint64_t v115 = v44;
LABEL_85:
                *(double *)(a1 + 120) = v54;
                *(void *)(a1 + 128) = v56;
                int v68 = 1;
              }
              if (*(unsigned char *)(a1 + 25))
              {
                uint64_t v69 = HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_bundleIdentifierForSourceID(a1, v44);
                if (v69)
                {
                  id v70 = [v114 objectForKeyedSubscript:v69];
                  int8x16_t v71 = v70;
                  if (v70)
                  {
                    if ([v70 longLongValue] != v44 && !*(unsigned char *)(a1 + 24)) {
                      goto LABEL_103;
                    }
                  }
                  else
                  {
                    uint64_t v72 = [NSNumber numberWithLongLong:v44];
                    [v114 setObject:v72 forKeyedSubscript:v69];
                  }
                  unint64_t v73 = HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_canonicalSourceIDForSourceID(a1, v44);
                  long long v74 = HDStatisticsBucket<HDStatisticsCumulative>::_statisticsForSource(a1, v73);
                  double v75 = v43 - v42;
                  uint64_t v76 = v74[1];
                  if (v76)
                  {
                    uint64_t v77 = (uint64_t)v76 + 1;
                    double v75 = *(double *)v74 + (v75 - *(double *)v74) / (double)v77;
                  }
                  else
                  {
                    uint64_t v77 = 1;
                  }
                  *(double *)long long v74 = v75;
                  v74[1] = (uint64_t *)v77;
                  char v52 = 1;
LABEL_103:
                }
              }
              char v39 = 1;
LABEL_106:
              char v87 = v119;
              if (v119)
              {
                BOOL v88 = v68 != 0;
                uint64_t v90 = *(char **)(a1 + 104);
                unint64_t v89 = *(void *)(a1 + 112);
                if ((unint64_t)v90 < v89)
                {
                  *(void *)uint64_t v90 = v41;
                  *((double *)v90 + 1) = v50;
                  *((double *)v90 + 2) = v49;
                  *((void *)v90 + 3) = v47;
                  v90[32] = v87;
                  v90[33] = v46;
                  v90[40] = v53;
                  v90[41] = v52;
                  unint64_t v61 = v90 + 48;
                  v90[42] = v88;
                  uint64_t v7 = v116;
                  goto LABEL_126;
                }
                uint64_t v86 = (char *)*v117;
                unint64_t v91 = 0xAAAAAAAAAAAAAAABLL * ((v90 - (unsigned char *)*v117) >> 4);
                unint64_t v92 = v91 + 1;
                if (v91 + 1 > 0x555555555555555) {
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v93 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v89 - (void)v86) >> 4);
                if (2 * v93 > v92) {
                  unint64_t v92 = 2 * v93;
                }
                if (v93 >= 0x2AAAAAAAAAAAAAALL) {
                  unint64_t v94 = 0x555555555555555;
                }
                else {
                  unint64_t v94 = v92;
                }
                if (v94)
                {
                  unint64_t v94 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v94);
                  uint64_t v86 = *(char **)(a1 + 96);
                  uint64_t v90 = *(char **)(a1 + 104);
                }
                else
                {
                  uint64_t v95 = 0;
                }
                unint64_t v96 = v94 + 48 * v91;
                *(void *)unint64_t v96 = v41;
                *(double *)(v96 + 8) = v50;
                *(double *)(v96 + 16) = v49;
                *(void *)(v96 + 24) = v47;
                *(unsigned char *)(v96 + 32) = v87;
                *(unsigned char *)(v96 + 33) = v46;
                *(unsigned char *)(v96 + 40) = v53;
                *(unsigned char *)(v96 + 41) = v52;
                *(unsigned char *)(v96 + 42) = v88;
                unint64_t v97 = v96;
                if (v90 == v86)
                {
                  uint64_t v7 = v116;
                }
                else
                {
                  uint64_t v7 = v116;
                  do
                  {
                    long long v98 = *((_OWORD *)v90 - 3);
                    long long v99 = *((_OWORD *)v90 - 2);
                    *(_OWORD *)(v97 - 21) = *(_OWORD *)(v90 - 21);
                    *(_OWORD *)(v97 - 48) = v98;
                    *(_OWORD *)(v97 - 32) = v99;
                    v97 -= 48;
                    v90 -= 48;
                  }
                  while (v90 != v86);
                  uint64_t v86 = (char *)*v117;
                }
                unint64_t v61 = (_OWORD *)(v96 + 48);
                *(void *)(a1 + 96) = v97;
                *(void *)(a1 + 104) = v96 + 48;
                *(void *)(a1 + 112) = v94 + 48 * v95;
                if (v86) {
LABEL_125:
                }
                  operator delete(v86);
                goto LABEL_126;
              }
              uint64_t v7 = v116;
            }
            else
            {
              uint64_t v57 = *(long long **)(a1 + 104);
              unint64_t v58 = *(void *)(a1 + 112);
              if ((unint64_t)v57 < v58)
              {
                long long v59 = *v40;
                long long v60 = v40[2];
                v57[1] = v40[1];
                v57[2] = v60;
                long long *v57 = v59;
                unint64_t v61 = v57 + 3;
                goto LABEL_126;
              }
              unint64_t v63 = 0xAAAAAAAAAAAAAAABLL * (((char *)v57 - (unsigned char *)*v117) >> 4);
              unint64_t v64 = v63 + 1;
              if (v63 + 1 > 0x555555555555555) {
                std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - (void)*v117) >> 4);
              if (2 * v65 > v64) {
                unint64_t v64 = 2 * v65;
              }
              if (v65 >= 0x2AAAAAAAAAAAAAALL) {
                unint64_t v66 = 0x555555555555555;
              }
              else {
                unint64_t v66 = v64;
              }
              if (v66) {
                unint64_t v66 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v66);
              }
              else {
                uint64_t v67 = 0;
              }
              __int16 v78 = (long long *)(v66 + 48 * v63);
              long long v79 = *v40;
              long long v80 = v40[2];
              v78[1] = v40[1];
              v78[2] = v80;
              *__int16 v78 = v79;
              id v82 = *(char **)(a1 + 96);
              id v81 = *(char **)(a1 + 104);
              id v83 = v78;
              if (v81 != v82)
              {
                do
                {
                  long long v84 = *((_OWORD *)v81 - 3);
                  long long v85 = *((_OWORD *)v81 - 2);
                  *(long long *)((char *)v83 - 21) = *(_OWORD *)(v81 - 21);
                  *(v83 - 3) = v84;
                  *(v83 - 2) = v85;
                  v83 -= 3;
                  v81 -= 48;
                }
                while (v81 != v82);
                id v81 = (char *)*v117;
              }
              unint64_t v61 = v78 + 3;
              *(void *)(a1 + 96) = v83;
              *(void *)(a1 + 104) = v78 + 3;
              *(void *)(a1 + 112) = v66 + 48 * v67;
              if (v81)
              {
                uint64_t v86 = v81;
                goto LABEL_125;
              }
LABEL_126:
              *(void *)(a1 + 104) = v61;
            }
            v40 += 3;
            if (v40 == v7) {
              goto LABEL_130;
            }
            continue;
          }
        }
        double v9 = *((double *)v6 + 1);
        double v10 = *((double *)v6 + 2);
        unint64_t v11 = *((void *)v6 + 3);
        for (uint64_t j = *(double **)(a1 + 64); j != *(double **)(a1 + 72) && v9 >= *j; j += 2)
        {
          if (v9 < j[1]) {
            goto LABEL_145;
          }
        }
        if (*((unsigned char *)v6 + 32))
        {
          double v35 = v10 - v9;
          uint64_t v36 = *(void *)(a1 + 128);
          if (v36)
          {
            uint64_t v37 = v36 + 1;
            double v38 = *(double *)(a1 + 120) + (v35 - *(double *)(a1 + 120)) / (double)v37;
          }
          else
          {
            double v38 = v10 - v9;
            uint64_t v37 = 1;
          }
          *(double *)(a1 + 120) = v38;
          *(void *)(a1 + 128) = v37;
          if (*(unsigned char *)(a1 + 25))
          {
            unint64_t v104 = HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_canonicalSourceIDForSourceID(a1, v11);
            uint64_t v105 = HDStatisticsBucket<HDStatisticsCumulative>::_statisticsForSource(a1, v104);
            uint64_t v106 = v105[1];
            if (v106)
            {
              uint64_t v107 = (uint64_t)v106 + 1;
              double v35 = *(double *)v105 + (v35 - *(double *)v105) / (double)v107;
            }
            else
            {
              uint64_t v107 = 1;
            }
            *(double *)uint64_t v105 = v35;
            v105[1] = (uint64_t *)v107;
            id v6 = (long long *)*v117;
          }
        }
LABEL_145:
        *(void *)(a1 + 104) = v6;
      }
      *(double *)(a1 + 56) = a2;
LABEL_147:
      double v108 = *(double *)(a1 + 56);
      if (v108 == v5)
      {
        int v109 = [MEMORY[0x1E4F28B00] currentHandler];
        long long v110 = [NSString stringWithUTF8String:"void HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_mergeThroughTime(double) [Statistics = HDStatisticsAverageSampleDuration]"];
        [v109 handleFailureInFunction:v110 file:@"HDStatisticsBucket.hpp" lineNumber:234 description:@"Failed to make forward progress during statistics merge."];

        double v108 = *(double *)(a1 + 56);
      }
      double v5 = v108;
    }
    while (v108 < a2);
  }
}

void sub_1BD1297D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  _Unwind_Resume(a1);
}

unint64_t HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    double v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((void *)(a1 + 264), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_bundleIdentifierForSourceID(a1, a2);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      id v10 = v6;
      uint64_t v7 = (void *)(a1 + 304);
      unint64_t v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        unint64_t v11 = &v10;
        *((void *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        id v6 = v10;
      }
    }
  }
  return a2;
}

void sub_1BD129914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  double v4 = (id *)(a1 + 88);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    id v6 = (void *)(a1 + 344);
    uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
    if (v7)
    {
      id v8 = (id)v7[3];
    }
    else
    {
      id v9 = objc_loadWeakRetained(v4);
      id v8 = [v9 bundleIdentifierForSourceID:a2];

      if (v8)
      {
        id v10 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
        objc_storeStrong(v10 + 3, v8);
      }
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1BD1299F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v12 = a2 - 3;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 4);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v103 = *((void *)a2 - 3);
                uint64_t v104 = *(void *)(v13 + 24);
                if (v103 == v104) {
                  return;
                }
                uint64_t v105 = *(char **)(*(void *)a3 + 240);
                uint64_t v106 = *(char **)(*(void *)a3 + 248);
                uint64_t v107 = v105;
                double v108 = v105;
                if (v105 == v106) {
                  goto LABEL_171;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>((long long *)v13, (long long *)(v13 + 48), a2 - 3, a3);
                return;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, (uint64_t)(a2 - 3), a3);
                return;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, v13 + 144, (uint64_t)(a2 - 3), a3);
                return;
              default:
                JUMPOUT(0);
            }
            do
            {
              if (*(void *)v108 == v103) {
                goto LABEL_168;
              }
              v108 += 8;
            }
            while (v108 != v106);
            double v108 = *(char **)(*(void *)a3 + 248);
LABEL_168:
            while (*(void *)v107 != v104)
            {
              v107 += 8;
              if (v107 == v106)
              {
                uint64_t v107 = *(char **)(*(void *)a3 + 248);
                break;
              }
            }
LABEL_171:
            if (v108 - v105 < v107 - v105)
            {
              *(_OWORD *)v226 = *(_OWORD *)(v13 + 16);
              *(_OWORD *)&v226[16] = *(_OWORD *)(v13 + 32);
              long long v218 = *(_OWORD *)v13;
              long long v109 = *v12;
              long long v110 = *(a2 - 2);
              *(_OWORD *)(v13 + 27) = *(long long *)((char *)a2 - 21);
              *(_OWORD *)unint64_t v13 = v109;
              *(_OWORD *)(v13 + 16) = v110;
              *(long long *)((char *)a2 - 21) = *(_OWORD *)&v226[11];
              long long *v12 = v218;
              *(a2 - 2) = *(_OWORD *)v226;
            }
            return;
          }
          if (v14 <= 1151)
          {
            long long v111 = (long long *)(v13 + 48);
            BOOL v113 = (long long *)v13 == a2 || v111 == a2;
            if (a5)
            {
              if (!v113)
              {
                unint64_t v114 = v13;
                do
                {
                  unint64_t v115 = v114;
                  unint64_t v114 = (unint64_t)v111;
                  uint64_t v116 = *(void *)(v115 + 72);
                  uint64_t v117 = *(void *)(v115 + 24);
                  if (v116 != v117)
                  {
                    char v118 = *(char **)(*(void *)a3 + 240);
                    char v119 = *(char **)(*(void *)a3 + 248);
                    uint64_t v120 = v118;
                    long long v121 = v118;
                    if (v118 != v119)
                    {
                      do
                      {
                        if (*(void *)v121 == v116) {
                          goto LABEL_196;
                        }
                        v121 += 8;
                      }
                      while (v121 != v119);
                      long long v121 = *(char **)(*(void *)a3 + 248);
LABEL_196:
                      while (*(void *)v120 != v117)
                      {
                        v120 += 8;
                        if (v120 == v119)
                        {
                          uint64_t v120 = *(char **)(*(void *)a3 + 248);
                          break;
                        }
                      }
                    }
                    if (v121 - v118 < v120 - v118)
                    {
                      uint64_t v227 = *(void *)(v114 + 16);
                      long long v219 = *(_OWORD *)v114;
                      long long v236 = *(_OWORD *)(v115 + 80);
                      unint64_t v122 = v114;
                      while (1)
                      {
                        long long v123 = *(_OWORD *)(v115 + 16);
                        *(_OWORD *)unint64_t v122 = *(_OWORD *)v115;
                        *(_OWORD *)(v122 + 16) = v123;
                        *(_OWORD *)(v122 + 27) = *(_OWORD *)(v115 + 27);
                        if (v115 == v13) {
                          break;
                        }
                        unint64_t v122 = v115;
                        uint64_t v124 = *(void *)(v115 - 24);
                        if (v116 != v124)
                        {
                          uint64_t v125 = *(char **)(*(void *)a3 + 240);
                          uint64_t v126 = *(char **)(*(void *)a3 + 248);
                          uint64_t v127 = v125;
                          uint64_t v128 = v125;
                          if (v125 != v126)
                          {
                            do
                            {
                              if (*(void *)v128 == v116) {
                                goto LABEL_208;
                              }
                              v128 += 8;
                            }
                            while (v128 != v126);
                            uint64_t v128 = *(char **)(*(void *)a3 + 248);
LABEL_208:
                            while (*(void *)v127 != v124)
                            {
                              v127 += 8;
                              if (v127 == v126)
                              {
                                uint64_t v127 = *(char **)(*(void *)a3 + 248);
                                break;
                              }
                            }
                          }
                          unint64_t v115 = v122 - 48;
                          if (v128 - v125 < v127 - v125) {
                            continue;
                          }
                        }
                        goto LABEL_212;
                      }
                      unint64_t v122 = v13;
LABEL_212:
                      *(_OWORD *)unint64_t v122 = v219;
                      *(void *)(v122 + 16) = v227;
                      *(void *)(v122 + 24) = v116;
                      *(void *)(v122 + 32) = v236;
                      *(_DWORD *)(v122 + 39) = *(_DWORD *)((char *)&v236 + 7);
                    }
                  }
                  long long v111 = (long long *)(v114 + 48);
                }
                while ((long long *)(v114 + 48) != a2);
              }
            }
            else if (!v113)
            {
              do
              {
                unint64_t v201 = a1;
                a1 = (unint64_t)v111;
                uint64_t v202 = *(void *)(v201 + 72);
                uint64_t v203 = *(void *)(v201 + 24);
                if (v202 != v203)
                {
                  v204 = *(char **)(*(void *)a3 + 240);
                  v205 = *(char **)(*(void *)a3 + 248);
                  v206 = v204;
                  v207 = v204;
                  if (v204 != v205)
                  {
                    do
                    {
                      if (*(void *)v207 == v202) {
                        goto LABEL_312;
                      }
                      v207 += 8;
                    }
                    while (v207 != v205);
                    v207 = *(char **)(*(void *)a3 + 248);
LABEL_312:
                    while (*(void *)v206 != v203)
                    {
                      v206 += 8;
                      if (v206 == v205)
                      {
                        v206 = *(char **)(*(void *)a3 + 248);
                        break;
                      }
                    }
                  }
                  if (v207 - v204 < v206 - v204)
                  {
                    uint64_t v230 = *(void *)(a1 + 16);
                    long long v222 = *(_OWORD *)a1;
                    long long v239 = *(_OWORD *)(v201 + 80);
                    unint64_t v208 = a1;
                    do
                    {
                      v209 = (_OWORD *)v208;
                      unint64_t v208 = v201;
                      long long v210 = *(_OWORD *)(v201 + 16);
                      _OWORD *v209 = *(_OWORD *)v201;
                      v209[1] = v210;
                      *(_OWORD *)((char *)v209 + 27) = *(_OWORD *)(v201 + 27);
                      uint64_t v211 = *(void *)(v201 - 24);
                      if (v202 == v211) {
                        break;
                      }
                      v212 = *(char **)(*(void *)a3 + 240);
                      v213 = *(char **)(*(void *)a3 + 248);
                      v214 = v212;
                      v215 = v212;
                      if (v212 != v213)
                      {
                        do
                        {
                          if (*(void *)v215 == v202) {
                            goto LABEL_322;
                          }
                          v215 += 8;
                        }
                        while (v215 != v213);
                        v215 = *(char **)(*(void *)a3 + 248);
LABEL_322:
                        while (*(void *)v214 != v211)
                        {
                          v214 += 8;
                          if (v214 == v213)
                          {
                            v214 = *(char **)(*(void *)a3 + 248);
                            break;
                          }
                        }
                      }
                      unint64_t v201 = v208 - 48;
                    }
                    while (v215 - v212 < v214 - v212);
                    *(_OWORD *)unint64_t v208 = v222;
                    *(void *)(v208 + 16) = v230;
                    *(void *)(v208 + 24) = v202;
                    *(void *)(v208 + 32) = v239;
                    *(_DWORD *)(v208 + 39) = *(_DWORD *)((char *)&v239 + 7);
                  }
                }
                long long v111 = (long long *)(a1 + 48);
              }
              while ((long long *)(a1 + 48) != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((long long *)v13 != a2)
            {
              int64_t v129 = (v15 - 2) >> 1;
              int64_t v130 = v129;
              do
              {
                int64_t v131 = v130;
                if (v129 >= v130)
                {
                  uint64_t v132 = (2 * v130) | 1;
                  unint64_t v133 = v13 + 48 * v132;
                  if (2 * v131 + 2 < (uint64_t)v15)
                  {
                    uint64_t v134 = *(void *)(v133 + 24);
                    uint64_t v135 = *(void *)(v133 + 72);
                    if (v134 != v135)
                    {
                      v137 = *(char **)(*(void *)a3 + 240);
                      v136 = *(char **)(*(void *)a3 + 248);
                      v138 = v137;
                      v139 = v137;
                      if (v137 != v136)
                      {
                        do
                        {
                          if (*(void *)v139 == v134) {
                            goto LABEL_224;
                          }
                          v139 += 8;
                        }
                        while (v139 != v136);
                        v139 = *(char **)(*(void *)a3 + 248);
LABEL_224:
                        while (*(void *)v138 != v135)
                        {
                          v138 += 8;
                          if (v138 == v136)
                          {
                            v138 = *(char **)(*(void *)a3 + 248);
                            break;
                          }
                        }
                      }
                      v133 += 48 * (v139 - v137 < v138 - v137);
                      if (v139 - v137 < v138 - v137) {
                        uint64_t v132 = 2 * v131 + 2;
                      }
                    }
                  }
                  unint64_t v140 = v13 + 48 * v131;
                  uint64_t v141 = *(void *)(v133 + 24);
                  uint64_t v142 = *(void *)(v140 + 24);
                  if (v141 == v142) {
                    goto LABEL_238;
                  }
                  v144 = *(char **)(*(void *)a3 + 240);
                  v143 = *(char **)(*(void *)a3 + 248);
                  v145 = v144;
                  v146 = v144;
                  if (v144 != v143)
                  {
                    do
                    {
                      if (*(void *)v146 == v141) {
                        goto LABEL_234;
                      }
                      v146 += 8;
                    }
                    while (v146 != v143);
                    v146 = *(char **)(*(void *)a3 + 248);
LABEL_234:
                    while (*(void *)v145 != v142)
                    {
                      v145 += 8;
                      if (v145 == v143)
                      {
                        v145 = *(char **)(*(void *)a3 + 248);
                        break;
                      }
                    }
                  }
                  if (v146 - v144 >= v145 - v144)
                  {
LABEL_238:
                    uint64_t v228 = *(void *)(v140 + 16);
                    long long v220 = *(_OWORD *)v140;
                    long long v237 = *(_OWORD *)(v140 + 32);
                    long long v147 = *(_OWORD *)v133;
                    long long v148 = *(_OWORD *)(v133 + 16);
                    *(_OWORD *)(v140 + 27) = *(_OWORD *)(v133 + 27);
                    *(_OWORD *)unint64_t v140 = v147;
                    *(_OWORD *)(v140 + 16) = v148;
                    if (v129 >= v132)
                    {
                      while (1)
                      {
                        uint64_t v150 = 2 * v132;
                        uint64_t v132 = (2 * v132) | 1;
                        unint64_t v149 = v13 + 48 * v132;
                        uint64_t v151 = v150 + 2;
                        if (v151 < (uint64_t)v15)
                        {
                          uint64_t v152 = *(void *)(v149 + 24);
                          uint64_t v153 = *(void *)(v149 + 72);
                          if (v152 != v153)
                          {
                            v154 = *(char **)(*(void *)a3 + 240);
                            v155 = *(char **)(*(void *)a3 + 248);
                            v156 = v154;
                            v157 = v154;
                            if (v154 != v155)
                            {
                              do
                              {
                                if (*(void *)v157 == v152) {
                                  goto LABEL_246;
                                }
                                v157 += 8;
                              }
                              while (v157 != v155);
                              v157 = *(char **)(*(void *)a3 + 248);
LABEL_246:
                              while (*(void *)v156 != v153)
                              {
                                v156 += 8;
                                if (v156 == v155)
                                {
                                  v156 = *(char **)(*(void *)a3 + 248);
                                  break;
                                }
                              }
                            }
                            v149 += 48 * (v157 - v154 < v156 - v154);
                            if (v157 - v154 < v156 - v154) {
                              uint64_t v132 = v151;
                            }
                          }
                        }
                        uint64_t v158 = *(void *)(v149 + 24);
                        if (v158 != v142)
                        {
                          v160 = *(char **)(*(void *)a3 + 240);
                          v159 = *(char **)(*(void *)a3 + 248);
                          v161 = v160;
                          v162 = v160;
                          if (v160 != v159)
                          {
                            do
                            {
                              if (*(void *)v162 == v158) {
                                goto LABEL_256;
                              }
                              v162 += 8;
                            }
                            while (v162 != v159);
                            v162 = *(char **)(*(void *)a3 + 248);
LABEL_256:
                            while (*(void *)v161 != v142)
                            {
                              v161 += 8;
                              if (v161 == v159)
                              {
                                v161 = *(char **)(*(void *)a3 + 248);
                                break;
                              }
                            }
                          }
                          if (v162 - v160 < v161 - v160) {
                            break;
                          }
                        }
                        long long v163 = *(_OWORD *)v149;
                        long long v164 = *(_OWORD *)(v149 + 16);
                        *(_OWORD *)(v133 + 27) = *(_OWORD *)(v149 + 27);
                        *(_OWORD *)unint64_t v133 = v163;
                        *(_OWORD *)(v133 + 16) = v164;
                        unint64_t v133 = v149;
                        if (v129 < v132) {
                          goto LABEL_261;
                        }
                      }
                    }
                    unint64_t v149 = v133;
LABEL_261:
                    *(_OWORD *)unint64_t v149 = v220;
                    *(void *)(v149 + 16) = v228;
                    *(void *)(v149 + 24) = v142;
                    *(void *)(v149 + 32) = v237;
                    *(_DWORD *)(v149 + 39) = *(_DWORD *)((char *)&v237 + 7);
                  }
                }
                int64_t v130 = v131 - 1;
              }
              while (v131);
              int64_t v165 = v14 / 0x30uLL;
              do
              {
                uint64_t v166 = 0;
                *(_OWORD *)v229 = *(_OWORD *)(v13 + 16);
                *(_OWORD *)&v229[16] = *(_OWORD *)(v13 + 32);
                long long v221 = *(_OWORD *)v13;
                uint64_t v167 = v165 - 2;
                if (v165 < 2) {
                  uint64_t v167 = v165 - 1;
                }
                uint64_t v168 = v167 >> 1;
                unint64_t v169 = v13;
                do
                {
                  v170 = (_OWORD *)v169;
                  v169 += 48 * v166 + 48;
                  uint64_t v171 = 2 * v166;
                  uint64_t v166 = (2 * v166) | 1;
                  uint64_t v172 = v171 + 2;
                  if (v171 + 2 < v165)
                  {
                    uint64_t v173 = *(void *)(v169 + 24);
                    uint64_t v174 = *(void *)(v169 + 72);
                    if (v173 != v174)
                    {
                      v176 = *(char **)(*(void *)a3 + 240);
                      v175 = *(char **)(*(void *)a3 + 248);
                      v177 = v176;
                      v178 = v176;
                      if (v176 != v175)
                      {
                        do
                        {
                          if (*(void *)v178 == v173) {
                            goto LABEL_273;
                          }
                          v178 += 8;
                        }
                        while (v178 != v175);
                        v178 = *(char **)(*(void *)a3 + 248);
LABEL_273:
                        while (*(void *)v177 != v174)
                        {
                          v177 += 8;
                          if (v177 == v175)
                          {
                            v177 = *(char **)(*(void *)a3 + 248);
                            break;
                          }
                        }
                      }
                      v169 += 48 * (v178 - v176 < v177 - v176);
                      if (v178 - v176 < v177 - v176) {
                        uint64_t v166 = v172;
                      }
                    }
                  }
                  long long v179 = *(_OWORD *)v169;
                  long long v180 = *(_OWORD *)(v169 + 16);
                  *(_OWORD *)((char *)v170 + 27) = *(_OWORD *)(v169 + 27);
                  _OWORD *v170 = v179;
                  v170[1] = v180;
                }
                while (v166 <= v168);
                a2 -= 3;
                if ((long long *)v169 == a2)
                {
                  *(_OWORD *)(v169 + 27) = *(_OWORD *)&v229[11];
                  *(_OWORD *)unint64_t v169 = v221;
                  *(_OWORD *)(v169 + 16) = *(_OWORD *)v229;
                }
                else
                {
                  long long v181 = *a2;
                  long long v182 = a2[1];
                  *(_OWORD *)(v169 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v169 = v181;
                  *(_OWORD *)(v169 + 16) = v182;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v229[11];
                  *a2 = v221;
                  a2[1] = *(_OWORD *)v229;
                  uint64_t v183 = v169 - v13 + 48;
                  if (v183 >= 49)
                  {
                    unint64_t v184 = (v183 / 0x30uLL - 2) >> 1;
                    unint64_t v185 = v13 + 48 * v184;
                    uint64_t v186 = *(void *)(v185 + 24);
                    uint64_t v187 = *(void *)(v169 + 24);
                    if (v186 != v187)
                    {
                      v189 = *(char **)(*(void *)a3 + 240);
                      v188 = *(char **)(*(void *)a3 + 248);
                      v190 = v189;
                      v191 = v189;
                      if (v189 != v188)
                      {
                        do
                        {
                          if (*(void *)v191 == v186) {
                            goto LABEL_286;
                          }
                          v191 += 8;
                        }
                        while (v191 != v188);
                        v191 = *(char **)(*(void *)a3 + 248);
LABEL_286:
                        while (*(void *)v190 != v187)
                        {
                          v190 += 8;
                          if (v190 == v188)
                          {
                            v190 = *(char **)(*(void *)a3 + 248);
                            break;
                          }
                        }
                      }
                      if (v191 - v189 < v190 - v189)
                      {
                        uint64_t v242 = *(void *)(v169 + 16);
                        long long v238 = *(_OWORD *)v169;
                        long long v233 = *(_OWORD *)(v169 + 32);
                        do
                        {
                          v192 = (_OWORD *)v169;
                          unint64_t v169 = v185;
                          long long v193 = *(_OWORD *)v185;
                          long long v194 = *(_OWORD *)(v185 + 16);
                          *(_OWORD *)((char *)v192 + 27) = *(_OWORD *)(v185 + 27);
                          _OWORD *v192 = v193;
                          v192[1] = v194;
                          if (!v184) {
                            break;
                          }
                          unint64_t v184 = (v184 - 1) >> 1;
                          unint64_t v185 = v13 + 48 * v184;
                          uint64_t v195 = *(void *)(v185 + 24);
                          if (v195 == v187) {
                            break;
                          }
                          v197 = *(char **)(*(void *)a3 + 240);
                          v196 = *(char **)(*(void *)a3 + 248);
                          v198 = v197;
                          v199 = v197;
                          if (v197 != v196)
                          {
                            do
                            {
                              if (*(void *)v199 == v195) {
                                goto LABEL_297;
                              }
                              v199 += 8;
                            }
                            while (v199 != v196);
                            v199 = *(char **)(*(void *)a3 + 248);
LABEL_297:
                            while (*(void *)v198 != v187)
                            {
                              v198 += 8;
                              if (v198 == v196)
                              {
                                v198 = *(char **)(*(void *)a3 + 248);
                                break;
                              }
                            }
                          }
                        }
                        while (v199 - v197 < v198 - v197);
                        *(_OWORD *)unint64_t v169 = v238;
                        *(void *)(v169 + 16) = v242;
                        *(void *)(v169 + 24) = v187;
                        *(void *)(v169 + 32) = v233;
                        *(_DWORD *)(v169 + 39) = *(_DWORD *)((char *)&v233 + 7);
                      }
                    }
                  }
                }
              }
              while (v165-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          double v17 = (long long *)(v13 + 48 * (v15 >> 1));
          if ((unint64_t)v14 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v15 >> 1)), a2 - 3, a3);
            uint64_t v18 = 3 * v16;
            id v19 = (long long *)(a1 + 48 * v16 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>((long long *)(a1 + 48), v19, a2 - 6, a3);
            double v20 = (long long *)(a1 + 48 + 16 * v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>((long long *)(a1 + 96), v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>(v19, v17, v20, a3);
            *(_OWORD *)v223 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v223[16] = *(_OWORD *)(a1 + 32);
            long long v216 = *(_OWORD *)a1;
            long long v21 = *(long long *)((char *)v17 + 27);
            long long v22 = v17[1];
            *(_OWORD *)a1 = *v17;
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(a1 + 27) = v21;
            *(long long *)((char *)v17 + 27) = *(_OWORD *)&v223[11];
            *double v17 = v216;
            v17[1] = *(_OWORD *)v223;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>((long long *)(a1 + 48 * (v15 >> 1)), (long long *)a1, a2 - 3, a3);
          }
          --a4;
          if (a5)
          {
            uint64_t v23 = *(void *)(a1 + 24);
            uint64_t v24 = *(void *)a3;
            break;
          }
          uint64_t v25 = *(void *)(a1 - 24);
          uint64_t v23 = *(void *)(a1 + 24);
          if (v25 != v23)
          {
            uint64_t v24 = *(void *)a3;
            uint64_t v26 = *(char **)(*(void *)a3 + 240);
            uint64_t v27 = *(char **)(*(void *)a3 + 248);
            uint64_t v28 = v26;
            uint64_t v29 = v26;
            if (v26 != v27)
            {
              do
              {
                if (*(void *)v29 == v25) {
                  goto LABEL_16;
                }
                v29 += 8;
              }
              while (v29 != v27);
              uint64_t v29 = *(char **)(*(void *)a3 + 248);
LABEL_16:
              while (*(void *)v28 != v23)
              {
                v28 += 8;
                if (v28 == v27)
                {
                  uint64_t v28 = *(char **)(*(void *)a3 + 248);
                  break;
                }
              }
            }
            if (v29 - v26 < v28 - v26) {
              break;
            }
          }
          uint64_t v241 = *(void *)(a1 + 16);
          long long v232 = *(_OWORD *)(a1 + 32);
          long long v235 = *(_OWORD *)a1;
          uint64_t v67 = *((void *)a2 - 3);
          if (v23 == v67) {
            goto LABEL_107;
          }
          int v68 = *(char **)(*(void *)a3 + 240);
          uint64_t v69 = *(char **)(*(void *)a3 + 248);
          if (v68 == v69)
          {
            int8x16_t v71 = *(char **)(*(void *)a3 + 240);
            id v70 = v71;
          }
          else
          {
            id v70 = *(char **)(*(void *)a3 + 240);
            while (*(void *)v70 != v23)
            {
              v70 += 8;
              if (v70 == v69)
              {
                id v70 = *(char **)(*(void *)a3 + 248);
                break;
              }
            }
            int8x16_t v71 = *(char **)(*(void *)a3 + 240);
            while (*(void *)v71 != v67)
            {
              v71 += 8;
              if (v71 == v69)
              {
                int8x16_t v71 = *(char **)(*(void *)a3 + 248);
                break;
              }
            }
          }
          if (v70 - v68 >= v71 - v68)
          {
LABEL_107:
            unint64_t v13 = a1 + 48;
            if (a1 + 48 < (unint64_t)a2)
            {
              uint64_t v75 = *(void *)a3;
              unint64_t v76 = a1;
              do
              {
                uint64_t v77 = *(void *)(v76 + 72);
                unint64_t v76 = v13;
                if (v23 != v77)
                {
                  __int16 v78 = *(char **)(v75 + 240);
                  long long v79 = *(char **)(v75 + 248);
                  long long v80 = v78;
                  id v81 = v78;
                  if (v78 != v79)
                  {
                    do
                    {
                      if (*(void *)v81 == v23) {
                        goto LABEL_114;
                      }
                      v81 += 8;
                    }
                    while (v81 != v79);
                    id v81 = *(char **)(v75 + 248);
LABEL_114:
                    while (*(void *)v80 != v77)
                    {
                      v80 += 8;
                      if (v80 == v79)
                      {
                        long long v80 = *(char **)(v75 + 248);
                        break;
                      }
                    }
                  }
                  if (v81 - v78 < v80 - v78) {
                    break;
                  }
                }
                v13 += 48;
              }
              while (v76 + 48 < (unint64_t)a2);
            }
          }
          else
          {
            unint64_t v13 = a1;
            do
            {
              do
              {
                uint64_t v72 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v72);
              if (v68 == v69)
              {
                long long v74 = *(char **)(*(void *)a3 + 240);
                unint64_t v73 = v74;
              }
              else
              {
                unint64_t v73 = *(char **)(*(void *)a3 + 240);
                while (*(void *)v73 != v23)
                {
                  v73 += 8;
                  if (v73 == v69)
                  {
                    unint64_t v73 = *(char **)(*(void *)a3 + 248);
                    break;
                  }
                }
                long long v74 = *(char **)(*(void *)a3 + 240);
                while (*(void *)v74 != v72)
                {
                  v74 += 8;
                  if (v74 == v69)
                  {
                    long long v74 = *(char **)(*(void *)a3 + 248);
                    break;
                  }
                }
              }
            }
            while (v73 - v68 >= v74 - v68);
          }
          id v82 = a2;
          if (v13 < (unint64_t)a2)
          {
            uint64_t v83 = *(void *)a3;
            id v82 = a2;
            do
            {
              uint64_t v84 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v84) {
                break;
              }
              long long v85 = *(char **)(v83 + 240);
              uint64_t v86 = *(char **)(v83 + 248);
              char v87 = v85;
              BOOL v88 = v85;
              if (v85 != v86)
              {
                do
                {
                  if (*(void *)v88 == v23) {
                    goto LABEL_126;
                  }
                  v88 += 8;
                }
                while (v88 != v86);
                BOOL v88 = *(char **)(v83 + 248);
LABEL_126:
                while (*(void *)v87 != v84)
                {
                  v87 += 8;
                  if (v87 == v86)
                  {
                    char v87 = *(char **)(v83 + 248);
                    break;
                  }
                }
              }
            }
            while (v88 - v85 < v87 - v85);
          }
          while (v13 < (unint64_t)v82)
          {
            *(_OWORD *)v225 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v225[16] = *(_OWORD *)(v13 + 32);
            long long v217 = *(_OWORD *)v13;
            long long v89 = *v82;
            long long v90 = v82[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v82 + 27);
            *(_OWORD *)unint64_t v13 = v89;
            *(_OWORD *)(v13 + 16) = v90;
            *(long long *)((char *)v82 + 27) = *(_OWORD *)&v225[11];
            *id v82 = v217;
            v82[1] = *(_OWORD *)v225;
            uint64_t v91 = *(void *)a3;
            do
            {
              do
              {
                uint64_t v92 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v92);
              unint64_t v93 = *(char **)(v91 + 240);
              unint64_t v94 = *(char **)(v91 + 248);
              if (v93 == v94)
              {
                unint64_t v96 = *(char **)(v91 + 240);
                uint64_t v95 = v96;
              }
              else
              {
                uint64_t v95 = *(char **)(v91 + 240);
                while (*(void *)v95 != v23)
                {
                  v95 += 8;
                  if (v95 == v94)
                  {
                    uint64_t v95 = *(char **)(v91 + 248);
                    break;
                  }
                }
                unint64_t v96 = *(char **)(v91 + 240);
                while (*(void *)v96 != v92)
                {
                  v96 += 8;
                  if (v96 == v94)
                  {
                    unint64_t v96 = *(char **)(v91 + 248);
                    break;
                  }
                }
              }
            }
            while (v95 - v93 >= v96 - v93);
            do
            {
              uint64_t v97 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v97) {
                break;
              }
              if (v93 == v94)
              {
                long long v99 = v93;
                long long v98 = v93;
              }
              else
              {
                long long v98 = v93;
                while (*(void *)v98 != v23)
                {
                  v98 += 8;
                  if (v98 == v94)
                  {
                    long long v98 = v94;
                    break;
                  }
                }
                long long v99 = v93;
                while (*(void *)v99 != v97)
                {
                  v99 += 8;
                  if (v99 == v94)
                  {
                    long long v99 = v94;
                    break;
                  }
                }
              }
            }
            while (v98 - v93 < v99 - v93);
          }
          long long v100 = (long long *)(v13 - 48);
          BOOL v5 = v13 - 48 >= a1;
          BOOL v6 = v13 - 48 == a1;
          if (v13 - 48 != a1)
          {
            long long v101 = *v100;
            long long v102 = *(_OWORD *)(v13 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
            *(_OWORD *)a1 = v101;
            *(_OWORD *)(a1 + 16) = v102;
          }
          a5 = 0;
          *long long v100 = v235;
          *(void *)(v13 - 32) = v241;
          *(void *)(v13 - 24) = v23;
          *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v232 + 7);
          *(void *)(v13 - 16) = v232;
        }
        uint64_t v240 = *(void *)(a1 + 16);
        long long v231 = *(_OWORD *)(a1 + 32);
        long long v234 = *(_OWORD *)a1;
        unint64_t v30 = a1;
        do
        {
          unint64_t v31 = v30;
          v30 += 48;
          uint64_t v32 = *(void *)(v31 + 72);
          if (v32 == v23) {
            break;
          }
          unint64_t v33 = *(char **)(v24 + 240);
          uint64_t v34 = *(char **)(v24 + 248);
          double v35 = v33;
          uint64_t v36 = v33;
          if (v33 != v34)
          {
            do
            {
              if (*(void *)v36 == v32) {
                goto LABEL_26;
              }
              v36 += 8;
            }
            while (v36 != v34);
            uint64_t v36 = *(char **)(v24 + 248);
LABEL_26:
            while (*(void *)v35 != v23)
            {
              v35 += 8;
              if (v35 == v34)
              {
                double v35 = *(char **)(v24 + 248);
                break;
              }
            }
          }
        }
        while (v36 - v33 < v35 - v33);
        uint64_t v37 = a2;
        if (v31 == a1)
        {
          uint64_t v37 = a2;
          if (v30 < (unint64_t)a2)
          {
            uint64_t v37 = a2;
            do
            {
              uint64_t v43 = *((void *)v37 - 3);
              v37 -= 3;
              if (v43 != v23)
              {
                unint64_t v44 = *(char **)(v24 + 240);
                BOOL v45 = *(char **)(v24 + 248);
                char v46 = v44;
                unint64_t v47 = v44;
                if (v44 != v45)
                {
                  do
                  {
                    if (*(void *)v47 == v43) {
                      goto LABEL_48;
                    }
                    v47 += 8;
                  }
                  while (v47 != v45);
                  unint64_t v47 = *(char **)(v24 + 248);
LABEL_48:
                  while (*(void *)v46 != v23)
                  {
                    v46 += 8;
                    if (v46 == v45)
                    {
                      char v46 = *(char **)(v24 + 248);
                      break;
                    }
                  }
                }
                if (v47 - v44 < v46 - v44) {
                  break;
                }
              }
            }
            while (v30 < (unint64_t)v37);
          }
        }
        else
        {
          do
          {
            do
            {
              uint64_t v38 = *((void *)v37 - 3);
              v37 -= 3;
            }
            while (v38 == v23);
            char v39 = *(char **)(v24 + 240);
            id v40 = *(char **)(v24 + 248);
            uint64_t v41 = v39;
            double v42 = v39;
            if (v39 != v40)
            {
              do
              {
                if (*(void *)v42 == v38) {
                  goto LABEL_36;
                }
                v42 += 8;
              }
              while (v42 != v40);
              double v42 = *(char **)(v24 + 248);
LABEL_36:
              while (*(void *)v41 != v23)
              {
                v41 += 8;
                if (v41 == v40)
                {
                  uint64_t v41 = *(char **)(v24 + 248);
                  break;
                }
              }
            }
          }
          while (v42 - v39 >= v41 - v39);
        }
        unint64_t v13 = v30;
        if (v30 < (unint64_t)v37)
        {
          double v48 = v37;
          do
          {
            *(_OWORD *)v224 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v224[16] = *(_OWORD *)(v13 + 32);
            long long v49 = *(_OWORD *)v13;
            long long v51 = *v48;
            long long v50 = v48[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v48 + 27);
            *(_OWORD *)unint64_t v13 = v51;
            *(_OWORD *)(v13 + 16) = v50;
            *(long long *)((char *)v48 + 27) = *(_OWORD *)&v224[11];
            *double v48 = v49;
            v48[1] = *(_OWORD *)v224;
            uint64_t v52 = *(void *)a3;
            do
            {
              uint64_t v53 = *(void *)(v13 + 72);
              v13 += 48;
              if (v53 == v23) {
                break;
              }
              double v54 = *(char **)(v52 + 240);
              uint64_t v55 = *(char **)(v52 + 248);
              uint64_t v56 = v54;
              uint64_t v57 = v54;
              if (v54 != v55)
              {
                do
                {
                  if (*(void *)v57 == v53) {
                    goto LABEL_61;
                  }
                  v57 += 8;
                }
                while (v57 != v55);
                uint64_t v57 = *(char **)(v52 + 248);
LABEL_61:
                while (*(void *)v56 != v23)
                {
                  v56 += 8;
                  if (v56 == v55)
                  {
                    uint64_t v56 = *(char **)(v52 + 248);
                    break;
                  }
                }
              }
            }
            while (v57 - v54 < v56 - v54);
            do
            {
              do
              {
                uint64_t v58 = *((void *)v48 - 3);
                v48 -= 3;
              }
              while (v58 == v23);
              long long v59 = *(char **)(v52 + 240);
              long long v60 = *(char **)(v52 + 248);
              unint64_t v61 = v59;
              uint64_t v62 = v59;
              if (v59 != v60)
              {
                do
                {
                  if (*(void *)v62 == v58) {
                    goto LABEL_70;
                  }
                  v62 += 8;
                }
                while (v62 != v60);
                uint64_t v62 = *(char **)(v52 + 248);
LABEL_70:
                while (*(void *)v61 != v23)
                {
                  v61 += 8;
                  if (v61 == v60)
                  {
                    unint64_t v61 = *(char **)(v52 + 248);
                    break;
                  }
                }
              }
            }
            while (v62 - v59 >= v61 - v59);
          }
          while (v13 < (unint64_t)v48);
        }
        unint64_t v63 = (long long *)(v13 - 48);
        if (v13 - 48 != a1)
        {
          long long v64 = *v63;
          long long v65 = *(_OWORD *)(v13 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
          *(_OWORD *)a1 = v64;
          *(_OWORD *)(a1 + 16) = v65;
        }
        *unint64_t v63 = v234;
        *(void *)(v13 - 32) = v240;
        *(void *)(v13 - 24) = v23;
        *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v231 + 7);
        *(void *)(v13 - 16) = v231;
        if (v30 >= (unint64_t)v37) {
          break;
        }
LABEL_80:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_SampleRemainder*,false>(a1, v13 - 48, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_SampleRemainder*>(a1, v13 - 48, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_SampleRemainder*>(v13, (uint64_t)a2, a3))
      {
        break;
      }
      if (!v66) {
        goto LABEL_80;
      }
    }
    a2 = (long long *)(v13 - 48);
    if (!v66) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 - 24);
      uint64_t v9 = *(void *)(a1 + 24);
      if (v8 == v9) {
        return result;
      }
      id v10 = *(char **)(*(void *)a3 + 240);
      unint64_t v11 = *(char **)(*(void *)a3 + 248);
      unint64_t v12 = v10;
      unint64_t v13 = v10;
      if (v10 == v11) {
        goto LABEL_10;
      }
      do
      {
        if (*(void *)v13 == v8) {
          goto LABEL_7;
        }
        v13 += 8;
      }
      while (v13 != v11);
      unint64_t v13 = *(char **)(*(void *)a3 + 248);
      do
      {
LABEL_7:
        if (*(void *)v12 == v9) {
          goto LABEL_10;
        }
        v12 += 8;
      }
      while (v12 != v11);
      unint64_t v12 = *(char **)(*(void *)a3 + 248);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        uint64_t v14 = (long long *)(a2 - 48);
        long long v15 = *(_OWORD *)a1;
        *(_OWORD *)double v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        long long v16 = *(_OWORD *)(a2 - 21);
        long long v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *uint64_t v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(long long *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), a3);
      uint64_t v19 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      int v20 = 0;
      break;
  }
  while (1)
  {
    uint64_t v21 = *(void *)(v19 + 24);
    uint64_t v22 = *(void *)(v18 + 24);
    if (v21 != v22)
    {
      uint64_t v23 = *(char **)(*(void *)a3 + 240);
      uint64_t v24 = *(char **)(*(void *)a3 + 248);
      uint64_t v25 = v23;
      uint64_t v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(void *)v26 == v21) {
            goto LABEL_19;
          }
          v26 += 8;
        }
        while (v26 != v24);
        uint64_t v26 = *(char **)(*(void *)a3 + 248);
LABEL_19:
        while (*(void *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            uint64_t v25 = *(char **)(*(void *)a3 + 248);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        long long v34 = *(_OWORD *)v19;
        uint64_t v36 = *(void *)(v19 + 16);
        long long v37 = *(_OWORD *)(v19 + 32);
        uint64_t v27 = v19;
        while (1)
        {
          long long v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1) {
            break;
          }
          uint64_t v27 = v18;
          uint64_t v29 = *(void *)(v18 - 24);
          if (v21 != v29)
          {
            unint64_t v30 = *(char **)(*(void *)a3 + 240);
            unint64_t v31 = *(char **)(*(void *)a3 + 248);
            uint64_t v32 = v30;
            unint64_t v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(void *)v33 == v21) {
                  goto LABEL_30;
                }
                v33 += 8;
              }
              while (v33 != v31);
              unint64_t v33 = *(char **)(*(void *)a3 + 248);
LABEL_30:
              while (*(void *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  uint64_t v32 = *(char **)(*(void *)a3 + 248);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30) {
              continue;
            }
          }
          goto LABEL_36;
        }
        uint64_t v27 = a1;
LABEL_36:
        *(_OWORD *)uint64_t v27 = v34;
        *(void *)(v27 + 16) = v36;
        *(void *)(v27 + 24) = v21;
        *(void *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8) {
          return v19 + 48 == a2;
        }
      }
    }
    uint64_t v18 = v19;
    v19 += 48;
    if (v19 == a2) {
      return 1;
    }
  }
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsAverageSampleDuration> const&)::{lambda(HDStatisticsAverageSampleDuration const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsAverageSampleDuration> const&)::{lambda(HDStatisticsAverageSampleDuration const&)#1}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsAverageSampleDuration const&)>::~__func()
{
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsAverageSampleDuration> const&)::{lambda(HDStatisticsAverageSampleDuration const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsAverageSampleDuration> const&)::{lambda(HDStatisticsAverageSampleDuration const&)#1}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsAverageSampleDuration const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F1725610;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsAverageSampleDuration> const&)::{lambda(HDStatisticsAverageSampleDuration const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsAverageSampleDuration> const&)::{lambda(HDStatisticsAverageSampleDuration const&)#1}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsAverageSampleDuration const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1725610;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsAverageSampleDuration> const&)::{lambda(HDStatisticsAverageSampleDuration const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsAverageSampleDuration> const&)::{lambda(HDStatisticsAverageSampleDuration const&)#1}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsAverageSampleDuration const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsAverageSampleDuration> const&)::{lambda(HDStatisticsAverageSampleDuration const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsAverageSampleDuration> const&)::{lambda(HDStatisticsAverageSampleDuration const&)#1}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsAverageSampleDuration const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsAverageSampleDuration> const&)::{lambda(HDStatisticsAverageSampleDuration const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsAverageSampleDuration> const&)::{lambda(HDStatisticsAverageSampleDuration const&)#1}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsAverageSampleDuration const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsAverageSampleDuration const& ()(HDStatisticsAverageSampleDuration const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 536))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a4, 3, @"Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date");
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_configureForStartTime(a1);
  }
  double v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(void *)(a1 + 40) && a3) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_advanceToTime(a1, v8);
    }
    HDStatisticsCollectionEngine<HDStatisticsAverageSampleDuration>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    uint64_t v9 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    uint64_t v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v9, a4);
  }
  return v10;
}

void sub_1BD12B2C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_advanceToTime(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 128) <= a2)
  {
    uint64_t v4 = a1 + 112;
    BOOL v5 = (double *)(a1 + 120);
    do
    {
      uint64_t v6 = *(void *)(a1 + 504);
      uint64_t v7 = *(void *)(a1 + 512);
      if (v7 == v6)
      {
        uint64_t v22 = 0;
        long long v15 = *(void **)(a1 + 40);
        long long v16 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a2];
        double v8 = [v15 dateIntervalContainingDate:v16 index:&v22];

        HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v17 = v22;
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v19 = v18;
        int v20 = [v8 endDate];
        [v20 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsCumulative>::resetToBucket(v4, v17, v19, v21);
      }
      else
      {
        double v8 = [*(id *)(a1 + 40) dateIntervalAtIndex:*(void *)(a1 + 112) + 1];
        HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v12 = v11;
        unint64_t v13 = [v8 endDate];
        [v13 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsAverageSampleDuration>::advanceBucket(v4, v12, v14);
      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_didChangeBucket(a1, v9);
      if (v7 != v6) {
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_notifyForCurrentBucket(a1);
      }
    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1BD12B4C8(_Unwind_Exception *exception_object)
{
}

void HDStatisticsCollectionEngine<HDStatisticsAverageSampleDuration>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  BOOL v5 = (double *)(a1 + 8);
  uint64_t v6 = *(uint64_t **)a2;
  double v7 = *(double *)(a2 + 8);
  double v8 = *(uint64_t **)(a2 + 16);
  uint64_t v9 = *(uint64_t **)(a2 + 24);
  char v63 = *(unsigned char *)(a2 + 32);
  char v10 = v63;
  char v11 = *(unsigned char *)(a2 + 33);
  char v65 = 0;
  if (v63 && v7 >= *v5)
  {
    double v14 = &v63;
    char v12 = v11;
    char v65 = v63;
    long long v15 = v6;
    double v16 = v7;
    double v17 = *(double *)&v8;
    unint64_t v13 = (unint64_t)v9;
  }
  else
  {
    char v12 = 0;
    unint64_t v13 = 0;
    double v14 = &v65;
    long long v15 = 0;
    double v16 = 0.0;
    double v17 = 0.0;
  }
  *double v14 = 0;
  char v64 = 0;
  if (v65 && ((double v18 = *(double *)(a1 + 16), *(_DWORD *)(a1 + 36)) ? (v19 = v16 < v18) : (v19 = v16 <= v18), !v19))
  {
    double v21 = &v65;
    char v61 = v12;
    char v64 = v65;
    unint64_t v20 = v13;
    double v62 = v17;
    double v22 = v16;
    uint64_t v23 = v15;
  }
  else
  {
    double v62 = 0.0;
    char v61 = 0;
    unint64_t v20 = 0;
    double v21 = &v64;
    double v22 = 0.0;
    uint64_t v23 = 0;
  }
  *double v21 = 0;
  char v24 = v65;
  if (v65)
  {
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 208, v13, v13);
    uint64_t v25 = *(char **)(a1 + 112);
    if (v25 == *(char **)(a1 + 104) && *(uint64_t *)(a1 + 136) <= 0)
    {
      double v28 = *(double *)(a1 + 8);
      double v29 = *(double *)(a1 + 16);
      if (v16 >= v28) {
        double v28 = v16;
      }
      if (v29 >= v17) {
        double v29 = v17;
      }
      *(double *)(a1 + 48) = v28;
      *(double *)(a1 + 56) = v29;
    }
    else
    {
      if (v16 < *(double *)(a1 + 48))
      {
        double v26 = *(double *)(a1 + 8);
        if (v16 >= v26) {
          double v26 = v16;
        }
        *(double *)(a1 + 48) = v26;
      }
      if (v17 > *(double *)(a1 + 56))
      {
        double v27 = *(double *)(a1 + 16);
        if (v27 >= v17) {
          double v27 = v17;
        }
        *(double *)(a1 + 56) = v27;
      }
    }
    if (*(unsigned char *)(a1 + 32))
    {
      double v30 = *(double *)(a1 + 64);
      if (v16 < v30) {
        double v30 = v16;
      }
      *(double *)(a1 + 64) = v30;
    }
    if (a3 && v16 < *(double *)(a1 + 16))
    {
      HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_mergeThroughTime((uint64_t)v5, v16);
      uint64_t v25 = *(char **)(a1 + 112);
    }
    unint64_t v31 = *(void *)(a1 + 120);
    if ((unint64_t)v25 >= v31)
    {
      unint64_t v33 = 0x555555555555555;
      long long v34 = *(char **)(a1 + 104);
      unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v34) >> 4);
      unint64_t v36 = v35 + 1;
      if (v35 + 1 > 0x555555555555555) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - (void)v34) >> 4);
      if (2 * v37 > v36) {
        unint64_t v36 = 2 * v37;
      }
      if (v37 < 0x2AAAAAAAAAAAAAALL) {
        unint64_t v33 = v36;
      }
      if (v33)
      {
        unint64_t v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v33);
        long long v34 = *(char **)(a1 + 104);
        uint64_t v25 = *(char **)(a1 + 112);
      }
      else
      {
        uint64_t v38 = 0;
      }
      unint64_t v39 = v33 + 48 * v35;
      *(void *)unint64_t v39 = v15;
      *(double *)(v39 + 8) = v16;
      *(double *)(v39 + 16) = v17;
      *(void *)(v39 + 24) = v13;
      unint64_t v40 = v33 + 48 * v38;
      *(unsigned char *)(v39 + 32) = v24;
      *(unsigned char *)(v39 + 33) = v12;
      *(_WORD *)(v39 + 40) = 0;
      *(unsigned char *)(v39 + 42) = 0;
      uint64_t v32 = (void *)(v39 + 48);
      if (v25 != v34)
      {
        do
        {
          long long v41 = *((_OWORD *)v25 - 3);
          long long v42 = *((_OWORD *)v25 - 2);
          *(_OWORD *)(v39 - 21) = *(_OWORD *)(v25 - 21);
          *(_OWORD *)(v39 - 48) = v41;
          *(_OWORD *)(v39 - 32) = v42;
          v39 -= 48;
          v25 -= 48;
        }
        while (v25 != v34);
        long long v34 = *(char **)(a1 + 104);
      }
      *(void *)(a1 + 104) = v39;
      *(void *)(a1 + 112) = v32;
      *(void *)(a1 + 120) = v40;
      if (v34) {
        operator delete(v34);
      }
    }
    else
    {
      *(void *)uint64_t v25 = v15;
      *((double *)v25 + 1) = v16;
      *((double *)v25 + 2) = v17;
      *((void *)v25 + 3) = v13;
      v25[32] = v24;
      v25[33] = v12;
      *((_WORD *)v25 + 20) = 0;
      uint64_t v32 = v25 + 48;
      v25[42] = 0;
    }
    *(void *)(a1 + 112) = v32;
    if (!*(unsigned char *)(a1 + 176) || *(double *)(a1 + 152) <= v7)
    {
      *(void *)(a1 + 144) = v6;
      *(double *)(a1 + 152) = v7;
      *(double *)(a1 + 160) = *(double *)&v8;
      *(void *)(a1 + 168) = v9;
      *(unsigned char *)(a1 + 176) = v10;
      *(unsigned char *)(a1 + 177) = v11;
    }
    if (*(unsigned char *)(a1 + 33))
    {
      unint64_t v43 = HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_canonicalSourceIDForSourceID((uint64_t)v5, v13);
      unint64_t v44 = HDStatisticsBucket<HDStatisticsCumulative>::_statisticsForSource((uint64_t)v5, v43);
      if (!*((unsigned char *)v44 + 48) || *((double *)v44 + 3) <= v7)
      {
        v44[2] = v6;
        *((double *)v44 + 3) = v7;
        v44[4] = v8;
        v44[5] = v9;
        *((unsigned char *)v44 + 48) = v10;
        *((unsigned char *)v44 + 49) = v11;
      }
    }
  }
  char v45 = v64;
  if (v64)
  {
    unint64_t v46 = *(void *)(a1 + 400);
    unint64_t v47 = *(void *)(a1 + 408);
    if (v46 >= v47)
    {
      uint64_t v49 = *(void *)(a1 + 392);
      unint64_t v50 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v46 - v49) >> 3);
      unint64_t v51 = v50 + 1;
      if (v50 + 1 > 0x666666666666666) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v52 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v47 - v49) >> 3);
      if (2 * v52 > v51) {
        unint64_t v51 = 2 * v52;
      }
      if (v52 >= 0x333333333333333) {
        unint64_t v53 = 0x666666666666666;
      }
      else {
        unint64_t v53 = v51;
      }
      if (v53) {
        unint64_t v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v53);
      }
      else {
        uint64_t v54 = 0;
      }
      unint64_t v55 = v53 + 40 * v50;
      unint64_t v56 = v53 + 40 * v54;
      *(void *)unint64_t v55 = v23;
      *(double *)(v55 + 8) = v22;
      *(double *)(v55 + 16) = v62;
      *(void *)(v55 + 24) = v20;
      *(unsigned char *)(v55 + 32) = v45;
      *(unsigned char *)(v55 + 33) = v61;
      unint64_t v48 = v55 + 40;
      uint64_t v58 = *(char **)(a1 + 392);
      uint64_t v57 = *(char **)(a1 + 400);
      if (v57 != v58)
      {
        do
        {
          long long v59 = *(_OWORD *)(v57 - 40);
          long long v60 = *(_OWORD *)(v57 - 24);
          *(_WORD *)(v55 - 8) = *((_WORD *)v57 - 4);
          *(_OWORD *)(v55 - 24) = v60;
          *(_OWORD *)(v55 - 40) = v59;
          v55 -= 40;
          v57 -= 40;
        }
        while (v57 != v58);
        uint64_t v57 = *(char **)(a1 + 392);
      }
      *(void *)(a1 + 392) = v55;
      *(void *)(a1 + 400) = v48;
      *(void *)(a1 + 408) = v56;
      if (v57) {
        operator delete(v57);
      }
    }
    else
    {
      *(void *)unint64_t v46 = v23;
      *(double *)(v46 + 8) = v22;
      *(double *)(v46 + 16) = v62;
      *(void *)(v46 + 24) = v20;
      *(unsigned char *)(v46 + 32) = v45;
      unint64_t v48 = v46 + 40;
      *(unsigned char *)(v46 + 33) = v61;
    }
    *(void *)(a1 + 400) = v48;
  }
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_notifyForCurrentBucket(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 538))
  {
    *(unsigned char *)(a1 + 540) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 540) = 0;
    uint64_t v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      uint64_t v4 = v2;
      unint64_t v3 = (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      if (v3) {
        v4[2](v4, v3);
      }

      uint64_t v2 = v4;
    }
  }
}

void sub_1BD12BA80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsAverageSampleDuration>::advanceBucket(uint64_t a1, double a2, double a3)
{
  uint64_t v9 = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 392), *(void *)(a1 + 400), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 400) - *(void *)(a1 + 392)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsCumulative>::resetToBucket(a1, *(void *)a1 + 1, a2, a3);
  uint64_t v6 = v9;
  double v7 = v10;
  if (v9 != v10)
  {
    uint64_t v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsAverageSampleDuration>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BD12BB7C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 540))
  {
    if (v3)
    {
      id v6 = v3;
      uint64_t v4 = _Block_copy(*(const void **)(a1 + 96));
      BOOL v5 = v4;
      if (v4) {
        (*((void (**)(void *, id))v4 + 2))(v4, v6);
      }

      id v3 = v6;
    }
    *(unsigned char *)(a1 + 540) = 0;
  }
}

void sub_1BD12BC10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI33HDStatisticsAverageSampleDurationE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  BOOL v5 = [a2 startDate];
  id v6 = [v4 startDate];
  uint64_t v7 = [v5 compare:v6];

  return v7;
}

void sub_1BD12BC98(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_primitiveInvalidateInterval(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 13);
  if (WeakRetained)
  {
    if (v5
      && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_currentBucketInterval((uint64_t)a1),
          (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v8 = [v5 endDate];
      uint64_t v9 = [v7 startDate];
      if (objc_msgSend(v8, "hk_isAfterDate:", v9))
      {
        char v10 = [v5 startDate];
        uint64_t v11 = [v7 endDate];
        char v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);
      }
      else
      {
        char v12 = 0;
      }

      unint64_t v13 = _Block_copy(a1[12]);
      if ((v12 & 1) == 0) {
        operator new();
      }
    }
    else
    {
      unint64_t v13 = _Block_copy(a1[12]);
    }
    *((unsigned char *)a1 + 536) = 1;
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI33HDStatisticsAverageSampleDurationE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
    v27[3] = &unk_1E6308FF8;
    id v15 = v5;
    id v28 = v15;
    id v16 = v13;
    id v29 = v16;
    (*((void (**)(id *, void *))*a1 + 9))(a1, v27);
    if (v5)
    {
      double v17 = [v15 startDate];
      [v17 timeIntervalSinceReferenceDate];
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_configureForStartTime((uint64_t)a1);
    }
    else
    {
      (*((void (**)(id *))*a1 + 4))(a1);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI33HDStatisticsAverageSampleDurationE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
    v21[3] = &unk_1E6309060;
    char v24 = a1;
    id v5 = v15;
    char v26 = 1;
    id v22 = v5;
    uint64_t v25 = a1;
    id v23 = WeakRetained;
    uint64_t v14 = (*((uint64_t (**)(id *, void *, uint64_t))*a1 + 14))(a1, v21, a3);
    double v18 = _Block_copy(v16);
    id v19 = a1[12];
    a1[12] = v18;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to invalidate interval: no data source available.");
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1BD12C0E8(_Unwind_Exception *a1)
{
  MEMORY[0x1C187B8A0](v4, 0x10F1C40C88B5054);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI33HDStatisticsAverageSampleDurationE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_11;
  }
  id v3 = [v10 endDate];
  uint64_t v4 = [*(id *)(a1 + 32) startDate];
  char v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    id v6 = [v10 startDate];
    uint64_t v7 = [*(id *)(a1 + 32) endDate];
    char v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_11:
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9) {
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
      }
    }
  }
}

void sub_1BD12C2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI33HDStatisticsAverageSampleDurationE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = [*(id *)(a1 + 32) startDate];
  [v5 timeIntervalSinceReferenceDate];
  uint64_t v7 = v6;

  char v8 = [*(id *)(a1 + 32) endDate];
  [v8 timeIntervalSinceReferenceDate];
  uint64_t v10 = v9;

  uint64_t v11 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  uint64_t v13 = *(void *)(a1 + 32);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI33HDStatisticsAverageSampleDurationE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  char v32 = *(unsigned char *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  uint64_t v31 = *(void *)(a1 + 56);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI33HDStatisticsAverageSampleDurationE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  uint64_t v14 = [v11 collectionCalculator:WeakRetained queryForInterval:v13 error:a2 sampleHandler:v30 mergeHandler:v29];

  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15 != v4)
    {
      id v16 = [*(id *)(a1 + 32) endDate];
      [v16 timeIntervalSinceReferenceDate];
      if (*(void *)(v15 + 40))
      {
        double v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          id v19 = [*(id *)(v15 + 40) dateIntervalAtIndex:*(void *)(v15 + 112) + 1];
          HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          unint64_t v20 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_statisticsFromFinishedBucket(v15, (double *)(v15 + 120));
          double v21 = [v19 startDate];
          [v21 timeIntervalSinceReferenceDate];
          double v23 = v22;
          char v24 = [v19 endDate];
          [v24 timeIntervalSinceReferenceDate];
          HDStatisticsCollectionEngine<HDStatisticsAverageSampleDuration>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            char v26 = _Block_copy(*(const void **)(v15 + 96));
            double v27 = v26;
            if (v26) {
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);
            }
          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_didChangeBucket(v15, 0);
        }
      }
    }
  }
  return v14;
}

void sub_1BD12C578(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI33HDStatisticsAverageSampleDurationE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3()
{
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI33HDStatisticsAverageSampleDurationE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 536)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_configureForStartTime(a1);
  }
  if (*(void *)(a1 + 40)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_advanceToTime(a1, a2);
  }
  if (*(double *)(a1 + 128) > a2)
  {
    HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_mergeThroughTime(a1 + 120, a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 32) < *(double *)(v10 + 8))
                {
                  uint64_t v129 = *(void *)(v10 + 32);
                  long long v113 = *(_OWORD *)v10;
                  long long v121 = *(_OWORD *)(v10 + 16);
                  long long v52 = *(_OWORD *)(a2 - 40);
                  long long v53 = *(_OWORD *)(a2 - 24);
                  *(_WORD *)(v10 + 32) = *(_WORD *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(_WORD *)(a2 - 8) = v129;
                  *(_OWORD *)(a2 - 24) = v121;
                  *(_OWORD *)(a2 - 40) = v113;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v10, (double *)(v10 + 40), (double *)(a2 - 40));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, v10 + 120, a2 - 40);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            uint64_t v54 = (void *)(v10 + 40);
            BOOL v56 = v10 == a2 || v54 == (void *)a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  long long v59 = v54;
                  double v60 = *(double *)(v58 + 48);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *v54;
                    long long v114 = *(_OWORD *)(v58 + 56);
                    uint64_t v122 = *(void *)(v58 + 72);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      uint64_t v63 = v10 + v62;
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      *(_OWORD *)(v63 + 40) = *(_OWORD *)(v10 + v62);
                      *(_OWORD *)(v63 + 56) = v64;
                      *(_WORD *)(v63 + 72) = *(_WORD *)(v10 + v62 + 32);
                      if (!v62) {
                        break;
                      }
                      v62 -= 40;
                      if (v60 >= *(double *)(v63 - 32))
                      {
                        uint64_t v65 = v10 + v62 + 40;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = v114;
                    *(_WORD *)(v65 + 32) = v122;
                  }
                  uint64_t v54 = v59 + 5;
                  v57 += 40;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 5 != (void *)a2);
              }
            }
            else if (!v56)
            {
              do
              {
                long long v98 = v54;
                double v99 = *(double *)(a1 + 48);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *v54;
                  long long v117 = *(_OWORD *)(a1 + 56);
                  uint64_t v125 = *(void *)(a1 + 72);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(_OWORD *)(v101 - 3);
                    *(_OWORD *)long long v101 = *(_OWORD *)(v101 - 5);
                    *((_OWORD *)v101 + 1) = v102;
                    *((_WORD *)v101 + 16) = *((_WORD *)v101 - 4);
                    double v103 = *((double *)v101 - 9);
                    v101 -= 5;
                  }
                  while (v99 < v103);
                  void *v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *((_WORD *)v101 + 16) = v125;
                  *((_OWORD *)v101 + 1) = v117;
                }
                v54 += 5;
                a1 = (unint64_t)v98;
              }
              while (v98 + 5 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 40 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v10 + 40 * v69 + 8) < *(double *)(v70 + 48))
                  {
                    v70 += 40;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  double v71 = *(double *)(v10 + 40 * v68 + 8);
                  if (*(double *)(v70 + 8) >= v71)
                  {
                    unint64_t v72 = v10 + 40 * v68;
                    uint64_t v73 = *(void *)v72;
                    uint64_t v123 = *(void *)(v72 + 32);
                    long long v115 = *(_OWORD *)(v72 + 16);
                    do
                    {
                      unint64_t v74 = v72;
                      unint64_t v72 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_WORD *)(v74 + 32) = *(_WORD *)(v70 + 32);
                      *(_OWORD *)unint64_t v74 = v75;
                      *(_OWORD *)(v74 + 16) = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 40 * v77;
                      uint64_t v78 = 2 * v69 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v10 + 40 * v77 + 8) < *(double *)(v70 + 48))
                      {
                        v70 += 40;
                        uint64_t v77 = v78;
                      }
                      uint64_t v69 = v77;
                    }
                    while (*(double *)(v70 + 8) >= v71);
                    *(void *)unint64_t v72 = v73;
                    *(double *)(v72 + 8) = v71;
                    *(_OWORD *)(v72 + 16) = v115;
                    *(_WORD *)(v72 + 32) = v123;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x28uLL;
              do
              {
                uint64_t v80 = 0;
                uint64_t v130 = *(void *)(v10 + 32);
                long long v116 = *(_OWORD *)v10;
                long long v124 = *(_OWORD *)(v10 + 16);
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = v81;
                  uint64_t v83 = v80 + 1;
                  v81 += 40 * (v80 + 1);
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v85 = v84 + 2;
                  if (v85 < v79 && *(double *)(v82 + 40 * v83 + 8) < *(double *)(v81 + 48))
                  {
                    v81 += 40;
                    uint64_t v80 = v85;
                  }
                  long long v86 = *(_OWORD *)v81;
                  long long v87 = *(_OWORD *)(v81 + 16);
                  *(_WORD *)(v82 + 32) = *(_WORD *)(v81 + 32);
                  *(_OWORD *)unint64_t v82 = v86;
                  *(_OWORD *)(v82 + 16) = v87;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 40;
                if (v81 == a2)
                {
                  *(_WORD *)(v81 + 32) = v130;
                  *(_OWORD *)unint64_t v81 = v116;
                  *(_OWORD *)(v81 + 16) = v124;
                }
                else
                {
                  long long v88 = *(_OWORD *)a2;
                  long long v89 = *(_OWORD *)(a2 + 16);
                  *(_WORD *)(v81 + 32) = *(_WORD *)(a2 + 32);
                  *(_OWORD *)unint64_t v81 = v88;
                  *(_OWORD *)(v81 + 16) = v89;
                  *(_WORD *)(a2 + 32) = v130;
                  *(_OWORD *)a2 = v116;
                  *(_OWORD *)(a2 + 16) = v124;
                  uint64_t v90 = v81 - v10 + 40;
                  if (v90 >= 41)
                  {
                    unint64_t v91 = (v90 / 0x28uLL - 2) >> 1;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v10 + 40 * v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      uint64_t v109 = *(void *)(v81 + 32);
                      long long v106 = *(_OWORD *)(v81 + 16);
                      do
                      {
                        unint64_t v94 = v81;
                        unint64_t v81 = v10 + 40 * v91;
                        long long v95 = *(_OWORD *)v81;
                        long long v96 = *(_OWORD *)(v81 + 16);
                        *(_WORD *)(v94 + 32) = *(_WORD *)(v81 + 32);
                        *(_OWORD *)unint64_t v94 = v95;
                        *(_OWORD *)(v94 + 16) = v96;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 40 * v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_WORD *)(v81 + 32) = v109;
                      *(_OWORD *)(v81 + 16) = v106;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40 * (v12 >> 1)), (double *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            id v16 = (double *)(a1 + 40 * v13 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40), v16, (double *)(a2 - 80));
            double v17 = (double *)(a1 + 40 + 8 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 80), v17, (double *)(a2 - 120));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v16, (double *)v14, v17);
            uint64_t v126 = *(void *)(a1 + 32);
            long long v110 = *(_OWORD *)a1;
            long long v118 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 16) = v19;
            *(_WORD *)(v14 + 32) = v126;
            *(_OWORD *)unint64_t v14 = v110;
            *(_OWORD *)(v14 + 16) = v118;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40 * (v12 >> 1)), (double *)a1, (double *)(a2 - 40));
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 32) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          long long v105 = *(_OWORD *)(a1 + 16);
          uint64_t v108 = *(void *)(a1 + 32);
          if (v20 >= *(double *)(a2 - 32))
          {
            unint64_t v41 = a1 + 40;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 40;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 40;
              double v40 = *(double *)(v39 + 48);
              v39 += 40;
            }
            while (v20 >= v40);
          }
          unint64_t v43 = a2;
          if (v10 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              unint64_t v43 = v44 - 40;
              double v45 = *(double *)(v44 - 32);
              v44 -= 40;
            }
            while (v20 < v45);
          }
          while (v10 < v43)
          {
            uint64_t v128 = *(void *)(v10 + 32);
            long long v112 = *(_OWORD *)v10;
            long long v120 = *(_OWORD *)(v10 + 16);
            long long v46 = *(_OWORD *)v43;
            long long v47 = *(_OWORD *)(v43 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v43 + 32);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(_WORD *)(v43 + 32) = v128;
            *(_OWORD *)unint64_t v43 = v112;
            *(_OWORD *)(v43 + 16) = v120;
            do
            {
              double v48 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *(double *)(v43 - 32);
              v43 -= 40;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 40);
            long long v51 = *(_OWORD *)(v10 - 24);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 40) = v38;
          *(double *)(v10 - 32) = v20;
          *(_WORD *)(v10 - 8) = v108;
          *(_OWORD *)(v10 - 24) = v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        long long v104 = *(_OWORD *)(a1 + 16);
        uint64_t v107 = *(void *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 48);
          v21 += 40;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        unint64_t v25 = a2;
        if (v21 == 40)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 40;
            double v29 = *(double *)(v28 - 32);
            v28 -= 40;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 40;
            double v27 = *(double *)(v25 - 32);
            v25 -= 40;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v127 = *(void *)(v10 + 32);
            long long v111 = *(_OWORD *)v10;
            long long v119 = *(_OWORD *)(v10 + 16);
            long long v31 = *(_OWORD *)v30;
            long long v32 = *(_OWORD *)(v30 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v30 + 32);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(_WORD *)(v30 + 32) = v127;
            *(_OWORD *)unint64_t v30 = v111;
            *(_OWORD *)(v30 + 16) = v119;
            do
            {
              double v33 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v33 < v20);
            do
            {
              double v34 = *(double *)(v30 - 32);
              v30 -= 40;
            }
            while (v34 >= v20);
          }
          while (v10 < v30);
        }
        if (v10 - 40 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 40);
          long long v36 = *(_OWORD *)(v10 - 24);
          *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 40) = v22;
        *(double *)(v10 - 32) = v20;
        *(_WORD *)(v10 - 8) = v107;
        *(_OWORD *)(v10 - 24) = v104;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 40;
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        __int16 v9 = *(_WORD *)(a2 - 8);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      uint64_t v16 = *(void *)v12;
      long long v21 = *(_OWORD *)(v12 + 16);
      uint64_t v22 = *(void *)(v12 + 32);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(void *)uint64_t v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI33HDStatisticsAverageSampleDurationE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(void *a1, uint64_t a2)
{
  id v3 = (void *)a1[5];
  uint64_t v4 = a1[6];
  BOOL v5 = (void *)a1[4];
  uint64_t v6 = [v5 dateInterval];
  void v9[4] = v4;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI33HDStatisticsAverageSampleDurationE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI33HDStatisticsAverageSampleDurationE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  uint64_t v7 = [v3 collectionCalculator:v5 queryForInterval:v6 error:a2 sampleHandler:v10 mergeHandler:v9];

  return v7;
}

void sub_1BD12D27C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI33HDStatisticsAverageSampleDurationE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10 = *(void *)(a1 + 32);
  *(double *)int v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  char v15 = 1;
  uint64_t v11 = [MEMORY[0x1E4F1C9C8] distantFuture];
  [v11 timeIntervalSinceReferenceDate];
  BOOL v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1BD12D320(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI33HDStatisticsAverageSampleDurationE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6 = a3;
  uint64_t v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = &unk_1F17256C0;
  double v9 = 900.0;
  if ((v6 & 0x10) == 0) {
    double v9 = 0.0;
  }
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(void *)(v8 + 104) = 0;
  *(void *)(v8 + 112) = 0;
  *(void *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_WORD *)(a1 + 640) = 1;
  *(unsigned char *)(a1 + 642) = 0;
  *(unsigned char *)(a1 + 644) = 0;
  *(void *)(a1 + 648) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(void *)(a1 + 688) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);

  JUMPOUT(0x1C187B8A0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1F17256C0;
  uint64_t v2 = *(void **)(a1 + 672);
  if (v2)
  {
    *(void *)(a1 + 680) = v2;
    operator delete(v2);
  }

  id v3 = *(void **)(a1 + 608);
  if (v3)
  {
    *(void *)(a1 + 616) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(unsigned char *)(result + 640) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::setDateInterval(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 copy];
  uint64_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;

  BOOL v5 = [v6 startDate];
  [v5 timeIntervalSinceReferenceDate];
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
}

void sub_1BD12D4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(void *)(a1 + 40))
  {
    id v5 = v3;
    [v3 timeIntervalSinceReferenceDate];
    *(void *)(a1 + 648) = v4;
    id v3 = v5;
  }
}

void sub_1BD12D53C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::setStatisticsConfiguration(id *a1, void *a2)
{
  objc_storeStrong(a1 + 82, a2);
  id v7 = a2;
  id v4 = a1[82];
  id v5 = a1[79];
  a1[79] = v4;
  id v6 = v4;

  objc_storeStrong(a1 + 19, a1[79]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (*(void *)(a1 + 40)) {
    return 1;
  }
  id v7 = *(char **)a2;
  uint64_t v8 = *(void *)(a2 + 8);
  BOOL v9 = *(void *)(a1 + 224) == *(void *)(a1 + 216) && (uint64_t)(*(void *)(a1 + 256) - *(void *)(a1 + 248)) < 1
    || HKIntervalMask<double>::firstDifference(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)a2, *(void *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), v7, v8, (v8 - (uint64_t)v7) >> 4);
  }
  if (v9) {
    return 1;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128);

  return v11(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 copy];
  id v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v3;
}

void sub_1BD12D740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::dataSource(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));

  return WeakRetained;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::currentStatistics(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 640))
  {
    uint64_t v1 = 0;
  }
  else
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v4);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v4, v4[1]);
    uint64_t v1 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v4);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v4);
  }

  return v1;
}

void sub_1BD12D810(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(a1 + 64);
  id v7 = v6;
  if (v6)
  {
    uint64_t v8 = [v6 startDate];
    [v8 timeIntervalSinceReferenceDate];
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    uint64_t v10 = [v7 endDate];
    [v10 timeIntervalSinceReferenceDate];
    double v12 = v11;
    double v13 = *(double *)(a2 + 8);

    if (v12 < v13) {
      goto LABEL_9;
    }
  }
  if (!*(unsigned char *)(a1 + 642))
  {
LABEL_11:
    uint64_t v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 641))
  {
LABEL_9:
    uint64_t v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(unsigned char *)(a1 + 643)) {
      goto LABEL_11;
    }
    unint64_t v17 = *(void *)(a1 + 680);
    unint64_t v18 = *(void *)(a1 + 688);
    if (v17 >= v18)
    {
      uint64_t v22 = *(void *)(a1 + 672);
      unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      unint64_t v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24) {
        unint64_t v24 = 2 * v25;
      }
      if (v25 >= 0x333333333333333) {
        unint64_t v26 = 0x666666666666666;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26) {
        unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      }
      else {
        uint64_t v27 = 0;
      }
      unint64_t v28 = v26 + 40 * v23;
      unint64_t v29 = v26 + 40 * v27;
      long long v30 = *(_OWORD *)a2;
      long long v31 = *(_OWORD *)(a2 + 16);
      *(void *)(v28 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      unint64_t v21 = v28 + 40;
      long long v32 = *(char **)(a1 + 680);
      double v33 = *(char **)(a1 + 672);
      if (v32 != v33)
      {
        do
        {
          long long v34 = *(_OWORD *)(v32 - 40);
          long long v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        long long v32 = *(char **)(a1 + 672);
      }
      *(void *)(a1 + 672) = v28;
      *(void *)(a1 + 680) = v21;
      *(void *)(a1 + 688) = v29;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      long long v19 = *(_OWORD *)a2;
      long long v20 = *(_OWORD *)(a2 + 16);
      *(void *)(v17 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      unint64_t v21 = v17 + 40;
    }
    *(void *)(a1 + 680) = v21;
    goto LABEL_9;
  }
  int v14 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
  uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1BD12DA80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = v5;
  if (*(unsigned char *)(a1 + 642))
  {
    uint64_t v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 642) = 1;
  uint64_t v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    uint64_t v7 = 0;
    goto LABEL_82;
  }
  uint64_t v65 = v6;
  if (*(unsigned char *)(a1 + 641)) {
    goto LABEL_5;
  }
  double v9 = *(void **)(a1 + 664);
  if (!v9)
  {
    id v68 = 0;
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 40))
  {
LABEL_5:
    int v8 = 0;
    id v68 = 0;
    goto LABEL_29;
  }
  [v9 sortUsingComparator:&__block_literal_global_964];
  id v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v10 = *(id *)(a1 + 664);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  if (!v11)
  {

    id v12 = 0;
    goto LABEL_27;
  }
  id v12 = 0;
  uint64_t v13 = *(void *)v70;
  do
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (*(void *)v70 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(id *)(*((void *)&v69 + 1) + 8 * i);
      BOOL v16 = v15;
      if (v12)
      {
        unint64_t v17 = [v15 startDate];
        unint64_t v18 = [v12 endDate];
        int v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          long long v20 = [v16 endDate];
          unint64_t v21 = [v12 endDate];
          int v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22) {
            goto LABEL_21;
          }
          id v23 = objc_alloc(MEMORY[0x1E4F28C18]);
          unint64_t v24 = [v12 startDate];
          unint64_t v25 = [v16 endDate];
          id v26 = (id)[v23 initWithStartDate:v24 endDate:v25];
        }
        else
        {
          [v68 addObject:v12];
          id v26 = v16;
        }
        id v12 = v26;
      }
      else
      {
        id v12 = v15;
      }
LABEL_21:
    }
    uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  }
  while (v11);

  if (v12) {
    [v68 addObject:v12];
  }
LABEL_27:

LABEL_28:
  int v8 = 1;
LABEL_29:
  uint64_t v27 = *(void **)(a1 + 664);
  *(void *)(a1 + 664) = 0;

  *(unsigned char *)(a1 + 641) = 0;
  if (!v8)
  {
    unint64_t v38 = *(void *)(a1 + 672);
    *(void *)(a1 + 688) = 0;
    *(void *)(a1 + 680) = 0;
    *(void *)(a1 + 672) = 0;
    unint64_t v39 = v38;
    goto LABEL_47;
  }
  unint64_t v28 = [v68 lastObject];
  if (v28)
  {
    unint64_t v29 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_currentBucketInterval(a1);
    long long v30 = [v29 endDate];
    long long v31 = [v28 endDate];
    int v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      double v33 = [v28 endDate];
      [v33 timeIntervalSinceReferenceDate];
      double v35 = v34;

      uint64_t v36 = *(void *)(a1 + 672);
      BOOL v37 = *(long long **)(a1 + 680);
      while ((long long *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((long long *)v36 != v37)
          {
            double v40 = (long long *)(v36 + 40);
            if ((long long *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  long long v41 = *v40;
                  long long v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)uint64_t v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                double v40 = (long long *)((char *)v40 + 40);
              }
              while (v40 != v37);
              BOOL v37 = *(long long **)(a1 + 680);
            }
          }
          if ((long long *)v36 != v37) {
            *(void *)(a1 + 680) = v36;
          }
          break;
        }
        v36 += 40;
      }
    }
  }
  unint64_t v38 = *(void *)(a1 + 672);
  unint64_t v39 = *(void *)(a1 + 680);
  *(void *)(a1 + 688) = 0;
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 680) = 0;
  if (![v68 count]) {
    goto LABEL_60;
  }
LABEL_47:
  id v43 = v68;
  long long __p = (void *)v38;
  if (v43)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v44 = v43;
    uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v70;
      while (2)
      {
        for (uint64_t j = 0; j != v45; ++j)
        {
          if (*(void *)v70 != v46) {
            objc_enumerationMutation(v44);
          }
          id v48 = *(id *)(*((void *)&v69 + 1) + 8 * j);
          int v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval((id *)a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
        if (v45) {
          continue;
        }
        break;
      }
    }

LABEL_59:
    unint64_t v38 = (unint64_t)__p;
LABEL_60:
    unint64_t v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v51;
    }
    int v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    long long __p = (void *)v38;
    if (v39 != v38)
    {
      uint64_t v54 = v38;
      uint64_t v50 = v67;
      do
      {
        int v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_primitiveAddSample(a1, v54, 1, v50);
        int v53 = v55;
        v54 += 40;
        if (v54 == v39) {
          char v56 = 0;
        }
        else {
          char v56 = v55;
        }
        uint64_t v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval((id *)a1, 0, v67))goto LABEL_59; {
LABEL_70:
    }
    int v53 = 0;
  }
  if (*(void *)(a1 + 40) && *(void *)(a1 + 616) != *(void *)(a1 + 608))
  {
    do
    {
      uint64_t v57 = objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(void *)(a1 + 112) + 1, v50, v65);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      unint64_t v58 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, (double *)(a1 + 120));
      long long v59 = [v57 startDate];
      [v59 timeIntervalSinceReferenceDate];
      double v61 = v60;
      uint64_t v62 = [v57 endDate];
      [v62 timeIntervalSinceReferenceDate];
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
    }
    while (*(void *)(a1 + 616) != *(void *)(a1 + 608));
  }
  *(unsigned char *)(a1 + 642) = 0;
  if (__p) {
    operator delete(__p);
  }

  if (v53)
  {
    if (*(unsigned char *)(a1 + 644))
    {
      *(unsigned char *)(a1 + 644) = 0;
      id v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
      uint64_t v7 = 1;
      goto LABEL_82;
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v6 = v65;
LABEL_82:
  *(unsigned char *)(a1 + 642) = 0;
LABEL_83:

  return v7;
}

void sub_1BD12E184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    *(unsigned char *)(v13 + 642) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(unsigned char *)(result + 643) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(unsigned char *)(a1 + 642)) {
      goto LABEL_12;
    }
    uint64_t v7 = 0;
LABEL_14:
    uint64_t v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval((id *)a1, v7, a3);
    goto LABEL_15;
  }
  uint64_t v7 = [v6 dateIntervalForIntervalsContainingInterval:v5];

  if (!*(unsigned char *)(a1 + 642)) {
    goto LABEL_14;
  }
  if (!v7)
  {
LABEL_12:
    id v12 = *(void **)(a1 + 664);
    *(void *)(a1 + 664) = 0;

    uint64_t v7 = 0;
    uint64_t v11 = 1;
    *(unsigned char *)(a1 + 641) = 1;
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 641))
  {
    int v8 = *(void **)(a1 + 664);
    if (!v8)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      id v10 = *(void **)(a1 + 664);
      *(void *)(a1 + 664) = v9;

      int v8 = *(void **)(a1 + 664);
    }
    [v8 addObject:v7];
  }
  uint64_t v11 = 1;
LABEL_15:

  return v11;
}

void sub_1BD12E484(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    *(unsigned char *)(a1 + 640) = 1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v9[3] = &unk_1E63043E8;
    uint64_t v12 = a1;
    id v10 = v5;
    id v11 = WeakRetained;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 112))(a1, v9, a3);
    if (v7 && *(unsigned char *)(a1 + 640) && !*(void *)(a1 + 40)) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to query for initial statistics: no data source available.");
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1BD12E5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::reset(uint64_t result)
{
  *(unsigned char *)(result + 640) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 encodeBool:*(unsigned __int8 *)(a1 + 640) forKey:@"needs_config"];
  v3;
  v27[0] = &unk_1F1726FA0;
  v27[1] = 0;
  int v28 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
  LOBYTE(v28) = 1;
  v27[2] = v4;
  memset(&v27[3], 0, 24);
  statistics::StatisticsEngine::makeCurrentBucket((uint64_t)v27);
  int v8 = &unk_1F171B9C8;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = 0;
  int v26 = 511;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v22 = 0;
  int8x16_t v9 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  uint64_t v5 = *(void *)(a1 + 136);
  char v24 = *(unsigned char *)(a1 + 144);
  char v25 = *(unsigned char *)(a1 + 145);
  BOOL v23 = *(_DWORD *)(a1 + 148) == 0;
  int8x16_t v10 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v14 = v5;
  uint64_t v15 = v6;
  uint64_t v7 = *(int8x16_t **)(a1 + 216);
  if (v7 != *(int8x16_t **)(a1 + 224))
  {
    v29[0] = &unk_1F17206F8;
    int v34 = 127;
    int8x16_t v30 = vextq_s8(*v7, *v7, 8uLL);
    v29[1] = v7[1].i64[0];
    v29[2] = v7[1].i64[1];
    char v33 = 0;
    __int8 v32 = v7[2].i8[9];
    __int8 v31 = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>();
  }
  statistics::StatisticsBucket::makeStatistics((uint64_t)&v8);
  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::archive((uint64_t)v29, a1 + 240);
}

void sub_1BD12E9D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v60 = a2;
  *(unsigned char *)(a1 + 640) = [v60 decodeBoolForKey:@"needs_config"];
  id v3 = v60;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)&v64.n128_i64[1], 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)uint64_t v65 = 0u;
  long long v66 = 0u;
  unint64_t v110 = 0;
  id v63 = v3;
  PB::Reader::Reader((PB::Reader *)v109, (const unsigned __int8 *)[v63 decodeBytesForKey:@"hdsce_archived_representation" returnedLength:&v110]);
  uint64_t v62 = a1;
  long long v102 = &unk_1F1726FA0;
  uint64_t v103 = 0;
  uint64_t v107 = 0;
  uint64_t v105 = 0;
  uint64_t v106 = 0;
  int v108 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v102, (PB::Reader *)v109);
  v64.n128_u64[0] = v104;
  if (v103)
  {
    uint64_t v71 = 0;
    memset(v74, 0, sizeof(v74));
    *(_OWORD *)int64_t v79 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v82 = 0u;
    __int16 v83 = 0;
    memset(v84, 0, 74);
    uint64_t v87 = 0;
    int v78 = 0;
    long long __p = 0;
    unint64_t v77 = 0;
    long long v76 = 0;
    long long v86 = 0;
    int64_t v85 = &v86;
    long long v88 = 0u;
    long long v89 = 0u;
    int v90 = 1065353216;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v93 = 0u;
    uint64_t v94 = 0;
    int v95 = 1065353216;
    long long v96 = 0u;
    long long v97 = 0u;
    int v98 = 1065353216;
    long long v99 = 0u;
    long long v100 = 0u;
    int v101 = 1065353216;
    int8x16_t v67 = vextq_s8(*(int8x16_t *)(v103 + 8), *(int8x16_t *)(v103 + 8), 8uLL);
    uint64_t v4 = *(void *)(v103 + 72);
    uint64_t v68 = *(void *)(v103 + 64);
    char v69 = *(unsigned char *)(v103 + 185);
    char v70 = *(unsigned char *)(v103 + 186);
    int8x16_t v72 = vextq_s8(*(int8x16_t *)(v103 + 24), *(int8x16_t *)(v103 + 24), 8uLL);
    uint64_t v73 = v4;
    uint64_t v5 = *(void *)(v103 + 80);
    uint64_t v6 = *(void *)(v103 + 88);
    double v61 = (void *)v103;
    if (v5 != v6)
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(*(void *)v5 + 24);
        uint64_t v9 = *(void *)(*(void *)v5 + 32);
        uint64_t v10 = *(void *)(*(void *)v5 + 8);
        uint64_t v11 = *(void *)(*(void *)v5 + 16);
        char v12 = *(unsigned char *)(*(void *)v5 + 41);
        char v13 = *(unsigned char *)(*(void *)v5 + 40);
        if ((unint64_t)v7 >= v77)
        {
          uint64_t v14 = (char *)__p;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)__p) >> 4);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v77 - (void)__p) >> 4) > v16) {
            unint64_t v16 = 0x5555555555555556 * ((uint64_t)(v77 - (void)__p) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v77 - (void)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v17 = 0x555555555555555;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17)
          {
            unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            uint64_t v7 = v76;
            uint64_t v14 = (char *)__p;
          }
          else
          {
            uint64_t v18 = 0;
          }
          long long v19 = (void *)(v17 + 48 * v15);
          *long long v19 = v9;
          v19[1] = v8;
          v19[2] = v10;
          v19[3] = v11;
          *((_WORD *)v19 + 16) = 1;
          *((unsigned char *)v19 + 40) = 0;
          *((unsigned char *)v19 + 41) = v12;
          *((unsigned char *)v19 + 42) = v13;
          long long v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              long long v21 = *((_OWORD *)v7 - 3);
              long long v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            uint64_t v14 = (char *)__p;
          }
          uint64_t v7 = (char *)(v19 + 6);
          long long __p = v20;
          long long v76 = (char *)(v19 + 6);
          unint64_t v77 = v17 + 48 * v18;
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)uint64_t v7 = v9;
          *((void *)v7 + 1) = v8;
          *((void *)v7 + 2) = v10;
          *((void *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        long long v76 = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    BOOL v23 = (void *)v61[13];
    if (v23)
    {
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::unarchive((uint64_t)&v111, v23);
      int v78 = v111;
      if (v79[0])
      {
        v79[1] = v79[0];
        operator delete(v79[0]);
      }
      *(_OWORD *)int64_t v79 = v112;
      long long v80 = v113;
      *(void *)&long long v113 = 0;
      long long v112 = 0uLL;
      long long v81 = v114;
      long long v82 = v115;
      __int16 v83 = v116;
      v84[0] = v117;
      char v24 = (void *)v84[1];
      if (v84[1])
      {
        v84[2] = v84[1];
        operator delete((void *)v84[1]);
        char v24 = (void *)v112;
      }
      *(_OWORD *)&v84[1] = v118;
      v84[3] = v119;
      uint64_t v119 = 0;
      long long v118 = 0uLL;
      v84[4] = v120;
      *(_OWORD *)&v84[5] = v121;
      *(_OWORD *)&v84[7] = v122;
      LOWORD(v84[9]) = v123;
      if (v24)
      {
        *((void *)&v112 + 1) = v24;
        operator delete(v24);
      }
    }
    char v25 = (void **)v61[17];
    for (uint64_t i = (void **)v61[18]; v25 != i; ++v25)
    {
      uint64_t v27 = (uint64_t)*v25;
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::unarchive((uint64_t)&v111, *v25);
      uint64_t v28 = *(void *)(v27 + 144);
      unint64_t v29 = v86;
      for (j = &v86; ; unint64_t v29 = *j)
      {
        __int8 v31 = j;
        if (!v29) {
          break;
        }
        while (1)
        {
          uint64_t j = (uint64_t **)v29;
          uint64_t v32 = v29[4];
          if (v32 > v28) {
            break;
          }
          if (v32 >= v28)
          {
            char v33 = (char *)j;
            goto LABEL_40;
          }
          unint64_t v29 = j[1];
          if (!v29)
          {
            __int8 v31 = j + 1;
            goto LABEL_37;
          }
        }
      }
LABEL_37:
      char v33 = (char *)operator new(0xC8uLL);
      v124[1] = &v86;
      *((void *)v33 + 4) = v28;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *(_OWORD *)(v33 + 120) = 0u;
      *(_OWORD *)(v33 + 136) = 0u;
      *(_OWORD *)(v33 + 152) = 0u;
      *(_OWORD *)(v33 + 168) = 0u;
      *(_OWORD *)(v33 + 184) = 0u;
      char v125 = 1;
      *(void *)char v33 = 0;
      *((void *)v33 + 1) = 0;
      *((void *)v33 + 2) = j;
      *__int8 v31 = (uint64_t *)v33;
      int v34 = (uint64_t *)v33;
      if (*v85)
      {
        int64_t v85 = (uint64_t **)*v85;
        int v34 = *v31;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v86, v34);
      ++v87;
      v124[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v124);
LABEL_40:
      double v35 = (void *)*((void *)v33 + 6);
      *((_DWORD *)v33 + 10) = v111;
      if (v35)
      {
        *((void *)v33 + 7) = v35;
        operator delete(v35);
        *((void *)v33 + 6) = 0;
        *((void *)v33 + 7) = 0;
        *((void *)v33 + 8) = 0;
      }
      *((_OWORD *)v33 + 3) = v112;
      *((void *)v33 + 8) = v113;
      *(void *)&long long v113 = 0;
      long long v112 = 0uLL;
      *((void *)v33 + 9) = *((void *)&v113 + 1);
      long long v36 = v115;
      *((_OWORD *)v33 + 5) = v114;
      *((_OWORD *)v33 + 6) = v36;
      *((_WORD *)v33 + 56) = v116;
      *((void *)v33 + 15) = v117;
      BOOL v37 = (void *)*((void *)v33 + 16);
      if (v37)
      {
        *((void *)v33 + 17) = v37;
        operator delete(v37);
        *((void *)v33 + 16) = 0;
        *((void *)v33 + 17) = 0;
        *((void *)v33 + 18) = 0;
        BOOL v37 = (void *)v112;
      }
      *((_OWORD *)v33 + 8) = v118;
      *((void *)v33 + 18) = v119;
      uint64_t v119 = 0;
      long long v118 = 0uLL;
      *((void *)v33 + 19) = v120;
      long long v38 = v122;
      *((_OWORD *)v33 + 10) = v121;
      *((_OWORD *)v33 + 11) = v38;
      *((_WORD *)v33 + 96) = v123;
      if (v37)
      {
        *((void *)&v112 + 1) = v37;
        operator delete(v37);
      }
    }
    uint64_t v39 = v61[5];
    for (uint64_t k = v61[6]; v39 != k; v39 += 8)
    {
      double v42 = *(double *)(*(void *)v39 + 8);
      double v41 = *(double *)(*(void *)v39 + 16);
      if (v42 >= v41) {
        double v43 = *(double *)(*(void *)v39 + 16);
      }
      else {
        double v43 = *(double *)(*(void *)v39 + 8);
      }
      if (v41 < v42) {
        double v41 = *(double *)(*(void *)v39 + 8);
      }
      HKIntervalMask<double>::_insertInterval(v74, v43, v41);
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::operator=((uint64_t)&v64.n128_i64[1], (uint64_t)&v67);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v67);
  }
  uint64_t v44 = v105;
  uint64_t v45 = v106;
  if (v105 != v106)
  {
    uint64_t v46 = (char *)v65[1];
    do
    {
      uint64_t v47 = *(void *)(*(void *)v44 + 24);
      uint64_t v48 = *(void *)(*(void *)v44 + 32);
      uint64_t v49 = *(void *)(*(void *)v44 + 8);
      uint64_t v50 = *(void *)(*(void *)v44 + 16);
      if ((unint64_t)v46 >= (unint64_t)v66)
      {
        unint64_t v51 = (char *)v65[0];
        unint64_t v52 = 0xCCCCCCCCCCCCCCCDLL * ((v46 - (char *)v65[0]) >> 3);
        unint64_t v53 = v52 + 1;
        if (v52 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(v66 - (unint64_t)v65[0]) >> 3) > v53) {
          unint64_t v53 = 0x999999999999999ALL * ((uint64_t)(v66 - (unint64_t)v65[0]) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v66 - (unint64_t)v65[0]) >> 3) >= 0x333333333333333) {
          unint64_t v54 = 0x666666666666666;
        }
        else {
          unint64_t v54 = v53;
        }
        if (v54)
        {
          unint64_t v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v54);
          uint64_t v46 = (char *)v65[1];
          unint64_t v51 = (char *)v65[0];
        }
        else
        {
          uint64_t v55 = 0;
        }
        unint64_t v56 = v54 + 40 * v52;
        *(void *)unint64_t v56 = v48;
        *(void *)(v56 + 8) = v47;
        *(void *)(v56 + 16) = v49;
        *(void *)(v56 + 24) = v50;
        *(_WORD *)(v56 + 32) = 1;
        uint64_t v57 = (char *)v56;
        if (v46 != v51)
        {
          do
          {
            long long v58 = *(_OWORD *)(v46 - 40);
            long long v59 = *(_OWORD *)(v46 - 24);
            *((_WORD *)v57 - 4) = *((_WORD *)v46 - 4);
            *(_OWORD *)(v57 - 24) = v59;
            *(_OWORD *)(v57 - 40) = v58;
            v57 -= 40;
            v46 -= 40;
          }
          while (v46 != v51);
          unint64_t v51 = (char *)v65[0];
        }
        uint64_t v46 = (char *)(v56 + 40);
        v65[0] = v57;
        v65[1] = (void *)(v56 + 40);
        *(void *)&long long v66 = v54 + 40 * v55;
        if (v51) {
          operator delete(v51);
        }
      }
      else
      {
        *(void *)uint64_t v46 = v48;
        *((void *)v46 + 1) = v47;
        *((void *)v46 + 2) = v49;
        *((void *)v46 + 3) = v50;
        *((_WORD *)v46 + 16) = 1;
        v46 += 40;
      }
      v65[1] = v46;
      v44 += 8;
    }
    while (v44 != v45);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v102);

  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::operator=((void *)(v62 + 112), &v64);
  if (v65[0])
  {
    v65[1] = v65[0];
    operator delete(v65[0]);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v64.n128_i64[1]);
}

void sub_1BD12F254(_Unwind_Exception *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table((uint64_t)&STACK[0x410]);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a2);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x3C0]);
  uint64_t v10 = (void *)STACK[0x3A8];
  if (STACK[0x3A8])
  {
    STACK[0x3B0] = (unint64_t)v10;
    operator delete(v10);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x380]);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>>::destroy((void *)STACK[0x370]);
  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::~HDStatisticsRelative(a3);
  uint64_t v11 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v11;
    operator delete(v11);
  }
  objc_destroyWeak((id *)&STACK[0x2A8]);
  char v12 = (void *)STACK[0x290];
  if (STACK[0x290])
  {
    STACK[0x298] = (unint64_t)v12;
    operator delete(v12);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x438]);
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 256;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_WORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 258) = 0u;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 280) = a1 + 288;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(void *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 400) = 1065353216;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_DWORD *)(a1 + 440) = 1065353216;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_DWORD *)(a1 + 480) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>::~HDStatisticsCombined(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
  id v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 496);
  if (v2)
  {
    *(void *)(a1 + 504) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 448);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 408);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 368);
  uint64_t v2 = *(void **)(a1 + 344);
  if (v2)
  {
    *(void *)(a1 + 352) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 304);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>>::destroy(*(void **)(a1 + 288));
  id v3 = *(void **)(a1 + 208);
  if (v3)
  {
    *(void *)(a1 + 216) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 128);
  if (v4)
  {
    *(void *)(a1 + 136) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 96);
  if (v5)
  {
    *(void *)(a1 + 104) = v5;
    operator delete(v5);
  }
  objc_destroyWeak((id *)(a1 + 88));
  uint64_t v6 = *(void **)(a1 + 64);
  if (v6)
  {
    *(void *)(a1 + 72) = v6;
    operator delete(v6);
  }

  return a1;
}

void *HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::~HDStatisticsRelative(void *a1)
{
  uint64_t v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  id v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<long long const,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,0>(a1 + 4);
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<long long const,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,0>(void *a1)
{
  uint64_t v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = v2;
    operator delete(v2);
  }
  id v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_configureForStartTime(uint64_t a1)
{
  unint64_t v28 = 0;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
    uint64_t v4 = [v2 dateIntervalContainingDate:v3 index:&v28];

    uint64_t v5 = [v4 startDate];
    [v5 timeIntervalSinceReferenceDate];
    double v7 = v6;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
LABEL_5:
    double v13 = v9;

    goto LABEL_6;
  }
  id v10 = *(id *)(a1 + 64);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v11 = [v10 startDate];
    [v11 timeIntervalSinceReferenceDate];
    double v7 = v12;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
    goto LABEL_5;
  }
  double v7 = -1.79769313e308;
  double v13 = 1.79769313e308;
LABEL_6:

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v21, WeakRetained, v7, v13);

  if (*(void *)(a1 + 32) == 1) {
    char v23 = 1;
  }
  uint64_t v22 = *(void *)(a1 + 56);
  char v24 = *(unsigned char *)(a1 + 24) & 1;
  if (v27 != (char *)(a1 + 72)) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27, *(char **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4);
  }
  objc_storeStrong(&v26, *(id *)(a1 + 656));
  if (!*(void *)(a1 + 40)) {
    int v25 = 0;
  }
  unint64_t v15 = v28;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v21);
  v18.n128_u64[0] = v15;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)&v18.n128_i64[1], (uint64_t)v17);
  long long __p = 0u;
  long long v20 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::operator=((void *)(a1 + 112), &v18);

  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v18.n128_i64[1]);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v17);
  *(unsigned char *)(a1 + 640) = 0;
  return HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v21);
}

void sub_1BD12F8F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::operator=(void *a1, __n128 *a2)
{
  *a1 = a2->n128_u64[0];
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::operator=((uint64_t)(a1 + 1), (uint64_t)&a2->n128_i64[1]);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 62), a2 + 31);
  unint64_t v4 = a2[32].n128_u64[1];
  a2[32].n128_u64[1] = 0;
  uint64_t v5 = (void *)a1[65];
  a1[65] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 96);
  double v7 = *(unsigned char **)(a2 + 104);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(void *)(a1 + 96) = v10;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(void *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)(a1 + 128), *(const void **)(a2 + 128), *(void *)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 3);
  long long v12 = *(_OWORD *)(a2 + 152);
  long long v13 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 178) = *(_OWORD *)(a2 + 178);
  *(_OWORD *)(a1 + 168) = v13;
  *(_OWORD *)(a1 + 152) = v12;
  uint64_t v14 = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 200) = v14;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 208), *(const void **)(a2 + 208), *(void *)(a2 + 216), (uint64_t)(*(void *)(a2 + 216) - *(void *)(a2 + 208)) >> 4);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  long long v15 = *(_OWORD *)(a2 + 256);
  uint64_t v16 = *(void *)(a2 + 272);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v15;
  unint64_t v17 = (uint64_t **)(a1 + 288);
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 272) = v16;
  *(void *)(a1 + 280) = a1 + 288;
  __n128 v18 = *(void **)(a2 + 280);
  if (v18 != (void *)(a2 + 288))
  {
    do
    {
      long long v19 = *v17;
      long long v20 = (uint64_t *)(a1 + 288);
      if (*(uint64_t ***)(a1 + 280) == v17) {
        goto LABEL_11;
      }
      long long v21 = *v17;
      uint64_t v22 = (uint64_t *)(a1 + 288);
      if (v19)
      {
        do
        {
          long long v20 = v21;
          long long v21 = (uint64_t *)v21[1];
        }
        while (v21);
      }
      else
      {
        do
        {
          long long v20 = (uint64_t *)v22[2];
          BOOL v23 = *v20 == (void)v22;
          uint64_t v22 = v20;
        }
        while (v23);
      }
      uint64_t v24 = v18[4];
      if (v20[4] < v24)
      {
LABEL_11:
        if (v19) {
          int v25 = (uint64_t **)v20;
        }
        else {
          int v25 = (uint64_t **)(a1 + 288);
        }
        if (v19) {
          id v26 = (uint64_t **)(v20 + 1);
        }
        else {
          id v26 = (uint64_t **)(a1 + 288);
        }
        if (*v26) {
          goto LABEL_28;
        }
      }
      else
      {
        id v26 = (uint64_t **)(a1 + 288);
        int v25 = (uint64_t **)(a1 + 288);
        if (v19)
        {
          uint64_t v27 = *v17;
          while (1)
          {
            while (1)
            {
              int v25 = (uint64_t **)v27;
              uint64_t v28 = v27[4];
              if (v28 <= v24) {
                break;
              }
              uint64_t v27 = *v25;
              id v26 = v25;
              if (!*v25) {
                goto LABEL_27;
              }
            }
            if (v28 >= v24) {
              goto LABEL_28;
            }
            uint64_t v27 = v25[1];
            if (!v27)
            {
              id v26 = v25 + 1;
              break;
            }
          }
        }
      }
LABEL_27:
      unint64_t v29 = (char *)operator new(0xC8uLL);
      v38[0] = v29;
      v38[1] = a1 + 288;
      char v39 = 0;
      *((void *)v29 + 4) = v18[4];
      *((_DWORD *)v29 + 10) = *((_DWORD *)v18 + 10);
      *((void *)v29 + 6) = 0;
      *((void *)v29 + 7) = 0;
      *((void *)v29 + 8) = 0;
      std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)v29 + 6, (const void *)v18[6], v18[7], (uint64_t)(v18[7] - v18[6]) >> 3);
      long long v30 = *(_OWORD *)(v18 + 9);
      long long v31 = *(_OWORD *)(v18 + 11);
      *(_OWORD *)(v29 + 98) = *(_OWORD *)((char *)v18 + 98);
      *(_OWORD *)(v29 + 88) = v31;
      *(_OWORD *)(v29 + 72) = v30;
      uint64_t v32 = v18[15];
      *((void *)v29 + 16) = 0;
      *((void *)v29 + 15) = v32;
      *((void *)v29 + 17) = 0;
      *((void *)v29 + 18) = 0;
      std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)v29 + 16, (const void *)v18[16], v18[17], (uint64_t)(v18[17] - v18[16]) >> 4);
      *((void *)v29 + 19) = v18[19];
      long long v33 = *((_OWORD *)v18 + 10);
      long long v34 = *((_OWORD *)v18 + 11);
      *((void *)v29 + 24) = v18[24];
      *((_OWORD *)v29 + 10) = v33;
      *((_OWORD *)v29 + 11) = v34;
      char v39 = 1;
      std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 280), (uint64_t)v25, v26, (uint64_t *)v29);
      v38[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v38);
LABEL_28:
      double v35 = (void *)v18[1];
      if (v35)
      {
        do
        {
          long long v36 = v35;
          double v35 = (void *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          long long v36 = (void *)v18[2];
          BOOL v23 = *v36 == (void)v18;
          __n128 v18 = v36;
        }
        while (!v23);
      }
      __n128 v18 = v36;
    }
    while (v36 != (void *)(a2 + 288));
  }
  std::unordered_set<long long>::unordered_set(a1 + 304, a2 + 304);
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 344), *(const void **)(a2 + 344), *(void *)(a2 + 352), (uint64_t)(*(void *)(a2 + 352) - *(void *)(a2 + 344)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 368, a2 + 368);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 408, a2 + 408);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 448, a2 + 448);
  return a1;
}

void sub_1BD12FD60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void **a11, id *location, void **a13, char a14)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v19);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v18);
  long long v21 = *v17;
  if (*v17)
  {
    *(void *)(v14 + 352) = v21;
    operator delete(v21);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>>::destroy(*v15);
  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::~HDStatisticsRelative(a10);
  uint64_t v22 = *a11;
  if (*a11)
  {
    *(void *)(v14 + 104) = v22;
    operator delete(v22);
  }
  objc_destroyWeak(location);
  BOOL v23 = *a13;
  if (*a13)
  {
    *(void *)(v14 + 72) = v23;
    operator delete(v23);
  }

  _Unwind_Resume(a1);
}

void *std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    BOOL result = std::vector<double>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BD12FEBC(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<double>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
  }
  BOOL result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<statistics::Interval>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<long long const,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,0>(v1 + 4);
    }
    operator delete(v1);
  }
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::operator=(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  long long v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v5;

  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  id WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  uint64_t v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(void *)(a1 + 104) = v9;
    operator delete(v9);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 128, (__n128 *)(a2 + 128));
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  long long v10 = *(_OWORD *)(a2 + 160);
  long long v11 = *(_OWORD *)(a2 + 176);
  *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v10;
  *(_OWORD *)(a1 + 176) = v11;
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 208, (__n128 *)(a2 + 208));
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  long long v12 = *(_OWORD *)(a2 + 240);
  long long v13 = *(_OWORD *)(a2 + 256);
  *(_WORD *)(a1 + 272) = *(_WORD *)(a2 + 272);
  *(_OWORD *)(a1 + 240) = v12;
  *(_OWORD *)(a1 + 256) = v13;
  uint64_t v14 = a1 + 288;
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>>::destroy(*(void **)(a1 + 288));
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  uint64_t v15 = *(void *)(a2 + 288);
  *(void *)(a1 + 288) = v15;
  uint64_t v16 = *(void *)(a2 + 296);
  *(void *)(a1 + 296) = v16;
  if (v16)
  {
    *(void *)(v15 + 16) = v14;
    *(void *)(a2 + 280) = a2 + 288;
    *(void *)(a2 + 288) = 0;
    *(void *)(a2 + 296) = 0;
  }
  else
  {
    *(void *)(a1 + 280) = v14;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 304, (uint64_t *)(a2 + 304));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 344, (__n128 *)(a2 + 344));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 368, (uint64_t *)(a2 + 368));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 408, (uint64_t *)(a2 + 408));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 448, (uint64_t *)(a2 + 448));
  return a1;
}

id *_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(uint64_t a1, double *a2)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  double v3 = *a2;
  id v4 = objc_alloc(MEMORY[0x1E4F1C9C8]);
  uint64_t v5 = a2 + 5;
  if (v3 != -1.79769313e308) {
    uint64_t v5 = a2;
  }
  long long v89 = (void *)[v4 initWithTimeIntervalSinceReferenceDate:*v5];
  uint64_t v92 = (uint64_t)a2;
  if (a2[1] == 1.79769313e308) {
    uint64_t v6 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:a2[6]];
  }
  else {
    uint64_t v6 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:a2[1]];
  }
  long long v7 = (void *)v6;
  id v8 = *(id *)(a1 + 16);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v9 = *(id *)(a1 + 16);
    if ([v9 shouldUseUnderlyingTypeForStatistics])
    {
      uint64_t v10 = [v9 underlyingSampleType];

      id v8 = (id)v10;
    }
  }
  long long v11 = (void *)[objc_alloc(MEMORY[0x1E4F2B5B0]) initWithDataType:v8 startDate:v89 endDate:v7];
  if (*(unsigned char *)(a1 + 24))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      id v13 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      uint64_t v14 = *(uint64_t **)(v92 + 344);
      uint64_t v15 = *(uint64_t **)(v92 + 352);
      while (v14 != v15)
      {
        uint64_t v16 = *v14;
        id v17 = objc_loadWeakRetained((id *)(a1 + 48));
        uint64_t v18 = [v17 sourceForSourceID:v16];

        if (v18)
        {
          if (([v13 containsObject:v18] & 1) == 0) {
            [v13 addObject:v18];
          }
        }

        ++v14;
      }
      uint64_t v19 = (void *)[v13 copy];
      [v11 _setSources:v19];
    }
  }

  v100[0] = &unk_1F17258B0;
  v100[3] = v100;
  id v90 = v11;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)v104, (uint64_t)v100);
  *(void *)&long long v108 = 0;
  long long v20 = operator new(0x28uLL);
  *long long v20 = &unk_1F1725790;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(v20 + 1), (uint64_t)v104);
  *(void *)&long long v108 = v20;
  uint64_t j = (id *)v90;
  id v22 = (id)MEMORY[0x1E4F2B370];
  BOOL v23 = j;
  uint64_t v24 = [MEMORY[0x1E4F2B618] secondUnit];
  __n128 v25 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v95, v92);
  if (!(void)v108) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v26 = (*(uint64_t (**)(void, char *, __n128))(*(void *)v108 + 48))(v108, v95, v25);
  uint64_t v27 = *(double **)(v26 + 8);
  double v28 = 0.0;
  while (v27 != *(double **)(v26 + 16))
  {
    double v30 = *v27;
    double v29 = v27[1];
    v27 += 2;
    double v28 = v28 + v29 - v30;
  }
  long long v31 = [v22 quantityWithUnit:v24 doubleValue:v28 + *(double *)(v26 + 32)];
  [j setDuration:v31];

  if (__p)
  {
    long long v99 = __p;
    operator delete(__p);
  }
  if (v96)
  {
    long long v97 = (id *)v96;
    operator delete(v96);
  }

  __n128 v32 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v95, v92);
  if (!(void)v108) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  objc_msgSend(j, "setDataCount:", *(void *)(*(uint64_t (**)(void, char *, __n128))(*(void *)v108 + 48))(v108, v95, v32));
  if (__p)
  {
    long long v99 = __p;
    operator delete(__p);
  }
  if (v96)
  {
    long long v97 = (id *)v96;
    operator delete(v96);
  }
  if (*(unsigned char *)(a1 + 24))
  {
    id v33 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v22 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier((uint64_t)v95, v92);
    for (uint64_t i = v97; i; uint64_t i = (id *)*i)
    {
      id v35 = i[2];
      long long v36 = (void *)MEMORY[0x1E4F2B370];
      BOOL v37 = [MEMORY[0x1E4F2B618] secondUnit];
      if (!(void)v108) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v38 = (*(uint64_t (**)(void, id *))(*(void *)v108 + 48))(v108, i + 3);
      char v39 = *(double **)(v38 + 8);
      double v40 = 0.0;
      while (v39 != *(double **)(v38 + 16))
      {
        double v42 = *v39;
        double v41 = v39[1];
        v39 += 2;
        double v40 = v40 + v41 - v42;
      }
      double v43 = [v36 quantityWithUnit:v37 doubleValue:v40 + *(double *)(v38 + 32)];
      [v33 setObject:v43 forKeyedSubscript:v35];

      if (!(void)v108) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v44 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)(*(uint64_t (**)(void, id *))(*(void *)v108 + 48))(v108, i + 3));
      [v22 setObject:v44 forKeyedSubscript:v35];

      uint64_t j = v23;
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>>::~__hash_table((uint64_t)v95);
    [j setDurationBySource:v33];
    [j setDataCountBySource:v22];
  }
  std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](&v105);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v104);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)v101, (uint64_t)v100);
  uint64_t v103 = 0;
  uint64_t v45 = operator new(0x28uLL);
  *uint64_t v45 = &unk_1F1725820;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(v45 + 1), (uint64_t)v101);
  uint64_t v103 = v45;
  long long v93 = j;
  __n128 v46 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v95, v92);
  if (!v103) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v47 = (*(uint64_t (**)(void *, char *, __n128))(*v103 + 48))(v103, v95, v46);
  uint64_t v105 = 0;
  uint64_t v106 = 0;
  uint64_t v107 = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&v105, *(const void **)v47, *(void *)(v47 + 8), (uint64_t)(*(void *)(v47 + 8) - *(void *)v47) >> 3);
  long long v48 = *(_OWORD *)(v47 + 24);
  long long v49 = *(_OWORD *)(v47 + 40);
  *(_OWORD *)&v109[10] = *(_OWORD *)(v47 + 50);
  *(_OWORD *)uint64_t v109 = v49;
  long long v108 = v48;
  if (__p)
  {
    long long v99 = __p;
    operator delete(__p);
  }
  if (v96)
  {
    long long v97 = (id *)v96;
    operator delete(v96);
  }
  double v50 = HDStatisticsPercentiles::calculatePercentileValue((HDStatisticsPercentiles *)&v105);
  unint64_t v51 = (void *)MEMORY[0x1E4F2B370];
  unint64_t v52 = [*(id *)(a1 + 16) canonicalUnit];
  unint64_t v53 = [v51 quantityWithUnit:v52 doubleValue:v50];
  [v93 setPercentileQuantity:v53];

  [v93 setDataCount:(v106 - v105) >> 3];
  uint64_t v54 = *(void *)(a1 + 24);
  LOBYTE(v55) = v54;
  if ((v54 & 0x20) != 0)
  {
    double v57 = *((double *)&v108 + 1);
    double v56 = *(double *)v109;
    double v58 = *(double *)&v109[8];
    long long v59 = (void *)MEMORY[0x1E4F2B370];
    id v60 = [*(id *)(a1 + 16) canonicalUnit];
    double v61 = [v59 quantityWithUnit:v60 doubleValue:v57];
    [v93 setMostRecentQuantity:v61];

    uint64_t v62 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v56, v58);
    [v93 setMostRecentQuantityDateInterval:v62];

    uint64_t v55 = *(void *)(a1 + 24);
  }
  if (v55)
  {
    id v63 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v22 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    if ((v54 & 0x20) != 0)
    {
      id v64 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      id v91 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    }
    else
    {
      id v91 = 0;
      id v64 = 0;
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier((uint64_t)v95, v92);
    for (uint64_t j = v97; j; uint64_t j = (id *)*j)
    {
      id v65 = j[2];
      long long v66 = (void *)MEMORY[0x1E4F2B370];
      int8x16_t v67 = [*(id *)(a1 + 16) canonicalUnit];
      if (!v103) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v68 = (HDStatisticsPercentiles *)(*(uint64_t (**)(void *, id *))(*v103 + 48))(v103, j + 3);
      char v69 = [v66 quantityWithUnit:v67 doubleValue:HDStatisticsPercentiles::calculatePercentileValue(v68)];
      [v63 setObject:v69 forKeyedSubscript:v65];

      if (!v103) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      char v70 = NSNumber;
      uint64_t v71 = (void *)(*(uint64_t (**)(void *, id *))(*v103 + 48))(v103, j + 3);
      int8x16_t v72 = [v70 numberWithLongLong:(uint64_t)(v71[1] - *v71) >> 3];
      [v22 setObject:v72 forKeyedSubscript:v65];

      if ((v54 & 0x20) != 0)
      {
        if (!v103) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        uint64_t v73 = (double *)(*(uint64_t (**)(void *, id *))(*v103 + 48))(v103, j + 3);
        double v75 = v73[4];
        double v74 = v73[5];
        double v76 = v73[6];
        unint64_t v77 = (void *)MEMORY[0x1E4F2B370];
        int v78 = [*(id *)(a1 + 16) canonicalUnit];
        int64_t v79 = [v77 quantityWithUnit:v78 doubleValue:v75];
        [v64 setObject:v79 forKeyedSubscript:v65];

        long long v80 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v74, v76);
        [v91 setObject:v80 forKeyedSubscript:v65];
      }
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>>::~__hash_table((uint64_t)v95);
    [v93 setPercentileQuantityBySource:v63];
    [v93 setDataCountBySource:v22];
    if ((v54 & 0x20) != 0)
    {
      [v93 setMostRecentQuantityBySource:v64];
      [v93 setMostRecentQuantityDateIntervalBySource:v91];
    }
  }
  if (v105)
  {
    uint64_t v106 = v105;
    operator delete(v105);
  }

  std::__function::__value_func<HDStatisticsPercentiles const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v102);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v101);

  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v100);
  long long v81 = [*(id *)(a1 + 16) _unitForChangeInCanonicalUnit];
  long long v82 = [v93 averageQuantity];
  if (v82)
  {
    id v22 = [v93 averageQuantity];
    if (([v22 isCompatibleWithUnit:v81] & 1) == 0)
    {

LABEL_78:
      [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8], @"Expected compatibility with %@", v81 format];
      goto LABEL_79;
    }
  }
  __int16 v83 = [v93 minimumQuantity];
  if (v83)
  {
    uint64_t j = [v93 minimumQuantity];
    if (![j isCompatibleWithUnit:v81])
    {
      int v84 = 1;
      goto LABEL_72;
    }
  }
  int64_t v85 = [v93 maximumQuantity];
  if (v85)
  {
    long long v86 = [v93 maximumQuantity];
    int v87 = [v86 isCompatibleWithUnit:v81];

    int v84 = v87 ^ 1;
    if (v83) {
      goto LABEL_72;
    }
  }
  else
  {
    int v84 = 0;
    if (v83)
    {
LABEL_72:

      if (v82) {
        goto LABEL_73;
      }
LABEL_77:

      if (!v84) {
        goto LABEL_79;
      }
      goto LABEL_78;
    }
  }
  if (!v82) {
    goto LABEL_77;
  }
LABEL_73:

  if (v84) {
    goto LABEL_78;
  }
LABEL_79:

  return v93;
}

void sub_1BD130CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, _Unwind_Exception *exception_object, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  long long v48 = *(void **)(v47 - 200);
  if (v48)
  {
    *(void *)(v47 - 192) = v48;
    operator delete(v48);
  }

  std::__function::__value_func<HDStatisticsPercentiles const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](&a44);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](&a40);

  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](&a36);
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 328);
  uint64_t v2 = *(void *)(a1 + 344);
  if (v1 != (*(void *)(a1 + 352) - v2) >> 3)
  {
    id v4 = (void **)(a1 + 344);
    *(void *)(a1 + 352) = v2;
    std::vector<long long>::reserve((void **)(a1 + 344), v1);
    uint64_t v5 = *(void **)(a1 + 320);
    if (v5)
    {
      uint64_t v6 = *(char **)(a1 + 352);
      do
      {
        uint64_t v7 = v5[2];
        unint64_t v8 = *(void *)(a1 + 360);
        if ((unint64_t)v6 >= v8)
        {
          uint64_t v10 = (char *)*v4;
          uint64_t v11 = (v6 - (unsigned char *)*v4) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            uint64_t v10 = *(char **)(a1 + 344);
            uint64_t v6 = *(char **)(a1 + 352);
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v16 = (void *)(v14 + 8 * v11);
          void *v16 = v7;
          id v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            uint64_t v17 = *((void *)v6 - 1);
            v6 -= 8;
            *--uint64_t v16 = v17;
          }
          *(void *)(a1 + 344) = v16;
          *(void *)(a1 + 352) = v9;
          *(void *)(a1 + 360) = v14 + 8 * v15;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)uint64_t v6 = v7;
          id v9 = v6 + 8;
        }
        *(void *)(a1 + 352) = v9;
        uint64_t v5 = (void *)*v5;
        uint64_t v6 = v9;
      }
      while (v5);
    }
    uint64_t v18 = (id *)(a1 + 88);
    id WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      id v20 = objc_loadWeakRetained(v18);
      [v20 orderSourceIDs:v4];
    }
  }
}

void sub_1BD131160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2) {
    a2 = v4 * floor(a2 / v4);
  }
  double v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    unint64_t v104 = (char **)(a1 + 96);
    long long v102 = (uint64_t *)(a1 + 120);
    location = (id *)(a1 + 88);
    long long v99 = (double **)(a1 + 208);
    uint64_t v6 = (void *)(a1 + 288);
    do
    {
      uint64_t v7 = *(double **)(a1 + 96);
      unint64_t v8 = *(long long **)(a1 + 104);
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v7) >> 4);
      if (v9)
      {
        if (v9 != 1)
        {
          double v30 = a2;
          double v31 = a2;
          double v32 = v5;
          uint64_t v33 = *(void *)(a1 + 96);
          if (v7 != (double *)v8)
          {
            do
            {
              double v34 = *(double *)(v33 + 8);
              double v35 = *(double *)(v33 + 16);
              if (v34 > v32 && v34 < v31) {
                double v31 = *(double *)(v33 + 8);
              }
              if (v35 > v5) {
                double v37 = *(double *)(v33 + 16);
              }
              else {
                double v37 = v30;
              }
              if (v35 < v30)
              {
                double v32 = v5;
                double v30 = v37;
              }
              v33 += 48;
            }
            while ((long long *)v33 != v8);
          }
          if (v30 >= v31) {
            double v38 = v31;
          }
          else {
            double v38 = v30;
          }
          double v39 = *(double *)(a1 + 16);
          if (v39 > 0.0)
          {
            double v40 = v39 * floor(v38 / v39);
            double v41 = v39 * floor((v39 + v5) / v39);
            if (v40 >= v41) {
              double v38 = v40;
            }
            else {
              double v38 = v41;
            }
          }
          *unint64_t v104 = 0;
          v104[1] = 0;
          v104[2] = 0;
          if (v7 != (double *)v8)
          {
            if (v9 > 0x555555555555555) {
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            }
            double v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v9);
            uint64_t v45 = *(char **)(a1 + 96);
            uint64_t v44 = *(char **)(a1 + 104);
            __n128 v46 = v42;
            if (v44 != v45)
            {
              do
              {
                long long v47 = *((_OWORD *)v44 - 3);
                long long v48 = *((_OWORD *)v44 - 2);
                *(_OWORD *)(v46 - 21) = *(_OWORD *)(v44 - 21);
                *((_OWORD *)v46 - 3) = v47;
                *((_OWORD *)v46 - 2) = v48;
                v46 -= 48;
                v44 -= 48;
              }
              while (v44 != v45);
              uint64_t v44 = *v104;
            }
            *(void *)(a1 + 96) = v46;
            *(void *)(a1 + 104) = v42;
            *(void *)(a1 + 112) = &v42[48 * v43];
            if (v44) {
              operator delete(v44);
            }
          }
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_updateSourceOrder(a1);
          id WeakRetained = objc_loadWeakRetained(location);

          if (WeakRetained)
          {
            *(void *)&v106.var0 = a1;
            unint64_t v50 = 126 - 2 * __clz(v9);
            if (v7 == (double *)v8) {
              uint64_t v51 = 0;
            }
            else {
              uint64_t v51 = v50;
            }
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>((unint64_t)v7, v8, (uint64_t)&v106, v51, 1);
          }
          if (*(unsigned char *)(a1 + 25)) {
            id v101 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
          }
          else {
            id v101 = 0;
          }
          if (v7 == (double *)v8)
          {
LABEL_140:
            *(double *)(a1 + 232) = HKIntervalMask<double>::removeIntervalsBefore(v99, v38) + *(double *)(a1 + 232);
            long long v93 = *(void **)(a1 + 280);
            if (v93 != v6)
            {
              do
              {
                *((double *)v93 + 19) = HKIntervalMask<double>::removeIntervalsBefore((double **)v93 + 16, v38)
                                      + *((double *)v93 + 19);
                uint64_t v94 = (void *)v93[1];
                if (v94)
                {
                  do
                  {
                    int v95 = v94;
                    uint64_t v94 = (void *)*v94;
                  }
                  while (v94);
                }
                else
                {
                  do
                  {
                    int v95 = (void *)v93[2];
                    BOOL v54 = *v95 == (void)v93;
                    long long v93 = v95;
                  }
                  while (!v54);
                }
                long long v93 = v95;
              }
              while (v95 != v6);
            }
            *(double *)(a1 + 56) = v38;

            if (v7) {
              operator delete(v7);
            }
            goto LABEL_152;
          }
          int64_t v103 = 0;
          char v61 = 0;
          uint64_t v62 = v7;
          while (2)
          {
            long long v63 = *((_OWORD *)v62 + 1);
            *(_OWORD *)&v106.var0 = *(_OWORD *)v62;
            *(_OWORD *)&v106.double var2 = v63;
            *(double *)&v106.BOOL var4 = v62[4];
            if (!v106.var4 || v106.var1 > v38)
            {
              id v64 = *(_OWORD **)(a1 + 104);
              unint64_t v65 = *(void *)(a1 + 112);
              if ((unint64_t)v64 >= v65)
              {
                unint64_t v69 = 0xAAAAAAAAAAAAAAABLL * (((char *)v64 - *v104) >> 4);
                unint64_t v70 = v69 + 1;
                if (v69 + 1 > 0x555555555555555) {
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65 - (void)*v104) >> 4);
                if (2 * v71 > v70) {
                  unint64_t v70 = 2 * v71;
                }
                if (v71 >= 0x2AAAAAAAAAAAAAALL) {
                  unint64_t v72 = 0x555555555555555;
                }
                else {
                  unint64_t v72 = v70;
                }
                if (v72) {
                  unint64_t v72 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v72);
                }
                else {
                  uint64_t v73 = 0;
                }
                int64_t v79 = (_OWORD *)(v72 + 48 * v69);
                long long v80 = *(_OWORD *)v62;
                long long v81 = *((_OWORD *)v62 + 2);
                v79[1] = *((_OWORD *)v62 + 1);
                v79[2] = v81;
                *int64_t v79 = v80;
                __int16 v83 = *(char **)(a1 + 96);
                long long v82 = *(char **)(a1 + 104);
                int v84 = v79;
                if (v82 != v83)
                {
                  do
                  {
                    long long v85 = *((_OWORD *)v82 - 3);
                    long long v86 = *((_OWORD *)v82 - 2);
                    *(_OWORD *)((char *)v84 - 21) = *(_OWORD *)(v82 - 21);
                    *(v84 - 3) = v85;
                    *(v84 - 2) = v86;
                    v84 -= 3;
                    v82 -= 48;
                  }
                  while (v82 != v83);
                  long long v82 = *v104;
                }
                uint64_t v68 = v79 + 3;
                *(void *)(a1 + 96) = v84;
                *(void *)(a1 + 104) = v79 + 3;
                *(void *)(a1 + 112) = v72 + 48 * v73;
                if (v82) {
                  operator delete(v82);
                }
              }
              else
              {
                long long v66 = *(_OWORD *)v62;
                long long v67 = *((_OWORD *)v62 + 2);
                v64[1] = *((_OWORD *)v62 + 1);
                v64[2] = v67;
                *id v64 = v66;
                uint64_t v68 = v64 + 3;
              }
              *(void *)(a1 + 104) = v68;
LABEL_139:
              v62 += 6;
              if (v62 == (double *)v8) {
                goto LABEL_140;
              }
              continue;
            }
            break;
          }
          double var2 = v106.var2;
          if (v106.var2 > v38) {
            double var2 = v38;
          }
          v106.double var2 = var2;
          for (uint64_t i = *(double **)(a1 + 64); i != *(double **)(a1 + 72) && v106.var1 >= *i; i += 2)
          {
            if (v106.var1 < i[1]) {
              goto LABEL_139;
            }
          }
          int v76 = *((unsigned __int8 *)v62 + 42);
          int v77 = *((unsigned __int8 *)v62 + 41);
          if (v61)
          {
            unint64_t var3 = v106.var3;
            if (v103 == v106.var3 || *(unsigned char *)(a1 + 24)) {
              HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::addSample(v102, &v106, v76 == 0);
            }
          }
          else
          {
            HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::addSample(v102, &v106, v76 == 0);
            unint64_t var3 = v106.var3;
            int64_t v103 = v106.var3;
          }
          if (!*(unsigned char *)(a1 + 25)) {
            goto LABEL_138;
          }
          int v87 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a1, var3);
          if (!v87) {
            goto LABEL_137;
          }
          long long v88 = [v101 objectForKeyedSubscript:v87];
          long long v89 = v88;
          if (v88)
          {
            if ([v88 longLongValue] != var3 && !*(unsigned char *)(a1 + 24))
            {
LABEL_136:

LABEL_137:
LABEL_138:
              char v61 = 1;
              goto LABEL_139;
            }
          }
          else
          {
            id v90 = [NSNumber numberWithLongLong:var3];
            [v101 setObject:v90 forKeyedSubscript:v87];
          }
          unint64_t v91 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(a1, var3);
          uint64_t v92 = (uint64_t *)HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_statisticsForSource(a1, v91);
          HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::addSample(v92, &v106, v77 == 0);
          goto LABEL_136;
        }
        int v10 = *((unsigned __int8 *)v7 + 42);
        int v11 = *((unsigned __int8 *)v7 + 41);
        int v12 = *((unsigned __int8 *)v7 + 40);
        double v13 = v7[1];
        double v14 = v7[2];
        unint64_t v15 = *((void *)v7 + 3);
        char v16 = *((unsigned char *)v7 + 33);
        if (v14 <= a2) {
          double v17 = v7[2];
        }
        else {
          double v17 = a2;
        }
        if (v13 < a2) {
          int v18 = *((unsigned __int8 *)v7 + 32);
        }
        else {
          int v18 = 0;
        }
        if (v13 < a2) {
          char v19 = 0;
        }
        else {
          char v19 = *((unsigned char *)v7 + 33);
        }
        if (v13 < a2)
        {
          uint64_t v20 = 0;
        }
        else
        {
          double v17 = v7[2];
          uint64_t v20 = *((void *)v7 + 3);
        }
        if (v13 < a2) {
          double v21 = 0.0;
        }
        else {
          double v21 = v7[2];
        }
        if (v13 < a2) {
          double v22 = 0.0;
        }
        else {
          double v22 = *v7;
        }
        if (v13 < a2) {
          double v23 = 0.0;
        }
        else {
          double v23 = v7[1];
        }
        if (v13 < a2) {
          int v24 = 0;
        }
        else {
          int v24 = *((unsigned __int8 *)v7 + 32);
        }
        if (*((unsigned char *)v7 + 32))
        {
          double v14 = v17;
        }
        else
        {
          int v18 = 0;
          char v19 = 0;
          uint64_t v20 = 0;
        }
        if (*((unsigned char *)v7 + 32)) {
          double v25 = v21;
        }
        else {
          double v25 = 0.0;
        }
        if (*((unsigned char *)v7 + 32)) {
          double v26 = v22;
        }
        else {
          double v26 = 0.0;
        }
        if (*((unsigned char *)v7 + 32)) {
          double v27 = v23;
        }
        else {
          double v27 = 0.0;
        }
        if (*((unsigned char *)v7 + 32)) {
          int v28 = v24;
        }
        else {
          int v28 = 0;
        }
        v106.var0 = *v7;
        v106.double var1 = v13;
        v106.double var2 = v14;
        v106.unint64_t var3 = v15;
        v106.BOOL var4 = v18;
        v106.BOOL var5 = v16;
        *(_DWORD *)(&v106.var5 + 1) = *(_DWORD *)((char *)v7 + 34);
        *(_WORD *)(&v106.var5 + 5) = *((_WORD *)v7 + 19);
        *(double *)&long long v107 = v26;
        *((double *)&v107 + 1) = v27;
        *(double *)&long long v108 = v25;
        *((void *)&v108 + 1) = v20;
        LOBYTE(v109) = v28;
        HIBYTE(v109) = v19;
        for (uint64_t j = *(double **)(a1 + 64); j != *(double **)(a1 + 72) && v13 >= *j; j += 2)
        {
          if (v13 < j[1])
          {
            BOOL v52 = v12 != 0;
            BOOL v53 = v11 != 0;
            BOOL v55 = v10 != 0;
            if (!v28) {
              goto LABEL_150;
            }
LABEL_93:
            LOWORD(v105) = v109;
            long long v59 = v108;
            id v60 = *v104;
            *(_OWORD *)id v60 = v107;
            *((_OWORD *)v60 + 1) = v59;
            *((void *)v60 + 4) = v105;
            v60[40] = v52;
            v60[41] = v53;
            v60[42] = v55;
            goto LABEL_151;
          }
        }
        BOOL v52 = v12 != 0;
        BOOL v53 = v11 != 0;
        BOOL v54 = v10 == 0;
        BOOL v55 = v10 != 0;
        if (v18)
        {
          int v56 = v54;
          HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::addSample(v102, &v106, v56);
          if (*(unsigned char *)(a1 + 25))
          {
            unint64_t v57 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(a1, v15);
            double v58 = (uint64_t *)HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_statisticsForSource(a1, v57);
            HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::addSample(v58, &v106, v11 == 0);
          }
          BOOL v52 = 1;
          BOOL v53 = 1;
          BOOL v55 = 1;
        }
        if (v28) {
          goto LABEL_93;
        }
LABEL_150:
        *(void *)(a1 + 104) = *(void *)(a1 + 96);
      }
LABEL_151:
      *(double *)(a1 + 56) = a2;
LABEL_152:
      double v96 = *(double *)(a1 + 56);
      if (v96 == v5)
      {
        long long v97 = [MEMORY[0x1E4F28B00] currentHandler];
        int v98 = objc_msgSend(NSString, "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles, HDStatisticsTimeInterval>>>::_mergeThroughTime(double) [Statistics = HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles, HDStatisticsTimeInterval>>]");
        [v97 handleFailureInFunction:v98 file:@"HDStatisticsBucket.hpp" lineNumber:234 description:@"Failed to make forward progress during statistics merge."];

        double v96 = *(double *)(a1 + 56);
      }
      double v5 = v96;
    }
    while (v96 < a2);
  }
}

void sub_1BD131924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::addSample(uint64_t *result, HDRawQuantitySample *a2, int a3)
{
  double v5 = result;
  int v6 = 2 * (a2->var0 != -1.79769313e308);
  if (a2->var0 == 1.79769313e308) {
    int v6 = 1;
  }
  if (!v6)
  {
    if (*(_DWORD *)result) {
      return result;
    }
    uint64_t v10 = result[1];
    uint64_t v11 = result[2];
    ++result;
    if (v11 != v10) {
      return result;
    }
    HDStatisticsPercentiles::addSample((HDStatisticsPercentiles *)result, a2);
    uint64_t v7 = v5 + 10;
    goto LABEL_24;
  }
  if (v6 == 1)
  {
    if (*(_DWORD *)result) {
      return result;
    }
    int v12 = 1;
LABEL_15:
    *(_DWORD *)BOOL result = v12;
    double v14 = result + 1;
    double v13 = (void *)result[1];
    if (v13)
    {
      v5[2] = (uint64_t)v13;
      operator delete(v13);
    }
    char v16 = v5 + 11;
    unint64_t v15 = (void *)v5[11];
    v5[10] = 0;
    *double v14 = 0u;
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 5) = 0u;
    *(_OWORD *)(v5 + 7) = 0u;
    *((_WORD *)v5 + 36) = 0;
    if (v15)
    {
      v5[12] = (uint64_t)v15;
      operator delete(v15);
      int v17 = *((unsigned __int8 *)v5 + 72);
      _OWORD *v16 = 0u;
      *(_OWORD *)(v5 + 13) = 0u;
      if (v17 && *((double *)v5 + 6) > *((double *)v5 + 16)) {
        goto LABEL_23;
      }
    }
    else
    {
      _OWORD *v16 = 0uLL;
      *(_OWORD *)(v5 + 13) = 0uLL;
    }
    *(_OWORD *)(v5 + 5) = *(_OWORD *)(v5 + 15);
    *(_OWORD *)(v5 + 7) = *(_OWORD *)(v5 + 17);
    *((_WORD *)v5 + 36) = *((_WORD *)v5 + 76);
LABEL_23:
    HDStatisticsPercentiles::addSample((HDStatisticsPercentiles *)(v5 + 1), a2);
    uint64_t v7 = v5 + 10;
LABEL_24:
    unint64_t v8 = a2;
    int v9 = a3;
    goto LABEL_25;
  }
  if (v6 != 2) {
    return result;
  }
  if (*(_DWORD *)result != 2)
  {
    int v12 = 2;
    goto LABEL_15;
  }
  HDStatisticsPercentiles::addSample((HDStatisticsPercentiles *)(result + 1), a2);
  uint64_t v7 = v5 + 10;
  unint64_t v8 = a2;
  int v9 = 1;
LABEL_25:

  return HDStatisticsTimeInterval::addSample(v7, v8, v9);
}

uint64_t **HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = a2;
  double v3 = *(void **)(a1 + 288);
  if (!v3) {
    goto LABEL_11;
  }
  double v4 = (uint64_t **)(a1 + 288);
  do
  {
    uint64_t v5 = v3[4];
    BOOL v6 = v5 < a2;
    if (v5 >= a2) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = v3 + 1;
    }
    if (!v6) {
      double v4 = (uint64_t **)v3;
    }
    double v3 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t **)(a1 + 288) || (uint64_t)v4[4] > a2)
  {
LABEL_11:
    unint64_t v8 = (uint64_t **)(a1 + 280);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 280), a2, &v10);
    double v4 = std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v8, a2, &v10);
  }
  return v4 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    uint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((void *)(a1 + 368), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a1, a2);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      id v10 = v6;
      uint64_t v7 = (void *)(a1 + 408);
      unint64_t v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        uint64_t v11 = &v10;
        *((void *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        id v6 = v10;
      }
    }
  }
  return a2;
}

void sub_1BD131C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  double v4 = (id *)(a1 + 88);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    id v6 = (void *)(a1 + 448);
    uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
    if (v7)
    {
      id v8 = (id)v7[3];
    }
    else
    {
      id v9 = objc_loadWeakRetained(v4);
      id v8 = [v9 bundleIdentifierForSourceID:a2];

      if (v8)
      {
        id v10 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
        objc_storeStrong(v10 + 3, v8);
      }
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1BD131D80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, void *a3)
{
  id v6 = a1 + 1;
  uint64_t v5 = a1[1];
  uint64_t v7 = a1 + 1;
  id v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        id v8 = (uint64_t **)v5;
        uint64_t v9 = v5[4];
        if (v9 <= a2) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v7 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a2) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    id v10 = (char *)operator new(0xC8uLL);
    v12[1] = v6;
    *((void *)v10 + 4) = *a3;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    *(_OWORD *)(v10 + 120) = 0u;
    *(_OWORD *)(v10 + 136) = 0u;
    *(_OWORD *)(v10 + 152) = 0u;
    *(_OWORD *)(v10 + 168) = 0u;
    *(_OWORD *)(v10 + 184) = 0u;
    char v13 = 1;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v8, v7, (uint64_t *)v10);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
    return (uint64_t **)v10;
  }
  return v8;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v12 = a2 - 3;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 4);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v103 = *((void *)a2 - 3);
                uint64_t v104 = *(void *)(v13 + 24);
                if (v103 == v104) {
                  return;
                }
                uint64_t v105 = *(char **)(*(void *)a3 + 344);
                HDRawQuantitySample v106 = *(char **)(*(void *)a3 + 352);
                long long v107 = v105;
                long long v108 = v105;
                if (v105 == v106) {
                  goto LABEL_171;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)v13, (long long *)(v13 + 48), a2 - 3, a3);
                return;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, (uint64_t)(a2 - 3), a3);
                return;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, v13 + 144, (uint64_t)(a2 - 3), a3);
                return;
              default:
                JUMPOUT(0);
            }
            do
            {
              if (*(void *)v108 == v103) {
                goto LABEL_168;
              }
              v108 += 8;
            }
            while (v108 != v106);
            long long v108 = *(char **)(*(void *)a3 + 352);
LABEL_168:
            while (*(void *)v107 != v104)
            {
              v107 += 8;
              if (v107 == v106)
              {
                long long v107 = *(char **)(*(void *)a3 + 352);
                break;
              }
            }
LABEL_171:
            if (v108 - v105 < v107 - v105)
            {
              *(_OWORD *)v226 = *(_OWORD *)(v13 + 16);
              *(_OWORD *)&v226[16] = *(_OWORD *)(v13 + 32);
              long long v218 = *(_OWORD *)v13;
              long long v109 = *v12;
              long long v110 = *(a2 - 2);
              *(_OWORD *)(v13 + 27) = *(long long *)((char *)a2 - 21);
              *(_OWORD *)unint64_t v13 = v109;
              *(_OWORD *)(v13 + 16) = v110;
              *(long long *)((char *)a2 - 21) = *(_OWORD *)&v226[11];
              long long *v12 = v218;
              *(a2 - 2) = *(_OWORD *)v226;
            }
            return;
          }
          if (v14 <= 1151)
          {
            int v111 = (long long *)(v13 + 48);
            BOOL v113 = (long long *)v13 == a2 || v111 == a2;
            if (a5)
            {
              if (!v113)
              {
                unint64_t v114 = v13;
                do
                {
                  unint64_t v115 = v114;
                  unint64_t v114 = (unint64_t)v111;
                  uint64_t v116 = *(void *)(v115 + 72);
                  uint64_t v117 = *(void *)(v115 + 24);
                  if (v116 != v117)
                  {
                    long long v118 = *(char **)(*(void *)a3 + 344);
                    uint64_t v119 = *(char **)(*(void *)a3 + 352);
                    uint64_t v120 = v118;
                    long long v121 = v118;
                    if (v118 != v119)
                    {
                      do
                      {
                        if (*(void *)v121 == v116) {
                          goto LABEL_196;
                        }
                        v121 += 8;
                      }
                      while (v121 != v119);
                      long long v121 = *(char **)(*(void *)a3 + 352);
LABEL_196:
                      while (*(void *)v120 != v117)
                      {
                        v120 += 8;
                        if (v120 == v119)
                        {
                          uint64_t v120 = *(char **)(*(void *)a3 + 352);
                          break;
                        }
                      }
                    }
                    if (v121 - v118 < v120 - v118)
                    {
                      uint64_t v227 = *(void *)(v114 + 16);
                      long long v219 = *(_OWORD *)v114;
                      long long v236 = *(_OWORD *)(v115 + 80);
                      unint64_t v122 = v114;
                      while (1)
                      {
                        long long v123 = *(_OWORD *)(v115 + 16);
                        *(_OWORD *)unint64_t v122 = *(_OWORD *)v115;
                        *(_OWORD *)(v122 + 16) = v123;
                        *(_OWORD *)(v122 + 27) = *(_OWORD *)(v115 + 27);
                        if (v115 == v13) {
                          break;
                        }
                        unint64_t v122 = v115;
                        uint64_t v124 = *(void *)(v115 - 24);
                        if (v116 != v124)
                        {
                          char v125 = *(char **)(*(void *)a3 + 344);
                          uint64_t v126 = *(char **)(*(void *)a3 + 352);
                          uint64_t v127 = v125;
                          uint64_t v128 = v125;
                          if (v125 != v126)
                          {
                            do
                            {
                              if (*(void *)v128 == v116) {
                                goto LABEL_208;
                              }
                              v128 += 8;
                            }
                            while (v128 != v126);
                            uint64_t v128 = *(char **)(*(void *)a3 + 352);
LABEL_208:
                            while (*(void *)v127 != v124)
                            {
                              v127 += 8;
                              if (v127 == v126)
                              {
                                uint64_t v127 = *(char **)(*(void *)a3 + 352);
                                break;
                              }
                            }
                          }
                          unint64_t v115 = v122 - 48;
                          if (v128 - v125 < v127 - v125) {
                            continue;
                          }
                        }
                        goto LABEL_212;
                      }
                      unint64_t v122 = v13;
LABEL_212:
                      *(_OWORD *)unint64_t v122 = v219;
                      *(void *)(v122 + 16) = v227;
                      *(void *)(v122 + 24) = v116;
                      *(void *)(v122 + 32) = v236;
                      *(_DWORD *)(v122 + 39) = *(_DWORD *)((char *)&v236 + 7);
                    }
                  }
                  int v111 = (long long *)(v114 + 48);
                }
                while ((long long *)(v114 + 48) != a2);
              }
            }
            else if (!v113)
            {
              do
              {
                unint64_t v201 = a1;
                a1 = (unint64_t)v111;
                uint64_t v202 = *(void *)(v201 + 72);
                uint64_t v203 = *(void *)(v201 + 24);
                if (v202 != v203)
                {
                  v204 = *(char **)(*(void *)a3 + 344);
                  v205 = *(char **)(*(void *)a3 + 352);
                  v206 = v204;
                  v207 = v204;
                  if (v204 != v205)
                  {
                    do
                    {
                      if (*(void *)v207 == v202) {
                        goto LABEL_312;
                      }
                      v207 += 8;
                    }
                    while (v207 != v205);
                    v207 = *(char **)(*(void *)a3 + 352);
LABEL_312:
                    while (*(void *)v206 != v203)
                    {
                      v206 += 8;
                      if (v206 == v205)
                      {
                        v206 = *(char **)(*(void *)a3 + 352);
                        break;
                      }
                    }
                  }
                  if (v207 - v204 < v206 - v204)
                  {
                    uint64_t v230 = *(void *)(a1 + 16);
                    long long v222 = *(_OWORD *)a1;
                    long long v239 = *(_OWORD *)(v201 + 80);
                    unint64_t v208 = a1;
                    do
                    {
                      v209 = (_OWORD *)v208;
                      unint64_t v208 = v201;
                      long long v210 = *(_OWORD *)(v201 + 16);
                      _OWORD *v209 = *(_OWORD *)v201;
                      v209[1] = v210;
                      *(_OWORD *)((char *)v209 + 27) = *(_OWORD *)(v201 + 27);
                      uint64_t v211 = *(void *)(v201 - 24);
                      if (v202 == v211) {
                        break;
                      }
                      v212 = *(char **)(*(void *)a3 + 344);
                      v213 = *(char **)(*(void *)a3 + 352);
                      v214 = v212;
                      v215 = v212;
                      if (v212 != v213)
                      {
                        do
                        {
                          if (*(void *)v215 == v202) {
                            goto LABEL_322;
                          }
                          v215 += 8;
                        }
                        while (v215 != v213);
                        v215 = *(char **)(*(void *)a3 + 352);
LABEL_322:
                        while (*(void *)v214 != v211)
                        {
                          v214 += 8;
                          if (v214 == v213)
                          {
                            v214 = *(char **)(*(void *)a3 + 352);
                            break;
                          }
                        }
                      }
                      unint64_t v201 = v208 - 48;
                    }
                    while (v215 - v212 < v214 - v212);
                    *(_OWORD *)unint64_t v208 = v222;
                    *(void *)(v208 + 16) = v230;
                    *(void *)(v208 + 24) = v202;
                    *(void *)(v208 + 32) = v239;
                    *(_DWORD *)(v208 + 39) = *(_DWORD *)((char *)&v239 + 7);
                  }
                }
                int v111 = (long long *)(a1 + 48);
              }
              while ((long long *)(a1 + 48) != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((long long *)v13 != a2)
            {
              int64_t v129 = (v15 - 2) >> 1;
              int64_t v130 = v129;
              do
              {
                int64_t v131 = v130;
                if (v129 >= v130)
                {
                  uint64_t v132 = (2 * v130) | 1;
                  unint64_t v133 = v13 + 48 * v132;
                  if (2 * v131 + 2 < (uint64_t)v15)
                  {
                    uint64_t v134 = *(void *)(v133 + 24);
                    uint64_t v135 = *(void *)(v133 + 72);
                    if (v134 != v135)
                    {
                      v137 = *(char **)(*(void *)a3 + 344);
                      v136 = *(char **)(*(void *)a3 + 352);
                      v138 = v137;
                      v139 = v137;
                      if (v137 != v136)
                      {
                        do
                        {
                          if (*(void *)v139 == v134) {
                            goto LABEL_224;
                          }
                          v139 += 8;
                        }
                        while (v139 != v136);
                        v139 = *(char **)(*(void *)a3 + 352);
LABEL_224:
                        while (*(void *)v138 != v135)
                        {
                          v138 += 8;
                          if (v138 == v136)
                          {
                            v138 = *(char **)(*(void *)a3 + 352);
                            break;
                          }
                        }
                      }
                      v133 += 48 * (v139 - v137 < v138 - v137);
                      if (v139 - v137 < v138 - v137) {
                        uint64_t v132 = 2 * v131 + 2;
                      }
                    }
                  }
                  unint64_t v140 = v13 + 48 * v131;
                  uint64_t v141 = *(void *)(v133 + 24);
                  uint64_t v142 = *(void *)(v140 + 24);
                  if (v141 == v142) {
                    goto LABEL_238;
                  }
                  v144 = *(char **)(*(void *)a3 + 344);
                  v143 = *(char **)(*(void *)a3 + 352);
                  v145 = v144;
                  v146 = v144;
                  if (v144 != v143)
                  {
                    do
                    {
                      if (*(void *)v146 == v141) {
                        goto LABEL_234;
                      }
                      v146 += 8;
                    }
                    while (v146 != v143);
                    v146 = *(char **)(*(void *)a3 + 352);
LABEL_234:
                    while (*(void *)v145 != v142)
                    {
                      v145 += 8;
                      if (v145 == v143)
                      {
                        v145 = *(char **)(*(void *)a3 + 352);
                        break;
                      }
                    }
                  }
                  if (v146 - v144 >= v145 - v144)
                  {
LABEL_238:
                    uint64_t v228 = *(void *)(v140 + 16);
                    long long v220 = *(_OWORD *)v140;
                    long long v237 = *(_OWORD *)(v140 + 32);
                    long long v147 = *(_OWORD *)v133;
                    long long v148 = *(_OWORD *)(v133 + 16);
                    *(_OWORD *)(v140 + 27) = *(_OWORD *)(v133 + 27);
                    *(_OWORD *)unint64_t v140 = v147;
                    *(_OWORD *)(v140 + 16) = v148;
                    if (v129 >= v132)
                    {
                      while (1)
                      {
                        uint64_t v150 = 2 * v132;
                        uint64_t v132 = (2 * v132) | 1;
                        unint64_t v149 = v13 + 48 * v132;
                        uint64_t v151 = v150 + 2;
                        if (v151 < (uint64_t)v15)
                        {
                          uint64_t v152 = *(void *)(v149 + 24);
                          uint64_t v153 = *(void *)(v149 + 72);
                          if (v152 != v153)
                          {
                            v154 = *(char **)(*(void *)a3 + 344);
                            v155 = *(char **)(*(void *)a3 + 352);
                            v156 = v154;
                            v157 = v154;
                            if (v154 != v155)
                            {
                              do
                              {
                                if (*(void *)v157 == v152) {
                                  goto LABEL_246;
                                }
                                v157 += 8;
                              }
                              while (v157 != v155);
                              v157 = *(char **)(*(void *)a3 + 352);
LABEL_246:
                              while (*(void *)v156 != v153)
                              {
                                v156 += 8;
                                if (v156 == v155)
                                {
                                  v156 = *(char **)(*(void *)a3 + 352);
                                  break;
                                }
                              }
                            }
                            v149 += 48 * (v157 - v154 < v156 - v154);
                            if (v157 - v154 < v156 - v154) {
                              uint64_t v132 = v151;
                            }
                          }
                        }
                        uint64_t v158 = *(void *)(v149 + 24);
                        if (v158 != v142)
                        {
                          v160 = *(char **)(*(void *)a3 + 344);
                          v159 = *(char **)(*(void *)a3 + 352);
                          v161 = v160;
                          v162 = v160;
                          if (v160 != v159)
                          {
                            do
                            {
                              if (*(void *)v162 == v158) {
                                goto LABEL_256;
                              }
                              v162 += 8;
                            }
                            while (v162 != v159);
                            v162 = *(char **)(*(void *)a3 + 352);
LABEL_256:
                            while (*(void *)v161 != v142)
                            {
                              v161 += 8;
                              if (v161 == v159)
                              {
                                v161 = *(char **)(*(void *)a3 + 352);
                                break;
                              }
                            }
                          }
                          if (v162 - v160 < v161 - v160) {
                            break;
                          }
                        }
                        long long v163 = *(_OWORD *)v149;
                        long long v164 = *(_OWORD *)(v149 + 16);
                        *(_OWORD *)(v133 + 27) = *(_OWORD *)(v149 + 27);
                        *(_OWORD *)unint64_t v133 = v163;
                        *(_OWORD *)(v133 + 16) = v164;
                        unint64_t v133 = v149;
                        if (v129 < v132) {
                          goto LABEL_261;
                        }
                      }
                    }
                    unint64_t v149 = v133;
LABEL_261:
                    *(_OWORD *)unint64_t v149 = v220;
                    *(void *)(v149 + 16) = v228;
                    *(void *)(v149 + 24) = v142;
                    *(void *)(v149 + 32) = v237;
                    *(_DWORD *)(v149 + 39) = *(_DWORD *)((char *)&v237 + 7);
                  }
                }
                int64_t v130 = v131 - 1;
              }
              while (v131);
              int64_t v165 = v14 / 0x30uLL;
              do
              {
                uint64_t v166 = 0;
                *(_OWORD *)v229 = *(_OWORD *)(v13 + 16);
                *(_OWORD *)&v229[16] = *(_OWORD *)(v13 + 32);
                long long v221 = *(_OWORD *)v13;
                uint64_t v167 = v165 - 2;
                if (v165 < 2) {
                  uint64_t v167 = v165 - 1;
                }
                uint64_t v168 = v167 >> 1;
                unint64_t v169 = v13;
                do
                {
                  v170 = (_OWORD *)v169;
                  v169 += 48 * v166 + 48;
                  uint64_t v171 = 2 * v166;
                  uint64_t v166 = (2 * v166) | 1;
                  uint64_t v172 = v171 + 2;
                  if (v171 + 2 < v165)
                  {
                    uint64_t v173 = *(void *)(v169 + 24);
                    uint64_t v174 = *(void *)(v169 + 72);
                    if (v173 != v174)
                    {
                      v176 = *(char **)(*(void *)a3 + 344);
                      v175 = *(char **)(*(void *)a3 + 352);
                      v177 = v176;
                      v178 = v176;
                      if (v176 != v175)
                      {
                        do
                        {
                          if (*(void *)v178 == v173) {
                            goto LABEL_273;
                          }
                          v178 += 8;
                        }
                        while (v178 != v175);
                        v178 = *(char **)(*(void *)a3 + 352);
LABEL_273:
                        while (*(void *)v177 != v174)
                        {
                          v177 += 8;
                          if (v177 == v175)
                          {
                            v177 = *(char **)(*(void *)a3 + 352);
                            break;
                          }
                        }
                      }
                      v169 += 48 * (v178 - v176 < v177 - v176);
                      if (v178 - v176 < v177 - v176) {
                        uint64_t v166 = v172;
                      }
                    }
                  }
                  long long v179 = *(_OWORD *)v169;
                  long long v180 = *(_OWORD *)(v169 + 16);
                  *(_OWORD *)((char *)v170 + 27) = *(_OWORD *)(v169 + 27);
                  _OWORD *v170 = v179;
                  v170[1] = v180;
                }
                while (v166 <= v168);
                a2 -= 3;
                if ((long long *)v169 == a2)
                {
                  *(_OWORD *)(v169 + 27) = *(_OWORD *)&v229[11];
                  *(_OWORD *)unint64_t v169 = v221;
                  *(_OWORD *)(v169 + 16) = *(_OWORD *)v229;
                }
                else
                {
                  long long v181 = *a2;
                  long long v182 = a2[1];
                  *(_OWORD *)(v169 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v169 = v181;
                  *(_OWORD *)(v169 + 16) = v182;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v229[11];
                  *a2 = v221;
                  a2[1] = *(_OWORD *)v229;
                  uint64_t v183 = v169 - v13 + 48;
                  if (v183 >= 49)
                  {
                    unint64_t v184 = (v183 / 0x30uLL - 2) >> 1;
                    unint64_t v185 = v13 + 48 * v184;
                    uint64_t v186 = *(void *)(v185 + 24);
                    uint64_t v187 = *(void *)(v169 + 24);
                    if (v186 != v187)
                    {
                      v189 = *(char **)(*(void *)a3 + 344);
                      v188 = *(char **)(*(void *)a3 + 352);
                      v190 = v189;
                      v191 = v189;
                      if (v189 != v188)
                      {
                        do
                        {
                          if (*(void *)v191 == v186) {
                            goto LABEL_286;
                          }
                          v191 += 8;
                        }
                        while (v191 != v188);
                        v191 = *(char **)(*(void *)a3 + 352);
LABEL_286:
                        while (*(void *)v190 != v187)
                        {
                          v190 += 8;
                          if (v190 == v188)
                          {
                            v190 = *(char **)(*(void *)a3 + 352);
                            break;
                          }
                        }
                      }
                      if (v191 - v189 < v190 - v189)
                      {
                        uint64_t v242 = *(void *)(v169 + 16);
                        long long v238 = *(_OWORD *)v169;
                        long long v233 = *(_OWORD *)(v169 + 32);
                        do
                        {
                          v192 = (_OWORD *)v169;
                          unint64_t v169 = v185;
                          long long v193 = *(_OWORD *)v185;
                          long long v194 = *(_OWORD *)(v185 + 16);
                          *(_OWORD *)((char *)v192 + 27) = *(_OWORD *)(v185 + 27);
                          _OWORD *v192 = v193;
                          v192[1] = v194;
                          if (!v184) {
                            break;
                          }
                          unint64_t v184 = (v184 - 1) >> 1;
                          unint64_t v185 = v13 + 48 * v184;
                          uint64_t v195 = *(void *)(v185 + 24);
                          if (v195 == v187) {
                            break;
                          }
                          v197 = *(char **)(*(void *)a3 + 344);
                          v196 = *(char **)(*(void *)a3 + 352);
                          v198 = v197;
                          v199 = v197;
                          if (v197 != v196)
                          {
                            do
                            {
                              if (*(void *)v199 == v195) {
                                goto LABEL_297;
                              }
                              v199 += 8;
                            }
                            while (v199 != v196);
                            v199 = *(char **)(*(void *)a3 + 352);
LABEL_297:
                            while (*(void *)v198 != v187)
                            {
                              v198 += 8;
                              if (v198 == v196)
                              {
                                v198 = *(char **)(*(void *)a3 + 352);
                                break;
                              }
                            }
                          }
                        }
                        while (v199 - v197 < v198 - v197);
                        *(_OWORD *)unint64_t v169 = v238;
                        *(void *)(v169 + 16) = v242;
                        *(void *)(v169 + 24) = v187;
                        *(void *)(v169 + 32) = v233;
                        *(_DWORD *)(v169 + 39) = *(_DWORD *)((char *)&v233 + 7);
                      }
                    }
                  }
                }
              }
              while (v165-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          int v17 = (long long *)(v13 + 48 * (v15 >> 1));
          if ((unint64_t)v14 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v15 >> 1)), a2 - 3, a3);
            uint64_t v18 = 3 * v16;
            char v19 = (long long *)(a1 + 48 * v16 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48), v19, a2 - 6, a3);
            uint64_t v20 = (long long *)(a1 + 48 + 16 * v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 96), v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v19, v17, v20, a3);
            *(_OWORD *)v223 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v223[16] = *(_OWORD *)(a1 + 32);
            long long v216 = *(_OWORD *)a1;
            long long v21 = *(long long *)((char *)v17 + 27);
            long long v22 = v17[1];
            *(_OWORD *)a1 = *v17;
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(a1 + 27) = v21;
            *(long long *)((char *)v17 + 27) = *(_OWORD *)&v223[11];
            *int v17 = v216;
            v17[1] = *(_OWORD *)v223;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48 * (v15 >> 1)), (long long *)a1, a2 - 3, a3);
          }
          --a4;
          if (a5)
          {
            uint64_t v23 = *(void *)(a1 + 24);
            uint64_t v24 = *(void *)a3;
            break;
          }
          uint64_t v25 = *(void *)(a1 - 24);
          uint64_t v23 = *(void *)(a1 + 24);
          if (v25 != v23)
          {
            uint64_t v24 = *(void *)a3;
            double v26 = *(char **)(*(void *)a3 + 344);
            double v27 = *(char **)(*(void *)a3 + 352);
            int v28 = v26;
            double v29 = v26;
            if (v26 != v27)
            {
              do
              {
                if (*(void *)v29 == v25) {
                  goto LABEL_16;
                }
                v29 += 8;
              }
              while (v29 != v27);
              double v29 = *(char **)(*(void *)a3 + 352);
LABEL_16:
              while (*(void *)v28 != v23)
              {
                v28 += 8;
                if (v28 == v27)
                {
                  int v28 = *(char **)(*(void *)a3 + 352);
                  break;
                }
              }
            }
            if (v29 - v26 < v28 - v26) {
              break;
            }
          }
          uint64_t v241 = *(void *)(a1 + 16);
          long long v232 = *(_OWORD *)(a1 + 32);
          long long v235 = *(_OWORD *)a1;
          uint64_t v67 = *((void *)a2 - 3);
          if (v23 == v67) {
            goto LABEL_107;
          }
          uint64_t v68 = *(char **)(*(void *)a3 + 344);
          unint64_t v69 = *(char **)(*(void *)a3 + 352);
          if (v68 == v69)
          {
            unint64_t v71 = *(char **)(*(void *)a3 + 344);
            unint64_t v70 = v71;
          }
          else
          {
            unint64_t v70 = *(char **)(*(void *)a3 + 344);
            while (*(void *)v70 != v23)
            {
              v70 += 8;
              if (v70 == v69)
              {
                unint64_t v70 = *(char **)(*(void *)a3 + 352);
                break;
              }
            }
            unint64_t v71 = *(char **)(*(void *)a3 + 344);
            while (*(void *)v71 != v67)
            {
              v71 += 8;
              if (v71 == v69)
              {
                unint64_t v71 = *(char **)(*(void *)a3 + 352);
                break;
              }
            }
          }
          if (v70 - v68 >= v71 - v68)
          {
LABEL_107:
            unint64_t v13 = a1 + 48;
            if (a1 + 48 < (unint64_t)a2)
            {
              uint64_t v75 = *(void *)a3;
              unint64_t v76 = a1;
              do
              {
                uint64_t v77 = *(void *)(v76 + 72);
                unint64_t v76 = v13;
                if (v23 != v77)
                {
                  int v78 = *(char **)(v75 + 344);
                  int64_t v79 = *(char **)(v75 + 352);
                  long long v80 = v78;
                  long long v81 = v78;
                  if (v78 != v79)
                  {
                    do
                    {
                      if (*(void *)v81 == v23) {
                        goto LABEL_114;
                      }
                      v81 += 8;
                    }
                    while (v81 != v79);
                    long long v81 = *(char **)(v75 + 352);
LABEL_114:
                    while (*(void *)v80 != v77)
                    {
                      v80 += 8;
                      if (v80 == v79)
                      {
                        long long v80 = *(char **)(v75 + 352);
                        break;
                      }
                    }
                  }
                  if (v81 - v78 < v80 - v78) {
                    break;
                  }
                }
                v13 += 48;
              }
              while (v76 + 48 < (unint64_t)a2);
            }
          }
          else
          {
            unint64_t v13 = a1;
            do
            {
              do
              {
                uint64_t v72 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v72);
              if (v68 == v69)
              {
                double v74 = *(char **)(*(void *)a3 + 344);
                uint64_t v73 = v74;
              }
              else
              {
                uint64_t v73 = *(char **)(*(void *)a3 + 344);
                while (*(void *)v73 != v23)
                {
                  v73 += 8;
                  if (v73 == v69)
                  {
                    uint64_t v73 = *(char **)(*(void *)a3 + 352);
                    break;
                  }
                }
                double v74 = *(char **)(*(void *)a3 + 344);
                while (*(void *)v74 != v72)
                {
                  v74 += 8;
                  if (v74 == v69)
                  {
                    double v74 = *(char **)(*(void *)a3 + 352);
                    break;
                  }
                }
              }
            }
            while (v73 - v68 >= v74 - v68);
          }
          long long v82 = a2;
          if (v13 < (unint64_t)a2)
          {
            uint64_t v83 = *(void *)a3;
            long long v82 = a2;
            do
            {
              uint64_t v84 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v84) {
                break;
              }
              long long v85 = *(char **)(v83 + 344);
              long long v86 = *(char **)(v83 + 352);
              int v87 = v85;
              long long v88 = v85;
              if (v85 != v86)
              {
                do
                {
                  if (*(void *)v88 == v23) {
                    goto LABEL_126;
                  }
                  v88 += 8;
                }
                while (v88 != v86);
                long long v88 = *(char **)(v83 + 352);
LABEL_126:
                while (*(void *)v87 != v84)
                {
                  v87 += 8;
                  if (v87 == v86)
                  {
                    int v87 = *(char **)(v83 + 352);
                    break;
                  }
                }
              }
            }
            while (v88 - v85 < v87 - v85);
          }
          while (v13 < (unint64_t)v82)
          {
            *(_OWORD *)v225 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v225[16] = *(_OWORD *)(v13 + 32);
            long long v217 = *(_OWORD *)v13;
            long long v89 = *v82;
            long long v90 = v82[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v82 + 27);
            *(_OWORD *)unint64_t v13 = v89;
            *(_OWORD *)(v13 + 16) = v90;
            *(long long *)((char *)v82 + 27) = *(_OWORD *)&v225[11];
            *long long v82 = v217;
            v82[1] = *(_OWORD *)v225;
            uint64_t v91 = *(void *)a3;
            do
            {
              do
              {
                uint64_t v92 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v92);
              long long v93 = *(char **)(v91 + 344);
              uint64_t v94 = *(char **)(v91 + 352);
              if (v93 == v94)
              {
                double v96 = *(char **)(v91 + 344);
                int v95 = v96;
              }
              else
              {
                int v95 = *(char **)(v91 + 344);
                while (*(void *)v95 != v23)
                {
                  v95 += 8;
                  if (v95 == v94)
                  {
                    int v95 = *(char **)(v91 + 352);
                    break;
                  }
                }
                double v96 = *(char **)(v91 + 344);
                while (*(void *)v96 != v92)
                {
                  v96 += 8;
                  if (v96 == v94)
                  {
                    double v96 = *(char **)(v91 + 352);
                    break;
                  }
                }
              }
            }
            while (v95 - v93 >= v96 - v93);
            do
            {
              uint64_t v97 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v97) {
                break;
              }
              if (v93 == v94)
              {
                long long v99 = v93;
                int v98 = v93;
              }
              else
              {
                int v98 = v93;
                while (*(void *)v98 != v23)
                {
                  v98 += 8;
                  if (v98 == v94)
                  {
                    int v98 = v94;
                    break;
                  }
                }
                long long v99 = v93;
                while (*(void *)v99 != v97)
                {
                  v99 += 8;
                  if (v99 == v94)
                  {
                    long long v99 = v94;
                    break;
                  }
                }
              }
            }
            while (v98 - v93 < v99 - v93);
          }
          long long v100 = (long long *)(v13 - 48);
          BOOL v5 = v13 - 48 >= a1;
          BOOL v6 = v13 - 48 == a1;
          if (v13 - 48 != a1)
          {
            long long v101 = *v100;
            long long v102 = *(_OWORD *)(v13 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
            *(_OWORD *)a1 = v101;
            *(_OWORD *)(a1 + 16) = v102;
          }
          a5 = 0;
          *long long v100 = v235;
          *(void *)(v13 - 32) = v241;
          *(void *)(v13 - 24) = v23;
          *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v232 + 7);
          *(void *)(v13 - 16) = v232;
        }
        uint64_t v240 = *(void *)(a1 + 16);
        long long v231 = *(_OWORD *)(a1 + 32);
        long long v234 = *(_OWORD *)a1;
        unint64_t v30 = a1;
        do
        {
          unint64_t v31 = v30;
          v30 += 48;
          uint64_t v32 = *(void *)(v31 + 72);
          if (v32 == v23) {
            break;
          }
          uint64_t v33 = *(char **)(v24 + 344);
          double v34 = *(char **)(v24 + 352);
          double v35 = v33;
          long long v36 = v33;
          if (v33 != v34)
          {
            do
            {
              if (*(void *)v36 == v32) {
                goto LABEL_26;
              }
              v36 += 8;
            }
            while (v36 != v34);
            long long v36 = *(char **)(v24 + 352);
LABEL_26:
            while (*(void *)v35 != v23)
            {
              v35 += 8;
              if (v35 == v34)
              {
                double v35 = *(char **)(v24 + 352);
                break;
              }
            }
          }
        }
        while (v36 - v33 < v35 - v33);
        double v37 = a2;
        if (v31 == a1)
        {
          double v37 = a2;
          if (v30 < (unint64_t)a2)
          {
            double v37 = a2;
            do
            {
              uint64_t v43 = *((void *)v37 - 3);
              v37 -= 3;
              if (v43 != v23)
              {
                uint64_t v44 = *(char **)(v24 + 344);
                uint64_t v45 = *(char **)(v24 + 352);
                __n128 v46 = v44;
                long long v47 = v44;
                if (v44 != v45)
                {
                  do
                  {
                    if (*(void *)v47 == v43) {
                      goto LABEL_48;
                    }
                    v47 += 8;
                  }
                  while (v47 != v45);
                  long long v47 = *(char **)(v24 + 352);
LABEL_48:
                  while (*(void *)v46 != v23)
                  {
                    v46 += 8;
                    if (v46 == v45)
                    {
                      __n128 v46 = *(char **)(v24 + 352);
                      break;
                    }
                  }
                }
                if (v47 - v44 < v46 - v44) {
                  break;
                }
              }
            }
            while (v30 < (unint64_t)v37);
          }
        }
        else
        {
          do
          {
            do
            {
              uint64_t v38 = *((void *)v37 - 3);
              v37 -= 3;
            }
            while (v38 == v23);
            double v39 = *(char **)(v24 + 344);
            double v40 = *(char **)(v24 + 352);
            double v41 = v39;
            double v42 = v39;
            if (v39 != v40)
            {
              do
              {
                if (*(void *)v42 == v38) {
                  goto LABEL_36;
                }
                v42 += 8;
              }
              while (v42 != v40);
              double v42 = *(char **)(v24 + 352);
LABEL_36:
              while (*(void *)v41 != v23)
              {
                v41 += 8;
                if (v41 == v40)
                {
                  double v41 = *(char **)(v24 + 352);
                  break;
                }
              }
            }
          }
          while (v42 - v39 >= v41 - v39);
        }
        unint64_t v13 = v30;
        if (v30 < (unint64_t)v37)
        {
          long long v48 = v37;
          do
          {
            *(_OWORD *)v224 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v224[16] = *(_OWORD *)(v13 + 32);
            long long v49 = *(_OWORD *)v13;
            long long v51 = *v48;
            long long v50 = v48[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v48 + 27);
            *(_OWORD *)unint64_t v13 = v51;
            *(_OWORD *)(v13 + 16) = v50;
            *(long long *)((char *)v48 + 27) = *(_OWORD *)&v224[11];
            *long long v48 = v49;
            v48[1] = *(_OWORD *)v224;
            uint64_t v52 = *(void *)a3;
            do
            {
              uint64_t v53 = *(void *)(v13 + 72);
              v13 += 48;
              if (v53 == v23) {
                break;
              }
              BOOL v54 = *(char **)(v52 + 344);
              BOOL v55 = *(char **)(v52 + 352);
              int v56 = v54;
              unint64_t v57 = v54;
              if (v54 != v55)
              {
                do
                {
                  if (*(void *)v57 == v53) {
                    goto LABEL_61;
                  }
                  v57 += 8;
                }
                while (v57 != v55);
                unint64_t v57 = *(char **)(v52 + 352);
LABEL_61:
                while (*(void *)v56 != v23)
                {
                  v56 += 8;
                  if (v56 == v55)
                  {
                    int v56 = *(char **)(v52 + 352);
                    break;
                  }
                }
              }
            }
            while (v57 - v54 < v56 - v54);
            do
            {
              do
              {
                uint64_t v58 = *((void *)v48 - 3);
                v48 -= 3;
              }
              while (v58 == v23);
              long long v59 = *(char **)(v52 + 344);
              id v60 = *(char **)(v52 + 352);
              char v61 = v59;
              uint64_t v62 = v59;
              if (v59 != v60)
              {
                do
                {
                  if (*(void *)v62 == v58) {
                    goto LABEL_70;
                  }
                  v62 += 8;
                }
                while (v62 != v60);
                uint64_t v62 = *(char **)(v52 + 352);
LABEL_70:
                while (*(void *)v61 != v23)
                {
                  v61 += 8;
                  if (v61 == v60)
                  {
                    char v61 = *(char **)(v52 + 352);
                    break;
                  }
                }
              }
            }
            while (v62 - v59 >= v61 - v59);
          }
          while (v13 < (unint64_t)v48);
        }
        long long v63 = (long long *)(v13 - 48);
        if (v13 - 48 != a1)
        {
          long long v64 = *v63;
          long long v65 = *(_OWORD *)(v13 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
          *(_OWORD *)a1 = v64;
          *(_OWORD *)(a1 + 16) = v65;
        }
        *long long v63 = v234;
        *(void *)(v13 - 32) = v240;
        *(void *)(v13 - 24) = v23;
        *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v231 + 7);
        *(void *)(v13 - 16) = v231;
        if (v30 >= (unint64_t)v37) {
          break;
        }
LABEL_80:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(a1, v13 - 48, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, v13 - 48, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v13, (uint64_t)a2, a3))
      {
        break;
      }
      if (!v66) {
        goto LABEL_80;
      }
    }
    a2 = (long long *)(v13 - 48);
    if (!v66) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 - 24);
      uint64_t v9 = *(void *)(a1 + 24);
      if (v8 == v9) {
        return result;
      }
      id v10 = *(char **)(*(void *)a3 + 344);
      uint64_t v11 = *(char **)(*(void *)a3 + 352);
      unint64_t v12 = v10;
      unint64_t v13 = v10;
      if (v10 == v11) {
        goto LABEL_10;
      }
      do
      {
        if (*(void *)v13 == v8) {
          goto LABEL_7;
        }
        v13 += 8;
      }
      while (v13 != v11);
      unint64_t v13 = *(char **)(*(void *)a3 + 352);
      do
      {
LABEL_7:
        if (*(void *)v12 == v9) {
          goto LABEL_10;
        }
        v12 += 8;
      }
      while (v12 != v11);
      unint64_t v12 = *(char **)(*(void *)a3 + 352);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        uint64_t v14 = (long long *)(a2 - 48);
        long long v15 = *(_OWORD *)a1;
        *(_OWORD *)double v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        long long v16 = *(_OWORD *)(a2 - 21);
        long long v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *uint64_t v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(long long *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), a3);
      uint64_t v19 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      int v20 = 0;
      break;
  }
  while (1)
  {
    uint64_t v21 = *(void *)(v19 + 24);
    uint64_t v22 = *(void *)(v18 + 24);
    if (v21 != v22)
    {
      uint64_t v23 = *(char **)(*(void *)a3 + 344);
      uint64_t v24 = *(char **)(*(void *)a3 + 352);
      uint64_t v25 = v23;
      double v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(void *)v26 == v21) {
            goto LABEL_19;
          }
          v26 += 8;
        }
        while (v26 != v24);
        double v26 = *(char **)(*(void *)a3 + 352);
LABEL_19:
        while (*(void *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            uint64_t v25 = *(char **)(*(void *)a3 + 352);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        long long v34 = *(_OWORD *)v19;
        uint64_t v36 = *(void *)(v19 + 16);
        long long v37 = *(_OWORD *)(v19 + 32);
        uint64_t v27 = v19;
        while (1)
        {
          long long v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1) {
            break;
          }
          uint64_t v27 = v18;
          uint64_t v29 = *(void *)(v18 - 24);
          if (v21 != v29)
          {
            unint64_t v30 = *(char **)(*(void *)a3 + 344);
            unint64_t v31 = *(char **)(*(void *)a3 + 352);
            uint64_t v32 = v30;
            uint64_t v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(void *)v33 == v21) {
                  goto LABEL_30;
                }
                v33 += 8;
              }
              while (v33 != v31);
              uint64_t v33 = *(char **)(*(void *)a3 + 352);
LABEL_30:
              while (*(void *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  uint64_t v32 = *(char **)(*(void *)a3 + 352);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30) {
              continue;
            }
          }
          goto LABEL_36;
        }
        uint64_t v27 = a1;
LABEL_36:
        *(_OWORD *)uint64_t v27 = v34;
        *(void *)(v27 + 16) = v36;
        *(void *)(v27 + 24) = v21;
        *(void *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8) {
          return v19 + 48 == a2;
        }
      }
    }
    uint64_t v18 = v19;
    v19 += 48;
    if (v19 == a2) {
      return 1;
    }
  }
}

__n128 HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::overallStatistics(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 120);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)(a1 + 8), *(const void **)(a2 + 128), *(void *)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 3);
  long long v4 = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 58) = *(_OWORD *)(a2 + 178);
  BOOL v5 = *(const void **)(a2 + 208);
  *(void *)(a1 + 80) = *(void *)(a2 + 200);
  uint64_t v6 = *(void *)(a2 + 216);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 88), v5, v6, (v6 - (uint64_t)v5) >> 4);
  *(void *)(a1 + 112) = *(void *)(a2 + 232);
  __n128 result = *(__n128 *)(a2 + 240);
  long long v8 = *(_OWORD *)(a2 + 256);
  *(__n128 *)(a1 + 120) = result;
  *(_OWORD *)(a1 + 136) = v8;
  *(void *)(a1 + 152) = *(void *)(a2 + 272);
  return result;
}

void sub_1BD133580(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  double v3 = *(void **)(a2 + 280);
  long long v47 = (void *)(a2 + 288);
  if (v3 == (void *)(a2 + 288)) {
    return;
  }
  long long v49 = (void *)(a1 + 16);
  do
  {
    BOOL v5 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a2, v3[4]);
    uint64_t v6 = v5;
    if (!v5) {
      goto LABEL_80;
    }
    unint64_t v7 = [v5 hash];
    unint64_t v8 = v7;
    unint64_t v9 = *(void *)(a1 + 8);
    if (!v9) {
      goto LABEL_21;
    }
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v50 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v2 = v7;
      if (v7 >= v9) {
        unint64_t v2 = v7 % v9;
      }
    }
    else
    {
      unint64_t v2 = (v9 - 1) & v7;
    }
    uint64_t v11 = *(uint64_t ***)(*(void *)a1 + 8 * v2);
    if (!v11 || (unint64_t v12 = *v11) == 0)
    {
LABEL_21:
      uint64_t v19 = (char *)operator new(0xB8uLL);
      v51[0] = v19;
      v51[1] = v49;
      *(void *)uint64_t v19 = 0;
      *((void *)v19 + 1) = v8;
      *((void *)v19 + 2) = v6;
      *(_OWORD *)(v19 + 24) = 0u;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      *(_OWORD *)(v19 + 104) = 0u;
      *(_OWORD *)(v19 + 120) = 0u;
      *(_OWORD *)(v19 + 136) = 0u;
      *(_OWORD *)(v19 + 152) = 0u;
      *(_OWORD *)(v19 + 168) = 0u;
      char v52 = 1;
      float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v21 = *(float *)(a1 + 32);
      if (v9 && (float)(v21 * (float)v9) >= v20)
      {
LABEL_67:
        long long v37 = *(void **)(*(void *)a1 + 8 * v2);
        unint64_t v12 = (uint64_t *)v51[0];
        if (v37)
        {
          *(void *)v51[0] = *v37;
        }
        else
        {
          *(void *)v51[0] = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = v12;
          *(void *)(*(void *)a1 + 8 * v2) = v49;
          if (!*v12)
          {
LABEL_76:
            v51[0] = 0;
            ++*(void *)(a1 + 24);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v51);
            goto LABEL_77;
          }
          unint64_t v38 = *(void *)(*v12 + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v38 >= v9) {
              v38 %= v9;
            }
          }
          else
          {
            v38 &= v9 - 1;
          }
          long long v37 = (void *)(*(void *)a1 + 8 * v38);
        }
        *long long v37 = v12;
        goto LABEL_76;
      }
      BOOL v22 = (v9 & (v9 - 1)) != 0;
      if (v9 < 3) {
        BOOL v22 = 1;
      }
      unint64_t v23 = v22 | (2 * v9);
      unint64_t v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      else {
        int8x8_t prime = (int8x8_t)v23;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v9 = *(void *)(a1 + 8);
      if (*(void *)&prime > v9) {
        goto LABEL_33;
      }
      if (*(void *)&prime < v9)
      {
        unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          unint64_t v32 = std::__next_prime(v32);
        }
        else
        {
          uint64_t v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2) {
            unint64_t v32 = v34;
          }
        }
        if (*(void *)&prime <= v32) {
          int8x8_t prime = (int8x8_t)v32;
        }
        if (*(void *)&prime >= v9)
        {
          unint64_t v9 = *(void *)(a1 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            double v26 = operator new(8 * *(void *)&prime);
            uint64_t v27 = *(void **)a1;
            *(void *)a1 = v26;
            if (v27) {
              operator delete(v27);
            }
            uint64_t v28 = 0;
            *(int8x8_t *)(a1 + 8) = prime;
            do
              *(void *)(*(void *)a1 + 8 * v28++) = 0;
            while (*(void *)&prime != v28);
            uint64_t v29 = (void *)*v49;
            if (*v49)
            {
              unint64_t v30 = v29[1];
              uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(void *)&prime) {
                  v30 %= *(void *)&prime;
                }
              }
              else
              {
                v30 &= *(void *)&prime - 1;
              }
              *(void *)(*(void *)a1 + 8 * v30) = v49;
              double v35 = (void *)*v29;
              if (*v29)
              {
                do
                {
                  unint64_t v36 = v35[1];
                  if (v31.u32[0] > 1uLL)
                  {
                    if (v36 >= *(void *)&prime) {
                      v36 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v36 &= *(void *)&prime - 1;
                  }
                  if (v36 != v30)
                  {
                    if (!*(void *)(*(void *)a1 + 8 * v36))
                    {
                      *(void *)(*(void *)a1 + 8 * v36) = v29;
                      goto LABEL_58;
                    }
                    *uint64_t v29 = *v35;
                    *double v35 = **(void **)(*(void *)a1 + 8 * v36);
                    **(void **)(*(void *)a1 + 8 * v36) = v35;
                    double v35 = v29;
                  }
                  unint64_t v36 = v30;
LABEL_58:
                  uint64_t v29 = v35;
                  double v35 = (void *)*v35;
                  unint64_t v30 = v36;
                }
                while (v35);
              }
            }
            unint64_t v9 = (unint64_t)prime;
            goto LABEL_62;
          }
          __n128 v46 = *(void **)a1;
          *(void *)a1 = 0;
          if (v46) {
            operator delete(v46);
          }
          unint64_t v9 = 0;
          *(void *)(a1 + 8) = 0;
        }
      }
LABEL_62:
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v8 >= v9) {
          unint64_t v2 = v8 % v9;
        }
        else {
          unint64_t v2 = v8;
        }
      }
      else
      {
        unint64_t v2 = (v9 - 1) & v8;
      }
      goto LABEL_67;
    }
    while (1)
    {
      unint64_t v13 = v12[1];
      if (v13 == v8) {
        break;
      }
      if (v50 > 1)
      {
        if (v13 >= v9) {
          v13 %= v9;
        }
      }
      else
      {
        v13 &= v9 - 1;
      }
      if (v13 != v2) {
        goto LABEL_21;
      }
LABEL_20:
      unint64_t v12 = (uint64_t *)*v12;
      if (!v12) {
        goto LABEL_21;
      }
    }
    id v14 = (id)v12[2];
    long long v15 = v6;
    id v16 = v6;
    long long v17 = v16;
    if (v14 != v16)
    {
      char v18 = [v14 isEqualToString:v16];

      uint64_t v6 = v15;
      if (v18) {
        goto LABEL_77;
      }
      goto LABEL_20;
    }

    uint64_t v6 = v15;
LABEL_77:
    *((_DWORD *)v12 + 6) = *((_DWORD *)v3 + 10);
    if (v12 + 2 != v3 + 4)
    {
      std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((char *)v12 + 32, (char *)v3[6], v3[7], (uint64_t)(v3[7] - v3[6]) >> 3);
      long long v39 = *(_OWORD *)(v3 + 9);
      long long v40 = *(_OWORD *)(v3 + 11);
      *(_OWORD *)((char *)v12 + 82) = *(_OWORD *)((char *)v3 + 98);
      *(_OWORD *)(v12 + 9) = v40;
      *(_OWORD *)(v12 + 7) = v39;
      v12[13] = v3[15];
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)v12 + 112, (char *)v3[16], v3[17], (uint64_t)(v3[17] - v3[16]) >> 4);
    }
    v12[17] = v3[19];
    long long v41 = *((_OWORD *)v3 + 10);
    long long v42 = *((_OWORD *)v3 + 11);
    *((_WORD *)v12 + 88) = *((_WORD *)v3 + 96);
    *((_OWORD *)v12 + 9) = v41;
    *((_OWORD *)v12 + 10) = v42;

LABEL_80:
    uint64_t v43 = (void *)v3[1];
    if (v43)
    {
      do
      {
        uint64_t v44 = v43;
        uint64_t v43 = (void *)*v43;
      }
      while (v43);
    }
    else
    {
      do
      {
        uint64_t v44 = (void *)v3[2];
        BOOL v45 = *v44 == (void)v3;
        double v3 = v44;
      }
      while (!v45);
    }
    double v3 = v44;
  }
  while (v44 != v47);
}

void sub_1BD133B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);

  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>>::~__hash_table(v6);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,0>(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(void *)(a1 + 104) = v2;
    operator delete(v2);
  }
  double v3 = *(void **)(a1 + 16);
  if (v3)
  {
    *(void *)(a1 + 24) = v3;
    operator delete(v3);
  }
  long long v4 = *(void **)a1;
}

char *std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    __n128 result = std::vector<double>::__vallocate[abi:ne180100](v7, v11);
    unint64_t v13 = (char *)v7[1];
    unint64_t v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      char v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unint64_t v12 = (void **)(result + 8);
  id v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  id v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    __n128 result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    char v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    __n128 result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  uint64_t *v12 = &v9[v17];
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      double v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  long long v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1725790;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1725790;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C187B8A0);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1F1725790;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BD133F2C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1725790;
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48))(v1) + 72;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsPercentiles const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1725820;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsPercentiles const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1725820;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C187B8A0);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsPercentiles const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1F1725820;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BD1341C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsPercentiles const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1725820;
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsPercentiles const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsPercentiles const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsPercentiles const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  unint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsPercentiles const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsPercentiles const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsPercentiles const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::~__func()
{
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F17258B0;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F17258B0;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 640))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a4, 3, @"Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date");
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
  }
  double v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(void *)(a1 + 40) && a3) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_advanceToTime(a1, v8);
    }
    HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    unint64_t v9 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    uint64_t v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v9, a4);
  }
  return v10;
}

void sub_1BD1345D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_advanceToTime(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 128) <= a2)
  {
    uint64_t v4 = a1 + 112;
    BOOL v5 = (double *)(a1 + 120);
    do
    {
      uint64_t v6 = *(void *)(a1 + 616);
      uint64_t v7 = *(void *)(a1 + 608);
      if (v6 == v7)
      {
        uint64_t v22 = 0;
        unint64_t v15 = *(void **)(a1 + 40);
        id v16 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a2];
        double v8 = [v15 dateIntervalContainingDate:v16 index:&v22];

        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        unint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v17 = v22;
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v19 = v18;
        float v20 = [v8 endDate];
        [v20 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::resetToBucket(v4, v17, v19, v21);
      }
      else
      {
        double v8 = [*(id *)(a1 + 40) dateIntervalAtIndex:*(void *)(a1 + 112) + 1];
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        unint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v12 = v11;
        unint64_t v13 = [v8 endDate];
        [v13 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::advanceBucket(v4, v12, v14);
      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_didChangeBucket(a1, v9);
      if (v6 != v7) {
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
      }
    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1BD1347E0(_Unwind_Exception *exception_object)
{
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  char v3 = *(unsigned char *)(a2 + 32);
  if (v3)
  {
    uint64_t v5 = a1 + 8;
    double v6 = *(double *)(a2 + 8);
    if (v6 >= *(double *)(a1 + 8))
    {
      uint64_t v7 = *(uint64_t **)a2;
      double v8 = *(double *)(a2 + 16);
      unint64_t v9 = *(void *)(a2 + 24);
      char v10 = *(unsigned char *)(a2 + 33);
      double v11 = *(double *)(a1 + 16);
      if (*(_DWORD *)(a1 + 36)) {
        BOOL v12 = v6 < v11;
      }
      else {
        BOOL v12 = v6 <= v11;
      }
      if (v12)
      {
        if (v8 <= v11) {
          double v14 = *(double *)(a2 + 16);
        }
        else {
          double v14 = *(double *)(a1 + 16);
        }
        std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 312, *(void *)(a2 + 24), v9);
        unint64_t v15 = *(char **)(a1 + 112);
        if (v15 == *(char **)(a1 + 104) && (uint64_t)(*(void *)(a1 + 144) - *(void *)(a1 + 136)) <= 0)
        {
          double v33 = *(double *)(a1 + 8);
          double v34 = *(double *)(a1 + 16);
          if (v6 >= v33) {
            double v33 = v6;
          }
          if (v34 >= v14) {
            double v34 = v14;
          }
          *(double *)(a1 + 48) = v33;
          *(double *)(a1 + 56) = v34;
        }
        else
        {
          if (v6 < *(double *)(a1 + 48))
          {
            double v16 = *(double *)(a1 + 8);
            if (v6 >= v16) {
              double v16 = v6;
            }
            *(double *)(a1 + 48) = v16;
          }
          if (v14 > *(double *)(a1 + 56))
          {
            double v17 = *(double *)(a1 + 16);
            if (v17 >= v14) {
              double v17 = v14;
            }
            *(double *)(a1 + 56) = v17;
          }
        }
        if (*(unsigned char *)(a1 + 32))
        {
          double v35 = *(double *)(a1 + 64);
          if (v6 < v35) {
            double v35 = v6;
          }
          *(double *)(a1 + 64) = v35;
        }
        if (a3 && v6 < *(double *)(a1 + 16))
        {
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_mergeThroughTime(v5, v6);
          unint64_t v15 = *(char **)(a1 + 112);
        }
        unint64_t v36 = *(void *)(a1 + 120);
        if ((unint64_t)v15 >= v36)
        {
          unint64_t v38 = 0x555555555555555;
          long long v39 = *(char **)(a1 + 104);
          unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v39) >> 4);
          unint64_t v41 = v40 + 1;
          if (v40 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - (void)v39) >> 4);
          if (2 * v42 > v41) {
            unint64_t v41 = 2 * v42;
          }
          if (v42 < 0x2AAAAAAAAAAAAAALL) {
            unint64_t v38 = v41;
          }
          if (v38)
          {
            unint64_t v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v38);
            long long v39 = *(char **)(a1 + 104);
            unint64_t v15 = *(char **)(a1 + 112);
          }
          else
          {
            uint64_t v43 = 0;
          }
          unint64_t v44 = v38 + 48 * v40;
          *(void *)unint64_t v44 = v7;
          *(double *)(v44 + 8) = v6;
          *(double *)(v44 + 16) = v14;
          *(void *)(v44 + 24) = v9;
          unint64_t v45 = v38 + 48 * v43;
          *(unsigned char *)(v44 + 32) = v3;
          *(unsigned char *)(v44 + 33) = v10;
          *(_WORD *)(v44 + 40) = 0;
          *(unsigned char *)(v44 + 42) = 0;
          long long v37 = (void *)(v44 + 48);
          if (v15 != v39)
          {
            do
            {
              long long v46 = *((_OWORD *)v15 - 3);
              long long v47 = *((_OWORD *)v15 - 2);
              *(_OWORD *)(v44 - 21) = *(_OWORD *)(v15 - 21);
              *(_OWORD *)(v44 - 48) = v46;
              *(_OWORD *)(v44 - 32) = v47;
              v44 -= 48;
              v15 -= 48;
            }
            while (v15 != v39);
            long long v39 = *(char **)(a1 + 104);
          }
          *(void *)(a1 + 104) = v44;
          *(void *)(a1 + 112) = v37;
          *(void *)(a1 + 120) = v45;
          if (v39) {
            operator delete(v39);
          }
        }
        else
        {
          *(void *)unint64_t v15 = v7;
          *((double *)v15 + 1) = v6;
          *((double *)v15 + 2) = v14;
          *((void *)v15 + 3) = v9;
          v15[32] = v3;
          v15[33] = v10;
          *((_WORD *)v15 + 20) = 0;
          long long v37 = v15 + 48;
          v15[42] = 0;
        }
        *(void *)(a1 + 112) = v37;
        if (!*(unsigned char *)(a1 + 280) || *(double *)(a1 + 256) <= v6)
        {
          *(void *)(a1 + 248) = v7;
          *(double *)(a1 + 256) = v6;
          *(double *)(a1 + 264) = v8;
          *(void *)(a1 + 272) = v9;
          *(unsigned char *)(a1 + 280) = v3;
          *(unsigned char *)(a1 + 281) = v10;
          if (!*(unsigned char *)(a1 + 200) || *(double *)(a1 + 176) <= v6)
          {
            *(void *)(a1 + 168) = v7;
            *(double *)(a1 + 176) = v6;
            *(double *)(a1 + 184) = v8;
            *(void *)(a1 + 192) = v9;
            *(unsigned char *)(a1 + 200) = v3;
            *(unsigned char *)(a1 + 201) = v10;
          }
        }
        if (*(unsigned char *)(a1 + 33))
        {
          unint64_t v48 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(v5, v9);
          long long v49 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_statisticsForSource(v5, v48);
          if (!*((unsigned char *)v49 + 152) || *((double *)v49 + 16) <= v6)
          {
            v49[15] = v7;
            *((double *)v49 + 16) = v6;
            *((double *)v49 + 17) = v8;
            v49[18] = (uint64_t *)v9;
            *((unsigned char *)v49 + 152) = v3;
            *((unsigned char *)v49 + 153) = v10;
            if (!*((unsigned char *)v49 + 72) || *((double *)v49 + 6) <= v6)
            {
              v49[5] = v7;
              *((double *)v49 + 6) = v6;
              *((double *)v49 + 7) = v8;
              v49[8] = (uint64_t *)v9;
              *((unsigned char *)v49 + 72) = v3;
              *((unsigned char *)v49 + 73) = v10;
            }
          }
        }
      }
      else
      {
        if (v6 < v11) {
          double v6 = *(double *)(a1 + 16);
        }
        unint64_t v18 = *(void *)(a1 + 504);
        unint64_t v19 = *(void *)(a1 + 512);
        if (v18 >= v19)
        {
          uint64_t v21 = *(void *)(a1 + 496);
          unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v21) >> 3);
          unint64_t v23 = v22 + 1;
          if (v22 + 1 > 0x666666666666666) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v21) >> 3);
          if (2 * v24 > v23) {
            unint64_t v23 = 2 * v24;
          }
          if (v24 >= 0x333333333333333) {
            unint64_t v25 = 0x666666666666666;
          }
          else {
            unint64_t v25 = v23;
          }
          if (v25) {
            unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v25);
          }
          else {
            uint64_t v26 = 0;
          }
          unint64_t v27 = v25 + 40 * v22;
          unint64_t v28 = v25 + 40 * v26;
          *(void *)unint64_t v27 = v7;
          *(double *)(v27 + 8) = v6;
          *(double *)(v27 + 16) = v8;
          *(void *)(v27 + 24) = v9;
          *(unsigned char *)(v27 + 32) = v3;
          *(unsigned char *)(v27 + 33) = v10;
          unint64_t v20 = v27 + 40;
          unint64_t v30 = *(char **)(a1 + 496);
          uint64_t v29 = *(char **)(a1 + 504);
          if (v29 != v30)
          {
            do
            {
              long long v31 = *(_OWORD *)(v29 - 40);
              long long v32 = *(_OWORD *)(v29 - 24);
              *(_WORD *)(v27 - 8) = *((_WORD *)v29 - 4);
              *(_OWORD *)(v27 - 24) = v32;
              *(_OWORD *)(v27 - 40) = v31;
              v27 -= 40;
              v29 -= 40;
            }
            while (v29 != v30);
            uint64_t v29 = *(char **)(a1 + 496);
          }
          *(void *)(a1 + 496) = v27;
          *(void *)(a1 + 504) = v20;
          *(void *)(a1 + 512) = v28;
          if (v29) {
            operator delete(v29);
          }
        }
        else
        {
          *(void *)unint64_t v18 = v7;
          *(double *)(v18 + 8) = v6;
          *(double *)(v18 + 16) = v8;
          *(void *)(v18 + 24) = v9;
          *(unsigned char *)(v18 + 32) = v3;
          unint64_t v20 = v18 + 40;
          *(unsigned char *)(v18 + 33) = v10;
        }
        *(void *)(a1 + 504) = v20;
      }
    }
  }
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 642))
  {
    *(unsigned char *)(a1 + 644) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 644) = 0;
    unint64_t v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      uint64_t v4 = v2;
      char v3 = (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      if (v3) {
        v4[2](v4, v3);
      }

      unint64_t v2 = v4;
    }
  }
}

void sub_1BD134D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  unint64_t v9 = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 496), *(void *)(a1 + 504), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 504) - *(void *)(a1 + 496)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::resetToBucket(a1, *(void *)a1 + 1, a2, a3);
  double v6 = v9;
  uint64_t v7 = v10;
  if (v9 != v10)
  {
    uint64_t v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BD134E2C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8 = (id *)(a1 + 40);
  objc_storeStrong((id *)(a1 + 520), *(id *)(a1 + 40));
  unint64_t v9 = *(void **)(a1 + 136);
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  *(_DWORD *)(a1 + 128) = 0;
  if (v9)
  {
    *(void *)(a1 + 144) = v9;
    operator delete(v9);
  }
  char v10 = *(void **)(a1 + 216);
  *(void *)(a1 + 208) = 0;
  long long v11 = 0uLL;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_WORD *)(a1 + 200) = 0;
  if (v10)
  {
    *(void *)(a1 + 224) = v10;
    operator delete(v10);
    long long v11 = 0uLL;
  }
  *(_WORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 248) = v11;
  *(_OWORD *)(a1 + 264) = v11;
  *(_OWORD *)(a1 + 216) = v11;
  *(_OWORD *)(a1 + 232) = v11;
  if (*(void *)(a1 + 304))
  {
    BOOL v12 = *(void **)(a1 + 288);
    uint64_t v13 = *(void *)(a1 + 296);
    *(void *)(a1 + 288) = a1 + 296;
    *(void *)(v13 + 16) = 0;
    *(void *)(a1 + 296) = 0;
    *(void *)(a1 + 304) = 0;
    if (v12[1]) {
      double v14 = (void *)v12[1];
    }
    else {
      double v14 = v12;
    }
    if (v14)
    {
      unint64_t v15 = (void *)v14[2];
      if (v15)
      {
        double v16 = (void *)*v15;
        if ((void *)*v15 == v14)
        {
          void *v15 = 0;
          while (1)
          {
            unint64_t v18 = (void *)v15[1];
            if (!v18) {
              break;
            }
            do
            {
              unint64_t v15 = v18;
              unint64_t v18 = (void *)*v18;
            }
            while (v18);
          }
        }
        else
        {
          for (v15[1] = 0; v16; double v16 = (void *)v15[1])
          {
            do
            {
              unint64_t v15 = v16;
              double v16 = (void *)*v16;
            }
            while (v16);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>>::destroy(v14);
        for (uint64_t i = (void *)v15[2]; i; uint64_t i = (void *)i[2])
          unint64_t v15 = i;
        double v14 = v15;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>>::destroy(v14);
  }
  objc_storeStrong(v8, *(id *)(a1 + 520));
  *(void *)(a1 + 504) = *(void *)(a1 + 496);
  *(void *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 644))
  {
    if (v3)
    {
      id v6 = v3;
      uint64_t v4 = _Block_copy(*(const void **)(a1 + 96));
      uint64_t v5 = v4;
      if (v4) {
        (*((void (**)(void *, id))v4 + 2))(v4, v6);
      }

      id v3 = v6;
    }
    *(unsigned char *)(a1 + 644) = 0;
  }
}

void sub_1BD135024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 startDate];
  id v6 = [v4 startDate];
  uint64_t v7 = [v5 compare:v6];

  return v7;
}

void sub_1BD1350AC(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 13);
  if (WeakRetained)
  {
    if (v5
      && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_currentBucketInterval((uint64_t)a1),
          (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v8 = [v5 endDate];
      unint64_t v9 = [v7 startDate];
      if (objc_msgSend(v8, "hk_isAfterDate:", v9))
      {
        char v10 = [v5 startDate];
        long long v11 = [v7 endDate];
        char v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);
      }
      else
      {
        char v12 = 0;
      }

      uint64_t v13 = _Block_copy(a1[12]);
      if ((v12 & 1) == 0) {
        operator new();
      }
    }
    else
    {
      uint64_t v13 = _Block_copy(a1[12]);
    }
    *((unsigned char *)a1 + 640) = 1;
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
    v27[3] = &unk_1E6308FF8;
    id v15 = v5;
    id v28 = v15;
    id v16 = v13;
    id v29 = v16;
    (*((void (**)(id *, void *))*a1 + 9))(a1, v27);
    if (v5)
    {
      double v17 = [v15 startDate];
      [v17 timeIntervalSinceReferenceDate];
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_configureForStartTime((uint64_t)a1);
    }
    else
    {
      (*((void (**)(id *))*a1 + 4))(a1);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
    v21[3] = &unk_1E6309060;
    unint64_t v24 = a1;
    id v5 = v15;
    char v26 = 1;
    id v22 = v5;
    unint64_t v25 = a1;
    id v23 = WeakRetained;
    uint64_t v14 = (*((uint64_t (**)(id *, void *, uint64_t))*a1 + 14))(a1, v21, a3);
    unint64_t v18 = _Block_copy(v16);
    id v19 = a1[12];
    a1[12] = v18;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to invalidate interval: no data source available.");
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1BD1354FC(_Unwind_Exception *a1)
{
  MEMORY[0x1C187B8A0](v4, 0x10F1C40E29C3E6ELL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_11;
  }
  id v3 = [v10 endDate];
  uint64_t v4 = [*(id *)(a1 + 32) startDate];
  char v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    id v6 = [v10 startDate];
    uint64_t v7 = [*(id *)(a1 + 32) endDate];
    char v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_11:
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9) {
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
      }
    }
  }
}

void sub_1BD1356E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = [*(id *)(a1 + 32) startDate];
  [v5 timeIntervalSinceReferenceDate];
  uint64_t v7 = v6;

  char v8 = [*(id *)(a1 + 32) endDate];
  [v8 timeIntervalSinceReferenceDate];
  uint64_t v10 = v9;

  long long v11 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  uint64_t v13 = *(void *)(a1 + 32);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  char v32 = *(unsigned char *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  uint64_t v31 = *(void *)(a1 + 56);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  void v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  uint64_t v14 = [v11 collectionCalculator:WeakRetained queryForInterval:v13 error:a2 sampleHandler:v30 mergeHandler:v29];

  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15 != v4)
    {
      id v16 = [*(id *)(a1 + 32) endDate];
      [v16 timeIntervalSinceReferenceDate];
      if (*(void *)(v15 + 40))
      {
        double v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          id v19 = [*(id *)(v15 + 40) dateIntervalAtIndex:*(void *)(v15 + 112) + 1];
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          unint64_t v20 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(v15, (double *)(v15 + 120));
          uint64_t v21 = [v19 startDate];
          [v21 timeIntervalSinceReferenceDate];
          double v23 = v22;
          unint64_t v24 = [v19 endDate];
          [v24 timeIntervalSinceReferenceDate];
          HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            char v26 = _Block_copy(*(const void **)(v15 + 96));
            unint64_t v27 = v26;
            if (v26) {
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);
            }
          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_didChangeBucket(v15, 0);
        }
      }
    }
  }
  return v14;
}

void sub_1BD13598C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7 = *(double *)(a1 + 32);
  if (v7 > a6)
  {
    a2 = 0;
    int v8 = 0;
    a7 = 0.0;
    a5 = 0.0;
    double v9 = 0.0;
  }
  else
  {
    int v8 = 1;
    double v9 = a6;
  }
  double v13 = a5;
  double v14 = v9;
  double v15 = a7;
  uint64_t v16 = a2;
  char v17 = v8;
  char v18 = 0;
  if (*(unsigned char *)(a1 + 56))
  {
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v13, a3, a4);
    }
  }
  else
  {
    BOOL v11 = v7 <= a6;
    double v12 = *(double *)(a1 + 40);
    if (v9 >= v12) {
      BOOL v11 = 0;
    }
    if (!v11 || a7 <= v12) {
      double v12 = a7;
    }
    double v14 = v9;
    double v15 = v12;
    char v17 = v11;
    if (v11) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v13, a3, a4);
    }
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 640)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
  }
  if (*(void *)(a1 + 40)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_advanceToTime(a1, a2);
  }
  if (*(double *)(a1 + 128) > a2)
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_mergeThroughTime(a1 + 120, a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 32) < *(double *)(v10 + 8))
                {
                  uint64_t v129 = *(void *)(v10 + 32);
                  long long v113 = *(_OWORD *)v10;
                  long long v121 = *(_OWORD *)(v10 + 16);
                  long long v52 = *(_OWORD *)(a2 - 40);
                  long long v53 = *(_OWORD *)(a2 - 24);
                  *(_WORD *)(v10 + 32) = *(_WORD *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(_WORD *)(a2 - 8) = v129;
                  *(_OWORD *)(a2 - 24) = v121;
                  *(_OWORD *)(a2 - 40) = v113;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v10, (double *)(v10 + 40), (double *)(a2 - 40));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, v10 + 120, a2 - 40);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            BOOL v54 = (void *)(v10 + 40);
            BOOL v56 = v10 == a2 || v54 == (void *)a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  long long v59 = v54;
                  double v60 = *(double *)(v58 + 48);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *v54;
                    long long v114 = *(_OWORD *)(v58 + 56);
                    uint64_t v122 = *(void *)(v58 + 72);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      uint64_t v63 = v10 + v62;
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      *(_OWORD *)(v63 + 40) = *(_OWORD *)(v10 + v62);
                      *(_OWORD *)(v63 + 56) = v64;
                      *(_WORD *)(v63 + 72) = *(_WORD *)(v10 + v62 + 32);
                      if (!v62) {
                        break;
                      }
                      v62 -= 40;
                      if (v60 >= *(double *)(v63 - 32))
                      {
                        uint64_t v65 = v10 + v62 + 40;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = v114;
                    *(_WORD *)(v65 + 32) = v122;
                  }
                  BOOL v54 = v59 + 5;
                  v57 += 40;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 5 != (void *)a2);
              }
            }
            else if (!v56)
            {
              do
              {
                int v98 = v54;
                double v99 = *(double *)(a1 + 48);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *v54;
                  long long v117 = *(_OWORD *)(a1 + 56);
                  uint64_t v125 = *(void *)(a1 + 72);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(_OWORD *)(v101 - 3);
                    *(_OWORD *)long long v101 = *(_OWORD *)(v101 - 5);
                    *((_OWORD *)v101 + 1) = v102;
                    *((_WORD *)v101 + 16) = *((_WORD *)v101 - 4);
                    double v103 = *((double *)v101 - 9);
                    v101 -= 5;
                  }
                  while (v99 < v103);
                  void *v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *((_WORD *)v101 + 16) = v125;
                  *((_OWORD *)v101 + 1) = v117;
                }
                v54 += 5;
                a1 = (unint64_t)v98;
              }
              while (v98 + 5 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 40 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v10 + 40 * v69 + 8) < *(double *)(v70 + 48))
                  {
                    v70 += 40;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  double v71 = *(double *)(v10 + 40 * v68 + 8);
                  if (*(double *)(v70 + 8) >= v71)
                  {
                    unint64_t v72 = v10 + 40 * v68;
                    uint64_t v73 = *(void *)v72;
                    uint64_t v123 = *(void *)(v72 + 32);
                    long long v115 = *(_OWORD *)(v72 + 16);
                    do
                    {
                      unint64_t v74 = v72;
                      unint64_t v72 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_WORD *)(v74 + 32) = *(_WORD *)(v70 + 32);
                      *(_OWORD *)unint64_t v74 = v75;
                      *(_OWORD *)(v74 + 16) = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 40 * v77;
                      uint64_t v78 = 2 * v69 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v10 + 40 * v77 + 8) < *(double *)(v70 + 48))
                      {
                        v70 += 40;
                        uint64_t v77 = v78;
                      }
                      uint64_t v69 = v77;
                    }
                    while (*(double *)(v70 + 8) >= v71);
                    *(void *)unint64_t v72 = v73;
                    *(double *)(v72 + 8) = v71;
                    *(_OWORD *)(v72 + 16) = v115;
                    *(_WORD *)(v72 + 32) = v123;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x28uLL;
              do
              {
                uint64_t v80 = 0;
                uint64_t v130 = *(void *)(v10 + 32);
                long long v116 = *(_OWORD *)v10;
                long long v124 = *(_OWORD *)(v10 + 16);
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = v81;
                  uint64_t v83 = v80 + 1;
                  v81 += 40 * (v80 + 1);
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v85 = v84 + 2;
                  if (v85 < v79 && *(double *)(v82 + 40 * v83 + 8) < *(double *)(v81 + 48))
                  {
                    v81 += 40;
                    uint64_t v80 = v85;
                  }
                  long long v86 = *(_OWORD *)v81;
                  long long v87 = *(_OWORD *)(v81 + 16);
                  *(_WORD *)(v82 + 32) = *(_WORD *)(v81 + 32);
                  *(_OWORD *)unint64_t v82 = v86;
                  *(_OWORD *)(v82 + 16) = v87;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 40;
                if (v81 == a2)
                {
                  *(_WORD *)(v81 + 32) = v130;
                  *(_OWORD *)unint64_t v81 = v116;
                  *(_OWORD *)(v81 + 16) = v124;
                }
                else
                {
                  long long v88 = *(_OWORD *)a2;
                  long long v89 = *(_OWORD *)(a2 + 16);
                  *(_WORD *)(v81 + 32) = *(_WORD *)(a2 + 32);
                  *(_OWORD *)unint64_t v81 = v88;
                  *(_OWORD *)(v81 + 16) = v89;
                  *(_WORD *)(a2 + 32) = v130;
                  *(_OWORD *)a2 = v116;
                  *(_OWORD *)(a2 + 16) = v124;
                  uint64_t v90 = v81 - v10 + 40;
                  if (v90 >= 41)
                  {
                    unint64_t v91 = (v90 / 0x28uLL - 2) >> 1;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v10 + 40 * v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      uint64_t v109 = *(void *)(v81 + 32);
                      long long v106 = *(_OWORD *)(v81 + 16);
                      do
                      {
                        unint64_t v94 = v81;
                        unint64_t v81 = v10 + 40 * v91;
                        long long v95 = *(_OWORD *)v81;
                        long long v96 = *(_OWORD *)(v81 + 16);
                        *(_WORD *)(v94 + 32) = *(_WORD *)(v81 + 32);
                        *(_OWORD *)unint64_t v94 = v95;
                        *(_OWORD *)(v94 + 16) = v96;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 40 * v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_WORD *)(v81 + 32) = v109;
                      *(_OWORD *)(v81 + 16) = v106;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40 * (v12 >> 1)), (double *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            uint64_t v16 = (double *)(a1 + 40 * v13 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40), v16, (double *)(a2 - 80));
            char v17 = (double *)(a1 + 40 + 8 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 80), v17, (double *)(a2 - 120));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v16, (double *)v14, v17);
            uint64_t v126 = *(void *)(a1 + 32);
            long long v110 = *(_OWORD *)a1;
            long long v118 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 16) = v19;
            *(_WORD *)(v14 + 32) = v126;
            *(_OWORD *)unint64_t v14 = v110;
            *(_OWORD *)(v14 + 16) = v118;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40 * (v12 >> 1)), (double *)a1, (double *)(a2 - 40));
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 32) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          long long v105 = *(_OWORD *)(a1 + 16);
          uint64_t v108 = *(void *)(a1 + 32);
          if (v20 >= *(double *)(a2 - 32))
          {
            unint64_t v41 = a1 + 40;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 40;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 40;
              double v40 = *(double *)(v39 + 48);
              v39 += 40;
            }
            while (v20 >= v40);
          }
          unint64_t v43 = a2;
          if (v10 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              unint64_t v43 = v44 - 40;
              double v45 = *(double *)(v44 - 32);
              v44 -= 40;
            }
            while (v20 < v45);
          }
          while (v10 < v43)
          {
            uint64_t v128 = *(void *)(v10 + 32);
            long long v112 = *(_OWORD *)v10;
            long long v120 = *(_OWORD *)(v10 + 16);
            long long v46 = *(_OWORD *)v43;
            long long v47 = *(_OWORD *)(v43 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v43 + 32);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(_WORD *)(v43 + 32) = v128;
            *(_OWORD *)unint64_t v43 = v112;
            *(_OWORD *)(v43 + 16) = v120;
            do
            {
              double v48 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *(double *)(v43 - 32);
              v43 -= 40;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 40);
            long long v51 = *(_OWORD *)(v10 - 24);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 40) = v38;
          *(double *)(v10 - 32) = v20;
          *(_WORD *)(v10 - 8) = v108;
          *(_OWORD *)(v10 - 24) = v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        long long v104 = *(_OWORD *)(a1 + 16);
        uint64_t v107 = *(void *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 48);
          v21 += 40;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        unint64_t v25 = a2;
        if (v21 == 40)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 40;
            double v29 = *(double *)(v28 - 32);
            v28 -= 40;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 40;
            double v27 = *(double *)(v25 - 32);
            v25 -= 40;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v127 = *(void *)(v10 + 32);
            long long v111 = *(_OWORD *)v10;
            long long v119 = *(_OWORD *)(v10 + 16);
            long long v31 = *(_OWORD *)v30;
            long long v32 = *(_OWORD *)(v30 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v30 + 32);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(_WORD *)(v30 + 32) = v127;
            *(_OWORD *)unint64_t v30 = v111;
            *(_OWORD *)(v30 + 16) = v119;
            do
            {
              double v33 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v33 < v20);
            do
            {
              double v34 = *(double *)(v30 - 32);
              v30 -= 40;
            }
            while (v34 >= v20);
          }
          while (v10 < v30);
        }
        if (v10 - 40 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 40);
          long long v36 = *(_OWORD *)(v10 - 24);
          *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 40) = v22;
        *(double *)(v10 - 32) = v20;
        *(_WORD *)(v10 - 8) = v107;
        *(_OWORD *)(v10 - 24) = v104;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 40;
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        __int16 v9 = *(_WORD *)(a2 - 8);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      uint64_t v16 = *(void *)v12;
      long long v21 = *(_OWORD *)(v12 + 16);
      uint64_t v22 = *(void *)(v12 + 32);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(void *)uint64_t v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(void *a1, uint64_t a2)
{
  id v3 = (void *)a1[5];
  uint64_t v4 = a1[6];
  BOOL v5 = (void *)a1[4];
  uint64_t v6 = [v5 dateInterval];
  void v9[4] = v4;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  uint64_t v7 = [v3 collectionCalculator:v5 queryForInterval:v6 error:a2 sampleHandler:v10 mergeHandler:v9];

  return v7;
}

void sub_1BD1366E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10 = *(void *)(a1 + 32);
  *(double *)int v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  char v15 = 1;
  uint64_t v11 = [MEMORY[0x1E4F1C9C8] distantFuture];
  [v11 timeIntervalSinceReferenceDate];
  BOOL v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1BD13678C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
}

void HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::archive(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F171B978;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  statistics::Statistics::makePrimaryStatistics(a1);
  HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>::archive((uint64_t)&v3, (HDStatisticsPercentiles *)(a2 + 8));
}

void sub_1BD136814()
{
  statistics::Statistics::operator=(*(statistics **)(v0 + 128), (uint64_t)v4);
  statistics::Statistics::~Statistics((statistics::Statistics *)v4);
  uint64_t v3 = *v1;
  *(_DWORD *)(v0 + 204) |= 0x100u;
  *(void *)(v0 + 136) = v3;
  statistics::Statistics::makeMostRecentDatum(v0);
  v4[0] = &unk_1F17206F8;
  int v8 = 127;
  int8x16_t v5 = vextq_s8(*(int8x16_t *)(v1 + 30), *(int8x16_t *)(v1 + 30), 8uLL);
  v4[1] = *((void *)v1 + 17);
  v4[2] = *((void *)v1 + 18);
  __int16 v6 = 0;
  char v7 = 0;
  statistics::RawQuantitySample::operator=(*v2, (uint64_t)v4);
  PB::Base::~Base((PB::Base *)v4);
}

void sub_1BD1368BC(_Unwind_Exception *a1)
{
  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

void HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>::archive(uint64_t a1, HDStatisticsPercentiles *a2)
{
  *(void *)a1 = &unk_1F171B978;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = 0;
  statistics::Statistics::makePrimaryStatistics(a1);
  HDStatisticsPercentiles::archive(a2);
}

void sub_1BD136944()
{
  statistics::Statistics::operator=(*(statistics **)(v0 + 128), (uint64_t)v3);
  statistics::Statistics::~Statistics((statistics::Statistics *)v3);
  statistics::Statistics::makeAuxiliaryStatistics(v0);
  HDStatisticsTimeInterval::archive((HDStatisticsTimeInterval *)(v1 + 72), (uint64_t)v3);
  statistics::Statistics::operator=(*v2, (uint64_t)v3);
  statistics::Statistics::~Statistics((statistics::Statistics *)v3);
}

void sub_1BD136994(_Unwind_Exception *a1)
{
  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::unarchive(uint64_t a1, void *a2)
{
  *(_DWORD *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_WORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 138) = 0u;
  int8x16_t v5 = (const statistics::Statistics *)a2[16];
  if (v5)
  {
    HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>::unarchive((uint64_t)&v13, v5);
    uint64_t v6 = v19;
    uint64_t v7 = v15;
    uint64_t v8 = v14;
    *(_OWORD *)(a1 + 8) = v13;
    *(void *)(a1 + 24) = v8;
    uint64_t v14 = 0;
    long long v13 = 0uLL;
    *(void *)(a1 + 32) = v7;
    long long v9 = v17;
    *(_OWORD *)(a1 + 40) = v16;
    *(_OWORD *)(a1 + 56) = v9;
    *(_WORD *)(a1 + 72) = v18;
    *(void *)(a1 + 80) = v6;
    double result = v22;
    uint64_t v10 = v21;
    *(_OWORD *)(a1 + 88) = v20;
    *(void *)(a1 + 104) = v10;
    *(double *)(a1 + 112) = result;
  }
  *(_DWORD *)a1 = a2[17];
  uint64_t v11 = a2[14];
  if (v11)
  {
    double result = *(double *)(v11 + 8);
    uint64_t v12 = *(void *)(v11 + 16);
    *(int8x16_t *)(a1 + 120) = vextq_s8(*(int8x16_t *)(v11 + 24), *(int8x16_t *)(v11 + 24), 8uLL);
    *(double *)(a1 + 136) = result;
    *(void *)(a1 + 144) = v12;
    *(_WORD *)(a1 + 152) = 1;
  }
  return result;
}

void sub_1BD136A9C(_Unwind_Exception *a1)
{
  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::~HDStatisticsRelative(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>::unarchive(uint64_t a1, const statistics::Statistics *a2)
{
  *(_WORD *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 104) = 0;
  uint64_t v4 = (HDStatisticsPercentiles *)*((void *)a2 + 16);
  if (v4) {
    HDStatisticsPercentiles::unarchive(v4, a2);
  }
  int8x16_t v5 = (HDStatisticsTimeInterval *)*((void *)a2 + 1);
  if (v5)
  {
    HDStatisticsTimeInterval::unarchive(v5, (uint64_t)&v7);
    *(void *)(a1 + 72) = v7;
    double result = *(double *)&v10;
    uint64_t v6 = v9;
    *(_OWORD *)(a1 + 80) = v8;
    *(void *)(a1 + 96) = v6;
    *(double *)(a1 + 104) = result;
  }
  return result;
}

void sub_1BD136B60(_Unwind_Exception *a1)
{
  HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>::~HDStatisticsCombined(v1);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6 = a3;
  uint64_t v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = &unk_1F1725960;
  double v9 = 900.0;
  if ((v6 & 0x10) == 0) {
    double v9 = 0.0;
  }
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(void *)(v8 + 104) = 0;
  *(void *)(v8 + 112) = 0;
  *(void *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_WORD *)(a1 + 592) = 1;
  *(unsigned char *)(a1 + 594) = 0;
  *(unsigned char *)(a1 + 596) = 0;
  *(void *)(a1 + 600) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(void *)(a1 + 640) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);

  JUMPOUT(0x1C187B8A0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1F1725960;
  unint64_t v2 = *(void **)(a1 + 624);
  if (v2)
  {
    *(void *)(a1 + 632) = v2;
    operator delete(v2);
  }

  uint64_t v3 = *(void **)(a1 + 560);
  if (v3)
  {
    *(void *)(a1 + 568) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(unsigned char *)(result + 592) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::setDateInterval(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 copy];
  uint64_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;

  int8x16_t v5 = [v6 startDate];
  [v5 timeIntervalSinceReferenceDate];
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
}

void sub_1BD136D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(void *)(a1 + 40))
  {
    id v5 = v3;
    [v3 timeIntervalSinceReferenceDate];
    *(void *)(a1 + 600) = v4;
    id v3 = v5;
  }
}

void sub_1BD136D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::setStatisticsConfiguration(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(a1 + 608), a2);
  id v7 = a2;
  id v4 = *(id *)(a1 + 608);
  id v5 = *(void **)(a1 + 584);
  *(void *)(a1 + 584) = v4;
  id v6 = v4;

  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::setStatisticsConfiguration(a1 + 120, *(void **)(a1 + 584));
}

void sub_1BD136E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (*(void *)(a1 + 40)) {
    return 1;
  }
  id v7 = *(char **)a2;
  uint64_t v8 = *(void *)(a2 + 8);
  BOOL v9 = *(void *)(a1 + 224) == *(void *)(a1 + 216) && (uint64_t)(*(void *)(a1 + 248) - *(void *)(a1 + 240)) < 1
    || HKIntervalMask<double>::firstDifference(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)a2, *(void *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), v7, v8, (v8 - (uint64_t)v7) >> 4);
  }
  if (v9) {
    return 1;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128);

  return v11(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 copy];
  id v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v3;
}

void sub_1BD136F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::dataSource(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));

  return WeakRetained;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::currentStatistics(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 592))
  {
    uint64_t v1 = 0;
  }
  else
  {
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_updateSourceOrder((uint64_t)v4);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_mergeThroughTime((uint64_t)v4, v5);
    uint64_t v1 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v4);
  }

  return v1;
}

void sub_1BD137068(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(a1 + 64);
  id v7 = v6;
  if (v6)
  {
    uint64_t v8 = [v6 startDate];
    [v8 timeIntervalSinceReferenceDate];
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    long long v10 = [v7 endDate];
    [v10 timeIntervalSinceReferenceDate];
    double v12 = v11;
    double v13 = *(double *)(a2 + 8);

    if (v12 < v13) {
      goto LABEL_9;
    }
  }
  if (!*(unsigned char *)(a1 + 594))
  {
LABEL_11:
    uint64_t v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 593))
  {
LABEL_9:
    uint64_t v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(unsigned char *)(a1 + 595)) {
      goto LABEL_11;
    }
    unint64_t v17 = *(void *)(a1 + 632);
    unint64_t v18 = *(void *)(a1 + 640);
    if (v17 >= v18)
    {
      uint64_t v22 = *(void *)(a1 + 624);
      unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      unint64_t v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24) {
        unint64_t v24 = 2 * v25;
      }
      if (v25 >= 0x333333333333333) {
        unint64_t v26 = 0x666666666666666;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26) {
        unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      }
      else {
        uint64_t v27 = 0;
      }
      unint64_t v28 = v26 + 40 * v23;
      unint64_t v29 = v26 + 40 * v27;
      long long v30 = *(_OWORD *)a2;
      long long v31 = *(_OWORD *)(a2 + 16);
      *(void *)(v28 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      unint64_t v21 = v28 + 40;
      long long v32 = *(char **)(a1 + 632);
      double v33 = *(char **)(a1 + 624);
      if (v32 != v33)
      {
        do
        {
          long long v34 = *(_OWORD *)(v32 - 40);
          long long v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        long long v32 = *(char **)(a1 + 624);
      }
      *(void *)(a1 + 624) = v28;
      *(void *)(a1 + 632) = v21;
      *(void *)(a1 + 640) = v29;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      long long v19 = *(_OWORD *)a2;
      long long v20 = *(_OWORD *)(a2 + 16);
      *(void *)(v17 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      unint64_t v21 = v17 + 40;
    }
    *(void *)(a1 + 632) = v21;
    goto LABEL_9;
  }
  uint64_t v14 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
  uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1BD1372D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = v5;
  if (*(unsigned char *)(a1 + 594))
  {
    uint64_t v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 594) = 1;
  uint64_t v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    uint64_t v7 = 0;
    goto LABEL_82;
  }
  uint64_t v65 = v6;
  if (*(unsigned char *)(a1 + 593)) {
    goto LABEL_5;
  }
  double v9 = *(void **)(a1 + 616);
  if (!v9)
  {
    id v68 = 0;
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 40))
  {
LABEL_5:
    int v8 = 0;
    id v68 = 0;
    goto LABEL_29;
  }
  [v9 sortUsingComparator:&__block_literal_global_987];
  id v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v10 = *(id *)(a1 + 616);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  if (!v11)
  {

    id v12 = 0;
    goto LABEL_27;
  }
  id v12 = 0;
  uint64_t v13 = *(void *)v70;
  do
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (*(void *)v70 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(id *)(*((void *)&v69 + 1) + 8 * i);
      long long v16 = v15;
      if (v12)
      {
        unint64_t v17 = [v15 startDate];
        unint64_t v18 = [v12 endDate];
        int v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          long long v20 = [v16 endDate];
          unint64_t v21 = [v12 endDate];
          int v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22) {
            goto LABEL_21;
          }
          id v23 = objc_alloc(MEMORY[0x1E4F28C18]);
          unint64_t v24 = [v12 startDate];
          unint64_t v25 = [v16 endDate];
          id v26 = (id)[v23 initWithStartDate:v24 endDate:v25];
        }
        else
        {
          [v68 addObject:v12];
          id v26 = v16;
        }
        id v12 = v26;
      }
      else
      {
        id v12 = v15;
      }
LABEL_21:
    }
    uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  }
  while (v11);

  if (v12) {
    [v68 addObject:v12];
  }
LABEL_27:

LABEL_28:
  int v8 = 1;
LABEL_29:
  uint64_t v27 = *(void **)(a1 + 616);
  *(void *)(a1 + 616) = 0;

  *(unsigned char *)(a1 + 593) = 0;
  if (!v8)
  {
    unint64_t v38 = *(void *)(a1 + 624);
    *(void *)(a1 + 640) = 0;
    *(void *)(a1 + 632) = 0;
    *(void *)(a1 + 624) = 0;
    unint64_t v39 = v38;
    goto LABEL_47;
  }
  unint64_t v28 = [v68 lastObject];
  if (v28)
  {
    unint64_t v29 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_currentBucketInterval(a1);
    long long v30 = [v29 endDate];
    long long v31 = [v28 endDate];
    int v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      double v33 = [v28 endDate];
      [v33 timeIntervalSinceReferenceDate];
      double v35 = v34;

      uint64_t v36 = *(void *)(a1 + 624);
      BOOL v37 = *(long long **)(a1 + 632);
      while ((long long *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((long long *)v36 != v37)
          {
            double v40 = (long long *)(v36 + 40);
            if ((long long *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  long long v41 = *v40;
                  long long v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)uint64_t v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                double v40 = (long long *)((char *)v40 + 40);
              }
              while (v40 != v37);
              BOOL v37 = *(long long **)(a1 + 632);
            }
          }
          if ((long long *)v36 != v37) {
            *(void *)(a1 + 632) = v36;
          }
          break;
        }
        v36 += 40;
      }
    }
  }
  unint64_t v38 = *(void *)(a1 + 624);
  unint64_t v39 = *(void *)(a1 + 632);
  *(void *)(a1 + 640) = 0;
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 632) = 0;
  if (![v68 count]) {
    goto LABEL_60;
  }
LABEL_47:
  id v43 = v68;
  long long __p = (void *)v38;
  if (v43)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v44 = v43;
    uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v70;
      while (2)
      {
        for (uint64_t j = 0; j != v45; ++j)
        {
          if (*(void *)v70 != v46) {
            objc_enumerationMutation(v44);
          }
          id v48 = *(id *)(*((void *)&v69 + 1) + 8 * j);
          int v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval((id *)a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
        if (v45) {
          continue;
        }
        break;
      }
    }

LABEL_59:
    unint64_t v38 = (unint64_t)__p;
LABEL_60:
    unint64_t v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v51;
    }
    int v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    long long __p = (void *)v38;
    if (v39 != v38)
    {
      uint64_t v54 = v38;
      uint64_t v50 = v67;
      do
      {
        int v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_primitiveAddSample(a1, v54, 1, v50);
        int v53 = v55;
        v54 += 40;
        if (v54 == v39) {
          char v56 = 0;
        }
        else {
          char v56 = v55;
        }
        uint64_t v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval((id *)a1, 0, v67))goto LABEL_59; {
LABEL_70:
    }
    int v53 = 0;
  }
  if (*(void *)(a1 + 40) && *(void *)(a1 + 568) != *(void *)(a1 + 560))
  {
    do
    {
      uint64_t v57 = objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(void *)(a1 + 112) + 1, v50, v65);
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      unint64_t v58 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, a1 + 120);
      long long v59 = [v57 startDate];
      [v59 timeIntervalSinceReferenceDate];
      double v61 = v60;
      uint64_t v62 = [v57 endDate];
      [v62 timeIntervalSinceReferenceDate];
      HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
    }
    while (*(void *)(a1 + 568) != *(void *)(a1 + 560));
  }
  *(unsigned char *)(a1 + 594) = 0;
  if (__p) {
    operator delete(__p);
  }

  if (v53)
  {
    if (*(unsigned char *)(a1 + 596))
    {
      *(unsigned char *)(a1 + 596) = 0;
      id v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
      uint64_t v7 = 1;
      goto LABEL_82;
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v6 = v65;
LABEL_82:
  *(unsigned char *)(a1 + 594) = 0;
LABEL_83:

  return v7;
}

void sub_1BD1379DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    *(unsigned char *)(v13 + 594) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(unsigned char *)(result + 595) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(unsigned char *)(a1 + 594)) {
      goto LABEL_12;
    }
    uint64_t v7 = 0;
LABEL_14:
    uint64_t v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval((id *)a1, v7, a3);
    goto LABEL_15;
  }
  uint64_t v7 = [v6 dateIntervalForIntervalsContainingInterval:v5];

  if (!*(unsigned char *)(a1 + 594)) {
    goto LABEL_14;
  }
  if (!v7)
  {
LABEL_12:
    id v12 = *(void **)(a1 + 616);
    *(void *)(a1 + 616) = 0;

    uint64_t v7 = 0;
    uint64_t v11 = 1;
    *(unsigned char *)(a1 + 593) = 1;
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 593))
  {
    int v8 = *(void **)(a1 + 616);
    if (!v8)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      id v10 = *(void **)(a1 + 616);
      *(void *)(a1 + 616) = v9;

      int v8 = *(void **)(a1 + 616);
    }
    [v8 addObject:v7];
  }
  uint64_t v11 = 1;
LABEL_15:

  return v11;
}

void sub_1BD137CDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    *(unsigned char *)(a1 + 592) = 1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v9[3] = &unk_1E63043E8;
    uint64_t v12 = a1;
    id v10 = v5;
    id v11 = WeakRetained;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 112))(a1, v9, a3);
    if (v7 && *(unsigned char *)(a1 + 592) && !*(void *)(a1 + 40)) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to query for initial statistics: no data source available.");
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1BD137E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::reset(uint64_t result)
{
  *(unsigned char *)(result + 592) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 encodeBool:*(unsigned __int8 *)(a1 + 592) forKey:@"needs_config"];
  v3;
  v27[0] = &unk_1F1726FA0;
  v27[1] = 0;
  int v28 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
  LOBYTE(v28) = 1;
  v27[2] = v4;
  memset(&v27[3], 0, 24);
  statistics::StatisticsEngine::makeCurrentBucket((uint64_t)v27);
  int v8 = &unk_1F171B9C8;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = 0;
  int v26 = 511;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v22 = 0;
  int8x16_t v9 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  uint64_t v5 = *(void *)(a1 + 136);
  char v24 = *(unsigned char *)(a1 + 144);
  char v25 = *(unsigned char *)(a1 + 145);
  BOOL v23 = *(_DWORD *)(a1 + 148) == 0;
  int8x16_t v10 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v14 = v5;
  uint64_t v15 = v6;
  uint64_t v7 = *(int8x16_t **)(a1 + 216);
  if (v7 != *(int8x16_t **)(a1 + 224))
  {
    v29[0] = &unk_1F17206F8;
    int v34 = 127;
    int8x16_t v30 = vextq_s8(*v7, *v7, 8uLL);
    v29[1] = v7[1].i64[0];
    v29[2] = v7[1].i64[1];
    char v33 = 0;
    __int8 v32 = v7[2].i8[9];
    __int8 v31 = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>();
  }
  statistics::StatisticsBucket::makeStatistics((uint64_t)&v8);
  HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>::archive((uint64_t)v29, (HDStatisticsPercentiles *)(a1 + 240));
}

void sub_1BD138230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v59 = a2;
  *(unsigned char *)(a1 + 592) = [v59 decodeBoolForKey:@"needs_config"];
  id v3 = v59;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)&v63.n128_i64[1], 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)long long v64 = 0u;
  long long v65 = 0u;
  unint64_t v102 = 0;
  id v62 = v3;
  PB::Reader::Reader((PB::Reader *)v101, (const unsigned __int8 *)[v62 decodeBytesForKey:@"hdsce_archived_representation" returnedLength:&v102]);
  uint64_t v61 = a1;
  unint64_t v94 = &unk_1F1726FA0;
  uint64_t v95 = 0;
  uint64_t v99 = 0;
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  int v100 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v94, (PB::Reader *)v101);
  v63.n128_u64[0] = v96;
  if (v95)
  {
    uint64_t v70 = 0;
    memset(v73, 0, sizeof(v73));
    memset(&v75[10], 0, 32);
    uint64_t v79 = 0;
    uint64_t v78 = 0;
    *(_OWORD *)long long __p = 0u;
    memset(v75, 0, 74);
    uint64_t v76 = 0;
    uint64_t v77 = &v78;
    long long v80 = 0u;
    long long v81 = 0u;
    int v82 = 1065353216;
    long long v83 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    uint64_t v86 = 0;
    int v87 = 1065353216;
    long long v88 = 0u;
    long long v89 = 0u;
    int v90 = 1065353216;
    long long v91 = 0u;
    long long v92 = 0u;
    int v93 = 1065353216;
    int8x16_t v66 = vextq_s8(*(int8x16_t *)(v95 + 8), *(int8x16_t *)(v95 + 8), 8uLL);
    uint64_t v4 = *(void *)(v95 + 72);
    uint64_t v67 = *(void *)(v95 + 64);
    char v68 = *(unsigned char *)(v95 + 185);
    char v69 = *(unsigned char *)(v95 + 186);
    int8x16_t v71 = vextq_s8(*(int8x16_t *)(v95 + 24), *(int8x16_t *)(v95 + 24), 8uLL);
    uint64_t v72 = v4;
    uint64_t v5 = *(void *)(v95 + 80);
    uint64_t v6 = *(void *)(v95 + 88);
    double v60 = (void *)v95;
    if (v5 != v6)
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(*(void *)v5 + 24);
        uint64_t v9 = *(void *)(*(void *)v5 + 32);
        uint64_t v10 = *(void *)(*(void *)v5 + 8);
        uint64_t v11 = *(void *)(*(void *)v5 + 16);
        char v12 = *(unsigned char *)(*(void *)v5 + 41);
        char v13 = *(unsigned char *)(*(void *)v5 + 40);
        if (v7 >= v75[0])
        {
          uint64_t v14 = (char *)__p[0];
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (char *)__p[0]) >> 4);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)v75[0] - (char *)__p[0]) >> 4) > v16) {
            unint64_t v16 = 0x5555555555555556 * (((char *)v75[0] - (char *)__p[0]) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v75[0] - (char *)__p[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v17 = 0x555555555555555;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17)
          {
            unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            uint64_t v7 = (char *)__p[1];
            uint64_t v14 = (char *)__p[0];
          }
          else
          {
            uint64_t v18 = 0;
          }
          unint64_t v19 = v17 + 48 * v15;
          *(void *)unint64_t v19 = v9;
          *(void *)(v19 + 8) = v8;
          *(void *)(v19 + 16) = v10;
          *(void *)(v19 + 24) = v11;
          *(_WORD *)(v19 + 32) = 1;
          *(unsigned char *)(v19 + 40) = 0;
          *(unsigned char *)(v19 + 41) = v12;
          *(unsigned char *)(v19 + 42) = v13;
          long long v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              long long v21 = *((_OWORD *)v7 - 3);
              long long v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            uint64_t v14 = (char *)__p[0];
          }
          uint64_t v7 = (char *)(v19 + 48);
          __p[0] = v20;
          __p[1] = (void *)(v19 + 48);
          v75[0] = (void *)(v17 + 48 * v18);
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)uint64_t v7 = v9;
          *((void *)v7 + 1) = v8;
          *((void *)v7 + 2) = v10;
          *((void *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        __p[1] = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    BOOL v23 = (const statistics::Statistics *)v60[13];
    if (v23)
    {
      HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>::unarchive((uint64_t)v103, v23);
      if (v75[1])
      {
        v75[2] = v75[1];
        operator delete(v75[1]);
      }
      *(_OWORD *)&v75[1] = *(_OWORD *)v103;
      uint64_t v75[4] = v105;
      *(_OWORD *)&v75[5] = v106;
      v75[3] = v104;
      long long v104 = 0;
      v103[1] = 0;
      v103[0] = 0;
      *(_OWORD *)&v75[7] = v107;
      LOWORD(v75[9]) = v108;
      v75[10] = v109;
      char v24 = v75[11];
      if (v75[11])
      {
        v75[12] = v75[11];
        operator delete(v75[11]);
        char v24 = v103[0];
      }
      *(_OWORD *)&v75[11] = v110;
      v75[13] = v111;
      long long v111 = 0;
      long long v110 = 0uLL;
      uint64_t v76 = v112;
      if (v24)
      {
        v103[1] = v24;
        operator delete(v24);
      }
    }
    int v26 = (const statistics::Statistics **)v60[17];
    for (uint64_t i = (const statistics::Statistics **)v60[18]; v26 != i; ++v26)
    {
      uint64_t v27 = *v26;
      HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>::unarchive((uint64_t)v103, *v26);
      uint64_t v28 = *((void *)v27 + 18);
      unint64_t v29 = v78;
      int8x16_t v30 = &v78;
      __int8 v31 = &v78;
      if (v78)
      {
        do
        {
          while (1)
          {
            __int8 v31 = (uint64_t **)v29;
            uint64_t v32 = v29[4];
            if (v32 <= v28) {
              break;
            }
            unint64_t v29 = *v31;
            int8x16_t v30 = v31;
            if (!*v31) {
              goto LABEL_37;
            }
          }
          if (v32 >= v28)
          {
            int v34 = (char *)v31;
            goto LABEL_40;
          }
          unint64_t v29 = v31[1];
        }
        while (v29);
        int8x16_t v30 = v31 + 1;
      }
LABEL_37:
      int v34 = (char *)operator new(0x98uLL);
      v113[1] = &v78;
      *((void *)v34 + 4) = v28;
      *(_OWORD *)(v34 + 40) = 0u;
      *(_OWORD *)(v34 + 56) = 0u;
      *(_OWORD *)(v34 + 72) = 0u;
      *(_OWORD *)(v34 + 88) = 0u;
      *(_OWORD *)(v34 + 104) = 0u;
      *(_OWORD *)(v34 + 120) = 0u;
      *(_OWORD *)(v34 + 136) = 0u;
      char v114 = 1;
      *(void *)int v34 = 0;
      *((void *)v34 + 1) = 0;
      *((void *)v34 + 2) = v31;
      *int8x16_t v30 = (uint64_t *)v34;
      char v33 = (uint64_t *)v34;
      if (*v77)
      {
        uint64_t v77 = (uint64_t **)*v77;
        char v33 = *v30;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v78, v33);
      ++v79;
      v113[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v113);
LABEL_40:
      double v35 = (void *)*((void *)v34 + 5);
      if (v35)
      {
        *((void *)v34 + 6) = v35;
        operator delete(v35);
        *((void *)v34 + 5) = 0;
        *((void *)v34 + 6) = 0;
        *((void *)v34 + 7) = 0;
      }
      *(_OWORD *)(v34 + 40) = *(_OWORD *)v103;
      *((void *)v34 + 7) = v104;
      *((void *)v34 + 8) = v105;
      long long v36 = v107;
      *(_OWORD *)(v34 + 72) = v106;
      long long v104 = 0;
      v103[1] = 0;
      v103[0] = 0;
      *(_OWORD *)(v34 + 88) = v36;
      *((_WORD *)v34 + 52) = v108;
      *((void *)v34 + 14) = v109;
      BOOL v37 = (void *)*((void *)v34 + 15);
      if (v37)
      {
        *((void *)v34 + 16) = v37;
        operator delete(v37);
        *((void *)v34 + 15) = 0;
        *((void *)v34 + 16) = 0;
        *((void *)v34 + 17) = 0;
        BOOL v37 = v103[0];
      }
      *(_OWORD *)(v34 + 120) = v110;
      *((void *)v34 + 17) = v111;
      long long v111 = 0;
      long long v110 = 0uLL;
      *((void *)v34 + 18) = v112;
      if (v37)
      {
        v103[1] = v37;
        operator delete(v37);
      }
    }
    uint64_t v38 = v60[5];
    for (uint64_t j = v60[6]; v38 != j; v38 += 8)
    {
      double v41 = *(double *)(*(void *)v38 + 8);
      double v40 = *(double *)(*(void *)v38 + 16);
      if (v41 >= v40) {
        double v42 = *(double *)(*(void *)v38 + 16);
      }
      else {
        double v42 = *(double *)(*(void *)v38 + 8);
      }
      if (v40 < v41) {
        double v40 = *(double *)(*(void *)v38 + 8);
      }
      HKIntervalMask<double>::_insertInterval(v73, v42, v40);
    }
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::operator=((uint64_t)&v63.n128_i64[1], (uint64_t)&v66);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v66);
  }
  uint64_t v43 = v97;
  uint64_t v44 = v98;
  if (v97 != v98)
  {
    uint64_t v45 = (char *)v64[1];
    do
    {
      uint64_t v46 = *(void *)(*(void *)v43 + 24);
      uint64_t v47 = *(void *)(*(void *)v43 + 32);
      uint64_t v48 = *(void *)(*(void *)v43 + 8);
      uint64_t v49 = *(void *)(*(void *)v43 + 16);
      if ((unint64_t)v45 >= (unint64_t)v65)
      {
        uint64_t v50 = (char *)v64[0];
        unint64_t v51 = 0xCCCCCCCCCCCCCCCDLL * ((v45 - (char *)v64[0]) >> 3);
        unint64_t v52 = v51 + 1;
        if (v51 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(v65 - (unint64_t)v64[0]) >> 3) > v52) {
          unint64_t v52 = 0x999999999999999ALL * ((uint64_t)(v65 - (unint64_t)v64[0]) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v65 - (unint64_t)v64[0]) >> 3) >= 0x333333333333333) {
          unint64_t v53 = 0x666666666666666;
        }
        else {
          unint64_t v53 = v52;
        }
        if (v53)
        {
          unint64_t v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v53);
          uint64_t v50 = (char *)v64[0];
          uint64_t v45 = (char *)v64[1];
        }
        else
        {
          uint64_t v54 = 0;
        }
        unint64_t v55 = v53 + 40 * v51;
        *(void *)unint64_t v55 = v47;
        *(void *)(v55 + 8) = v46;
        *(void *)(v55 + 16) = v48;
        *(void *)(v55 + 24) = v49;
        *(_WORD *)(v55 + 32) = 1;
        char v56 = (char *)v55;
        if (v45 != v50)
        {
          do
          {
            long long v57 = *(_OWORD *)(v45 - 40);
            long long v58 = *(_OWORD *)(v45 - 24);
            *((_WORD *)v56 - 4) = *((_WORD *)v45 - 4);
            *(_OWORD *)(v56 - 24) = v58;
            *(_OWORD *)(v56 - 40) = v57;
            v56 -= 40;
            v45 -= 40;
          }
          while (v45 != v50);
          uint64_t v50 = (char *)v64[0];
        }
        uint64_t v45 = (char *)(v55 + 40);
        v64[0] = v56;
        v64[1] = (void *)(v55 + 40);
        *(void *)&long long v65 = v53 + 40 * v54;
        if (v50) {
          operator delete(v50);
        }
      }
      else
      {
        *(void *)uint64_t v45 = v47;
        *((void *)v45 + 1) = v46;
        *((void *)v45 + 2) = v48;
        *((void *)v45 + 3) = v49;
        *((_WORD *)v45 + 16) = 1;
        v45 += 40;
      }
      v64[1] = v45;
      v43 += 8;
    }
    while (v43 != v44);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v94);

  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::operator=((void *)(v61 + 112), &v63);
  if (v64[0])
  {
    v64[1] = v64[0];
    operator delete(v64[0]);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v63.n128_i64[1]);
}

void sub_1BD138A34(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table((uint64_t)&STACK[0x3A0]);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a2);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x350]);
  uint64_t v8 = (void *)STACK[0x338];
  if (STACK[0x338])
  {
    STACK[0x340] = (unint64_t)v8;
    operator delete(v8);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x310]);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>::destroy((void *)STACK[0x300]);
  HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>::~HDStatisticsCombined((uint64_t)&STACK[0x288]);
  uint64_t v9 = (void *)STACK[0x270];
  if (STACK[0x270])
  {
    STACK[0x278] = (unint64_t)v9;
    operator delete(v9);
  }
  objc_destroyWeak((id *)&STACK[0x268]);
  uint64_t v10 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v10;
    operator delete(v10);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x3D0]);
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 256;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 170) = 0u;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = a1 + 240;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_DWORD *)(a1 + 288) = 1065353216;
  *(void *)(a1 + 344) = 0;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_DWORD *)(a1 + 352) = 1065353216;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_DWORD *)(a1 + 392) = 1065353216;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_DWORD *)(a1 + 432) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 448);
  if (v2)
  {
    *(void *)(a1 + 456) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::~HDStatisticsBucket(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 400);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 360);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 320);
  unint64_t v2 = *(void **)(a1 + 296);
  if (v2)
  {
    *(void *)(a1 + 304) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 256);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>::destroy(*(void **)(a1 + 240));
  id v3 = *(void **)(a1 + 200);
  if (v3)
  {
    *(void *)(a1 + 208) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 120);
  if (v4)
  {
    *(void *)(a1 + 128) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 96);
  if (v5)
  {
    *(void *)(a1 + 104) = v5;
    operator delete(v5);
  }
  objc_destroyWeak((id *)(a1 + 88));
  uint64_t v6 = *(void **)(a1 + 64);
  if (v6)
  {
    *(void *)(a1 + 72) = v6;
    operator delete(v6);
  }

  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<long long const,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,0>(a1 + 4);
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<long long const,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,0>(void *a1)
{
  unint64_t v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  id v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_configureForStartTime(uint64_t a1)
{
  unint64_t v27 = 0;
  unint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
    uint64_t v4 = [v2 dateIntervalContainingDate:v3 index:&v27];

    uint64_t v5 = [v4 startDate];
    [v5 timeIntervalSinceReferenceDate];
    double v7 = v6;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
LABEL_5:
    double v13 = v9;

    goto LABEL_6;
  }
  id v10 = *(id *)(a1 + 64);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v11 = [v10 startDate];
    [v11 timeIntervalSinceReferenceDate];
    double v7 = v12;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
    goto LABEL_5;
  }
  double v7 = -1.79769313e308;
  double v13 = 1.79769313e308;
LABEL_6:

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v21, WeakRetained, v7, v13);

  if (*(void *)(a1 + 32) == 1) {
    char v23 = 1;
  }
  uint64_t v22 = *(void *)(a1 + 56);
  char v24 = *(unsigned char *)(a1 + 24) & 1;
  if (v26 != (char *)(a1 + 72)) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v26, *(char **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::setStatisticsConfiguration((uint64_t)v21, *(void **)(a1 + 608));
  if (!*(void *)(a1 + 40)) {
    int v25 = 0;
  }
  unint64_t v15 = v27;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v21);
  v18.n128_u64[0] = v15;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)&v18.n128_i64[1], (uint64_t)v17);
  long long __p = 0u;
  long long v20 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::operator=((void *)(a1 + 112), &v18);

  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v18.n128_i64[1]);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v17);
  *(unsigned char *)(a1 + 592) = 0;
  return HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v21);
}

void sub_1BD139030(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::setStatisticsConfiguration(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(a1 + 32), a2);
  uint64_t v4 = a2;
  HDStatisticsPercentiles::configure((HDStatisticsPercentiles *)(a1 + 120), v4);
}

void sub_1BD1390E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::operator=(void *a1, __n128 *a2)
{
  *a1 = a2->n128_u64[0];
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::operator=((uint64_t)(a1 + 1), (uint64_t)&a2->n128_i64[1]);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 56), a2 + 28);
  unint64_t v4 = a2[29].n128_u64[1];
  a2[29].n128_u64[1] = 0;
  uint64_t v5 = (void *)a1[59];
  a1[59] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 96);
  double v7 = *(unsigned char **)(a2 + 104);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(void *)(a1 + 96) = v10;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(void *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)(a1 + 120), *(const void **)(a2 + 120), *(void *)(a2 + 128), (uint64_t)(*(void *)(a2 + 128) - *(void *)(a2 + 120)) >> 3);
  long long v12 = *(_OWORD *)(a2 + 144);
  long long v13 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 170) = *(_OWORD *)(a2 + 170);
  *(_OWORD *)(a1 + 144) = v12;
  *(_OWORD *)(a1 + 160) = v13;
  uint64_t v14 = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 192) = v14;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 200), *(const void **)(a2 + 200), *(void *)(a2 + 208), (uint64_t)(*(void *)(a2 + 208) - *(void *)(a2 + 200)) >> 4);
  uint64_t v15 = *(void *)(a2 + 224);
  *(void *)(a1 + 240) = 0;
  unint64_t v16 = (uint64_t **)(a1 + 240);
  *(void *)(a1 + 224) = v15;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 232) = a1 + 240;
  unint64_t v17 = *(void **)(a2 + 232);
  if (v17 != (void *)(a2 + 240))
  {
    do
    {
      __n128 v18 = *v16;
      unint64_t v19 = (uint64_t *)(a1 + 240);
      if (*(uint64_t ***)(a1 + 232) == v16) {
        goto LABEL_11;
      }
      long long v20 = *v16;
      long long v21 = (uint64_t *)(a1 + 240);
      if (v18)
      {
        do
        {
          unint64_t v19 = v20;
          long long v20 = (uint64_t *)v20[1];
        }
        while (v20);
      }
      else
      {
        do
        {
          unint64_t v19 = (uint64_t *)v21[2];
          BOOL v22 = *v19 == (void)v21;
          long long v21 = v19;
        }
        while (v22);
      }
      uint64_t v23 = v17[4];
      if (v19[4] < v23)
      {
LABEL_11:
        if (v18) {
          char v24 = (uint64_t **)v19;
        }
        else {
          char v24 = (uint64_t **)(a1 + 240);
        }
        if (v18) {
          int v25 = (uint64_t **)(v19 + 1);
        }
        else {
          int v25 = (uint64_t **)(a1 + 240);
        }
        if (*v25) {
          goto LABEL_28;
        }
      }
      else
      {
        int v25 = (uint64_t **)(a1 + 240);
        char v24 = (uint64_t **)(a1 + 240);
        if (v18)
        {
          int v26 = *v16;
          while (1)
          {
            while (1)
            {
              char v24 = (uint64_t **)v26;
              uint64_t v27 = v26[4];
              if (v27 <= v23) {
                break;
              }
              int v26 = *v24;
              int v25 = v24;
              if (!*v24) {
                goto LABEL_27;
              }
            }
            if (v27 >= v23) {
              goto LABEL_28;
            }
            int v26 = v24[1];
            if (!v26)
            {
              int v25 = v24 + 1;
              break;
            }
          }
        }
      }
LABEL_27:
      uint64_t v28 = (char *)operator new(0x98uLL);
      v35[0] = v28;
      v35[1] = a1 + 240;
      char v36 = 0;
      *((void *)v28 + 4) = v17[4];
      *((void *)v28 + 5) = 0;
      *((void *)v28 + 6) = 0;
      *((void *)v28 + 7) = 0;
      std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)v28 + 5, (const void *)v17[5], v17[6], (uint64_t)(v17[6] - v17[5]) >> 3);
      long long v29 = *((_OWORD *)v17 + 4);
      long long v30 = *((_OWORD *)v17 + 5);
      *(_OWORD *)(v28 + 90) = *(_OWORD *)((char *)v17 + 90);
      *((_OWORD *)v28 + 4) = v29;
      *((_OWORD *)v28 + 5) = v30;
      uint64_t v31 = v17[14];
      *((void *)v28 + 15) = 0;
      *((void *)v28 + 14) = v31;
      *((void *)v28 + 16) = 0;
      *((void *)v28 + 17) = 0;
      std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)v28 + 15, (const void *)v17[15], v17[16], (uint64_t)(v17[16] - v17[15]) >> 4);
      *((void *)v28 + 18) = v17[18];
      char v36 = 1;
      std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 232), (uint64_t)v24, v25, (uint64_t *)v28);
      v35[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v35);
LABEL_28:
      uint64_t v32 = (void *)v17[1];
      if (v32)
      {
        do
        {
          char v33 = v32;
          uint64_t v32 = (void *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          char v33 = (void *)v17[2];
          BOOL v22 = *v33 == (void)v17;
          unint64_t v17 = v33;
        }
        while (!v22);
      }
      unint64_t v17 = v33;
    }
    while (v33 != (void *)(a2 + 240));
  }
  std::unordered_set<long long>::unordered_set(a1 + 256, a2 + 256);
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 296), *(const void **)(a2 + 296), *(void *)(a2 + 304), (uint64_t)(*(void *)(a2 + 304) - *(void *)(a2 + 296)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 320, a2 + 320);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 360, a2 + 360);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 400, a2 + 400);
  return a1;
}

void sub_1BD1394D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, id *location, void **a13, char a14)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v19);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v18);
  long long v21 = *v17;
  if (*v17)
  {
    *(void *)(v15 + 304) = v21;
    operator delete(v21);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>::destroy(*v14);
  HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>::~HDStatisticsCombined(a10);
  BOOL v22 = *a11;
  if (*a11)
  {
    *(void *)(v15 + 104) = v22;
    operator delete(v22);
  }
  objc_destroyWeak(location);
  uint64_t v23 = *a13;
  if (*a13)
  {
    *(void *)(v15 + 72) = v23;
    operator delete(v23);
  }

  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<long long const,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,0>(v1 + 4);
    }
    operator delete(v1);
  }
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::operator=(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  long long v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v5;

  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  id WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  uint64_t v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(void *)(a1 + 104) = v9;
    operator delete(v9);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 120, (__n128 *)(a2 + 120));
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  long long v10 = *(_OWORD *)(a2 + 152);
  long long v11 = *(_OWORD *)(a2 + 168);
  *(_WORD *)(a1 + 184) = *(_WORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v11;
  *(_OWORD *)(a1 + 152) = v10;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 200, (__n128 *)(a2 + 200));
  uint64_t v13 = a1 + 240;
  long long v12 = *(void **)(a1 + 240);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>::destroy(v12);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  uint64_t v14 = (void *)(a2 + 240);
  uint64_t v15 = *(void *)(a2 + 240);
  *(void *)(a1 + 240) = v15;
  uint64_t v16 = *(void *)(a2 + 248);
  *(void *)(a1 + 248) = v16;
  if (v16)
  {
    *(void *)(v15 + 16) = v13;
    *(void *)(a2 + 232) = v14;
    *uint64_t v14 = 0;
    *(void *)(a2 + 248) = 0;
  }
  else
  {
    *(void *)(a1 + 232) = v13;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 256, (uint64_t *)(a2 + 256));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 296, (__n128 *)(a2 + 296));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 320, (uint64_t *)(a2 + 320));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 360, (uint64_t *)(a2 + 360));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 400, (uint64_t *)(a2 + 400));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  double v3 = *(double *)a2;
  id v4 = objc_alloc(MEMORY[0x1E4F1C9C8]);
  uint64_t v5 = (double *)(a2 + 40);
  if (v3 != -1.79769313e308) {
    uint64_t v5 = (double *)a2;
  }
  long long v85 = (void *)[v4 initWithTimeIntervalSinceReferenceDate:*v5];
  uint64_t v88 = a2;
  if (*(double *)(a2 + 8) == 1.79769313e308) {
    uint64_t v6 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 48)];
  }
  else {
    uint64_t v6 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 8)];
  }
  long long v7 = (void *)v6;
  id v8 = *(id *)(a1 + 16);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v9 = *(id *)(a1 + 16);
    if ([v9 shouldUseUnderlyingTypeForStatistics])
    {
      uint64_t v10 = [v9 underlyingSampleType];

      id v8 = (id)v10;
    }
  }
  long long v11 = (void *)[objc_alloc(MEMORY[0x1E4F2B5B0]) initWithDataType:v8 startDate:v85 endDate:v7];
  if (*(unsigned char *)(a1 + 24))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      id v13 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      uint64_t v14 = *(uint64_t **)(a2 + 296);
      uint64_t v15 = *(uint64_t **)(v88 + 304);
      while (v14 != v15)
      {
        uint64_t v16 = *v14;
        id v17 = objc_loadWeakRetained((id *)(a1 + 48));
        uint64_t v18 = [v17 sourceForSourceID:v16];

        if (v18)
        {
          if (([v13 containsObject:v18] & 1) == 0) {
            [v13 addObject:v18];
          }
        }

        ++v14;
      }
      uint64_t v19 = (void *)[v13 copy];
      [v11 _setSources:v19];
    }
  }

  v96[0] = &unk_1F1725B50;
  v96[3] = v96;
  id v86 = v11;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)v100, (uint64_t)v96);
  *(void *)&long long v104 = 0;
  long long v20 = operator new(0x28uLL);
  *long long v20 = &unk_1F1725A30;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(v20 + 1), (uint64_t)v100);
  *(void *)&long long v104 = v20;
  id v21 = v86;
  BOOL v22 = (void *)MEMORY[0x1E4F2B370];
  id v23 = v21;
  char v24 = [MEMORY[0x1E4F2B618] secondUnit];
  double v25 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::overallStatistics((uint64_t)&v91, v88);
  if (!(void)v104) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v26 = (*(uint64_t (**)(void, void **, double))(*(void *)v104 + 48))(v104, &v91, v25);
  uint64_t v27 = *(double **)(v26 + 8);
  double v28 = 0.0;
  while (v27 != *(double **)(v26 + 16))
  {
    double v30 = *v27;
    double v29 = v27[1];
    v27 += 2;
    double v28 = v28 + v29 - v30;
  }
  uint64_t v31 = [v22 quantityWithUnit:v24 doubleValue:v28 + *(double *)(v26 + 32)];
  [v21 setDuration:v31];

  if (__p)
  {
    uint64_t v95 = __p;
    operator delete(__p);
  }
  if (v91)
  {
    long long v92 = v91;
    operator delete(v91);
  }

  double v32 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::overallStatistics((uint64_t)&v91, v88);
  if (!(void)v104) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  objc_msgSend(v21, "setDataCount:", *(void *)(*(uint64_t (**)(void, void **, double))(*(void *)v104 + 48))(v104, &v91, v32));
  if (__p)
  {
    uint64_t v95 = __p;
    operator delete(__p);
  }
  if (v91)
  {
    long long v92 = v91;
    operator delete(v91);
  }
  if (*(unsigned char *)(a1 + 24))
  {
    id v33 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v34 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier((uint64_t)&v91, v88);
    for (uint64_t i = v93; i; uint64_t i = (uint64_t **)*i)
    {
      char v36 = i[2];
      BOOL v37 = (void *)MEMORY[0x1E4F2B370];
      uint64_t v38 = [MEMORY[0x1E4F2B618] secondUnit];
      if (!(void)v104) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v39 = (*(uint64_t (**)(void, uint64_t *))(*(void *)v104 + 48))(v104, (uint64_t *)i + 3);
      double v40 = *(double **)(v39 + 8);
      double v41 = 0.0;
      while (v40 != *(double **)(v39 + 16))
      {
        double v43 = *v40;
        double v42 = v40[1];
        v40 += 2;
        double v41 = v41 + v42 - v43;
      }
      uint64_t v44 = [v37 quantityWithUnit:v38 doubleValue:v41 + *(double *)(v39 + 32)];
      [v33 setObject:v44 forKeyedSubscript:v36];

      if (!(void)v104) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v45 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)(*(uint64_t (**)(void, uint64_t *))(*(void *)v104 + 48))(v104, (uint64_t *)i + 3));
      [v34 setObject:v45 forKeyedSubscript:v36];

      id v21 = v23;
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)&v91);
    [v21 setDurationBySource:v33];
    [v21 setDataCountBySource:v34];
  }
  std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](&v101);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v100);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)v97, (uint64_t)v96);
  uint64_t v99 = 0;
  uint64_t v46 = operator new(0x28uLL);
  *uint64_t v46 = &unk_1F1725AC0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(v46 + 1), (uint64_t)v97);
  uint64_t v99 = v46;
  id v89 = v21;
  double v47 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::overallStatistics((uint64_t)&v91, v88);
  if (!v99) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v48 = (*(uint64_t (**)(void *, void **, double))(*v99 + 48))(v99, &v91, v47);
  long long v101 = 0;
  unint64_t v102 = 0;
  uint64_t v103 = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&v101, *(const void **)v48, *(void *)(v48 + 8), (uint64_t)(*(void *)(v48 + 8) - *(void *)v48) >> 3);
  long long v49 = *(_OWORD *)(v48 + 24);
  long long v50 = *(_OWORD *)(v48 + 40);
  *(_OWORD *)&v105[10] = *(_OWORD *)(v48 + 50);
  *(_OWORD *)long long v105 = v50;
  long long v104 = v49;
  if (__p)
  {
    uint64_t v95 = __p;
    operator delete(__p);
  }
  if (v91)
  {
    long long v92 = v91;
    operator delete(v91);
  }
  double v51 = HDStatisticsPercentiles::calculatePercentileValue((HDStatisticsPercentiles *)&v101);
  unint64_t v52 = (void *)MEMORY[0x1E4F2B370];
  unint64_t v53 = [*(id *)(a1 + 16) canonicalUnit];
  uint64_t v54 = [v52 quantityWithUnit:v53 doubleValue:v51];
  [v89 setPercentileQuantity:v54];

  [v89 setDataCount:(v102 - v101) >> 3];
  uint64_t v55 = *(void *)(a1 + 24);
  LOBYTE(v56) = v55;
  if ((v55 & 0x20) != 0)
  {
    double v58 = *((double *)&v104 + 1);
    double v57 = *(double *)v105;
    double v59 = *(double *)&v105[8];
    double v60 = (void *)MEMORY[0x1E4F2B370];
    uint64_t v61 = [*(id *)(a1 + 16) canonicalUnit];
    id v62 = [v60 quantityWithUnit:v61 doubleValue:v58];
    [v89 setMostRecentQuantity:v62];

    __n128 v63 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v57, v59);
    [v89 setMostRecentQuantityDateInterval:v63];

    uint64_t v56 = *(void *)(a1 + 24);
  }
  if (v56)
  {
    id v64 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v65 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    if ((v55 & 0x20) != 0)
    {
      id v66 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      id v87 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    }
    else
    {
      id v87 = 0;
      id v66 = 0;
    }
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier((uint64_t)&v91, v88);
    for (uint64_t j = v93; j; uint64_t j = (uint64_t **)*j)
    {
      char v68 = j[2];
      char v69 = (void *)MEMORY[0x1E4F2B370];
      uint64_t v70 = [*(id *)(a1 + 16) canonicalUnit];
      if (!v99) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      int8x16_t v71 = (HDStatisticsPercentiles *)(*(uint64_t (**)(void *, uint64_t *))(*v99 + 48))(v99, (uint64_t *)j + 3);
      uint64_t v72 = [v69 quantityWithUnit:v70 doubleValue:HDStatisticsPercentiles::calculatePercentileValue(v71)];
      [v64 setObject:v72 forKeyedSubscript:v68];

      if (!v99) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v73 = NSNumber;
      uint64_t v74 = (void *)(*(uint64_t (**)(void *, uint64_t *))(*v99 + 48))(v99, (uint64_t *)j + 3);
      long long v75 = [v73 numberWithLongLong:(uint64_t)(v74[1] - *v74) >> 3];
      [v65 setObject:v75 forKeyedSubscript:v68];

      if ((v55 & 0x20) != 0)
      {
        if (!v99) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        uint64_t v76 = (double *)(*(uint64_t (**)(void *, uint64_t *))(*v99 + 48))(v99, (uint64_t *)j + 3);
        double v78 = v76[4];
        double v77 = v76[5];
        double v79 = v76[6];
        long long v80 = (void *)MEMORY[0x1E4F2B370];
        long long v81 = [*(id *)(a1 + 16) canonicalUnit];
        int v82 = [v80 quantityWithUnit:v81 doubleValue:v78];
        [v66 setObject:v82 forKeyedSubscript:v68];

        long long v83 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v77, v79);
        [v87 setObject:v83 forKeyedSubscript:v68];
      }
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)&v91);
    [v89 setPercentileQuantityBySource:v64];
    [v89 setDataCountBySource:v65];
    if ((v55 & 0x20) != 0)
    {
      [v89 setMostRecentQuantityBySource:v66];
      [v89 setMostRecentQuantityDateIntervalBySource:v87];
    }
  }
  if (v101)
  {
    unint64_t v102 = v101;
    operator delete(v101);
  }

  std::__function::__value_func<HDStatisticsPercentiles const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v98);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v97);

  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v96);

  return v89;
}

void sub_1BD13A214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, _Unwind_Exception *exception_object, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  double v40 = *(void **)(v39 - 200);
  if (v40)
  {
    *(void *)(v39 - 192) = v40;
    operator delete(v40);
  }

  std::__function::__value_func<HDStatisticsPercentiles const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](&a36);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](&a32);

  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](&a28);
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 280);
  uint64_t v2 = *(void *)(a1 + 296);
  if (v1 != (*(void *)(a1 + 304) - v2) >> 3)
  {
    id v4 = (void **)(a1 + 296);
    *(void *)(a1 + 304) = v2;
    std::vector<long long>::reserve((void **)(a1 + 296), v1);
    uint64_t v5 = *(void **)(a1 + 272);
    if (v5)
    {
      uint64_t v6 = *(char **)(a1 + 304);
      do
      {
        uint64_t v7 = v5[2];
        unint64_t v8 = *(void *)(a1 + 312);
        if ((unint64_t)v6 >= v8)
        {
          uint64_t v10 = (char *)*v4;
          uint64_t v11 = (v6 - (unsigned char *)*v4) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            uint64_t v10 = *(char **)(a1 + 296);
            uint64_t v6 = *(char **)(a1 + 304);
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v16 = (void *)(v14 + 8 * v11);
          void *v16 = v7;
          id v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            uint64_t v17 = *((void *)v6 - 1);
            v6 -= 8;
            *--uint64_t v16 = v17;
          }
          *(void *)(a1 + 296) = v16;
          *(void *)(a1 + 304) = v9;
          *(void *)(a1 + 312) = v14 + 8 * v15;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)uint64_t v6 = v7;
          id v9 = v6 + 8;
        }
        *(void *)(a1 + 304) = v9;
        uint64_t v5 = (void *)*v5;
        uint64_t v6 = v9;
      }
      while (v5);
    }
    uint64_t v18 = (id *)(a1 + 88);
    id WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      id v20 = objc_loadWeakRetained(v18);
      [v20 orderSourceIDs:v4];
    }
  }
}

void sub_1BD13A638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2) {
    a2 = v4 * floor(a2 / v4);
  }
  double v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    uint64_t v106 = (char **)(a1 + 96);
    uint64_t v103 = (uint64_t *)(a1 + 192);
    long long v104 = (HDStatisticsPercentiles *)(a1 + 120);
    location = (id *)(a1 + 88);
    int v100 = (double **)(a1 + 200);
    uint64_t v6 = (void *)(a1 + 240);
    do
    {
      uint64_t v7 = *(double **)(a1 + 96);
      unint64_t v8 = *(long long **)(a1 + 104);
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v7) >> 4);
      if (v9)
      {
        if (v9 != 1)
        {
          double v30 = a2;
          double v31 = a2;
          double v32 = v5;
          uint64_t v33 = *(void *)(a1 + 96);
          if (v7 != (double *)v8)
          {
            do
            {
              double v34 = *(double *)(v33 + 8);
              double v35 = *(double *)(v33 + 16);
              if (v34 > v32 && v34 < v31) {
                double v31 = *(double *)(v33 + 8);
              }
              if (v35 > v5) {
                double v37 = *(double *)(v33 + 16);
              }
              else {
                double v37 = v30;
              }
              if (v35 < v30)
              {
                double v32 = v5;
                double v30 = v37;
              }
              v33 += 48;
            }
            while ((long long *)v33 != v8);
          }
          if (v30 >= v31) {
            double v38 = v31;
          }
          else {
            double v38 = v30;
          }
          double v39 = *(double *)(a1 + 16);
          if (v39 > 0.0)
          {
            double v40 = v39 * floor(v38 / v39);
            double v41 = v39 * floor((v39 + v5) / v39);
            if (v40 >= v41) {
              double v38 = v40;
            }
            else {
              double v38 = v41;
            }
          }
          *uint64_t v106 = 0;
          v106[1] = 0;
          v106[2] = 0;
          if (v7 != (double *)v8)
          {
            if (v9 > 0x555555555555555) {
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            }
            double v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v9);
            uint64_t v45 = *(char **)(a1 + 96);
            uint64_t v44 = *(char **)(a1 + 104);
            uint64_t v46 = v42;
            if (v44 != v45)
            {
              do
              {
                long long v47 = *((_OWORD *)v44 - 3);
                long long v48 = *((_OWORD *)v44 - 2);
                *(_OWORD *)(v46 - 21) = *(_OWORD *)(v44 - 21);
                *((_OWORD *)v46 - 3) = v47;
                *((_OWORD *)v46 - 2) = v48;
                v46 -= 48;
                v44 -= 48;
              }
              while (v44 != v45);
              uint64_t v44 = *v106;
            }
            *(void *)(a1 + 96) = v46;
            *(void *)(a1 + 104) = v42;
            *(void *)(a1 + 112) = &v42[48 * v43];
            if (v44) {
              operator delete(v44);
            }
          }
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_updateSourceOrder(a1);
          id WeakRetained = objc_loadWeakRetained(location);

          if (WeakRetained)
          {
            *(void *)&v108.var0 = a1;
            unint64_t v50 = 126 - 2 * __clz(v9);
            if (v7 == (double *)v8) {
              uint64_t v51 = 0;
            }
            else {
              uint64_t v51 = v50;
            }
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_SampleRemainder*,false>((unint64_t)v7, v8, (uint64_t)&v108, v51, 1);
          }
          if (*(unsigned char *)(a1 + 25)) {
            id v102 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
          }
          else {
            id v102 = 0;
          }
          if (v7 == (double *)v8)
          {
LABEL_140:
            *(double *)(a1 + 224) = HKIntervalMask<double>::removeIntervalsBefore(v100, v38) + *(double *)(a1 + 224);
            unint64_t v94 = *(void **)(a1 + 232);
            if (v94 != v6)
            {
              do
              {
                *((double *)v94 + 18) = HKIntervalMask<double>::removeIntervalsBefore((double **)v94 + 15, v38)
                                      + *((double *)v94 + 18);
                uint64_t v95 = (void *)v94[1];
                if (v95)
                {
                  do
                  {
                    unint64_t v96 = v95;
                    uint64_t v95 = (void *)*v95;
                  }
                  while (v95);
                }
                else
                {
                  do
                  {
                    unint64_t v96 = (void *)v94[2];
                    BOOL v54 = *v96 == (void)v94;
                    unint64_t v94 = v96;
                  }
                  while (!v54);
                }
                unint64_t v94 = v96;
              }
              while (v96 != v6);
            }
            *(double *)(a1 + 56) = v38;

            if (v7) {
              operator delete(v7);
            }
            goto LABEL_152;
          }
          int64_t v105 = 0;
          char v61 = 0;
          id v62 = v7;
          while (2)
          {
            long long v63 = *((_OWORD *)v62 + 1);
            *(_OWORD *)&v108.var0 = *(_OWORD *)v62;
            *(_OWORD *)&v108.double var2 = v63;
            *(double *)&v108.BOOL var4 = v62[4];
            if (!v108.var4 || v108.var1 > v38)
            {
              id v64 = *(_OWORD **)(a1 + 104);
              unint64_t v65 = *(void *)(a1 + 112);
              if ((unint64_t)v64 >= v65)
              {
                unint64_t v69 = 0xAAAAAAAAAAAAAAABLL * (((char *)v64 - *v106) >> 4);
                unint64_t v70 = v69 + 1;
                if (v69 + 1 > 0x555555555555555) {
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65 - (void)*v106) >> 4);
                if (2 * v71 > v70) {
                  unint64_t v70 = 2 * v71;
                }
                if (v71 >= 0x2AAAAAAAAAAAAAALL) {
                  unint64_t v72 = 0x555555555555555;
                }
                else {
                  unint64_t v72 = v70;
                }
                if (v72) {
                  unint64_t v72 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v72);
                }
                else {
                  uint64_t v73 = 0;
                }
                double v79 = (_OWORD *)(v72 + 48 * v69);
                long long v80 = *(_OWORD *)v62;
                long long v81 = *((_OWORD *)v62 + 2);
                v79[1] = *((_OWORD *)v62 + 1);
                v79[2] = v81;
                *double v79 = v80;
                long long v83 = *(char **)(a1 + 96);
                int v82 = *(char **)(a1 + 104);
                long long v84 = v79;
                if (v82 != v83)
                {
                  do
                  {
                    long long v85 = *((_OWORD *)v82 - 3);
                    long long v86 = *((_OWORD *)v82 - 2);
                    *(_OWORD *)((char *)v84 - 21) = *(_OWORD *)(v82 - 21);
                    *(v84 - 3) = v85;
                    *(v84 - 2) = v86;
                    v84 -= 3;
                    v82 -= 48;
                  }
                  while (v82 != v83);
                  int v82 = *v106;
                }
                char v68 = v79 + 3;
                *(void *)(a1 + 96) = v84;
                *(void *)(a1 + 104) = v79 + 3;
                *(void *)(a1 + 112) = v72 + 48 * v73;
                if (v82) {
                  operator delete(v82);
                }
              }
              else
              {
                long long v66 = *(_OWORD *)v62;
                long long v67 = *((_OWORD *)v62 + 2);
                v64[1] = *((_OWORD *)v62 + 1);
                v64[2] = v67;
                *id v64 = v66;
                char v68 = v64 + 3;
              }
              *(void *)(a1 + 104) = v68;
LABEL_139:
              v62 += 6;
              if (v62 == (double *)v8) {
                goto LABEL_140;
              }
              continue;
            }
            break;
          }
          double var2 = v108.var2;
          if (v108.var2 > v38) {
            double var2 = v38;
          }
          v108.double var2 = var2;
          for (uint64_t i = *(double **)(a1 + 64); i != *(double **)(a1 + 72) && v108.var1 >= *i; i += 2)
          {
            if (v108.var1 < i[1]) {
              goto LABEL_139;
            }
          }
          int v76 = *((unsigned __int8 *)v62 + 42);
          int v77 = *((unsigned __int8 *)v62 + 41);
          if (v61)
          {
            unint64_t var3 = v108.var3;
            if (v105 == v108.var3 || *(unsigned char *)(a1 + 24))
            {
              HDStatisticsPercentiles::addSample(v104, &v108);
              HDStatisticsTimeInterval::addSample(v103, &v108, v76 == 0);
            }
          }
          else
          {
            HDStatisticsPercentiles::addSample(v104, &v108);
            HDStatisticsTimeInterval::addSample(v103, &v108, v76 == 0);
            unint64_t var3 = v108.var3;
            int64_t v105 = v108.var3;
          }
          if (*(unsigned char *)(a1 + 25))
          {
            id v87 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, var3);
            if (v87)
            {
              uint64_t v88 = [v102 objectForKeyedSubscript:v87];
              id v89 = v88;
              if (v88)
              {
                if ([v88 longLongValue] == var3 || *(unsigned char *)(a1 + 24))
                {
                  unint64_t v90 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, var3);
                  long long v91 = (uint64_t *)HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v90);
                  HDStatisticsPercentiles::addSample((HDStatisticsPercentiles *)v91, &v108);
                  goto LABEL_135;
                }
              }
              else
              {
                long long v92 = [NSNumber numberWithLongLong:var3];
                [v102 setObject:v92 forKeyedSubscript:v87];

                unint64_t v93 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, var3);
                long long v91 = (uint64_t *)HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v93);
                HDStatisticsPercentiles::addSample((HDStatisticsPercentiles *)v91, &v108);
LABEL_135:
                HDStatisticsTimeInterval::addSample(v91 + 9, &v108, v77 == 0);
              }
            }
          }
          char v61 = 1;
          goto LABEL_139;
        }
        int v10 = *((unsigned __int8 *)v7 + 42);
        int v11 = *((unsigned __int8 *)v7 + 41);
        int v12 = *((unsigned __int8 *)v7 + 40);
        double v13 = v7[1];
        double v14 = v7[2];
        unint64_t v15 = *((void *)v7 + 3);
        char v16 = *((unsigned char *)v7 + 33);
        if (v14 <= a2) {
          double v17 = v7[2];
        }
        else {
          double v17 = a2;
        }
        if (v13 < a2) {
          int v18 = *((unsigned __int8 *)v7 + 32);
        }
        else {
          int v18 = 0;
        }
        if (v13 < a2) {
          char v19 = 0;
        }
        else {
          char v19 = *((unsigned char *)v7 + 33);
        }
        if (v13 < a2)
        {
          uint64_t v20 = 0;
        }
        else
        {
          double v17 = v7[2];
          uint64_t v20 = *((void *)v7 + 3);
        }
        if (v13 < a2) {
          double v21 = 0.0;
        }
        else {
          double v21 = v7[2];
        }
        if (v13 < a2) {
          double v22 = 0.0;
        }
        else {
          double v22 = *v7;
        }
        if (v13 < a2) {
          double v23 = 0.0;
        }
        else {
          double v23 = v7[1];
        }
        if (v13 < a2) {
          int v24 = 0;
        }
        else {
          int v24 = *((unsigned __int8 *)v7 + 32);
        }
        if (*((unsigned char *)v7 + 32))
        {
          double v14 = v17;
        }
        else
        {
          int v18 = 0;
          char v19 = 0;
          uint64_t v20 = 0;
        }
        if (*((unsigned char *)v7 + 32)) {
          double v25 = v21;
        }
        else {
          double v25 = 0.0;
        }
        if (*((unsigned char *)v7 + 32)) {
          double v26 = v22;
        }
        else {
          double v26 = 0.0;
        }
        if (*((unsigned char *)v7 + 32)) {
          double v27 = v23;
        }
        else {
          double v27 = 0.0;
        }
        if (*((unsigned char *)v7 + 32)) {
          int v28 = v24;
        }
        else {
          int v28 = 0;
        }
        v108.var0 = *v7;
        v108.double var1 = v13;
        v108.double var2 = v14;
        v108.unint64_t var3 = v15;
        v108.BOOL var4 = v18;
        v108.BOOL var5 = v16;
        *(_DWORD *)(&v108.var5 + 1) = *(_DWORD *)((char *)v7 + 34);
        *(_WORD *)(&v108.var5 + 5) = *((_WORD *)v7 + 19);
        *(double *)&long long v109 = v26;
        *((double *)&v109 + 1) = v27;
        *(double *)&long long v110 = v25;
        *((void *)&v110 + 1) = v20;
        LOBYTE(v111) = v28;
        HIBYTE(v111) = v19;
        for (uint64_t j = *(double **)(a1 + 64); j != *(double **)(a1 + 72) && v13 >= *j; j += 2)
        {
          if (v13 < j[1])
          {
            BOOL v52 = v12 != 0;
            BOOL v53 = v11 != 0;
            BOOL v55 = v10 != 0;
            if (!v28) {
              goto LABEL_150;
            }
LABEL_93:
            LOWORD(v107) = v111;
            long long v59 = v110;
            double v60 = *v106;
            *(_OWORD *)double v60 = v109;
            *((_OWORD *)v60 + 1) = v59;
            *((void *)v60 + 4) = v107;
            v60[40] = v52;
            v60[41] = v53;
            v60[42] = v55;
            goto LABEL_151;
          }
        }
        BOOL v52 = v12 != 0;
        BOOL v53 = v11 != 0;
        BOOL v54 = v10 == 0;
        BOOL v55 = v10 != 0;
        if (v18)
        {
          int v56 = v54;
          HDStatisticsPercentiles::addSample(v104, &v108);
          HDStatisticsTimeInterval::addSample(v103, &v108, v56);
          if (*(unsigned char *)(a1 + 25))
          {
            unint64_t v57 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v15);
            double v58 = (uint64_t *)HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v57);
            HDStatisticsPercentiles::addSample((HDStatisticsPercentiles *)v58, &v108);
            HDStatisticsTimeInterval::addSample(v58 + 9, &v108, v11 == 0);
          }
          BOOL v52 = 1;
          BOOL v53 = 1;
          BOOL v55 = 1;
        }
        if (v28) {
          goto LABEL_93;
        }
LABEL_150:
        *(void *)(a1 + 104) = *(void *)(a1 + 96);
      }
LABEL_151:
      *(double *)(a1 + 56) = a2;
LABEL_152:
      double v97 = *(double *)(a1 + 56);
      if (v97 == v5)
      {
        uint64_t v98 = [MEMORY[0x1E4F28B00] currentHandler];
        uint64_t v99 = objc_msgSend(NSString, "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles, HDStatisticsTimeInterval>>::_mergeThroughTime(double) [Statistics = HDStatisticsCombined<HDStatisticsPercentiles, HDStatisticsTimeInterval>]");
        [v98 handleFailureInFunction:v99 file:@"HDStatisticsBucket.hpp" lineNumber:234 description:@"Failed to make forward progress during statistics merge."];

        double v97 = *(double *)(a1 + 56);
      }
      double v5 = v97;
    }
    while (v97 < a2);
  }
}

void sub_1BD13AE94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = a2;
  double v4 = (uint64_t **)(a1 + 240);
  double v5 = *(void **)(a1 + 240);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = (uint64_t **)(a1 + 240);
  do
  {
    uint64_t v7 = v5[4];
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      unint64_t v9 = v5;
    }
    else {
      unint64_t v9 = v5 + 1;
    }
    if (!v8) {
      uint64_t v6 = (uint64_t **)v5;
    }
    double v5 = (void *)*v9;
  }
  while (*v9);
  if (v6 == v4 || (uint64_t)v6[4] > a2)
  {
LABEL_11:
    int v10 = v4 - 1;
    int v11 = std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v4 - 1, a2, &v13);
    HDStatisticsPercentiles::configure((HDStatisticsPercentiles *)(v11 + 5), *(HDStatisticsPercentileConfiguration **)(a1 + 32));
    uint64_t v6 = std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v10, a2, &v13);
  }
  return v6 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    double v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((void *)(a1 + 320), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, a2);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      id v10 = v6;
      uint64_t v7 = (void *)(a1 + 360);
      BOOL v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        int v11 = &v10;
        *((void *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        id v6 = v10;
      }
    }
  }
  return a2;
}

void sub_1BD13B07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  double v4 = (id *)(a1 + 88);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    id v6 = (void *)(a1 + 400);
    uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
    if (v7)
    {
      id v8 = (id)v7[3];
    }
    else
    {
      id v9 = objc_loadWeakRetained(v4);
      id v8 = [v9 bundleIdentifierForSourceID:a2];

      if (v8)
      {
        id v10 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
        objc_storeStrong(v10 + 3, v8);
      }
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1BD13B160(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, void *a3)
{
  id v6 = a1 + 1;
  double v5 = a1[1];
  uint64_t v7 = a1 + 1;
  id v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        id v8 = (uint64_t **)v5;
        uint64_t v9 = v5[4];
        if (v9 <= a2) {
          break;
        }
        double v5 = *v8;
        uint64_t v7 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a2) {
        break;
      }
      double v5 = v8[1];
      if (!v5)
      {
        uint64_t v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    id v10 = (char *)operator new(0x98uLL);
    v12[1] = v6;
    *((void *)v10 + 4) = *a3;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    *(_OWORD *)(v10 + 120) = 0u;
    *(_OWORD *)(v10 + 136) = 0u;
    char v13 = 1;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v8, v7, (uint64_t *)v10);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
    return (uint64_t **)v10;
  }
  return v8;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v12 = a2 - 3;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 4);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v103 = *((void *)a2 - 3);
                uint64_t v104 = *(void *)(v13 + 24);
                if (v103 == v104) {
                  return;
                }
                int64_t v105 = *(char **)(*(void *)a3 + 296);
                uint64_t v106 = *(char **)(*(void *)a3 + 304);
                uint64_t v107 = v105;
                HDRawQuantitySample v108 = v105;
                if (v105 == v106) {
                  goto LABEL_171;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)v13, (long long *)(v13 + 48), a2 - 3, a3);
                return;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, (uint64_t)(a2 - 3), a3);
                return;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, v13 + 144, (uint64_t)(a2 - 3), a3);
                return;
              default:
                JUMPOUT(0);
            }
            do
            {
              if (*(void *)v108 == v103) {
                goto LABEL_168;
              }
              v108 += 8;
            }
            while (v108 != v106);
            HDRawQuantitySample v108 = *(char **)(*(void *)a3 + 304);
LABEL_168:
            while (*(void *)v107 != v104)
            {
              v107 += 8;
              if (v107 == v106)
              {
                uint64_t v107 = *(char **)(*(void *)a3 + 304);
                break;
              }
            }
LABEL_171:
            if (v108 - v105 < v107 - v105)
            {
              *(_OWORD *)v226 = *(_OWORD *)(v13 + 16);
              *(_OWORD *)&v226[16] = *(_OWORD *)(v13 + 32);
              long long v218 = *(_OWORD *)v13;
              long long v109 = *v12;
              long long v110 = *(a2 - 2);
              *(_OWORD *)(v13 + 27) = *(long long *)((char *)a2 - 21);
              *(_OWORD *)unint64_t v13 = v109;
              *(_OWORD *)(v13 + 16) = v110;
              *(long long *)((char *)a2 - 21) = *(_OWORD *)&v226[11];
              long long *v12 = v218;
              *(a2 - 2) = *(_OWORD *)v226;
            }
            return;
          }
          if (v14 <= 1151)
          {
            __int16 v111 = (long long *)(v13 + 48);
            BOOL v113 = (long long *)v13 == a2 || v111 == a2;
            if (a5)
            {
              if (!v113)
              {
                unint64_t v114 = v13;
                do
                {
                  unint64_t v115 = v114;
                  unint64_t v114 = (unint64_t)v111;
                  uint64_t v116 = *(void *)(v115 + 72);
                  uint64_t v117 = *(void *)(v115 + 24);
                  if (v116 != v117)
                  {
                    long long v118 = *(char **)(*(void *)a3 + 296);
                    long long v119 = *(char **)(*(void *)a3 + 304);
                    long long v120 = v118;
                    long long v121 = v118;
                    if (v118 != v119)
                    {
                      do
                      {
                        if (*(void *)v121 == v116) {
                          goto LABEL_196;
                        }
                        v121 += 8;
                      }
                      while (v121 != v119);
                      long long v121 = *(char **)(*(void *)a3 + 304);
LABEL_196:
                      while (*(void *)v120 != v117)
                      {
                        v120 += 8;
                        if (v120 == v119)
                        {
                          long long v120 = *(char **)(*(void *)a3 + 304);
                          break;
                        }
                      }
                    }
                    if (v121 - v118 < v120 - v118)
                    {
                      uint64_t v227 = *(void *)(v114 + 16);
                      long long v219 = *(_OWORD *)v114;
                      long long v236 = *(_OWORD *)(v115 + 80);
                      unint64_t v122 = v114;
                      while (1)
                      {
                        long long v123 = *(_OWORD *)(v115 + 16);
                        *(_OWORD *)unint64_t v122 = *(_OWORD *)v115;
                        *(_OWORD *)(v122 + 16) = v123;
                        *(_OWORD *)(v122 + 27) = *(_OWORD *)(v115 + 27);
                        if (v115 == v13) {
                          break;
                        }
                        unint64_t v122 = v115;
                        uint64_t v124 = *(void *)(v115 - 24);
                        if (v116 != v124)
                        {
                          uint64_t v125 = *(char **)(*(void *)a3 + 296);
                          uint64_t v126 = *(char **)(*(void *)a3 + 304);
                          uint64_t v127 = v125;
                          uint64_t v128 = v125;
                          if (v125 != v126)
                          {
                            do
                            {
                              if (*(void *)v128 == v116) {
                                goto LABEL_208;
                              }
                              v128 += 8;
                            }
                            while (v128 != v126);
                            uint64_t v128 = *(char **)(*(void *)a3 + 304);
LABEL_208:
                            while (*(void *)v127 != v124)
                            {
                              v127 += 8;
                              if (v127 == v126)
                              {
                                uint64_t v127 = *(char **)(*(void *)a3 + 304);
                                break;
                              }
                            }
                          }
                          unint64_t v115 = v122 - 48;
                          if (v128 - v125 < v127 - v125) {
                            continue;
                          }
                        }
                        goto LABEL_212;
                      }
                      unint64_t v122 = v13;
LABEL_212:
                      *(_OWORD *)unint64_t v122 = v219;
                      *(void *)(v122 + 16) = v227;
                      *(void *)(v122 + 24) = v116;
                      *(void *)(v122 + 32) = v236;
                      *(_DWORD *)(v122 + 39) = *(_DWORD *)((char *)&v236 + 7);
                    }
                  }
                  __int16 v111 = (long long *)(v114 + 48);
                }
                while ((long long *)(v114 + 48) != a2);
              }
            }
            else if (!v113)
            {
              do
              {
                unint64_t v201 = a1;
                a1 = (unint64_t)v111;
                uint64_t v202 = *(void *)(v201 + 72);
                uint64_t v203 = *(void *)(v201 + 24);
                if (v202 != v203)
                {
                  v204 = *(char **)(*(void *)a3 + 296);
                  v205 = *(char **)(*(void *)a3 + 304);
                  v206 = v204;
                  v207 = v204;
                  if (v204 != v205)
                  {
                    do
                    {
                      if (*(void *)v207 == v202) {
                        goto LABEL_312;
                      }
                      v207 += 8;
                    }
                    while (v207 != v205);
                    v207 = *(char **)(*(void *)a3 + 304);
LABEL_312:
                    while (*(void *)v206 != v203)
                    {
                      v206 += 8;
                      if (v206 == v205)
                      {
                        v206 = *(char **)(*(void *)a3 + 304);
                        break;
                      }
                    }
                  }
                  if (v207 - v204 < v206 - v204)
                  {
                    uint64_t v230 = *(void *)(a1 + 16);
                    long long v222 = *(_OWORD *)a1;
                    long long v239 = *(_OWORD *)(v201 + 80);
                    unint64_t v208 = a1;
                    do
                    {
                      v209 = (_OWORD *)v208;
                      unint64_t v208 = v201;
                      long long v210 = *(_OWORD *)(v201 + 16);
                      _OWORD *v209 = *(_OWORD *)v201;
                      v209[1] = v210;
                      *(_OWORD *)((char *)v209 + 27) = *(_OWORD *)(v201 + 27);
                      uint64_t v211 = *(void *)(v201 - 24);
                      if (v202 == v211) {
                        break;
                      }
                      v212 = *(char **)(*(void *)a3 + 296);
                      v213 = *(char **)(*(void *)a3 + 304);
                      v214 = v212;
                      v215 = v212;
                      if (v212 != v213)
                      {
                        do
                        {
                          if (*(void *)v215 == v202) {
                            goto LABEL_322;
                          }
                          v215 += 8;
                        }
                        while (v215 != v213);
                        v215 = *(char **)(*(void *)a3 + 304);
LABEL_322:
                        while (*(void *)v214 != v211)
                        {
                          v214 += 8;
                          if (v214 == v213)
                          {
                            v214 = *(char **)(*(void *)a3 + 304);
                            break;
                          }
                        }
                      }
                      unint64_t v201 = v208 - 48;
                    }
                    while (v215 - v212 < v214 - v212);
                    *(_OWORD *)unint64_t v208 = v222;
                    *(void *)(v208 + 16) = v230;
                    *(void *)(v208 + 24) = v202;
                    *(void *)(v208 + 32) = v239;
                    *(_DWORD *)(v208 + 39) = *(_DWORD *)((char *)&v239 + 7);
                  }
                }
                __int16 v111 = (long long *)(a1 + 48);
              }
              while ((long long *)(a1 + 48) != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((long long *)v13 != a2)
            {
              int64_t v129 = (v15 - 2) >> 1;
              int64_t v130 = v129;
              do
              {
                int64_t v131 = v130;
                if (v129 >= v130)
                {
                  uint64_t v132 = (2 * v130) | 1;
                  unint64_t v133 = v13 + 48 * v132;
                  if (2 * v131 + 2 < (uint64_t)v15)
                  {
                    uint64_t v134 = *(void *)(v133 + 24);
                    uint64_t v135 = *(void *)(v133 + 72);
                    if (v134 != v135)
                    {
                      v137 = *(char **)(*(void *)a3 + 296);
                      v136 = *(char **)(*(void *)a3 + 304);
                      v138 = v137;
                      v139 = v137;
                      if (v137 != v136)
                      {
                        do
                        {
                          if (*(void *)v139 == v134) {
                            goto LABEL_224;
                          }
                          v139 += 8;
                        }
                        while (v139 != v136);
                        v139 = *(char **)(*(void *)a3 + 304);
LABEL_224:
                        while (*(void *)v138 != v135)
                        {
                          v138 += 8;
                          if (v138 == v136)
                          {
                            v138 = *(char **)(*(void *)a3 + 304);
                            break;
                          }
                        }
                      }
                      v133 += 48 * (v139 - v137 < v138 - v137);
                      if (v139 - v137 < v138 - v137) {
                        uint64_t v132 = 2 * v131 + 2;
                      }
                    }
                  }
                  unint64_t v140 = v13 + 48 * v131;
                  uint64_t v141 = *(void *)(v133 + 24);
                  uint64_t v142 = *(void *)(v140 + 24);
                  if (v141 == v142) {
                    goto LABEL_238;
                  }
                  v144 = *(char **)(*(void *)a3 + 296);
                  v143 = *(char **)(*(void *)a3 + 304);
                  v145 = v144;
                  v146 = v144;
                  if (v144 != v143)
                  {
                    do
                    {
                      if (*(void *)v146 == v141) {
                        goto LABEL_234;
                      }
                      v146 += 8;
                    }
                    while (v146 != v143);
                    v146 = *(char **)(*(void *)a3 + 304);
LABEL_234:
                    while (*(void *)v145 != v142)
                    {
                      v145 += 8;
                      if (v145 == v143)
                      {
                        v145 = *(char **)(*(void *)a3 + 304);
                        break;
                      }
                    }
                  }
                  if (v146 - v144 >= v145 - v144)
                  {
LABEL_238:
                    uint64_t v228 = *(void *)(v140 + 16);
                    long long v220 = *(_OWORD *)v140;
                    long long v237 = *(_OWORD *)(v140 + 32);
                    long long v147 = *(_OWORD *)v133;
                    long long v148 = *(_OWORD *)(v133 + 16);
                    *(_OWORD *)(v140 + 27) = *(_OWORD *)(v133 + 27);
                    *(_OWORD *)unint64_t v140 = v147;
                    *(_OWORD *)(v140 + 16) = v148;
                    if (v129 >= v132)
                    {
                      while (1)
                      {
                        uint64_t v150 = 2 * v132;
                        uint64_t v132 = (2 * v132) | 1;
                        unint64_t v149 = v13 + 48 * v132;
                        uint64_t v151 = v150 + 2;
                        if (v151 < (uint64_t)v15)
                        {
                          uint64_t v152 = *(void *)(v149 + 24);
                          uint64_t v153 = *(void *)(v149 + 72);
                          if (v152 != v153)
                          {
                            v154 = *(char **)(*(void *)a3 + 296);
                            v155 = *(char **)(*(void *)a3 + 304);
                            v156 = v154;
                            v157 = v154;
                            if (v154 != v155)
                            {
                              do
                              {
                                if (*(void *)v157 == v152) {
                                  goto LABEL_246;
                                }
                                v157 += 8;
                              }
                              while (v157 != v155);
                              v157 = *(char **)(*(void *)a3 + 304);
LABEL_246:
                              while (*(void *)v156 != v153)
                              {
                                v156 += 8;
                                if (v156 == v155)
                                {
                                  v156 = *(char **)(*(void *)a3 + 304);
                                  break;
                                }
                              }
                            }
                            v149 += 48 * (v157 - v154 < v156 - v154);
                            if (v157 - v154 < v156 - v154) {
                              uint64_t v132 = v151;
                            }
                          }
                        }
                        uint64_t v158 = *(void *)(v149 + 24);
                        if (v158 != v142)
                        {
                          v160 = *(char **)(*(void *)a3 + 296);
                          v159 = *(char **)(*(void *)a3 + 304);
                          v161 = v160;
                          v162 = v160;
                          if (v160 != v159)
                          {
                            do
                            {
                              if (*(void *)v162 == v158) {
                                goto LABEL_256;
                              }
                              v162 += 8;
                            }
                            while (v162 != v159);
                            v162 = *(char **)(*(void *)a3 + 304);
LABEL_256:
                            while (*(void *)v161 != v142)
                            {
                              v161 += 8;
                              if (v161 == v159)
                              {
                                v161 = *(char **)(*(void *)a3 + 304);
                                break;
                              }
                            }
                          }
                          if (v162 - v160 < v161 - v160) {
                            break;
                          }
                        }
                        long long v163 = *(_OWORD *)v149;
                        long long v164 = *(_OWORD *)(v149 + 16);
                        *(_OWORD *)(v133 + 27) = *(_OWORD *)(v149 + 27);
                        *(_OWORD *)unint64_t v133 = v163;
                        *(_OWORD *)(v133 + 16) = v164;
                        unint64_t v133 = v149;
                        if (v129 < v132) {
                          goto LABEL_261;
                        }
                      }
                    }
                    unint64_t v149 = v133;
LABEL_261:
                    *(_OWORD *)unint64_t v149 = v220;
                    *(void *)(v149 + 16) = v228;
                    *(void *)(v149 + 24) = v142;
                    *(void *)(v149 + 32) = v237;
                    *(_DWORD *)(v149 + 39) = *(_DWORD *)((char *)&v237 + 7);
                  }
                }
                int64_t v130 = v131 - 1;
              }
              while (v131);
              int64_t v165 = v14 / 0x30uLL;
              do
              {
                uint64_t v166 = 0;
                *(_OWORD *)v229 = *(_OWORD *)(v13 + 16);
                *(_OWORD *)&v229[16] = *(_OWORD *)(v13 + 32);
                long long v221 = *(_OWORD *)v13;
                uint64_t v167 = v165 - 2;
                if (v165 < 2) {
                  uint64_t v167 = v165 - 1;
                }
                uint64_t v168 = v167 >> 1;
                unint64_t v169 = v13;
                do
                {
                  v170 = (_OWORD *)v169;
                  v169 += 48 * v166 + 48;
                  uint64_t v171 = 2 * v166;
                  uint64_t v166 = (2 * v166) | 1;
                  uint64_t v172 = v171 + 2;
                  if (v171 + 2 < v165)
                  {
                    uint64_t v173 = *(void *)(v169 + 24);
                    uint64_t v174 = *(void *)(v169 + 72);
                    if (v173 != v174)
                    {
                      v176 = *(char **)(*(void *)a3 + 296);
                      v175 = *(char **)(*(void *)a3 + 304);
                      v177 = v176;
                      v178 = v176;
                      if (v176 != v175)
                      {
                        do
                        {
                          if (*(void *)v178 == v173) {
                            goto LABEL_273;
                          }
                          v178 += 8;
                        }
                        while (v178 != v175);
                        v178 = *(char **)(*(void *)a3 + 304);
LABEL_273:
                        while (*(void *)v177 != v174)
                        {
                          v177 += 8;
                          if (v177 == v175)
                          {
                            v177 = *(char **)(*(void *)a3 + 304);
                            break;
                          }
                        }
                      }
                      v169 += 48 * (v178 - v176 < v177 - v176);
                      if (v178 - v176 < v177 - v176) {
                        uint64_t v166 = v172;
                      }
                    }
                  }
                  long long v179 = *(_OWORD *)v169;
                  long long v180 = *(_OWORD *)(v169 + 16);
                  *(_OWORD *)((char *)v170 + 27) = *(_OWORD *)(v169 + 27);
                  _OWORD *v170 = v179;
                  v170[1] = v180;
                }
                while (v166 <= v168);
                a2 -= 3;
                if ((long long *)v169 == a2)
                {
                  *(_OWORD *)(v169 + 27) = *(_OWORD *)&v229[11];
                  *(_OWORD *)unint64_t v169 = v221;
                  *(_OWORD *)(v169 + 16) = *(_OWORD *)v229;
                }
                else
                {
                  long long v181 = *a2;
                  long long v182 = a2[1];
                  *(_OWORD *)(v169 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v169 = v181;
                  *(_OWORD *)(v169 + 16) = v182;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v229[11];
                  *a2 = v221;
                  a2[1] = *(_OWORD *)v229;
                  uint64_t v183 = v169 - v13 + 48;
                  if (v183 >= 49)
                  {
                    unint64_t v184 = (v183 / 0x30uLL - 2) >> 1;
                    unint64_t v185 = v13 + 48 * v184;
                    uint64_t v186 = *(void *)(v185 + 24);
                    uint64_t v187 = *(void *)(v169 + 24);
                    if (v186 != v187)
                    {
                      v189 = *(char **)(*(void *)a3 + 296);
                      v188 = *(char **)(*(void *)a3 + 304);
                      v190 = v189;
                      v191 = v189;
                      if (v189 != v188)
                      {
                        do
                        {
                          if (*(void *)v191 == v186) {
                            goto LABEL_286;
                          }
                          v191 += 8;
                        }
                        while (v191 != v188);
                        v191 = *(char **)(*(void *)a3 + 304);
LABEL_286:
                        while (*(void *)v190 != v187)
                        {
                          v190 += 8;
                          if (v190 == v188)
                          {
                            v190 = *(char **)(*(void *)a3 + 304);
                            break;
                          }
                        }
                      }
                      if (v191 - v189 < v190 - v189)
                      {
                        uint64_t v242 = *(void *)(v169 + 16);
                        long long v238 = *(_OWORD *)v169;
                        long long v233 = *(_OWORD *)(v169 + 32);
                        do
                        {
                          v192 = (_OWORD *)v169;
                          unint64_t v169 = v185;
                          long long v193 = *(_OWORD *)v185;
                          long long v194 = *(_OWORD *)(v185 + 16);
                          *(_OWORD *)((char *)v192 + 27) = *(_OWORD *)(v185 + 27);
                          _OWORD *v192 = v193;
                          v192[1] = v194;
                          if (!v184) {
                            break;
                          }
                          unint64_t v184 = (v184 - 1) >> 1;
                          unint64_t v185 = v13 + 48 * v184;
                          uint64_t v195 = *(void *)(v185 + 24);
                          if (v195 == v187) {
                            break;
                          }
                          v197 = *(char **)(*(void *)a3 + 296);
                          v196 = *(char **)(*(void *)a3 + 304);
                          v198 = v197;
                          v199 = v197;
                          if (v197 != v196)
                          {
                            do
                            {
                              if (*(void *)v199 == v195) {
                                goto LABEL_297;
                              }
                              v199 += 8;
                            }
                            while (v199 != v196);
                            v199 = *(char **)(*(void *)a3 + 304);
LABEL_297:
                            while (*(void *)v198 != v187)
                            {
                              v198 += 8;
                              if (v198 == v196)
                              {
                                v198 = *(char **)(*(void *)a3 + 304);
                                break;
                              }
                            }
                          }
                        }
                        while (v199 - v197 < v198 - v197);
                        *(_OWORD *)unint64_t v169 = v238;
                        *(void *)(v169 + 16) = v242;
                        *(void *)(v169 + 24) = v187;
                        *(void *)(v169 + 32) = v233;
                        *(_DWORD *)(v169 + 39) = *(_DWORD *)((char *)&v233 + 7);
                      }
                    }
                  }
                }
              }
              while (v165-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          double v17 = (long long *)(v13 + 48 * (v15 >> 1));
          if ((unint64_t)v14 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v15 >> 1)), a2 - 3, a3);
            uint64_t v18 = 3 * v16;
            char v19 = (long long *)(a1 + 48 * v16 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)(a1 + 48), v19, a2 - 6, a3);
            uint64_t v20 = (long long *)(a1 + 48 + 16 * v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)(a1 + 96), v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>(v19, v17, v20, a3);
            *(_OWORD *)v223 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v223[16] = *(_OWORD *)(a1 + 32);
            long long v216 = *(_OWORD *)a1;
            long long v21 = *(long long *)((char *)v17 + 27);
            long long v22 = v17[1];
            *(_OWORD *)a1 = *v17;
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(a1 + 27) = v21;
            *(long long *)((char *)v17 + 27) = *(_OWORD *)&v223[11];
            *double v17 = v216;
            v17[1] = *(_OWORD *)v223;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)(a1 + 48 * (v15 >> 1)), (long long *)a1, a2 - 3, a3);
          }
          --a4;
          if (a5)
          {
            uint64_t v23 = *(void *)(a1 + 24);
            uint64_t v24 = *(void *)a3;
            break;
          }
          uint64_t v25 = *(void *)(a1 - 24);
          uint64_t v23 = *(void *)(a1 + 24);
          if (v25 != v23)
          {
            uint64_t v24 = *(void *)a3;
            double v26 = *(char **)(*(void *)a3 + 296);
            double v27 = *(char **)(*(void *)a3 + 304);
            int v28 = v26;
            double v29 = v26;
            if (v26 != v27)
            {
              do
              {
                if (*(void *)v29 == v25) {
                  goto LABEL_16;
                }
                v29 += 8;
              }
              while (v29 != v27);
              double v29 = *(char **)(*(void *)a3 + 304);
LABEL_16:
              while (*(void *)v28 != v23)
              {
                v28 += 8;
                if (v28 == v27)
                {
                  int v28 = *(char **)(*(void *)a3 + 304);
                  break;
                }
              }
            }
            if (v29 - v26 < v28 - v26) {
              break;
            }
          }
          uint64_t v241 = *(void *)(a1 + 16);
          long long v232 = *(_OWORD *)(a1 + 32);
          long long v235 = *(_OWORD *)a1;
          uint64_t v67 = *((void *)a2 - 3);
          if (v23 == v67) {
            goto LABEL_107;
          }
          char v68 = *(char **)(*(void *)a3 + 296);
          unint64_t v69 = *(char **)(*(void *)a3 + 304);
          if (v68 == v69)
          {
            unint64_t v71 = *(char **)(*(void *)a3 + 296);
            unint64_t v70 = v71;
          }
          else
          {
            unint64_t v70 = *(char **)(*(void *)a3 + 296);
            while (*(void *)v70 != v23)
            {
              v70 += 8;
              if (v70 == v69)
              {
                unint64_t v70 = *(char **)(*(void *)a3 + 304);
                break;
              }
            }
            unint64_t v71 = *(char **)(*(void *)a3 + 296);
            while (*(void *)v71 != v67)
            {
              v71 += 8;
              if (v71 == v69)
              {
                unint64_t v71 = *(char **)(*(void *)a3 + 304);
                break;
              }
            }
          }
          if (v70 - v68 >= v71 - v68)
          {
LABEL_107:
            unint64_t v13 = a1 + 48;
            if (a1 + 48 < (unint64_t)a2)
            {
              uint64_t v75 = *(void *)a3;
              unint64_t v76 = a1;
              do
              {
                uint64_t v77 = *(void *)(v76 + 72);
                unint64_t v76 = v13;
                if (v23 != v77)
                {
                  double v78 = *(char **)(v75 + 296);
                  double v79 = *(char **)(v75 + 304);
                  long long v80 = v78;
                  long long v81 = v78;
                  if (v78 != v79)
                  {
                    do
                    {
                      if (*(void *)v81 == v23) {
                        goto LABEL_114;
                      }
                      v81 += 8;
                    }
                    while (v81 != v79);
                    long long v81 = *(char **)(v75 + 304);
LABEL_114:
                    while (*(void *)v80 != v77)
                    {
                      v80 += 8;
                      if (v80 == v79)
                      {
                        long long v80 = *(char **)(v75 + 304);
                        break;
                      }
                    }
                  }
                  if (v81 - v78 < v80 - v78) {
                    break;
                  }
                }
                v13 += 48;
              }
              while (v76 + 48 < (unint64_t)a2);
            }
          }
          else
          {
            unint64_t v13 = a1;
            do
            {
              do
              {
                uint64_t v72 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v72);
              if (v68 == v69)
              {
                uint64_t v74 = *(char **)(*(void *)a3 + 296);
                uint64_t v73 = v74;
              }
              else
              {
                uint64_t v73 = *(char **)(*(void *)a3 + 296);
                while (*(void *)v73 != v23)
                {
                  v73 += 8;
                  if (v73 == v69)
                  {
                    uint64_t v73 = *(char **)(*(void *)a3 + 304);
                    break;
                  }
                }
                uint64_t v74 = *(char **)(*(void *)a3 + 296);
                while (*(void *)v74 != v72)
                {
                  v74 += 8;
                  if (v74 == v69)
                  {
                    uint64_t v74 = *(char **)(*(void *)a3 + 304);
                    break;
                  }
                }
              }
            }
            while (v73 - v68 >= v74 - v68);
          }
          int v82 = a2;
          if (v13 < (unint64_t)a2)
          {
            uint64_t v83 = *(void *)a3;
            int v82 = a2;
            do
            {
              uint64_t v84 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v84) {
                break;
              }
              long long v85 = *(char **)(v83 + 296);
              long long v86 = *(char **)(v83 + 304);
              id v87 = v85;
              uint64_t v88 = v85;
              if (v85 != v86)
              {
                do
                {
                  if (*(void *)v88 == v23) {
                    goto LABEL_126;
                  }
                  v88 += 8;
                }
                while (v88 != v86);
                uint64_t v88 = *(char **)(v83 + 304);
LABEL_126:
                while (*(void *)v87 != v84)
                {
                  v87 += 8;
                  if (v87 == v86)
                  {
                    id v87 = *(char **)(v83 + 304);
                    break;
                  }
                }
              }
            }
            while (v88 - v85 < v87 - v85);
          }
          while (v13 < (unint64_t)v82)
          {
            *(_OWORD *)v225 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v225[16] = *(_OWORD *)(v13 + 32);
            long long v217 = *(_OWORD *)v13;
            long long v89 = *v82;
            long long v90 = v82[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v82 + 27);
            *(_OWORD *)unint64_t v13 = v89;
            *(_OWORD *)(v13 + 16) = v90;
            *(long long *)((char *)v82 + 27) = *(_OWORD *)&v225[11];
            *int v82 = v217;
            v82[1] = *(_OWORD *)v225;
            uint64_t v91 = *(void *)a3;
            do
            {
              do
              {
                uint64_t v92 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v92);
              unint64_t v93 = *(char **)(v91 + 296);
              unint64_t v94 = *(char **)(v91 + 304);
              if (v93 == v94)
              {
                unint64_t v96 = *(char **)(v91 + 296);
                uint64_t v95 = v96;
              }
              else
              {
                uint64_t v95 = *(char **)(v91 + 296);
                while (*(void *)v95 != v23)
                {
                  v95 += 8;
                  if (v95 == v94)
                  {
                    uint64_t v95 = *(char **)(v91 + 304);
                    break;
                  }
                }
                unint64_t v96 = *(char **)(v91 + 296);
                while (*(void *)v96 != v92)
                {
                  v96 += 8;
                  if (v96 == v94)
                  {
                    unint64_t v96 = *(char **)(v91 + 304);
                    break;
                  }
                }
              }
            }
            while (v95 - v93 >= v96 - v93);
            do
            {
              uint64_t v97 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v97) {
                break;
              }
              if (v93 == v94)
              {
                uint64_t v99 = v93;
                uint64_t v98 = v93;
              }
              else
              {
                uint64_t v98 = v93;
                while (*(void *)v98 != v23)
                {
                  v98 += 8;
                  if (v98 == v94)
                  {
                    uint64_t v98 = v94;
                    break;
                  }
                }
                uint64_t v99 = v93;
                while (*(void *)v99 != v97)
                {
                  v99 += 8;
                  if (v99 == v94)
                  {
                    uint64_t v99 = v94;
                    break;
                  }
                }
              }
            }
            while (v98 - v93 < v99 - v93);
          }
          int v100 = (long long *)(v13 - 48);
          BOOL v5 = v13 - 48 >= a1;
          BOOL v6 = v13 - 48 == a1;
          if (v13 - 48 != a1)
          {
            long long v101 = *v100;
            long long v102 = *(_OWORD *)(v13 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
            *(_OWORD *)a1 = v101;
            *(_OWORD *)(a1 + 16) = v102;
          }
          a5 = 0;
          *int v100 = v235;
          *(void *)(v13 - 32) = v241;
          *(void *)(v13 - 24) = v23;
          *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v232 + 7);
          *(void *)(v13 - 16) = v232;
        }
        uint64_t v240 = *(void *)(a1 + 16);
        long long v231 = *(_OWORD *)(a1 + 32);
        long long v234 = *(_OWORD *)a1;
        unint64_t v30 = a1;
        do
        {
          unint64_t v31 = v30;
          v30 += 48;
          uint64_t v32 = *(void *)(v31 + 72);
          if (v32 == v23) {
            break;
          }
          uint64_t v33 = *(char **)(v24 + 296);
          double v34 = *(char **)(v24 + 304);
          double v35 = v33;
          char v36 = v33;
          if (v33 != v34)
          {
            do
            {
              if (*(void *)v36 == v32) {
                goto LABEL_26;
              }
              v36 += 8;
            }
            while (v36 != v34);
            char v36 = *(char **)(v24 + 304);
LABEL_26:
            while (*(void *)v35 != v23)
            {
              v35 += 8;
              if (v35 == v34)
              {
                double v35 = *(char **)(v24 + 304);
                break;
              }
            }
          }
        }
        while (v36 - v33 < v35 - v33);
        double v37 = a2;
        if (v31 == a1)
        {
          double v37 = a2;
          if (v30 < (unint64_t)a2)
          {
            double v37 = a2;
            do
            {
              uint64_t v43 = *((void *)v37 - 3);
              v37 -= 3;
              if (v43 != v23)
              {
                uint64_t v44 = *(char **)(v24 + 296);
                uint64_t v45 = *(char **)(v24 + 304);
                uint64_t v46 = v44;
                long long v47 = v44;
                if (v44 != v45)
                {
                  do
                  {
                    if (*(void *)v47 == v43) {
                      goto LABEL_48;
                    }
                    v47 += 8;
                  }
                  while (v47 != v45);
                  long long v47 = *(char **)(v24 + 304);
LABEL_48:
                  while (*(void *)v46 != v23)
                  {
                    v46 += 8;
                    if (v46 == v45)
                    {
                      uint64_t v46 = *(char **)(v24 + 304);
                      break;
                    }
                  }
                }
                if (v47 - v44 < v46 - v44) {
                  break;
                }
              }
            }
            while (v30 < (unint64_t)v37);
          }
        }
        else
        {
          do
          {
            do
            {
              uint64_t v38 = *((void *)v37 - 3);
              v37 -= 3;
            }
            while (v38 == v23);
            double v39 = *(char **)(v24 + 296);
            double v40 = *(char **)(v24 + 304);
            double v41 = v39;
            double v42 = v39;
            if (v39 != v40)
            {
              do
              {
                if (*(void *)v42 == v38) {
                  goto LABEL_36;
                }
                v42 += 8;
              }
              while (v42 != v40);
              double v42 = *(char **)(v24 + 304);
LABEL_36:
              while (*(void *)v41 != v23)
              {
                v41 += 8;
                if (v41 == v40)
                {
                  double v41 = *(char **)(v24 + 304);
                  break;
                }
              }
            }
          }
          while (v42 - v39 >= v41 - v39);
        }
        unint64_t v13 = v30;
        if (v30 < (unint64_t)v37)
        {
          long long v48 = v37;
          do
          {
            *(_OWORD *)v224 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v224[16] = *(_OWORD *)(v13 + 32);
            long long v49 = *(_OWORD *)v13;
            long long v51 = *v48;
            long long v50 = v48[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v48 + 27);
            *(_OWORD *)unint64_t v13 = v51;
            *(_OWORD *)(v13 + 16) = v50;
            *(long long *)((char *)v48 + 27) = *(_OWORD *)&v224[11];
            *long long v48 = v49;
            v48[1] = *(_OWORD *)v224;
            uint64_t v52 = *(void *)a3;
            do
            {
              uint64_t v53 = *(void *)(v13 + 72);
              v13 += 48;
              if (v53 == v23) {
                break;
              }
              BOOL v54 = *(char **)(v52 + 296);
              BOOL v55 = *(char **)(v52 + 304);
              int v56 = v54;
              unint64_t v57 = v54;
              if (v54 != v55)
              {
                do
                {
                  if (*(void *)v57 == v53) {
                    goto LABEL_61;
                  }
                  v57 += 8;
                }
                while (v57 != v55);
                unint64_t v57 = *(char **)(v52 + 304);
LABEL_61:
                while (*(void *)v56 != v23)
                {
                  v56 += 8;
                  if (v56 == v55)
                  {
                    int v56 = *(char **)(v52 + 304);
                    break;
                  }
                }
              }
            }
            while (v57 - v54 < v56 - v54);
            do
            {
              do
              {
                uint64_t v58 = *((void *)v48 - 3);
                v48 -= 3;
              }
              while (v58 == v23);
              long long v59 = *(char **)(v52 + 296);
              double v60 = *(char **)(v52 + 304);
              char v61 = v59;
              id v62 = v59;
              if (v59 != v60)
              {
                do
                {
                  if (*(void *)v62 == v58) {
                    goto LABEL_70;
                  }
                  v62 += 8;
                }
                while (v62 != v60);
                id v62 = *(char **)(v52 + 304);
LABEL_70:
                while (*(void *)v61 != v23)
                {
                  v61 += 8;
                  if (v61 == v60)
                  {
                    char v61 = *(char **)(v52 + 304);
                    break;
                  }
                }
              }
            }
            while (v62 - v59 >= v61 - v59);
          }
          while (v13 < (unint64_t)v48);
        }
        long long v63 = (long long *)(v13 - 48);
        if (v13 - 48 != a1)
        {
          long long v64 = *v63;
          long long v65 = *(_OWORD *)(v13 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
          *(_OWORD *)a1 = v64;
          *(_OWORD *)(a1 + 16) = v65;
        }
        *long long v63 = v234;
        *(void *)(v13 - 32) = v240;
        *(void *)(v13 - 24) = v23;
        *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v231 + 7);
        *(void *)(v13 - 16) = v231;
        if (v30 >= (unint64_t)v37) {
          break;
        }
LABEL_80:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(a1, v13 - 48, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, v13 - 48, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_SampleRemainder*>(v13, (uint64_t)a2, a3))
      {
        break;
      }
      if (!v66) {
        goto LABEL_80;
      }
    }
    a2 = (long long *)(v13 - 48);
    if (!v66) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 - 24);
      uint64_t v9 = *(void *)(a1 + 24);
      if (v8 == v9) {
        return result;
      }
      id v10 = *(char **)(*(void *)a3 + 296);
      int v11 = *(char **)(*(void *)a3 + 304);
      unint64_t v12 = v10;
      unint64_t v13 = v10;
      if (v10 == v11) {
        goto LABEL_10;
      }
      do
      {
        if (*(void *)v13 == v8) {
          goto LABEL_7;
        }
        v13 += 8;
      }
      while (v13 != v11);
      unint64_t v13 = *(char **)(*(void *)a3 + 304);
      do
      {
LABEL_7:
        if (*(void *)v12 == v9) {
          goto LABEL_10;
        }
        v12 += 8;
      }
      while (v12 != v11);
      unint64_t v12 = *(char **)(*(void *)a3 + 304);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        uint64_t v14 = (long long *)(a2 - 48);
        long long v15 = *(_OWORD *)a1;
        *(_OWORD *)double v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        long long v16 = *(_OWORD *)(a2 - 21);
        long long v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *uint64_t v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(long long *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), a3);
      uint64_t v19 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      int v20 = 0;
      break;
  }
  while (1)
  {
    uint64_t v21 = *(void *)(v19 + 24);
    uint64_t v22 = *(void *)(v18 + 24);
    if (v21 != v22)
    {
      uint64_t v23 = *(char **)(*(void *)a3 + 296);
      uint64_t v24 = *(char **)(*(void *)a3 + 304);
      uint64_t v25 = v23;
      double v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(void *)v26 == v21) {
            goto LABEL_19;
          }
          v26 += 8;
        }
        while (v26 != v24);
        double v26 = *(char **)(*(void *)a3 + 304);
LABEL_19:
        while (*(void *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            uint64_t v25 = *(char **)(*(void *)a3 + 304);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        long long v34 = *(_OWORD *)v19;
        uint64_t v36 = *(void *)(v19 + 16);
        long long v37 = *(_OWORD *)(v19 + 32);
        uint64_t v27 = v19;
        while (1)
        {
          long long v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1) {
            break;
          }
          uint64_t v27 = v18;
          uint64_t v29 = *(void *)(v18 - 24);
          if (v21 != v29)
          {
            unint64_t v30 = *(char **)(*(void *)a3 + 296);
            unint64_t v31 = *(char **)(*(void *)a3 + 304);
            uint64_t v32 = v30;
            uint64_t v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(void *)v33 == v21) {
                  goto LABEL_30;
                }
                v33 += 8;
              }
              while (v33 != v31);
              uint64_t v33 = *(char **)(*(void *)a3 + 304);
LABEL_30:
              while (*(void *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  uint64_t v32 = *(char **)(*(void *)a3 + 304);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30) {
              continue;
            }
          }
          goto LABEL_36;
        }
        uint64_t v27 = a1;
LABEL_36:
        *(_OWORD *)uint64_t v27 = v34;
        *(void *)(v27 + 16) = v36;
        *(void *)(v27 + 24) = v21;
        *(void *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8) {
          return v19 + 48 == a2;
        }
      }
    }
    uint64_t v18 = v19;
    v19 += 48;
    if (v19 == a2) {
      return 1;
    }
  }
}

double HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::overallStatistics(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)a1, *(const void **)(a2 + 120), *(void *)(a2 + 128), (uint64_t)(*(void *)(a2 + 128) - *(void *)(a2 + 120)) >> 3);
  *(void *)(a1 + 80) = 0;
  long long v4 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 50) = *(_OWORD *)(a2 + 170);
  BOOL v5 = *(const void **)(a2 + 200);
  *(void *)(a1 + 72) = *(void *)(a2 + 192);
  uint64_t v6 = *(void *)(a2 + 208);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 80), v5, v6, (v6 - (uint64_t)v5) >> 4);
  double result = *(double *)(a2 + 224);
  *(double *)(a1 + 104) = result;
  return result;
}

void sub_1BD13C924(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  double v3 = *(void **)(a2 + 232);
  long long v47 = (void *)(a2 + 240);
  if (v3 == (void *)(a2 + 240)) {
    return;
  }
  long long v49 = (void *)(a1 + 16);
  do
  {
    BOOL v5 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a2, v3[4]);
    uint64_t v6 = v5;
    if (!v5) {
      goto LABEL_81;
    }
    unint64_t v7 = [v5 hash];
    unint64_t v8 = v7;
    unint64_t v9 = *(void *)(a1 + 8);
    if (!v9) {
      goto LABEL_21;
    }
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v50 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v2 = v7;
      if (v7 >= v9) {
        unint64_t v2 = v7 % v9;
      }
    }
    else
    {
      unint64_t v2 = (v9 - 1) & v7;
    }
    int v11 = *(uint64_t ***)(*(void *)a1 + 8 * v2);
    if (!v11 || (unint64_t v12 = *v11) == 0)
    {
LABEL_21:
      uint64_t v19 = (char *)operator new(0x88uLL);
      v51[0] = v19;
      v51[1] = v49;
      *(void *)uint64_t v19 = 0;
      *((void *)v19 + 1) = v8;
      *((void *)v19 + 2) = v6;
      *(_OWORD *)(v19 + 24) = 0u;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      *(_OWORD *)(v19 + 104) = 0u;
      *(_OWORD *)(v19 + 120) = 0u;
      char v52 = 1;
      float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v21 = *(float *)(a1 + 32);
      if (v9 && (float)(v21 * (float)v9) >= v20)
      {
LABEL_67:
        long long v37 = *(void **)(*(void *)a1 + 8 * v2);
        unint64_t v12 = (uint64_t *)v51[0];
        if (v37)
        {
          *(void *)v51[0] = *v37;
        }
        else
        {
          *(void *)v51[0] = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = v12;
          *(void *)(*(void *)a1 + 8 * v2) = v49;
          if (!*v12)
          {
LABEL_76:
            v51[0] = 0;
            ++*(void *)(a1 + 24);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v51);
            goto LABEL_77;
          }
          unint64_t v38 = *(void *)(*v12 + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v38 >= v9) {
              v38 %= v9;
            }
          }
          else
          {
            v38 &= v9 - 1;
          }
          long long v37 = (void *)(*(void *)a1 + 8 * v38);
        }
        *long long v37 = v12;
        goto LABEL_76;
      }
      BOOL v22 = (v9 & (v9 - 1)) != 0;
      if (v9 < 3) {
        BOOL v22 = 1;
      }
      unint64_t v23 = v22 | (2 * v9);
      unint64_t v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      else {
        int8x8_t prime = (int8x8_t)v23;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v9 = *(void *)(a1 + 8);
      if (*(void *)&prime > v9) {
        goto LABEL_33;
      }
      if (*(void *)&prime < v9)
      {
        unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          unint64_t v32 = std::__next_prime(v32);
        }
        else
        {
          uint64_t v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2) {
            unint64_t v32 = v34;
          }
        }
        if (*(void *)&prime <= v32) {
          int8x8_t prime = (int8x8_t)v32;
        }
        if (*(void *)&prime >= v9)
        {
          unint64_t v9 = *(void *)(a1 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            double v26 = operator new(8 * *(void *)&prime);
            uint64_t v27 = *(void **)a1;
            *(void *)a1 = v26;
            if (v27) {
              operator delete(v27);
            }
            uint64_t v28 = 0;
            *(int8x8_t *)(a1 + 8) = prime;
            do
              *(void *)(*(void *)a1 + 8 * v28++) = 0;
            while (*(void *)&prime != v28);
            uint64_t v29 = (void *)*v49;
            if (*v49)
            {
              unint64_t v30 = v29[1];
              uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(void *)&prime) {
                  v30 %= *(void *)&prime;
                }
              }
              else
              {
                v30 &= *(void *)&prime - 1;
              }
              *(void *)(*(void *)a1 + 8 * v30) = v49;
              double v35 = (void *)*v29;
              if (*v29)
              {
                do
                {
                  unint64_t v36 = v35[1];
                  if (v31.u32[0] > 1uLL)
                  {
                    if (v36 >= *(void *)&prime) {
                      v36 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v36 &= *(void *)&prime - 1;
                  }
                  if (v36 != v30)
                  {
                    if (!*(void *)(*(void *)a1 + 8 * v36))
                    {
                      *(void *)(*(void *)a1 + 8 * v36) = v29;
                      goto LABEL_58;
                    }
                    *uint64_t v29 = *v35;
                    *double v35 = **(void **)(*(void *)a1 + 8 * v36);
                    **(void **)(*(void *)a1 + 8 * v36) = v35;
                    double v35 = v29;
                  }
                  unint64_t v36 = v30;
LABEL_58:
                  uint64_t v29 = v35;
                  double v35 = (void *)*v35;
                  unint64_t v30 = v36;
                }
                while (v35);
              }
            }
            unint64_t v9 = (unint64_t)prime;
            goto LABEL_62;
          }
          uint64_t v46 = *(void **)a1;
          *(void *)a1 = 0;
          if (v46) {
            operator delete(v46);
          }
          unint64_t v9 = 0;
          *(void *)(a1 + 8) = 0;
        }
      }
LABEL_62:
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v8 >= v9) {
          unint64_t v2 = v8 % v9;
        }
        else {
          unint64_t v2 = v8;
        }
      }
      else
      {
        unint64_t v2 = (v9 - 1) & v8;
      }
      goto LABEL_67;
    }
    while (1)
    {
      unint64_t v13 = v12[1];
      if (v13 == v8) {
        break;
      }
      if (v50 > 1)
      {
        if (v13 >= v9) {
          v13 %= v9;
        }
      }
      else
      {
        v13 &= v9 - 1;
      }
      if (v13 != v2) {
        goto LABEL_21;
      }
LABEL_20:
      unint64_t v12 = (uint64_t *)*v12;
      if (!v12) {
        goto LABEL_21;
      }
    }
    id v14 = (id)v12[2];
    long long v15 = v6;
    id v16 = v6;
    long long v17 = v16;
    if (v14 != v16)
    {
      char v18 = [v14 isEqualToString:v16];

      uint64_t v6 = v15;
      if (v18) {
        goto LABEL_77;
      }
      goto LABEL_20;
    }

    uint64_t v6 = v15;
LABEL_77:
    if (v12 + 2 == v3 + 4)
    {
      long long v41 = *((_OWORD *)v3 + 4);
      long long v42 = *((_OWORD *)v3 + 5);
      *(_OWORD *)((char *)v12 + 74) = *(_OWORD *)((char *)v3 + 90);
      *((_OWORD *)v12 + 3) = v41;
      *((_OWORD *)v12 + 4) = v42;
      v12[12] = v3[14];
    }
    else
    {
      std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((char *)v12 + 24, (char *)v3[5], v3[6], (uint64_t)(v3[6] - v3[5]) >> 3);
      long long v39 = *((_OWORD *)v3 + 4);
      long long v40 = *((_OWORD *)v3 + 5);
      *(_OWORD *)((char *)v12 + 74) = *(_OWORD *)((char *)v3 + 90);
      *((_OWORD *)v12 + 3) = v39;
      *((_OWORD *)v12 + 4) = v40;
      v12[12] = v3[14];
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)v12 + 104, (char *)v3[15], v3[16], (uint64_t)(v3[16] - v3[15]) >> 4);
    }
    v12[16] = v3[18];

LABEL_81:
    uint64_t v43 = (void *)v3[1];
    if (v43)
    {
      do
      {
        uint64_t v44 = v43;
        uint64_t v43 = (void *)*v43;
      }
      while (v43);
    }
    else
    {
      do
      {
        uint64_t v44 = (void *)v3[2];
        BOOL v45 = *v44 == (void)v3;
        double v3 = v44;
      }
      while (!v45);
    }
    double v3 = v44;
  }
  while (v44 != v47);
}

void sub_1BD13CEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);

  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>::~__hash_table(v6);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,0>(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }
  double v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(void *)(a1 + 16) = v3;
    operator delete(v3);
  }
  long long v4 = *(void **)a1;
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      double v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  long long v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1725A30;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1725A30;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C187B8A0);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1F1725A30;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BD13D1B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1725A30;
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48))(v1) + 72;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsPercentiles const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1725AC0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsPercentiles const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1725AC0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C187B8A0);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsPercentiles const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1F1725AC0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BD13D44C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsPercentiles const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1725AC0;
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsPercentiles const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsPercentiles const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsPercentiles const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  unint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsPercentiles const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsPercentiles const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsPercentiles const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::~__func()
{
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1F1725B50;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1725B50;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 592))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a4, 3, @"Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date");
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  }
  double v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(void *)(a1 + 40) && a3) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_advanceToTime(a1, v8);
    }
    HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    unint64_t v9 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    uint64_t v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v9, a4);
  }
  return v10;
}

void sub_1BD13D85C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_advanceToTime(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 128) <= a2)
  {
    uint64_t v4 = a1 + 112;
    uint64_t v5 = a1 + 120;
    do
    {
      uint64_t v6 = *(void *)(a1 + 568);
      uint64_t v7 = *(void *)(a1 + 560);
      if (v6 == v7)
      {
        uint64_t v22 = 0;
        long long v15 = *(void **)(a1 + 40);
        id v16 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a2];
        double v8 = [v15 dateIntervalContainingDate:v16 index:&v22];

        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        unint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v17 = v22;
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v19 = v18;
        float v20 = [v8 endDate];
        [v20 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::resetToBucket(v4, v17, v19, v21);
      }
      else
      {
        double v8 = [*(id *)(a1 + 40) dateIntervalAtIndex:*(void *)(a1 + 112) + 1];
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        unint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v12 = v11;
        unint64_t v13 = [v8 endDate];
        [v13 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::advanceBucket(v4, v12, v14);
      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_didChangeBucket(a1, v9);
      if (v6 != v7) {
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
      }
    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1BD13DA68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  char v3 = *(unsigned char *)(a2 + 32);
  if (v3)
  {
    uint64_t v5 = a1 + 8;
    double v6 = *(double *)(a2 + 8);
    if (v6 >= *(double *)(a1 + 8))
    {
      uint64_t v7 = *(uint64_t **)a2;
      double v8 = *(double *)(a2 + 16);
      unint64_t v9 = *(void *)(a2 + 24);
      char v10 = *(unsigned char *)(a2 + 33);
      double v11 = *(double *)(a1 + 16);
      if (*(_DWORD *)(a1 + 36)) {
        BOOL v12 = v6 < v11;
      }
      else {
        BOOL v12 = v6 <= v11;
      }
      if (v12)
      {
        if (v8 <= v11) {
          double v14 = *(double *)(a2 + 16);
        }
        else {
          double v14 = *(double *)(a1 + 16);
        }
        std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 264, *(void *)(a2 + 24), v9);
        long long v15 = *(char **)(a1 + 112);
        if (v15 == *(char **)(a1 + 104) && (uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) <= 0)
        {
          double v33 = *(double *)(a1 + 8);
          double v34 = *(double *)(a1 + 16);
          if (v6 >= v33) {
            double v33 = v6;
          }
          if (v34 >= v14) {
            double v34 = v14;
          }
          *(double *)(a1 + 48) = v33;
          *(double *)(a1 + 56) = v34;
        }
        else
        {
          if (v6 < *(double *)(a1 + 48))
          {
            double v16 = *(double *)(a1 + 8);
            if (v6 >= v16) {
              double v16 = v6;
            }
            *(double *)(a1 + 48) = v16;
          }
          if (v14 > *(double *)(a1 + 56))
          {
            double v17 = *(double *)(a1 + 16);
            if (v17 >= v14) {
              double v17 = v14;
            }
            *(double *)(a1 + 56) = v17;
          }
        }
        if (*(unsigned char *)(a1 + 32))
        {
          double v35 = *(double *)(a1 + 64);
          if (v6 < v35) {
            double v35 = v6;
          }
          *(double *)(a1 + 64) = v35;
        }
        if (a3 && v6 < *(double *)(a1 + 16))
        {
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, v6);
          long long v15 = *(char **)(a1 + 112);
        }
        unint64_t v36 = *(void *)(a1 + 120);
        if ((unint64_t)v15 >= v36)
        {
          unint64_t v38 = 0x555555555555555;
          long long v39 = *(char **)(a1 + 104);
          unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v39) >> 4);
          unint64_t v41 = v40 + 1;
          if (v40 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - (void)v39) >> 4);
          if (2 * v42 > v41) {
            unint64_t v41 = 2 * v42;
          }
          if (v42 < 0x2AAAAAAAAAAAAAALL) {
            unint64_t v38 = v41;
          }
          if (v38)
          {
            unint64_t v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v38);
            long long v39 = *(char **)(a1 + 104);
            long long v15 = *(char **)(a1 + 112);
          }
          else
          {
            uint64_t v43 = 0;
          }
          unint64_t v44 = v38 + 48 * v40;
          *(void *)unint64_t v44 = v7;
          *(double *)(v44 + 8) = v6;
          *(double *)(v44 + 16) = v14;
          *(void *)(v44 + 24) = v9;
          unint64_t v45 = v38 + 48 * v43;
          *(unsigned char *)(v44 + 32) = v3;
          *(unsigned char *)(v44 + 33) = v10;
          *(_WORD *)(v44 + 40) = 0;
          *(unsigned char *)(v44 + 42) = 0;
          long long v37 = (void *)(v44 + 48);
          if (v15 != v39)
          {
            do
            {
              long long v46 = *((_OWORD *)v15 - 3);
              long long v47 = *((_OWORD *)v15 - 2);
              *(_OWORD *)(v44 - 21) = *(_OWORD *)(v15 - 21);
              *(_OWORD *)(v44 - 48) = v46;
              *(_OWORD *)(v44 - 32) = v47;
              v44 -= 48;
              v15 -= 48;
            }
            while (v15 != v39);
            long long v39 = *(char **)(a1 + 104);
          }
          *(void *)(a1 + 104) = v44;
          *(void *)(a1 + 112) = v37;
          *(void *)(a1 + 120) = v45;
          if (v39) {
            operator delete(v39);
          }
        }
        else
        {
          *(void *)long long v15 = v7;
          *((double *)v15 + 1) = v6;
          *((double *)v15 + 2) = v14;
          *((void *)v15 + 3) = v9;
          v15[32] = v3;
          v15[33] = v10;
          *((_WORD *)v15 + 20) = 0;
          long long v37 = v15 + 48;
          v15[42] = 0;
        }
        *(void *)(a1 + 112) = v37;
        if (!*(unsigned char *)(a1 + 192) || *(double *)(a1 + 168) <= v6)
        {
          *(void *)(a1 + 160) = v7;
          *(double *)(a1 + 168) = v6;
          *(double *)(a1 + 176) = v8;
          *(void *)(a1 + 184) = v9;
          *(unsigned char *)(a1 + 192) = v3;
          *(unsigned char *)(a1 + 193) = v10;
        }
        if (*(unsigned char *)(a1 + 33))
        {
          unint64_t v48 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(v5, v9);
          long long v49 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_statisticsForSource(v5, v48);
          if (!*((unsigned char *)v49 + 64) || *((double *)v49 + 5) <= v6)
          {
            v49[4] = v7;
            *((double *)v49 + 5) = v6;
            *((double *)v49 + 6) = v8;
            v49[7] = (uint64_t *)v9;
            *((unsigned char *)v49 + 64) = v3;
            *((unsigned char *)v49 + 65) = v10;
          }
        }
      }
      else
      {
        if (v6 < v11) {
          double v6 = *(double *)(a1 + 16);
        }
        unint64_t v18 = *(void *)(a1 + 456);
        unint64_t v19 = *(void *)(a1 + 464);
        if (v18 >= v19)
        {
          uint64_t v21 = *(void *)(a1 + 448);
          unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v21) >> 3);
          unint64_t v23 = v22 + 1;
          if (v22 + 1 > 0x666666666666666) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v21) >> 3);
          if (2 * v24 > v23) {
            unint64_t v23 = 2 * v24;
          }
          if (v24 >= 0x333333333333333) {
            unint64_t v25 = 0x666666666666666;
          }
          else {
            unint64_t v25 = v23;
          }
          if (v25) {
            unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v25);
          }
          else {
            uint64_t v26 = 0;
          }
          unint64_t v27 = v25 + 40 * v22;
          unint64_t v28 = v25 + 40 * v26;
          *(void *)unint64_t v27 = v7;
          *(double *)(v27 + 8) = v6;
          *(double *)(v27 + 16) = v8;
          *(void *)(v27 + 24) = v9;
          *(unsigned char *)(v27 + 32) = v3;
          *(unsigned char *)(v27 + 33) = v10;
          unint64_t v20 = v27 + 40;
          unint64_t v30 = *(char **)(a1 + 448);
          uint64_t v29 = *(char **)(a1 + 456);
          if (v29 != v30)
          {
            do
            {
              long long v31 = *(_OWORD *)(v29 - 40);
              long long v32 = *(_OWORD *)(v29 - 24);
              *(_WORD *)(v27 - 8) = *((_WORD *)v29 - 4);
              *(_OWORD *)(v27 - 24) = v32;
              *(_OWORD *)(v27 - 40) = v31;
              v27 -= 40;
              v29 -= 40;
            }
            while (v29 != v30);
            uint64_t v29 = *(char **)(a1 + 448);
          }
          *(void *)(a1 + 448) = v27;
          *(void *)(a1 + 456) = v20;
          *(void *)(a1 + 464) = v28;
          if (v29) {
            operator delete(v29);
          }
        }
        else
        {
          *(void *)unint64_t v18 = v7;
          *(double *)(v18 + 8) = v6;
          *(double *)(v18 + 16) = v8;
          *(void *)(v18 + 24) = v9;
          *(unsigned char *)(v18 + 32) = v3;
          unint64_t v20 = v18 + 40;
          *(unsigned char *)(v18 + 33) = v10;
        }
        *(void *)(a1 + 456) = v20;
      }
    }
  }
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 594))
  {
    *(unsigned char *)(a1 + 596) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 596) = 0;
    unint64_t v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      uint64_t v4 = v2;
      char v3 = (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      if (v3) {
        v4[2](v4, v3);
      }

      unint64_t v2 = v4;
    }
  }
}

void sub_1BD13DF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  unint64_t v9 = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 448), *(void *)(a1 + 456), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 456) - *(void *)(a1 + 448)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::resetToBucket(a1, *(void *)a1 + 1, a2, a3);
  double v6 = v9;
  uint64_t v7 = v10;
  if (v9 != v10)
  {
    uint64_t v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BD13E064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  objc_storeStrong((id *)(a1 + 472), *(id *)(a1 + 40));
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  uint64_t v8 = *(void **)(a1 + 128);
  if (v8)
  {
    *(void *)(a1 + 136) = v8;
    operator delete(v8);
  }
  unint64_t v9 = *(void **)(a1 + 208);
  *(void *)(a1 + 200) = 0;
  long long v10 = 0uLL;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_WORD *)(a1 + 192) = 0;
  if (v9)
  {
    *(void *)(a1 + 216) = v9;
    operator delete(v9);
    long long v10 = 0uLL;
  }
  *(_OWORD *)(a1 + 208) = v10;
  *(_OWORD *)(a1 + 224) = v10;
  if (*(void *)(a1 + 256))
  {
    uint64_t v11 = *(void *)(a1 + 248);
    BOOL v12 = *(void **)(a1 + 240);
    *(void *)(a1 + 240) = a1 + 248;
    *(void *)(v11 + 16) = 0;
    *(void *)(a1 + 248) = 0;
    *(void *)(a1 + 256) = 0;
    if (v12[1]) {
      unint64_t v13 = (void *)v12[1];
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      double v14 = (void *)v13[2];
      if (v14)
      {
        long long v15 = (void *)*v14;
        if ((void *)*v14 == v13)
        {
          *double v14 = 0;
          while (1)
          {
            double v17 = (void *)v14[1];
            if (!v17) {
              break;
            }
            do
            {
              double v14 = v17;
              double v17 = (void *)*v17;
            }
            while (v17);
          }
        }
        else
        {
          for (v14[1] = 0; v15; long long v15 = (void *)v14[1])
          {
            do
            {
              double v14 = v15;
              long long v15 = (void *)*v15;
            }
            while (v15);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>::destroy(v13);
        for (uint64_t i = (void *)v14[2]; i; uint64_t i = (void *)i[2])
          double v14 = i;
        unint64_t v13 = v14;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>::destroy(v13);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::setStatisticsConfiguration(a1 + 8, *(void **)(a1 + 472));
  *(void *)(a1 + 456) = *(void *)(a1 + 448);
  *(void *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 596))
  {
    if (v3)
    {
      id v6 = v3;
      uint64_t v4 = _Block_copy(*(const void **)(a1 + 96));
      uint64_t v5 = v4;
      if (v4) {
        (*((void (**)(void *, id))v4 + 2))(v4, v6);
      }

      id v3 = v6;
    }
    *(unsigned char *)(a1 + 596) = 0;
  }
}

void sub_1BD13E260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 startDate];
  id v6 = [v4 startDate];
  uint64_t v7 = [v5 compare:v6];

  return v7;
}

void sub_1BD13E2E8(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 13);
  if (WeakRetained)
  {
    if (v5
      && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_currentBucketInterval((uint64_t)a1),
          (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v8 = [v5 endDate];
      unint64_t v9 = [v7 startDate];
      if (objc_msgSend(v8, "hk_isAfterDate:", v9))
      {
        long long v10 = [v5 startDate];
        uint64_t v11 = [v7 endDate];
        char v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);
      }
      else
      {
        char v12 = 0;
      }

      unint64_t v13 = _Block_copy(a1[12]);
      if ((v12 & 1) == 0) {
        operator new();
      }
    }
    else
    {
      unint64_t v13 = _Block_copy(a1[12]);
    }
    *((unsigned char *)a1 + 592) = 1;
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
    v27[3] = &unk_1E6308FF8;
    id v15 = v5;
    id v28 = v15;
    id v16 = v13;
    id v29 = v16;
    (*((void (**)(id *, void *))*a1 + 9))(a1, v27);
    if (v5)
    {
      double v17 = [v15 startDate];
      [v17 timeIntervalSinceReferenceDate];
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_configureForStartTime((uint64_t)a1);
    }
    else
    {
      (*((void (**)(id *))*a1 + 4))(a1);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
    v21[3] = &unk_1E6309060;
    unint64_t v24 = a1;
    id v5 = v15;
    char v26 = 1;
    id v22 = v5;
    unint64_t v25 = a1;
    id v23 = WeakRetained;
    uint64_t v14 = (*((uint64_t (**)(id *, void *, uint64_t))*a1 + 14))(a1, v21, a3);
    unint64_t v18 = _Block_copy(v16);
    id v19 = a1[12];
    a1[12] = v18;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to invalidate interval: no data source available.");
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1BD13E738(_Unwind_Exception *a1)
{
  MEMORY[0x1C187B8A0](v4, 0x10F1C408D405208);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_11;
  }
  id v3 = [v10 endDate];
  uint64_t v4 = [*(id *)(a1 + 32) startDate];
  char v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    id v6 = [v10 startDate];
    uint64_t v7 = [*(id *)(a1 + 32) endDate];
    char v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_11:
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9) {
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
      }
    }
  }
}

void sub_1BD13E91C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = [*(id *)(a1 + 32) startDate];
  [v5 timeIntervalSinceReferenceDate];
  uint64_t v7 = v6;

  char v8 = [*(id *)(a1 + 32) endDate];
  [v8 timeIntervalSinceReferenceDate];
  uint64_t v10 = v9;

  uint64_t v11 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  uint64_t v13 = *(void *)(a1 + 32);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  char v32 = *(unsigned char *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  uint64_t v31 = *(void *)(a1 + 56);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  void v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  uint64_t v14 = [v11 collectionCalculator:WeakRetained queryForInterval:v13 error:a2 sampleHandler:v30 mergeHandler:v29];

  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15 != v4)
    {
      id v16 = [*(id *)(a1 + 32) endDate];
      [v16 timeIntervalSinceReferenceDate];
      if (*(void *)(v15 + 40))
      {
        double v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          id v19 = [*(id *)(v15 + 40) dateIntervalAtIndex:*(void *)(v15 + 112) + 1];
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          unint64_t v20 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(v15, v15 + 120);
          uint64_t v21 = [v19 startDate];
          [v21 timeIntervalSinceReferenceDate];
          double v23 = v22;
          unint64_t v24 = [v19 endDate];
          [v24 timeIntervalSinceReferenceDate];
          HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            char v26 = _Block_copy(*(const void **)(v15 + 96));
            unint64_t v27 = v26;
            if (v26) {
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);
            }
          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_didChangeBucket(v15, 0);
        }
      }
    }
  }
  return v14;
}

void sub_1BD13EBC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7 = *(double *)(a1 + 32);
  if (v7 > a6)
  {
    a2 = 0;
    int v8 = 0;
    a7 = 0.0;
    a5 = 0.0;
    double v9 = 0.0;
  }
  else
  {
    int v8 = 1;
    double v9 = a6;
  }
  double v13 = a5;
  double v14 = v9;
  double v15 = a7;
  uint64_t v16 = a2;
  char v17 = v8;
  char v18 = 0;
  if (*(unsigned char *)(a1 + 56))
  {
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v13, a3, a4);
    }
  }
  else
  {
    BOOL v11 = v7 <= a6;
    double v12 = *(double *)(a1 + 40);
    if (v9 >= v12) {
      BOOL v11 = 0;
    }
    if (!v11 || a7 <= v12) {
      double v12 = a7;
    }
    double v14 = v9;
    double v15 = v12;
    char v17 = v11;
    if (v11) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v13, a3, a4);
    }
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 592)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  }
  if (*(void *)(a1 + 40)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_advanceToTime(a1, a2);
  }
  if (*(double *)(a1 + 128) > a2)
  {
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 32) < *(double *)(v10 + 8))
                {
                  uint64_t v129 = *(void *)(v10 + 32);
                  long long v113 = *(_OWORD *)v10;
                  long long v121 = *(_OWORD *)(v10 + 16);
                  long long v52 = *(_OWORD *)(a2 - 40);
                  long long v53 = *(_OWORD *)(a2 - 24);
                  *(_WORD *)(v10 + 32) = *(_WORD *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(_WORD *)(a2 - 8) = v129;
                  *(_OWORD *)(a2 - 24) = v121;
                  *(_OWORD *)(a2 - 40) = v113;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v10, (double *)(v10 + 40), (double *)(a2 - 40));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, v10 + 120, a2 - 40);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            BOOL v54 = (void *)(v10 + 40);
            BOOL v56 = v10 == a2 || v54 == (void *)a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  long long v59 = v54;
                  double v60 = *(double *)(v58 + 48);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *v54;
                    long long v114 = *(_OWORD *)(v58 + 56);
                    uint64_t v122 = *(void *)(v58 + 72);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      uint64_t v63 = v10 + v62;
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      *(_OWORD *)(v63 + 40) = *(_OWORD *)(v10 + v62);
                      *(_OWORD *)(v63 + 56) = v64;
                      *(_WORD *)(v63 + 72) = *(_WORD *)(v10 + v62 + 32);
                      if (!v62) {
                        break;
                      }
                      v62 -= 40;
                      if (v60 >= *(double *)(v63 - 32))
                      {
                        uint64_t v65 = v10 + v62 + 40;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = v114;
                    *(_WORD *)(v65 + 32) = v122;
                  }
                  BOOL v54 = v59 + 5;
                  v57 += 40;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 5 != (void *)a2);
              }
            }
            else if (!v56)
            {
              do
              {
                uint64_t v98 = v54;
                double v99 = *(double *)(a1 + 48);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *v54;
                  long long v117 = *(_OWORD *)(a1 + 56);
                  uint64_t v125 = *(void *)(a1 + 72);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(_OWORD *)(v101 - 3);
                    *(_OWORD *)long long v101 = *(_OWORD *)(v101 - 5);
                    *((_OWORD *)v101 + 1) = v102;
                    *((_WORD *)v101 + 16) = *((_WORD *)v101 - 4);
                    double v103 = *((double *)v101 - 9);
                    v101 -= 5;
                  }
                  while (v99 < v103);
                  void *v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *((_WORD *)v101 + 16) = v125;
                  *((_OWORD *)v101 + 1) = v117;
                }
                v54 += 5;
                a1 = (unint64_t)v98;
              }
              while (v98 + 5 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 40 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v10 + 40 * v69 + 8) < *(double *)(v70 + 48))
                  {
                    v70 += 40;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  double v71 = *(double *)(v10 + 40 * v68 + 8);
                  if (*(double *)(v70 + 8) >= v71)
                  {
                    unint64_t v72 = v10 + 40 * v68;
                    uint64_t v73 = *(void *)v72;
                    uint64_t v123 = *(void *)(v72 + 32);
                    long long v115 = *(_OWORD *)(v72 + 16);
                    do
                    {
                      unint64_t v74 = v72;
                      unint64_t v72 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_WORD *)(v74 + 32) = *(_WORD *)(v70 + 32);
                      *(_OWORD *)unint64_t v74 = v75;
                      *(_OWORD *)(v74 + 16) = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 40 * v77;
                      uint64_t v78 = 2 * v69 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v10 + 40 * v77 + 8) < *(double *)(v70 + 48))
                      {
                        v70 += 40;
                        uint64_t v77 = v78;
                      }
                      uint64_t v69 = v77;
                    }
                    while (*(double *)(v70 + 8) >= v71);
                    *(void *)unint64_t v72 = v73;
                    *(double *)(v72 + 8) = v71;
                    *(_OWORD *)(v72 + 16) = v115;
                    *(_WORD *)(v72 + 32) = v123;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x28uLL;
              do
              {
                uint64_t v80 = 0;
                uint64_t v130 = *(void *)(v10 + 32);
                long long v116 = *(_OWORD *)v10;
                long long v124 = *(_OWORD *)(v10 + 16);
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = v81;
                  uint64_t v83 = v80 + 1;
                  v81 += 40 * (v80 + 1);
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v85 = v84 + 2;
                  if (v85 < v79 && *(double *)(v82 + 40 * v83 + 8) < *(double *)(v81 + 48))
                  {
                    v81 += 40;
                    uint64_t v80 = v85;
                  }
                  long long v86 = *(_OWORD *)v81;
                  long long v87 = *(_OWORD *)(v81 + 16);
                  *(_WORD *)(v82 + 32) = *(_WORD *)(v81 + 32);
                  *(_OWORD *)unint64_t v82 = v86;
                  *(_OWORD *)(v82 + 16) = v87;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 40;
                if (v81 == a2)
                {
                  *(_WORD *)(v81 + 32) = v130;
                  *(_OWORD *)unint64_t v81 = v116;
                  *(_OWORD *)(v81 + 16) = v124;
                }
                else
                {
                  long long v88 = *(_OWORD *)a2;
                  long long v89 = *(_OWORD *)(a2 + 16);
                  *(_WORD *)(v81 + 32) = *(_WORD *)(a2 + 32);
                  *(_OWORD *)unint64_t v81 = v88;
                  *(_OWORD *)(v81 + 16) = v89;
                  *(_WORD *)(a2 + 32) = v130;
                  *(_OWORD *)a2 = v116;
                  *(_OWORD *)(a2 + 16) = v124;
                  uint64_t v90 = v81 - v10 + 40;
                  if (v90 >= 41)
                  {
                    unint64_t v91 = (v90 / 0x28uLL - 2) >> 1;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v10 + 40 * v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      uint64_t v109 = *(void *)(v81 + 32);
                      long long v106 = *(_OWORD *)(v81 + 16);
                      do
                      {
                        unint64_t v94 = v81;
                        unint64_t v81 = v10 + 40 * v91;
                        long long v95 = *(_OWORD *)v81;
                        long long v96 = *(_OWORD *)(v81 + 16);
                        *(_WORD *)(v94 + 32) = *(_WORD *)(v81 + 32);
                        *(_OWORD *)unint64_t v94 = v95;
                        *(_OWORD *)(v94 + 16) = v96;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 40 * v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_WORD *)(v81 + 32) = v109;
                      *(_OWORD *)(v81 + 16) = v106;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40 * (v12 >> 1)), (double *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            uint64_t v16 = (double *)(a1 + 40 * v13 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40), v16, (double *)(a2 - 80));
            char v17 = (double *)(a1 + 40 + 8 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 80), v17, (double *)(a2 - 120));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v16, (double *)v14, v17);
            uint64_t v126 = *(void *)(a1 + 32);
            long long v110 = *(_OWORD *)a1;
            long long v118 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 16) = v19;
            *(_WORD *)(v14 + 32) = v126;
            *(_OWORD *)unint64_t v14 = v110;
            *(_OWORD *)(v14 + 16) = v118;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40 * (v12 >> 1)), (double *)a1, (double *)(a2 - 40));
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 32) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          long long v105 = *(_OWORD *)(a1 + 16);
          uint64_t v108 = *(void *)(a1 + 32);
          if (v20 >= *(double *)(a2 - 32))
          {
            unint64_t v41 = a1 + 40;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 40;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 40;
              double v40 = *(double *)(v39 + 48);
              v39 += 40;
            }
            while (v20 >= v40);
          }
          unint64_t v43 = a2;
          if (v10 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              unint64_t v43 = v44 - 40;
              double v45 = *(double *)(v44 - 32);
              v44 -= 40;
            }
            while (v20 < v45);
          }
          while (v10 < v43)
          {
            uint64_t v128 = *(void *)(v10 + 32);
            long long v112 = *(_OWORD *)v10;
            long long v120 = *(_OWORD *)(v10 + 16);
            long long v46 = *(_OWORD *)v43;
            long long v47 = *(_OWORD *)(v43 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v43 + 32);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(_WORD *)(v43 + 32) = v128;
            *(_OWORD *)unint64_t v43 = v112;
            *(_OWORD *)(v43 + 16) = v120;
            do
            {
              double v48 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *(double *)(v43 - 32);
              v43 -= 40;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 40);
            long long v51 = *(_OWORD *)(v10 - 24);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 40) = v38;
          *(double *)(v10 - 32) = v20;
          *(_WORD *)(v10 - 8) = v108;
          *(_OWORD *)(v10 - 24) = v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        long long v104 = *(_OWORD *)(a1 + 16);
        uint64_t v107 = *(void *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 48);
          v21 += 40;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        unint64_t v25 = a2;
        if (v21 == 40)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 40;
            double v29 = *(double *)(v28 - 32);
            v28 -= 40;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 40;
            double v27 = *(double *)(v25 - 32);
            v25 -= 40;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v127 = *(void *)(v10 + 32);
            long long v111 = *(_OWORD *)v10;
            long long v119 = *(_OWORD *)(v10 + 16);
            long long v31 = *(_OWORD *)v30;
            long long v32 = *(_OWORD *)(v30 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v30 + 32);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(_WORD *)(v30 + 32) = v127;
            *(_OWORD *)unint64_t v30 = v111;
            *(_OWORD *)(v30 + 16) = v119;
            do
            {
              double v33 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v33 < v20);
            do
            {
              double v34 = *(double *)(v30 - 32);
              v30 -= 40;
            }
            while (v34 >= v20);
          }
          while (v10 < v30);
        }
        if (v10 - 40 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 40);
          long long v36 = *(_OWORD *)(v10 - 24);
          *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 40) = v22;
        *(double *)(v10 - 32) = v20;
        *(_WORD *)(v10 - 8) = v107;
        *(_OWORD *)(v10 - 24) = v104;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 40;
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        __int16 v9 = *(_WORD *)(a2 - 8);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      uint64_t v16 = *(void *)v12;
      long long v21 = *(_OWORD *)(v12 + 16);
      uint64_t v22 = *(void *)(v12 + 32);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(void *)uint64_t v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(void *a1, uint64_t a2)
{
  id v3 = (void *)a1[5];
  uint64_t v4 = a1[6];
  BOOL v5 = (void *)a1[4];
  uint64_t v6 = [v5 dateInterval];
  void v9[4] = v4;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  uint64_t v7 = [v3 collectionCalculator:v5 queryForInterval:v6 error:a2 sampleHandler:v10 mergeHandler:v9];

  return v7;
}

void sub_1BD13F924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10 = *(void *)(a1 + 32);
  *(double *)int v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  char v15 = 1;
  uint64_t v11 = [MEMORY[0x1E4F1C9C8] distantFuture];
  [v11 timeIntervalSinceReferenceDate];
  BOOL v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1BD13F9C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6 = a3;
  uint64_t v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = &unk_1F1725C00;
  double v9 = 900.0;
  if ((v6 & 0x10) == 0) {
    double v9 = 0.0;
  }
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(void *)(v8 + 104) = 0;
  *(void *)(v8 + 112) = 0;
  *(void *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_WORD *)(a1 + 600) = 1;
  *(unsigned char *)(a1 + 602) = 0;
  *(unsigned char *)(a1 + 604) = 0;
  *(void *)(a1 + 608) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(void *)(a1 + 648) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);

  JUMPOUT(0x1C187B8A0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1F1725C00;
  unint64_t v2 = *(void **)(a1 + 632);
  if (v2)
  {
    *(void *)(a1 + 640) = v2;
    operator delete(v2);
  }

  id v3 = *(void **)(a1 + 568);
  if (v3)
  {
    *(void *)(a1 + 576) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(unsigned char *)(result + 600) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::setDateInterval(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 copy];
  uint64_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;

  BOOL v5 = [v6 startDate];
  [v5 timeIntervalSinceReferenceDate];
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_configureForStartTime(a1);
}

void sub_1BD13FB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(void *)(a1 + 40))
  {
    id v5 = v3;
    [v3 timeIntervalSinceReferenceDate];
    *(void *)(a1 + 608) = v4;
    id v3 = v5;
  }
}

void sub_1BD13FBEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::setStatisticsConfiguration(id *a1, void *a2)
{
  objc_storeStrong(a1 + 77, a2);
  id v7 = a2;
  id v4 = a1[77];
  id v5 = a1[74];
  a1[74] = v4;
  id v6 = v4;

  objc_storeStrong(a1 + 19, a1[74]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (*(void *)(a1 + 40)) {
    return 1;
  }
  id v7 = *(char **)a2;
  uint64_t v8 = *(void *)(a2 + 8);
  BOOL v9 = *(void *)(a1 + 224) == *(void *)(a1 + 216) && (uint64_t)(*(void *)(a1 + 256) - *(void *)(a1 + 248)) < 1
    || HKIntervalMask<double>::firstDifference(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)a2, *(void *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), v7, v8, (v8 - (uint64_t)v7) >> 4);
  }
  if (v9) {
    return 1;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128);

  return v11(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 copy];
  id v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v3;
}

void sub_1BD13FDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::dataSource(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));

  return WeakRetained;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::currentStatistics(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 600))
  {
    uint64_t v1 = 0;
  }
  else
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_updateSourceOrder((uint64_t)v4);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_mergeThroughTime((uint64_t)v4, v4[1]);
    uint64_t v1 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::~HDStatisticsBucket((uint64_t)v4);
  }

  return v1;
}

void sub_1BD13FEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(a1 + 64);
  id v7 = v6;
  if (v6)
  {
    uint64_t v8 = [v6 startDate];
    [v8 timeIntervalSinceReferenceDate];
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    uint64_t v10 = [v7 endDate];
    [v10 timeIntervalSinceReferenceDate];
    double v12 = v11;
    double v13 = *(double *)(a2 + 8);

    if (v12 < v13) {
      goto LABEL_9;
    }
  }
  if (!*(unsigned char *)(a1 + 602))
  {
LABEL_11:
    uint64_t v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 601))
  {
LABEL_9:
    uint64_t v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(unsigned char *)(a1 + 603)) {
      goto LABEL_11;
    }
    unint64_t v17 = *(void *)(a1 + 640);
    unint64_t v18 = *(void *)(a1 + 648);
    if (v17 >= v18)
    {
      uint64_t v22 = *(void *)(a1 + 632);
      unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      unint64_t v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24) {
        unint64_t v24 = 2 * v25;
      }
      if (v25 >= 0x333333333333333) {
        unint64_t v26 = 0x666666666666666;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26) {
        unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      }
      else {
        uint64_t v27 = 0;
      }
      unint64_t v28 = v26 + 40 * v23;
      unint64_t v29 = v26 + 40 * v27;
      long long v30 = *(_OWORD *)a2;
      long long v31 = *(_OWORD *)(a2 + 16);
      *(void *)(v28 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      unint64_t v21 = v28 + 40;
      long long v32 = *(char **)(a1 + 640);
      double v33 = *(char **)(a1 + 632);
      if (v32 != v33)
      {
        do
        {
          long long v34 = *(_OWORD *)(v32 - 40);
          long long v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        long long v32 = *(char **)(a1 + 632);
      }
      *(void *)(a1 + 632) = v28;
      *(void *)(a1 + 640) = v21;
      *(void *)(a1 + 648) = v29;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      long long v19 = *(_OWORD *)a2;
      long long v20 = *(_OWORD *)(a2 + 16);
      *(void *)(v17 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      unint64_t v21 = v17 + 40;
    }
    *(void *)(a1 + 640) = v21;
    goto LABEL_9;
  }
  int v14 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
  uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1BD140130(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = v5;
  if (*(unsigned char *)(a1 + 602))
  {
    uint64_t v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 602) = 1;
  uint64_t v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    uint64_t v7 = 0;
    goto LABEL_82;
  }
  uint64_t v65 = v6;
  if (*(unsigned char *)(a1 + 601)) {
    goto LABEL_5;
  }
  double v9 = *(void **)(a1 + 624);
  if (!v9)
  {
    id v68 = 0;
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 40))
  {
LABEL_5:
    int v8 = 0;
    id v68 = 0;
    goto LABEL_29;
  }
  [v9 sortUsingComparator:&__block_literal_global_996];
  id v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v10 = *(id *)(a1 + 624);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  if (!v11)
  {

    id v12 = 0;
    goto LABEL_27;
  }
  id v12 = 0;
  uint64_t v13 = *(void *)v70;
  do
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (*(void *)v70 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(id *)(*((void *)&v69 + 1) + 8 * i);
      BOOL v16 = v15;
      if (v12)
      {
        unint64_t v17 = [v15 startDate];
        unint64_t v18 = [v12 endDate];
        int v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          long long v20 = [v16 endDate];
          unint64_t v21 = [v12 endDate];
          int v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22) {
            goto LABEL_21;
          }
          id v23 = objc_alloc(MEMORY[0x1E4F28C18]);
          unint64_t v24 = [v12 startDate];
          unint64_t v25 = [v16 endDate];
          id v26 = (id)[v23 initWithStartDate:v24 endDate:v25];
        }
        else
        {
          [v68 addObject:v12];
          id v26 = v16;
        }
        id v12 = v26;
      }
      else
      {
        id v12 = v15;
      }
LABEL_21:
    }
    uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  }
  while (v11);

  if (v12) {
    [v68 addObject:v12];
  }
LABEL_27:

LABEL_28:
  int v8 = 1;
LABEL_29:
  uint64_t v27 = *(void **)(a1 + 624);
  *(void *)(a1 + 624) = 0;

  *(unsigned char *)(a1 + 601) = 0;
  if (!v8)
  {
    unint64_t v38 = *(void *)(a1 + 632);
    *(void *)(a1 + 648) = 0;
    *(void *)(a1 + 640) = 0;
    *(void *)(a1 + 632) = 0;
    unint64_t v39 = v38;
    goto LABEL_47;
  }
  unint64_t v28 = [v68 lastObject];
  if (v28)
  {
    unint64_t v29 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_currentBucketInterval(a1);
    long long v30 = [v29 endDate];
    long long v31 = [v28 endDate];
    int v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      double v33 = [v28 endDate];
      [v33 timeIntervalSinceReferenceDate];
      double v35 = v34;

      uint64_t v36 = *(void *)(a1 + 632);
      BOOL v37 = *(long long **)(a1 + 640);
      while ((long long *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((long long *)v36 != v37)
          {
            double v40 = (long long *)(v36 + 40);
            if ((long long *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  long long v41 = *v40;
                  long long v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)uint64_t v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                double v40 = (long long *)((char *)v40 + 40);
              }
              while (v40 != v37);
              BOOL v37 = *(long long **)(a1 + 640);
            }
          }
          if ((long long *)v36 != v37) {
            *(void *)(a1 + 640) = v36;
          }
          break;
        }
        v36 += 40;
      }
    }
  }
  unint64_t v38 = *(void *)(a1 + 632);
  unint64_t v39 = *(void *)(a1 + 640);
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 632) = 0;
  *(void *)(a1 + 640) = 0;
  if (![v68 count]) {
    goto LABEL_60;
  }
LABEL_47:
  id v43 = v68;
  long long __p = (void *)v38;
  if (v43)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v44 = v43;
    uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v70;
      while (2)
      {
        for (uint64_t j = 0; j != v45; ++j)
        {
          if (*(void *)v70 != v46) {
            objc_enumerationMutation(v44);
          }
          id v48 = *(id *)(*((void *)&v69 + 1) + 8 * j);
          int v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_primitiveInvalidateInterval((id *)a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
        if (v45) {
          continue;
        }
        break;
      }
    }

LABEL_59:
    unint64_t v38 = (unint64_t)__p;
LABEL_60:
    unint64_t v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v51;
    }
    int v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    long long __p = (void *)v38;
    if (v39 != v38)
    {
      uint64_t v54 = v38;
      uint64_t v50 = v67;
      do
      {
        int v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_primitiveAddSample(a1, v54, 1, v50);
        int v53 = v55;
        v54 += 40;
        if (v54 == v39) {
          char v56 = 0;
        }
        else {
          char v56 = v55;
        }
        uint64_t v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_primitiveInvalidateInterval((id *)a1, 0, v67))goto LABEL_59; {
LABEL_70:
    }
    int v53 = 0;
  }
  if (*(void *)(a1 + 40) && *(void *)(a1 + 576) != *(void *)(a1 + 568))
  {
    do
    {
      uint64_t v57 = objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(void *)(a1 + 112) + 1, v50, v65);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      unint64_t v58 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_statisticsFromFinishedBucket(a1, a1 + 120);
      long long v59 = [v57 startDate];
      [v59 timeIntervalSinceReferenceDate];
      double v61 = v60;
      uint64_t v62 = [v57 endDate];
      [v62 timeIntervalSinceReferenceDate];
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPercentiles>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_notifyForCurrentBucket(a1);
    }
    while (*(void *)(a1 + 576) != *(void *)(a1 + 568));
  }
  *(unsigned char *)(a1 + 602) = 0;
  if (__p) {
    operator delete(__p);
  }

  if (v53)
  {
    if (*(unsigned char *)(a1 + 604))
    {
      *(unsigned char *)(a1 + 604) = 0;
      id v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_notifyForCurrentBucket(a1);
      uint64_t v7 = 1;
      goto LABEL_82;
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v6 = v65;
LABEL_82:
  *(unsigned char *)(a1 + 602) = 0;
LABEL_83:

  return v7;
}

void sub_1BD140834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    *(unsigned char *)(v13 + 602) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(unsigned char *)(result + 603) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(unsigned char *)(a1 + 602)) {
      goto LABEL_12;
    }
    uint64_t v7 = 0;
LABEL_14:
    uint64_t v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_primitiveInvalidateInterval((id *)a1, v7, a3);
    goto LABEL_15;
  }
  uint64_t v7 = [v6 dateIntervalForIntervalsContainingInterval:v5];

  if (!*(unsigned char *)(a1 + 602)) {
    goto LABEL_14;
  }
  if (!v7)
  {
LABEL_12:
    id v12 = *(void **)(a1 + 624);
    *(void *)(a1 + 624) = 0;

    uint64_t v7 = 0;
    uint64_t v11 = 1;
    *(unsigned char *)(a1 + 601) = 1;
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 601))
  {
    int v8 = *(void **)(a1 + 624);
    if (!v8)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      id v10 = *(void **)(a1 + 624);
      *(void *)(a1 + 624) = v9;

      int v8 = *(void **)(a1 + 624);
    }
    [v8 addObject:v7];
  }
  uint64_t v11 = 1;
LABEL_15:

  return v11;
}

void sub_1BD140B34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    *(unsigned char *)(a1 + 600) = 1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI23HDStatisticsPercentilesEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v9[3] = &unk_1E63043E8;
    uint64_t v12 = a1;
    id v10 = v5;
    id v11 = WeakRetained;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 112))(a1, v9, a3);
    if (v7 && *(unsigned char *)(a1 + 600) && !*(void *)(a1 + 40)) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_configureForStartTime(a1);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to query for initial statistics: no data source available.");
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1BD140C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::reset(uint64_t result)
{
  *(unsigned char *)(result + 600) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 encodeBool:*(unsigned __int8 *)(a1 + 600) forKey:@"needs_config"];
  v3;
  v27[0] = &unk_1F1726FA0;
  v27[1] = 0;
  int v28 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
  LOBYTE(v28) = 1;
  v27[2] = v4;
  memset(&v27[3], 0, 24);
  statistics::StatisticsEngine::makeCurrentBucket((uint64_t)v27);
  int v8 = &unk_1F171B9C8;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = 0;
  int v26 = 511;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v22 = 0;
  int8x16_t v9 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  uint64_t v5 = *(void *)(a1 + 136);
  char v24 = *(unsigned char *)(a1 + 144);
  char v25 = *(unsigned char *)(a1 + 145);
  BOOL v23 = *(_DWORD *)(a1 + 148) == 0;
  int8x16_t v10 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v14 = v5;
  uint64_t v15 = v6;
  uint64_t v7 = *(int8x16_t **)(a1 + 216);
  if (v7 != *(int8x16_t **)(a1 + 224))
  {
    v29[0] = &unk_1F17206F8;
    int v34 = 127;
    int8x16_t v30 = vextq_s8(*v7, *v7, 8uLL);
    v29[1] = v7[1].i64[0];
    v29[2] = v7[1].i64[1];
    char v33 = 0;
    __int8 v32 = v7[2].i8[9];
    __int8 v31 = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>();
  }
  statistics::StatisticsBucket::makeStatistics((uint64_t)&v8);
  HDStatisticsRelative<HDStatisticsPercentiles>::archive((uint64_t)v29, a1 + 240);
}

void sub_1BD141088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v59 = a2;
  *(unsigned char *)(a1 + 600) = [v59 decodeBoolForKey:@"needs_config"];
  id v3 = v59;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::HDStatisticsBucket((uint64_t)v63, 0, -1.79769313e308, 1.79769313e308);
  long long v64 = 0u;
  long long v65 = 0u;
  uint64_t v111 = 0;
  id v61 = v3;
  PB::Reader::Reader((PB::Reader *)v110, (const unsigned __int8 *)[v61 decodeBytesForKey:@"hdsce_archived_representation" returnedLength:&v111]);
  double v103 = &unk_1F1726FA0;
  uint64_t v104 = 0;
  uint64_t v108 = 0;
  uint64_t v106 = 0;
  uint64_t v107 = 0;
  int v109 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v103, (PB::Reader *)v110);
  uint64_t v62 = v105;
  if (v104)
  {
    uint64_t v70 = 0;
    memset(v73, 0, sizeof(v73));
    long long __p = 0;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    __int16 v82 = 0;
    long long v83 = 0u;
    long long v84 = 0u;
    __int16 v85 = 0;
    uint64_t v88 = 0;
    unint64_t v76 = 0;
    long long v75 = 0;
    int v77 = 0;
    long long v87 = 0;
    long long v86 = &v87;
    long long v89 = 0u;
    long long v90 = 0u;
    int v91 = 1065353216;
    long long v92 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    uint64_t v95 = 0;
    int v96 = 1065353216;
    long long v97 = 0u;
    long long v98 = 0u;
    int v99 = 1065353216;
    long long v100 = 0u;
    long long v101 = 0u;
    int v102 = 1065353216;
    int8x16_t v66 = vextq_s8(*(int8x16_t *)(v104 + 8), *(int8x16_t *)(v104 + 8), 8uLL);
    uint64_t v4 = *(void *)(v104 + 72);
    uint64_t v67 = *(void *)(v104 + 64);
    char v68 = *(unsigned char *)(v104 + 185);
    char v69 = *(unsigned char *)(v104 + 186);
    int8x16_t v71 = vextq_s8(*(int8x16_t *)(v104 + 24), *(int8x16_t *)(v104 + 24), 8uLL);
    uint64_t v72 = v4;
    uint64_t v6 = *(void *)(v104 + 80);
    uint64_t v5 = *(void *)(v104 + 88);
    double v60 = (void *)v104;
    if (v6 != v5)
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(*(void *)v6 + 24);
        uint64_t v9 = *(void *)(*(void *)v6 + 32);
        uint64_t v10 = *(void *)(*(void *)v6 + 8);
        uint64_t v11 = *(void *)(*(void *)v6 + 16);
        char v12 = *(unsigned char *)(*(void *)v6 + 41);
        char v13 = *(unsigned char *)(*(void *)v6 + 40);
        if ((unint64_t)v7 >= v76)
        {
          uint64_t v14 = (char *)__p;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)__p) >> 4);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v76 - (void)__p) >> 4) > v16) {
            unint64_t v16 = 0x5555555555555556 * ((uint64_t)(v76 - (void)__p) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v76 - (void)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v17 = 0x555555555555555;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17)
          {
            unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            uint64_t v7 = v75;
            uint64_t v14 = (char *)__p;
          }
          else
          {
            uint64_t v18 = 0;
          }
          long long v19 = (void *)(v17 + 48 * v15);
          *long long v19 = v9;
          v19[1] = v8;
          v19[2] = v10;
          v19[3] = v11;
          *((_WORD *)v19 + 16) = 1;
          *((unsigned char *)v19 + 40) = 0;
          *((unsigned char *)v19 + 41) = v12;
          *((unsigned char *)v19 + 42) = v13;
          long long v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              long long v21 = *((_OWORD *)v7 - 3);
              long long v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            uint64_t v14 = (char *)__p;
          }
          uint64_t v7 = (char *)(v19 + 6);
          long long __p = v20;
          long long v75 = (char *)(v19 + 6);
          unint64_t v76 = v17 + 48 * v18;
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)uint64_t v7 = v9;
          *((void *)v7 + 1) = v8;
          *((void *)v7 + 2) = v10;
          *((void *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        long long v75 = v7;
        v6 += 8;
      }
      while (v6 != v5);
    }
    BOOL v23 = (const statistics::Statistics *)v60[13];
    if (v23)
    {
      HDStatisticsRelative<HDStatisticsPercentiles>::unarchive((uint64_t)&v112, v23);
      int v77 = v112;
      if ((void)v78)
      {
        *((void *)&v78 + 1) = v78;
        operator delete((void *)v78);
      }
      long long v78 = v113;
      long long v79 = v114;
      *(void *)&long long v114 = 0;
      long long v113 = 0uLL;
      long long v80 = v115;
      long long v81 = v116;
      __int16 v82 = v117;
      __int16 v85 = v120;
      long long v83 = v118;
      long long v84 = v119;
    }
    char v24 = (const statistics::Statistics **)v60[17];
    for (uint64_t i = (const statistics::Statistics **)v60[18]; v24 != i; ++v24)
    {
      int v26 = *v24;
      HDStatisticsRelative<HDStatisticsPercentiles>::unarchive((uint64_t)&v112, *v24);
      uint64_t v27 = *((void *)v26 + 18);
      int v28 = v87;
      for (j = &v87; ; int v28 = *j)
      {
        int8x16_t v30 = j;
        if (!v28) {
          break;
        }
        while (1)
        {
          uint64_t j = (uint64_t **)v28;
          uint64_t v31 = v28[4];
          if (v31 > v27) {
            break;
          }
          if (v31 >= v27)
          {
            __int8 v32 = (char *)j;
            goto LABEL_37;
          }
          int v28 = j[1];
          if (!v28)
          {
            int8x16_t v30 = j + 1;
            goto LABEL_34;
          }
        }
      }
LABEL_34:
      __int8 v32 = (char *)operator new(0xA0uLL);
      *((void *)v32 + 4) = v27;
      *(_OWORD *)(v32 + 40) = 0u;
      *(_OWORD *)(v32 + 56) = 0u;
      *(_OWORD *)(v32 + 72) = 0u;
      *(_OWORD *)(v32 + 88) = 0u;
      *(_OWORD *)(v32 + 104) = 0u;
      *(_OWORD *)(v32 + 120) = 0u;
      *(_OWORD *)(v32 + 136) = 0u;
      *((void *)v32 + 19) = 0;
      *(void *)__int8 v32 = 0;
      *((void *)v32 + 1) = 0;
      *((void *)v32 + 2) = j;
      *int8x16_t v30 = (uint64_t *)v32;
      char v33 = (uint64_t *)v32;
      if (*v86)
      {
        long long v86 = (uint64_t **)*v86;
        char v33 = *v30;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v87, v33);
      ++v88;
LABEL_37:
      int v34 = (void *)*((void *)v32 + 6);
      *((_DWORD *)v32 + 10) = v112;
      if (v34)
      {
        *((void *)v32 + 7) = v34;
        operator delete(v34);
        *((void *)v32 + 6) = 0;
        *((void *)v32 + 7) = 0;
        *((void *)v32 + 8) = 0;
      }
      *((_OWORD *)v32 + 3) = v113;
      *((void *)v32 + 8) = v114;
      *(void *)&long long v114 = 0;
      long long v113 = 0uLL;
      *((void *)v32 + 9) = *((void *)&v114 + 1);
      long long v35 = v116;
      *((_OWORD *)v32 + 5) = v115;
      *((_OWORD *)v32 + 6) = v35;
      *((_WORD *)v32 + 56) = v117;
      long long v36 = v118;
      long long v37 = v119;
      *((_WORD *)v32 + 76) = v120;
      *(_OWORD *)(v32 + 136) = v37;
      *(_OWORD *)(v32 + 120) = v36;
    }
    uint64_t v38 = v60[5];
    for (uint64_t k = v60[6]; v38 != k; v38 += 8)
    {
      double v41 = *(double *)(*(void *)v38 + 8);
      double v40 = *(double *)(*(void *)v38 + 16);
      if (v41 >= v40) {
        double v42 = *(double *)(*(void *)v38 + 16);
      }
      else {
        double v42 = *(double *)(*(void *)v38 + 8);
      }
      if (v40 < v41) {
        double v40 = *(double *)(*(void *)v38 + 8);
      }
      HKIntervalMask<double>::_insertInterval(v73, v42, v40);
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::operator=((uint64_t)v63, (uint64_t)&v66);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::~HDStatisticsBucket((uint64_t)&v66);
  }
  uint64_t v43 = v106;
  uint64_t v44 = v107;
  if (v106 != v107)
  {
    unint64_t v45 = *((void *)&v64 + 1);
    do
    {
      uint64_t v46 = *(void *)(*(void *)v43 + 24);
      uint64_t v47 = *(void *)(*(void *)v43 + 32);
      uint64_t v48 = *(void *)(*(void *)v43 + 8);
      uint64_t v49 = *(void *)(*(void *)v43 + 16);
      if (v45 >= (unint64_t)v65)
      {
        uint64_t v50 = (void *)v64;
        unint64_t v51 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v45 - v64) >> 3);
        unint64_t v52 = v51 + 1;
        if (v51 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(v65 - v64) >> 3) > v52) {
          unint64_t v52 = 0x999999999999999ALL * ((uint64_t)(v65 - v64) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v65 - v64) >> 3) >= 0x333333333333333) {
          unint64_t v53 = 0x666666666666666;
        }
        else {
          unint64_t v53 = v52;
        }
        if (v53)
        {
          unint64_t v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v53);
          unint64_t v45 = *((void *)&v64 + 1);
          uint64_t v50 = (void *)v64;
        }
        else
        {
          uint64_t v54 = 0;
        }
        unint64_t v55 = v53 + 40 * v51;
        *(void *)unint64_t v55 = v47;
        *(void *)(v55 + 8) = v46;
        *(void *)(v55 + 16) = v48;
        *(void *)(v55 + 24) = v49;
        *(_WORD *)(v55 + 32) = 1;
        unint64_t v56 = v55;
        if ((void *)v45 != v50)
        {
          do
          {
            long long v57 = *(_OWORD *)(v45 - 40);
            long long v58 = *(_OWORD *)(v45 - 24);
            *(_WORD *)(v56 - 8) = *(_WORD *)(v45 - 8);
            *(_OWORD *)(v56 - 24) = v58;
            *(_OWORD *)(v56 - 40) = v57;
            v56 -= 40;
            v45 -= 40;
          }
          while ((void *)v45 != v50);
          uint64_t v50 = (void *)v64;
        }
        unint64_t v45 = v55 + 40;
        *(void *)&long long v64 = v56;
        *((void *)&v64 + 1) = v55 + 40;
        *(void *)&long long v65 = v53 + 40 * v54;
        if (v50) {
          operator delete(v50);
        }
      }
      else
      {
        *(void *)unint64_t v45 = v47;
        *(void *)(v45 + 8) = v46;
        *(void *)(v45 + 16) = v48;
        *(void *)(v45 + 24) = v49;
        *(_WORD *)(v45 + 32) = 1;
        v45 += 40;
      }
      *((void *)&v64 + 1) = v45;
      v43 += 8;
    }
    while (v43 != v44);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v103);

  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPercentiles>>::operator=((void *)(a1 + 112), (uint64_t)&v62);
  if ((void)v64)
  {
    *((void *)&v64 + 1) = v64;
    operator delete((void *)v64);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::~HDStatisticsBucket((uint64_t)v63);
}

void sub_1BD141834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a3);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table((uint64_t)&STACK[0x3A0]);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x378]);
  uint64_t v11 = (void *)STACK[0x360];
  if (STACK[0x360])
  {
    STACK[0x368] = (unint64_t)v11;
    operator delete(v11);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a4);
  std::__tree<std::__value_type<long long,HDStatisticsTimeInterval>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTimeInterval>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTimeInterval>>>::destroy((void *)STACK[0x328]);
  char v12 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v12;
    operator delete(v12);
  }
  char v13 = (void *)STACK[0x290];
  if (STACK[0x290])
  {
    STACK[0x298] = (unint64_t)v13;
    operator delete(v13);
  }
  objc_destroyWeak((id *)&STACK[0x288]);
  uint64_t v14 = (void *)STACK[0x270];
  if (STACK[0x270])
  {
    STACK[0x278] = (unint64_t)v14;
    operator delete(v14);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x3F8]);
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPercentiles>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 256;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_WORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_WORD *)(a1 + 232) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(void *)(a1 + 240) = a1 + 248;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 296) = 1065353216;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(void *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 360) = 1065353216;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_DWORD *)(a1 + 400) = 1065353216;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_DWORD *)(a1 + 440) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPercentiles>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 456);
  if (v2)
  {
    *(void *)(a1 + 464) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::~HDStatisticsBucket(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 408);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 368);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 328);
  unint64_t v2 = *(void **)(a1 + 304);
  if (v2)
  {
    *(void *)(a1 + 312) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 264);
  std::__tree<std::__value_type<long long,HDStatisticsTimeInterval>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTimeInterval>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTimeInterval>>>::destroy(*(void **)(a1 + 248));
  id v3 = *(void **)(a1 + 128);
  if (v3)
  {
    *(void *)(a1 + 136) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(void *)(a1 + 104) = v4;
    operator delete(v4);
  }
  objc_destroyWeak((id *)(a1 + 88));
  uint64_t v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(void *)(a1 + 72) = v5;
    operator delete(v5);
  }

  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_configureForStartTime(uint64_t a1)
{
  uint64_t v29 = 0;
  unint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
    uint64_t v4 = [v2 dateIntervalContainingDate:v3 index:&v29];

    uint64_t v5 = [v4 startDate];
    [v5 timeIntervalSinceReferenceDate];
    double v7 = v6;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
LABEL_5:
    double v13 = v9;

    goto LABEL_6;
  }
  id v10 = *(id *)(a1 + 64);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v11 = [v10 startDate];
    [v11 timeIntervalSinceReferenceDate];
    double v7 = v12;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
    goto LABEL_5;
  }
  double v7 = -1.79769313e308;
  double v13 = 1.79769313e308;
LABEL_6:

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::HDStatisticsBucket((uint64_t)v22, WeakRetained, v7, v13);

  if (*(void *)(a1 + 32) == 1) {
    char v24 = 1;
  }
  uint64_t v23 = *(void *)(a1 + 56);
  char v25 = *(unsigned char *)(a1 + 24) & 1;
  if (v28 != (char *)(a1 + 72)) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v28, *(char **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4);
  }
  objc_storeStrong(&v27, *(id *)(a1 + 616));
  if (!*(void *)(a1 + 40)) {
    int v26 = 0;
  }
  uint64_t v15 = v29;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v22);
  uint64_t v18 = v15;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::HDStatisticsBucket((uint64_t)v19, (uint64_t)v17);
  long long __p = 0u;
  long long v21 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPercentiles>>::operator=((void *)(a1 + 112), (uint64_t)&v18);

  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::~HDStatisticsBucket((uint64_t)v19);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::~HDStatisticsBucket((uint64_t)v17);
  *(unsigned char *)(a1 + 600) = 0;
  return HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::~HDStatisticsBucket((uint64_t)v22);
}

void sub_1BD141D94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPercentiles>>::operator=(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::operator=((uint64_t)(a1 + 1), a2 + 8);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 57), (__n128 *)(a2 + 456));
  uint64_t v4 = *(void *)(a2 + 480);
  *(void *)(a2 + 480) = 0;
  uint64_t v5 = (void *)a1[60];
  a1[60] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 96);
  double v7 = *(unsigned char **)(a2 + 104);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(void *)(a1 + 96) = v10;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(void *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  int v12 = *(_DWORD *)(a2 + 120);
  *(void *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 120) = v12;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)(a1 + 128), *(const void **)(a2 + 128), *(void *)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 3);
  long long v13 = *(_OWORD *)(a2 + 152);
  long long v14 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 178) = *(_OWORD *)(a2 + 178);
  *(_OWORD *)(a1 + 168) = v14;
  *(_OWORD *)(a1 + 152) = v13;
  long long v15 = *(_OWORD *)(a2 + 200);
  long long v16 = *(_OWORD *)(a2 + 216);
  uint64_t v17 = *(void *)(a2 + 232);
  *(void *)(a1 + 248) = 0;
  uint64_t v18 = (void *)(a1 + 248);
  *(void *)(a1 + 240) = a1 + 248;
  *(void *)(a1 + 232) = v17;
  *(_OWORD *)(a1 + 216) = v16;
  *(_OWORD *)(a1 + 200) = v15;
  *(void *)(a1 + 256) = 0;
  long long v19 = *(void **)(a2 + 240);
  if (v19 != (void *)(a2 + 248))
  {
    long long v20 = 0;
    long long v21 = (void *)(a1 + 248);
    while (1)
    {
      long long v22 = (void *)(a1 + 248);
      if (v21 == v18) {
        goto LABEL_12;
      }
      uint64_t v23 = v20;
      char v24 = (void *)(a1 + 248);
      if (v20)
      {
        do
        {
          long long v22 = v23;
          uint64_t v23 = (void *)v23[1];
        }
        while (v23);
      }
      else
      {
        do
        {
          long long v22 = (void *)v24[2];
          BOOL v25 = *v22 == (void)v24;
          char v24 = v22;
        }
        while (v25);
      }
      uint64_t v26 = v19[4];
      if (v22[4] < v26)
      {
LABEL_12:
        if (v20) {
          id v27 = (uint64_t **)v22;
        }
        else {
          id v27 = (uint64_t **)(a1 + 248);
        }
        if (v20) {
          int v28 = (uint64_t **)(v22 + 1);
        }
        else {
          int v28 = (uint64_t **)(a1 + 248);
        }
        if (!*v28)
        {
LABEL_28:
          uint64_t v31 = (char *)operator new(0xA0uLL);
          uint64_t v32 = v19[4];
          int v33 = *((_DWORD *)v19 + 10);
          *((void *)v31 + 6) = 0;
          *((void *)v31 + 4) = v32;
          *((_DWORD *)v31 + 10) = v33;
          *((void *)v31 + 7) = 0;
          *((void *)v31 + 8) = 0;
          std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)v31 + 6, (const void *)v19[6], v19[7], (uint64_t)(v19[7] - v19[6]) >> 3);
          long long v34 = *(_OWORD *)(v19 + 9);
          long long v35 = *(_OWORD *)(v19 + 11);
          *(_OWORD *)(v31 + 98) = *(_OWORD *)((char *)v19 + 98);
          *(_OWORD *)(v31 + 88) = v35;
          *(_OWORD *)(v31 + 72) = v34;
          long long v36 = *(_OWORD *)(v19 + 15);
          long long v37 = *(_OWORD *)(v19 + 17);
          *((void *)v31 + 19) = v19[19];
          *(_OWORD *)(v31 + 136) = v37;
          *(_OWORD *)(v31 + 120) = v36;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 240), (uint64_t)v27, v28, (uint64_t *)v31);
        }
      }
      else
      {
        int v28 = (uint64_t **)(a1 + 248);
        id v27 = (uint64_t **)(a1 + 248);
        if (!v20) {
          goto LABEL_28;
        }
        uint64_t v29 = v20;
        while (1)
        {
          while (1)
          {
            id v27 = (uint64_t **)v29;
            uint64_t v30 = v29[4];
            if (v30 <= v26) {
              break;
            }
            uint64_t v29 = *v27;
            int v28 = v27;
            if (!*v27) {
              goto LABEL_28;
            }
          }
          if (v30 >= v26) {
            break;
          }
          uint64_t v29 = v27[1];
          if (!v29)
          {
            int v28 = v27 + 1;
            goto LABEL_28;
          }
        }
      }
      uint64_t v38 = (void *)v19[1];
      if (v38)
      {
        do
        {
          unint64_t v39 = v38;
          uint64_t v38 = (void *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          unint64_t v39 = (void *)v19[2];
          BOOL v25 = *v39 == (void)v19;
          long long v19 = v39;
        }
        while (!v25);
      }
      if (v39 == (void *)(a2 + 248)) {
        break;
      }
      long long v20 = (void *)*v18;
      long long v21 = *(void **)(a1 + 240);
      long long v19 = v39;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 264, a2 + 264);
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 304), *(const void **)(a2 + 304), *(void *)(a2 + 312), (uint64_t)(*(void *)(a2 + 312) - *(void *)(a2 + 304)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 328, a2 + 328);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 368, a2 + 368);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 408, a2 + 408);
  return a1;
}

void sub_1BD1421A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, id *location, void **a12)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v17);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  long long v19 = *v15;
  if (*v15)
  {
    *(void *)(v13 + 312) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
  std::__tree<std::__value_type<long long,HDStatisticsTimeInterval>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTimeInterval>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTimeInterval>>>::destroy(*v12);
  long long v20 = *a9;
  if (*a9)
  {
    *(void *)(v13 + 136) = v20;
    operator delete(v20);
  }
  long long v21 = *a10;
  if (*a10)
  {
    *(void *)(v13 + 104) = v21;
    operator delete(v21);
  }
  objc_destroyWeak(location);
  long long v22 = *a12;
  if (*a12)
  {
    *(void *)(v13 + 72) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::operator=(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  long long v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v5;

  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  id WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  uint64_t v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(void *)(a1 + 104) = v9;
    operator delete(v9);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 128, (__n128 *)(a2 + 128));
  uint64_t v11 = a1 + 248;
  id v10 = *(void **)(a1 + 248);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  long long v12 = *(_OWORD *)(a2 + 160);
  long long v13 = *(_OWORD *)(a2 + 176);
  *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = v13;
  *(_OWORD *)(a1 + 160) = v12;
  long long v14 = *(_OWORD *)(a2 + 200);
  long long v15 = *(_OWORD *)(a2 + 216);
  *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
  *(_OWORD *)(a1 + 200) = v14;
  *(_OWORD *)(a1 + 216) = v15;
  std::__tree<std::__value_type<long long,HDStatisticsTimeInterval>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTimeInterval>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTimeInterval>>>::destroy(v10);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  uint64_t v16 = (void *)(a2 + 248);
  uint64_t v17 = *(void *)(a2 + 248);
  *(void *)(a1 + 248) = v17;
  uint64_t v18 = *(void *)(a2 + 256);
  *(void *)(a1 + 256) = v18;
  if (v18)
  {
    *(void *)(v17 + 16) = v11;
    *(void *)(a2 + 240) = v16;
    void *v16 = 0;
    *(void *)(a2 + 256) = 0;
  }
  else
  {
    *(void *)(a1 + 240) = v11;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 264, (uint64_t *)(a2 + 264));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 304, (__n128 *)(a2 + 304));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 328, (uint64_t *)(a2 + 328));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 368, (uint64_t *)(a2 + 368));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 408, (uint64_t *)(a2 + 408));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  uint64_t v123 = *MEMORY[0x1E4F143B8];
  double v5 = *(double *)a2;
  id v6 = objc_alloc(MEMORY[0x1E4F1C9C8]);
  long long v7 = (double *)(a2 + 40);
  if (v5 != -1.79769313e308) {
    long long v7 = (double *)a2;
  }
  uint64_t v105 = a2;
  id v106 = (id)[v6 initWithTimeIntervalSinceReferenceDate:*v7];
  if (*(double *)(a2 + 8) == 1.79769313e308) {
    uint64_t v8 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 48)];
  }
  else {
    uint64_t v8 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 8)];
  }
  uint64_t v9 = (void *)v8;
  id v10 = *(id *)(a1 + 16);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v11 = *(id *)(a1 + 16);
    if ([v11 shouldUseUnderlyingTypeForStatistics])
    {
      uint64_t WeakRetained = [v11 underlyingSampleType];

      id v10 = (id)WeakRetained;
    }
  }
  long long v12 = (void *)[objc_alloc(MEMORY[0x1E4F2B5B0]) initWithDataType:v10 startDate:v106 endDate:v9];
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t WeakRetained = (uint64_t)objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      uint64_t WeakRetained = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1CA48]);
      long long v13 = *(uint64_t **)(a2 + 304);
      long long v14 = *(uint64_t **)(a2 + 312);
      while (v13 != v14)
      {
        uint64_t v15 = *v13;
        id v16 = objc_loadWeakRetained((id *)(a1 + 48));
        unint64_t v3 = [v16 sourceForSourceID:v15];

        if (v3)
        {
          if (([(id)WeakRetained containsObject:v3] & 1) == 0) {
            [(id)WeakRetained addObject:v3];
          }
        }

        ++v13;
      }
      uint64_t v17 = (void *)[(id)WeakRetained copy];
      [v12 _setSources:v17];
    }
  }

  v121[0] = &unk_1F1725CD0;
  uint64_t v122 = v121;
  id v107 = v12;
  LODWORD(__p[0]) = *(_DWORD *)(v105 + 120);
  long long v110 = 0uLL;
  __p[1] = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&__p[1], *(const void **)(v105 + 128), *(void *)(v105 + 136), (uint64_t)(*(void *)(v105 + 136) - *(void *)(v105 + 128)) >> 3);
  long long v18 = *(_OWORD *)(v105 + 168);
  long long v111 = *(_OWORD *)(v105 + 152);
  v112[0] = v18;
  *(_OWORD *)((char *)v112 + 10) = *(_OWORD *)(v105 + 178);
  long long v19 = *(_OWORD *)(v105 + 216);
  v112[2] = *(_OWORD *)(v105 + 200);
  v112[3] = v19;
  uint64_t v113 = *(void *)(v105 + 232);
  if (!v122) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v20 = (*(uint64_t (**)(void *, void **))(*v122 + 48))(v122, __p);
  long long v114 = 0;
  long long v115 = 0;
  uint64_t v116 = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&v114, *(const void **)v20, *(void *)(v20 + 8), (uint64_t)(*(void *)(v20 + 8) - *(void *)v20) >> 3);
  long long v21 = *(_OWORD *)(v20 + 24);
  long long v22 = *(_OWORD *)(v20 + 40);
  *(_OWORD *)&v118[10] = *(_OWORD *)(v20 + 50);
  *(_OWORD *)long long v118 = v22;
  long long v117 = v21;
  if (__p[1])
  {
    *(void **)&long long v110 = __p[1];
    operator delete(__p[1]);
  }
  double v23 = HDStatisticsPercentiles::calculatePercentileValue((HDStatisticsPercentiles *)&v114);
  char v24 = (void *)MEMORY[0x1E4F2B370];
  BOOL v25 = [*(id *)(a1 + 16) canonicalUnit];
  uint64_t v26 = [v24 quantityWithUnit:v25 doubleValue:v23];
  [v107 setPercentileQuantity:v26];

  [v107 setDataCount:(v115 - (unsigned char *)v114) >> 3];
  uint64_t v27 = *(void *)(a1 + 24);
  char v104 = v27;
  if ((v27 & 0x20) != 0)
  {
    double v29 = *((double *)&v117 + 1);
    double v28 = *(double *)v118;
    double v30 = *(double *)&v118[8];
    uint64_t v31 = (void *)MEMORY[0x1E4F2B370];
    uint64_t v32 = [*(id *)(a1 + 16) canonicalUnit];
    uint64_t v26 = [v31 quantityWithUnit:v32 doubleValue:v29];
    [v107 setMostRecentQuantity:v26];

    int v33 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v28, v30);
    [v107 setMostRecentQuantityDateInterval:v33];

    uint64_t v27 = *(void *)(a1 + 24);
  }
  if ((v27 & 1) == 0) {
    goto LABEL_134;
  }
  id v103 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v102 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  if ((v104 & 0x20) != 0)
  {
    id v99 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v100 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else
  {
    id v99 = 0;
    id v100 = 0;
  }
  *(_OWORD *)long long __p = 0u;
  long long v110 = 0u;
  LODWORD(v111) = 1065353216;
  long long v34 = *(void **)(v105 + 240);
  if (v34 == (void *)(v105 + 248)) {
    goto LABEL_131;
  }
  do
  {
    long long v35 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_bundleIdentifierForSourceID(v105, v34[4]);
    long long v36 = v35;
    if (!v35) {
      goto LABEL_107;
    }
    unint64_t v37 = [v35 hash];
    unint64_t v38 = v37;
    unint64_t v39 = (unint64_t)__p[1];
    if (!__p[1]) {
      goto LABEL_48;
    }
    uint8x8_t v40 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v40.i16[0] = vaddlv_u8(v40);
    unint64_t v41 = v40.u32[0];
    if (v40.u32[0] > 1uLL)
    {
      unint64_t v3 = v37;
      if ((void *)v37 >= __p[1]) {
        unint64_t v3 = v37 % (unint64_t)__p[1];
      }
    }
    else
    {
      unint64_t v3 = ((unint64_t)__p[1] - 1) & v37;
    }
    double v42 = (uint64_t *)*((void *)__p[0] + v3);
    if (!v42 || (uint64_t v26 = *v42) == 0)
    {
LABEL_48:
      uint64_t v47 = (char *)operator new(0x90uLL);
      v119[0] = v47;
      v119[1] = &v110;
      *(void *)uint64_t v47 = 0;
      *((void *)v47 + 1) = v38;
      *((void *)v47 + 2) = v36;
      *(_OWORD *)(v47 + 24) = 0u;
      *(_OWORD *)(v47 + 40) = 0u;
      *(_OWORD *)(v47 + 56) = 0u;
      *(_OWORD *)(v47 + 72) = 0u;
      *(_OWORD *)(v47 + 88) = 0u;
      *(_OWORD *)(v47 + 104) = 0u;
      *(_OWORD *)(v47 + 120) = 0u;
      *((void *)v47 + 17) = 0;
      char v120 = 1;
      float v48 = (float)(unint64_t)(*((void *)&v110 + 1) + 1);
      if (v39 && (float)(*(float *)&v111 * (float)v39) >= v48)
      {
LABEL_94:
        long long v64 = (uint64_t *)*((void *)__p[0] + v3);
        uint64_t v26 = v119[0];
        if (v64)
        {
          *(void *)v119[0] = *v64;
        }
        else
        {
          *(void *)v119[0] = v110;
          *(void *)&long long v110 = v26;
          *((void *)__p[0] + v3) = &v110;
          if (!*(void *)v26)
          {
LABEL_103:
            v119[0] = 0;
            ++*((void *)&v110 + 1);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsTimeInterval>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsTimeInterval>,void *>>>>::reset[abi:ne180100]((uint64_t)v119);
            goto LABEL_104;
          }
          unint64_t v65 = *(void *)(*(void *)v26 + 8);
          if ((v39 & (v39 - 1)) != 0)
          {
            if (v65 >= v39) {
              v65 %= v39;
            }
          }
          else
          {
            v65 &= v39 - 1;
          }
          long long v64 = (uint64_t *)((char *)__p[0] + 8 * v65);
        }
        *long long v64 = v26;
        goto LABEL_103;
      }
      BOOL v49 = (v39 & (v39 - 1)) != 0;
      if (v39 < 3) {
        BOOL v49 = 1;
      }
      unint64_t v50 = v49 | (2 * v39);
      unint64_t v51 = vcvtps_u32_f32(v48 / *(float *)&v111);
      if (v50 <= v51) {
        int8x8_t prime = (int8x8_t)v51;
      }
      else {
        int8x8_t prime = (int8x8_t)v50;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v39 = (unint64_t)__p[1];
      if ((void *)*(void *)&prime > __p[1]) {
        goto LABEL_60;
      }
      if ((void *)*(void *)&prime < __p[1])
      {
        unint64_t v59 = vcvtps_u32_f32((float)*((unint64_t *)&v110 + 1) / *(float *)&v111);
        if (__p[1] < (void *)3
          || (uint8x8_t v60 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v60.i16[0] = vaddlv_u8(v60), v60.u32[0] > 1uLL))
        {
          unint64_t v59 = std::__next_prime(v59);
        }
        else
        {
          uint64_t v61 = 1 << -(char)__clz(v59 - 1);
          if (v59 >= 2) {
            unint64_t v59 = v61;
          }
        }
        if (*(void *)&prime <= v59) {
          int8x8_t prime = (int8x8_t)v59;
        }
        if (*(void *)&prime >= v39)
        {
          unint64_t v39 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_60:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v53 = operator new(8 * *(void *)&prime);
            uint64_t v54 = __p[0];
            __p[0] = v53;
            if (v54) {
              operator delete(v54);
            }
            uint64_t v55 = 0;
            __p[1] = (void *)prime;
            do
              *((void *)__p[0] + v55++) = 0;
            while (*(void *)&prime != v55);
            unint64_t v56 = (void **)v110;
            if ((void)v110)
            {
              unint64_t v57 = *(void *)(v110 + 8);
              uint8x8_t v58 = (uint8x8_t)vcnt_s8(prime);
              v58.i16[0] = vaddlv_u8(v58);
              if (v58.u32[0] > 1uLL)
              {
                if (v57 >= *(void *)&prime) {
                  v57 %= *(void *)&prime;
                }
              }
              else
              {
                v57 &= *(void *)&prime - 1;
              }
              *((void *)__p[0] + v57) = &v110;
              for (i = *v56; i; unint64_t v57 = v63)
              {
                unint64_t v63 = i[1];
                if (v58.u32[0] > 1uLL)
                {
                  if (v63 >= *(void *)&prime) {
                    v63 %= *(void *)&prime;
                  }
                }
                else
                {
                  v63 &= *(void *)&prime - 1;
                }
                if (v63 != v57)
                {
                  if (!*((void *)__p[0] + v63))
                  {
                    *((void *)__p[0] + v63) = v56;
                    goto LABEL_85;
                  }
                  *unint64_t v56 = (void *)*i;
                  void *i = **((void **)__p[0] + v63);
                  **((void **)__p[0] + v63) = i;
                  uint64_t i = v56;
                }
                unint64_t v63 = v57;
LABEL_85:
                unint64_t v56 = (void **)i;
                uint64_t i = (void *)*i;
              }
            }
            unint64_t v39 = (unint64_t)prime;
            goto LABEL_89;
          }
          uint64_t v73 = __p[0];
          __p[0] = 0;
          if (v73) {
            operator delete(v73);
          }
          unint64_t v39 = 0;
          __p[1] = 0;
        }
      }
LABEL_89:
      if ((v39 & (v39 - 1)) != 0)
      {
        if (v38 >= v39) {
          unint64_t v3 = v38 % v39;
        }
        else {
          unint64_t v3 = v38;
        }
      }
      else
      {
        unint64_t v3 = (v39 - 1) & v38;
      }
      goto LABEL_94;
    }
    unint64_t v101 = (unint64_t)__p[1] - 1;
    while (1)
    {
      unint64_t v43 = *(void *)(v26 + 8);
      if (v43 == v38) {
        break;
      }
      if (v41 > 1)
      {
        if (v43 >= v39) {
          v43 %= v39;
        }
      }
      else
      {
        v43 &= v101;
      }
      if (v43 != v3) {
        goto LABEL_48;
      }
LABEL_47:
      uint64_t v26 = *(void *)v26;
      if (!v26) {
        goto LABEL_48;
      }
    }
    id v44 = *(id *)(v26 + 16);
    id v45 = v36;
    uint64_t v46 = v45;
    if (v44 != v45)
    {
      uint64_t WeakRetained = [v44 isEqualToString:v45];

      if (WeakRetained) {
        goto LABEL_104;
      }
      goto LABEL_47;
    }

LABEL_104:
    *(_DWORD *)(v26 + 24) = *((_DWORD *)v34 + 10);
    if ((void *)(v26 + 16) != v34 + 4) {
      std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((char *)(v26 + 32), (char *)v34[6], v34[7], (uint64_t)(v34[7] - v34[6]) >> 3);
    }
    long long v66 = *(_OWORD *)(v34 + 9);
    long long v67 = *(_OWORD *)(v34 + 11);
    *(_OWORD *)(v26 + 82) = *(_OWORD *)((char *)v34 + 98);
    *(_OWORD *)(v26 + 72) = v67;
    *(_OWORD *)(v26 + 56) = v66;
    long long v68 = *(_OWORD *)(v34 + 15);
    long long v69 = *(_OWORD *)(v34 + 17);
    *(_WORD *)(v26 + 136) = *((_WORD *)v34 + 76);
    *(_OWORD *)(v26 + 120) = v69;
    *(_OWORD *)(v26 + 104) = v68;

LABEL_107:
    uint64_t v70 = (void *)v34[1];
    if (v70)
    {
      do
      {
        int8x16_t v71 = v70;
        uint64_t v70 = (void *)*v70;
      }
      while (v70);
    }
    else
    {
      do
      {
        int8x16_t v71 = (void *)v34[2];
        BOOL v72 = *v71 == (void)v34;
        long long v34 = v71;
      }
      while (!v72);
    }
    long long v34 = v71;
  }
  while (v71 != (void *)(v105 + 248));
  for (uint64_t j = (uint64_t **)v110; j; uint64_t j = (uint64_t **)*j)
  {
    long long v75 = j[2];
    unint64_t v76 = (void *)MEMORY[0x1E4F2B370];
    int v77 = [*(id *)(a1 + 16) canonicalUnit];
    if (!v122) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    long long v78 = (HDStatisticsPercentiles *)(*(uint64_t (**)(void *, uint64_t *))(*v122 + 48))(v122, (uint64_t *)j + 3);
    long long v79 = [v76 quantityWithUnit:v77 doubleValue:HDStatisticsPercentiles::calculatePercentileValue(v78)];
    [v103 setObject:v79 forKeyedSubscript:v75];

    if (!v122) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    long long v80 = NSNumber;
    long long v81 = (void *)(*(uint64_t (**)(void *, uint64_t *))(*v122 + 48))(v122, (uint64_t *)j + 3);
    __int16 v82 = [v80 numberWithLongLong:(uint64_t)(v81[1] - *v81) >> 3];
    [v102 setObject:v82 forKeyedSubscript:v75];
    uint64_t v26 = (v104 & 0x20) == 0;

    if ((v104 & 0x20) != 0)
    {
      if (!v122) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      long long v83 = (double *)(*(uint64_t (**)(void *, uint64_t *))(*v122 + 48))(v122, (uint64_t *)j + 3);
      double v85 = v83[4];
      double v84 = v83[5];
      double v86 = v83[6];
      long long v87 = (void *)MEMORY[0x1E4F2B370];
      uint64_t v88 = [*(id *)(a1 + 16) canonicalUnit];
      long long v89 = [v87 quantityWithUnit:v88 doubleValue:v85];
      [v99 setObject:v89 forKeyedSubscript:v75];

      long long v90 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v84, v86);
      [v100 setObject:v90 forKeyedSubscript:v75];
    }
  }
LABEL_131:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsTimeInterval>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsTimeInterval>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsTimeInterval>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsTimeInterval>>>::~__hash_table((uint64_t)__p);
  [v107 setPercentileQuantityBySource:v103];
  [v107 setDataCountBySource:v102];
  if ((v104 & 0x20) != 0)
  {
    [v107 setMostRecentQuantityBySource:v99];
    [v107 setMostRecentQuantityDateIntervalBySource:v100];
  }

LABEL_134:
  if (v114)
  {
    long long v115 = v114;
    operator delete(v114);
  }

  std::__function::__value_func<HDStatisticsPercentiles const& ()(HDStatisticsRelative<HDStatisticsPercentiles> const&)>::~__value_func[abi:ne180100](v121);
  int v91 = [*(id *)(a1 + 16) _unitForChangeInCanonicalUnit];
  long long v92 = [v107 averageQuantity];
  if (v92)
  {
    uint64_t v26 = [v107 averageQuantity];
    if (([(id)v26 isCompatibleWithUnit:v91] & 1) == 0)
    {

      goto LABEL_150;
    }
  }
  long long v93 = [v107 minimumQuantity];
  if (v93)
  {
    uint64_t WeakRetained = [v107 minimumQuantity];
    if (![(id)WeakRetained isCompatibleWithUnit:v91])
    {
      int v94 = 1;
      goto LABEL_144;
    }
  }
  uint64_t v95 = [v107 maximumQuantity];
  if (v95)
  {
    int v96 = [v107 maximumQuantity];
    int v97 = [v96 isCompatibleWithUnit:v91];

    int v94 = v97 ^ 1;
    if (v93) {
      goto LABEL_144;
    }
LABEL_148:
    if (!v92) {
      goto LABEL_149;
    }
LABEL_145:

    if ((v94 & 1) == 0) {
      goto LABEL_151;
    }
LABEL_150:
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8], @"Expected compatibility with %@", v91 format];
    goto LABEL_151;
  }
  int v94 = 0;
  if (!v93) {
    goto LABEL_148;
  }
LABEL_144:

  if (v92) {
    goto LABEL_145;
  }
LABEL_149:

  if (v94) {
    goto LABEL_150;
  }
LABEL_151:

  return v107;
}

void sub_1BD143154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  if (__p) {
    operator delete(__p);
  }

  std::__function::__value_func<HDStatisticsPercentiles const& ()(HDStatisticsRelative<HDStatisticsPercentiles> const&)>::~__value_func[abi:ne180100]((void *)(v37 - 168));
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 288);
  uint64_t v2 = *(void *)(a1 + 304);
  if (v1 != (*(void *)(a1 + 312) - v2) >> 3)
  {
    long long v4 = (void **)(a1 + 304);
    *(void *)(a1 + 312) = v2;
    std::vector<long long>::reserve((void **)(a1 + 304), v1);
    double v5 = *(void **)(a1 + 280);
    if (v5)
    {
      id v6 = *(char **)(a1 + 312);
      do
      {
        uint64_t v7 = v5[2];
        unint64_t v8 = *(void *)(a1 + 320);
        if ((unint64_t)v6 >= v8)
        {
          id v10 = (char *)*v4;
          uint64_t v11 = (v6 - (unsigned char *)*v4) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            id v10 = *(char **)(a1 + 304);
            id v6 = *(char **)(a1 + 312);
          }
          else
          {
            uint64_t v15 = 0;
          }
          id v16 = (void *)(v14 + 8 * v11);
          void *v16 = v7;
          uint64_t v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            uint64_t v17 = *((void *)v6 - 1);
            v6 -= 8;
            *--id v16 = v17;
          }
          *(void *)(a1 + 304) = v16;
          *(void *)(a1 + 312) = v9;
          *(void *)(a1 + 320) = v14 + 8 * v15;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)id v6 = v7;
          uint64_t v9 = v6 + 8;
        }
        *(void *)(a1 + 312) = v9;
        double v5 = (void *)*v5;
        id v6 = v9;
      }
      while (v5);
    }
    long long v18 = (id *)(a1 + 88);
    id WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      id v20 = objc_loadWeakRetained(v18);
      [v20 orderSourceIDs:v4];
    }
  }
}

void sub_1BD14354C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2) {
    a2 = v4 * floor(a2 / v4);
  }
  double v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    id v100 = (char **)(a1 + 96);
    long long v98 = (HDStatisticsPercentiles *)(a1 + 120);
    location = (id *)(a1 + 88);
    id v6 = (void *)(a1 + 248);
    do
    {
      uint64_t v7 = *(double **)(a1 + 96);
      unint64_t v8 = *(long long **)(a1 + 104);
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v7) >> 4);
      if (v9)
      {
        if (v9 != 1)
        {
          double v30 = a2;
          double v31 = a2;
          double v32 = v5;
          uint64_t v33 = *(void *)(a1 + 96);
          if (v7 != (double *)v8)
          {
            do
            {
              double v34 = *(double *)(v33 + 8);
              double v35 = *(double *)(v33 + 16);
              if (v34 > v32 && v34 < v31) {
                double v31 = *(double *)(v33 + 8);
              }
              if (v35 > v5) {
                double v37 = *(double *)(v33 + 16);
              }
              else {
                double v37 = v30;
              }
              if (v35 < v30)
              {
                double v32 = v5;
                double v30 = v37;
              }
              v33 += 48;
            }
            while ((long long *)v33 != v8);
          }
          if (v30 >= v31) {
            double v38 = v31;
          }
          else {
            double v38 = v30;
          }
          double v39 = *(double *)(a1 + 16);
          if (v39 > 0.0)
          {
            double v40 = v39 * floor(v38 / v39);
            double v41 = v39 * floor((v39 + v5) / v39);
            if (v40 >= v41) {
              double v38 = v40;
            }
            else {
              double v38 = v41;
            }
          }
          *id v100 = 0;
          v100[1] = 0;
          v100[2] = 0;
          if (v7 != (double *)v8)
          {
            if (v9 > 0x555555555555555) {
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            }
            double v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v9);
            id v45 = *(char **)(a1 + 96);
            id v44 = *(char **)(a1 + 104);
            uint64_t v46 = v42;
            if (v44 != v45)
            {
              do
              {
                long long v47 = *((_OWORD *)v44 - 3);
                long long v48 = *((_OWORD *)v44 - 2);
                *(_OWORD *)(v46 - 21) = *(_OWORD *)(v44 - 21);
                *((_OWORD *)v46 - 3) = v47;
                *((_OWORD *)v46 - 2) = v48;
                v46 -= 48;
                v44 -= 48;
              }
              while (v44 != v45);
              id v44 = *v100;
            }
            *(void *)(a1 + 96) = v46;
            *(void *)(a1 + 104) = v42;
            *(void *)(a1 + 112) = &v42[48 * v43];
            if (v44) {
              operator delete(v44);
            }
          }
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_updateSourceOrder(a1);
          id WeakRetained = objc_loadWeakRetained(location);

          if (WeakRetained)
          {
            *(void *)&v102.var0 = a1;
            unint64_t v50 = 126 - 2 * __clz(v9);
            if (v7 == (double *)v8) {
              uint64_t v51 = 0;
            }
            else {
              uint64_t v51 = v50;
            }
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_SampleRemainder*,false>((unint64_t)v7, v8, (uint64_t)&v102, v51, 1);
          }
          if (*(unsigned char *)(a1 + 25)) {
            id v97 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
          }
          else {
            id v97 = 0;
          }
          if (v7 == (double *)v8)
          {
LABEL_135:
            long long v87 = *(void **)(a1 + 240);
            if (v87 != v6)
            {
              do
              {
                uint64_t v88 = (void *)v87[1];
                if (v88)
                {
                  do
                  {
                    long long v89 = v88;
                    uint64_t v88 = (void *)*v88;
                  }
                  while (v88);
                }
                else
                {
                  do
                  {
                    long long v89 = (void *)v87[2];
                    BOOL v90 = *v89 == (void)v87;
                    long long v87 = v89;
                  }
                  while (!v90);
                }
                long long v87 = v89;
              }
              while (v89 != v6);
            }
            *(double *)(a1 + 56) = v38;

            if (v7) {
              operator delete(v7);
            }
            goto LABEL_149;
          }
          int64_t v99 = 0;
          char v57 = 0;
          uint8x8_t v58 = v7;
          while (2)
          {
            long long v59 = *((_OWORD *)v58 + 1);
            *(_OWORD *)&v102.var0 = *(_OWORD *)v58;
            *(_OWORD *)&v102.double var2 = v59;
            *(double *)&v102.BOOL var4 = v58[4];
            if (!v102.var4 || v102.var1 > v38)
            {
              uint8x8_t v60 = *(_OWORD **)(a1 + 104);
              unint64_t v61 = *(void *)(a1 + 112);
              if ((unint64_t)v60 >= v61)
              {
                unint64_t v65 = 0xAAAAAAAAAAAAAAABLL * (((char *)v60 - *v100) >> 4);
                unint64_t v66 = v65 + 1;
                if (v65 + 1 > 0x555555555555555) {
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v61 - (void)*v100) >> 4);
                if (2 * v67 > v66) {
                  unint64_t v66 = 2 * v67;
                }
                if (v67 >= 0x2AAAAAAAAAAAAAALL) {
                  unint64_t v68 = 0x555555555555555;
                }
                else {
                  unint64_t v68 = v66;
                }
                if (v68) {
                  unint64_t v68 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v68);
                }
                else {
                  uint64_t v69 = 0;
                }
                uint64_t v73 = (_OWORD *)(v68 + 48 * v65);
                long long v74 = *(_OWORD *)v58;
                long long v75 = *((_OWORD *)v58 + 2);
                v73[1] = *((_OWORD *)v58 + 1);
                v73[2] = v75;
                *uint64_t v73 = v74;
                int v77 = *(char **)(a1 + 96);
                unint64_t v76 = *(char **)(a1 + 104);
                long long v78 = v73;
                if (v76 != v77)
                {
                  do
                  {
                    long long v79 = *((_OWORD *)v76 - 3);
                    long long v80 = *((_OWORD *)v76 - 2);
                    *(_OWORD *)((char *)v78 - 21) = *(_OWORD *)(v76 - 21);
                    *(v78 - 3) = v79;
                    *(v78 - 2) = v80;
                    v78 -= 3;
                    v76 -= 48;
                  }
                  while (v76 != v77);
                  unint64_t v76 = *v100;
                }
                long long v64 = v73 + 3;
                *(void *)(a1 + 96) = v78;
                *(void *)(a1 + 104) = v73 + 3;
                *(void *)(a1 + 112) = v68 + 48 * v69;
                if (v76) {
                  operator delete(v76);
                }
              }
              else
              {
                long long v62 = *(_OWORD *)v58;
                long long v63 = *((_OWORD *)v58 + 2);
                v60[1] = *((_OWORD *)v58 + 1);
                v60[2] = v63;
                *uint8x8_t v60 = v62;
                long long v64 = v60 + 3;
              }
              *(void *)(a1 + 104) = v64;
LABEL_134:
              v58 += 6;
              if (v58 == (double *)v8) {
                goto LABEL_135;
              }
              continue;
            }
            break;
          }
          double var2 = v102.var2;
          if (v102.var2 > v38) {
            double var2 = v38;
          }
          v102.double var2 = var2;
          for (uint64_t i = *(double **)(a1 + 64); i != *(double **)(a1 + 72) && v102.var1 >= *i; i += 2)
          {
            if (v102.var1 < i[1]) {
              goto LABEL_134;
            }
          }
          if (v57)
          {
            unint64_t var3 = v102.var3;
            if (v99 == v102.var3 || *(unsigned char *)(a1 + 24)) {
              HDStatisticsRelative<HDStatisticsPercentiles>::addSample(v98, &v102);
            }
          }
          else
          {
            HDStatisticsRelative<HDStatisticsPercentiles>::addSample(v98, &v102);
            unint64_t var3 = v102.var3;
            int64_t v99 = v102.var3;
          }
          if (!*(unsigned char *)(a1 + 25)) {
            goto LABEL_133;
          }
          long long v81 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_bundleIdentifierForSourceID(a1, var3);
          if (!v81) {
            goto LABEL_132;
          }
          __int16 v82 = [v97 objectForKeyedSubscript:v81];
          long long v83 = v82;
          if (v82)
          {
            if ([v82 longLongValue] != var3 && !*(unsigned char *)(a1 + 24))
            {
LABEL_131:

LABEL_132:
LABEL_133:
              char v57 = 1;
              goto LABEL_134;
            }
          }
          else
          {
            double v84 = [NSNumber numberWithLongLong:var3];
            [v97 setObject:v84 forKeyedSubscript:v81];
          }
          unint64_t v85 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_canonicalSourceIDForSourceID(a1, var3);
          double v86 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_statisticsForSource(a1, v85);
          HDStatisticsRelative<HDStatisticsPercentiles>::addSample((HDStatisticsPercentiles *)v86, &v102);
          goto LABEL_131;
        }
        int v10 = *((unsigned __int8 *)v7 + 42);
        int v11 = *((unsigned __int8 *)v7 + 41);
        int v12 = *((unsigned __int8 *)v7 + 40);
        double v13 = v7[1];
        double v14 = v7[2];
        unint64_t v15 = *((void *)v7 + 3);
        char v16 = *((unsigned char *)v7 + 33);
        if (v14 <= a2) {
          double v17 = v7[2];
        }
        else {
          double v17 = a2;
        }
        if (v13 < a2) {
          int v18 = *((unsigned __int8 *)v7 + 32);
        }
        else {
          int v18 = 0;
        }
        if (v13 < a2) {
          char v19 = 0;
        }
        else {
          char v19 = *((unsigned char *)v7 + 33);
        }
        if (v13 < a2)
        {
          uint64_t v20 = 0;
        }
        else
        {
          double v17 = v7[2];
          uint64_t v20 = *((void *)v7 + 3);
        }
        if (v13 < a2) {
          double v21 = 0.0;
        }
        else {
          double v21 = v7[2];
        }
        if (v13 < a2) {
          double v22 = 0.0;
        }
        else {
          double v22 = *v7;
        }
        if (v13 < a2) {
          double v23 = 0.0;
        }
        else {
          double v23 = v7[1];
        }
        if (v13 < a2) {
          int v24 = 0;
        }
        else {
          int v24 = *((unsigned __int8 *)v7 + 32);
        }
        if (*((unsigned char *)v7 + 32))
        {
          double v14 = v17;
        }
        else
        {
          int v18 = 0;
          char v19 = 0;
          uint64_t v20 = 0;
        }
        if (*((unsigned char *)v7 + 32)) {
          double v25 = v21;
        }
        else {
          double v25 = 0.0;
        }
        if (*((unsigned char *)v7 + 32)) {
          double v26 = v22;
        }
        else {
          double v26 = 0.0;
        }
        if (*((unsigned char *)v7 + 32)) {
          double v27 = v23;
        }
        else {
          double v27 = 0.0;
        }
        if (*((unsigned char *)v7 + 32)) {
          int v28 = v24;
        }
        else {
          int v28 = 0;
        }
        v102.var0 = *v7;
        v102.double var1 = v13;
        v102.double var2 = v14;
        v102.unint64_t var3 = v15;
        v102.BOOL var4 = v18;
        v102.BOOL var5 = v16;
        *(_DWORD *)(&v102.var5 + 1) = *(_DWORD *)((char *)v7 + 34);
        *(_WORD *)(&v102.var5 + 5) = *((_WORD *)v7 + 19);
        *(double *)&long long v103 = v26;
        *((double *)&v103 + 1) = v27;
        *(double *)&long long v104 = v25;
        *((void *)&v104 + 1) = v20;
        LOBYTE(v105) = v28;
        HIBYTE(v105) = v19;
        for (uint64_t j = *(double **)(a1 + 64); j != *(double **)(a1 + 72) && v13 >= *j; j += 2)
        {
          if (v13 < j[1])
          {
            BOOL v52 = v12 != 0;
            BOOL v53 = v11 != 0;
            BOOL v54 = v10 != 0;
            goto LABEL_145;
          }
        }
        BOOL v52 = v12 != 0;
        BOOL v53 = v11 != 0;
        BOOL v54 = v10 != 0;
        if (v18)
        {
          HDStatisticsRelative<HDStatisticsPercentiles>::addSample(v98, &v102);
          if (*(unsigned char *)(a1 + 25))
          {
            unint64_t v55 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_canonicalSourceIDForSourceID(a1, v15);
            unint64_t v56 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_statisticsForSource(a1, v55);
            HDStatisticsRelative<HDStatisticsPercentiles>::addSample((HDStatisticsPercentiles *)v56, &v102);
          }
          BOOL v52 = 1;
          BOOL v53 = 1;
          BOOL v54 = 1;
        }
LABEL_145:
        if (v28)
        {
          LOWORD(v101) = v105;
          long long v91 = v104;
          long long v92 = *v100;
          *(_OWORD *)long long v92 = v103;
          *((_OWORD *)v92 + 1) = v91;
          *((void *)v92 + 4) = v101;
          v92[40] = v52;
          v92[41] = v53;
          v92[42] = v54;
        }
        else
        {
          *(void *)(a1 + 104) = *(void *)(a1 + 96);
        }
      }
      *(double *)(a1 + 56) = a2;
LABEL_149:
      double v93 = *(double *)(a1 + 56);
      if (v93 == v5)
      {
        int v94 = [MEMORY[0x1E4F28B00] currentHandler];
        uint64_t v95 = [NSString stringWithUTF8String:"void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_mergeThroughTime(double) [Statistics = HDStatisticsRelative<HDStatisticsPercentiles>]"];
        [v94 handleFailureInFunction:v95 file:@"HDStatisticsBucket.hpp" lineNumber:234 description:@"Failed to make forward progress during statistics merge."];

        double v93 = *(double *)(a1 + 56);
      }
      double v5 = v93;
    }
    while (v93 < a2);
  }
}

void sub_1BD143CEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void HDStatisticsRelative<HDStatisticsPercentiles>::addSample(HDStatisticsPercentiles *this, HDRawQuantitySample *a2)
{
  uint64_t v2 = a2;
  int v4 = 2 * (a2->var0 != -1.79769313e308);
  if (a2->var0 == 1.79769313e308) {
    int v4 = 1;
  }
  if (!v4)
  {
    if (*(_DWORD *)this || *((void *)this + 2) != *((void *)this + 1)) {
      return;
    }
    double v5 = (HDStatisticsPercentiles *)((char *)this + 8);
    goto LABEL_18;
  }
  if (v4 == 1)
  {
    if (*(_DWORD *)this) {
      return;
    }
    int v6 = 1;
    goto LABEL_15;
  }
  if (v4 != 2) {
    return;
  }
  if (*(_DWORD *)this != 2)
  {
    int v6 = 2;
LABEL_15:
    *(_DWORD *)this = v6;
    unint64_t v8 = (_OWORD *)((char *)this + 8);
    uint64_t v7 = (void *)*((void *)this + 1);
    if (v7)
    {
      *((void *)this + 2) = v7;
      operator delete(v7);
    }
    _OWORD *v8 = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
    long long v9 = *((_OWORD *)this + 6);
    *(_OWORD *)((char *)this + 40) = *((_OWORD *)this + 5);
    *(_OWORD *)((char *)this + 56) = v9;
    *((_WORD *)this + 36) = *((_WORD *)this + 56);
    double v5 = (HDStatisticsPercentiles *)((char *)this + 8);
LABEL_18:
    a2 = v2;
    goto LABEL_19;
  }
  double v5 = (HDStatisticsPercentiles *)((char *)this + 8);
LABEL_19:

  HDStatisticsPercentiles::addSample(v5, a2);
}

unint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    double v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((void *)(a1 + 328), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_bundleIdentifierForSourceID(a1, a2);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      id v10 = v6;
      uint64_t v7 = (void *)(a1 + 368);
      unint64_t v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        int v11 = &v10;
        *((void *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        id v6 = v10;
      }
    }
  }
  return a2;
}

void sub_1BD143F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  int v4 = (id *)(a1 + 88);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    id v6 = (void *)(a1 + 408);
    uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
    if (v7)
    {
      id v8 = (id)v7[3];
    }
    else
    {
      id v9 = objc_loadWeakRetained(v4);
      id v8 = [v9 bundleIdentifierForSourceID:a2];

      if (v8)
      {
        id v10 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
        objc_storeStrong(v10 + 3, v8);
      }
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1BD14401C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v12 = a2 - 3;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 4);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v103 = *((void *)a2 - 3);
                uint64_t v104 = *(void *)(v13 + 24);
                if (v103 == v104) {
                  return;
                }
                __int16 v105 = *(char **)(*(void *)a3 + 304);
                id v106 = *(char **)(*(void *)a3 + 312);
                id v107 = v105;
                uint64_t v108 = v105;
                if (v105 == v106) {
                  goto LABEL_171;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>((long long *)v13, (long long *)(v13 + 48), a2 - 3, a3);
                return;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, (uint64_t)(a2 - 3), a3);
                return;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, v13 + 144, (uint64_t)(a2 - 3), a3);
                return;
              default:
                JUMPOUT(0);
            }
            do
            {
              if (*(void *)v108 == v103) {
                goto LABEL_168;
              }
              v108 += 8;
            }
            while (v108 != v106);
            uint64_t v108 = *(char **)(*(void *)a3 + 312);
LABEL_168:
            while (*(void *)v107 != v104)
            {
              v107 += 8;
              if (v107 == v106)
              {
                id v107 = *(char **)(*(void *)a3 + 312);
                break;
              }
            }
LABEL_171:
            if (v108 - v105 < v107 - v105)
            {
              *(_OWORD *)v226 = *(_OWORD *)(v13 + 16);
              *(_OWORD *)&v226[16] = *(_OWORD *)(v13 + 32);
              long long v218 = *(_OWORD *)v13;
              long long v109 = *v12;
              long long v110 = *(a2 - 2);
              *(_OWORD *)(v13 + 27) = *(long long *)((char *)a2 - 21);
              *(_OWORD *)unint64_t v13 = v109;
              *(_OWORD *)(v13 + 16) = v110;
              *(long long *)((char *)a2 - 21) = *(_OWORD *)&v226[11];
              long long *v12 = v218;
              *(a2 - 2) = *(_OWORD *)v226;
            }
            return;
          }
          if (v14 <= 1151)
          {
            long long v111 = (long long *)(v13 + 48);
            BOOL v113 = (long long *)v13 == a2 || v111 == a2;
            if (a5)
            {
              if (!v113)
              {
                unint64_t v114 = v13;
                do
                {
                  unint64_t v115 = v114;
                  unint64_t v114 = (unint64_t)v111;
                  uint64_t v116 = *(void *)(v115 + 72);
                  uint64_t v117 = *(void *)(v115 + 24);
                  if (v116 != v117)
                  {
                    long long v118 = *(char **)(*(void *)a3 + 304);
                    long long v119 = *(char **)(*(void *)a3 + 312);
                    char v120 = v118;
                    long long v121 = v118;
                    if (v118 != v119)
                    {
                      do
                      {
                        if (*(void *)v121 == v116) {
                          goto LABEL_196;
                        }
                        v121 += 8;
                      }
                      while (v121 != v119);
                      long long v121 = *(char **)(*(void *)a3 + 312);
LABEL_196:
                      while (*(void *)v120 != v117)
                      {
                        v120 += 8;
                        if (v120 == v119)
                        {
                          char v120 = *(char **)(*(void *)a3 + 312);
                          break;
                        }
                      }
                    }
                    if (v121 - v118 < v120 - v118)
                    {
                      uint64_t v227 = *(void *)(v114 + 16);
                      long long v219 = *(_OWORD *)v114;
                      long long v236 = *(_OWORD *)(v115 + 80);
                      unint64_t v122 = v114;
                      while (1)
                      {
                        long long v123 = *(_OWORD *)(v115 + 16);
                        *(_OWORD *)unint64_t v122 = *(_OWORD *)v115;
                        *(_OWORD *)(v122 + 16) = v123;
                        *(_OWORD *)(v122 + 27) = *(_OWORD *)(v115 + 27);
                        if (v115 == v13) {
                          break;
                        }
                        unint64_t v122 = v115;
                        uint64_t v124 = *(void *)(v115 - 24);
                        if (v116 != v124)
                        {
                          uint64_t v125 = *(char **)(*(void *)a3 + 304);
                          uint64_t v126 = *(char **)(*(void *)a3 + 312);
                          uint64_t v127 = v125;
                          uint64_t v128 = v125;
                          if (v125 != v126)
                          {
                            do
                            {
                              if (*(void *)v128 == v116) {
                                goto LABEL_208;
                              }
                              v128 += 8;
                            }
                            while (v128 != v126);
                            uint64_t v128 = *(char **)(*(void *)a3 + 312);
LABEL_208:
                            while (*(void *)v127 != v124)
                            {
                              v127 += 8;
                              if (v127 == v126)
                              {
                                uint64_t v127 = *(char **)(*(void *)a3 + 312);
                                break;
                              }
                            }
                          }
                          unint64_t v115 = v122 - 48;
                          if (v128 - v125 < v127 - v125) {
                            continue;
                          }
                        }
                        goto LABEL_212;
                      }
                      unint64_t v122 = v13;
LABEL_212:
                      *(_OWORD *)unint64_t v122 = v219;
                      *(void *)(v122 + 16) = v227;
                      *(void *)(v122 + 24) = v116;
                      *(void *)(v122 + 32) = v236;
                      *(_DWORD *)(v122 + 39) = *(_DWORD *)((char *)&v236 + 7);
                    }
                  }
                  long long v111 = (long long *)(v114 + 48);
                }
                while ((long long *)(v114 + 48) != a2);
              }
            }
            else if (!v113)
            {
              do
              {
                unint64_t v201 = a1;
                a1 = (unint64_t)v111;
                uint64_t v202 = *(void *)(v201 + 72);
                uint64_t v203 = *(void *)(v201 + 24);
                if (v202 != v203)
                {
                  v204 = *(char **)(*(void *)a3 + 304);
                  v205 = *(char **)(*(void *)a3 + 312);
                  v206 = v204;
                  v207 = v204;
                  if (v204 != v205)
                  {
                    do
                    {
                      if (*(void *)v207 == v202) {
                        goto LABEL_312;
                      }
                      v207 += 8;
                    }
                    while (v207 != v205);
                    v207 = *(char **)(*(void *)a3 + 312);
LABEL_312:
                    while (*(void *)v206 != v203)
                    {
                      v206 += 8;
                      if (v206 == v205)
                      {
                        v206 = *(char **)(*(void *)a3 + 312);
                        break;
                      }
                    }
                  }
                  if (v207 - v204 < v206 - v204)
                  {
                    uint64_t v230 = *(void *)(a1 + 16);
                    long long v222 = *(_OWORD *)a1;
                    long long v239 = *(_OWORD *)(v201 + 80);
                    unint64_t v208 = a1;
                    do
                    {
                      v209 = (_OWORD *)v208;
                      unint64_t v208 = v201;
                      long long v210 = *(_OWORD *)(v201 + 16);
                      _OWORD *v209 = *(_OWORD *)v201;
                      v209[1] = v210;
                      *(_OWORD *)((char *)v209 + 27) = *(_OWORD *)(v201 + 27);
                      uint64_t v211 = *(void *)(v201 - 24);
                      if (v202 == v211) {
                        break;
                      }
                      v212 = *(char **)(*(void *)a3 + 304);
                      v213 = *(char **)(*(void *)a3 + 312);
                      v214 = v212;
                      v215 = v212;
                      if (v212 != v213)
                      {
                        do
                        {
                          if (*(void *)v215 == v202) {
                            goto LABEL_322;
                          }
                          v215 += 8;
                        }
                        while (v215 != v213);
                        v215 = *(char **)(*(void *)a3 + 312);
LABEL_322:
                        while (*(void *)v214 != v211)
                        {
                          v214 += 8;
                          if (v214 == v213)
                          {
                            v214 = *(char **)(*(void *)a3 + 312);
                            break;
                          }
                        }
                      }
                      unint64_t v201 = v208 - 48;
                    }
                    while (v215 - v212 < v214 - v212);
                    *(_OWORD *)unint64_t v208 = v222;
                    *(void *)(v208 + 16) = v230;
                    *(void *)(v208 + 24) = v202;
                    *(void *)(v208 + 32) = v239;
                    *(_DWORD *)(v208 + 39) = *(_DWORD *)((char *)&v239 + 7);
                  }
                }
                long long v111 = (long long *)(a1 + 48);
              }
              while ((long long *)(a1 + 48) != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((long long *)v13 != a2)
            {
              int64_t v129 = (v15 - 2) >> 1;
              int64_t v130 = v129;
              do
              {
                int64_t v131 = v130;
                if (v129 >= v130)
                {
                  uint64_t v132 = (2 * v130) | 1;
                  unint64_t v133 = v13 + 48 * v132;
                  if (2 * v131 + 2 < (uint64_t)v15)
                  {
                    uint64_t v134 = *(void *)(v133 + 24);
                    uint64_t v135 = *(void *)(v133 + 72);
                    if (v134 != v135)
                    {
                      v137 = *(char **)(*(void *)a3 + 304);
                      v136 = *(char **)(*(void *)a3 + 312);
                      v138 = v137;
                      v139 = v137;
                      if (v137 != v136)
                      {
                        do
                        {
                          if (*(void *)v139 == v134) {
                            goto LABEL_224;
                          }
                          v139 += 8;
                        }
                        while (v139 != v136);
                        v139 = *(char **)(*(void *)a3 + 312);
LABEL_224:
                        while (*(void *)v138 != v135)
                        {
                          v138 += 8;
                          if (v138 == v136)
                          {
                            v138 = *(char **)(*(void *)a3 + 312);
                            break;
                          }
                        }
                      }
                      v133 += 48 * (v139 - v137 < v138 - v137);
                      if (v139 - v137 < v138 - v137) {
                        uint64_t v132 = 2 * v131 + 2;
                      }
                    }
                  }
                  unint64_t v140 = v13 + 48 * v131;
                  uint64_t v141 = *(void *)(v133 + 24);
                  uint64_t v142 = *(void *)(v140 + 24);
                  if (v141 == v142) {
                    goto LABEL_238;
                  }
                  v144 = *(char **)(*(void *)a3 + 304);
                  v143 = *(char **)(*(void *)a3 + 312);
                  v145 = v144;
                  v146 = v144;
                  if (v144 != v143)
                  {
                    do
                    {
                      if (*(void *)v146 == v141) {
                        goto LABEL_234;
                      }
                      v146 += 8;
                    }
                    while (v146 != v143);
                    v146 = *(char **)(*(void *)a3 + 312);
LABEL_234:
                    while (*(void *)v145 != v142)
                    {
                      v145 += 8;
                      if (v145 == v143)
                      {
                        v145 = *(char **)(*(void *)a3 + 312);
                        break;
                      }
                    }
                  }
                  if (v146 - v144 >= v145 - v144)
                  {
LABEL_238:
                    uint64_t v228 = *(void *)(v140 + 16);
                    long long v220 = *(_OWORD *)v140;
                    long long v237 = *(_OWORD *)(v140 + 32);
                    long long v147 = *(_OWORD *)v133;
                    long long v148 = *(_OWORD *)(v133 + 16);
                    *(_OWORD *)(v140 + 27) = *(_OWORD *)(v133 + 27);
                    *(_OWORD *)unint64_t v140 = v147;
                    *(_OWORD *)(v140 + 16) = v148;
                    if (v129 >= v132)
                    {
                      while (1)
                      {
                        uint64_t v150 = 2 * v132;
                        uint64_t v132 = (2 * v132) | 1;
                        unint64_t v149 = v13 + 48 * v132;
                        uint64_t v151 = v150 + 2;
                        if (v151 < (uint64_t)v15)
                        {
                          uint64_t v152 = *(void *)(v149 + 24);
                          uint64_t v153 = *(void *)(v149 + 72);
                          if (v152 != v153)
                          {
                            v154 = *(char **)(*(void *)a3 + 304);
                            v155 = *(char **)(*(void *)a3 + 312);
                            v156 = v154;
                            v157 = v154;
                            if (v154 != v155)
                            {
                              do
                              {
                                if (*(void *)v157 == v152) {
                                  goto LABEL_246;
                                }
                                v157 += 8;
                              }
                              while (v157 != v155);
                              v157 = *(char **)(*(void *)a3 + 312);
LABEL_246:
                              while (*(void *)v156 != v153)
                              {
                                v156 += 8;
                                if (v156 == v155)
                                {
                                  v156 = *(char **)(*(void *)a3 + 312);
                                  break;
                                }
                              }
                            }
                            v149 += 48 * (v157 - v154 < v156 - v154);
                            if (v157 - v154 < v156 - v154) {
                              uint64_t v132 = v151;
                            }
                          }
                        }
                        uint64_t v158 = *(void *)(v149 + 24);
                        if (v158 != v142)
                        {
                          v160 = *(char **)(*(void *)a3 + 304);
                          v159 = *(char **)(*(void *)a3 + 312);
                          v161 = v160;
                          v162 = v160;
                          if (v160 != v159)
                          {
                            do
                            {
                              if (*(void *)v162 == v158) {
                                goto LABEL_256;
                              }
                              v162 += 8;
                            }
                            while (v162 != v159);
                            v162 = *(char **)(*(void *)a3 + 312);
LABEL_256:
                            while (*(void *)v161 != v142)
                            {
                              v161 += 8;
                              if (v161 == v159)
                              {
                                v161 = *(char **)(*(void *)a3 + 312);
                                break;
                              }
                            }
                          }
                          if (v162 - v160 < v161 - v160) {
                            break;
                          }
                        }
                        long long v163 = *(_OWORD *)v149;
                        long long v164 = *(_OWORD *)(v149 + 16);
                        *(_OWORD *)(v133 + 27) = *(_OWORD *)(v149 + 27);
                        *(_OWORD *)unint64_t v133 = v163;
                        *(_OWORD *)(v133 + 16) = v164;
                        unint64_t v133 = v149;
                        if (v129 < v132) {
                          goto LABEL_261;
                        }
                      }
                    }
                    unint64_t v149 = v133;
LABEL_261:
                    *(_OWORD *)unint64_t v149 = v220;
                    *(void *)(v149 + 16) = v228;
                    *(void *)(v149 + 24) = v142;
                    *(void *)(v149 + 32) = v237;
                    *(_DWORD *)(v149 + 39) = *(_DWORD *)((char *)&v237 + 7);
                  }
                }
                int64_t v130 = v131 - 1;
              }
              while (v131);
              int64_t v165 = v14 / 0x30uLL;
              do
              {
                uint64_t v166 = 0;
                *(_OWORD *)v229 = *(_OWORD *)(v13 + 16);
                *(_OWORD *)&v229[16] = *(_OWORD *)(v13 + 32);
                long long v221 = *(_OWORD *)v13;
                uint64_t v167 = v165 - 2;
                if (v165 < 2) {
                  uint64_t v167 = v165 - 1;
                }
                uint64_t v168 = v167 >> 1;
                unint64_t v169 = v13;
                do
                {
                  v170 = (_OWORD *)v169;
                  v169 += 48 * v166 + 48;
                  uint64_t v171 = 2 * v166;
                  uint64_t v166 = (2 * v166) | 1;
                  uint64_t v172 = v171 + 2;
                  if (v171 + 2 < v165)
                  {
                    uint64_t v173 = *(void *)(v169 + 24);
                    uint64_t v174 = *(void *)(v169 + 72);
                    if (v173 != v174)
                    {
                      v176 = *(char **)(*(void *)a3 + 304);
                      v175 = *(char **)(*(void *)a3 + 312);
                      v177 = v176;
                      v178 = v176;
                      if (v176 != v175)
                      {
                        do
                        {
                          if (*(void *)v178 == v173) {
                            goto LABEL_273;
                          }
                          v178 += 8;
                        }
                        while (v178 != v175);
                        v178 = *(char **)(*(void *)a3 + 312);
LABEL_273:
                        while (*(void *)v177 != v174)
                        {
                          v177 += 8;
                          if (v177 == v175)
                          {
                            v177 = *(char **)(*(void *)a3 + 312);
                            break;
                          }
                        }
                      }
                      v169 += 48 * (v178 - v176 < v177 - v176);
                      if (v178 - v176 < v177 - v176) {
                        uint64_t v166 = v172;
                      }
                    }
                  }
                  long long v179 = *(_OWORD *)v169;
                  long long v180 = *(_OWORD *)(v169 + 16);
                  *(_OWORD *)((char *)v170 + 27) = *(_OWORD *)(v169 + 27);
                  _OWORD *v170 = v179;
                  v170[1] = v180;
                }
                while (v166 <= v168);
                a2 -= 3;
                if ((long long *)v169 == a2)
                {
                  *(_OWORD *)(v169 + 27) = *(_OWORD *)&v229[11];
                  *(_OWORD *)unint64_t v169 = v221;
                  *(_OWORD *)(v169 + 16) = *(_OWORD *)v229;
                }
                else
                {
                  long long v181 = *a2;
                  long long v182 = a2[1];
                  *(_OWORD *)(v169 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v169 = v181;
                  *(_OWORD *)(v169 + 16) = v182;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v229[11];
                  *a2 = v221;
                  a2[1] = *(_OWORD *)v229;
                  uint64_t v183 = v169 - v13 + 48;
                  if (v183 >= 49)
                  {
                    unint64_t v184 = (v183 / 0x30uLL - 2) >> 1;
                    unint64_t v185 = v13 + 48 * v184;
                    uint64_t v186 = *(void *)(v185 + 24);
                    uint64_t v187 = *(void *)(v169 + 24);
                    if (v186 != v187)
                    {
                      v189 = *(char **)(*(void *)a3 + 304);
                      v188 = *(char **)(*(void *)a3 + 312);
                      v190 = v189;
                      v191 = v189;
                      if (v189 != v188)
                      {
                        do
                        {
                          if (*(void *)v191 == v186) {
                            goto LABEL_286;
                          }
                          v191 += 8;
                        }
                        while (v191 != v188);
                        v191 = *(char **)(*(void *)a3 + 312);
LABEL_286:
                        while (*(void *)v190 != v187)
                        {
                          v190 += 8;
                          if (v190 == v188)
                          {
                            v190 = *(char **)(*(void *)a3 + 312);
                            break;
                          }
                        }
                      }
                      if (v191 - v189 < v190 - v189)
                      {
                        uint64_t v242 = *(void *)(v169 + 16);
                        long long v238 = *(_OWORD *)v169;
                        long long v233 = *(_OWORD *)(v169 + 32);
                        do
                        {
                          v192 = (_OWORD *)v169;
                          unint64_t v169 = v185;
                          long long v193 = *(_OWORD *)v185;
                          long long v194 = *(_OWORD *)(v185 + 16);
                          *(_OWORD *)((char *)v192 + 27) = *(_OWORD *)(v185 + 27);
                          _OWORD *v192 = v193;
                          v192[1] = v194;
                          if (!v184) {
                            break;
                          }
                          unint64_t v184 = (v184 - 1) >> 1;
                          unint64_t v185 = v13 + 48 * v184;
                          uint64_t v195 = *(void *)(v185 + 24);
                          if (v195 == v187) {
                            break;
                          }
                          v197 = *(char **)(*(void *)a3 + 304);
                          v196 = *(char **)(*(void *)a3 + 312);
                          v198 = v197;
                          v199 = v197;
                          if (v197 != v196)
                          {
                            do
                            {
                              if (*(void *)v199 == v195) {
                                goto LABEL_297;
                              }
                              v199 += 8;
                            }
                            while (v199 != v196);
                            v199 = *(char **)(*(void *)a3 + 312);
LABEL_297:
                            while (*(void *)v198 != v187)
                            {
                              v198 += 8;
                              if (v198 == v196)
                              {
                                v198 = *(char **)(*(void *)a3 + 312);
                                break;
                              }
                            }
                          }
                        }
                        while (v199 - v197 < v198 - v197);
                        *(_OWORD *)unint64_t v169 = v238;
                        *(void *)(v169 + 16) = v242;
                        *(void *)(v169 + 24) = v187;
                        *(void *)(v169 + 32) = v233;
                        *(_DWORD *)(v169 + 39) = *(_DWORD *)((char *)&v233 + 7);
                      }
                    }
                  }
                }
              }
              while (v165-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          double v17 = (long long *)(v13 + 48 * (v15 >> 1));
          if ((unint64_t)v14 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v15 >> 1)), a2 - 3, a3);
            uint64_t v18 = 3 * v16;
            char v19 = (long long *)(a1 + 48 * v16 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>((long long *)(a1 + 48), v19, a2 - 6, a3);
            uint64_t v20 = (long long *)(a1 + 48 + 16 * v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>((long long *)(a1 + 96), v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>(v19, v17, v20, a3);
            *(_OWORD *)v223 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v223[16] = *(_OWORD *)(a1 + 32);
            long long v216 = *(_OWORD *)a1;
            long long v21 = *(long long *)((char *)v17 + 27);
            long long v22 = v17[1];
            *(_OWORD *)a1 = *v17;
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(a1 + 27) = v21;
            *(long long *)((char *)v17 + 27) = *(_OWORD *)&v223[11];
            *double v17 = v216;
            v17[1] = *(_OWORD *)v223;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>((long long *)(a1 + 48 * (v15 >> 1)), (long long *)a1, a2 - 3, a3);
          }
          --a4;
          if (a5)
          {
            uint64_t v23 = *(void *)(a1 + 24);
            uint64_t v24 = *(void *)a3;
            break;
          }
          uint64_t v25 = *(void *)(a1 - 24);
          uint64_t v23 = *(void *)(a1 + 24);
          if (v25 != v23)
          {
            uint64_t v24 = *(void *)a3;
            double v26 = *(char **)(*(void *)a3 + 304);
            double v27 = *(char **)(*(void *)a3 + 312);
            int v28 = v26;
            double v29 = v26;
            if (v26 != v27)
            {
              do
              {
                if (*(void *)v29 == v25) {
                  goto LABEL_16;
                }
                v29 += 8;
              }
              while (v29 != v27);
              double v29 = *(char **)(*(void *)a3 + 312);
LABEL_16:
              while (*(void *)v28 != v23)
              {
                v28 += 8;
                if (v28 == v27)
                {
                  int v28 = *(char **)(*(void *)a3 + 312);
                  break;
                }
              }
            }
            if (v29 - v26 < v28 - v26) {
              break;
            }
          }
          uint64_t v241 = *(void *)(a1 + 16);
          long long v232 = *(_OWORD *)(a1 + 32);
          long long v235 = *(_OWORD *)a1;
          uint64_t v67 = *((void *)a2 - 3);
          if (v23 == v67) {
            goto LABEL_107;
          }
          unint64_t v68 = *(char **)(*(void *)a3 + 304);
          uint64_t v69 = *(char **)(*(void *)a3 + 312);
          if (v68 == v69)
          {
            int8x16_t v71 = *(char **)(*(void *)a3 + 304);
            uint64_t v70 = v71;
          }
          else
          {
            uint64_t v70 = *(char **)(*(void *)a3 + 304);
            while (*(void *)v70 != v23)
            {
              v70 += 8;
              if (v70 == v69)
              {
                uint64_t v70 = *(char **)(*(void *)a3 + 312);
                break;
              }
            }
            int8x16_t v71 = *(char **)(*(void *)a3 + 304);
            while (*(void *)v71 != v67)
            {
              v71 += 8;
              if (v71 == v69)
              {
                int8x16_t v71 = *(char **)(*(void *)a3 + 312);
                break;
              }
            }
          }
          if (v70 - v68 >= v71 - v68)
          {
LABEL_107:
            unint64_t v13 = a1 + 48;
            if (a1 + 48 < (unint64_t)a2)
            {
              uint64_t v75 = *(void *)a3;
              unint64_t v76 = a1;
              do
              {
                uint64_t v77 = *(void *)(v76 + 72);
                unint64_t v76 = v13;
                if (v23 != v77)
                {
                  long long v78 = *(char **)(v75 + 304);
                  long long v79 = *(char **)(v75 + 312);
                  long long v80 = v78;
                  long long v81 = v78;
                  if (v78 != v79)
                  {
                    do
                    {
                      if (*(void *)v81 == v23) {
                        goto LABEL_114;
                      }
                      v81 += 8;
                    }
                    while (v81 != v79);
                    long long v81 = *(char **)(v75 + 312);
LABEL_114:
                    while (*(void *)v80 != v77)
                    {
                      v80 += 8;
                      if (v80 == v79)
                      {
                        long long v80 = *(char **)(v75 + 312);
                        break;
                      }
                    }
                  }
                  if (v81 - v78 < v80 - v78) {
                    break;
                  }
                }
                v13 += 48;
              }
              while (v76 + 48 < (unint64_t)a2);
            }
          }
          else
          {
            unint64_t v13 = a1;
            do
            {
              do
              {
                uint64_t v72 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v72);
              if (v68 == v69)
              {
                long long v74 = *(char **)(*(void *)a3 + 304);
                uint64_t v73 = v74;
              }
              else
              {
                uint64_t v73 = *(char **)(*(void *)a3 + 304);
                while (*(void *)v73 != v23)
                {
                  v73 += 8;
                  if (v73 == v69)
                  {
                    uint64_t v73 = *(char **)(*(void *)a3 + 312);
                    break;
                  }
                }
                long long v74 = *(char **)(*(void *)a3 + 304);
                while (*(void *)v74 != v72)
                {
                  v74 += 8;
                  if (v74 == v69)
                  {
                    long long v74 = *(char **)(*(void *)a3 + 312);
                    break;
                  }
                }
              }
            }
            while (v73 - v68 >= v74 - v68);
          }
          __int16 v82 = a2;
          if (v13 < (unint64_t)a2)
          {
            uint64_t v83 = *(void *)a3;
            __int16 v82 = a2;
            do
            {
              uint64_t v84 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v84) {
                break;
              }
              unint64_t v85 = *(char **)(v83 + 304);
              double v86 = *(char **)(v83 + 312);
              long long v87 = v85;
              uint64_t v88 = v85;
              if (v85 != v86)
              {
                do
                {
                  if (*(void *)v88 == v23) {
                    goto LABEL_126;
                  }
                  v88 += 8;
                }
                while (v88 != v86);
                uint64_t v88 = *(char **)(v83 + 312);
LABEL_126:
                while (*(void *)v87 != v84)
                {
                  v87 += 8;
                  if (v87 == v86)
                  {
                    long long v87 = *(char **)(v83 + 312);
                    break;
                  }
                }
              }
            }
            while (v88 - v85 < v87 - v85);
          }
          while (v13 < (unint64_t)v82)
          {
            *(_OWORD *)v225 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v225[16] = *(_OWORD *)(v13 + 32);
            long long v217 = *(_OWORD *)v13;
            long long v89 = *v82;
            long long v90 = v82[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v82 + 27);
            *(_OWORD *)unint64_t v13 = v89;
            *(_OWORD *)(v13 + 16) = v90;
            *(long long *)((char *)v82 + 27) = *(_OWORD *)&v225[11];
            *__int16 v82 = v217;
            v82[1] = *(_OWORD *)v225;
            uint64_t v91 = *(void *)a3;
            do
            {
              do
              {
                uint64_t v92 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v92);
              double v93 = *(char **)(v91 + 304);
              int v94 = *(char **)(v91 + 312);
              if (v93 == v94)
              {
                int v96 = *(char **)(v91 + 304);
                uint64_t v95 = v96;
              }
              else
              {
                uint64_t v95 = *(char **)(v91 + 304);
                while (*(void *)v95 != v23)
                {
                  v95 += 8;
                  if (v95 == v94)
                  {
                    uint64_t v95 = *(char **)(v91 + 312);
                    break;
                  }
                }
                int v96 = *(char **)(v91 + 304);
                while (*(void *)v96 != v92)
                {
                  v96 += 8;
                  if (v96 == v94)
                  {
                    int v96 = *(char **)(v91 + 312);
                    break;
                  }
                }
              }
            }
            while (v95 - v93 >= v96 - v93);
            do
            {
              uint64_t v97 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v97) {
                break;
              }
              if (v93 == v94)
              {
                int64_t v99 = v93;
                long long v98 = v93;
              }
              else
              {
                long long v98 = v93;
                while (*(void *)v98 != v23)
                {
                  v98 += 8;
                  if (v98 == v94)
                  {
                    long long v98 = v94;
                    break;
                  }
                }
                int64_t v99 = v93;
                while (*(void *)v99 != v97)
                {
                  v99 += 8;
                  if (v99 == v94)
                  {
                    int64_t v99 = v94;
                    break;
                  }
                }
              }
            }
            while (v98 - v93 < v99 - v93);
          }
          id v100 = (long long *)(v13 - 48);
          BOOL v5 = v13 - 48 >= a1;
          BOOL v6 = v13 - 48 == a1;
          if (v13 - 48 != a1)
          {
            long long v101 = *v100;
            long long v102 = *(_OWORD *)(v13 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
            *(_OWORD *)a1 = v101;
            *(_OWORD *)(a1 + 16) = v102;
          }
          a5 = 0;
          *id v100 = v235;
          *(void *)(v13 - 32) = v241;
          *(void *)(v13 - 24) = v23;
          *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v232 + 7);
          *(void *)(v13 - 16) = v232;
        }
        uint64_t v240 = *(void *)(a1 + 16);
        long long v231 = *(_OWORD *)(a1 + 32);
        long long v234 = *(_OWORD *)a1;
        unint64_t v30 = a1;
        do
        {
          unint64_t v31 = v30;
          v30 += 48;
          uint64_t v32 = *(void *)(v31 + 72);
          if (v32 == v23) {
            break;
          }
          uint64_t v33 = *(char **)(v24 + 304);
          double v34 = *(char **)(v24 + 312);
          double v35 = v33;
          long long v36 = v33;
          if (v33 != v34)
          {
            do
            {
              if (*(void *)v36 == v32) {
                goto LABEL_26;
              }
              v36 += 8;
            }
            while (v36 != v34);
            long long v36 = *(char **)(v24 + 312);
LABEL_26:
            while (*(void *)v35 != v23)
            {
              v35 += 8;
              if (v35 == v34)
              {
                double v35 = *(char **)(v24 + 312);
                break;
              }
            }
          }
        }
        while (v36 - v33 < v35 - v33);
        double v37 = a2;
        if (v31 == a1)
        {
          double v37 = a2;
          if (v30 < (unint64_t)a2)
          {
            double v37 = a2;
            do
            {
              uint64_t v43 = *((void *)v37 - 3);
              v37 -= 3;
              if (v43 != v23)
              {
                id v44 = *(char **)(v24 + 304);
                id v45 = *(char **)(v24 + 312);
                uint64_t v46 = v44;
                long long v47 = v44;
                if (v44 != v45)
                {
                  do
                  {
                    if (*(void *)v47 == v43) {
                      goto LABEL_48;
                    }
                    v47 += 8;
                  }
                  while (v47 != v45);
                  long long v47 = *(char **)(v24 + 312);
LABEL_48:
                  while (*(void *)v46 != v23)
                  {
                    v46 += 8;
                    if (v46 == v45)
                    {
                      uint64_t v46 = *(char **)(v24 + 312);
                      break;
                    }
                  }
                }
                if (v47 - v44 < v46 - v44) {
                  break;
                }
              }
            }
            while (v30 < (unint64_t)v37);
          }
        }
        else
        {
          do
          {
            do
            {
              uint64_t v38 = *((void *)v37 - 3);
              v37 -= 3;
            }
            while (v38 == v23);
            double v39 = *(char **)(v24 + 304);
            double v40 = *(char **)(v24 + 312);
            double v41 = v39;
            double v42 = v39;
            if (v39 != v40)
            {
              do
              {
                if (*(void *)v42 == v38) {
                  goto LABEL_36;
                }
                v42 += 8;
              }
              while (v42 != v40);
              double v42 = *(char **)(v24 + 312);
LABEL_36:
              while (*(void *)v41 != v23)
              {
                v41 += 8;
                if (v41 == v40)
                {
                  double v41 = *(char **)(v24 + 312);
                  break;
                }
              }
            }
          }
          while (v42 - v39 >= v41 - v39);
        }
        unint64_t v13 = v30;
        if (v30 < (unint64_t)v37)
        {
          long long v48 = v37;
          do
          {
            *(_OWORD *)v224 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v224[16] = *(_OWORD *)(v13 + 32);
            long long v49 = *(_OWORD *)v13;
            long long v51 = *v48;
            long long v50 = v48[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v48 + 27);
            *(_OWORD *)unint64_t v13 = v51;
            *(_OWORD *)(v13 + 16) = v50;
            *(long long *)((char *)v48 + 27) = *(_OWORD *)&v224[11];
            *long long v48 = v49;
            v48[1] = *(_OWORD *)v224;
            uint64_t v52 = *(void *)a3;
            do
            {
              uint64_t v53 = *(void *)(v13 + 72);
              v13 += 48;
              if (v53 == v23) {
                break;
              }
              BOOL v54 = *(char **)(v52 + 304);
              unint64_t v55 = *(char **)(v52 + 312);
              unint64_t v56 = v54;
              char v57 = v54;
              if (v54 != v55)
              {
                do
                {
                  if (*(void *)v57 == v53) {
                    goto LABEL_61;
                  }
                  v57 += 8;
                }
                while (v57 != v55);
                char v57 = *(char **)(v52 + 312);
LABEL_61:
                while (*(void *)v56 != v23)
                {
                  v56 += 8;
                  if (v56 == v55)
                  {
                    unint64_t v56 = *(char **)(v52 + 312);
                    break;
                  }
                }
              }
            }
            while (v57 - v54 < v56 - v54);
            do
            {
              do
              {
                uint64_t v58 = *((void *)v48 - 3);
                v48 -= 3;
              }
              while (v58 == v23);
              long long v59 = *(char **)(v52 + 304);
              uint8x8_t v60 = *(char **)(v52 + 312);
              unint64_t v61 = v59;
              long long v62 = v59;
              if (v59 != v60)
              {
                do
                {
                  if (*(void *)v62 == v58) {
                    goto LABEL_70;
                  }
                  v62 += 8;
                }
                while (v62 != v60);
                long long v62 = *(char **)(v52 + 312);
LABEL_70:
                while (*(void *)v61 != v23)
                {
                  v61 += 8;
                  if (v61 == v60)
                  {
                    unint64_t v61 = *(char **)(v52 + 312);
                    break;
                  }
                }
              }
            }
            while (v62 - v59 >= v61 - v59);
          }
          while (v13 < (unint64_t)v48);
        }
        long long v63 = (long long *)(v13 - 48);
        if (v13 - 48 != a1)
        {
          long long v64 = *v63;
          long long v65 = *(_OWORD *)(v13 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
          *(_OWORD *)a1 = v64;
          *(_OWORD *)(a1 + 16) = v65;
        }
        *long long v63 = v234;
        *(void *)(v13 - 32) = v240;
        *(void *)(v13 - 24) = v23;
        *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v231 + 7);
        *(void *)(v13 - 16) = v231;
        if (v30 >= (unint64_t)v37) {
          break;
        }
LABEL_80:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_SampleRemainder*,false>(a1, v13 - 48, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_SampleRemainder*>(a1, v13 - 48, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_SampleRemainder*>(v13, (uint64_t)a2, a3))
      {
        break;
      }
      if (!v66) {
        goto LABEL_80;
      }
    }
    a2 = (long long *)(v13 - 48);
    if (!v66) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 - 24);
      uint64_t v9 = *(void *)(a1 + 24);
      if (v8 == v9) {
        return result;
      }
      id v10 = *(char **)(*(void *)a3 + 304);
      int v11 = *(char **)(*(void *)a3 + 312);
      unint64_t v12 = v10;
      unint64_t v13 = v10;
      if (v10 == v11) {
        goto LABEL_10;
      }
      do
      {
        if (*(void *)v13 == v8) {
          goto LABEL_7;
        }
        v13 += 8;
      }
      while (v13 != v11);
      unint64_t v13 = *(char **)(*(void *)a3 + 312);
      do
      {
LABEL_7:
        if (*(void *)v12 == v9) {
          goto LABEL_10;
        }
        v12 += 8;
      }
      while (v12 != v11);
      unint64_t v12 = *(char **)(*(void *)a3 + 312);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        uint64_t v14 = (long long *)(a2 - 48);
        long long v15 = *(_OWORD *)a1;
        *(_OWORD *)double v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        long long v16 = *(_OWORD *)(a2 - 21);
        long long v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *uint64_t v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(long long *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), a3);
      uint64_t v19 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      int v20 = 0;
      break;
  }
  while (1)
  {
    uint64_t v21 = *(void *)(v19 + 24);
    uint64_t v22 = *(void *)(v18 + 24);
    if (v21 != v22)
    {
      uint64_t v23 = *(char **)(*(void *)a3 + 304);
      uint64_t v24 = *(char **)(*(void *)a3 + 312);
      uint64_t v25 = v23;
      double v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(void *)v26 == v21) {
            goto LABEL_19;
          }
          v26 += 8;
        }
        while (v26 != v24);
        double v26 = *(char **)(*(void *)a3 + 312);
LABEL_19:
        while (*(void *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            uint64_t v25 = *(char **)(*(void *)a3 + 312);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        long long v34 = *(_OWORD *)v19;
        uint64_t v36 = *(void *)(v19 + 16);
        long long v37 = *(_OWORD *)(v19 + 32);
        uint64_t v27 = v19;
        while (1)
        {
          long long v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1) {
            break;
          }
          uint64_t v27 = v18;
          uint64_t v29 = *(void *)(v18 - 24);
          if (v21 != v29)
          {
            unint64_t v30 = *(char **)(*(void *)a3 + 304);
            unint64_t v31 = *(char **)(*(void *)a3 + 312);
            uint64_t v32 = v30;
            uint64_t v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(void *)v33 == v21) {
                  goto LABEL_30;
                }
                v33 += 8;
              }
              while (v33 != v31);
              uint64_t v33 = *(char **)(*(void *)a3 + 312);
LABEL_30:
              while (*(void *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  uint64_t v32 = *(char **)(*(void *)a3 + 312);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30) {
              continue;
            }
          }
          goto LABEL_36;
        }
        uint64_t v27 = a1;
LABEL_36:
        *(_OWORD *)uint64_t v27 = v34;
        *(void *)(v27 + 16) = v36;
        *(void *)(v27 + 24) = v21;
        *(void *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8) {
          return v19 + 48 == a2;
        }
      }
    }
    uint64_t v18 = v19;
    v19 += 48;
    if (v19 == a2) {
      return 1;
    }
  }
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPercentiles> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPercentiles> const&)#1}>,HDStatisticsPercentiles const& ()(HDStatisticsRelative<HDStatisticsPercentiles> const&)>::~__func()
{
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPercentiles> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPercentiles> const&)#1}>,HDStatisticsPercentiles const& ()(HDStatisticsRelative<HDStatisticsPercentiles> const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F1725CD0;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPercentiles> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPercentiles> const&)#1}>,HDStatisticsPercentiles const& ()(HDStatisticsRelative<HDStatisticsPercentiles> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1725CD0;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPercentiles> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPercentiles> const&)#1}>,HDStatisticsPercentiles const& ()(HDStatisticsRelative<HDStatisticsPercentiles> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPercentiles> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPercentiles> const&)#1}>,HDStatisticsPercentiles const& ()(HDStatisticsRelative<HDStatisticsPercentiles> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPercentiles> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPercentiles> const&)#1}>,HDStatisticsPercentiles const& ()(HDStatisticsRelative<HDStatisticsPercentiles> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsPercentiles const& ()(HDStatisticsRelative<HDStatisticsPercentiles> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 600))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a4, 3, @"Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date");
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_configureForStartTime(a1);
  }
  double v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(void *)(a1 + 40) && a3) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_advanceToTime(a1, v8);
    }
    HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPercentiles>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    uint64_t v9 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    uint64_t v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v9, a4);
  }
  return v10;
}

void sub_1BD1458E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_advanceToTime(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 128) <= a2)
  {
    uint64_t v4 = a1 + 112;
    uint64_t v5 = a1 + 120;
    do
    {
      uint64_t v6 = *(void *)(a1 + 576);
      uint64_t v7 = *(void *)(a1 + 568);
      if (v6 == v7)
      {
        uint64_t v22 = 0;
        long long v15 = *(void **)(a1 + 40);
        long long v16 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a2];
        double v8 = [v15 dateIntervalContainingDate:v16 index:&v22];

        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v17 = v22;
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v19 = v18;
        int v20 = [v8 endDate];
        [v20 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPercentiles>>::resetToBucket(v4, v17, v19, v21);
      }
      else
      {
        double v8 = [*(id *)(a1 + 40) dateIntervalAtIndex:*(void *)(a1 + 112) + 1];
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v12 = v11;
        unint64_t v13 = [v8 endDate];
        [v13 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPercentiles>>::advanceBucket(v4, v12, v14);
      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_didChangeBucket(a1, v9);
      if (v6 != v7) {
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_notifyForCurrentBucket(a1);
      }
    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1BD145AF0(_Unwind_Exception *exception_object)
{
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPercentiles>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  char v3 = *(unsigned char *)(a2 + 32);
  if (v3)
  {
    uint64_t v5 = a1 + 8;
    double v6 = *(double *)(a2 + 8);
    if (v6 >= *(double *)(a1 + 8))
    {
      uint64_t v7 = *(uint64_t **)a2;
      double v8 = *(double *)(a2 + 16);
      unint64_t v9 = *(void *)(a2 + 24);
      char v10 = *(unsigned char *)(a2 + 33);
      double v11 = *(double *)(a1 + 16);
      if (*(_DWORD *)(a1 + 36)) {
        BOOL v12 = v6 < v11;
      }
      else {
        BOOL v12 = v6 <= v11;
      }
      if (v12)
      {
        if (v8 <= v11) {
          double v14 = *(double *)(a2 + 16);
        }
        else {
          double v14 = *(double *)(a1 + 16);
        }
        std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 272, *(void *)(a2 + 24), v9);
        long long v15 = *(char **)(a1 + 112);
        if (v15 == *(char **)(a1 + 104) && (uint64_t)(*(void *)(a1 + 144) - *(void *)(a1 + 136)) <= 0)
        {
          double v33 = *(double *)(a1 + 8);
          double v34 = *(double *)(a1 + 16);
          if (v6 >= v33) {
            double v33 = v6;
          }
          if (v34 >= v14) {
            double v34 = v14;
          }
          *(double *)(a1 + 48) = v33;
          *(double *)(a1 + 56) = v34;
        }
        else
        {
          if (v6 < *(double *)(a1 + 48))
          {
            double v16 = *(double *)(a1 + 8);
            if (v6 >= v16) {
              double v16 = v6;
            }
            *(double *)(a1 + 48) = v16;
          }
          if (v14 > *(double *)(a1 + 56))
          {
            double v17 = *(double *)(a1 + 16);
            if (v17 >= v14) {
              double v17 = v14;
            }
            *(double *)(a1 + 56) = v17;
          }
        }
        if (*(unsigned char *)(a1 + 32))
        {
          double v35 = *(double *)(a1 + 64);
          if (v6 < v35) {
            double v35 = v6;
          }
          *(double *)(a1 + 64) = v35;
        }
        if (a3 && v6 < *(double *)(a1 + 16))
        {
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_mergeThroughTime(v5, v6);
          long long v15 = *(char **)(a1 + 112);
        }
        unint64_t v36 = *(void *)(a1 + 120);
        if ((unint64_t)v15 >= v36)
        {
          unint64_t v38 = 0x555555555555555;
          double v39 = *(char **)(a1 + 104);
          unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v39) >> 4);
          unint64_t v41 = v40 + 1;
          if (v40 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - (void)v39) >> 4);
          if (2 * v42 > v41) {
            unint64_t v41 = 2 * v42;
          }
          if (v42 < 0x2AAAAAAAAAAAAAALL) {
            unint64_t v38 = v41;
          }
          if (v38)
          {
            unint64_t v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v38);
            double v39 = *(char **)(a1 + 104);
            long long v15 = *(char **)(a1 + 112);
          }
          else
          {
            uint64_t v43 = 0;
          }
          unint64_t v44 = v38 + 48 * v40;
          *(void *)unint64_t v44 = v7;
          *(double *)(v44 + 8) = v6;
          *(double *)(v44 + 16) = v14;
          *(void *)(v44 + 24) = v9;
          unint64_t v45 = v38 + 48 * v43;
          *(unsigned char *)(v44 + 32) = v3;
          *(unsigned char *)(v44 + 33) = v10;
          *(_WORD *)(v44 + 40) = 0;
          *(unsigned char *)(v44 + 42) = 0;
          long long v37 = (void *)(v44 + 48);
          if (v15 != v39)
          {
            do
            {
              long long v46 = *((_OWORD *)v15 - 3);
              long long v47 = *((_OWORD *)v15 - 2);
              *(_OWORD *)(v44 - 21) = *(_OWORD *)(v15 - 21);
              *(_OWORD *)(v44 - 48) = v46;
              *(_OWORD *)(v44 - 32) = v47;
              v44 -= 48;
              v15 -= 48;
            }
            while (v15 != v39);
            double v39 = *(char **)(a1 + 104);
          }
          *(void *)(a1 + 104) = v44;
          *(void *)(a1 + 112) = v37;
          *(void *)(a1 + 120) = v45;
          if (v39) {
            operator delete(v39);
          }
        }
        else
        {
          *(void *)long long v15 = v7;
          *((double *)v15 + 1) = v6;
          *((double *)v15 + 2) = v14;
          *((void *)v15 + 3) = v9;
          v15[32] = v3;
          v15[33] = v10;
          *((_WORD *)v15 + 20) = 0;
          long long v37 = v15 + 48;
          v15[42] = 0;
        }
        *(void *)(a1 + 112) = v37;
        if (!*(unsigned char *)(a1 + 240) || *(double *)(a1 + 216) <= v6)
        {
          *(void *)(a1 + 208) = v7;
          *(double *)(a1 + 216) = v6;
          *(double *)(a1 + 224) = v8;
          *(void *)(a1 + 232) = v9;
          *(unsigned char *)(a1 + 240) = v3;
          *(unsigned char *)(a1 + 241) = v10;
          if (!*(unsigned char *)(a1 + 200) || *(double *)(a1 + 176) <= v6)
          {
            *(void *)(a1 + 168) = v7;
            *(double *)(a1 + 176) = v6;
            *(double *)(a1 + 184) = v8;
            *(void *)(a1 + 192) = v9;
            *(unsigned char *)(a1 + 200) = v3;
            *(unsigned char *)(a1 + 201) = v10;
          }
        }
        if (*(unsigned char *)(a1 + 33))
        {
          unint64_t v48 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_canonicalSourceIDForSourceID(v5, v9);
          long long v49 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_statisticsForSource(v5, v48);
          if (!*((unsigned char *)v49 + 112) || *((double *)v49 + 11) <= v6)
          {
            v49[10] = v7;
            *((double *)v49 + 11) = v6;
            *((double *)v49 + 12) = v8;
            v49[13] = (uint64_t *)v9;
            *((unsigned char *)v49 + 112) = v3;
            *((unsigned char *)v49 + 113) = v10;
            if (!*((unsigned char *)v49 + 72) || *((double *)v49 + 6) <= v6)
            {
              v49[5] = v7;
              *((double *)v49 + 6) = v6;
              *((double *)v49 + 7) = v8;
              v49[8] = (uint64_t *)v9;
              *((unsigned char *)v49 + 72) = v3;
              *((unsigned char *)v49 + 73) = v10;
            }
          }
        }
      }
      else
      {
        if (v6 < v11) {
          double v6 = *(double *)(a1 + 16);
        }
        unint64_t v18 = *(void *)(a1 + 464);
        unint64_t v19 = *(void *)(a1 + 472);
        if (v18 >= v19)
        {
          uint64_t v21 = *(void *)(a1 + 456);
          unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v21) >> 3);
          unint64_t v23 = v22 + 1;
          if (v22 + 1 > 0x666666666666666) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v21) >> 3);
          if (2 * v24 > v23) {
            unint64_t v23 = 2 * v24;
          }
          if (v24 >= 0x333333333333333) {
            unint64_t v25 = 0x666666666666666;
          }
          else {
            unint64_t v25 = v23;
          }
          if (v25) {
            unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v25);
          }
          else {
            uint64_t v26 = 0;
          }
          unint64_t v27 = v25 + 40 * v22;
          unint64_t v28 = v25 + 40 * v26;
          *(void *)unint64_t v27 = v7;
          *(double *)(v27 + 8) = v6;
          *(double *)(v27 + 16) = v8;
          *(void *)(v27 + 24) = v9;
          *(unsigned char *)(v27 + 32) = v3;
          *(unsigned char *)(v27 + 33) = v10;
          unint64_t v20 = v27 + 40;
          unint64_t v30 = *(char **)(a1 + 456);
          uint64_t v29 = *(char **)(a1 + 464);
          if (v29 != v30)
          {
            do
            {
              long long v31 = *(_OWORD *)(v29 - 40);
              long long v32 = *(_OWORD *)(v29 - 24);
              *(_WORD *)(v27 - 8) = *((_WORD *)v29 - 4);
              *(_OWORD *)(v27 - 24) = v32;
              *(_OWORD *)(v27 - 40) = v31;
              v27 -= 40;
              v29 -= 40;
            }
            while (v29 != v30);
            uint64_t v29 = *(char **)(a1 + 456);
          }
          *(void *)(a1 + 456) = v27;
          *(void *)(a1 + 464) = v20;
          *(void *)(a1 + 472) = v28;
          if (v29) {
            operator delete(v29);
          }
        }
        else
        {
          *(void *)unint64_t v18 = v7;
          *(double *)(v18 + 8) = v6;
          *(double *)(v18 + 16) = v8;
          *(void *)(v18 + 24) = v9;
          *(unsigned char *)(v18 + 32) = v3;
          unint64_t v20 = v18 + 40;
          *(unsigned char *)(v18 + 33) = v10;
        }
        *(void *)(a1 + 464) = v20;
      }
    }
  }
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_notifyForCurrentBucket(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 602))
  {
    *(unsigned char *)(a1 + 604) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 604) = 0;
    uint64_t v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      uint64_t v4 = v2;
      char v3 = (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      if (v3) {
        v4[2](v4, v3);
      }

      uint64_t v2 = v4;
    }
  }
}

void sub_1BD146040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPercentiles>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  unint64_t v9 = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 456), *(void *)(a1 + 464), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 464) - *(void *)(a1 + 456)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPercentiles>>::resetToBucket(a1, *(void *)a1 + 1, a2, a3);
  double v6 = v9;
  uint64_t v7 = v10;
  if (v9 != v10)
  {
    uint64_t v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPercentiles>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BD14613C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPercentiles>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8 = (id *)(a1 + 40);
  objc_storeStrong((id *)(a1 + 480), *(id *)(a1 + 40));
  unint64_t v9 = *(void **)(a1 + 136);
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  *(_DWORD *)(a1 + 128) = 0;
  if (v9)
  {
    *(void *)(a1 + 144) = v9;
    operator delete(v9);
  }
  *(_WORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_WORD *)(a1 + 200) = 0;
  if (*(void *)(a1 + 264))
  {
    char v10 = *(void **)(a1 + 248);
    uint64_t v11 = *(void *)(a1 + 256);
    *(void *)(a1 + 248) = a1 + 256;
    *(void *)(v11 + 16) = 0;
    *(void *)(a1 + 256) = 0;
    *(void *)(a1 + 264) = 0;
    if (v10[1]) {
      BOOL v12 = (void *)v10[1];
    }
    else {
      BOOL v12 = v10;
    }
    if (v12)
    {
      unint64_t v13 = (void *)v12[2];
      if (v13)
      {
        double v14 = (void *)*v13;
        if ((void *)*v13 == v12)
        {
          void *v13 = 0;
          while (1)
          {
            double v16 = (void *)v13[1];
            if (!v16) {
              break;
            }
            do
            {
              unint64_t v13 = v16;
              double v16 = (void *)*v16;
            }
            while (v16);
          }
        }
        else
        {
          for (v13[1] = 0; v14; double v14 = (void *)v13[1])
          {
            do
            {
              unint64_t v13 = v14;
              double v14 = (void *)*v14;
            }
            while (v14);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsTimeInterval>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTimeInterval>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTimeInterval>>>::destroy(v12);
        for (uint64_t i = (void *)v13[2]; i; uint64_t i = (void *)i[2])
          unint64_t v13 = i;
        BOOL v12 = v13;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsTimeInterval>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTimeInterval>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTimeInterval>>>::destroy(v12);
  }
  objc_storeStrong(v8, *(id *)(a1 + 480));
  *(void *)(a1 + 464) = *(void *)(a1 + 456);
  *(void *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 604))
  {
    if (v3)
    {
      id v6 = v3;
      uint64_t v4 = _Block_copy(*(const void **)(a1 + 96));
      uint64_t v5 = v4;
      if (v4) {
        (*((void (**)(void *, id))v4 + 2))(v4, v6);
      }

      id v3 = v6;
    }
    *(unsigned char *)(a1 + 604) = 0;
  }
}

void sub_1BD14630C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI23HDStatisticsPercentilesEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 startDate];
  id v6 = [v4 startDate];
  uint64_t v7 = [v5 compare:v6];

  return v7;
}

void sub_1BD146394(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_primitiveInvalidateInterval(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 13);
  if (WeakRetained)
  {
    if (v5
      && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_currentBucketInterval((uint64_t)a1),
          (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v8 = [v5 endDate];
      unint64_t v9 = [v7 startDate];
      if (objc_msgSend(v8, "hk_isAfterDate:", v9))
      {
        char v10 = [v5 startDate];
        uint64_t v11 = [v7 endDate];
        char v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);
      }
      else
      {
        char v12 = 0;
      }

      unint64_t v13 = _Block_copy(a1[12]);
      if ((v12 & 1) == 0) {
        operator new();
      }
    }
    else
    {
      unint64_t v13 = _Block_copy(a1[12]);
    }
    *((unsigned char *)a1 + 600) = 1;
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI23HDStatisticsPercentilesEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
    v27[3] = &unk_1E6308FF8;
    id v15 = v5;
    id v28 = v15;
    id v16 = v13;
    id v29 = v16;
    (*((void (**)(id *, void *))*a1 + 9))(a1, v27);
    if (v5)
    {
      double v17 = [v15 startDate];
      [v17 timeIntervalSinceReferenceDate];
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_configureForStartTime((uint64_t)a1);
    }
    else
    {
      (*((void (**)(id *))*a1 + 4))(a1);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI23HDStatisticsPercentilesEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
    v21[3] = &unk_1E6309060;
    unint64_t v24 = a1;
    id v5 = v15;
    char v26 = 1;
    id v22 = v5;
    unint64_t v25 = a1;
    id v23 = WeakRetained;
    uint64_t v14 = (*((uint64_t (**)(id *, void *, uint64_t))*a1 + 14))(a1, v21, a3);
    unint64_t v18 = _Block_copy(v16);
    id v19 = a1[12];
    a1[12] = v18;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to invalidate interval: no data source available.");
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1BD1467E4(_Unwind_Exception *a1)
{
  MEMORY[0x1C187B8A0](v4, 0x10F1C4041CDDEDFLL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI23HDStatisticsPercentilesEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_11;
  }
  id v3 = [v10 endDate];
  uint64_t v4 = [*(id *)(a1 + 32) startDate];
  char v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    id v6 = [v10 startDate];
    uint64_t v7 = [*(id *)(a1 + 32) endDate];
    char v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_11:
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9) {
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
      }
    }
  }
}

void sub_1BD1469C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI23HDStatisticsPercentilesEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = [*(id *)(a1 + 32) startDate];
  [v5 timeIntervalSinceReferenceDate];
  uint64_t v7 = v6;

  char v8 = [*(id *)(a1 + 32) endDate];
  [v8 timeIntervalSinceReferenceDate];
  uint64_t v10 = v9;

  uint64_t v11 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  uint64_t v13 = *(void *)(a1 + 32);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI23HDStatisticsPercentilesEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  char v32 = *(unsigned char *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  uint64_t v31 = *(void *)(a1 + 56);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI23HDStatisticsPercentilesEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  void v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  uint64_t v14 = [v11 collectionCalculator:WeakRetained queryForInterval:v13 error:a2 sampleHandler:v30 mergeHandler:v29];

  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15 != v4)
    {
      id v16 = [*(id *)(a1 + 32) endDate];
      [v16 timeIntervalSinceReferenceDate];
      if (*(void *)(v15 + 40))
      {
        double v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          id v19 = [*(id *)(v15 + 40) dateIntervalAtIndex:*(void *)(v15 + 112) + 1];
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          unint64_t v20 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_statisticsFromFinishedBucket(v15, v15 + 120);
          uint64_t v21 = [v19 startDate];
          [v21 timeIntervalSinceReferenceDate];
          double v23 = v22;
          unint64_t v24 = [v19 endDate];
          [v24 timeIntervalSinceReferenceDate];
          HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPercentiles>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            char v26 = _Block_copy(*(const void **)(v15 + 96));
            unint64_t v27 = v26;
            if (v26) {
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);
            }
          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_didChangeBucket(v15, 0);
        }
      }
    }
  }
  return v14;
}

void sub_1BD146C74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI23HDStatisticsPercentilesEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7 = *(double *)(a1 + 32);
  if (v7 > a6)
  {
    a2 = 0;
    int v8 = 0;
    a7 = 0.0;
    a5 = 0.0;
    double v9 = 0.0;
  }
  else
  {
    int v8 = 1;
    double v9 = a6;
  }
  double v13 = a5;
  double v14 = v9;
  double v15 = a7;
  uint64_t v16 = a2;
  char v17 = v8;
  char v18 = 0;
  if (*(unsigned char *)(a1 + 56))
  {
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v13, a3, a4);
    }
  }
  else
  {
    BOOL v11 = v7 <= a6;
    double v12 = *(double *)(a1 + 40);
    if (v9 >= v12) {
      BOOL v11 = 0;
    }
    if (!v11 || a7 <= v12) {
      double v12 = a7;
    }
    double v14 = v9;
    double v15 = v12;
    char v17 = v11;
    if (v11) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v13, a3, a4);
    }
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI23HDStatisticsPercentilesEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 600)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_configureForStartTime(a1);
  }
  if (*(void *)(a1 + 40)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_advanceToTime(a1, a2);
  }
  if (*(double *)(a1 + 128) > a2)
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_mergeThroughTime(a1 + 120, a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 32) < *(double *)(v10 + 8))
                {
                  uint64_t v129 = *(void *)(v10 + 32);
                  long long v113 = *(_OWORD *)v10;
                  long long v121 = *(_OWORD *)(v10 + 16);
                  long long v52 = *(_OWORD *)(a2 - 40);
                  long long v53 = *(_OWORD *)(a2 - 24);
                  *(_WORD *)(v10 + 32) = *(_WORD *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(_WORD *)(a2 - 8) = v129;
                  *(_OWORD *)(a2 - 24) = v121;
                  *(_OWORD *)(a2 - 40) = v113;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v10, (double *)(v10 + 40), (double *)(a2 - 40));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, v10 + 120, a2 - 40);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            BOOL v54 = (void *)(v10 + 40);
            BOOL v56 = v10 == a2 || v54 == (void *)a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  long long v59 = v54;
                  double v60 = *(double *)(v58 + 48);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *v54;
                    long long v114 = *(_OWORD *)(v58 + 56);
                    uint64_t v122 = *(void *)(v58 + 72);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      uint64_t v63 = v10 + v62;
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      *(_OWORD *)(v63 + 40) = *(_OWORD *)(v10 + v62);
                      *(_OWORD *)(v63 + 56) = v64;
                      *(_WORD *)(v63 + 72) = *(_WORD *)(v10 + v62 + 32);
                      if (!v62) {
                        break;
                      }
                      v62 -= 40;
                      if (v60 >= *(double *)(v63 - 32))
                      {
                        uint64_t v65 = v10 + v62 + 40;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = v114;
                    *(_WORD *)(v65 + 32) = v122;
                  }
                  BOOL v54 = v59 + 5;
                  v57 += 40;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 5 != (void *)a2);
              }
            }
            else if (!v56)
            {
              do
              {
                long long v98 = v54;
                double v99 = *(double *)(a1 + 48);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *v54;
                  long long v117 = *(_OWORD *)(a1 + 56);
                  uint64_t v125 = *(void *)(a1 + 72);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(_OWORD *)(v101 - 3);
                    *(_OWORD *)long long v101 = *(_OWORD *)(v101 - 5);
                    *((_OWORD *)v101 + 1) = v102;
                    *((_WORD *)v101 + 16) = *((_WORD *)v101 - 4);
                    double v103 = *((double *)v101 - 9);
                    v101 -= 5;
                  }
                  while (v99 < v103);
                  void *v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *((_WORD *)v101 + 16) = v125;
                  *((_OWORD *)v101 + 1) = v117;
                }
                v54 += 5;
                a1 = (unint64_t)v98;
              }
              while (v98 + 5 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 40 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v10 + 40 * v69 + 8) < *(double *)(v70 + 48))
                  {
                    v70 += 40;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  double v71 = *(double *)(v10 + 40 * v68 + 8);
                  if (*(double *)(v70 + 8) >= v71)
                  {
                    unint64_t v72 = v10 + 40 * v68;
                    uint64_t v73 = *(void *)v72;
                    uint64_t v123 = *(void *)(v72 + 32);
                    long long v115 = *(_OWORD *)(v72 + 16);
                    do
                    {
                      unint64_t v74 = v72;
                      unint64_t v72 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_WORD *)(v74 + 32) = *(_WORD *)(v70 + 32);
                      *(_OWORD *)unint64_t v74 = v75;
                      *(_OWORD *)(v74 + 16) = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 40 * v77;
                      uint64_t v78 = 2 * v69 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v10 + 40 * v77 + 8) < *(double *)(v70 + 48))
                      {
                        v70 += 40;
                        uint64_t v77 = v78;
                      }
                      uint64_t v69 = v77;
                    }
                    while (*(double *)(v70 + 8) >= v71);
                    *(void *)unint64_t v72 = v73;
                    *(double *)(v72 + 8) = v71;
                    *(_OWORD *)(v72 + 16) = v115;
                    *(_WORD *)(v72 + 32) = v123;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x28uLL;
              do
              {
                uint64_t v80 = 0;
                uint64_t v130 = *(void *)(v10 + 32);
                long long v116 = *(_OWORD *)v10;
                long long v124 = *(_OWORD *)(v10 + 16);
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = v81;
                  uint64_t v83 = v80 + 1;
                  v81 += 40 * (v80 + 1);
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v85 = v84 + 2;
                  if (v85 < v79 && *(double *)(v82 + 40 * v83 + 8) < *(double *)(v81 + 48))
                  {
                    v81 += 40;
                    uint64_t v80 = v85;
                  }
                  long long v86 = *(_OWORD *)v81;
                  long long v87 = *(_OWORD *)(v81 + 16);
                  *(_WORD *)(v82 + 32) = *(_WORD *)(v81 + 32);
                  *(_OWORD *)unint64_t v82 = v86;
                  *(_OWORD *)(v82 + 16) = v87;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 40;
                if (v81 == a2)
                {
                  *(_WORD *)(v81 + 32) = v130;
                  *(_OWORD *)unint64_t v81 = v116;
                  *(_OWORD *)(v81 + 16) = v124;
                }
                else
                {
                  long long v88 = *(_OWORD *)a2;
                  long long v89 = *(_OWORD *)(a2 + 16);
                  *(_WORD *)(v81 + 32) = *(_WORD *)(a2 + 32);
                  *(_OWORD *)unint64_t v81 = v88;
                  *(_OWORD *)(v81 + 16) = v89;
                  *(_WORD *)(a2 + 32) = v130;
                  *(_OWORD *)a2 = v116;
                  *(_OWORD *)(a2 + 16) = v124;
                  uint64_t v90 = v81 - v10 + 40;
                  if (v90 >= 41)
                  {
                    unint64_t v91 = (v90 / 0x28uLL - 2) >> 1;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v10 + 40 * v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      uint64_t v109 = *(void *)(v81 + 32);
                      long long v106 = *(_OWORD *)(v81 + 16);
                      do
                      {
                        unint64_t v94 = v81;
                        unint64_t v81 = v10 + 40 * v91;
                        long long v95 = *(_OWORD *)v81;
                        long long v96 = *(_OWORD *)(v81 + 16);
                        *(_WORD *)(v94 + 32) = *(_WORD *)(v81 + 32);
                        *(_OWORD *)unint64_t v94 = v95;
                        *(_OWORD *)(v94 + 16) = v96;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 40 * v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_WORD *)(v81 + 32) = v109;
                      *(_OWORD *)(v81 + 16) = v106;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40 * (v12 >> 1)), (double *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            uint64_t v16 = (double *)(a1 + 40 * v13 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40), v16, (double *)(a2 - 80));
            char v17 = (double *)(a1 + 40 + 8 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 80), v17, (double *)(a2 - 120));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v16, (double *)v14, v17);
            uint64_t v126 = *(void *)(a1 + 32);
            long long v110 = *(_OWORD *)a1;
            long long v118 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 16) = v19;
            *(_WORD *)(v14 + 32) = v126;
            *(_OWORD *)unint64_t v14 = v110;
            *(_OWORD *)(v14 + 16) = v118;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40 * (v12 >> 1)), (double *)a1, (double *)(a2 - 40));
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 32) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          long long v105 = *(_OWORD *)(a1 + 16);
          uint64_t v108 = *(void *)(a1 + 32);
          if (v20 >= *(double *)(a2 - 32))
          {
            unint64_t v41 = a1 + 40;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 40;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 40;
              double v40 = *(double *)(v39 + 48);
              v39 += 40;
            }
            while (v20 >= v40);
          }
          unint64_t v43 = a2;
          if (v10 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              unint64_t v43 = v44 - 40;
              double v45 = *(double *)(v44 - 32);
              v44 -= 40;
            }
            while (v20 < v45);
          }
          while (v10 < v43)
          {
            uint64_t v128 = *(void *)(v10 + 32);
            long long v112 = *(_OWORD *)v10;
            long long v120 = *(_OWORD *)(v10 + 16);
            long long v46 = *(_OWORD *)v43;
            long long v47 = *(_OWORD *)(v43 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v43 + 32);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(_WORD *)(v43 + 32) = v128;
            *(_OWORD *)unint64_t v43 = v112;
            *(_OWORD *)(v43 + 16) = v120;
            do
            {
              double v48 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *(double *)(v43 - 32);
              v43 -= 40;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 40);
            long long v51 = *(_OWORD *)(v10 - 24);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 40) = v38;
          *(double *)(v10 - 32) = v20;
          *(_WORD *)(v10 - 8) = v108;
          *(_OWORD *)(v10 - 24) = v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        long long v104 = *(_OWORD *)(a1 + 16);
        uint64_t v107 = *(void *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 48);
          v21 += 40;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        unint64_t v25 = a2;
        if (v21 == 40)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 40;
            double v29 = *(double *)(v28 - 32);
            v28 -= 40;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 40;
            double v27 = *(double *)(v25 - 32);
            v25 -= 40;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v127 = *(void *)(v10 + 32);
            long long v111 = *(_OWORD *)v10;
            long long v119 = *(_OWORD *)(v10 + 16);
            long long v31 = *(_OWORD *)v30;
            long long v32 = *(_OWORD *)(v30 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v30 + 32);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(_WORD *)(v30 + 32) = v127;
            *(_OWORD *)unint64_t v30 = v111;
            *(_OWORD *)(v30 + 16) = v119;
            do
            {
              double v33 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v33 < v20);
            do
            {
              double v34 = *(double *)(v30 - 32);
              v30 -= 40;
            }
            while (v34 >= v20);
          }
          while (v10 < v30);
        }
        if (v10 - 40 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 40);
          long long v36 = *(_OWORD *)(v10 - 24);
          *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 40) = v22;
        *(double *)(v10 - 32) = v20;
        *(_WORD *)(v10 - 8) = v107;
        *(_OWORD *)(v10 - 24) = v104;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 40;
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        __int16 v9 = *(_WORD *)(a2 - 8);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      uint64_t v16 = *(void *)v12;
      long long v21 = *(_OWORD *)(v12 + 16);
      uint64_t v22 = *(void *)(v12 + 32);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(void *)uint64_t v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI23HDStatisticsPercentilesEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(void *a1, uint64_t a2)
{
  id v3 = (void *)a1[5];
  uint64_t v4 = a1[6];
  BOOL v5 = (void *)a1[4];
  uint64_t v6 = [v5 dateInterval];
  void v9[4] = v4;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI23HDStatisticsPercentilesEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI23HDStatisticsPercentilesEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  uint64_t v7 = [v3 collectionCalculator:v5 queryForInterval:v6 error:a2 sampleHandler:v10 mergeHandler:v9];

  return v7;
}

void sub_1BD1479D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI23HDStatisticsPercentilesEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10 = *(void *)(a1 + 32);
  *(double *)int v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  char v15 = 1;
  uint64_t v11 = [MEMORY[0x1E4F1C9C8] distantFuture];
  [v11 timeIntervalSinceReferenceDate];
  BOOL v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1BD147A74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI23HDStatisticsPercentilesEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
}

void HDStatisticsRelative<HDStatisticsPercentiles>::archive(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F171B978;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  statistics::Statistics::makePrimaryStatistics(a1);
  HDStatisticsPercentiles::archive((HDStatisticsPercentiles *)(a2 + 8));
}

void sub_1BD147AFC()
{
  statistics::Statistics::operator=(*(statistics **)(v0 + 128), (uint64_t)v4);
  statistics::Statistics::~Statistics((statistics::Statistics *)v4);
  uint64_t v3 = v1->i32[0];
  *(_DWORD *)(v0 + 204) |= 0x100u;
  *(void *)(v0 + 136) = v3;
  statistics::Statistics::makeMostRecentDatum(v0);
  v4[0] = &unk_1F17206F8;
  int v8 = 127;
  int8x16_t v5 = vextq_s8(v1[5], v1[5], 8uLL);
  v4[1] = v1[6].i64[0];
  v4[2] = v1[6].i64[1];
  __int16 v6 = 0;
  char v7 = 0;
  statistics::RawQuantitySample::operator=(*v2, (uint64_t)v4);
  PB::Base::~Base((PB::Base *)v4);
}

void sub_1BD147BA4(_Unwind_Exception *a1)
{
  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsPercentiles>::unarchive(uint64_t a1, const statistics::Statistics *a2)
{
  *(_DWORD *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_WORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_WORD *)(a1 + 112) = 0;
  uint64_t v4 = (HDStatisticsPercentiles *)*((void *)a2 + 16);
  if (v4) {
    HDStatisticsPercentiles::unarchive(v4, a2);
  }
  *(_DWORD *)a1 = *((void *)a2 + 17);
  uint64_t v5 = *((void *)a2 + 14);
  if (v5)
  {
    double result = *(double *)(v5 + 8);
    uint64_t v6 = *(void *)(v5 + 16);
    *(int8x16_t *)(a1 + 80) = vextq_s8(*(int8x16_t *)(v5 + 24), *(int8x16_t *)(v5 + 24), 8uLL);
    *(double *)(a1 + 96) = result;
    *(void *)(a1 + 104) = v6;
    *(_WORD *)(a1 + 112) = 1;
  }
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6 = a3;
  uint64_t v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = &unk_1F1725D80;
  double v9 = 900.0;
  if ((v6 & 0x10) == 0) {
    double v9 = 0.0;
  }
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(void *)(v8 + 104) = 0;
  *(void *)(v8 + 112) = 0;
  *(void *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsPercentiles>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_WORD *)(a1 + 552) = 1;
  *(unsigned char *)(a1 + 554) = 0;
  *(unsigned char *)(a1 + 556) = 0;
  *(void *)(a1 + 560) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(void *)(a1 + 600) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);

  JUMPOUT(0x1C187B8A0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1F1725D80;
  uint64_t v2 = *(void **)(a1 + 584);
  if (v2)
  {
    *(void *)(a1 + 592) = v2;
    operator delete(v2);
  }

  uint64_t v3 = *(void **)(a1 + 520);
  if (v3)
  {
    *(void *)(a1 + 528) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsPercentiles>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(unsigned char *)(result + 552) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::setDateInterval(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 copy];
  uint64_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;

  uint64_t v5 = [v6 startDate];
  [v5 timeIntervalSinceReferenceDate];
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_configureForStartTime(a1);
}

void sub_1BD147E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(void *)(a1 + 40))
  {
    id v5 = v3;
    [v3 timeIntervalSinceReferenceDate];
    *(void *)(a1 + 560) = v4;
    id v3 = v5;
  }
}

void sub_1BD147E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::setStatisticsConfiguration(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(a1 + 568), a2);
  id v7 = a2;
  id v4 = *(id *)(a1 + 568);
  id v5 = *(void **)(a1 + 544);
  *(void *)(a1 + 544) = v4;
  id v6 = v4;

  HDStatisticsBucket<HDStatisticsPercentiles>::setStatisticsConfiguration(a1 + 120, *(void **)(a1 + 544));
}

void sub_1BD147F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (*(void *)(a1 + 40)) {
    return 1;
  }
  id v7 = *(char **)a2;
  uint64_t v8 = *(void *)(a2 + 8);
  BOOL v9 = *(void *)(a1 + 224) == *(void *)(a1 + 216) && (uint64_t)(*(void *)(a1 + 248) - *(void *)(a1 + 240)) < 1
    || HKIntervalMask<double>::firstDifference(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)a2, *(void *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), v7, v8, (v8 - (uint64_t)v7) >> 4);
  }
  if (v9) {
    return 1;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128);

  return v11(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::setStatisticsHandler(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 copy];
  id v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v3;
}

void sub_1BD1480A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::dataSource(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));

  return WeakRetained;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::currentStatistics(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 552))
  {
    unint64_t v1 = 0;
  }
  else
  {
    HDStatisticsBucket<HDStatisticsPercentiles>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
    HDStatisticsBucket<HDStatisticsPercentiles>::_updateSourceOrder((uint64_t)v4);
    HDStatisticsBucket<HDStatisticsPercentiles>::_mergeThroughTime((uint64_t)v4, v4[1]);
    unint64_t v1 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
    HDStatisticsBucket<HDStatisticsPercentiles>::~HDStatisticsBucket((uint64_t)v4);
  }

  return v1;
}

void sub_1BD148174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(a1 + 64);
  id v7 = v6;
  if (v6)
  {
    uint64_t v8 = [v6 startDate];
    [v8 timeIntervalSinceReferenceDate];
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    uint64_t v10 = [v7 endDate];
    [v10 timeIntervalSinceReferenceDate];
    double v12 = v11;
    double v13 = *(double *)(a2 + 8);

    if (v12 < v13) {
      goto LABEL_9;
    }
  }
  if (!*(unsigned char *)(a1 + 554))
  {
LABEL_11:
    uint64_t v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 553))
  {
LABEL_9:
    uint64_t v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(unsigned char *)(a1 + 555)) {
      goto LABEL_11;
    }
    unint64_t v17 = *(void *)(a1 + 592);
    unint64_t v18 = *(void *)(a1 + 600);
    if (v17 >= v18)
    {
      uint64_t v22 = *(void *)(a1 + 584);
      unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      unint64_t v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24) {
        unint64_t v24 = 2 * v25;
      }
      if (v25 >= 0x333333333333333) {
        unint64_t v26 = 0x666666666666666;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26) {
        unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      }
      else {
        uint64_t v27 = 0;
      }
      unint64_t v28 = v26 + 40 * v23;
      unint64_t v29 = v26 + 40 * v27;
      long long v30 = *(_OWORD *)a2;
      long long v31 = *(_OWORD *)(a2 + 16);
      *(void *)(v28 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      unint64_t v21 = v28 + 40;
      long long v32 = *(char **)(a1 + 592);
      double v33 = *(char **)(a1 + 584);
      if (v32 != v33)
      {
        do
        {
          long long v34 = *(_OWORD *)(v32 - 40);
          long long v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        long long v32 = *(char **)(a1 + 584);
      }
      *(void *)(a1 + 584) = v28;
      *(void *)(a1 + 592) = v21;
      *(void *)(a1 + 600) = v29;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      long long v19 = *(_OWORD *)a2;
      long long v20 = *(_OWORD *)(a2 + 16);
      *(void *)(v17 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      unint64_t v21 = v17 + 40;
    }
    *(void *)(a1 + 592) = v21;
    goto LABEL_9;
  }
  int v14 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
  uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1BD1483E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = v5;
  if (*(unsigned char *)(a1 + 554))
  {
    uint64_t v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 554) = 1;
  uint64_t v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    uint64_t v7 = 0;
    goto LABEL_82;
  }
  uint64_t v65 = v6;
  if (*(unsigned char *)(a1 + 553)) {
    goto LABEL_5;
  }
  double v9 = *(void **)(a1 + 576);
  if (!v9)
  {
    id v68 = 0;
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 40))
  {
LABEL_5:
    int v8 = 0;
    id v68 = 0;
    goto LABEL_29;
  }
  [v9 sortUsingComparator:&__block_literal_global_1005];
  id v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v10 = *(id *)(a1 + 576);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  if (!v11)
  {

    id v12 = 0;
    goto LABEL_27;
  }
  id v12 = 0;
  uint64_t v13 = *(void *)v70;
  do
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (*(void *)v70 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(id *)(*((void *)&v69 + 1) + 8 * i);
      BOOL v16 = v15;
      if (v12)
      {
        unint64_t v17 = [v15 startDate];
        unint64_t v18 = [v12 endDate];
        int v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          long long v20 = [v16 endDate];
          unint64_t v21 = [v12 endDate];
          int v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22) {
            goto LABEL_21;
          }
          id v23 = objc_alloc(MEMORY[0x1E4F28C18]);
          unint64_t v24 = [v12 startDate];
          unint64_t v25 = [v16 endDate];
          id v26 = (id)[v23 initWithStartDate:v24 endDate:v25];
        }
        else
        {
          [v68 addObject:v12];
          id v26 = v16;
        }
        id v12 = v26;
      }
      else
      {
        id v12 = v15;
      }
LABEL_21:
    }
    uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  }
  while (v11);

  if (v12) {
    [v68 addObject:v12];
  }
LABEL_27:

LABEL_28:
  int v8 = 1;
LABEL_29:
  uint64_t v27 = *(void **)(a1 + 576);
  *(void *)(a1 + 576) = 0;

  *(unsigned char *)(a1 + 553) = 0;
  if (!v8)
  {
    unint64_t v38 = *(void *)(a1 + 584);
    *(void *)(a1 + 600) = 0;
    *(void *)(a1 + 592) = 0;
    *(void *)(a1 + 584) = 0;
    unint64_t v39 = v38;
    goto LABEL_47;
  }
  unint64_t v28 = [v68 lastObject];
  if (v28)
  {
    unint64_t v29 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_currentBucketInterval(a1);
    long long v30 = [v29 endDate];
    long long v31 = [v28 endDate];
    int v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      double v33 = [v28 endDate];
      [v33 timeIntervalSinceReferenceDate];
      double v35 = v34;

      uint64_t v36 = *(void *)(a1 + 584);
      BOOL v37 = *(long long **)(a1 + 592);
      while ((long long *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((long long *)v36 != v37)
          {
            double v40 = (long long *)(v36 + 40);
            if ((long long *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  long long v41 = *v40;
                  long long v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)uint64_t v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                double v40 = (long long *)((char *)v40 + 40);
              }
              while (v40 != v37);
              BOOL v37 = *(long long **)(a1 + 592);
            }
          }
          if ((long long *)v36 != v37) {
            *(void *)(a1 + 592) = v36;
          }
          break;
        }
        v36 += 40;
      }
    }
  }
  unint64_t v38 = *(void *)(a1 + 584);
  unint64_t v39 = *(void *)(a1 + 592);
  *(void *)(a1 + 600) = 0;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 592) = 0;
  if (![v68 count]) {
    goto LABEL_60;
  }
LABEL_47:
  id v43 = v68;
  long long __p = (void *)v38;
  if (v43)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v44 = v43;
    uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v70;
      while (2)
      {
        for (uint64_t j = 0; j != v45; ++j)
        {
          if (*(void *)v70 != v46) {
            objc_enumerationMutation(v44);
          }
          id v48 = *(id *)(*((void *)&v69 + 1) + 8 * j);
          int v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_primitiveInvalidateInterval((id *)a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
        if (v45) {
          continue;
        }
        break;
      }
    }

LABEL_59:
    unint64_t v38 = (unint64_t)__p;
LABEL_60:
    unint64_t v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v51;
    }
    int v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    long long __p = (void *)v38;
    if (v39 != v38)
    {
      uint64_t v54 = v38;
      uint64_t v50 = v67;
      do
      {
        int v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_primitiveAddSample(a1, v54, 1, v50);
        int v53 = v55;
        v54 += 40;
        if (v54 == v39) {
          char v56 = 0;
        }
        else {
          char v56 = v55;
        }
        uint64_t v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_primitiveInvalidateInterval((id *)a1, 0, v67))goto LABEL_59; {
LABEL_70:
    }
    int v53 = 0;
  }
  if (*(void *)(a1 + 40) && *(void *)(a1 + 528) != *(void *)(a1 + 520))
  {
    do
    {
      uint64_t v57 = objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(void *)(a1 + 112) + 1, v50, v65);
      HDStatisticsBucket<HDStatisticsPercentiles>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsPercentiles>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      unint64_t v58 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_statisticsFromFinishedBucket(a1, a1 + 120);
      long long v59 = [v57 startDate];
      [v59 timeIntervalSinceReferenceDate];
      double v61 = v60;
      uint64_t v62 = [v57 endDate];
      [v62 timeIntervalSinceReferenceDate];
      HDStatisticsCollectionEngine<HDStatisticsPercentiles>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_notifyForCurrentBucket(a1);
    }
    while (*(void *)(a1 + 528) != *(void *)(a1 + 520));
  }
  *(unsigned char *)(a1 + 554) = 0;
  if (__p) {
    operator delete(__p);
  }

  if (v53)
  {
    if (*(unsigned char *)(a1 + 556))
    {
      *(unsigned char *)(a1 + 556) = 0;
      id v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_notifyForCurrentBucket(a1);
      uint64_t v7 = 1;
      goto LABEL_82;
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v6 = v65;
LABEL_82:
  *(unsigned char *)(a1 + 554) = 0;
LABEL_83:

  return v7;
}

void sub_1BD148AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    *(unsigned char *)(v13 + 554) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::enableImmediateSampleInsertion(uint64_t result)
{
  *(unsigned char *)(result + 555) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(unsigned char *)(a1 + 554)) {
      goto LABEL_12;
    }
    uint64_t v7 = 0;
LABEL_14:
    uint64_t v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_primitiveInvalidateInterval((id *)a1, v7, a3);
    goto LABEL_15;
  }
  uint64_t v7 = [v6 dateIntervalForIntervalsContainingInterval:v5];

  if (!*(unsigned char *)(a1 + 554)) {
    goto LABEL_14;
  }
  if (!v7)
  {
LABEL_12:
    id v12 = *(void **)(a1 + 576);
    *(void *)(a1 + 576) = 0;

    uint64_t v7 = 0;
    uint64_t v11 = 1;
    *(unsigned char *)(a1 + 553) = 1;
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 553))
  {
    int v8 = *(void **)(a1 + 576);
    if (!v8)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      id v10 = *(void **)(a1 + 576);
      *(void *)(a1 + 576) = v9;

      int v8 = *(void **)(a1 + 576);
    }
    [v8 addObject:v7];
  }
  uint64_t v11 = 1;
LABEL_15:

  return v11;
}

void sub_1BD148DE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    *(unsigned char *)(a1 + 552) = 1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI23HDStatisticsPercentilesE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v9[3] = &unk_1E63043E8;
    uint64_t v12 = a1;
    id v10 = v5;
    id v11 = WeakRetained;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 112))(a1, v9, a3);
    if (v7 && *(unsigned char *)(a1 + 552) && !*(void *)(a1 + 40)) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_configureForStartTime(a1);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to query for initial statistics: no data source available.");
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1BD148F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::reset(uint64_t result)
{
  *(unsigned char *)(result + 552) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 encodeBool:*(unsigned __int8 *)(a1 + 552) forKey:@"needs_config"];
  v3;
  v27[0] = &unk_1F1726FA0;
  v27[1] = 0;
  int v28 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
  LOBYTE(v28) = 1;
  v27[2] = v4;
  memset(&v27[3], 0, 24);
  statistics::StatisticsEngine::makeCurrentBucket((uint64_t)v27);
  int v8 = &unk_1F171B9C8;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = 0;
  int v26 = 511;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v22 = 0;
  int8x16_t v9 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  uint64_t v5 = *(void *)(a1 + 136);
  char v24 = *(unsigned char *)(a1 + 144);
  char v25 = *(unsigned char *)(a1 + 145);
  BOOL v23 = *(_DWORD *)(a1 + 148) == 0;
  int8x16_t v10 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v14 = v5;
  uint64_t v15 = v6;
  uint64_t v7 = *(int8x16_t **)(a1 + 216);
  if (v7 != *(int8x16_t **)(a1 + 224))
  {
    unint64_t v29 = &unk_1F17206F8;
    int v36 = 127;
    int8x16_t v32 = vextq_s8(*v7, *v7, 8uLL);
    uint64_t v30 = v7[1].i64[0];
    uint64_t v31 = v7[1].i64[1];
    char v35 = 0;
    __int8 v34 = v7[2].i8[9];
    __int8 v33 = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>();
  }
  statistics::StatisticsBucket::makeStatistics((uint64_t)&v8);
  HDStatisticsPercentiles::archive((HDStatisticsPercentiles *)(a1 + 240));
}

void sub_1BD14933C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v46 = a2;
  *(unsigned char *)(a1 + 552) = [v46 decodeBoolForKey:@"needs_config"];
  id v3 = v46;
  HDStatisticsBucket<HDStatisticsPercentiles>::HDStatisticsBucket((uint64_t)v50, 0, -1.79769313e308, 1.79769313e308);
  long long v51 = 0u;
  long long v52 = 0u;
  uint64_t v89 = 0;
  id v48 = v3;
  PB::Reader::Reader((PB::Reader *)v88, (const unsigned __int8 *)[v48 decodeBytesForKey:@"hdsce_archived_representation" returnedLength:&v89]);
  unint64_t v81 = &unk_1F1726FA0;
  uint64_t v82 = 0;
  uint64_t v86 = 0;
  uint64_t v84 = 0;
  uint64_t v85 = 0;
  int v87 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v81, (PB::Reader *)v88);
  uint64_t v49 = v83;
  if (v82)
  {
    uint64_t v56 = 0;
    memset(v59, 0, sizeof(v59));
    v66[1] = 0;
    v66[0] = 0;
    long long __p = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    memset(v64, 0, sizeof(v64));
    uint64_t v65 = v66;
    long long v67 = 0u;
    long long v68 = 0u;
    int v69 = 1065353216;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    uint64_t v73 = 0;
    int v74 = 1065353216;
    long long v75 = 0u;
    long long v76 = 0u;
    int v77 = 1065353216;
    long long v78 = 0u;
    long long v79 = 0u;
    int v80 = 1065353216;
    int8x16_t v53 = vextq_s8(*(int8x16_t *)(v82 + 8), *(int8x16_t *)(v82 + 8), 8uLL);
    uint64_t v5 = *(void *)(v82 + 72);
    uint64_t v54 = *(void *)(v82 + 64);
    __int16 v55 = *(_WORD *)(v82 + 185);
    int8x16_t v57 = vextq_s8(*(int8x16_t *)(v82 + 24), *(int8x16_t *)(v82 + 24), 8uLL);
    uint64_t v58 = v5;
    uint64_t v6 = *(void *)(v82 + 80);
    uint64_t v7 = *(void *)(v82 + 88);
    long long v47 = (void *)v82;
    if (v6 != v7)
    {
      unint64_t v8 = 0;
      do
      {
        uint64_t v9 = *(void *)(*(void *)v6 + 24);
        uint64_t v10 = *(void *)(*(void *)v6 + 32);
        uint64_t v11 = *(void *)(*(void *)v6 + 8);
        uint64_t v12 = *(void *)(*(void *)v6 + 16);
        char v13 = *(unsigned char *)(*(void *)v6 + 41);
        char v14 = *(unsigned char *)(*(void *)v6 + 40);
        if (v8 >= (unint64_t)v61)
        {
          uint64_t v15 = (void *)__p;
          unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - __p) >> 4);
          unint64_t v17 = v16 + 1;
          if (v16 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v61 - __p) >> 4) > v17) {
            unint64_t v17 = 0x5555555555555556 * ((uint64_t)(v61 - __p) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v61 - __p) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v18 = 0x555555555555555;
          }
          else {
            unint64_t v18 = v17;
          }
          if (v18)
          {
            unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v18);
            unint64_t v8 = *((void *)&__p + 1);
            uint64_t v15 = (void *)__p;
          }
          else
          {
            uint64_t v4 = 0;
          }
          unint64_t v19 = v18 + 48 * v16;
          *(void *)unint64_t v19 = v10;
          *(void *)(v19 + 8) = v9;
          *(void *)(v19 + 16) = v11;
          *(void *)(v19 + 24) = v12;
          *(_WORD *)(v19 + 32) = 1;
          *(unsigned char *)(v19 + 40) = 0;
          *(unsigned char *)(v19 + 41) = v13;
          *(unsigned char *)(v19 + 42) = v14;
          unint64_t v20 = v19;
          if ((void *)v8 != v15)
          {
            do
            {
              long long v21 = *(_OWORD *)(v8 - 48);
              long long v22 = *(_OWORD *)(v8 - 32);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v8 - 21);
              *(_OWORD *)(v20 - 48) = v21;
              *(_OWORD *)(v20 - 32) = v22;
              v20 -= 48;
              v8 -= 48;
            }
            while ((void *)v8 != v15);
            uint64_t v15 = (void *)__p;
          }
          unint64_t v8 = v19 + 48;
          *(void *)&long long __p = v20;
          *((void *)&__p + 1) = v19 + 48;
          *(void *)&long long v61 = v18 + 48 * (void)v4;
          if (v15) {
            operator delete(v15);
          }
        }
        else
        {
          *(void *)unint64_t v8 = v10;
          *(void *)(v8 + 8) = v9;
          *(void *)(v8 + 16) = v11;
          *(void *)(v8 + 24) = v12;
          *(_WORD *)(v8 + 32) = 1;
          *(unsigned char *)(v8 + 40) = 0;
          *(unsigned char *)(v8 + 41) = v13;
          *(unsigned char *)(v8 + 42) = v14;
          v8 += 48;
        }
        *((void *)&__p + 1) = v8;
        v6 += 8;
      }
      while (v6 != v7);
    }
    BOOL v23 = (HDStatisticsPercentiles *)v47[13];
    if (v23) {
      HDStatisticsPercentiles::unarchive(v23, v4);
    }
    char v24 = (HDStatisticsPercentiles **)v47[17];
    if (v24 != (HDStatisticsPercentiles **)v47[18]) {
      HDStatisticsPercentiles::unarchive(*v24, v4);
    }
    uint64_t v25 = v47[5];
    for (uint64_t i = v47[6]; v25 != i; v25 += 8)
    {
      double v28 = *(double *)(*(void *)v25 + 8);
      double v27 = *(double *)(*(void *)v25 + 16);
      if (v28 >= v27) {
        double v29 = *(double *)(*(void *)v25 + 16);
      }
      else {
        double v29 = *(double *)(*(void *)v25 + 8);
      }
      if (v27 < v28) {
        double v27 = *(double *)(*(void *)v25 + 8);
      }
      HKIntervalMask<double>::_insertInterval(v59, v29, v27);
    }
    HDStatisticsBucket<HDStatisticsPercentiles>::operator=((uint64_t)v50, (uint64_t)&v53);
    HDStatisticsBucket<HDStatisticsPercentiles>::~HDStatisticsBucket((uint64_t)&v53);
  }
  uint64_t v30 = v84;
  uint64_t v31 = v85;
  if (v84 != v85)
  {
    unint64_t v32 = *((void *)&v51 + 1);
    do
    {
      uint64_t v33 = *(void *)(*(void *)v30 + 24);
      uint64_t v34 = *(void *)(*(void *)v30 + 32);
      uint64_t v35 = *(void *)(*(void *)v30 + 8);
      uint64_t v36 = *(void *)(*(void *)v30 + 16);
      if (v32 >= (unint64_t)v52)
      {
        BOOL v37 = (void *)v51;
        unint64_t v38 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v32 - v51) >> 3);
        unint64_t v39 = v38 + 1;
        if (v38 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(v52 - v51) >> 3) > v39) {
          unint64_t v39 = 0x999999999999999ALL * ((uint64_t)(v52 - v51) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v52 - v51) >> 3) >= 0x333333333333333) {
          unint64_t v40 = 0x666666666666666;
        }
        else {
          unint64_t v40 = v39;
        }
        if (v40)
        {
          unint64_t v40 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v40);
          unint64_t v32 = *((void *)&v51 + 1);
          BOOL v37 = (void *)v51;
        }
        else
        {
          uint64_t v41 = 0;
        }
        unint64_t v42 = v40 + 40 * v38;
        *(void *)unint64_t v42 = v34;
        *(void *)(v42 + 8) = v33;
        *(void *)(v42 + 16) = v35;
        *(void *)(v42 + 24) = v36;
        *(_WORD *)(v42 + 32) = 1;
        unint64_t v43 = v42;
        if ((void *)v32 != v37)
        {
          do
          {
            long long v44 = *(_OWORD *)(v32 - 40);
            long long v45 = *(_OWORD *)(v32 - 24);
            *(_WORD *)(v43 - 8) = *(_WORD *)(v32 - 8);
            *(_OWORD *)(v43 - 24) = v45;
            *(_OWORD *)(v43 - 40) = v44;
            v43 -= 40;
            v32 -= 40;
          }
          while ((void *)v32 != v37);
          BOOL v37 = (void *)v51;
        }
        unint64_t v32 = v42 + 40;
        *(void *)&long long v51 = v43;
        *((void *)&v51 + 1) = v42 + 40;
        *(void *)&long long v52 = v40 + 40 * v41;
        if (v37) {
          operator delete(v37);
        }
      }
      else
      {
        *(void *)unint64_t v32 = v34;
        *(void *)(v32 + 8) = v33;
        *(void *)(v32 + 16) = v35;
        *(void *)(v32 + 24) = v36;
        *(_WORD *)(v32 + 32) = 1;
        v32 += 40;
      }
      *((void *)&v51 + 1) = v32;
      v30 += 8;
    }
    while (v30 != v31);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v81);

  HDStatisticsCollectionEngine<HDStatisticsPercentiles>::operator=((void *)(a1 + 112), (uint64_t)&v49);
  if ((void)v51)
  {
    *((void *)&v51 + 1) = v51;
    operator delete((void *)v51);
  }
  HDStatisticsBucket<HDStatisticsPercentiles>::~HDStatisticsBucket((uint64_t)v50);
}

void sub_1BD149A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a3);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table((uint64_t)&STACK[0x330]);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x308]);
  uint64_t v9 = (void *)STACK[0x2F0];
  if (STACK[0x2F0])
  {
    STACK[0x2F8] = (unint64_t)v9;
    operator delete(v9);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x2C8]);
  std::__tree<std::__value_type<long long,HDStatisticsPercentiles>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsPercentiles>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsPercentiles>>>::destroy((void *)STACK[0x2B8]);
  uint64_t v10 = (void *)STACK[0x268];
  if (STACK[0x268])
  {
    STACK[0x270] = (unint64_t)v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v11;
    operator delete(v11);
  }
  objc_destroyWeak((id *)&STACK[0x248]);
  uint64_t v12 = (void *)STACK[0x230];
  if (STACK[0x230])
  {
    STACK[0x238] = (unint64_t)v12;
    operator delete(v12);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x380]);
  HDStatisticsCollectionEngine<HDStatisticsPercentiles>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsPercentiles>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 256;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 170) = 0u;
  *(void *)(a1 + 192) = a1 + 200;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_DWORD *)(a1 + 248) = 1065353216;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(void *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 312) = 1065353216;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_DWORD *)(a1 + 352) = 1065353216;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_DWORD *)(a1 + 392) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsPercentiles>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 408);
  if (v2)
  {
    *(void *)(a1 + 416) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsPercentiles>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsPercentiles>::~HDStatisticsBucket(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 360);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 320);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 280);
  uint64_t v2 = *(void **)(a1 + 256);
  if (v2)
  {
    *(void *)(a1 + 264) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 216);
  std::__tree<std::__value_type<long long,HDStatisticsPercentiles>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsPercentiles>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsPercentiles>>>::destroy(*(void **)(a1 + 200));
  id v3 = *(void **)(a1 + 120);
  if (v3)
  {
    *(void *)(a1 + 128) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(void *)(a1 + 104) = v4;
    operator delete(v4);
  }
  objc_destroyWeak((id *)(a1 + 88));
  uint64_t v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(void *)(a1 + 72) = v5;
    operator delete(v5);
  }

  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsPercentiles>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsPercentiles>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsPercentiles>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsPercentiles>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsPercentiles>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsPercentiles>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsPercentiles>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsPercentiles>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsPercentiles>>>::destroy(a1[1]);
    uint64_t v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_configureForStartTime(uint64_t a1)
{
  uint64_t v28 = 0;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
    uint64_t v4 = [v2 dateIntervalContainingDate:v3 index:&v28];

    uint64_t v5 = [v4 startDate];
    [v5 timeIntervalSinceReferenceDate];
    double v7 = v6;

    unint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
LABEL_5:
    double v13 = v9;

    goto LABEL_6;
  }
  id v10 = *(id *)(a1 + 64);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v11 = [v10 startDate];
    [v11 timeIntervalSinceReferenceDate];
    double v7 = v12;

    unint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
    goto LABEL_5;
  }
  double v7 = -1.79769313e308;
  double v13 = 1.79769313e308;
LABEL_6:

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsPercentiles>::HDStatisticsBucket((uint64_t)v22, WeakRetained, v7, v13);

  if (*(void *)(a1 + 32) == 1) {
    char v24 = 1;
  }
  uint64_t v23 = *(void *)(a1 + 56);
  char v25 = *(unsigned char *)(a1 + 24) & 1;
  if (v27 != (char *)(a1 + 72)) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27, *(char **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4);
  }
  HDStatisticsBucket<HDStatisticsPercentiles>::setStatisticsConfiguration((uint64_t)v22, *(void **)(a1 + 568));
  if (!*(void *)(a1 + 40)) {
    int v26 = 0;
  }
  uint64_t v15 = v28;
  HDStatisticsBucket<HDStatisticsPercentiles>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v22);
  uint64_t v18 = v15;
  HDStatisticsBucket<HDStatisticsPercentiles>::HDStatisticsBucket((uint64_t)v19, (uint64_t)v17);
  long long __p = 0u;
  long long v21 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsPercentiles>::operator=((void *)(a1 + 112), (uint64_t)&v18);

  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsPercentiles>::~HDStatisticsBucket((uint64_t)v19);
  HDStatisticsBucket<HDStatisticsPercentiles>::~HDStatisticsBucket((uint64_t)v17);
  *(unsigned char *)(a1 + 552) = 0;
  return HDStatisticsBucket<HDStatisticsPercentiles>::~HDStatisticsBucket((uint64_t)v22);
}

void sub_1BD149FFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsPercentiles>::setStatisticsConfiguration(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(a1 + 32), a2);
  uint64_t v4 = a2;
  HDStatisticsPercentiles::configure((HDStatisticsPercentiles *)(a1 + 120), v4);
}

void sub_1BD14A0B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *HDStatisticsCollectionEngine<HDStatisticsPercentiles>::operator=(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  HDStatisticsBucket<HDStatisticsPercentiles>::operator=((uint64_t)(a1 + 1), a2 + 8);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 51), (__n128 *)(a2 + 408));
  uint64_t v4 = *(void *)(a2 + 432);
  *(void *)(a2 + 432) = 0;
  uint64_t v5 = (void *)a1[54];
  a1[54] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsPercentiles>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  unint64_t v8 = *(unsigned char **)(a2 + 96);
  double v7 = *(unsigned char **)(a2 + 104);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(void *)(a1 + 96) = v10;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(void *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)(a1 + 120), *(const void **)(a2 + 120), *(void *)(a2 + 128), (uint64_t)(*(void *)(a2 + 128) - *(void *)(a2 + 120)) >> 3);
  long long v12 = *(_OWORD *)(a2 + 144);
  long long v13 = *(_OWORD *)(a2 + 160);
  long long v14 = *(_OWORD *)(a2 + 170);
  *(void *)(a1 + 200) = 0;
  uint64_t v15 = (void *)(a1 + 200);
  *(void *)(a1 + 192) = a1 + 200;
  *(_OWORD *)(a1 + 170) = v14;
  *(_OWORD *)(a1 + 144) = v12;
  *(_OWORD *)(a1 + 160) = v13;
  *(void *)(a1 + 208) = 0;
  unint64_t v16 = *(void **)(a2 + 192);
  if (v16 != (void *)(a2 + 200))
  {
    unint64_t v17 = 0;
    uint64_t v18 = (void *)(a1 + 200);
    while (1)
    {
      unint64_t v19 = (void *)(a1 + 200);
      if (v18 == v15) {
        goto LABEL_12;
      }
      unint64_t v20 = v17;
      long long v21 = (void *)(a1 + 200);
      if (v17)
      {
        do
        {
          unint64_t v19 = v20;
          unint64_t v20 = (void *)v20[1];
        }
        while (v20);
      }
      else
      {
        do
        {
          unint64_t v19 = (void *)v21[2];
          BOOL v22 = *v19 == (void)v21;
          long long v21 = v19;
        }
        while (v22);
      }
      uint64_t v23 = v16[4];
      if (v19[4] < v23)
      {
LABEL_12:
        if (v17) {
          char v24 = (uint64_t **)v19;
        }
        else {
          char v24 = (uint64_t **)(a1 + 200);
        }
        if (v17) {
          char v25 = (uint64_t **)(v19 + 1);
        }
        else {
          char v25 = (uint64_t **)(a1 + 200);
        }
        if (!*v25)
        {
LABEL_28:
          uint64_t v28 = (char *)operator new(0x70uLL);
          uint64_t v29 = v16[4];
          *((void *)v28 + 5) = 0;
          *((void *)v28 + 4) = v29;
          *((void *)v28 + 6) = 0;
          *((void *)v28 + 7) = 0;
          std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)v28 + 5, (const void *)v16[5], v16[6], (uint64_t)(v16[6] - v16[5]) >> 3);
          long long v30 = *((_OWORD *)v16 + 4);
          long long v31 = *((_OWORD *)v16 + 5);
          *(_OWORD *)(v28 + 90) = *(_OWORD *)((char *)v16 + 90);
          *((_OWORD *)v28 + 4) = v30;
          *((_OWORD *)v28 + 5) = v31;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 192), (uint64_t)v24, v25, (uint64_t *)v28);
        }
      }
      else
      {
        char v25 = (uint64_t **)(a1 + 200);
        char v24 = (uint64_t **)(a1 + 200);
        if (!v17) {
          goto LABEL_28;
        }
        int v26 = v17;
        while (1)
        {
          while (1)
          {
            char v24 = (uint64_t **)v26;
            uint64_t v27 = v26[4];
            if (v27 <= v23) {
              break;
            }
            int v26 = *v24;
            char v25 = v24;
            if (!*v24) {
              goto LABEL_28;
            }
          }
          if (v27 >= v23) {
            break;
          }
          int v26 = v24[1];
          if (!v26)
          {
            char v25 = v24 + 1;
            goto LABEL_28;
          }
        }
      }
      unint64_t v32 = (void *)v16[1];
      if (v32)
      {
        do
        {
          uint64_t v33 = v32;
          unint64_t v32 = (void *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          uint64_t v33 = (void *)v16[2];
          BOOL v22 = *v33 == (void)v16;
          unint64_t v16 = v33;
        }
        while (!v22);
      }
      if (v33 == (void *)(a2 + 200)) {
        break;
      }
      unint64_t v17 = (void *)*v15;
      uint64_t v18 = *(void **)(a1 + 192);
      unint64_t v16 = v33;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 216, a2 + 216);
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 256), *(const void **)(a2 + 256), *(void *)(a2 + 264), (uint64_t)(*(void *)(a2 + 264) - *(void *)(a2 + 256)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 280, a2 + 280);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 320, a2 + 320);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 360, a2 + 360);
  return a1;
}

void sub_1BD14A42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, id *location, void **a12)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v17);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  unint64_t v19 = *v15;
  if (*v15)
  {
    *(void *)(v13 + 264) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
  std::__tree<std::__value_type<long long,HDStatisticsPercentiles>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsPercentiles>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsPercentiles>>>::destroy(*v12);
  unint64_t v20 = *a9;
  if (*a9)
  {
    *(void *)(v13 + 128) = v20;
    operator delete(v20);
  }
  long long v21 = *a10;
  if (*a10)
  {
    *(void *)(v13 + 104) = v21;
    operator delete(v21);
  }
  objc_destroyWeak(location);
  BOOL v22 = *a12;
  if (*a12)
  {
    *(void *)(v13 + 72) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsPercentiles>::operator=(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  long long v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v5;

  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  id WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  uint64_t v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(void *)(a1 + 104) = v9;
    operator delete(v9);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 120, (__n128 *)(a2 + 120));
  uint64_t v11 = a1 + 200;
  id v10 = *(void **)(a1 + 200);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  long long v12 = *(_OWORD *)(a2 + 152);
  long long v13 = *(_OWORD *)(a2 + 168);
  *(_WORD *)(a1 + 184) = *(_WORD *)(a2 + 184);
  *(_OWORD *)(a1 + 152) = v12;
  *(_OWORD *)(a1 + 168) = v13;
  std::__tree<std::__value_type<long long,HDStatisticsPercentiles>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsPercentiles>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsPercentiles>>>::destroy(v10);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  uint64_t v14 = (void *)(a2 + 200);
  uint64_t v15 = *(void *)(a2 + 200);
  *(void *)(a1 + 200) = v15;
  uint64_t v16 = *(void *)(a2 + 208);
  *(void *)(a1 + 208) = v16;
  if (v16)
  {
    *(void *)(v15 + 16) = v11;
    *(void *)(a2 + 192) = v14;
    *uint64_t v14 = 0;
    *(void *)(a2 + 208) = 0;
  }
  else
  {
    *(void *)(a1 + 192) = v11;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 216, (uint64_t *)(a2 + 216));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 256, (__n128 *)(a2 + 256));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 280, (uint64_t *)(a2 + 280));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 320, (uint64_t *)(a2 + 320));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 360, (uint64_t *)(a2 + 360));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  uint64_t v115 = *MEMORY[0x1E4F143B8];
  double v4 = *(double *)a2;
  id v5 = objc_alloc(MEMORY[0x1E4F1C9C8]);
  long long v6 = (double *)(a2 + 40);
  if (v4 != -1.79769313e308) {
    long long v6 = (double *)a2;
  }
  id v99 = (id)[v5 initWithTimeIntervalSinceReferenceDate:*v6];
  uint64_t v101 = a2;
  if (*(double *)(a2 + 8) == 1.79769313e308) {
    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 48)];
  }
  else {
    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 8)];
  }
  unint64_t v8 = (void *)v7;
  id v9 = *(id *)(a1 + 16);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v10 = *(id *)(a1 + 16);
    if ([v10 shouldUseUnderlyingTypeForStatistics])
    {
      uint64_t v11 = [v10 underlyingSampleType];

      id v9 = (id)v11;
    }
  }
  long long v12 = (void *)[objc_alloc(MEMORY[0x1E4F2B5B0]) initWithDataType:v9 startDate:v99 endDate:v8];
  if (*(unsigned char *)(a1 + 24))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      id v14 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      uint64_t v15 = *(uint64_t **)(a2 + 256);
      uint64_t v16 = *(uint64_t **)(a2 + 264);
      while (v15 != v16)
      {
        uint64_t v17 = *v15;
        id v18 = objc_loadWeakRetained((id *)(a1 + 48));
        unint64_t v2 = [v18 sourceForSourceID:v17];

        if (v2)
        {
          if (([v14 containsObject:v2] & 1) == 0) {
            [v14 addObject:v2];
          }
        }

        ++v15;
      }
      unint64_t v19 = (void *)[v14 copy];
      [v12 _setSources:v19];
    }
  }

  v113[0] = &unk_1F1725E50;
  long long v114 = v113;
  id v100 = v12;
  __p[0] = 0;
  __p[1] = 0;
  *(void *)long long v104 = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(__p, *(const void **)(v101 + 120), *(void *)(v101 + 128), (uint64_t)(*(void *)(v101 + 128) - *(void *)(v101 + 120)) >> 3);
  long long v20 = *(_OWORD *)(v101 + 160);
  *(_OWORD *)&v104[8] = *(_OWORD *)(v101 + 144);
  v105[0] = v20;
  *(_OWORD *)((char *)v105 + 10) = *(_OWORD *)(v101 + 170);
  if (!v114) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v21 = (*(uint64_t (**)(void *, void **))(*v114 + 48))(v114, __p);
  long long v106 = 0;
  uint64_t v107 = 0;
  uint64_t v108 = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&v106, *(const void **)v21, *(void *)(v21 + 8), (uint64_t)(*(void *)(v21 + 8) - *(void *)v21) >> 3);
  long long v22 = *(_OWORD *)(v21 + 24);
  long long v23 = *(_OWORD *)(v21 + 40);
  *(_OWORD *)((char *)v110 + 10) = *(_OWORD *)(v21 + 50);
  v110[0] = v23;
  long long v109 = v22;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  double v24 = HDStatisticsPercentiles::calculatePercentileValue((HDStatisticsPercentiles *)&v106);
  char v25 = (void *)MEMORY[0x1E4F2B370];
  int v26 = [*(id *)(a1 + 16) canonicalUnit];
  uint64_t v27 = [v25 quantityWithUnit:v26 doubleValue:v24];
  [v100 setPercentileQuantity:v27];

  [v100 setDataCount:(v107 - (unsigned char *)v106) >> 3];
  uint64_t v28 = *(void *)(a1 + 24);
  char v98 = v28;
  if ((v28 & 0x20) != 0)
  {
    double v29 = *((double *)&v109 + 1);
    long long v30 = v110[0];
    long long v31 = (void *)MEMORY[0x1E4F2B370];
    unint64_t v32 = [*(id *)(a1 + 16) canonicalUnit];
    uint64_t v33 = [v31 quantityWithUnit:v32 doubleValue:v29];
    [v100 setMostRecentQuantity:v33];

    uint64_t v34 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v30);
    [v100 setMostRecentQuantityDateInterval:v34];

    uint64_t v28 = *(void *)(a1 + 24);
  }
  if ((v28 & 1) == 0) {
    goto LABEL_134;
  }
  id v97 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v96 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  if ((v98 & 0x20) != 0)
  {
    id v93 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v94 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else
  {
    id v93 = 0;
    id v94 = 0;
  }
  *(_OWORD *)long long __p = 0u;
  *(_OWORD *)long long v104 = 0u;
  *(_DWORD *)&v104[16] = 1065353216;
  uint64_t v35 = *(void **)(v101 + 192);
  if (v35 == (void *)(v101 + 200)) {
    goto LABEL_131;
  }
  do
  {
    uint64_t v36 = HDStatisticsBucket<HDStatisticsPercentiles>::_bundleIdentifierForSourceID(v101, v35[4]);
    BOOL v37 = v36;
    if (!v36) {
      goto LABEL_107;
    }
    unint64_t v38 = [v36 hash];
    unint64_t v39 = v38;
    unint64_t v40 = (unint64_t)__p[1];
    if (!__p[1]) {
      goto LABEL_48;
    }
    uint8x8_t v41 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v41.i16[0] = vaddlv_u8(v41);
    unint64_t v42 = v41.u32[0];
    if (v41.u32[0] > 1uLL)
    {
      unint64_t v2 = v38;
      if ((void *)v38 >= __p[1]) {
        unint64_t v2 = v38 % (unint64_t)__p[1];
      }
    }
    else
    {
      unint64_t v2 = ((unint64_t)__p[1] - 1) & v38;
    }
    unint64_t v43 = (char **)*((void *)__p[0] + v2);
    if (!v43 || (long long v44 = *v43) == 0)
    {
LABEL_48:
      uint64_t v50 = (char *)operator new(0x60uLL);
      v111[0] = v50;
      v111[1] = v104;
      *(void *)uint64_t v50 = 0;
      *((void *)v50 + 1) = v39;
      *((void *)v50 + 2) = v37;
      *(_OWORD *)(v50 + 24) = 0u;
      *(_OWORD *)(v50 + 40) = 0u;
      *(_OWORD *)(v50 + 56) = 0u;
      *(_OWORD *)(v50 + 72) = 0u;
      *((void *)v50 + 11) = 0;
      char v112 = 1;
      float v51 = (float)(unint64_t)(*(void *)&v104[8] + 1);
      if (v40 && (float)(*(float *)&v104[16] * (float)v40) >= v51)
      {
LABEL_94:
        long long v67 = (char **)*((void *)__p[0] + v2);
        long long v44 = (char *)v111[0];
        if (v67)
        {
          *(void *)v111[0] = *v67;
        }
        else
        {
          *(void *)v111[0] = *(void *)v104;
          *(void *)long long v104 = v44;
          *((void *)__p[0] + v2) = v104;
          if (!*(void *)v44)
          {
LABEL_103:
            v111[0] = 0;
            ++*(void *)&v104[8];
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsPercentiles>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsPercentiles>,void *>>>>::reset[abi:ne180100]((uint64_t)v111);
            goto LABEL_104;
          }
          unint64_t v68 = *(void *)(*(void *)v44 + 8);
          if ((v40 & (v40 - 1)) != 0)
          {
            if (v68 >= v40) {
              v68 %= v40;
            }
          }
          else
          {
            v68 &= v40 - 1;
          }
          long long v67 = (char **)((char *)__p[0] + 8 * v68);
        }
        *long long v67 = v44;
        goto LABEL_103;
      }
      BOOL v52 = (v40 & (v40 - 1)) != 0;
      if (v40 < 3) {
        BOOL v52 = 1;
      }
      unint64_t v53 = v52 | (2 * v40);
      unint64_t v54 = vcvtps_u32_f32(v51 / *(float *)&v104[16]);
      if (v53 <= v54) {
        int8x8_t prime = (int8x8_t)v54;
      }
      else {
        int8x8_t prime = (int8x8_t)v53;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v40 = (unint64_t)__p[1];
      if ((void *)*(void *)&prime > __p[1]) {
        goto LABEL_60;
      }
      if ((void *)*(void *)&prime < __p[1])
      {
        unint64_t v62 = vcvtps_u32_f32((float)*(unint64_t *)&v104[8] / *(float *)&v104[16]);
        if (__p[1] < (void *)3
          || (uint8x8_t v63 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v63.i16[0] = vaddlv_u8(v63), v63.u32[0] > 1uLL))
        {
          unint64_t v62 = std::__next_prime(v62);
        }
        else
        {
          uint64_t v64 = 1 << -(char)__clz(v62 - 1);
          if (v62 >= 2) {
            unint64_t v62 = v64;
          }
        }
        if (*(void *)&prime <= v62) {
          int8x8_t prime = (int8x8_t)v62;
        }
        if (*(void *)&prime >= v40)
        {
          unint64_t v40 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_60:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v56 = operator new(8 * *(void *)&prime);
            int8x16_t v57 = __p[0];
            __p[0] = v56;
            if (v57) {
              operator delete(v57);
            }
            uint64_t v58 = 0;
            __p[1] = (void *)prime;
            do
              *((void *)__p[0] + v58++) = 0;
            while (*(void *)&prime != v58);
            long long v59 = *(void ***)v104;
            if (*(void *)v104)
            {
              unint64_t v60 = *(void *)(*(void *)v104 + 8);
              uint8x8_t v61 = (uint8x8_t)vcnt_s8(prime);
              v61.i16[0] = vaddlv_u8(v61);
              if (v61.u32[0] > 1uLL)
              {
                if (v60 >= *(void *)&prime) {
                  v60 %= *(void *)&prime;
                }
              }
              else
              {
                v60 &= *(void *)&prime - 1;
              }
              *((void *)__p[0] + v60) = v104;
              for (i = *v59; i; unint64_t v60 = v66)
              {
                unint64_t v66 = i[1];
                if (v61.u32[0] > 1uLL)
                {
                  if (v66 >= *(void *)&prime) {
                    v66 %= *(void *)&prime;
                  }
                }
                else
                {
                  v66 &= *(void *)&prime - 1;
                }
                if (v66 != v60)
                {
                  if (!*((void *)__p[0] + v66))
                  {
                    *((void *)__p[0] + v66) = v59;
                    goto LABEL_85;
                  }
                  *long long v59 = (void *)*i;
                  void *i = **((void **)__p[0] + v66);
                  **((void **)__p[0] + v66) = i;
                  uint64_t i = v59;
                }
                unint64_t v66 = v60;
LABEL_85:
                long long v59 = (void **)i;
                uint64_t i = (void *)*i;
              }
            }
            unint64_t v40 = (unint64_t)prime;
            goto LABEL_89;
          }
          int v74 = __p[0];
          __p[0] = 0;
          if (v74) {
            operator delete(v74);
          }
          unint64_t v40 = 0;
          __p[1] = 0;
        }
      }
LABEL_89:
      if ((v40 & (v40 - 1)) != 0)
      {
        if (v39 >= v40) {
          unint64_t v2 = v39 % v40;
        }
        else {
          unint64_t v2 = v39;
        }
      }
      else
      {
        unint64_t v2 = (v40 - 1) & v39;
      }
      goto LABEL_94;
    }
    unint64_t v95 = (unint64_t)__p[1] - 1;
    while (1)
    {
      unint64_t v45 = *((void *)v44 + 1);
      if (v45 == v39) {
        break;
      }
      if (v42 > 1)
      {
        if (v45 >= v40) {
          v45 %= v40;
        }
      }
      else
      {
        v45 &= v95;
      }
      if (v45 != v2) {
        goto LABEL_48;
      }
LABEL_47:
      long long v44 = *(char **)v44;
      if (!v44) {
        goto LABEL_48;
      }
    }
    id v46 = *((id *)v44 + 2);
    id v47 = v37;
    id v48 = v47;
    if (v46 != v47)
    {
      char v49 = [v46 isEqualToString:v47];

      if (v49) {
        goto LABEL_104;
      }
      goto LABEL_47;
    }

LABEL_104:
    if (v44 + 16 != (char *)(v35 + 4)) {
      std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(v44 + 24, (char *)v35[5], v35[6], (uint64_t)(v35[6] - v35[5]) >> 3);
    }
    long long v69 = *((_OWORD *)v35 + 4);
    long long v70 = *((_OWORD *)v35 + 5);
    *(_OWORD *)(v44 + 74) = *(_OWORD *)((char *)v35 + 90);
    *((_OWORD *)v44 + 3) = v69;
    *((_OWORD *)v44 + 4) = v70;

LABEL_107:
    long long v71 = (void *)v35[1];
    if (v71)
    {
      do
      {
        long long v72 = v71;
        long long v71 = (void *)*v71;
      }
      while (v71);
    }
    else
    {
      do
      {
        long long v72 = (void *)v35[2];
        BOOL v73 = *v72 == (void)v35;
        uint64_t v35 = v72;
      }
      while (!v73);
    }
    uint64_t v35 = v72;
  }
  while (v72 != (void *)(v101 + 200));
  long long v75 = *(uint64_t ***)v104;
  if (*(void *)v104)
  {
    do
    {
      long long v76 = v75[2];
      int v77 = (void *)MEMORY[0x1E4F2B370];
      long long v78 = [*(id *)(a1 + 16) canonicalUnit];
      if (!v114) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      long long v79 = (HDStatisticsPercentiles *)(*(uint64_t (**)(void *, uint64_t *))(*v114 + 48))(v114, (uint64_t *)v75 + 3);
      int v80 = [v77 quantityWithUnit:v78 doubleValue:HDStatisticsPercentiles::calculatePercentileValue(v79)];
      [v97 setObject:v80 forKeyedSubscript:v76];

      if (!v114) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      unint64_t v81 = NSNumber;
      uint64_t v82 = (void *)(*(uint64_t (**)(void *, uint64_t *))(*v114 + 48))(v114, (uint64_t *)v75 + 3);
      uint64_t v83 = [v81 numberWithLongLong:(uint64_t)(v82[1] - *v82) >> 3];
      [v96 setObject:v83 forKeyedSubscript:v76];

      if ((v98 & 0x20) != 0)
      {
        if (!v114) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        uint64_t v84 = (double *)(*(uint64_t (**)(void *, uint64_t *))(*v114 + 48))(v114, (uint64_t *)v75 + 3);
        double v86 = v84[4];
        double v85 = v84[5];
        double v87 = v84[6];
        long long v88 = (void *)MEMORY[0x1E4F2B370];
        uint64_t v89 = [*(id *)(a1 + 16) canonicalUnit];
        uint64_t v90 = [v88 quantityWithUnit:v89 doubleValue:v86];
        [v93 setObject:v90 forKeyedSubscript:v76];

        unint64_t v91 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v85, v87);
        [v94 setObject:v91 forKeyedSubscript:v76];
      }
      long long v75 = (uint64_t **)*v75;
    }
    while (v75);
  }
LABEL_131:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsPercentiles>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsPercentiles>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsPercentiles>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsPercentiles>>>::~__hash_table((uint64_t)__p);
  [v100 setPercentileQuantityBySource:v97];
  [v100 setDataCountBySource:v96];
  if ((v98 & 0x20) != 0)
  {
    [v100 setMostRecentQuantityBySource:v93];
    [v100 setMostRecentQuantityDateIntervalBySource:v94];
  }

LABEL_134:
  if (v106)
  {
    uint64_t v107 = v106;
    operator delete(v106);
  }

  std::__function::__value_func<HDStatisticsPercentiles const& ()(HDStatisticsPercentiles const&)>::~__value_func[abi:ne180100](v113);

  return v100;
}

void sub_1BD14B22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (__p) {
    operator delete(__p);
  }

  std::__function::__value_func<HDStatisticsPercentiles const& ()(HDStatisticsPercentiles const&)>::~__value_func[abi:ne180100]((void *)(v32 - 160));
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsPercentiles>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 240);
  uint64_t v2 = *(void *)(a1 + 256);
  if (v1 != (*(void *)(a1 + 264) - v2) >> 3)
  {
    double v4 = (void **)(a1 + 256);
    *(void *)(a1 + 264) = v2;
    std::vector<long long>::reserve((void **)(a1 + 256), v1);
    id v5 = *(void **)(a1 + 232);
    if (v5)
    {
      long long v6 = *(char **)(a1 + 264);
      do
      {
        uint64_t v7 = v5[2];
        unint64_t v8 = *(void *)(a1 + 272);
        if ((unint64_t)v6 >= v8)
        {
          id v10 = (char *)*v4;
          uint64_t v11 = (v6 - (unsigned char *)*v4) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            id v10 = *(char **)(a1 + 256);
            long long v6 = *(char **)(a1 + 264);
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v16 = (void *)(v14 + 8 * v11);
          void *v16 = v7;
          id v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            uint64_t v17 = *((void *)v6 - 1);
            v6 -= 8;
            *--uint64_t v16 = v17;
          }
          *(void *)(a1 + 256) = v16;
          *(void *)(a1 + 264) = v9;
          *(void *)(a1 + 272) = v14 + 8 * v15;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)long long v6 = v7;
          id v9 = v6 + 8;
        }
        *(void *)(a1 + 264) = v9;
        id v5 = (void *)*v5;
        long long v6 = v9;
      }
      while (v5);
    }
    id v18 = (id *)(a1 + 88);
    id WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      id v20 = objc_loadWeakRetained(v18);
      [v20 orderSourceIDs:v4];
    }
  }
}

void sub_1BD14B590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsPercentiles>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2) {
    a2 = v4 * floor(a2 / v4);
  }
  double v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    id v100 = (char **)(a1 + 96);
    char v98 = (HDStatisticsPercentiles *)(a1 + 120);
    location = (id *)(a1 + 88);
    long long v6 = (void *)(a1 + 200);
    do
    {
      uint64_t v7 = *(double **)(a1 + 96);
      unint64_t v8 = *(long long **)(a1 + 104);
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v7) >> 4);
      if (v9)
      {
        if (v9 != 1)
        {
          double v30 = a2;
          double v31 = a2;
          double v32 = v5;
          uint64_t v33 = *(void *)(a1 + 96);
          if (v7 != (double *)v8)
          {
            do
            {
              double v34 = *(double *)(v33 + 8);
              double v35 = *(double *)(v33 + 16);
              if (v34 > v32 && v34 < v31) {
                double v31 = *(double *)(v33 + 8);
              }
              if (v35 > v5) {
                double v37 = *(double *)(v33 + 16);
              }
              else {
                double v37 = v30;
              }
              if (v35 < v30)
              {
                double v32 = v5;
                double v30 = v37;
              }
              v33 += 48;
            }
            while ((long long *)v33 != v8);
          }
          if (v30 >= v31) {
            double v38 = v31;
          }
          else {
            double v38 = v30;
          }
          double v39 = *(double *)(a1 + 16);
          if (v39 > 0.0)
          {
            double v40 = v39 * floor(v38 / v39);
            double v41 = v39 * floor((v39 + v5) / v39);
            if (v40 >= v41) {
              double v38 = v40;
            }
            else {
              double v38 = v41;
            }
          }
          *id v100 = 0;
          v100[1] = 0;
          v100[2] = 0;
          if (v7 != (double *)v8)
          {
            if (v9 > 0x555555555555555) {
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v9);
            unint64_t v45 = *(char **)(a1 + 96);
            long long v44 = *(char **)(a1 + 104);
            id v46 = v42;
            if (v44 != v45)
            {
              do
              {
                long long v47 = *((_OWORD *)v44 - 3);
                long long v48 = *((_OWORD *)v44 - 2);
                *(_OWORD *)(v46 - 21) = *(_OWORD *)(v44 - 21);
                *((_OWORD *)v46 - 3) = v47;
                *((_OWORD *)v46 - 2) = v48;
                v46 -= 48;
                v44 -= 48;
              }
              while (v44 != v45);
              long long v44 = *v100;
            }
            *(void *)(a1 + 96) = v46;
            *(void *)(a1 + 104) = v42;
            *(void *)(a1 + 112) = &v42[48 * v43];
            if (v44) {
              operator delete(v44);
            }
          }
          HDStatisticsBucket<HDStatisticsPercentiles>::_updateSourceOrder(a1);
          id WeakRetained = objc_loadWeakRetained(location);

          if (WeakRetained)
          {
            *(void *)&v102.var0 = a1;
            unint64_t v50 = 126 - 2 * __clz(v9);
            if (v7 == (double *)v8) {
              uint64_t v51 = 0;
            }
            else {
              uint64_t v51 = v50;
            }
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsPercentiles>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsPercentiles>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsPercentiles>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsPercentiles>::_SampleRemainder*,false>((unint64_t)v7, v8, (uint64_t)&v102, v51, 1);
          }
          if (*(unsigned char *)(a1 + 25)) {
            id v97 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
          }
          else {
            id v97 = 0;
          }
          if (v7 == (double *)v8)
          {
LABEL_135:
            double v87 = *(void **)(a1 + 192);
            if (v87 != v6)
            {
              do
              {
                long long v88 = (void *)v87[1];
                if (v88)
                {
                  do
                  {
                    uint64_t v89 = v88;
                    long long v88 = (void *)*v88;
                  }
                  while (v88);
                }
                else
                {
                  do
                  {
                    uint64_t v89 = (void *)v87[2];
                    BOOL v90 = *v89 == (void)v87;
                    double v87 = v89;
                  }
                  while (!v90);
                }
                double v87 = v89;
              }
              while (v89 != v6);
            }
            *(double *)(a1 + 56) = v38;

            if (v7) {
              operator delete(v7);
            }
            goto LABEL_149;
          }
          int64_t v99 = 0;
          char v57 = 0;
          uint64_t v58 = v7;
          while (2)
          {
            long long v59 = *((_OWORD *)v58 + 1);
            *(_OWORD *)&v102.var0 = *(_OWORD *)v58;
            *(_OWORD *)&v102.double var2 = v59;
            *(double *)&v102.BOOL var4 = v58[4];
            if (!v102.var4 || v102.var1 > v38)
            {
              unint64_t v60 = *(_OWORD **)(a1 + 104);
              unint64_t v61 = *(void *)(a1 + 112);
              if ((unint64_t)v60 >= v61)
              {
                unint64_t v65 = 0xAAAAAAAAAAAAAAABLL * (((char *)v60 - *v100) >> 4);
                unint64_t v66 = v65 + 1;
                if (v65 + 1 > 0x555555555555555) {
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v61 - (void)*v100) >> 4);
                if (2 * v67 > v66) {
                  unint64_t v66 = 2 * v67;
                }
                if (v67 >= 0x2AAAAAAAAAAAAAALL) {
                  unint64_t v68 = 0x555555555555555;
                }
                else {
                  unint64_t v68 = v66;
                }
                if (v68) {
                  unint64_t v68 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v68);
                }
                else {
                  uint64_t v69 = 0;
                }
                BOOL v73 = (_OWORD *)(v68 + 48 * v65);
                long long v74 = *(_OWORD *)v58;
                long long v75 = *((_OWORD *)v58 + 2);
                v73[1] = *((_OWORD *)v58 + 1);
                v73[2] = v75;
                *BOOL v73 = v74;
                int v77 = *(char **)(a1 + 96);
                long long v76 = *(char **)(a1 + 104);
                long long v78 = v73;
                if (v76 != v77)
                {
                  do
                  {
                    long long v79 = *((_OWORD *)v76 - 3);
                    long long v80 = *((_OWORD *)v76 - 2);
                    *(_OWORD *)((char *)v78 - 21) = *(_OWORD *)(v76 - 21);
                    *(v78 - 3) = v79;
                    *(v78 - 2) = v80;
                    v78 -= 3;
                    v76 -= 48;
                  }
                  while (v76 != v77);
                  long long v76 = *v100;
                }
                uint64_t v64 = v73 + 3;
                *(void *)(a1 + 96) = v78;
                *(void *)(a1 + 104) = v73 + 3;
                *(void *)(a1 + 112) = v68 + 48 * v69;
                if (v76) {
                  operator delete(v76);
                }
              }
              else
              {
                long long v62 = *(_OWORD *)v58;
                long long v63 = *((_OWORD *)v58 + 2);
                v60[1] = *((_OWORD *)v58 + 1);
                v60[2] = v63;
                *unint64_t v60 = v62;
                uint64_t v64 = v60 + 3;
              }
              *(void *)(a1 + 104) = v64;
LABEL_134:
              v58 += 6;
              if (v58 == (double *)v8) {
                goto LABEL_135;
              }
              continue;
            }
            break;
          }
          double var2 = v102.var2;
          if (v102.var2 > v38) {
            double var2 = v38;
          }
          v102.double var2 = var2;
          for (uint64_t i = *(double **)(a1 + 64); i != *(double **)(a1 + 72) && v102.var1 >= *i; i += 2)
          {
            if (v102.var1 < i[1]) {
              goto LABEL_134;
            }
          }
          if (v57)
          {
            unint64_t var3 = v102.var3;
            if (v99 == v102.var3 || *(unsigned char *)(a1 + 24)) {
              HDStatisticsPercentiles::addSample(v98, &v102);
            }
          }
          else
          {
            HDStatisticsPercentiles::addSample(v98, &v102);
            unint64_t var3 = v102.var3;
            int64_t v99 = v102.var3;
          }
          if (!*(unsigned char *)(a1 + 25)) {
            goto LABEL_133;
          }
          unint64_t v81 = HDStatisticsBucket<HDStatisticsPercentiles>::_bundleIdentifierForSourceID(a1, var3);
          if (!v81) {
            goto LABEL_132;
          }
          uint64_t v82 = [v97 objectForKeyedSubscript:v81];
          uint64_t v83 = v82;
          if (v82)
          {
            if ([v82 longLongValue] != var3 && !*(unsigned char *)(a1 + 24))
            {
LABEL_131:

LABEL_132:
LABEL_133:
              char v57 = 1;
              goto LABEL_134;
            }
          }
          else
          {
            uint64_t v84 = [NSNumber numberWithLongLong:var3];
            [v97 setObject:v84 forKeyedSubscript:v81];
          }
          unint64_t v85 = HDStatisticsBucket<HDStatisticsPercentiles>::_canonicalSourceIDForSourceID(a1, var3);
          double v86 = HDStatisticsBucket<HDStatisticsPercentiles>::_statisticsForSource(a1, v85);
          HDStatisticsPercentiles::addSample((HDStatisticsPercentiles *)v86, &v102);
          goto LABEL_131;
        }
        int v10 = *((unsigned __int8 *)v7 + 42);
        int v11 = *((unsigned __int8 *)v7 + 41);
        int v12 = *((unsigned __int8 *)v7 + 40);
        double v13 = v7[1];
        double v14 = v7[2];
        unint64_t v15 = *((void *)v7 + 3);
        char v16 = *((unsigned char *)v7 + 33);
        if (v14 <= a2) {
          double v17 = v7[2];
        }
        else {
          double v17 = a2;
        }
        if (v13 < a2) {
          int v18 = *((unsigned __int8 *)v7 + 32);
        }
        else {
          int v18 = 0;
        }
        if (v13 < a2) {
          char v19 = 0;
        }
        else {
          char v19 = *((unsigned char *)v7 + 33);
        }
        if (v13 < a2)
        {
          uint64_t v20 = 0;
        }
        else
        {
          double v17 = v7[2];
          uint64_t v20 = *((void *)v7 + 3);
        }
        if (v13 < a2) {
          double v21 = 0.0;
        }
        else {
          double v21 = v7[2];
        }
        if (v13 < a2) {
          double v22 = 0.0;
        }
        else {
          double v22 = *v7;
        }
        if (v13 < a2) {
          double v23 = 0.0;
        }
        else {
          double v23 = v7[1];
        }
        if (v13 < a2) {
          int v24 = 0;
        }
        else {
          int v24 = *((unsigned __int8 *)v7 + 32);
        }
        if (*((unsigned char *)v7 + 32))
        {
          double v14 = v17;
        }
        else
        {
          int v18 = 0;
          char v19 = 0;
          uint64_t v20 = 0;
        }
        if (*((unsigned char *)v7 + 32)) {
          double v25 = v21;
        }
        else {
          double v25 = 0.0;
        }
        if (*((unsigned char *)v7 + 32)) {
          double v26 = v22;
        }
        else {
          double v26 = 0.0;
        }
        if (*((unsigned char *)v7 + 32)) {
          double v27 = v23;
        }
        else {
          double v27 = 0.0;
        }
        if (*((unsigned char *)v7 + 32)) {
          int v28 = v24;
        }
        else {
          int v28 = 0;
        }
        v102.var0 = *v7;
        v102.double var1 = v13;
        v102.double var2 = v14;
        v102.unint64_t var3 = v15;
        v102.BOOL var4 = v18;
        v102.BOOL var5 = v16;
        *(_DWORD *)(&v102.var5 + 1) = *(_DWORD *)((char *)v7 + 34);
        *(_WORD *)(&v102.var5 + 5) = *((_WORD *)v7 + 19);
        *(double *)&long long v103 = v26;
        *((double *)&v103 + 1) = v27;
        *(double *)&long long v104 = v25;
        *((void *)&v104 + 1) = v20;
        LOBYTE(v105) = v28;
        HIBYTE(v105) = v19;
        for (uint64_t j = *(double **)(a1 + 64); j != *(double **)(a1 + 72) && v13 >= *j; j += 2)
        {
          if (v13 < j[1])
          {
            BOOL v52 = v12 != 0;
            BOOL v53 = v11 != 0;
            BOOL v54 = v10 != 0;
            goto LABEL_145;
          }
        }
        BOOL v52 = v12 != 0;
        BOOL v53 = v11 != 0;
        BOOL v54 = v10 != 0;
        if (v18)
        {
          HDStatisticsPercentiles::addSample(v98, &v102);
          if (*(unsigned char *)(a1 + 25))
          {
            unint64_t v55 = HDStatisticsBucket<HDStatisticsPercentiles>::_canonicalSourceIDForSourceID(a1, v15);
            uint64_t v56 = HDStatisticsBucket<HDStatisticsPercentiles>::_statisticsForSource(a1, v55);
            HDStatisticsPercentiles::addSample((HDStatisticsPercentiles *)v56, &v102);
          }
          BOOL v52 = 1;
          BOOL v53 = 1;
          BOOL v54 = 1;
        }
LABEL_145:
        if (v28)
        {
          LOWORD(v101) = v105;
          long long v91 = v104;
          double v92 = *v100;
          *(_OWORD *)double v92 = v103;
          *((_OWORD *)v92 + 1) = v91;
          *((void *)v92 + 4) = v101;
          v92[40] = v52;
          v92[41] = v53;
          v92[42] = v54;
        }
        else
        {
          *(void *)(a1 + 104) = *(void *)(a1 + 96);
        }
      }
      *(double *)(a1 + 56) = a2;
LABEL_149:
      double v93 = *(double *)(a1 + 56);
      if (v93 == v5)
      {
        id v94 = [MEMORY[0x1E4F28B00] currentHandler];
        unint64_t v95 = [NSString stringWithUTF8String:"void HDStatisticsBucket<HDStatisticsPercentiles>::_mergeThroughTime(double) [Statistics = HDStatisticsPercentiles]"];
        [v94 handleFailureInFunction:v95 file:@"HDStatisticsBucket.hpp" lineNumber:234 description:@"Failed to make forward progress during statistics merge."];

        double v93 = *(double *)(a1 + 56);
      }
      double v5 = v93;
    }
    while (v93 < a2);
  }
}

void sub_1BD14BD30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **HDStatisticsBucket<HDStatisticsPercentiles>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = a2;
  double v4 = (uint64_t **)(a1 + 200);
  double v5 = *(void **)(a1 + 200);
  if (!v5) {
    goto LABEL_11;
  }
  long long v6 = (uint64_t **)(a1 + 200);
  do
  {
    uint64_t v7 = v5[4];
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      unint64_t v9 = v5;
    }
    else {
      unint64_t v9 = v5 + 1;
    }
    if (!v8) {
      long long v6 = (uint64_t **)v5;
    }
    double v5 = (void *)*v9;
  }
  while (*v9);
  if (v6 == v4 || (uint64_t)v6[4] > a2)
  {
LABEL_11:
    int v10 = v4 - 1;
    int v11 = std::__tree<std::__value_type<long long,HDStatisticsDiscrete>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsDiscrete>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsDiscrete>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v4 - 1, a2, &v13);
    HDStatisticsPercentiles::configure((HDStatisticsPercentiles *)(v11 + 5), *(HDStatisticsPercentileConfiguration **)(a1 + 32));
    long long v6 = std::__tree<std::__value_type<long long,HDStatisticsDiscrete>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsDiscrete>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsDiscrete>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v10, a2, &v13);
  }
  return v6 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsPercentiles>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    double v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((void *)(a1 + 280), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsPercentiles>::_bundleIdentifierForSourceID(a1, a2);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      id v10 = v6;
      uint64_t v7 = (void *)(a1 + 320);
      BOOL v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        int v11 = &v10;
        *((void *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        id v6 = v10;
      }
    }
  }
  return a2;
}

void sub_1BD14BF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsPercentiles>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  double v4 = (id *)(a1 + 88);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    id v6 = (void *)(a1 + 360);
    uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
    if (v7)
    {
      id v8 = (id)v7[3];
    }
    else
    {
      id v9 = objc_loadWeakRetained(v4);
      id v8 = [v9 bundleIdentifierForSourceID:a2];

      if (v8)
      {
        id v10 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
        objc_storeStrong(v10 + 3, v8);
      }
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1BD14BFF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsPercentiles>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsPercentiles>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsPercentiles>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsPercentiles>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v12 = a2 - 3;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 4);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v103 = *((void *)a2 - 3);
                uint64_t v104 = *(void *)(v13 + 24);
                if (v103 == v104) {
                  return;
                }
                __int16 v105 = *(char **)(*(void *)a3 + 256);
                long long v106 = *(char **)(*(void *)a3 + 264);
                uint64_t v107 = v105;
                uint64_t v108 = v105;
                if (v105 == v106) {
                  goto LABEL_171;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>((long long *)v13, (long long *)(v13 + 48), a2 - 3, a3);
                return;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, (uint64_t)(a2 - 3), a3);
                return;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, v13 + 144, (uint64_t)(a2 - 3), a3);
                return;
              default:
                JUMPOUT(0);
            }
            do
            {
              if (*(void *)v108 == v103) {
                goto LABEL_168;
              }
              v108 += 8;
            }
            while (v108 != v106);
            uint64_t v108 = *(char **)(*(void *)a3 + 264);
LABEL_168:
            while (*(void *)v107 != v104)
            {
              v107 += 8;
              if (v107 == v106)
              {
                uint64_t v107 = *(char **)(*(void *)a3 + 264);
                break;
              }
            }
LABEL_171:
            if (v108 - v105 < v107 - v105)
            {
              *(_OWORD *)v226 = *(_OWORD *)(v13 + 16);
              *(_OWORD *)&v226[16] = *(_OWORD *)(v13 + 32);
              long long v218 = *(_OWORD *)v13;
              long long v109 = *v12;
              long long v110 = *(a2 - 2);
              *(_OWORD *)(v13 + 27) = *(long long *)((char *)a2 - 21);
              *(_OWORD *)unint64_t v13 = v109;
              *(_OWORD *)(v13 + 16) = v110;
              *(long long *)((char *)a2 - 21) = *(_OWORD *)&v226[11];
              long long *v12 = v218;
              *(a2 - 2) = *(_OWORD *)v226;
            }
            return;
          }
          if (v14 <= 1151)
          {
            long long v111 = (long long *)(v13 + 48);
            BOOL v113 = (long long *)v13 == a2 || v111 == a2;
            if (a5)
            {
              if (!v113)
              {
                unint64_t v114 = v13;
                do
                {
                  unint64_t v115 = v114;
                  unint64_t v114 = (unint64_t)v111;
                  uint64_t v116 = *(void *)(v115 + 72);
                  uint64_t v117 = *(void *)(v115 + 24);
                  if (v116 != v117)
                  {
                    long long v118 = *(char **)(*(void *)a3 + 256);
                    long long v119 = *(char **)(*(void *)a3 + 264);
                    long long v120 = v118;
                    long long v121 = v118;
                    if (v118 != v119)
                    {
                      do
                      {
                        if (*(void *)v121 == v116) {
                          goto LABEL_196;
                        }
                        v121 += 8;
                      }
                      while (v121 != v119);
                      long long v121 = *(char **)(*(void *)a3 + 264);
LABEL_196:
                      while (*(void *)v120 != v117)
                      {
                        v120 += 8;
                        if (v120 == v119)
                        {
                          long long v120 = *(char **)(*(void *)a3 + 264);
                          break;
                        }
                      }
                    }
                    if (v121 - v118 < v120 - v118)
                    {
                      uint64_t v227 = *(void *)(v114 + 16);
                      long long v219 = *(_OWORD *)v114;
                      long long v236 = *(_OWORD *)(v115 + 80);
                      unint64_t v122 = v114;
                      while (1)
                      {
                        long long v123 = *(_OWORD *)(v115 + 16);
                        *(_OWORD *)unint64_t v122 = *(_OWORD *)v115;
                        *(_OWORD *)(v122 + 16) = v123;
                        *(_OWORD *)(v122 + 27) = *(_OWORD *)(v115 + 27);
                        if (v115 == v13) {
                          break;
                        }
                        unint64_t v122 = v115;
                        uint64_t v124 = *(void *)(v115 - 24);
                        if (v116 != v124)
                        {
                          uint64_t v125 = *(char **)(*(void *)a3 + 256);
                          uint64_t v126 = *(char **)(*(void *)a3 + 264);
                          uint64_t v127 = v125;
                          uint64_t v128 = v125;
                          if (v125 != v126)
                          {
                            do
                            {
                              if (*(void *)v128 == v116) {
                                goto LABEL_208;
                              }
                              v128 += 8;
                            }
                            while (v128 != v126);
                            uint64_t v128 = *(char **)(*(void *)a3 + 264);
LABEL_208:
                            while (*(void *)v127 != v124)
                            {
                              v127 += 8;
                              if (v127 == v126)
                              {
                                uint64_t v127 = *(char **)(*(void *)a3 + 264);
                                break;
                              }
                            }
                          }
                          unint64_t v115 = v122 - 48;
                          if (v128 - v125 < v127 - v125) {
                            continue;
                          }
                        }
                        goto LABEL_212;
                      }
                      unint64_t v122 = v13;
LABEL_212:
                      *(_OWORD *)unint64_t v122 = v219;
                      *(void *)(v122 + 16) = v227;
                      *(void *)(v122 + 24) = v116;
                      *(void *)(v122 + 32) = v236;
                      *(_DWORD *)(v122 + 39) = *(_DWORD *)((char *)&v236 + 7);
                    }
                  }
                  long long v111 = (long long *)(v114 + 48);
                }
                while ((long long *)(v114 + 48) != a2);
              }
            }
            else if (!v113)
            {
              do
              {
                unint64_t v201 = a1;
                a1 = (unint64_t)v111;
                uint64_t v202 = *(void *)(v201 + 72);
                uint64_t v203 = *(void *)(v201 + 24);
                if (v202 != v203)
                {
                  v204 = *(char **)(*(void *)a3 + 256);
                  v205 = *(char **)(*(void *)a3 + 264);
                  v206 = v204;
                  v207 = v204;
                  if (v204 != v205)
                  {
                    do
                    {
                      if (*(void *)v207 == v202) {
                        goto LABEL_312;
                      }
                      v207 += 8;
                    }
                    while (v207 != v205);
                    v207 = *(char **)(*(void *)a3 + 264);
LABEL_312:
                    while (*(void *)v206 != v203)
                    {
                      v206 += 8;
                      if (v206 == v205)
                      {
                        v206 = *(char **)(*(void *)a3 + 264);
                        break;
                      }
                    }
                  }
                  if (v207 - v204 < v206 - v204)
                  {
                    uint64_t v230 = *(void *)(a1 + 16);
                    long long v222 = *(_OWORD *)a1;
                    long long v239 = *(_OWORD *)(v201 + 80);
                    unint64_t v208 = a1;
                    do
                    {
                      v209 = (_OWORD *)v208;
                      unint64_t v208 = v201;
                      long long v210 = *(_OWORD *)(v201 + 16);
                      _OWORD *v209 = *(_OWORD *)v201;
                      v209[1] = v210;
                      *(_OWORD *)((char *)v209 + 27) = *(_OWORD *)(v201 + 27);
                      uint64_t v211 = *(void *)(v201 - 24);
                      if (v202 == v211) {
                        break;
                      }
                      v212 = *(char **)(*(void *)a3 + 256);
                      v213 = *(char **)(*(void *)a3 + 264);
                      v214 = v212;
                      v215 = v212;
                      if (v212 != v213)
                      {
                        do
                        {
                          if (*(void *)v215 == v202) {
                            goto LABEL_322;
                          }
                          v215 += 8;
                        }
                        while (v215 != v213);
                        v215 = *(char **)(*(void *)a3 + 264);
LABEL_322:
                        while (*(void *)v214 != v211)
                        {
                          v214 += 8;
                          if (v214 == v213)
                          {
                            v214 = *(char **)(*(void *)a3 + 264);
                            break;
                          }
                        }
                      }
                      unint64_t v201 = v208 - 48;
                    }
                    while (v215 - v212 < v214 - v212);
                    *(_OWORD *)unint64_t v208 = v222;
                    *(void *)(v208 + 16) = v230;
                    *(void *)(v208 + 24) = v202;
                    *(void *)(v208 + 32) = v239;
                    *(_DWORD *)(v208 + 39) = *(_DWORD *)((char *)&v239 + 7);
                  }
                }
                long long v111 = (long long *)(a1 + 48);
              }
              while ((long long *)(a1 + 48) != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((long long *)v13 != a2)
            {
              int64_t v129 = (v15 - 2) >> 1;
              int64_t v130 = v129;
              do
              {
                int64_t v131 = v130;
                if (v129 >= v130)
                {
                  uint64_t v132 = (2 * v130) | 1;
                  unint64_t v133 = v13 + 48 * v132;
                  if (2 * v131 + 2 < (uint64_t)v15)
                  {
                    uint64_t v134 = *(void *)(v133 + 24);
                    uint64_t v135 = *(void *)(v133 + 72);
                    if (v134 != v135)
                    {
                      v137 = *(char **)(*(void *)a3 + 256);
                      v136 = *(char **)(*(void *)a3 + 264);
                      v138 = v137;
                      v139 = v137;
                      if (v137 != v136)
                      {
                        do
                        {
                          if (*(void *)v139 == v134) {
                            goto LABEL_224;
                          }
                          v139 += 8;
                        }
                        while (v139 != v136);
                        v139 = *(char **)(*(void *)a3 + 264);
LABEL_224:
                        while (*(void *)v138 != v135)
                        {
                          v138 += 8;
                          if (v138 == v136)
                          {
                            v138 = *(char **)(*(void *)a3 + 264);
                            break;
                          }
                        }
                      }
                      v133 += 48 * (v139 - v137 < v138 - v137);
                      if (v139 - v137 < v138 - v137) {
                        uint64_t v132 = 2 * v131 + 2;
                      }
                    }
                  }
                  unint64_t v140 = v13 + 48 * v131;
                  uint64_t v141 = *(void *)(v133 + 24);
                  uint64_t v142 = *(void *)(v140 + 24);
                  if (v141 == v142) {
                    goto LABEL_238;
                  }
                  v144 = *(char **)(*(void *)a3 + 256);
                  v143 = *(char **)(*(void *)a3 + 264);
                  v145 = v144;
                  v146 = v144;
                  if (v144 != v143)
                  {
                    do
                    {
                      if (*(void *)v146 == v141) {
                        goto LABEL_234;
                      }
                      v146 += 8;
                    }
                    while (v146 != v143);
                    v146 = *(char **)(*(void *)a3 + 264);
LABEL_234:
                    while (*(void *)v145 != v142)
                    {
                      v145 += 8;
                      if (v145 == v143)
                      {
                        v145 = *(char **)(*(void *)a3 + 264);
                        break;
                      }
                    }
                  }
                  if (v146 - v144 >= v145 - v144)
                  {
LABEL_238:
                    uint64_t v228 = *(void *)(v140 + 16);
                    long long v220 = *(_OWORD *)v140;
                    long long v237 = *(_OWORD *)(v140 + 32);
                    long long v147 = *(_OWORD *)v133;
                    long long v148 = *(_OWORD *)(v133 + 16);
                    *(_OWORD *)(v140 + 27) = *(_OWORD *)(v133 + 27);
                    *(_OWORD *)unint64_t v140 = v147;
                    *(_OWORD *)(v140 + 16) = v148;
                    if (v129 >= v132)
                    {
                      while (1)
                      {
                        uint64_t v150 = 2 * v132;
                        uint64_t v132 = (2 * v132) | 1;
                        unint64_t v149 = v13 + 48 * v132;
                        uint64_t v151 = v150 + 2;
                        if (v151 < (uint64_t)v15)
                        {
                          uint64_t v152 = *(void *)(v149 + 24);
                          uint64_t v153 = *(void *)(v149 + 72);
                          if (v152 != v153)
                          {
                            v154 = *(char **)(*(void *)a3 + 256);
                            v155 = *(char **)(*(void *)a3 + 264);
                            v156 = v154;
                            v157 = v154;
                            if (v154 != v155)
                            {
                              do
                              {
                                if (*(void *)v157 == v152) {
                                  goto LABEL_246;
                                }
                                v157 += 8;
                              }
                              while (v157 != v155);
                              v157 = *(char **)(*(void *)a3 + 264);
LABEL_246:
                              while (*(void *)v156 != v153)
                              {
                                v156 += 8;
                                if (v156 == v155)
                                {
                                  v156 = *(char **)(*(void *)a3 + 264);
                                  break;
                                }
                              }
                            }
                            v149 += 48 * (v157 - v154 < v156 - v154);
                            if (v157 - v154 < v156 - v154) {
                              uint64_t v132 = v151;
                            }
                          }
                        }
                        uint64_t v158 = *(void *)(v149 + 24);
                        if (v158 != v142)
                        {
                          v160 = *(char **)(*(void *)a3 + 256);
                          v159 = *(char **)(*(void *)a3 + 264);
                          v161 = v160;
                          v162 = v160;
                          if (v160 != v159)
                          {
                            do
                            {
                              if (*(void *)v162 == v158) {
                                goto LABEL_256;
                              }
                              v162 += 8;
                            }
                            while (v162 != v159);
                            v162 = *(char **)(*(void *)a3 + 264);
LABEL_256:
                            while (*(void *)v161 != v142)
                            {
                              v161 += 8;
                              if (v161 == v159)
                              {
                                v161 = *(char **)(*(void *)a3 + 264);
                                break;
                              }
                            }
                          }
                          if (v162 - v160 < v161 - v160) {
                            break;
                          }
                        }
                        long long v163 = *(_OWORD *)v149;
                        long long v164 = *(_OWORD *)(v149 + 16);
                        *(_OWORD *)(v133 + 27) = *(_OWORD *)(v149 + 27);
                        *(_OWORD *)unint64_t v133 = v163;
                        *(_OWORD *)(v133 + 16) = v164;
                        unint64_t v133 = v149;
                        if (v129 < v132) {
                          goto LABEL_261;
                        }
                      }
                    }
                    unint64_t v149 = v133;
LABEL_261:
                    *(_OWORD *)unint64_t v149 = v220;
                    *(void *)(v149 + 16) = v228;
                    *(void *)(v149 + 24) = v142;
                    *(void *)(v149 + 32) = v237;
                    *(_DWORD *)(v149 + 39) = *(_DWORD *)((char *)&v237 + 7);
                  }
                }
                int64_t v130 = v131 - 1;
              }
              while (v131);
              int64_t v165 = v14 / 0x30uLL;
              do
              {
                uint64_t v166 = 0;
                *(_OWORD *)v229 = *(_OWORD *)(v13 + 16);
                *(_OWORD *)&v229[16] = *(_OWORD *)(v13 + 32);
                long long v221 = *(_OWORD *)v13;
                uint64_t v167 = v165 - 2;
                if (v165 < 2) {
                  uint64_t v167 = v165 - 1;
                }
                uint64_t v168 = v167 >> 1;
                unint64_t v169 = v13;
                do
                {
                  v170 = (_OWORD *)v169;
                  v169 += 48 * v166 + 48;
                  uint64_t v171 = 2 * v166;
                  uint64_t v166 = (2 * v166) | 1;
                  uint64_t v172 = v171 + 2;
                  if (v171 + 2 < v165)
                  {
                    uint64_t v173 = *(void *)(v169 + 24);
                    uint64_t v174 = *(void *)(v169 + 72);
                    if (v173 != v174)
                    {
                      v176 = *(char **)(*(void *)a3 + 256);
                      v175 = *(char **)(*(void *)a3 + 264);
                      v177 = v176;
                      v178 = v176;
                      if (v176 != v175)
                      {
                        do
                        {
                          if (*(void *)v178 == v173) {
                            goto LABEL_273;
                          }
                          v178 += 8;
                        }
                        while (v178 != v175);
                        v178 = *(char **)(*(void *)a3 + 264);
LABEL_273:
                        while (*(void *)v177 != v174)
                        {
                          v177 += 8;
                          if (v177 == v175)
                          {
                            v177 = *(char **)(*(void *)a3 + 264);
                            break;
                          }
                        }
                      }
                      v169 += 48 * (v178 - v176 < v177 - v176);
                      if (v178 - v176 < v177 - v176) {
                        uint64_t v166 = v172;
                      }
                    }
                  }
                  long long v179 = *(_OWORD *)v169;
                  long long v180 = *(_OWORD *)(v169 + 16);
                  *(_OWORD *)((char *)v170 + 27) = *(_OWORD *)(v169 + 27);
                  _OWORD *v170 = v179;
                  v170[1] = v180;
                }
                while (v166 <= v168);
                a2 -= 3;
                if ((long long *)v169 == a2)
                {
                  *(_OWORD *)(v169 + 27) = *(_OWORD *)&v229[11];
                  *(_OWORD *)unint64_t v169 = v221;
                  *(_OWORD *)(v169 + 16) = *(_OWORD *)v229;
                }
                else
                {
                  long long v181 = *a2;
                  long long v182 = a2[1];
                  *(_OWORD *)(v169 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v169 = v181;
                  *(_OWORD *)(v169 + 16) = v182;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v229[11];
                  *a2 = v221;
                  a2[1] = *(_OWORD *)v229;
                  uint64_t v183 = v169 - v13 + 48;
                  if (v183 >= 49)
                  {
                    unint64_t v184 = (v183 / 0x30uLL - 2) >> 1;
                    unint64_t v185 = v13 + 48 * v184;
                    uint64_t v186 = *(void *)(v185 + 24);
                    uint64_t v187 = *(void *)(v169 + 24);
                    if (v186 != v187)
                    {
                      v189 = *(char **)(*(void *)a3 + 256);
                      v188 = *(char **)(*(void *)a3 + 264);
                      v190 = v189;
                      v191 = v189;
                      if (v189 != v188)
                      {
                        do
                        {
                          if (*(void *)v191 == v186) {
                            goto LABEL_286;
                          }
                          v191 += 8;
                        }
                        while (v191 != v188);
                        v191 = *(char **)(*(void *)a3 + 264);
LABEL_286:
                        while (*(void *)v190 != v187)
                        {
                          v190 += 8;
                          if (v190 == v188)
                          {
                            v190 = *(char **)(*(void *)a3 + 264);
                            break;
                          }
                        }
                      }
                      if (v191 - v189 < v190 - v189)
                      {
                        uint64_t v242 = *(void *)(v169 + 16);
                        long long v238 = *(_OWORD *)v169;
                        long long v233 = *(_OWORD *)(v169 + 32);
                        do
                        {
                          v192 = (_OWORD *)v169;
                          unint64_t v169 = v185;
                          long long v193 = *(_OWORD *)v185;
                          long long v194 = *(_OWORD *)(v185 + 16);
                          *(_OWORD *)((char *)v192 + 27) = *(_OWORD *)(v185 + 27);
                          _OWORD *v192 = v193;
                          v192[1] = v194;
                          if (!v184) {
                            break;
                          }
                          unint64_t v184 = (v184 - 1) >> 1;
                          unint64_t v185 = v13 + 48 * v184;
                          uint64_t v195 = *(void *)(v185 + 24);
                          if (v195 == v187) {
                            break;
                          }
                          v197 = *(char **)(*(void *)a3 + 256);
                          v196 = *(char **)(*(void *)a3 + 264);
                          v198 = v197;
                          v199 = v197;
                          if (v197 != v196)
                          {
                            do
                            {
                              if (*(void *)v199 == v195) {
                                goto LABEL_297;
                              }
                              v199 += 8;
                            }
                            while (v199 != v196);
                            v199 = *(char **)(*(void *)a3 + 264);
LABEL_297:
                            while (*(void *)v198 != v187)
                            {
                              v198 += 8;
                              if (v198 == v196)
                              {
                                v198 = *(char **)(*(void *)a3 + 264);
                                break;
                              }
                            }
                          }
                        }
                        while (v199 - v197 < v198 - v197);
                        *(_OWORD *)unint64_t v169 = v238;
                        *(void *)(v169 + 16) = v242;
                        *(void *)(v169 + 24) = v187;
                        *(void *)(v169 + 32) = v233;
                        *(_DWORD *)(v169 + 39) = *(_DWORD *)((char *)&v233 + 7);
                      }
                    }
                  }
                }
              }
              while (v165-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          double v17 = (long long *)(v13 + 48 * (v15 >> 1));
          if ((unint64_t)v14 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v15 >> 1)), a2 - 3, a3);
            uint64_t v18 = 3 * v16;
            char v19 = (long long *)(a1 + 48 * v16 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>((long long *)(a1 + 48), v19, a2 - 6, a3);
            uint64_t v20 = (long long *)(a1 + 48 + 16 * v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>((long long *)(a1 + 96), v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>(v19, v17, v20, a3);
            *(_OWORD *)v223 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v223[16] = *(_OWORD *)(a1 + 32);
            long long v216 = *(_OWORD *)a1;
            long long v21 = *(long long *)((char *)v17 + 27);
            long long v22 = v17[1];
            *(_OWORD *)a1 = *v17;
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(a1 + 27) = v21;
            *(long long *)((char *)v17 + 27) = *(_OWORD *)&v223[11];
            *double v17 = v216;
            v17[1] = *(_OWORD *)v223;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>((long long *)(a1 + 48 * (v15 >> 1)), (long long *)a1, a2 - 3, a3);
          }
          --a4;
          if (a5)
          {
            uint64_t v23 = *(void *)(a1 + 24);
            uint64_t v24 = *(void *)a3;
            break;
          }
          uint64_t v25 = *(void *)(a1 - 24);
          uint64_t v23 = *(void *)(a1 + 24);
          if (v25 != v23)
          {
            uint64_t v24 = *(void *)a3;
            double v26 = *(char **)(*(void *)a3 + 256);
            double v27 = *(char **)(*(void *)a3 + 264);
            int v28 = v26;
            double v29 = v26;
            if (v26 != v27)
            {
              do
              {
                if (*(void *)v29 == v25) {
                  goto LABEL_16;
                }
                v29 += 8;
              }
              while (v29 != v27);
              double v29 = *(char **)(*(void *)a3 + 264);
LABEL_16:
              while (*(void *)v28 != v23)
              {
                v28 += 8;
                if (v28 == v27)
                {
                  int v28 = *(char **)(*(void *)a3 + 264);
                  break;
                }
              }
            }
            if (v29 - v26 < v28 - v26) {
              break;
            }
          }
          uint64_t v241 = *(void *)(a1 + 16);
          long long v232 = *(_OWORD *)(a1 + 32);
          long long v235 = *(_OWORD *)a1;
          uint64_t v67 = *((void *)a2 - 3);
          if (v23 == v67) {
            goto LABEL_107;
          }
          unint64_t v68 = *(char **)(*(void *)a3 + 256);
          uint64_t v69 = *(char **)(*(void *)a3 + 264);
          if (v68 == v69)
          {
            long long v71 = *(char **)(*(void *)a3 + 256);
            long long v70 = v71;
          }
          else
          {
            long long v70 = *(char **)(*(void *)a3 + 256);
            while (*(void *)v70 != v23)
            {
              v70 += 8;
              if (v70 == v69)
              {
                long long v70 = *(char **)(*(void *)a3 + 264);
                break;
              }
            }
            long long v71 = *(char **)(*(void *)a3 + 256);
            while (*(void *)v71 != v67)
            {
              v71 += 8;
              if (v71 == v69)
              {
                long long v71 = *(char **)(*(void *)a3 + 264);
                break;
              }
            }
          }
          if (v70 - v68 >= v71 - v68)
          {
LABEL_107:
            unint64_t v13 = a1 + 48;
            if (a1 + 48 < (unint64_t)a2)
            {
              uint64_t v75 = *(void *)a3;
              unint64_t v76 = a1;
              do
              {
                uint64_t v77 = *(void *)(v76 + 72);
                unint64_t v76 = v13;
                if (v23 != v77)
                {
                  long long v78 = *(char **)(v75 + 256);
                  long long v79 = *(char **)(v75 + 264);
                  long long v80 = v78;
                  unint64_t v81 = v78;
                  if (v78 != v79)
                  {
                    do
                    {
                      if (*(void *)v81 == v23) {
                        goto LABEL_114;
                      }
                      v81 += 8;
                    }
                    while (v81 != v79);
                    unint64_t v81 = *(char **)(v75 + 264);
LABEL_114:
                    while (*(void *)v80 != v77)
                    {
                      v80 += 8;
                      if (v80 == v79)
                      {
                        long long v80 = *(char **)(v75 + 264);
                        break;
                      }
                    }
                  }
                  if (v81 - v78 < v80 - v78) {
                    break;
                  }
                }
                v13 += 48;
              }
              while (v76 + 48 < (unint64_t)a2);
            }
          }
          else
          {
            unint64_t v13 = a1;
            do
            {
              do
              {
                uint64_t v72 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v72);
              if (v68 == v69)
              {
                long long v74 = *(char **)(*(void *)a3 + 256);
                BOOL v73 = v74;
              }
              else
              {
                BOOL v73 = *(char **)(*(void *)a3 + 256);
                while (*(void *)v73 != v23)
                {
                  v73 += 8;
                  if (v73 == v69)
                  {
                    BOOL v73 = *(char **)(*(void *)a3 + 264);
                    break;
                  }
                }
                long long v74 = *(char **)(*(void *)a3 + 256);
                while (*(void *)v74 != v72)
                {
                  v74 += 8;
                  if (v74 == v69)
                  {
                    long long v74 = *(char **)(*(void *)a3 + 264);
                    break;
                  }
                }
              }
            }
            while (v73 - v68 >= v74 - v68);
          }
          uint64_t v82 = a2;
          if (v13 < (unint64_t)a2)
          {
            uint64_t v83 = *(void *)a3;
            uint64_t v82 = a2;
            do
            {
              uint64_t v84 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v84) {
                break;
              }
              unint64_t v85 = *(char **)(v83 + 256);
              double v86 = *(char **)(v83 + 264);
              double v87 = v85;
              long long v88 = v85;
              if (v85 != v86)
              {
                do
                {
                  if (*(void *)v88 == v23) {
                    goto LABEL_126;
                  }
                  v88 += 8;
                }
                while (v88 != v86);
                long long v88 = *(char **)(v83 + 264);
LABEL_126:
                while (*(void *)v87 != v84)
                {
                  v87 += 8;
                  if (v87 == v86)
                  {
                    double v87 = *(char **)(v83 + 264);
                    break;
                  }
                }
              }
            }
            while (v88 - v85 < v87 - v85);
          }
          while (v13 < (unint64_t)v82)
          {
            *(_OWORD *)v225 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v225[16] = *(_OWORD *)(v13 + 32);
            long long v217 = *(_OWORD *)v13;
            long long v89 = *v82;
            long long v90 = v82[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v82 + 27);
            *(_OWORD *)unint64_t v13 = v89;
            *(_OWORD *)(v13 + 16) = v90;
            *(long long *)((char *)v82 + 27) = *(_OWORD *)&v225[11];
            *uint64_t v82 = v217;
            v82[1] = *(_OWORD *)v225;
            uint64_t v91 = *(void *)a3;
            do
            {
              do
              {
                uint64_t v92 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v92);
              double v93 = *(char **)(v91 + 256);
              id v94 = *(char **)(v91 + 264);
              if (v93 == v94)
              {
                id v96 = *(char **)(v91 + 256);
                unint64_t v95 = v96;
              }
              else
              {
                unint64_t v95 = *(char **)(v91 + 256);
                while (*(void *)v95 != v23)
                {
                  v95 += 8;
                  if (v95 == v94)
                  {
                    unint64_t v95 = *(char **)(v91 + 264);
                    break;
                  }
                }
                id v96 = *(char **)(v91 + 256);
                while (*(void *)v96 != v92)
                {
                  v96 += 8;
                  if (v96 == v94)
                  {
                    id v96 = *(char **)(v91 + 264);
                    break;
                  }
                }
              }
            }
            while (v95 - v93 >= v96 - v93);
            do
            {
              uint64_t v97 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v97) {
                break;
              }
              if (v93 == v94)
              {
                int64_t v99 = v93;
                char v98 = v93;
              }
              else
              {
                char v98 = v93;
                while (*(void *)v98 != v23)
                {
                  v98 += 8;
                  if (v98 == v94)
                  {
                    char v98 = v94;
                    break;
                  }
                }
                int64_t v99 = v93;
                while (*(void *)v99 != v97)
                {
                  v99 += 8;
                  if (v99 == v94)
                  {
                    int64_t v99 = v94;
                    break;
                  }
                }
              }
            }
            while (v98 - v93 < v99 - v93);
          }
          id v100 = (long long *)(v13 - 48);
          BOOL v5 = v13 - 48 >= a1;
          BOOL v6 = v13 - 48 == a1;
          if (v13 - 48 != a1)
          {
            long long v101 = *v100;
            long long v102 = *(_OWORD *)(v13 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
            *(_OWORD *)a1 = v101;
            *(_OWORD *)(a1 + 16) = v102;
          }
          a5 = 0;
          *id v100 = v235;
          *(void *)(v13 - 32) = v241;
          *(void *)(v13 - 24) = v23;
          *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v232 + 7);
          *(void *)(v13 - 16) = v232;
        }
        uint64_t v240 = *(void *)(a1 + 16);
        long long v231 = *(_OWORD *)(a1 + 32);
        long long v234 = *(_OWORD *)a1;
        unint64_t v30 = a1;
        do
        {
          unint64_t v31 = v30;
          v30 += 48;
          uint64_t v32 = *(void *)(v31 + 72);
          if (v32 == v23) {
            break;
          }
          uint64_t v33 = *(char **)(v24 + 256);
          double v34 = *(char **)(v24 + 264);
          double v35 = v33;
          uint64_t v36 = v33;
          if (v33 != v34)
          {
            do
            {
              if (*(void *)v36 == v32) {
                goto LABEL_26;
              }
              v36 += 8;
            }
            while (v36 != v34);
            uint64_t v36 = *(char **)(v24 + 264);
LABEL_26:
            while (*(void *)v35 != v23)
            {
              v35 += 8;
              if (v35 == v34)
              {
                double v35 = *(char **)(v24 + 264);
                break;
              }
            }
          }
        }
        while (v36 - v33 < v35 - v33);
        double v37 = a2;
        if (v31 == a1)
        {
          double v37 = a2;
          if (v30 < (unint64_t)a2)
          {
            double v37 = a2;
            do
            {
              uint64_t v43 = *((void *)v37 - 3);
              v37 -= 3;
              if (v43 != v23)
              {
                long long v44 = *(char **)(v24 + 256);
                unint64_t v45 = *(char **)(v24 + 264);
                id v46 = v44;
                long long v47 = v44;
                if (v44 != v45)
                {
                  do
                  {
                    if (*(void *)v47 == v43) {
                      goto LABEL_48;
                    }
                    v47 += 8;
                  }
                  while (v47 != v45);
                  long long v47 = *(char **)(v24 + 264);
LABEL_48:
                  while (*(void *)v46 != v23)
                  {
                    v46 += 8;
                    if (v46 == v45)
                    {
                      id v46 = *(char **)(v24 + 264);
                      break;
                    }
                  }
                }
                if (v47 - v44 < v46 - v44) {
                  break;
                }
              }
            }
            while (v30 < (unint64_t)v37);
          }
        }
        else
        {
          do
          {
            do
            {
              uint64_t v38 = *((void *)v37 - 3);
              v37 -= 3;
            }
            while (v38 == v23);
            double v39 = *(char **)(v24 + 256);
            double v40 = *(char **)(v24 + 264);
            double v41 = v39;
            unint64_t v42 = v39;
            if (v39 != v40)
            {
              do
              {
                if (*(void *)v42 == v38) {
                  goto LABEL_36;
                }
                v42 += 8;
              }
              while (v42 != v40);
              unint64_t v42 = *(char **)(v24 + 264);
LABEL_36:
              while (*(void *)v41 != v23)
              {
                v41 += 8;
                if (v41 == v40)
                {
                  double v41 = *(char **)(v24 + 264);
                  break;
                }
              }
            }
          }
          while (v42 - v39 >= v41 - v39);
        }
        unint64_t v13 = v30;
        if (v30 < (unint64_t)v37)
        {
          long long v48 = v37;
          do
          {
            *(_OWORD *)v224 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v224[16] = *(_OWORD *)(v13 + 32);
            long long v49 = *(_OWORD *)v13;
            long long v51 = *v48;
            long long v50 = v48[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v48 + 27);
            *(_OWORD *)unint64_t v13 = v51;
            *(_OWORD *)(v13 + 16) = v50;
            *(long long *)((char *)v48 + 27) = *(_OWORD *)&v224[11];
            *long long v48 = v49;
            v48[1] = *(_OWORD *)v224;
            uint64_t v52 = *(void *)a3;
            do
            {
              uint64_t v53 = *(void *)(v13 + 72);
              v13 += 48;
              if (v53 == v23) {
                break;
              }
              BOOL v54 = *(char **)(v52 + 256);
              unint64_t v55 = *(char **)(v52 + 264);
              uint64_t v56 = v54;
              char v57 = v54;
              if (v54 != v55)
              {
                do
                {
                  if (*(void *)v57 == v53) {
                    goto LABEL_61;
                  }
                  v57 += 8;
                }
                while (v57 != v55);
                char v57 = *(char **)(v52 + 264);
LABEL_61:
                while (*(void *)v56 != v23)
                {
                  v56 += 8;
                  if (v56 == v55)
                  {
                    uint64_t v56 = *(char **)(v52 + 264);
                    break;
                  }
                }
              }
            }
            while (v57 - v54 < v56 - v54);
            do
            {
              do
              {
                uint64_t v58 = *((void *)v48 - 3);
                v48 -= 3;
              }
              while (v58 == v23);
              long long v59 = *(char **)(v52 + 256);
              unint64_t v60 = *(char **)(v52 + 264);
              unint64_t v61 = v59;
              long long v62 = v59;
              if (v59 != v60)
              {
                do
                {
                  if (*(void *)v62 == v58) {
                    goto LABEL_70;
                  }
                  v62 += 8;
                }
                while (v62 != v60);
                long long v62 = *(char **)(v52 + 264);
LABEL_70:
                while (*(void *)v61 != v23)
                {
                  v61 += 8;
                  if (v61 == v60)
                  {
                    unint64_t v61 = *(char **)(v52 + 264);
                    break;
                  }
                }
              }
            }
            while (v62 - v59 >= v61 - v59);
          }
          while (v13 < (unint64_t)v48);
        }
        long long v63 = (long long *)(v13 - 48);
        if (v13 - 48 != a1)
        {
          long long v64 = *v63;
          long long v65 = *(_OWORD *)(v13 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
          *(_OWORD *)a1 = v64;
          *(_OWORD *)(a1 + 16) = v65;
        }
        *long long v63 = v234;
        *(void *)(v13 - 32) = v240;
        *(void *)(v13 - 24) = v23;
        *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v231 + 7);
        *(void *)(v13 - 16) = v231;
        if (v30 >= (unint64_t)v37) {
          break;
        }
LABEL_80:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsPercentiles>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsPercentiles>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsPercentiles>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsPercentiles>::_SampleRemainder*,false>(a1, v13 - 48, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsPercentiles>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsPercentiles>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsPercentiles>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsPercentiles>::_SampleRemainder*>(a1, v13 - 48, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsPercentiles>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsPercentiles>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsPercentiles>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsPercentiles>::_SampleRemainder*>(v13, (uint64_t)a2, a3))
      {
        break;
      }
      if (!v66) {
        goto LABEL_80;
      }
    }
    a2 = (long long *)(v13 - 48);
    if (!v66) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsPercentiles>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsPercentiles>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsPercentiles>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsPercentiles>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 - 24);
      uint64_t v9 = *(void *)(a1 + 24);
      if (v8 == v9) {
        return result;
      }
      id v10 = *(char **)(*(void *)a3 + 256);
      int v11 = *(char **)(*(void *)a3 + 264);
      unint64_t v12 = v10;
      unint64_t v13 = v10;
      if (v10 == v11) {
        goto LABEL_10;
      }
      do
      {
        if (*(void *)v13 == v8) {
          goto LABEL_7;
        }
        v13 += 8;
      }
      while (v13 != v11);
      unint64_t v13 = *(char **)(*(void *)a3 + 264);
      do
      {
LABEL_7:
        if (*(void *)v12 == v9) {
          goto LABEL_10;
        }
        v12 += 8;
      }
      while (v12 != v11);
      unint64_t v12 = *(char **)(*(void *)a3 + 264);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        uint64_t v14 = (long long *)(a2 - 48);
        long long v15 = *(_OWORD *)a1;
        *(_OWORD *)double v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        long long v16 = *(_OWORD *)(a2 - 21);
        long long v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *uint64_t v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(long long *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), a3);
      uint64_t v19 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      int v20 = 0;
      break;
  }
  while (1)
  {
    uint64_t v21 = *(void *)(v19 + 24);
    uint64_t v22 = *(void *)(v18 + 24);
    if (v21 != v22)
    {
      uint64_t v23 = *(char **)(*(void *)a3 + 256);
      uint64_t v24 = *(char **)(*(void *)a3 + 264);
      uint64_t v25 = v23;
      double v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(void *)v26 == v21) {
            goto LABEL_19;
          }
          v26 += 8;
        }
        while (v26 != v24);
        double v26 = *(char **)(*(void *)a3 + 264);
LABEL_19:
        while (*(void *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            uint64_t v25 = *(char **)(*(void *)a3 + 264);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        long long v34 = *(_OWORD *)v19;
        uint64_t v36 = *(void *)(v19 + 16);
        long long v37 = *(_OWORD *)(v19 + 32);
        uint64_t v27 = v19;
        while (1)
        {
          long long v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1) {
            break;
          }
          uint64_t v27 = v18;
          uint64_t v29 = *(void *)(v18 - 24);
          if (v21 != v29)
          {
            unint64_t v30 = *(char **)(*(void *)a3 + 256);
            unint64_t v31 = *(char **)(*(void *)a3 + 264);
            uint64_t v32 = v30;
            uint64_t v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(void *)v33 == v21) {
                  goto LABEL_30;
                }
                v33 += 8;
              }
              while (v33 != v31);
              uint64_t v33 = *(char **)(*(void *)a3 + 264);
LABEL_30:
              while (*(void *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  uint64_t v32 = *(char **)(*(void *)a3 + 264);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30) {
              continue;
            }
          }
          goto LABEL_36;
        }
        uint64_t v27 = a1;
LABEL_36:
        *(_OWORD *)uint64_t v27 = v34;
        *(void *)(v27 + 16) = v36;
        *(void *)(v27 + 24) = v21;
        *(void *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8) {
          return v19 + 48 == a2;
        }
      }
    }
    uint64_t v18 = v19;
    v19 += 48;
    if (v19 == a2) {
      return 1;
    }
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsPercentiles>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsPercentiles>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  unint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsPercentiles>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsPercentiles>,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
  id v3 = *(void **)a1;
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsPercentiles>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsPercentiles>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsPercentiles>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsPercentiles>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      id v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsPercentiles>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  double v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsPercentiles> const&)::{lambda(HDStatisticsPercentiles const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsPercentiles> const&)::{lambda(HDStatisticsPercentiles const&)#1}>,HDStatisticsPercentiles const& ()(HDStatisticsPercentiles const&)>::~__func()
{
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsPercentiles> const&)::{lambda(HDStatisticsPercentiles const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsPercentiles> const&)::{lambda(HDStatisticsPercentiles const&)#1}>,HDStatisticsPercentiles const& ()(HDStatisticsPercentiles const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F1725E50;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsPercentiles> const&)::{lambda(HDStatisticsPercentiles const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsPercentiles> const&)::{lambda(HDStatisticsPercentiles const&)#1}>,HDStatisticsPercentiles const& ()(HDStatisticsPercentiles const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1725E50;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsPercentiles> const&)::{lambda(HDStatisticsPercentiles const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsPercentiles> const&)::{lambda(HDStatisticsPercentiles const&)#1}>,HDStatisticsPercentiles const& ()(HDStatisticsPercentiles const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsPercentiles> const&)::{lambda(HDStatisticsPercentiles const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsPercentiles> const&)::{lambda(HDStatisticsPercentiles const&)#1}>,HDStatisticsPercentiles const& ()(HDStatisticsPercentiles const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsPercentiles> const&)::{lambda(HDStatisticsPercentiles const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsPercentiles> const&)::{lambda(HDStatisticsPercentiles const&)#1}>,HDStatisticsPercentiles const& ()(HDStatisticsPercentiles const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsPercentiles const& ()(HDStatisticsPercentiles const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 552))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a4, 3, @"Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date");
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_configureForStartTime(a1);
  }
  double v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(void *)(a1 + 40) && a3) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_advanceToTime(a1, v8);
    }
    HDStatisticsCollectionEngine<HDStatisticsPercentiles>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    uint64_t v9 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    uint64_t v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v9, a4);
  }
  return v10;
}

void sub_1BD14D9B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_advanceToTime(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 128) <= a2)
  {
    uint64_t v4 = a1 + 112;
    uint64_t v5 = a1 + 120;
    do
    {
      uint64_t v6 = *(void *)(a1 + 528);
      uint64_t v7 = *(void *)(a1 + 520);
      if (v6 == v7)
      {
        uint64_t v22 = 0;
        long long v15 = *(void **)(a1 + 40);
        long long v16 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a2];
        double v8 = [v15 dateIntervalContainingDate:v16 index:&v22];

        HDStatisticsBucket<HDStatisticsPercentiles>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsPercentiles>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v17 = v22;
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v19 = v18;
        int v20 = [v8 endDate];
        [v20 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsPercentiles>::resetToBucket(v4, v17, v19, v21);
      }
      else
      {
        double v8 = [*(id *)(a1 + 40) dateIntervalAtIndex:*(void *)(a1 + 112) + 1];
        HDStatisticsBucket<HDStatisticsPercentiles>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsPercentiles>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v12 = v11;
        unint64_t v13 = [v8 endDate];
        [v13 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsPercentiles>::advanceBucket(v4, v12, v14);
      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_didChangeBucket(a1, v9);
      if (v6 != v7) {
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_notifyForCurrentBucket(a1);
      }
    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1BD14DBC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsPercentiles>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  char v3 = *(unsigned char *)(a2 + 32);
  if (v3)
  {
    uint64_t v5 = a1 + 8;
    double v6 = *(double *)(a2 + 8);
    if (v6 >= *(double *)(a1 + 8))
    {
      uint64_t v7 = *(uint64_t **)a2;
      double v8 = *(double *)(a2 + 16);
      unint64_t v9 = *(void *)(a2 + 24);
      char v10 = *(unsigned char *)(a2 + 33);
      double v11 = *(double *)(a1 + 16);
      if (*(_DWORD *)(a1 + 36)) {
        BOOL v12 = v6 < v11;
      }
      else {
        BOOL v12 = v6 <= v11;
      }
      if (v12)
      {
        if (v8 <= v11) {
          double v14 = *(double *)(a2 + 16);
        }
        else {
          double v14 = *(double *)(a1 + 16);
        }
        std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 224, *(void *)(a2 + 24), v9);
        long long v15 = *(char **)(a1 + 112);
        if (v15 == *(char **)(a1 + 104) && (uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) <= 0)
        {
          double v33 = *(double *)(a1 + 8);
          double v34 = *(double *)(a1 + 16);
          if (v6 >= v33) {
            double v33 = v6;
          }
          if (v34 >= v14) {
            double v34 = v14;
          }
          *(double *)(a1 + 48) = v33;
          *(double *)(a1 + 56) = v34;
        }
        else
        {
          if (v6 < *(double *)(a1 + 48))
          {
            double v16 = *(double *)(a1 + 8);
            if (v6 >= v16) {
              double v16 = v6;
            }
            *(double *)(a1 + 48) = v16;
          }
          if (v14 > *(double *)(a1 + 56))
          {
            double v17 = *(double *)(a1 + 16);
            if (v17 >= v14) {
              double v17 = v14;
            }
            *(double *)(a1 + 56) = v17;
          }
        }
        if (*(unsigned char *)(a1 + 32))
        {
          double v35 = *(double *)(a1 + 64);
          if (v6 < v35) {
            double v35 = v6;
          }
          *(double *)(a1 + 64) = v35;
        }
        if (a3 && v6 < *(double *)(a1 + 16))
        {
          HDStatisticsBucket<HDStatisticsPercentiles>::_mergeThroughTime(v5, v6);
          long long v15 = *(char **)(a1 + 112);
        }
        unint64_t v36 = *(void *)(a1 + 120);
        if ((unint64_t)v15 >= v36)
        {
          unint64_t v38 = 0x555555555555555;
          double v39 = *(char **)(a1 + 104);
          unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v39) >> 4);
          unint64_t v41 = v40 + 1;
          if (v40 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - (void)v39) >> 4);
          if (2 * v42 > v41) {
            unint64_t v41 = 2 * v42;
          }
          if (v42 < 0x2AAAAAAAAAAAAAALL) {
            unint64_t v38 = v41;
          }
          if (v38)
          {
            unint64_t v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v38);
            double v39 = *(char **)(a1 + 104);
            long long v15 = *(char **)(a1 + 112);
          }
          else
          {
            uint64_t v43 = 0;
          }
          unint64_t v44 = v38 + 48 * v40;
          *(void *)unint64_t v44 = v7;
          *(double *)(v44 + 8) = v6;
          *(double *)(v44 + 16) = v14;
          *(void *)(v44 + 24) = v9;
          unint64_t v45 = v38 + 48 * v43;
          *(unsigned char *)(v44 + 32) = v3;
          *(unsigned char *)(v44 + 33) = v10;
          *(_WORD *)(v44 + 40) = 0;
          *(unsigned char *)(v44 + 42) = 0;
          long long v37 = (void *)(v44 + 48);
          if (v15 != v39)
          {
            do
            {
              long long v46 = *((_OWORD *)v15 - 3);
              long long v47 = *((_OWORD *)v15 - 2);
              *(_OWORD *)(v44 - 21) = *(_OWORD *)(v15 - 21);
              *(_OWORD *)(v44 - 48) = v46;
              *(_OWORD *)(v44 - 32) = v47;
              v44 -= 48;
              v15 -= 48;
            }
            while (v15 != v39);
            double v39 = *(char **)(a1 + 104);
          }
          *(void *)(a1 + 104) = v44;
          *(void *)(a1 + 112) = v37;
          *(void *)(a1 + 120) = v45;
          if (v39) {
            operator delete(v39);
          }
        }
        else
        {
          *(void *)long long v15 = v7;
          *((double *)v15 + 1) = v6;
          *((double *)v15 + 2) = v14;
          *((void *)v15 + 3) = v9;
          v15[32] = v3;
          v15[33] = v10;
          *((_WORD *)v15 + 20) = 0;
          long long v37 = v15 + 48;
          v15[42] = 0;
        }
        *(void *)(a1 + 112) = v37;
        if (!*(unsigned char *)(a1 + 192) || *(double *)(a1 + 168) <= v6)
        {
          *(void *)(a1 + 160) = v7;
          *(double *)(a1 + 168) = v6;
          *(double *)(a1 + 176) = v8;
          *(void *)(a1 + 184) = v9;
          *(unsigned char *)(a1 + 192) = v3;
          *(unsigned char *)(a1 + 193) = v10;
        }
        if (*(unsigned char *)(a1 + 33))
        {
          unint64_t v48 = HDStatisticsBucket<HDStatisticsPercentiles>::_canonicalSourceIDForSourceID(v5, v9);
          long long v49 = HDStatisticsBucket<HDStatisticsPercentiles>::_statisticsForSource(v5, v48);
          if (!*((unsigned char *)v49 + 64) || *((double *)v49 + 5) <= v6)
          {
            v49[4] = v7;
            *((double *)v49 + 5) = v6;
            *((double *)v49 + 6) = v8;
            v49[7] = (uint64_t *)v9;
            *((unsigned char *)v49 + 64) = v3;
            *((unsigned char *)v49 + 65) = v10;
          }
        }
      }
      else
      {
        if (v6 < v11) {
          double v6 = *(double *)(a1 + 16);
        }
        unint64_t v18 = *(void *)(a1 + 416);
        unint64_t v19 = *(void *)(a1 + 424);
        if (v18 >= v19)
        {
          uint64_t v21 = *(void *)(a1 + 408);
          unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v21) >> 3);
          unint64_t v23 = v22 + 1;
          if (v22 + 1 > 0x666666666666666) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v21) >> 3);
          if (2 * v24 > v23) {
            unint64_t v23 = 2 * v24;
          }
          if (v24 >= 0x333333333333333) {
            unint64_t v25 = 0x666666666666666;
          }
          else {
            unint64_t v25 = v23;
          }
          if (v25) {
            unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v25);
          }
          else {
            uint64_t v26 = 0;
          }
          unint64_t v27 = v25 + 40 * v22;
          unint64_t v28 = v25 + 40 * v26;
          *(void *)unint64_t v27 = v7;
          *(double *)(v27 + 8) = v6;
          *(double *)(v27 + 16) = v8;
          *(void *)(v27 + 24) = v9;
          *(unsigned char *)(v27 + 32) = v3;
          *(unsigned char *)(v27 + 33) = v10;
          unint64_t v20 = v27 + 40;
          unint64_t v30 = *(char **)(a1 + 408);
          uint64_t v29 = *(char **)(a1 + 416);
          if (v29 != v30)
          {
            do
            {
              long long v31 = *(_OWORD *)(v29 - 40);
              long long v32 = *(_OWORD *)(v29 - 24);
              *(_WORD *)(v27 - 8) = *((_WORD *)v29 - 4);
              *(_OWORD *)(v27 - 24) = v32;
              *(_OWORD *)(v27 - 40) = v31;
              v27 -= 40;
              v29 -= 40;
            }
            while (v29 != v30);
            uint64_t v29 = *(char **)(a1 + 408);
          }
          *(void *)(a1 + 408) = v27;
          *(void *)(a1 + 416) = v20;
          *(void *)(a1 + 424) = v28;
          if (v29) {
            operator delete(v29);
          }
        }
        else
        {
          *(void *)unint64_t v18 = v7;
          *(double *)(v18 + 8) = v6;
          *(double *)(v18 + 16) = v8;
          *(void *)(v18 + 24) = v9;
          *(unsigned char *)(v18 + 32) = v3;
          unint64_t v20 = v18 + 40;
          *(unsigned char *)(v18 + 33) = v10;
        }
        *(void *)(a1 + 416) = v20;
      }
    }
  }
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_notifyForCurrentBucket(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 554))
  {
    *(unsigned char *)(a1 + 556) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 556) = 0;
    uint64_t v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      uint64_t v4 = v2;
      char v3 = (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      if (v3) {
        v4[2](v4, v3);
      }

      uint64_t v2 = v4;
    }
  }
}

void sub_1BD14E0C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsPercentiles>::advanceBucket(uint64_t a1, double a2, double a3)
{
  unint64_t v9 = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 408), *(void *)(a1 + 416), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 416) - *(void *)(a1 + 408)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsPercentiles>::resetToBucket(a1, *(void *)a1 + 1, a2, a3);
  double v6 = v9;
  uint64_t v7 = v10;
  if (v9 != v10)
  {
    uint64_t v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsPercentiles>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BD14E1C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsPercentiles>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  objc_storeStrong((id *)(a1 + 432), *(id *)(a1 + 40));
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  uint64_t v8 = *(void **)(a1 + 128);
  if (v8)
  {
    *(void *)(a1 + 136) = v8;
    operator delete(v8);
  }
  *(_WORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  if (*(void *)(a1 + 216))
  {
    uint64_t v9 = *(void *)(a1 + 208);
    char v10 = *(void **)(a1 + 200);
    *(void *)(a1 + 200) = a1 + 208;
    *(void *)(v9 + 16) = 0;
    *(void *)(a1 + 208) = 0;
    *(void *)(a1 + 216) = 0;
    if (v10[1]) {
      uint64_t v11 = (void *)v10[1];
    }
    else {
      uint64_t v11 = v10;
    }
    if (v11)
    {
      BOOL v12 = (void *)v11[2];
      if (v12)
      {
        unint64_t v13 = (void *)*v12;
        if ((void *)*v12 == v11)
        {
          void *v12 = 0;
          while (1)
          {
            long long v15 = (void *)v12[1];
            if (!v15) {
              break;
            }
            do
            {
              BOOL v12 = v15;
              long long v15 = (void *)*v15;
            }
            while (v15);
          }
        }
        else
        {
          for (v12[1] = 0; v13; unint64_t v13 = (void *)v12[1])
          {
            do
            {
              BOOL v12 = v13;
              unint64_t v13 = (void *)*v13;
            }
            while (v13);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsPercentiles>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsPercentiles>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsPercentiles>>>::destroy(v11);
        for (uint64_t i = (void *)v12[2]; i; uint64_t i = (void *)i[2])
          BOOL v12 = i;
        uint64_t v11 = v12;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsPercentiles>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsPercentiles>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsPercentiles>>>::destroy(v11);
  }
  HDStatisticsBucket<HDStatisticsPercentiles>::setStatisticsConfiguration(a1 + 8, *(void **)(a1 + 432));
  *(void *)(a1 + 416) = *(void *)(a1 + 408);
  *(void *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 556))
  {
    if (v3)
    {
      id v6 = v3;
      uint64_t v4 = _Block_copy(*(const void **)(a1 + 96));
      uint64_t v5 = v4;
      if (v4) {
        (*((void (**)(void *, id))v4 + 2))(v4, v6);
      }

      id v3 = v6;
    }
    *(unsigned char *)(a1 + 556) = 0;
  }
}

void sub_1BD14E394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI23HDStatisticsPercentilesE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 startDate];
  id v6 = [v4 startDate];
  uint64_t v7 = [v5 compare:v6];

  return v7;
}

void sub_1BD14E41C(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_primitiveInvalidateInterval(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 13);
  if (WeakRetained)
  {
    if (v5
      && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_currentBucketInterval((uint64_t)a1),
          (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v8 = [v5 endDate];
      uint64_t v9 = [v7 startDate];
      if (objc_msgSend(v8, "hk_isAfterDate:", v9))
      {
        char v10 = [v5 startDate];
        uint64_t v11 = [v7 endDate];
        char v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);
      }
      else
      {
        char v12 = 0;
      }

      unint64_t v13 = _Block_copy(a1[12]);
      if ((v12 & 1) == 0) {
        operator new();
      }
    }
    else
    {
      unint64_t v13 = _Block_copy(a1[12]);
    }
    *((unsigned char *)a1 + 552) = 1;
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI23HDStatisticsPercentilesE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
    v27[3] = &unk_1E6308FF8;
    id v15 = v5;
    id v28 = v15;
    id v16 = v13;
    id v29 = v16;
    (*((void (**)(id *, void *))*a1 + 9))(a1, v27);
    if (v5)
    {
      double v17 = [v15 startDate];
      [v17 timeIntervalSinceReferenceDate];
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_configureForStartTime((uint64_t)a1);
    }
    else
    {
      (*((void (**)(id *))*a1 + 4))(a1);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI23HDStatisticsPercentilesE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
    v21[3] = &unk_1E6309060;
    unint64_t v24 = a1;
    id v5 = v15;
    char v26 = 1;
    id v22 = v5;
    unint64_t v25 = a1;
    id v23 = WeakRetained;
    uint64_t v14 = (*((uint64_t (**)(id *, void *, uint64_t))*a1 + 14))(a1, v21, a3);
    unint64_t v18 = _Block_copy(v16);
    id v19 = a1[12];
    a1[12] = v18;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to invalidate interval: no data source available.");
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1BD14E86C(_Unwind_Exception *a1)
{
  MEMORY[0x1C187B8A0](v4, 0x10F1C40FC36F0F4);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI23HDStatisticsPercentilesE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_11;
  }
  id v3 = [v10 endDate];
  uint64_t v4 = [*(id *)(a1 + 32) startDate];
  char v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    id v6 = [v10 startDate];
    uint64_t v7 = [*(id *)(a1 + 32) endDate];
    char v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_11:
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9) {
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
      }
    }
  }
}

void sub_1BD14EA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI23HDStatisticsPercentilesE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = [*(id *)(a1 + 32) startDate];
  [v5 timeIntervalSinceReferenceDate];
  uint64_t v7 = v6;

  char v8 = [*(id *)(a1 + 32) endDate];
  [v8 timeIntervalSinceReferenceDate];
  uint64_t v10 = v9;

  uint64_t v11 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  uint64_t v13 = *(void *)(a1 + 32);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI23HDStatisticsPercentilesE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  char v32 = *(unsigned char *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  uint64_t v31 = *(void *)(a1 + 56);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI23HDStatisticsPercentilesE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  void v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  uint64_t v14 = [v11 collectionCalculator:WeakRetained queryForInterval:v13 error:a2 sampleHandler:v30 mergeHandler:v29];

  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15 != v4)
    {
      id v16 = [*(id *)(a1 + 32) endDate];
      [v16 timeIntervalSinceReferenceDate];
      if (*(void *)(v15 + 40))
      {
        double v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          id v19 = [*(id *)(v15 + 40) dateIntervalAtIndex:*(void *)(v15 + 112) + 1];
          HDStatisticsBucket<HDStatisticsPercentiles>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsPercentiles>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          unint64_t v20 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_statisticsFromFinishedBucket(v15, v15 + 120);
          uint64_t v21 = [v19 startDate];
          [v21 timeIntervalSinceReferenceDate];
          double v23 = v22;
          unint64_t v24 = [v19 endDate];
          [v24 timeIntervalSinceReferenceDate];
          HDStatisticsCollectionEngine<HDStatisticsPercentiles>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            char v26 = _Block_copy(*(const void **)(v15 + 96));
            unint64_t v27 = v26;
            if (v26) {
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);
            }
          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_didChangeBucket(v15, 0);
        }
      }
    }
  }
  return v14;
}

void sub_1BD14ECFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI23HDStatisticsPercentilesE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7 = *(double *)(a1 + 32);
  if (v7 > a6)
  {
    a2 = 0;
    int v8 = 0;
    a7 = 0.0;
    a5 = 0.0;
    double v9 = 0.0;
  }
  else
  {
    int v8 = 1;
    double v9 = a6;
  }
  double v13 = a5;
  double v14 = v9;
  double v15 = a7;
  uint64_t v16 = a2;
  char v17 = v8;
  char v18 = 0;
  if (*(unsigned char *)(a1 + 56))
  {
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v13, a3, a4);
    }
  }
  else
  {
    BOOL v11 = v7 <= a6;
    double v12 = *(double *)(a1 + 40);
    if (v9 >= v12) {
      BOOL v11 = 0;
    }
    if (!v11 || a7 <= v12) {
      double v12 = a7;
    }
    double v14 = v9;
    double v15 = v12;
    char v17 = v11;
    if (v11) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v13, a3, a4);
    }
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI23HDStatisticsPercentilesE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 552)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_configureForStartTime(a1);
  }
  if (*(void *)(a1 + 40)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_advanceToTime(a1, a2);
  }
  if (*(double *)(a1 + 128) > a2)
  {
    HDStatisticsBucket<HDStatisticsPercentiles>::_mergeThroughTime(a1 + 120, a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 32) < *(double *)(v10 + 8))
                {
                  uint64_t v129 = *(void *)(v10 + 32);
                  long long v113 = *(_OWORD *)v10;
                  long long v121 = *(_OWORD *)(v10 + 16);
                  long long v52 = *(_OWORD *)(a2 - 40);
                  long long v53 = *(_OWORD *)(a2 - 24);
                  *(_WORD *)(v10 + 32) = *(_WORD *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(_WORD *)(a2 - 8) = v129;
                  *(_OWORD *)(a2 - 24) = v121;
                  *(_OWORD *)(a2 - 40) = v113;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v10, (double *)(v10 + 40), (double *)(a2 - 40));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, v10 + 120, a2 - 40);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            BOOL v54 = (void *)(v10 + 40);
            BOOL v56 = v10 == a2 || v54 == (void *)a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  long long v59 = v54;
                  double v60 = *(double *)(v58 + 48);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *v54;
                    long long v114 = *(_OWORD *)(v58 + 56);
                    uint64_t v122 = *(void *)(v58 + 72);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      uint64_t v63 = v10 + v62;
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      *(_OWORD *)(v63 + 40) = *(_OWORD *)(v10 + v62);
                      *(_OWORD *)(v63 + 56) = v64;
                      *(_WORD *)(v63 + 72) = *(_WORD *)(v10 + v62 + 32);
                      if (!v62) {
                        break;
                      }
                      v62 -= 40;
                      if (v60 >= *(double *)(v63 - 32))
                      {
                        uint64_t v65 = v10 + v62 + 40;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = v114;
                    *(_WORD *)(v65 + 32) = v122;
                  }
                  BOOL v54 = v59 + 5;
                  v57 += 40;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 5 != (void *)a2);
              }
            }
            else if (!v56)
            {
              do
              {
                char v98 = v54;
                double v99 = *(double *)(a1 + 48);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *v54;
                  long long v117 = *(_OWORD *)(a1 + 56);
                  uint64_t v125 = *(void *)(a1 + 72);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(_OWORD *)(v101 - 3);
                    *(_OWORD *)long long v101 = *(_OWORD *)(v101 - 5);
                    *((_OWORD *)v101 + 1) = v102;
                    *((_WORD *)v101 + 16) = *((_WORD *)v101 - 4);
                    double v103 = *((double *)v101 - 9);
                    v101 -= 5;
                  }
                  while (v99 < v103);
                  void *v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *((_WORD *)v101 + 16) = v125;
                  *((_OWORD *)v101 + 1) = v117;
                }
                v54 += 5;
                a1 = (unint64_t)v98;
              }
              while (v98 + 5 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 40 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v10 + 40 * v69 + 8) < *(double *)(v70 + 48))
                  {
                    v70 += 40;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  double v71 = *(double *)(v10 + 40 * v68 + 8);
                  if (*(double *)(v70 + 8) >= v71)
                  {
                    unint64_t v72 = v10 + 40 * v68;
                    uint64_t v73 = *(void *)v72;
                    uint64_t v123 = *(void *)(v72 + 32);
                    long long v115 = *(_OWORD *)(v72 + 16);
                    do
                    {
                      unint64_t v74 = v72;
                      unint64_t v72 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_WORD *)(v74 + 32) = *(_WORD *)(v70 + 32);
                      *(_OWORD *)unint64_t v74 = v75;
                      *(_OWORD *)(v74 + 16) = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 40 * v77;
                      uint64_t v78 = 2 * v69 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v10 + 40 * v77 + 8) < *(double *)(v70 + 48))
                      {
                        v70 += 40;
                        uint64_t v77 = v78;
                      }
                      uint64_t v69 = v77;
                    }
                    while (*(double *)(v70 + 8) >= v71);
                    *(void *)unint64_t v72 = v73;
                    *(double *)(v72 + 8) = v71;
                    *(_OWORD *)(v72 + 16) = v115;
                    *(_WORD *)(v72 + 32) = v123;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x28uLL;
              do
              {
                uint64_t v80 = 0;
                uint64_t v130 = *(void *)(v10 + 32);
                long long v116 = *(_OWORD *)v10;
                long long v124 = *(_OWORD *)(v10 + 16);
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = v81;
                  uint64_t v83 = v80 + 1;
                  v81 += 40 * (v80 + 1);
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v85 = v84 + 2;
                  if (v85 < v79 && *(double *)(v82 + 40 * v83 + 8) < *(double *)(v81 + 48))
                  {
                    v81 += 40;
                    uint64_t v80 = v85;
                  }
                  long long v86 = *(_OWORD *)v81;
                  long long v87 = *(_OWORD *)(v81 + 16);
                  *(_WORD *)(v82 + 32) = *(_WORD *)(v81 + 32);
                  *(_OWORD *)unint64_t v82 = v86;
                  *(_OWORD *)(v82 + 16) = v87;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 40;
                if (v81 == a2)
                {
                  *(_WORD *)(v81 + 32) = v130;
                  *(_OWORD *)unint64_t v81 = v116;
                  *(_OWORD *)(v81 + 16) = v124;
                }
                else
                {
                  long long v88 = *(_OWORD *)a2;
                  long long v89 = *(_OWORD *)(a2 + 16);
                  *(_WORD *)(v81 + 32) = *(_WORD *)(a2 + 32);
                  *(_OWORD *)unint64_t v81 = v88;
                  *(_OWORD *)(v81 + 16) = v89;
                  *(_WORD *)(a2 + 32) = v130;
                  *(_OWORD *)a2 = v116;
                  *(_OWORD *)(a2 + 16) = v124;
                  uint64_t v90 = v81 - v10 + 40;
                  if (v90 >= 41)
                  {
                    unint64_t v91 = (v90 / 0x28uLL - 2) >> 1;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v10 + 40 * v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      uint64_t v109 = *(void *)(v81 + 32);
                      long long v106 = *(_OWORD *)(v81 + 16);
                      do
                      {
                        unint64_t v94 = v81;
                        unint64_t v81 = v10 + 40 * v91;
                        long long v95 = *(_OWORD *)v81;
                        long long v96 = *(_OWORD *)(v81 + 16);
                        *(_WORD *)(v94 + 32) = *(_WORD *)(v81 + 32);
                        *(_OWORD *)unint64_t v94 = v95;
                        *(_OWORD *)(v94 + 16) = v96;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 40 * v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_WORD *)(v81 + 32) = v109;
                      *(_OWORD *)(v81 + 16) = v106;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40 * (v12 >> 1)), (double *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            uint64_t v16 = (double *)(a1 + 40 * v13 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40), v16, (double *)(a2 - 80));
            char v17 = (double *)(a1 + 40 + 8 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 80), v17, (double *)(a2 - 120));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v16, (double *)v14, v17);
            uint64_t v126 = *(void *)(a1 + 32);
            long long v110 = *(_OWORD *)a1;
            long long v118 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 16) = v19;
            *(_WORD *)(v14 + 32) = v126;
            *(_OWORD *)unint64_t v14 = v110;
            *(_OWORD *)(v14 + 16) = v118;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40 * (v12 >> 1)), (double *)a1, (double *)(a2 - 40));
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 32) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          long long v105 = *(_OWORD *)(a1 + 16);
          uint64_t v108 = *(void *)(a1 + 32);
          if (v20 >= *(double *)(a2 - 32))
          {
            unint64_t v41 = a1 + 40;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 40;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 40;
              double v40 = *(double *)(v39 + 48);
              v39 += 40;
            }
            while (v20 >= v40);
          }
          unint64_t v43 = a2;
          if (v10 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              unint64_t v43 = v44 - 40;
              double v45 = *(double *)(v44 - 32);
              v44 -= 40;
            }
            while (v20 < v45);
          }
          while (v10 < v43)
          {
            uint64_t v128 = *(void *)(v10 + 32);
            long long v112 = *(_OWORD *)v10;
            long long v120 = *(_OWORD *)(v10 + 16);
            long long v46 = *(_OWORD *)v43;
            long long v47 = *(_OWORD *)(v43 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v43 + 32);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(_WORD *)(v43 + 32) = v128;
            *(_OWORD *)unint64_t v43 = v112;
            *(_OWORD *)(v43 + 16) = v120;
            do
            {
              double v48 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *(double *)(v43 - 32);
              v43 -= 40;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 40);
            long long v51 = *(_OWORD *)(v10 - 24);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 40) = v38;
          *(double *)(v10 - 32) = v20;
          *(_WORD *)(v10 - 8) = v108;
          *(_OWORD *)(v10 - 24) = v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        long long v104 = *(_OWORD *)(a1 + 16);
        uint64_t v107 = *(void *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 48);
          v21 += 40;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        unint64_t v25 = a2;
        if (v21 == 40)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 40;
            double v29 = *(double *)(v28 - 32);
            v28 -= 40;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 40;
            double v27 = *(double *)(v25 - 32);
            v25 -= 40;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v127 = *(void *)(v10 + 32);
            long long v111 = *(_OWORD *)v10;
            long long v119 = *(_OWORD *)(v10 + 16);
            long long v31 = *(_OWORD *)v30;
            long long v32 = *(_OWORD *)(v30 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v30 + 32);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(_WORD *)(v30 + 32) = v127;
            *(_OWORD *)unint64_t v30 = v111;
            *(_OWORD *)(v30 + 16) = v119;
            do
            {
              double v33 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v33 < v20);
            do
            {
              double v34 = *(double *)(v30 - 32);
              v30 -= 40;
            }
            while (v34 >= v20);
          }
          while (v10 < v30);
        }
        if (v10 - 40 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 40);
          long long v36 = *(_OWORD *)(v10 - 24);
          *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 40) = v22;
        *(double *)(v10 - 32) = v20;
        *(_WORD *)(v10 - 8) = v107;
        *(_OWORD *)(v10 - 24) = v104;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 40;
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        __int16 v9 = *(_WORD *)(a2 - 8);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      uint64_t v16 = *(void *)v12;
      long long v21 = *(_OWORD *)(v12 + 16);
      uint64_t v22 = *(void *)(v12 + 32);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(void *)uint64_t v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI23HDStatisticsPercentilesE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(void *a1, uint64_t a2)
{
  id v3 = (void *)a1[5];
  uint64_t v4 = a1[6];
  BOOL v5 = (void *)a1[4];
  uint64_t v6 = [v5 dateInterval];
  void v9[4] = v4;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI23HDStatisticsPercentilesE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI23HDStatisticsPercentilesE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  uint64_t v7 = [v3 collectionCalculator:v5 queryForInterval:v6 error:a2 sampleHandler:v10 mergeHandler:v9];

  return v7;
}

void sub_1BD14FA58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI23HDStatisticsPercentilesE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10 = *(void *)(a1 + 32);
  *(double *)int v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  char v15 = 1;
  uint64_t v11 = [MEMORY[0x1E4F1C9C8] distantFuture];
  [v11 timeIntervalSinceReferenceDate];
  BOOL v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1BD14FAFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI23HDStatisticsPercentilesE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6 = a3;
  uint64_t v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = &unk_1F1725F00;
  double v9 = 900.0;
  if ((v6 & 0x10) == 0) {
    double v9 = 0.0;
  }
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(void *)(v8 + 104) = 0;
  *(void *)(v8 + 112) = 0;
  *(void *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_WORD *)(a1 + 616) = 1;
  *(unsigned char *)(a1 + 618) = 0;
  *(unsigned char *)(a1 + 620) = 0;
  *(void *)(a1 + 624) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(void *)(a1 + 664) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);

  JUMPOUT(0x1C187B8A0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1F1725F00;
  uint64_t v2 = *(void **)(a1 + 648);
  if (v2)
  {
    *(void *)(a1 + 656) = v2;
    operator delete(v2);
  }

  id v3 = *(void **)(a1 + 584);
  if (v3)
  {
    *(void *)(a1 + 592) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(unsigned char *)(result + 616) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::setDateInterval(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 copy];
  uint64_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;

  BOOL v5 = [v6 startDate];
  [v5 timeIntervalSinceReferenceDate];
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
}

void sub_1BD14FCAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(void *)(a1 + 40))
  {
    id v5 = v3;
    [v3 timeIntervalSinceReferenceDate];
    *(void *)(a1 + 624) = v4;
    id v3 = v5;
  }
}

void sub_1BD14FD20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::setStatisticsConfiguration(id *a1, void *a2)
{
  objc_storeStrong(a1 + 79, a2);
  id v7 = a2;
  id v4 = a1[79];
  id v5 = a1[76];
  a1[76] = v4;
  id v6 = v4;

  objc_storeStrong(a1 + 19, a1[76]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (*(void *)(a1 + 40)) {
    return 1;
  }
  BOOL v7 = *(void *)(a1 + 224) == *(void *)(a1 + 216) && *(uint64_t *)(a1 + 248) < 1
    || HKIntervalMask<double>::firstDifference(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)a2, *(void *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (v7) {
    return 1;
  }
  double v9 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128);

  return v9(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 copy];
  id v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v3;
}

void sub_1BD14FF08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::dataSource(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));

  return WeakRetained;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::currentStatistics(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 616))
  {
    unint64_t v1 = 0;
  }
  else
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v4);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v4, v4[1]);
    unint64_t v1 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v4);
  }

  return v1;
}

void sub_1BD14FFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(a1 + 64);
  BOOL v7 = v6;
  if (v6)
  {
    uint64_t v8 = [v6 startDate];
    [v8 timeIntervalSinceReferenceDate];
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    uint64_t v10 = [v7 endDate];
    [v10 timeIntervalSinceReferenceDate];
    double v12 = v11;
    double v13 = *(double *)(a2 + 8);

    if (v12 < v13) {
      goto LABEL_9;
    }
  }
  if (!*(unsigned char *)(a1 + 618))
  {
LABEL_11:
    uint64_t v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 617))
  {
LABEL_9:
    uint64_t v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(unsigned char *)(a1 + 619)) {
      goto LABEL_11;
    }
    unint64_t v17 = *(void *)(a1 + 656);
    unint64_t v18 = *(void *)(a1 + 664);
    if (v17 >= v18)
    {
      uint64_t v22 = *(void *)(a1 + 648);
      unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      unint64_t v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24) {
        unint64_t v24 = 2 * v25;
      }
      if (v25 >= 0x333333333333333) {
        unint64_t v26 = 0x666666666666666;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26) {
        unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      }
      else {
        uint64_t v27 = 0;
      }
      unint64_t v28 = v26 + 40 * v23;
      unint64_t v29 = v26 + 40 * v27;
      long long v30 = *(_OWORD *)a2;
      long long v31 = *(_OWORD *)(a2 + 16);
      *(void *)(v28 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      unint64_t v21 = v28 + 40;
      long long v32 = *(char **)(a1 + 656);
      double v33 = *(char **)(a1 + 648);
      if (v32 != v33)
      {
        do
        {
          long long v34 = *(_OWORD *)(v32 - 40);
          long long v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        long long v32 = *(char **)(a1 + 648);
      }
      *(void *)(a1 + 648) = v28;
      *(void *)(a1 + 656) = v21;
      *(void *)(a1 + 664) = v29;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      long long v19 = *(_OWORD *)a2;
      long long v20 = *(_OWORD *)(a2 + 16);
      *(void *)(v17 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      unint64_t v21 = v17 + 40;
    }
    *(void *)(a1 + 656) = v21;
    goto LABEL_9;
  }
  int v14 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
  uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1BD150248(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = v5;
  if (*(unsigned char *)(a1 + 618))
  {
    uint64_t v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 618) = 1;
  uint64_t v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    uint64_t v7 = 0;
    goto LABEL_82;
  }
  uint64_t v65 = v6;
  if (*(unsigned char *)(a1 + 617)) {
    goto LABEL_5;
  }
  double v9 = *(void **)(a1 + 640);
  if (!v9)
  {
    id v68 = 0;
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 40))
  {
LABEL_5:
    int v8 = 0;
    id v68 = 0;
    goto LABEL_29;
  }
  [v9 sortUsingComparator:&__block_literal_global_1028];
  id v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v10 = *(id *)(a1 + 640);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  if (!v11)
  {

    id v12 = 0;
    goto LABEL_27;
  }
  id v12 = 0;
  uint64_t v13 = *(void *)v70;
  do
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (*(void *)v70 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(id *)(*((void *)&v69 + 1) + 8 * i);
      BOOL v16 = v15;
      if (v12)
      {
        unint64_t v17 = [v15 startDate];
        unint64_t v18 = [v12 endDate];
        int v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          long long v20 = [v16 endDate];
          unint64_t v21 = [v12 endDate];
          int v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22) {
            goto LABEL_21;
          }
          id v23 = objc_alloc(MEMORY[0x1E4F28C18]);
          unint64_t v24 = [v12 startDate];
          unint64_t v25 = [v16 endDate];
          id v26 = (id)[v23 initWithStartDate:v24 endDate:v25];
        }
        else
        {
          [v68 addObject:v12];
          id v26 = v16;
        }
        id v12 = v26;
      }
      else
      {
        id v12 = v15;
      }
LABEL_21:
    }
    uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  }
  while (v11);

  if (v12) {
    [v68 addObject:v12];
  }
LABEL_27:

LABEL_28:
  int v8 = 1;
LABEL_29:
  uint64_t v27 = *(void **)(a1 + 640);
  *(void *)(a1 + 640) = 0;

  *(unsigned char *)(a1 + 617) = 0;
  if (!v8)
  {
    unint64_t v38 = *(void *)(a1 + 648);
    *(void *)(a1 + 664) = 0;
    *(void *)(a1 + 656) = 0;
    *(void *)(a1 + 648) = 0;
    unint64_t v39 = v38;
    goto LABEL_47;
  }
  unint64_t v28 = [v68 lastObject];
  if (v28)
  {
    unint64_t v29 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_currentBucketInterval(a1);
    long long v30 = [v29 endDate];
    long long v31 = [v28 endDate];
    int v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      double v33 = [v28 endDate];
      [v33 timeIntervalSinceReferenceDate];
      double v35 = v34;

      uint64_t v36 = *(void *)(a1 + 648);
      BOOL v37 = *(long long **)(a1 + 656);
      while ((long long *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((long long *)v36 != v37)
          {
            double v40 = (long long *)(v36 + 40);
            if ((long long *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  long long v41 = *v40;
                  long long v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)uint64_t v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                double v40 = (long long *)((char *)v40 + 40);
              }
              while (v40 != v37);
              BOOL v37 = *(long long **)(a1 + 656);
            }
          }
          if ((long long *)v36 != v37) {
            *(void *)(a1 + 656) = v36;
          }
          break;
        }
        v36 += 40;
      }
    }
  }
  unint64_t v38 = *(void *)(a1 + 648);
  unint64_t v39 = *(void *)(a1 + 656);
  *(void *)(a1 + 664) = 0;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 656) = 0;
  if (![v68 count]) {
    goto LABEL_60;
  }
LABEL_47:
  id v43 = v68;
  long long __p = (void *)v38;
  if (v43)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v44 = v43;
    uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v70;
      while (2)
      {
        for (uint64_t j = 0; j != v45; ++j)
        {
          if (*(void *)v70 != v46) {
            objc_enumerationMutation(v44);
          }
          id v48 = *(id *)(*((void *)&v69 + 1) + 8 * j);
          int v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval((id *)a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
        if (v45) {
          continue;
        }
        break;
      }
    }

LABEL_59:
    unint64_t v38 = (unint64_t)__p;
LABEL_60:
    unint64_t v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v51;
    }
    int v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    long long __p = (void *)v38;
    if (v39 != v38)
    {
      uint64_t v54 = v38;
      uint64_t v50 = v67;
      do
      {
        int v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_primitiveAddSample(a1, v54, 1, v50);
        int v53 = v55;
        v54 += 40;
        if (v54 == v39) {
          char v56 = 0;
        }
        else {
          char v56 = v55;
        }
        uint64_t v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval((id *)a1, 0, v67))goto LABEL_59; {
LABEL_70:
    }
    int v53 = 0;
  }
  if (*(void *)(a1 + 40) && *(void *)(a1 + 592) != *(void *)(a1 + 584))
  {
    do
    {
      uint64_t v57 = objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(void *)(a1 + 112) + 1, v50, v65);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      unint64_t v58 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, a1 + 120);
      long long v59 = [v57 startDate];
      [v59 timeIntervalSinceReferenceDate];
      double v61 = v60;
      uint64_t v62 = [v57 endDate];
      [v62 timeIntervalSinceReferenceDate];
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
    }
    while (*(void *)(a1 + 592) != *(void *)(a1 + 584));
  }
  *(unsigned char *)(a1 + 618) = 0;
  if (__p) {
    operator delete(__p);
  }

  if (v53)
  {
    if (*(unsigned char *)(a1 + 620))
    {
      *(unsigned char *)(a1 + 620) = 0;
      id v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
      uint64_t v7 = 1;
      goto LABEL_82;
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v6 = v65;
LABEL_82:
  *(unsigned char *)(a1 + 618) = 0;
LABEL_83:

  return v7;
}

void sub_1BD15094C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    *(unsigned char *)(v13 + 618) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(unsigned char *)(result + 619) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(unsigned char *)(a1 + 618)) {
      goto LABEL_12;
    }
    uint64_t v7 = 0;
LABEL_14:
    uint64_t v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval((id *)a1, v7, a3);
    goto LABEL_15;
  }
  uint64_t v7 = [v6 dateIntervalForIntervalsContainingInterval:v5];

  if (!*(unsigned char *)(a1 + 618)) {
    goto LABEL_14;
  }
  if (!v7)
  {
LABEL_12:
    id v12 = *(void **)(a1 + 640);
    *(void *)(a1 + 640) = 0;

    uint64_t v7 = 0;
    uint64_t v11 = 1;
    *(unsigned char *)(a1 + 617) = 1;
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 617))
  {
    int v8 = *(void **)(a1 + 640);
    if (!v8)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      id v10 = *(void **)(a1 + 640);
      *(void *)(a1 + 640) = v9;

      int v8 = *(void **)(a1 + 640);
    }
    [v8 addObject:v7];
  }
  uint64_t v11 = 1;
LABEL_15:

  return v11;
}

void sub_1BD150C4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    *(unsigned char *)(a1 + 616) = 1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v9[3] = &unk_1E63043E8;
    uint64_t v12 = a1;
    id v10 = v5;
    id v11 = WeakRetained;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 112))(a1, v9, a3);
    if (v7 && *(unsigned char *)(a1 + 616) && !*(void *)(a1 + 40)) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to query for initial statistics: no data source available.");
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1BD150DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::reset(uint64_t result)
{
  *(unsigned char *)(result + 616) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 encodeBool:*(unsigned __int8 *)(a1 + 616) forKey:@"needs_config"];
  id v12 = v3;
  int v32 = &unk_1F1726FA0;
  double v33 = 0;
  int v38 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
  LOBYTE(v38) = 1;
  uint64_t v34 = v4;
  uint64_t v35 = 0;
  statistics::StatisticsEngine::makeCurrentBucket((uint64_t)&v32);
  uint64_t v13 = &unk_1F171B9C8;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  int v31 = 511;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 0;
  int8x16_t v14 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  uint64_t v5 = *(void *)(a1 + 136);
  char v29 = *(unsigned char *)(a1 + 144);
  char v30 = *(unsigned char *)(a1 + 145);
  BOOL v28 = *(_DWORD *)(a1 + 148) == 0;
  int8x16_t v15 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  uint64_t v7 = *(int8x16_t **)(a1 + 216);
  if (v7 != *(int8x16_t **)(a1 + 224))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v7, *v7, 8uLL);
    int8x16_t v40 = v7[1];
    char v43 = 0;
    HIBYTE(v42) = v7[2].i8[9];
    LOBYTE(v42) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>();
  }
  statistics::StatisticsBucket::makeStatistics((uint64_t)&v13);
  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::archive((uint64_t)&v39, (int8x16_t *)(a1 + 240));
  statistics::Statistics::operator=(*((statistics **)&v22 + 1), (uint64_t)&v39);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v39);
  uint64_t v8 = *(void *)(a1 + 376);
  if (v8 != a1 + 384)
  {
    HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::archive((uint64_t)&v39, (int8x16_t *)(v8 + 40));
    uint64_t v9 = *(void *)(v8 + 32);
    v46 |= 0x200u;
    uint64_t v45 = v9;
    PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>();
  }
  id v10 = *(int8x16_t **)(a1 + 184);
  if (v10 != *(int8x16_t **)(a1 + 192))
  {
    unint64_t v39 = (char *)&unk_1F1727540;
    v41.i32[0] = 3;
    int8x16_t v40 = vextq_s8(*v10, *v10, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>();
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v13);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v13);
  id v11 = *(int8x16_t **)(a1 + 584);
  if (v11 != *(int8x16_t **)(a1 + 592))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v11, *v11, 8uLL);
    int8x16_t v40 = v11[1];
    __int16 v42 = 0;
    char v43 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>();
  }
  PB::Writer::Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v39);
  [v12 encodeBytes:v40.i64[0] length:&v39[-v40.i64[0]] forKey:@"hdsce_archived_representation"];
  PB::Writer::~Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);
}

void sub_1BD1511A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v59 = a2;
  *(unsigned char *)(a1 + 616) = [v59 decodeBoolForKey:@"needs_config"];
  id v3 = v59;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v64, 0, -1.79769313e308, 1.79769313e308);
  long long v65 = 0u;
  long long v66 = 0u;
  unint64_t v107 = 0;
  id v62 = v3;
  PB::Reader::Reader((PB::Reader *)v106, (const unsigned __int8 *)[v62 decodeBytesForKey:@"hdsce_archived_representation" returnedLength:&v107]);
  uint64_t v61 = a1;
  double v99 = &unk_1F1726FA0;
  uint64_t v100 = 0;
  uint64_t v104 = 0;
  uint64_t v102 = 0;
  uint64_t v103 = 0;
  int v105 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v99, (PB::Reader *)v106);
  uint64_t v63 = v101;
  if (v100)
  {
    uint64_t v71 = 0;
    memset(v74, 0, sizeof(v74));
    long long __p = 0;
    long long v79 = 0u;
    memset(v80, 0, 26);
    memset(&v80[2], 0, 32);
    memset(v81, 0, 42);
    uint64_t v84 = 0;
    unint64_t v77 = 0;
    long long v76 = 0;
    int v78 = 0;
    uint64_t v83 = 0;
    unint64_t v82 = &v83;
    long long v85 = 0u;
    long long v86 = 0u;
    int v87 = 1065353216;
    long long v88 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    uint64_t v91 = 0;
    int v92 = 1065353216;
    long long v93 = 0u;
    long long v94 = 0u;
    int v95 = 1065353216;
    long long v96 = 0u;
    long long v97 = 0u;
    int v98 = 1065353216;
    int8x16_t v67 = vextq_s8(*(int8x16_t *)(v100 + 8), *(int8x16_t *)(v100 + 8), 8uLL);
    uint64_t v4 = *(void *)(v100 + 72);
    uint64_t v68 = *(void *)(v100 + 64);
    char v69 = *(unsigned char *)(v100 + 185);
    char v70 = *(unsigned char *)(v100 + 186);
    int8x16_t v72 = vextq_s8(*(int8x16_t *)(v100 + 24), *(int8x16_t *)(v100 + 24), 8uLL);
    uint64_t v73 = v4;
    uint64_t v5 = *(void *)(v100 + 80);
    uint64_t v6 = *(void *)(v100 + 88);
    double v60 = (void *)v100;
    if (v5 != v6)
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(*(void *)v5 + 24);
        uint64_t v9 = *(void *)(*(void *)v5 + 32);
        uint64_t v10 = *(void *)(*(void *)v5 + 8);
        uint64_t v11 = *(void *)(*(void *)v5 + 16);
        char v12 = *(unsigned char *)(*(void *)v5 + 41);
        char v13 = *(unsigned char *)(*(void *)v5 + 40);
        if ((unint64_t)v7 >= v77)
        {
          int8x16_t v14 = (char *)__p;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)__p) >> 4);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v77 - (void)__p) >> 4) > v16) {
            unint64_t v16 = 0x5555555555555556 * ((uint64_t)(v77 - (void)__p) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v77 - (void)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v17 = 0x555555555555555;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17)
          {
            unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            uint64_t v7 = v76;
            int8x16_t v14 = (char *)__p;
          }
          else
          {
            uint64_t v18 = 0;
          }
          uint64_t v19 = (void *)(v17 + 48 * v15);
          *uint64_t v19 = v9;
          v19[1] = v8;
          v19[2] = v10;
          v19[3] = v11;
          *((_WORD *)v19 + 16) = 1;
          *((unsigned char *)v19 + 40) = 0;
          *((unsigned char *)v19 + 41) = v12;
          *((unsigned char *)v19 + 42) = v13;
          uint64_t v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              long long v21 = *((_OWORD *)v7 - 3);
              long long v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            int8x16_t v14 = (char *)__p;
          }
          uint64_t v7 = (char *)(v19 + 6);
          long long __p = v20;
          long long v76 = (char *)(v19 + 6);
          unint64_t v77 = v17 + 48 * v18;
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)uint64_t v7 = v9;
          *((void *)v7 + 1) = v8;
          *((void *)v7 + 2) = v10;
          *((void *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        long long v76 = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    long long v23 = (void *)v60[13];
    if (v23)
    {
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::unarchive((uint64_t)&v108, v23);
      int v78 = v108;
      long long v79 = v109;
      v80[0] = v110;
      v80[1] = v111;
      *(void *)&v80[2] = v112;
      if (*((void *)&v80[2] + 1))
      {
        *(void *)&v80[3] = *((void *)&v80[2] + 1);
        operator delete(*((void **)&v80[2] + 1));
      }
      *(_OWORD *)((char *)&v80[2] + 8) = v113;
      v81[0] = v115;
      *(_OWORD *)&v81[1] = v116;
      *((void *)&v80[3] + 1) = v114;
      uint64_t v114 = 0;
      long long v113 = 0uLL;
      *(_OWORD *)&v81[3] = v117;
      LOWORD(v81[5]) = v118;
    }
    long long v25 = (void **)v60[17];
    for (uint64_t i = (void **)v60[18]; v25 != i; ++v25)
    {
      uint64_t v26 = (uint64_t)*v25;
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::unarchive((uint64_t)&v108, *v25);
      uint64_t v27 = *(void *)(v26 + 144);
      BOOL v28 = v83;
      char v29 = &v83;
      char v30 = &v83;
      if (v83)
      {
        do
        {
          while (1)
          {
            char v30 = (uint64_t **)v28;
            uint64_t v31 = v28[4];
            if (v31 <= v27) {
              break;
            }
            BOOL v28 = *v30;
            char v29 = v30;
            if (!*v30) {
              goto LABEL_34;
            }
          }
          if (v31 >= v27)
          {
            double v33 = (char *)v30;
            goto LABEL_37;
          }
          BOOL v28 = v30[1];
        }
        while (v28);
        char v29 = v30 + 1;
      }
LABEL_34:
      double v33 = (char *)operator new(0xB0uLL);
      *((void *)v33 + 4) = v27;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *(_OWORD *)(v33 + 120) = 0u;
      *(_OWORD *)(v33 + 136) = 0u;
      *(_OWORD *)(v33 + 152) = 0u;
      *((void *)v33 + 21) = 0;
      *(void *)double v33 = 0;
      *((void *)v33 + 1) = 0;
      *((void *)v33 + 2) = v30;
      *char v29 = (uint64_t *)v33;
      int v32 = (uint64_t *)v33;
      if (*v82)
      {
        unint64_t v82 = (uint64_t **)*v82;
        int v32 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v83, v32);
      ++v84;
LABEL_37:
      uint64_t v34 = (void *)*((void *)v33 + 13);
      *((_DWORD *)v33 + 10) = v108;
      long long v35 = v109;
      *((_OWORD *)v33 + 4) = v110;
      long long v36 = v111;
      *((_OWORD *)v33 + 3) = v35;
      *((_OWORD *)v33 + 5) = v36;
      *((void *)v33 + 12) = v112;
      if (v34)
      {
        *((void *)v33 + 14) = v34;
        operator delete(v34);
        *((void *)v33 + 13) = 0;
        *((void *)v33 + 14) = 0;
        *((void *)v33 + 15) = 0;
      }
      *(_OWORD *)(v33 + 104) = v113;
      *((void *)v33 + 15) = v114;
      *((void *)v33 + 16) = v115;
      long long v37 = v117;
      *(_OWORD *)(v33 + 136) = v116;
      uint64_t v114 = 0;
      long long v113 = 0uLL;
      *(_OWORD *)(v33 + 152) = v37;
      *((_WORD *)v33 + 84) = v118;
    }
    uint64_t v38 = v60[5];
    for (uint64_t j = v60[6]; v38 != j; v38 += 8)
    {
      double v41 = *(double *)(*(void *)v38 + 8);
      double v40 = *(double *)(*(void *)v38 + 16);
      if (v41 >= v40) {
        double v42 = *(double *)(*(void *)v38 + 16);
      }
      else {
        double v42 = *(double *)(*(void *)v38 + 8);
      }
      if (v40 < v41) {
        double v40 = *(double *)(*(void *)v38 + 8);
      }
      HKIntervalMask<double>::_insertInterval(v74, v42, v40);
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::operator=((uint64_t)v64, (uint64_t)&v67);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v67);
  }
  uint64_t v43 = v102;
  uint64_t v44 = v103;
  if (v102 != v103)
  {
    unint64_t v45 = *((void *)&v65 + 1);
    do
    {
      uint64_t v46 = *(void *)(*(void *)v43 + 24);
      uint64_t v47 = *(void *)(*(void *)v43 + 32);
      uint64_t v48 = *(void *)(*(void *)v43 + 8);
      uint64_t v49 = *(void *)(*(void *)v43 + 16);
      if (v45 >= (unint64_t)v66)
      {
        uint64_t v50 = (void *)v65;
        unint64_t v51 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v45 - v65) >> 3);
        unint64_t v52 = v51 + 1;
        if (v51 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(v66 - v65) >> 3) > v52) {
          unint64_t v52 = 0x999999999999999ALL * ((uint64_t)(v66 - v65) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v66 - v65) >> 3) >= 0x333333333333333) {
          unint64_t v53 = 0x666666666666666;
        }
        else {
          unint64_t v53 = v52;
        }
        if (v53)
        {
          unint64_t v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v53);
          unint64_t v45 = *((void *)&v65 + 1);
          uint64_t v50 = (void *)v65;
        }
        else
        {
          uint64_t v54 = 0;
        }
        unint64_t v55 = v53 + 40 * v51;
        *(void *)unint64_t v55 = v47;
        *(void *)(v55 + 8) = v46;
        *(void *)(v55 + 16) = v48;
        *(void *)(v55 + 24) = v49;
        *(_WORD *)(v55 + 32) = 1;
        unint64_t v56 = v55;
        if ((void *)v45 != v50)
        {
          do
          {
            long long v57 = *(_OWORD *)(v45 - 40);
            long long v58 = *(_OWORD *)(v45 - 24);
            *(_WORD *)(v56 - 8) = *(_WORD *)(v45 - 8);
            *(_OWORD *)(v56 - 24) = v58;
            *(_OWORD *)(v56 - 40) = v57;
            v56 -= 40;
            v45 -= 40;
          }
          while ((void *)v45 != v50);
          uint64_t v50 = (void *)v65;
        }
        unint64_t v45 = v55 + 40;
        *(void *)&long long v65 = v56;
        *((void *)&v65 + 1) = v55 + 40;
        *(void *)&long long v66 = v53 + 40 * v54;
        if (v50) {
          operator delete(v50);
        }
      }
      else
      {
        *(void *)unint64_t v45 = v47;
        *(void *)(v45 + 8) = v46;
        *(void *)(v45 + 16) = v48;
        *(void *)(v45 + 24) = v49;
        *(_WORD *)(v45 + 32) = 1;
        v45 += 40;
      }
      *((void *)&v65 + 1) = v45;
      v43 += 8;
    }
    while (v43 != v44);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v99);

  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::operator=((void *)(v61 + 112), (uint64_t)&v63);
  if ((void)v65)
  {
    *((void *)&v65 + 1) = v65;
    operator delete((void *)v65);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v64);
}

void sub_1BD151970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a2);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table((uint64_t)&STACK[0x3B0]);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x388]);
  uint64_t v9 = (void *)STACK[0x370];
  if (STACK[0x370])
  {
    STACK[0x378] = (unint64_t)v9;
    operator delete(v9);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a3);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::destroy((void *)STACK[0x338]);
  uint64_t v10 = (void *)STACK[0x2E8];
  if (STACK[0x2E8])
  {
    STACK[0x2F0] = (unint64_t)v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)STACK[0x290];
  if (STACK[0x290])
  {
    STACK[0x298] = (unint64_t)v11;
    operator delete(v11);
  }
  objc_destroyWeak((id *)&STACK[0x288]);
  char v12 = (void *)STACK[0x270];
  if (STACK[0x270])
  {
    STACK[0x278] = (unint64_t)v12;
    operator delete(v12);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x408]);
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 154) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 234) = 0u;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(void *)(a1 + 256) = a1 + 264;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_DWORD *)(a1 + 312) = 1065353216;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(void *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 376) = 1065353216;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_DWORD *)(a1 + 416) = 1065353216;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_DWORD *)(a1 + 456) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 472);
  if (v2)
  {
    *(void *)(a1 + 480) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 424);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 384);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 344);
  uint64_t v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(void *)(a1 + 328) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 280);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::destroy(*(void **)(a1 + 264));
  id v3 = *(void **)(a1 + 184);
  if (v3)
  {
    *(void *)(a1 + 192) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(void *)(a1 + 104) = v4;
    operator delete(v4);
  }
  objc_destroyWeak((id *)(a1 + 88));
  uint64_t v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(void *)(a1 + 72) = v5;
    operator delete(v5);
  }

  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_configureForStartTime(uint64_t a1)
{
  uint64_t v29 = 0;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
    uint64_t v4 = [v2 dateIntervalContainingDate:v3 index:&v29];

    uint64_t v5 = [v4 startDate];
    [v5 timeIntervalSinceReferenceDate];
    double v7 = v6;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
LABEL_5:
    double v13 = v9;

    goto LABEL_6;
  }
  id v10 = *(id *)(a1 + 64);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v11 = [v10 startDate];
    [v11 timeIntervalSinceReferenceDate];
    double v7 = v12;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
    goto LABEL_5;
  }
  double v7 = -1.79769313e308;
  double v13 = 1.79769313e308;
LABEL_6:

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v22, WeakRetained, v7, v13);

  if (*(void *)(a1 + 32) == 1) {
    char v24 = 1;
  }
  uint64_t v23 = *(void *)(a1 + 56);
  char v25 = *(unsigned char *)(a1 + 24) & 1;
  if (v28 != (char *)(a1 + 72)) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v28, *(char **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4);
  }
  objc_storeStrong(&v27, *(id *)(a1 + 632));
  if (!*(void *)(a1 + 40)) {
    int v26 = 0;
  }
  uint64_t v15 = v29;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v22);
  uint64_t v18 = v15;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v19, (uint64_t)v17);
  long long __p = 0u;
  long long v21 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::operator=((void *)(a1 + 112), (uint64_t)&v18);

  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v19);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v17);
  *(unsigned char *)(a1 + 616) = 0;
  return HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v22);
}

void sub_1BD151EC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::operator=(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::operator=((uint64_t)(a1 + 1), a2 + 8);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 59), (__n128 *)(a2 + 472));
  uint64_t v4 = *(void *)(a2 + 496);
  *(void *)(a2 + 496) = 0;
  uint64_t v5 = (void *)a1[62];
  a1[62] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 96);
  double v7 = *(unsigned char **)(a2 + 104);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(void *)(a1 + 96) = v10;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(void *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  long long v12 = *(_OWORD *)(a2 + 128);
  long long v13 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v13;
  *(_OWORD *)(a1 + 128) = v12;
  uint64_t v14 = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 176) = v14;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 184), *(const void **)(a2 + 184), *(void *)(a2 + 192), (uint64_t)(*(void *)(a2 + 192) - *(void *)(a2 + 184)) >> 4);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  long long v15 = *(_OWORD *)(a2 + 216);
  uint64_t v16 = *(void *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v15;
  unint64_t v17 = (void *)(a1 + 264);
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 248) = v16;
  *(void *)(a1 + 256) = a1 + 264;
  uint64_t v18 = *(void **)(a2 + 256);
  if (v18 != (void *)(a2 + 264))
  {
    uint64_t v19 = 0;
    uint64_t v20 = (void *)(a1 + 264);
    while (1)
    {
      long long v21 = (void *)(a1 + 264);
      if (v20 == v17) {
        goto LABEL_12;
      }
      long long v22 = v19;
      uint64_t v23 = (void *)(a1 + 264);
      if (v19)
      {
        do
        {
          long long v21 = v22;
          long long v22 = (void *)v22[1];
        }
        while (v22);
      }
      else
      {
        do
        {
          long long v21 = (void *)v23[2];
          BOOL v24 = *v21 == (void)v23;
          uint64_t v23 = v21;
        }
        while (v24);
      }
      uint64_t v25 = v18[4];
      if (v21[4] < v25)
      {
LABEL_12:
        if (v19) {
          int v26 = (uint64_t **)v21;
        }
        else {
          int v26 = (uint64_t **)(a1 + 264);
        }
        if (v19) {
          id v27 = (uint64_t **)(v21 + 1);
        }
        else {
          id v27 = (uint64_t **)(a1 + 264);
        }
        if (!*v27)
        {
LABEL_28:
          char v30 = (char *)operator new(0xB0uLL);
          *((void *)v30 + 4) = v18[4];
          *((_DWORD *)v30 + 10) = *((_DWORD *)v18 + 10);
          long long v31 = *((_OWORD *)v18 + 3);
          long long v32 = *((_OWORD *)v18 + 5);
          *((_OWORD *)v30 + 4) = *((_OWORD *)v18 + 4);
          *((_OWORD *)v30 + 5) = v32;
          *((_OWORD *)v30 + 3) = v31;
          uint64_t v33 = v18[12];
          *((void *)v30 + 13) = 0;
          *((void *)v30 + 12) = v33;
          *((void *)v30 + 14) = 0;
          *((void *)v30 + 15) = 0;
          std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)v30 + 13, (const void *)v18[13], v18[14], (uint64_t)(v18[14] - v18[13]) >> 4);
          *((void *)v30 + 16) = v18[16];
          long long v34 = *(_OWORD *)(v18 + 17);
          long long v35 = *(_OWORD *)(v18 + 19);
          *((void *)v30 + 21) = v18[21];
          *(_OWORD *)(v30 + 152) = v35;
          *(_OWORD *)(v30 + 136) = v34;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 256), (uint64_t)v26, v27, (uint64_t *)v30);
        }
      }
      else
      {
        id v27 = (uint64_t **)(a1 + 264);
        int v26 = (uint64_t **)(a1 + 264);
        if (!v19) {
          goto LABEL_28;
        }
        BOOL v28 = v19;
        while (1)
        {
          while (1)
          {
            int v26 = (uint64_t **)v28;
            uint64_t v29 = v28[4];
            if (v29 <= v25) {
              break;
            }
            BOOL v28 = *v26;
            id v27 = v26;
            if (!*v26) {
              goto LABEL_28;
            }
          }
          if (v29 >= v25) {
            break;
          }
          BOOL v28 = v26[1];
          if (!v28)
          {
            id v27 = v26 + 1;
            goto LABEL_28;
          }
        }
      }
      long long v36 = (void *)v18[1];
      if (v36)
      {
        do
        {
          long long v37 = v36;
          long long v36 = (void *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          long long v37 = (void *)v18[2];
          BOOL v24 = *v37 == (void)v18;
          uint64_t v18 = v37;
        }
        while (!v24);
      }
      if (v37 == (void *)(a2 + 264)) {
        break;
      }
      uint64_t v19 = (void *)*v17;
      uint64_t v20 = *(void **)(a1 + 256);
      uint64_t v18 = v37;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 280, a2 + 280);
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 320), *(const void **)(a2 + 320), *(void *)(a2 + 328), (uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 344, a2 + 344);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 384, a2 + 384);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 424, a2 + 424);
  return a1;
}

void sub_1BD1522E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, id *location, void **a12)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v17);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  uint64_t v19 = *v15;
  if (*v15)
  {
    *(void *)(v12 + 328) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::destroy(*v13);
  uint64_t v20 = *a9;
  if (*a9)
  {
    *(void *)(v12 + 192) = v20;
    operator delete(v20);
  }
  long long v21 = *a10;
  if (*a10)
  {
    *(void *)(v12 + 104) = v21;
    operator delete(v21);
  }
  objc_destroyWeak(location);
  long long v22 = *a12;
  if (*a12)
  {
    *(void *)(v12 + 72) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::operator=(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  long long v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v5;

  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  id WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  uint64_t v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(void *)(a1 + 104) = v9;
    operator delete(v9);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  long long v10 = *(_OWORD *)(a2 + 128);
  long long v11 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v11;
  *(_OWORD *)(a1 + 128) = v10;
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 184, (__n128 *)(a2 + 184));
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  long long v12 = *(_OWORD *)(a2 + 216);
  long long v13 = *(_OWORD *)(a2 + 232);
  *(_WORD *)(a1 + 248) = *(_WORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = v13;
  *(_OWORD *)(a1 + 216) = v12;
  uint64_t v14 = a1 + 264;
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::destroy(*(void **)(a1 + 264));
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  uint64_t v15 = *(void *)(a2 + 264);
  *(void *)(a1 + 264) = v15;
  uint64_t v16 = *(void *)(a2 + 272);
  *(void *)(a1 + 272) = v16;
  if (v16)
  {
    *(void *)(v15 + 16) = v14;
    *(void *)(a2 + 256) = a2 + 264;
    *(void *)(a2 + 264) = 0;
    *(void *)(a2 + 272) = 0;
  }
  else
  {
    *(void *)(a1 + 256) = v14;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 280, (uint64_t *)(a2 + 280));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 320, (__n128 *)(a2 + 320));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 344, (uint64_t *)(a2 + 344));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 384, (uint64_t *)(a2 + 384));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 424, (uint64_t *)(a2 + 424));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  double v4 = *(double *)a2;
  id v5 = objc_alloc(MEMORY[0x1E4F1C9C8]);
  long long v6 = (double *)(a2 + 40);
  if (v4 != -1.79769313e308) {
    long long v6 = (double *)a2;
  }
  uint64_t v59 = [v5 initWithTimeIntervalSinceReferenceDate:*v6];
  uint64_t v62 = a2;
  if (*(double *)(a2 + 8) == 1.79769313e308) {
    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 48)];
  }
  else {
    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 8)];
  }
  uint64_t v8 = (void *)v7;
  uint64_t v9 = (void *)v59;
  id v10 = *(id *)(a1 + 16);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v11 = *(id *)(a1 + 16);
    if ([v11 shouldUseUnderlyingTypeForStatistics])
    {
      uint64_t v12 = [v11 underlyingSampleType];

      id v10 = (id)v12;
    }
  }
  long long v13 = (void *)[objc_alloc(MEMORY[0x1E4F2B5B0]) initWithDataType:v10 startDate:v59 endDate:v8];
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = (id *)(a1 + 48);
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      id v15 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      uint64_t v16 = *(uint64_t **)(a2 + 320);
      uint64_t v17 = *(uint64_t **)(a2 + 328);
      while (v16 != v17)
      {
        uint64_t v18 = *v16;
        id v19 = objc_loadWeakRetained(v2);
        uint64_t v20 = [v19 sourceForSourceID:v18];

        if (v20)
        {
          if (([v15 containsObject:v20] & 1) == 0) {
            [v15 addObject:v20];
          }
        }

        ++v16;
      }
      uint64_t v2 = (id *)[v15 copy];
      uint64_t v9 = (void *)v59;
      [v13 _setSources:v2];
    }
  }

  v68[0] = &unk_1F17260F0;
  v68[3] = v68;
  id v60 = v13;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)v70, (uint64_t)v68);
  int8x16_t v72 = 0;
  long long v21 = operator new(0x28uLL);
  *long long v21 = &unk_1F1725FD0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(v21 + 1), (uint64_t)v70);
  int8x16_t v72 = v21;
  id v61 = v60;
  long long v22 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v23 = [MEMORY[0x1E4F2B618] secondUnit];
  __n128 v24 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v64, v62);
  if (!v72) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v25 = (*(uint64_t (**)(void *, unsigned char *, __n128))(*v72 + 48))(v72, v64, v24);
  int v26 = *(double **)(v25 + 8);
  double v27 = 0.0;
  while (v26 != *(double **)(v25 + 16))
  {
    double v29 = *v26;
    double v28 = v26[1];
    v26 += 2;
    double v27 = v27 + v28 - v29;
  }
  char v30 = [v22 quantityWithUnit:v23 doubleValue:v27 + *(double *)(v25 + 32)];
  [v61 setDuration:v30];

  if (__p)
  {
    int8x16_t v67 = __p;
    operator delete(__p);
  }

  __n128 v31 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v64, v62);
  if (!v72) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  objc_msgSend(v61, "setDataCount:", *(void *)(*(uint64_t (**)(void *, unsigned char *, __n128))(*v72 + 48))(v72, v64, v31));
  if (__p)
  {
    int8x16_t v67 = __p;
    operator delete(__p);
  }
  if (*(unsigned char *)(a1 + 24))
  {
    id v32 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v33 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier((uint64_t)v64, v62);
    for (uint64_t i = v65; i; uint64_t i = (uint64_t **)*i)
    {
      long long v35 = i[2];
      long long v36 = (void *)MEMORY[0x1E4F2B370];
      long long v37 = [MEMORY[0x1E4F2B618] secondUnit];
      if (!v72) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v38 = (*(uint64_t (**)(void *, uint64_t *))(*v72 + 48))(v72, (uint64_t *)i + 3);
      unint64_t v39 = *(double **)(v38 + 8);
      double v40 = 0.0;
      while (v39 != *(double **)(v38 + 16))
      {
        double v42 = *v39;
        double v41 = v39[1];
        v39 += 2;
        double v40 = v40 + v41 - v42;
      }
      uint64_t v43 = [v36 quantityWithUnit:v37 doubleValue:v40 + *(double *)(v38 + 32)];
      [v32 setObject:v43 forKeyedSubscript:v35];

      if (!v72) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)(*(uint64_t (**)(void *, uint64_t *))(*v72 + 48))(v72, (uint64_t *)i + 3));
      uint64_t v2 = (id *)objc_claimAutoreleasedReturnValue();
      [v33 setObject:v2 forKeyedSubscript:v35];
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)v64);
    [v61 setDurationBySource:v32];
    [v61 setDataCountBySource:v33];
  }
  std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v71);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v70);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)v69, (uint64_t)v68);
  int8x16_t v72 = 0;
  uint64_t v44 = operator new(0x28uLL);
  *uint64_t v44 = &unk_1F1726060;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(v44 + 1), (uint64_t)v69);
  int8x16_t v72 = v44;
  id v45 = v61;
  __n128 v46 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v64, v62);
  if (!v72) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  objc_msgSend(v45, "setDataCount:", *(void *)(*(uint64_t (**)(void *, unsigned char *, __n128))(*v72 + 48))(v72, v64, v46));
  if (__p)
  {
    int8x16_t v67 = __p;
    operator delete(__p);
  }
  if (*(unsigned char *)(a1 + 24))
  {
    id v47 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier((uint64_t)v64, v62);
    for (uint64_t j = v65; j; uint64_t j = (uint64_t **)*j)
    {
      uint64_t v49 = j[2];
      if (!v72) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v50 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)(*(uint64_t (**)(void *, uint64_t *))(*v72 + 48))(v72, (uint64_t *)j + 3));
      [v47 setObject:v50 forKeyedSubscript:v49];
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)v64);
    [v45 setDataCountBySource:v47];
  }
  std::__function::__value_func<HDStatisticsPresence const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v71);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v69);

  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v68);
  unint64_t v51 = [*(id *)(a1 + 16) _unitForChangeInCanonicalUnit];
  unint64_t v52 = [v45 averageQuantity];
  if (v52)
  {
    a1 = [v45 averageQuantity];
    if (([(id)a1 isCompatibleWithUnit:v51] & 1) == 0)
    {

LABEL_59:
      [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8], @"Expected compatibility with %@", v51, v60 format];
      goto LABEL_60;
    }
  }
  unint64_t v53 = [v45 minimumQuantity];
  if (v53)
  {
    uint64_t v2 = [v45 minimumQuantity];
    if (![v2 isCompatibleWithUnit:v51])
    {
      int v54 = 1;
      goto LABEL_53;
    }
  }
  unint64_t v55 = [v45 maximumQuantity];
  if (v55)
  {
    unint64_t v56 = [v45 maximumQuantity];
    int v57 = [v56 isCompatibleWithUnit:v51];

    int v54 = v57 ^ 1;
    if (v53) {
      goto LABEL_53;
    }
  }
  else
  {
    int v54 = 0;
    if (v53)
    {
LABEL_53:

      if (v52) {
        goto LABEL_54;
      }
LABEL_58:

      if (!v54) {
        goto LABEL_60;
      }
      goto LABEL_59;
    }
  }
  if (!v52) {
    goto LABEL_58;
  }
LABEL_54:

  if (v54) {
    goto LABEL_59;
  }
LABEL_60:

  return v45;
}

void sub_1BD152DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (v37) {
  if (v36)
  }

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 304);
  uint64_t v2 = *(void *)(a1 + 320);
  if (v1 != (*(void *)(a1 + 328) - v2) >> 3)
  {
    double v4 = (void **)(a1 + 320);
    *(void *)(a1 + 328) = v2;
    std::vector<long long>::reserve((void **)(a1 + 320), v1);
    id v5 = *(void **)(a1 + 296);
    if (v5)
    {
      long long v6 = *(char **)(a1 + 328);
      do
      {
        uint64_t v7 = v5[2];
        unint64_t v8 = *(void *)(a1 + 336);
        if ((unint64_t)v6 >= v8)
        {
          id v10 = (char *)*v4;
          uint64_t v11 = (v6 - (unsigned char *)*v4) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            id v10 = *(char **)(a1 + 320);
            long long v6 = *(char **)(a1 + 328);
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v16 = (void *)(v14 + 8 * v11);
          void *v16 = v7;
          uint64_t v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            uint64_t v17 = *((void *)v6 - 1);
            v6 -= 8;
            *--uint64_t v16 = v17;
          }
          *(void *)(a1 + 320) = v16;
          *(void *)(a1 + 328) = v9;
          *(void *)(a1 + 336) = v14 + 8 * v15;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)long long v6 = v7;
          uint64_t v9 = v6 + 8;
        }
        *(void *)(a1 + 328) = v9;
        id v5 = (void *)*v5;
        long long v6 = v9;
      }
      while (v5);
    }
    uint64_t v18 = (id *)(a1 + 88);
    id WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      id v20 = objc_loadWeakRetained(v18);
      [v20 orderSourceIDs:v4];
    }
  }
}

void sub_1BD1531BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2) {
    a2 = v4 * floor(a2 / v4);
  }
  double v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    uint64_t v125 = (void **)(a1 + 96);
    long long v121 = (double **)(a1 + 64);
    long long v119 = (uint64_t *)(a1 + 120);
    location = (id *)(a1 + 88);
    uint64_t v115 = (double **)(a1 + 184);
    uint64_t v114 = (void *)(a1 + 264);
    while (1)
    {
      unint64_t v6 = *(void *)(a1 + 96);
      uint64_t v7 = *(long long **)(a1 + 104);
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v7 - v6) >> 4);
      if (v8) {
        break;
      }
LABEL_124:
      *(double *)(a1 + 56) = a2;
LABEL_125:
      double v111 = *(double *)(a1 + 56);
      if (v111 == v5)
      {
        uint64_t v112 = [MEMORY[0x1E4F28B00] currentHandler];
        long long v113 = objc_msgSend(NSString, "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence, HDStatisticsTimeInterval>>>::_mergeThroughTime(double) [Statistics = HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence, HDStatisticsTimeInterval>>]");
        [v112 handleFailureInFunction:v113 file:@"HDStatisticsBucket.hpp" lineNumber:234 description:@"Failed to make forward progress during statistics merge."];

        double v111 = *(double *)(a1 + 56);
      }
      double v5 = v111;
      if (v111 >= a2) {
        return;
      }
    }
    if (v8 != 1)
    {
      double v20 = a2;
      double v21 = a2;
      double v22 = v5;
      uint64_t v23 = *(void *)(a1 + 96);
      if ((long long *)v6 != v7)
      {
        do
        {
          double v24 = *(double *)(v23 + 8);
          double v25 = *(double *)(v23 + 16);
          if (v24 > v22 && v24 < v21) {
            double v21 = *(double *)(v23 + 8);
          }
          if (v25 > v5) {
            double v27 = *(double *)(v23 + 16);
          }
          else {
            double v27 = v20;
          }
          if (v25 < v20)
          {
            double v22 = v5;
            double v20 = v27;
          }
          v23 += 48;
        }
        while ((long long *)v23 != v7);
      }
      if (v20 >= v21) {
        double v28 = v21;
      }
      else {
        double v28 = v20;
      }
      double v29 = *(double *)(a1 + 16);
      if (v29 > 0.0)
      {
        double v30 = v29 * floor(v28 / v29);
        double v31 = v29 * floor((v29 + v5) / v29);
        if (v30 >= v31) {
          double v28 = v30;
        }
        else {
          double v28 = v31;
        }
      }
      char *v125 = 0;
      v125[1] = 0;
      v125[2] = 0;
      if ((long long *)v6 != v7)
      {
        if (v8 > 0x555555555555555) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        id v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v8);
        long long v35 = *(char **)(a1 + 96);
        long long v34 = *(char **)(a1 + 104);
        long long v36 = v32;
        if (v34 != v35)
        {
          do
          {
            long long v37 = *((_OWORD *)v34 - 3);
            long long v38 = *((_OWORD *)v34 - 2);
            *(_OWORD *)(v36 - 21) = *(_OWORD *)(v34 - 21);
            *((_OWORD *)v36 - 3) = v37;
            *((_OWORD *)v36 - 2) = v38;
            v36 -= 48;
            v34 -= 48;
          }
          while (v34 != v35);
          long long v34 = (char *)*v125;
        }
        *(void *)(a1 + 96) = v36;
        *(void *)(a1 + 104) = v32;
        *(void *)(a1 + 112) = &v32[48 * v33];
        if (v34) {
          operator delete(v34);
        }
      }
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_updateSourceOrder(a1);
      id WeakRetained = objc_loadWeakRetained(location);

      if (WeakRetained)
      {
        *(void *)&v127.var0 = a1;
        unint64_t v40 = 126 - 2 * __clz(v8);
        if ((long long *)v6 == v7) {
          uint64_t v41 = 0;
        }
        else {
          uint64_t v41 = v40;
        }
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(v6, v7, (uint64_t)&v127, v41, 1);
      }
      if (*(unsigned char *)(a1 + 25)) {
        id v118 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      }
      else {
        id v118 = 0;
      }
      long long v117 = (void *)v6;
      if ((long long *)v6 == v7)
      {
LABEL_106:
        *(double *)(a1 + 208) = HKIntervalMask<double>::removeIntervalsBefore(v115, v28) + *(double *)(a1 + 208);
        long long v96 = *(void **)(a1 + 256);
        if (v96 != v114)
        {
          do
          {
            *((double *)v96 + 16) = HKIntervalMask<double>::removeIntervalsBefore((double **)v96 + 13, v28)
                                  + *((double *)v96 + 16);
            long long v97 = (void *)v96[1];
            if (v97)
            {
              do
              {
                int v98 = v97;
                long long v97 = (void *)*v97;
              }
              while (v97);
            }
            else
            {
              do
              {
                int v98 = (void *)v96[2];
                BOOL v99 = *v98 == (void)v96;
                long long v96 = v98;
              }
              while (!v99);
            }
            long long v96 = v98;
          }
          while (v98 != v114);
        }
        *(double *)(a1 + 56) = v28;

        if (v117) {
          operator delete(v117);
        }
        goto LABEL_125;
      }
      int64_t v120 = 0;
      char v44 = 0;
      unint64_t v45 = v6;
      while (2)
      {
        long long v46 = *(_OWORD *)(v45 + 16);
        *(_OWORD *)&v127.var0 = *(_OWORD *)v45;
        *(_OWORD *)&v127.double var2 = v46;
        *(void *)&v127.BOOL var4 = *(void *)(v45 + 32);
        uint64_t v47 = v46;
        double v48 = v28 - v127.var1;
        double v49 = *(double *)&v46 - v127.var1;
        if (v49 - (v28 - v127.var1) < 0.01)
        {
          int64_t v50 = 0;
          BOOL var4 = 0;
          BOOL var5 = 0;
          double v53 = 0.0;
          uint64_t v47 = 0;
          double v54 = 0.0;
          if (!v127.var4) {
            goto LABEL_59;
          }
LABEL_54:
          BOOL v123 = var5;
          int64_t v124 = v50;
          HDRawQuantitySample::applyMask((uint64_t)&v127, v121);
          int v56 = *(unsigned __int8 *)(v45 + 42);
          int v57 = *(unsigned __int8 *)(v45 + 41);
          char v122 = *(unsigned char *)(v45 + 40);
          if (!v127.var4) {
            goto LABEL_87;
          }
          if (v44)
          {
            unint64_t var3 = v127.var3;
            if (v120 == v127.var3 || *(unsigned char *)(a1 + 24))
            {
              HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::addSample(v119, &v127, v56 == 0);
              int v56 = 1;
            }
          }
          else
          {
            HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::addSample(v119, &v127, v56 == 0);
            int v56 = 1;
            unint64_t var3 = v127.var3;
            int64_t v120 = v127.var3;
          }
          if (!*(unsigned char *)(a1 + 25)) {
            goto LABEL_86;
          }
          char v69 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a1, var3);
          if (!v69) {
            goto LABEL_85;
          }
          char v70 = [v118 objectForKeyedSubscript:v69];
          uint64_t v71 = v70;
          if (v70)
          {
            if ([v70 longLongValue] != var3 && !*(unsigned char *)(a1 + 24))
            {
LABEL_84:

LABEL_85:
LABEL_86:
              char v44 = 1;
LABEL_87:
              if (var4)
              {
                BOOL v84 = v56 != 0;
                long long v86 = *(char **)(a1 + 104);
                unint64_t v85 = *(void *)(a1 + 112);
                if ((unint64_t)v86 < v85)
                {
                  *(double *)long long v86 = v54;
                  *((double *)v86 + 1) = v53;
                  *((void *)v86 + 2) = v47;
                  *((void *)v86 + 3) = v124;
                  v86[32] = var4;
                  v86[33] = v123;
                  v86[40] = v122;
                  v86[41] = v57;
                  uint64_t v63 = v86 + 48;
                  v86[42] = v84;
                  goto LABEL_104;
                }
                uint64_t v80 = (char *)*v125;
                unint64_t v87 = 0xAAAAAAAAAAAAAAABLL * ((v86 - (unsigned char *)*v125) >> 4);
                unint64_t v88 = v87 + 1;
                if (v87 + 1 > 0x555555555555555) {
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v89 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v85 - (void)v80) >> 4);
                if (2 * v89 > v88) {
                  unint64_t v88 = 2 * v89;
                }
                if (v89 >= 0x2AAAAAAAAAAAAAALL) {
                  unint64_t v90 = 0x555555555555555;
                }
                else {
                  unint64_t v90 = v88;
                }
                if (v90)
                {
                  unint64_t v90 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v90);
                  uint64_t v80 = *(char **)(a1 + 96);
                  long long v86 = *(char **)(a1 + 104);
                }
                else
                {
                  uint64_t v91 = 0;
                }
                unint64_t v92 = v90 + 48 * v87;
                *(double *)unint64_t v92 = v54;
                *(double *)(v92 + 8) = v53;
                *(void *)(v92 + 16) = v47;
                *(void *)(v92 + 24) = v124;
                *(unsigned char *)(v92 + 32) = var4;
                *(unsigned char *)(v92 + 33) = v123;
                *(unsigned char *)(v92 + 40) = v122;
                *(unsigned char *)(v92 + 41) = v57;
                *(unsigned char *)(v92 + 42) = v84;
                unint64_t v93 = v92;
                if (v86 != v80)
                {
                  do
                  {
                    long long v94 = *((_OWORD *)v86 - 3);
                    long long v95 = *((_OWORD *)v86 - 2);
                    *(_OWORD *)(v93 - 21) = *(_OWORD *)(v86 - 21);
                    *(_OWORD *)(v93 - 48) = v94;
                    *(_OWORD *)(v93 - 32) = v95;
                    v93 -= 48;
                    v86 -= 48;
                  }
                  while (v86 != v80);
                  uint64_t v80 = (char *)*v125;
                }
                uint64_t v63 = (_OWORD *)(v92 + 48);
                *(void *)(a1 + 96) = v93;
                *(void *)(a1 + 104) = v92 + 48;
                *(void *)(a1 + 112) = v90 + 48 * v91;
                if (v80) {
LABEL_103:
                }
                  operator delete(v80);
                goto LABEL_104;
              }
              goto LABEL_105;
            }
          }
          else
          {
            unint64_t v81 = [NSNumber numberWithLongLong:var3];
            [v118 setObject:v81 forKeyedSubscript:v69];
          }
          unint64_t v82 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(a1, var3);
          uint64_t v83 = (uint64_t *)HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_statisticsForSource(a1, v82);
          HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::addSample(v83, &v127, v57 == 0);
          LOBYTE(v57) = 1;
          goto LABEL_84;
        }
        if (v48 < 0.01)
        {
          v127.BOOL var4 = 0;
          goto LABEL_59;
        }
        double v55 = v48 / v49 * v127.var0;
        int64_t v50 = v127.var3;
        BOOL var5 = v127.var5;
        double v54 = v127.var0 - v55;
        v127.var0 = v55;
        v127.double var2 = v28;
        double v53 = v28;
        BOOL var4 = v127.var4;
        if (v127.var4) {
          goto LABEL_54;
        }
LABEL_59:
        uint64_t v59 = *(_OWORD **)(a1 + 104);
        unint64_t v60 = *(void *)(a1 + 112);
        if ((unint64_t)v59 < v60)
        {
          long long v61 = *(_OWORD *)v45;
          long long v62 = *(_OWORD *)(v45 + 32);
          v59[1] = *(_OWORD *)(v45 + 16);
          v59[2] = v62;
          *uint64_t v59 = v61;
          uint64_t v63 = v59 + 3;
          goto LABEL_104;
        }
        unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * (((char *)v59 - (unsigned char *)*v125) >> 4);
        unint64_t v65 = v64 + 1;
        if (v64 + 1 > 0x555555555555555) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - (void)*v125) >> 4);
        if (2 * v66 > v65) {
          unint64_t v65 = 2 * v66;
        }
        if (v66 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v67 = 0x555555555555555;
        }
        else {
          unint64_t v67 = v65;
        }
        if (v67) {
          unint64_t v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v67);
        }
        else {
          uint64_t v68 = 0;
        }
        int8x16_t v72 = (_OWORD *)(v67 + 48 * v64);
        long long v73 = *(_OWORD *)v45;
        long long v74 = *(_OWORD *)(v45 + 32);
        v72[1] = *(_OWORD *)(v45 + 16);
        v72[2] = v74;
        *int8x16_t v72 = v73;
        long long v76 = *(char **)(a1 + 96);
        long long v75 = *(char **)(a1 + 104);
        unint64_t v77 = v72;
        if (v75 != v76)
        {
          do
          {
            long long v78 = *((_OWORD *)v75 - 3);
            long long v79 = *((_OWORD *)v75 - 2);
            *(_OWORD *)((char *)v77 - 21) = *(_OWORD *)(v75 - 21);
            *(v77 - 3) = v78;
            *(v77 - 2) = v79;
            v77 -= 3;
            v75 -= 48;
          }
          while (v75 != v76);
          long long v75 = (char *)*v125;
        }
        uint64_t v63 = v72 + 3;
        *(void *)(a1 + 96) = v77;
        *(void *)(a1 + 104) = v72 + 3;
        *(void *)(a1 + 112) = v67 + 48 * v68;
        if (v75)
        {
          uint64_t v80 = v75;
          goto LABEL_103;
        }
LABEL_104:
        *(void *)(a1 + 104) = v63;
LABEL_105:
        v45 += 48;
        if ((long long *)v45 == v7) {
          goto LABEL_106;
        }
        continue;
      }
    }
    double v10 = *(double *)v6;
    double v9 = *(double *)(v6 + 8);
    double v11 = *(double *)(v6 + 16);
    int64_t v12 = *(void *)(v6 + 24);
    char v13 = *(unsigned char *)(v6 + 32);
    char v14 = *(unsigned char *)(v6 + 33);
    double v15 = a2 - v9;
    if (a2 - v9 >= 0.01)
    {
      if (v11 - v9 - v15 < 0.01)
      {
        uint64_t v42 = 0;
        char v43 = 0;
        double v18 = 0.0;
        double v17 = *(double *)(v6 + 16);
        char v16 = *(unsigned char *)(v6 + 32);
        double v19 = 0.0;
        double v11 = 0.0;
        char v13 = 0;
LABEL_117:
        int v101 = *(unsigned __int8 *)(v6 + 42);
        int v102 = *(unsigned __int8 *)(v6 + 41);
        int v103 = *(unsigned __int8 *)(v6 + 40);
        v127.var0 = v10;
        v127.double var1 = v9;
        v127.double var2 = v17;
        v127.unint64_t var3 = v12;
        v127.BOOL var4 = v16;
        v127.BOOL var5 = v14;
        *(_DWORD *)(&v127.var5 + 1) = *(_DWORD *)(v6 + 34);
        *(_WORD *)(&v127.var5 + 5) = *(_WORD *)(v6 + 38);
        *(double *)&long long v128 = v18;
        *((double *)&v128 + 1) = v19;
        *(double *)&long long v129 = v11;
        *((void *)&v129 + 1) = v42;
        LOBYTE(v130) = v13;
        HIBYTE(v130) = v43;
        HDRawQuantitySample::applyMask((uint64_t)&v127, v121);
        BOOL v104 = v103 != 0;
        BOOL v105 = v102 != 0;
        BOOL v106 = v101 != 0;
        if (v127.var4)
        {
          HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::addSample(v119, &v127, v101 == 0);
          if (*(unsigned char *)(a1 + 25))
          {
            unint64_t v107 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(a1, v127.var3);
            int v108 = (uint64_t *)HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_statisticsForSource(a1, v107);
            HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::addSample(v108, &v127, v102 == 0);
          }
          BOOL v104 = 1;
          BOOL v105 = 1;
          BOOL v106 = 1;
        }
        if ((_BYTE)v130)
        {
          LOWORD(v126) = v130;
          long long v109 = v129;
          long long v110 = (char *)*v125;
          *(_OWORD *)long long v110 = v128;
          *((_OWORD *)v110 + 1) = v109;
          *((void *)v110 + 4) = v126;
          v110[40] = v104;
          v110[41] = v105;
          v110[42] = v106;
        }
        else
        {
          *(void *)(a1 + 104) = *(void *)(a1 + 96);
        }
        goto LABEL_124;
      }
      double v100 = v10 * (v15 / (v11 - v9));
      double v17 = a2;
      char v16 = *(unsigned char *)(v6 + 32);
      double v18 = v10 - v100;
      double v10 = v100;
      double v19 = a2;
    }
    else
    {
      char v16 = 0;
      double v17 = *(double *)(v6 + 16);
      double v18 = *(double *)v6;
      double v19 = *(double *)(v6 + 8);
    }
    uint64_t v42 = *(void *)(v6 + 24);
    char v43 = *(unsigned char *)(v6 + 33);
    goto LABEL_117;
  }
}

void sub_1BD153B40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::addSample(uint64_t *result, HDRawQuantitySample *a2, int a3)
{
  double v4 = a2;
  double v5 = result;
  int v6 = 2 * (a2->var0 != -1.79769313e308);
  if (a2->var0 == 1.79769313e308) {
    int v6 = 1;
  }
  if (!v6)
  {
    if (*(_DWORD *)result || result[1]) {
      return result;
    }
    if (a3) {
      result[1] = 1;
    }
    uint64_t v7 = result + 7;
    goto LABEL_26;
  }
  if (v6 == 1)
  {
    if (*(_DWORD *)result) {
      return result;
    }
    int v9 = 1;
LABEL_17:
    *(_OWORD *)(result + 1) = 0u;
    double v10 = result + 1;
    result[7] = 0;
    *(_DWORD *)BOOL result = v9;
    int64_t v12 = result + 8;
    double v11 = (void *)result[8];
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 5) = 0u;
    if (v11)
    {
      v5[9] = (uint64_t)v11;
      operator delete(v11);
      int v13 = *((unsigned __int8 *)v5 + 48);
      _OWORD *v12 = 0u;
      *((_OWORD *)v5 + 5) = 0u;
      if (v13 && *((double *)v5 + 3) > *((double *)v5 + 13)) {
        goto LABEL_23;
      }
    }
    else
    {
      _OWORD *v12 = 0uLL;
      *((_OWORD *)v5 + 5) = 0uLL;
    }
    long long v14 = *((_OWORD *)v5 + 7);
    *((_OWORD *)v5 + 1) = *((_OWORD *)v5 + 6);
    *((_OWORD *)v5 + 2) = v14;
    *((_WORD *)v5 + 24) = *((_WORD *)v5 + 64);
LABEL_23:
    if (a3) {
      ++*v10;
    }
    uint64_t v7 = v5 + 7;
LABEL_26:
    a2 = v4;
    int v8 = a3;
    goto LABEL_27;
  }
  if (v6 != 2) {
    return result;
  }
  if (*(_DWORD *)result != 2)
  {
    int v9 = 2;
    goto LABEL_17;
  }
  ++result[1];
  uint64_t v7 = result + 7;
  int v8 = 1;
LABEL_27:

  return HDStatisticsTimeInterval::addSample(v7, a2, v8);
}

unint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    double v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((void *)(a1 + 344), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a1, a2);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      id v10 = v6;
      uint64_t v7 = (void *)(a1 + 384);
      int v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        double v11 = &v10;
        *((void *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        id v6 = v10;
      }
    }
  }
  return a2;
}

void sub_1BD153E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  double v4 = (id *)(a1 + 88);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    id v6 = (void *)(a1 + 424);
    uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
    if (v7)
    {
      id v8 = (id)v7[3];
    }
    else
    {
      id v9 = objc_loadWeakRetained(v4);
      id v8 = [v9 bundleIdentifierForSourceID:a2];

      if (v8)
      {
        id v10 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
        objc_storeStrong(v10 + 3, v8);
      }
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1BD153EF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v12 = a2 - 3;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 4);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v103 = *((void *)a2 - 3);
                uint64_t v104 = *(void *)(v13 + 24);
                if (v103 == v104) {
                  return;
                }
                BOOL v105 = *(char **)(*(void *)a3 + 320);
                BOOL v106 = *(char **)(*(void *)a3 + 328);
                unint64_t v107 = v105;
                int v108 = v105;
                if (v105 == v106) {
                  goto LABEL_171;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>((long long *)v13, (long long *)(v13 + 48), a2 - 3, a3);
                return;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, (uint64_t)(a2 - 3), a3);
                return;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, v13 + 144, (uint64_t)(a2 - 3), a3);
                return;
              default:
                JUMPOUT(0);
            }
            do
            {
              if (*(void *)v108 == v103) {
                goto LABEL_168;
              }
              v108 += 8;
            }
            while (v108 != v106);
            int v108 = *(char **)(*(void *)a3 + 328);
LABEL_168:
            while (*(void *)v107 != v104)
            {
              v107 += 8;
              if (v107 == v106)
              {
                unint64_t v107 = *(char **)(*(void *)a3 + 328);
                break;
              }
            }
LABEL_171:
            if (v108 - v105 < v107 - v105)
            {
              *(_OWORD *)v226 = *(_OWORD *)(v13 + 16);
              *(_OWORD *)&v226[16] = *(_OWORD *)(v13 + 32);
              long long v218 = *(_OWORD *)v13;
              long long v109 = *v12;
              long long v110 = *(a2 - 2);
              *(_OWORD *)(v13 + 27) = *(long long *)((char *)a2 - 21);
              *(_OWORD *)unint64_t v13 = v109;
              *(_OWORD *)(v13 + 16) = v110;
              *(long long *)((char *)a2 - 21) = *(_OWORD *)&v226[11];
              long long *v12 = v218;
              *(a2 - 2) = *(_OWORD *)v226;
            }
            return;
          }
          if (v14 <= 1151)
          {
            double v111 = (long long *)(v13 + 48);
            BOOL v113 = (long long *)v13 == a2 || v111 == a2;
            if (a5)
            {
              if (!v113)
              {
                unint64_t v114 = v13;
                do
                {
                  unint64_t v115 = v114;
                  unint64_t v114 = (unint64_t)v111;
                  uint64_t v116 = *(void *)(v115 + 72);
                  uint64_t v117 = *(void *)(v115 + 24);
                  if (v116 != v117)
                  {
                    id v118 = *(char **)(*(void *)a3 + 320);
                    long long v119 = *(char **)(*(void *)a3 + 328);
                    int64_t v120 = v118;
                    long long v121 = v118;
                    if (v118 != v119)
                    {
                      do
                      {
                        if (*(void *)v121 == v116) {
                          goto LABEL_196;
                        }
                        v121 += 8;
                      }
                      while (v121 != v119);
                      long long v121 = *(char **)(*(void *)a3 + 328);
LABEL_196:
                      while (*(void *)v120 != v117)
                      {
                        v120 += 8;
                        if (v120 == v119)
                        {
                          int64_t v120 = *(char **)(*(void *)a3 + 328);
                          break;
                        }
                      }
                    }
                    if (v121 - v118 < v120 - v118)
                    {
                      uint64_t v227 = *(void *)(v114 + 16);
                      long long v219 = *(_OWORD *)v114;
                      long long v236 = *(_OWORD *)(v115 + 80);
                      unint64_t v122 = v114;
                      while (1)
                      {
                        long long v123 = *(_OWORD *)(v115 + 16);
                        *(_OWORD *)unint64_t v122 = *(_OWORD *)v115;
                        *(_OWORD *)(v122 + 16) = v123;
                        *(_OWORD *)(v122 + 27) = *(_OWORD *)(v115 + 27);
                        if (v115 == v13) {
                          break;
                        }
                        unint64_t v122 = v115;
                        uint64_t v124 = *(void *)(v115 - 24);
                        if (v116 != v124)
                        {
                          uint64_t v125 = *(char **)(*(void *)a3 + 320);
                          uint64_t v126 = *(char **)(*(void *)a3 + 328);
                          HDRawQuantitySample v127 = v125;
                          long long v128 = v125;
                          if (v125 != v126)
                          {
                            do
                            {
                              if (*(void *)v128 == v116) {
                                goto LABEL_208;
                              }
                              v128 += 8;
                            }
                            while (v128 != v126);
                            long long v128 = *(char **)(*(void *)a3 + 328);
LABEL_208:
                            while (*(void *)v127 != v124)
                            {
                              v127 += 8;
                              if (v127 == v126)
                              {
                                HDRawQuantitySample v127 = *(char **)(*(void *)a3 + 328);
                                break;
                              }
                            }
                          }
                          unint64_t v115 = v122 - 48;
                          if (v128 - v125 < v127 - v125) {
                            continue;
                          }
                        }
                        goto LABEL_212;
                      }
                      unint64_t v122 = v13;
LABEL_212:
                      *(_OWORD *)unint64_t v122 = v219;
                      *(void *)(v122 + 16) = v227;
                      *(void *)(v122 + 24) = v116;
                      *(void *)(v122 + 32) = v236;
                      *(_DWORD *)(v122 + 39) = *(_DWORD *)((char *)&v236 + 7);
                    }
                  }
                  double v111 = (long long *)(v114 + 48);
                }
                while ((long long *)(v114 + 48) != a2);
              }
            }
            else if (!v113)
            {
              do
              {
                unint64_t v201 = a1;
                a1 = (unint64_t)v111;
                uint64_t v202 = *(void *)(v201 + 72);
                uint64_t v203 = *(void *)(v201 + 24);
                if (v202 != v203)
                {
                  v204 = *(char **)(*(void *)a3 + 320);
                  v205 = *(char **)(*(void *)a3 + 328);
                  v206 = v204;
                  v207 = v204;
                  if (v204 != v205)
                  {
                    do
                    {
                      if (*(void *)v207 == v202) {
                        goto LABEL_312;
                      }
                      v207 += 8;
                    }
                    while (v207 != v205);
                    v207 = *(char **)(*(void *)a3 + 328);
LABEL_312:
                    while (*(void *)v206 != v203)
                    {
                      v206 += 8;
                      if (v206 == v205)
                      {
                        v206 = *(char **)(*(void *)a3 + 328);
                        break;
                      }
                    }
                  }
                  if (v207 - v204 < v206 - v204)
                  {
                    uint64_t v230 = *(void *)(a1 + 16);
                    long long v222 = *(_OWORD *)a1;
                    long long v239 = *(_OWORD *)(v201 + 80);
                    unint64_t v208 = a1;
                    do
                    {
                      v209 = (_OWORD *)v208;
                      unint64_t v208 = v201;
                      long long v210 = *(_OWORD *)(v201 + 16);
                      _OWORD *v209 = *(_OWORD *)v201;
                      v209[1] = v210;
                      *(_OWORD *)((char *)v209 + 27) = *(_OWORD *)(v201 + 27);
                      uint64_t v211 = *(void *)(v201 - 24);
                      if (v202 == v211) {
                        break;
                      }
                      v212 = *(char **)(*(void *)a3 + 320);
                      v213 = *(char **)(*(void *)a3 + 328);
                      v214 = v212;
                      v215 = v212;
                      if (v212 != v213)
                      {
                        do
                        {
                          if (*(void *)v215 == v202) {
                            goto LABEL_322;
                          }
                          v215 += 8;
                        }
                        while (v215 != v213);
                        v215 = *(char **)(*(void *)a3 + 328);
LABEL_322:
                        while (*(void *)v214 != v211)
                        {
                          v214 += 8;
                          if (v214 == v213)
                          {
                            v214 = *(char **)(*(void *)a3 + 328);
                            break;
                          }
                        }
                      }
                      unint64_t v201 = v208 - 48;
                    }
                    while (v215 - v212 < v214 - v212);
                    *(_OWORD *)unint64_t v208 = v222;
                    *(void *)(v208 + 16) = v230;
                    *(void *)(v208 + 24) = v202;
                    *(void *)(v208 + 32) = v239;
                    *(_DWORD *)(v208 + 39) = *(_DWORD *)((char *)&v239 + 7);
                  }
                }
                double v111 = (long long *)(a1 + 48);
              }
              while ((long long *)(a1 + 48) != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((long long *)v13 != a2)
            {
              int64_t v129 = (v15 - 2) >> 1;
              int64_t v130 = v129;
              do
              {
                int64_t v131 = v130;
                if (v129 >= v130)
                {
                  uint64_t v132 = (2 * v130) | 1;
                  unint64_t v133 = v13 + 48 * v132;
                  if (2 * v131 + 2 < (uint64_t)v15)
                  {
                    uint64_t v134 = *(void *)(v133 + 24);
                    uint64_t v135 = *(void *)(v133 + 72);
                    if (v134 != v135)
                    {
                      v137 = *(char **)(*(void *)a3 + 320);
                      v136 = *(char **)(*(void *)a3 + 328);
                      v138 = v137;
                      v139 = v137;
                      if (v137 != v136)
                      {
                        do
                        {
                          if (*(void *)v139 == v134) {
                            goto LABEL_224;
                          }
                          v139 += 8;
                        }
                        while (v139 != v136);
                        v139 = *(char **)(*(void *)a3 + 328);
LABEL_224:
                        while (*(void *)v138 != v135)
                        {
                          v138 += 8;
                          if (v138 == v136)
                          {
                            v138 = *(char **)(*(void *)a3 + 328);
                            break;
                          }
                        }
                      }
                      v133 += 48 * (v139 - v137 < v138 - v137);
                      if (v139 - v137 < v138 - v137) {
                        uint64_t v132 = 2 * v131 + 2;
                      }
                    }
                  }
                  unint64_t v140 = v13 + 48 * v131;
                  uint64_t v141 = *(void *)(v133 + 24);
                  uint64_t v142 = *(void *)(v140 + 24);
                  if (v141 == v142) {
                    goto LABEL_238;
                  }
                  v144 = *(char **)(*(void *)a3 + 320);
                  v143 = *(char **)(*(void *)a3 + 328);
                  v145 = v144;
                  v146 = v144;
                  if (v144 != v143)
                  {
                    do
                    {
                      if (*(void *)v146 == v141) {
                        goto LABEL_234;
                      }
                      v146 += 8;
                    }
                    while (v146 != v143);
                    v146 = *(char **)(*(void *)a3 + 328);
LABEL_234:
                    while (*(void *)v145 != v142)
                    {
                      v145 += 8;
                      if (v145 == v143)
                      {
                        v145 = *(char **)(*(void *)a3 + 328);
                        break;
                      }
                    }
                  }
                  if (v146 - v144 >= v145 - v144)
                  {
LABEL_238:
                    uint64_t v228 = *(void *)(v140 + 16);
                    long long v220 = *(_OWORD *)v140;
                    long long v237 = *(_OWORD *)(v140 + 32);
                    long long v147 = *(_OWORD *)v133;
                    long long v148 = *(_OWORD *)(v133 + 16);
                    *(_OWORD *)(v140 + 27) = *(_OWORD *)(v133 + 27);
                    *(_OWORD *)unint64_t v140 = v147;
                    *(_OWORD *)(v140 + 16) = v148;
                    if (v129 >= v132)
                    {
                      while (1)
                      {
                        uint64_t v150 = 2 * v132;
                        uint64_t v132 = (2 * v132) | 1;
                        unint64_t v149 = v13 + 48 * v132;
                        uint64_t v151 = v150 + 2;
                        if (v151 < (uint64_t)v15)
                        {
                          uint64_t v152 = *(void *)(v149 + 24);
                          uint64_t v153 = *(void *)(v149 + 72);
                          if (v152 != v153)
                          {
                            v154 = *(char **)(*(void *)a3 + 320);
                            v155 = *(char **)(*(void *)a3 + 328);
                            v156 = v154;
                            v157 = v154;
                            if (v154 != v155)
                            {
                              do
                              {
                                if (*(void *)v157 == v152) {
                                  goto LABEL_246;
                                }
                                v157 += 8;
                              }
                              while (v157 != v155);
                              v157 = *(char **)(*(void *)a3 + 328);
LABEL_246:
                              while (*(void *)v156 != v153)
                              {
                                v156 += 8;
                                if (v156 == v155)
                                {
                                  v156 = *(char **)(*(void *)a3 + 328);
                                  break;
                                }
                              }
                            }
                            v149 += 48 * (v157 - v154 < v156 - v154);
                            if (v157 - v154 < v156 - v154) {
                              uint64_t v132 = v151;
                            }
                          }
                        }
                        uint64_t v158 = *(void *)(v149 + 24);
                        if (v158 != v142)
                        {
                          v160 = *(char **)(*(void *)a3 + 320);
                          v159 = *(char **)(*(void *)a3 + 328);
                          v161 = v160;
                          v162 = v160;
                          if (v160 != v159)
                          {
                            do
                            {
                              if (*(void *)v162 == v158) {
                                goto LABEL_256;
                              }
                              v162 += 8;
                            }
                            while (v162 != v159);
                            v162 = *(char **)(*(void *)a3 + 328);
LABEL_256:
                            while (*(void *)v161 != v142)
                            {
                              v161 += 8;
                              if (v161 == v159)
                              {
                                v161 = *(char **)(*(void *)a3 + 328);
                                break;
                              }
                            }
                          }
                          if (v162 - v160 < v161 - v160) {
                            break;
                          }
                        }
                        long long v163 = *(_OWORD *)v149;
                        long long v164 = *(_OWORD *)(v149 + 16);
                        *(_OWORD *)(v133 + 27) = *(_OWORD *)(v149 + 27);
                        *(_OWORD *)unint64_t v133 = v163;
                        *(_OWORD *)(v133 + 16) = v164;
                        unint64_t v133 = v149;
                        if (v129 < v132) {
                          goto LABEL_261;
                        }
                      }
                    }
                    unint64_t v149 = v133;
LABEL_261:
                    *(_OWORD *)unint64_t v149 = v220;
                    *(void *)(v149 + 16) = v228;
                    *(void *)(v149 + 24) = v142;
                    *(void *)(v149 + 32) = v237;
                    *(_DWORD *)(v149 + 39) = *(_DWORD *)((char *)&v237 + 7);
                  }
                }
                int64_t v130 = v131 - 1;
              }
              while (v131);
              int64_t v165 = v14 / 0x30uLL;
              do
              {
                uint64_t v166 = 0;
                *(_OWORD *)v229 = *(_OWORD *)(v13 + 16);
                *(_OWORD *)&v229[16] = *(_OWORD *)(v13 + 32);
                long long v221 = *(_OWORD *)v13;
                uint64_t v167 = v165 - 2;
                if (v165 < 2) {
                  uint64_t v167 = v165 - 1;
                }
                uint64_t v168 = v167 >> 1;
                unint64_t v169 = v13;
                do
                {
                  v170 = (_OWORD *)v169;
                  v169 += 48 * v166 + 48;
                  uint64_t v171 = 2 * v166;
                  uint64_t v166 = (2 * v166) | 1;
                  uint64_t v172 = v171 + 2;
                  if (v171 + 2 < v165)
                  {
                    uint64_t v173 = *(void *)(v169 + 24);
                    uint64_t v174 = *(void *)(v169 + 72);
                    if (v173 != v174)
                    {
                      v176 = *(char **)(*(void *)a3 + 320);
                      v175 = *(char **)(*(void *)a3 + 328);
                      v177 = v176;
                      v178 = v176;
                      if (v176 != v175)
                      {
                        do
                        {
                          if (*(void *)v178 == v173) {
                            goto LABEL_273;
                          }
                          v178 += 8;
                        }
                        while (v178 != v175);
                        v178 = *(char **)(*(void *)a3 + 328);
LABEL_273:
                        while (*(void *)v177 != v174)
                        {
                          v177 += 8;
                          if (v177 == v175)
                          {
                            v177 = *(char **)(*(void *)a3 + 328);
                            break;
                          }
                        }
                      }
                      v169 += 48 * (v178 - v176 < v177 - v176);
                      if (v178 - v176 < v177 - v176) {
                        uint64_t v166 = v172;
                      }
                    }
                  }
                  long long v179 = *(_OWORD *)v169;
                  long long v180 = *(_OWORD *)(v169 + 16);
                  *(_OWORD *)((char *)v170 + 27) = *(_OWORD *)(v169 + 27);
                  _OWORD *v170 = v179;
                  v170[1] = v180;
                }
                while (v166 <= v168);
                a2 -= 3;
                if ((long long *)v169 == a2)
                {
                  *(_OWORD *)(v169 + 27) = *(_OWORD *)&v229[11];
                  *(_OWORD *)unint64_t v169 = v221;
                  *(_OWORD *)(v169 + 16) = *(_OWORD *)v229;
                }
                else
                {
                  long long v181 = *a2;
                  long long v182 = a2[1];
                  *(_OWORD *)(v169 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v169 = v181;
                  *(_OWORD *)(v169 + 16) = v182;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v229[11];
                  *a2 = v221;
                  a2[1] = *(_OWORD *)v229;
                  uint64_t v183 = v169 - v13 + 48;
                  if (v183 >= 49)
                  {
                    unint64_t v184 = (v183 / 0x30uLL - 2) >> 1;
                    unint64_t v185 = v13 + 48 * v184;
                    uint64_t v186 = *(void *)(v185 + 24);
                    uint64_t v187 = *(void *)(v169 + 24);
                    if (v186 != v187)
                    {
                      v189 = *(char **)(*(void *)a3 + 320);
                      v188 = *(char **)(*(void *)a3 + 328);
                      v190 = v189;
                      v191 = v189;
                      if (v189 != v188)
                      {
                        do
                        {
                          if (*(void *)v191 == v186) {
                            goto LABEL_286;
                          }
                          v191 += 8;
                        }
                        while (v191 != v188);
                        v191 = *(char **)(*(void *)a3 + 328);
LABEL_286:
                        while (*(void *)v190 != v187)
                        {
                          v190 += 8;
                          if (v190 == v188)
                          {
                            v190 = *(char **)(*(void *)a3 + 328);
                            break;
                          }
                        }
                      }
                      if (v191 - v189 < v190 - v189)
                      {
                        uint64_t v242 = *(void *)(v169 + 16);
                        long long v238 = *(_OWORD *)v169;
                        long long v233 = *(_OWORD *)(v169 + 32);
                        do
                        {
                          v192 = (_OWORD *)v169;
                          unint64_t v169 = v185;
                          long long v193 = *(_OWORD *)v185;
                          long long v194 = *(_OWORD *)(v185 + 16);
                          *(_OWORD *)((char *)v192 + 27) = *(_OWORD *)(v185 + 27);
                          _OWORD *v192 = v193;
                          v192[1] = v194;
                          if (!v184) {
                            break;
                          }
                          unint64_t v184 = (v184 - 1) >> 1;
                          unint64_t v185 = v13 + 48 * v184;
                          uint64_t v195 = *(void *)(v185 + 24);
                          if (v195 == v187) {
                            break;
                          }
                          v197 = *(char **)(*(void *)a3 + 320);
                          v196 = *(char **)(*(void *)a3 + 328);
                          v198 = v197;
                          v199 = v197;
                          if (v197 != v196)
                          {
                            do
                            {
                              if (*(void *)v199 == v195) {
                                goto LABEL_297;
                              }
                              v199 += 8;
                            }
                            while (v199 != v196);
                            v199 = *(char **)(*(void *)a3 + 328);
LABEL_297:
                            while (*(void *)v198 != v187)
                            {
                              v198 += 8;
                              if (v198 == v196)
                              {
                                v198 = *(char **)(*(void *)a3 + 328);
                                break;
                              }
                            }
                          }
                        }
                        while (v199 - v197 < v198 - v197);
                        *(_OWORD *)unint64_t v169 = v238;
                        *(void *)(v169 + 16) = v242;
                        *(void *)(v169 + 24) = v187;
                        *(void *)(v169 + 32) = v233;
                        *(_DWORD *)(v169 + 39) = *(_DWORD *)((char *)&v233 + 7);
                      }
                    }
                  }
                }
              }
              while (v165-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          double v17 = (long long *)(v13 + 48 * (v15 >> 1));
          if ((unint64_t)v14 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v15 >> 1)), a2 - 3, a3);
            uint64_t v18 = 3 * v16;
            double v19 = (long long *)(a1 + 48 * v16 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>((long long *)(a1 + 48), v19, a2 - 6, a3);
            double v20 = (long long *)(a1 + 48 + 16 * v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>((long long *)(a1 + 96), v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>(v19, v17, v20, a3);
            *(_OWORD *)v223 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v223[16] = *(_OWORD *)(a1 + 32);
            long long v216 = *(_OWORD *)a1;
            long long v21 = *(long long *)((char *)v17 + 27);
            long long v22 = v17[1];
            *(_OWORD *)a1 = *v17;
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(a1 + 27) = v21;
            *(long long *)((char *)v17 + 27) = *(_OWORD *)&v223[11];
            *double v17 = v216;
            v17[1] = *(_OWORD *)v223;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>((long long *)(a1 + 48 * (v15 >> 1)), (long long *)a1, a2 - 3, a3);
          }
          --a4;
          if (a5)
          {
            uint64_t v23 = *(void *)(a1 + 24);
            uint64_t v24 = *(void *)a3;
            break;
          }
          uint64_t v25 = *(void *)(a1 - 24);
          uint64_t v23 = *(void *)(a1 + 24);
          if (v25 != v23)
          {
            uint64_t v24 = *(void *)a3;
            int v26 = *(char **)(*(void *)a3 + 320);
            double v27 = *(char **)(*(void *)a3 + 328);
            double v28 = v26;
            double v29 = v26;
            if (v26 != v27)
            {
              do
              {
                if (*(void *)v29 == v25) {
                  goto LABEL_16;
                }
                v29 += 8;
              }
              while (v29 != v27);
              double v29 = *(char **)(*(void *)a3 + 328);
LABEL_16:
              while (*(void *)v28 != v23)
              {
                v28 += 8;
                if (v28 == v27)
                {
                  double v28 = *(char **)(*(void *)a3 + 328);
                  break;
                }
              }
            }
            if (v29 - v26 < v28 - v26) {
              break;
            }
          }
          uint64_t v241 = *(void *)(a1 + 16);
          long long v232 = *(_OWORD *)(a1 + 32);
          long long v235 = *(_OWORD *)a1;
          uint64_t v67 = *((void *)a2 - 3);
          if (v23 == v67) {
            goto LABEL_107;
          }
          uint64_t v68 = *(char **)(*(void *)a3 + 320);
          char v69 = *(char **)(*(void *)a3 + 328);
          if (v68 == v69)
          {
            uint64_t v71 = *(char **)(*(void *)a3 + 320);
            char v70 = v71;
          }
          else
          {
            char v70 = *(char **)(*(void *)a3 + 320);
            while (*(void *)v70 != v23)
            {
              v70 += 8;
              if (v70 == v69)
              {
                char v70 = *(char **)(*(void *)a3 + 328);
                break;
              }
            }
            uint64_t v71 = *(char **)(*(void *)a3 + 320);
            while (*(void *)v71 != v67)
            {
              v71 += 8;
              if (v71 == v69)
              {
                uint64_t v71 = *(char **)(*(void *)a3 + 328);
                break;
              }
            }
          }
          if (v70 - v68 >= v71 - v68)
          {
LABEL_107:
            unint64_t v13 = a1 + 48;
            if (a1 + 48 < (unint64_t)a2)
            {
              uint64_t v75 = *(void *)a3;
              unint64_t v76 = a1;
              do
              {
                uint64_t v77 = *(void *)(v76 + 72);
                unint64_t v76 = v13;
                if (v23 != v77)
                {
                  long long v78 = *(char **)(v75 + 320);
                  long long v79 = *(char **)(v75 + 328);
                  uint64_t v80 = v78;
                  unint64_t v81 = v78;
                  if (v78 != v79)
                  {
                    do
                    {
                      if (*(void *)v81 == v23) {
                        goto LABEL_114;
                      }
                      v81 += 8;
                    }
                    while (v81 != v79);
                    unint64_t v81 = *(char **)(v75 + 328);
LABEL_114:
                    while (*(void *)v80 != v77)
                    {
                      v80 += 8;
                      if (v80 == v79)
                      {
                        uint64_t v80 = *(char **)(v75 + 328);
                        break;
                      }
                    }
                  }
                  if (v81 - v78 < v80 - v78) {
                    break;
                  }
                }
                v13 += 48;
              }
              while (v76 + 48 < (unint64_t)a2);
            }
          }
          else
          {
            unint64_t v13 = a1;
            do
            {
              do
              {
                uint64_t v72 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v72);
              if (v68 == v69)
              {
                long long v74 = *(char **)(*(void *)a3 + 320);
                long long v73 = v74;
              }
              else
              {
                long long v73 = *(char **)(*(void *)a3 + 320);
                while (*(void *)v73 != v23)
                {
                  v73 += 8;
                  if (v73 == v69)
                  {
                    long long v73 = *(char **)(*(void *)a3 + 328);
                    break;
                  }
                }
                long long v74 = *(char **)(*(void *)a3 + 320);
                while (*(void *)v74 != v72)
                {
                  v74 += 8;
                  if (v74 == v69)
                  {
                    long long v74 = *(char **)(*(void *)a3 + 328);
                    break;
                  }
                }
              }
            }
            while (v73 - v68 >= v74 - v68);
          }
          unint64_t v82 = a2;
          if (v13 < (unint64_t)a2)
          {
            uint64_t v83 = *(void *)a3;
            unint64_t v82 = a2;
            do
            {
              uint64_t v84 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v84) {
                break;
              }
              unint64_t v85 = *(char **)(v83 + 320);
              long long v86 = *(char **)(v83 + 328);
              unint64_t v87 = v85;
              unint64_t v88 = v85;
              if (v85 != v86)
              {
                do
                {
                  if (*(void *)v88 == v23) {
                    goto LABEL_126;
                  }
                  v88 += 8;
                }
                while (v88 != v86);
                unint64_t v88 = *(char **)(v83 + 328);
LABEL_126:
                while (*(void *)v87 != v84)
                {
                  v87 += 8;
                  if (v87 == v86)
                  {
                    unint64_t v87 = *(char **)(v83 + 328);
                    break;
                  }
                }
              }
            }
            while (v88 - v85 < v87 - v85);
          }
          while (v13 < (unint64_t)v82)
          {
            *(_OWORD *)v225 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v225[16] = *(_OWORD *)(v13 + 32);
            long long v217 = *(_OWORD *)v13;
            long long v89 = *v82;
            long long v90 = v82[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v82 + 27);
            *(_OWORD *)unint64_t v13 = v89;
            *(_OWORD *)(v13 + 16) = v90;
            *(long long *)((char *)v82 + 27) = *(_OWORD *)&v225[11];
            *unint64_t v82 = v217;
            v82[1] = *(_OWORD *)v225;
            uint64_t v91 = *(void *)a3;
            do
            {
              do
              {
                uint64_t v92 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v92);
              unint64_t v93 = *(char **)(v91 + 320);
              long long v94 = *(char **)(v91 + 328);
              if (v93 == v94)
              {
                long long v96 = *(char **)(v91 + 320);
                long long v95 = v96;
              }
              else
              {
                long long v95 = *(char **)(v91 + 320);
                while (*(void *)v95 != v23)
                {
                  v95 += 8;
                  if (v95 == v94)
                  {
                    long long v95 = *(char **)(v91 + 328);
                    break;
                  }
                }
                long long v96 = *(char **)(v91 + 320);
                while (*(void *)v96 != v92)
                {
                  v96 += 8;
                  if (v96 == v94)
                  {
                    long long v96 = *(char **)(v91 + 328);
                    break;
                  }
                }
              }
            }
            while (v95 - v93 >= v96 - v93);
            do
            {
              uint64_t v97 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v97) {
                break;
              }
              if (v93 == v94)
              {
                BOOL v99 = v93;
                int v98 = v93;
              }
              else
              {
                int v98 = v93;
                while (*(void *)v98 != v23)
                {
                  v98 += 8;
                  if (v98 == v94)
                  {
                    int v98 = v94;
                    break;
                  }
                }
                BOOL v99 = v93;
                while (*(void *)v99 != v97)
                {
                  v99 += 8;
                  if (v99 == v94)
                  {
                    BOOL v99 = v94;
                    break;
                  }
                }
              }
            }
            while (v98 - v93 < v99 - v93);
          }
          double v100 = (long long *)(v13 - 48);
          BOOL v5 = v13 - 48 >= a1;
          BOOL v6 = v13 - 48 == a1;
          if (v13 - 48 != a1)
          {
            long long v101 = *v100;
            long long v102 = *(_OWORD *)(v13 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
            *(_OWORD *)a1 = v101;
            *(_OWORD *)(a1 + 16) = v102;
          }
          a5 = 0;
          *double v100 = v235;
          *(void *)(v13 - 32) = v241;
          *(void *)(v13 - 24) = v23;
          *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v232 + 7);
          *(void *)(v13 - 16) = v232;
        }
        uint64_t v240 = *(void *)(a1 + 16);
        long long v231 = *(_OWORD *)(a1 + 32);
        long long v234 = *(_OWORD *)a1;
        unint64_t v30 = a1;
        do
        {
          unint64_t v31 = v30;
          v30 += 48;
          uint64_t v32 = *(void *)(v31 + 72);
          if (v32 == v23) {
            break;
          }
          uint64_t v33 = *(char **)(v24 + 320);
          long long v34 = *(char **)(v24 + 328);
          long long v35 = v33;
          long long v36 = v33;
          if (v33 != v34)
          {
            do
            {
              if (*(void *)v36 == v32) {
                goto LABEL_26;
              }
              v36 += 8;
            }
            while (v36 != v34);
            long long v36 = *(char **)(v24 + 328);
LABEL_26:
            while (*(void *)v35 != v23)
            {
              v35 += 8;
              if (v35 == v34)
              {
                long long v35 = *(char **)(v24 + 328);
                break;
              }
            }
          }
        }
        while (v36 - v33 < v35 - v33);
        long long v37 = a2;
        if (v31 == a1)
        {
          long long v37 = a2;
          if (v30 < (unint64_t)a2)
          {
            long long v37 = a2;
            do
            {
              uint64_t v43 = *((void *)v37 - 3);
              v37 -= 3;
              if (v43 != v23)
              {
                char v44 = *(char **)(v24 + 320);
                unint64_t v45 = *(char **)(v24 + 328);
                long long v46 = v44;
                uint64_t v47 = v44;
                if (v44 != v45)
                {
                  do
                  {
                    if (*(void *)v47 == v43) {
                      goto LABEL_48;
                    }
                    v47 += 8;
                  }
                  while (v47 != v45);
                  uint64_t v47 = *(char **)(v24 + 328);
LABEL_48:
                  while (*(void *)v46 != v23)
                  {
                    v46 += 8;
                    if (v46 == v45)
                    {
                      long long v46 = *(char **)(v24 + 328);
                      break;
                    }
                  }
                }
                if (v47 - v44 < v46 - v44) {
                  break;
                }
              }
            }
            while (v30 < (unint64_t)v37);
          }
        }
        else
        {
          do
          {
            do
            {
              uint64_t v38 = *((void *)v37 - 3);
              v37 -= 3;
            }
            while (v38 == v23);
            unint64_t v39 = *(char **)(v24 + 320);
            unint64_t v40 = *(char **)(v24 + 328);
            uint64_t v41 = v39;
            uint64_t v42 = v39;
            if (v39 != v40)
            {
              do
              {
                if (*(void *)v42 == v38) {
                  goto LABEL_36;
                }
                v42 += 8;
              }
              while (v42 != v40);
              uint64_t v42 = *(char **)(v24 + 328);
LABEL_36:
              while (*(void *)v41 != v23)
              {
                v41 += 8;
                if (v41 == v40)
                {
                  uint64_t v41 = *(char **)(v24 + 328);
                  break;
                }
              }
            }
          }
          while (v42 - v39 >= v41 - v39);
        }
        unint64_t v13 = v30;
        if (v30 < (unint64_t)v37)
        {
          double v48 = v37;
          do
          {
            *(_OWORD *)v224 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v224[16] = *(_OWORD *)(v13 + 32);
            long long v49 = *(_OWORD *)v13;
            long long v51 = *v48;
            long long v50 = v48[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v48 + 27);
            *(_OWORD *)unint64_t v13 = v51;
            *(_OWORD *)(v13 + 16) = v50;
            *(long long *)((char *)v48 + 27) = *(_OWORD *)&v224[11];
            *double v48 = v49;
            v48[1] = *(_OWORD *)v224;
            uint64_t v52 = *(void *)a3;
            do
            {
              uint64_t v53 = *(void *)(v13 + 72);
              v13 += 48;
              if (v53 == v23) {
                break;
              }
              double v54 = *(char **)(v52 + 320);
              double v55 = *(char **)(v52 + 328);
              int v56 = v54;
              int v57 = v54;
              if (v54 != v55)
              {
                do
                {
                  if (*(void *)v57 == v53) {
                    goto LABEL_61;
                  }
                  v57 += 8;
                }
                while (v57 != v55);
                int v57 = *(char **)(v52 + 328);
LABEL_61:
                while (*(void *)v56 != v23)
                {
                  v56 += 8;
                  if (v56 == v55)
                  {
                    int v56 = *(char **)(v52 + 328);
                    break;
                  }
                }
              }
            }
            while (v57 - v54 < v56 - v54);
            do
            {
              do
              {
                uint64_t v58 = *((void *)v48 - 3);
                v48 -= 3;
              }
              while (v58 == v23);
              uint64_t v59 = *(char **)(v52 + 320);
              unint64_t v60 = *(char **)(v52 + 328);
              long long v61 = v59;
              long long v62 = v59;
              if (v59 != v60)
              {
                do
                {
                  if (*(void *)v62 == v58) {
                    goto LABEL_70;
                  }
                  v62 += 8;
                }
                while (v62 != v60);
                long long v62 = *(char **)(v52 + 328);
LABEL_70:
                while (*(void *)v61 != v23)
                {
                  v61 += 8;
                  if (v61 == v60)
                  {
                    long long v61 = *(char **)(v52 + 328);
                    break;
                  }
                }
              }
            }
            while (v62 - v59 >= v61 - v59);
          }
          while (v13 < (unint64_t)v48);
        }
        uint64_t v63 = (long long *)(v13 - 48);
        if (v13 - 48 != a1)
        {
          long long v64 = *v63;
          long long v65 = *(_OWORD *)(v13 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
          *(_OWORD *)a1 = v64;
          *(_OWORD *)(a1 + 16) = v65;
        }
        *uint64_t v63 = v234;
        *(void *)(v13 - 32) = v240;
        *(void *)(v13 - 24) = v23;
        *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v231 + 7);
        *(void *)(v13 - 16) = v231;
        if (v30 >= (unint64_t)v37) {
          break;
        }
LABEL_80:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(a1, v13 - 48, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, v13 - 48, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v13, (uint64_t)a2, a3))
      {
        break;
      }
      if (!v66) {
        goto LABEL_80;
      }
    }
    a2 = (long long *)(v13 - 48);
    if (!v66) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 - 24);
      uint64_t v9 = *(void *)(a1 + 24);
      if (v8 == v9) {
        return result;
      }
      id v10 = *(char **)(*(void *)a3 + 320);
      double v11 = *(char **)(*(void *)a3 + 328);
      unint64_t v12 = v10;
      unint64_t v13 = v10;
      if (v10 == v11) {
        goto LABEL_10;
      }
      do
      {
        if (*(void *)v13 == v8) {
          goto LABEL_7;
        }
        v13 += 8;
      }
      while (v13 != v11);
      unint64_t v13 = *(char **)(*(void *)a3 + 328);
      do
      {
LABEL_7:
        if (*(void *)v12 == v9) {
          goto LABEL_10;
        }
        v12 += 8;
      }
      while (v12 != v11);
      unint64_t v12 = *(char **)(*(void *)a3 + 328);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        uint64_t v14 = (long long *)(a2 - 48);
        long long v15 = *(_OWORD *)a1;
        *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        long long v16 = *(_OWORD *)(a2 - 21);
        long long v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *uint64_t v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(long long *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), a3);
      uint64_t v19 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      int v20 = 0;
      break;
  }
  while (1)
  {
    uint64_t v21 = *(void *)(v19 + 24);
    uint64_t v22 = *(void *)(v18 + 24);
    if (v21 != v22)
    {
      uint64_t v23 = *(char **)(*(void *)a3 + 320);
      uint64_t v24 = *(char **)(*(void *)a3 + 328);
      uint64_t v25 = v23;
      int v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(void *)v26 == v21) {
            goto LABEL_19;
          }
          v26 += 8;
        }
        while (v26 != v24);
        int v26 = *(char **)(*(void *)a3 + 328);
LABEL_19:
        while (*(void *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            uint64_t v25 = *(char **)(*(void *)a3 + 328);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        long long v34 = *(_OWORD *)v19;
        uint64_t v36 = *(void *)(v19 + 16);
        long long v37 = *(_OWORD *)(v19 + 32);
        uint64_t v27 = v19;
        while (1)
        {
          long long v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1) {
            break;
          }
          uint64_t v27 = v18;
          uint64_t v29 = *(void *)(v18 - 24);
          if (v21 != v29)
          {
            unint64_t v30 = *(char **)(*(void *)a3 + 320);
            unint64_t v31 = *(char **)(*(void *)a3 + 328);
            uint64_t v32 = v30;
            uint64_t v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(void *)v33 == v21) {
                  goto LABEL_30;
                }
                v33 += 8;
              }
              while (v33 != v31);
              uint64_t v33 = *(char **)(*(void *)a3 + 328);
LABEL_30:
              while (*(void *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  uint64_t v32 = *(char **)(*(void *)a3 + 328);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30) {
              continue;
            }
          }
          goto LABEL_36;
        }
        uint64_t v27 = a1;
LABEL_36:
        *(_OWORD *)uint64_t v27 = v34;
        *(void *)(v27 + 16) = v36;
        *(void *)(v27 + 24) = v21;
        *(void *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8) {
          return v19 + 48 == a2;
        }
      }
    }
    uint64_t v18 = v19;
    v19 += 48;
    if (v19 == a2) {
      return 1;
    }
  }
}

__n128 HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::overallStatistics(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 128);
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 160);
  uint64_t v6 = *(void *)(a2 + 176);
  BOOL v5 = *(const void **)(a2 + 184);
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  uint64_t v7 = *(void *)(a2 + 192);
  *(void *)(a1 + 64) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 64), v5, v7, (v7 - (uint64_t)v5) >> 4);
  *(void *)(a1 + 88) = *(void *)(a2 + 208);
  __n128 result = *(__n128 *)(a2 + 216);
  long long v9 = *(_OWORD *)(a2 + 232);
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v9;
  *(void *)(a1 + 128) = *(void *)(a2 + 248);
  return result;
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  id v3 = *(void **)(a2 + 256);
  uint64_t v47 = (void *)(a2 + 264);
  if (v3 == (void *)(a2 + 264)) {
    return;
  }
  long long v49 = (void *)(a1 + 16);
  do
  {
    BOOL v5 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a2, v3[4]);
    uint64_t v6 = v5;
    if (!v5) {
      goto LABEL_80;
    }
    unint64_t v7 = [v5 hash];
    unint64_t v8 = v7;
    unint64_t v9 = *(void *)(a1 + 8);
    if (!v9) {
      goto LABEL_21;
    }
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v50 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v2 = v7;
      if (v7 >= v9) {
        unint64_t v2 = v7 % v9;
      }
    }
    else
    {
      unint64_t v2 = (v9 - 1) & v7;
    }
    double v11 = *(uint64_t ***)(*(void *)a1 + 8 * v2);
    if (!v11 || (unint64_t v12 = *v11) == 0)
    {
LABEL_21:
      uint64_t v19 = (char *)operator new(0xA0uLL);
      v51[0] = v19;
      v51[1] = v49;
      *(void *)uint64_t v19 = 0;
      *((void *)v19 + 1) = v8;
      *((void *)v19 + 2) = v6;
      *(_OWORD *)(v19 + 24) = 0u;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      *(_OWORD *)(v19 + 104) = 0u;
      *(_OWORD *)(v19 + 120) = 0u;
      *(_OWORD *)(v19 + 136) = 0u;
      *((void *)v19 + 19) = 0;
      char v52 = 1;
      float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v21 = *(float *)(a1 + 32);
      if (v9 && (float)(v21 * (float)v9) >= v20)
      {
LABEL_67:
        long long v37 = *(void **)(*(void *)a1 + 8 * v2);
        unint64_t v12 = (uint64_t *)v51[0];
        if (v37)
        {
          *(void *)v51[0] = *v37;
        }
        else
        {
          *(void *)v51[0] = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = v12;
          *(void *)(*(void *)a1 + 8 * v2) = v49;
          if (!*v12)
          {
LABEL_76:
            v51[0] = 0;
            ++*(void *)(a1 + 24);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v51);
            goto LABEL_77;
          }
          unint64_t v38 = *(void *)(*v12 + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v38 >= v9) {
              v38 %= v9;
            }
          }
          else
          {
            v38 &= v9 - 1;
          }
          long long v37 = (void *)(*(void *)a1 + 8 * v38);
        }
        *long long v37 = v12;
        goto LABEL_76;
      }
      BOOL v22 = (v9 & (v9 - 1)) != 0;
      if (v9 < 3) {
        BOOL v22 = 1;
      }
      unint64_t v23 = v22 | (2 * v9);
      unint64_t v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      else {
        int8x8_t prime = (int8x8_t)v23;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v9 = *(void *)(a1 + 8);
      if (*(void *)&prime > v9) {
        goto LABEL_33;
      }
      if (*(void *)&prime < v9)
      {
        unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          unint64_t v32 = std::__next_prime(v32);
        }
        else
        {
          uint64_t v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2) {
            unint64_t v32 = v34;
          }
        }
        if (*(void *)&prime <= v32) {
          int8x8_t prime = (int8x8_t)v32;
        }
        if (*(void *)&prime >= v9)
        {
          unint64_t v9 = *(void *)(a1 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            int v26 = operator new(8 * *(void *)&prime);
            uint64_t v27 = *(void **)a1;
            *(void *)a1 = v26;
            if (v27) {
              operator delete(v27);
            }
            uint64_t v28 = 0;
            *(int8x8_t *)(a1 + 8) = prime;
            do
              *(void *)(*(void *)a1 + 8 * v28++) = 0;
            while (*(void *)&prime != v28);
            uint64_t v29 = (void *)*v49;
            if (*v49)
            {
              unint64_t v30 = v29[1];
              uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(void *)&prime) {
                  v30 %= *(void *)&prime;
                }
              }
              else
              {
                v30 &= *(void *)&prime - 1;
              }
              *(void *)(*(void *)a1 + 8 * v30) = v49;
              long long v35 = (void *)*v29;
              if (*v29)
              {
                do
                {
                  unint64_t v36 = v35[1];
                  if (v31.u32[0] > 1uLL)
                  {
                    if (v36 >= *(void *)&prime) {
                      v36 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v36 &= *(void *)&prime - 1;
                  }
                  if (v36 != v30)
                  {
                    if (!*(void *)(*(void *)a1 + 8 * v36))
                    {
                      *(void *)(*(void *)a1 + 8 * v36) = v29;
                      goto LABEL_58;
                    }
                    *uint64_t v29 = *v35;
                    *long long v35 = **(void **)(*(void *)a1 + 8 * v36);
                    **(void **)(*(void *)a1 + 8 * v36) = v35;
                    long long v35 = v29;
                  }
                  unint64_t v36 = v30;
LABEL_58:
                  uint64_t v29 = v35;
                  long long v35 = (void *)*v35;
                  unint64_t v30 = v36;
                }
                while (v35);
              }
            }
            unint64_t v9 = (unint64_t)prime;
            goto LABEL_62;
          }
          long long v46 = *(void **)a1;
          *(void *)a1 = 0;
          if (v46) {
            operator delete(v46);
          }
          unint64_t v9 = 0;
          *(void *)(a1 + 8) = 0;
        }
      }
LABEL_62:
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v8 >= v9) {
          unint64_t v2 = v8 % v9;
        }
        else {
          unint64_t v2 = v8;
        }
      }
      else
      {
        unint64_t v2 = (v9 - 1) & v8;
      }
      goto LABEL_67;
    }
    while (1)
    {
      unint64_t v13 = v12[1];
      if (v13 == v8) {
        break;
      }
      if (v50 > 1)
      {
        if (v13 >= v9) {
          v13 %= v9;
        }
      }
      else
      {
        v13 &= v9 - 1;
      }
      if (v13 != v2) {
        goto LABEL_21;
      }
LABEL_20:
      unint64_t v12 = (uint64_t *)*v12;
      if (!v12) {
        goto LABEL_21;
      }
    }
    id v14 = (id)v12[2];
    long long v15 = v6;
    id v16 = v6;
    long long v17 = v16;
    if (v14 != v16)
    {
      char v18 = [v14 isEqualToString:v16];

      uint64_t v6 = v15;
      if (v18) {
        goto LABEL_77;
      }
      goto LABEL_20;
    }

    uint64_t v6 = v15;
LABEL_77:
    *((_DWORD *)v12 + 6) = *((_DWORD *)v3 + 10);
    long long v39 = *((_OWORD *)v3 + 3);
    long long v40 = *((_OWORD *)v3 + 5);
    *((_OWORD *)v12 + 3) = *((_OWORD *)v3 + 4);
    *((_OWORD *)v12 + 4) = v40;
    *((_OWORD *)v12 + 2) = v39;
    v12[10] = v3[12];
    if (v12 + 2 != v3 + 4) {
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)v12 + 88, (char *)v3[13], v3[14], (uint64_t)(v3[14] - v3[13]) >> 4);
    }
    v12[14] = v3[16];
    long long v41 = *(_OWORD *)(v3 + 17);
    long long v42 = *(_OWORD *)(v3 + 19);
    *((_WORD *)v12 + 76) = *((_WORD *)v3 + 84);
    *(_OWORD *)(v12 + 17) = v42;
    *(_OWORD *)(v12 + 15) = v41;

LABEL_80:
    uint64_t v43 = (void *)v3[1];
    if (v43)
    {
      do
      {
        char v44 = v43;
        uint64_t v43 = (void *)*v43;
      }
      while (v43);
    }
    else
    {
      do
      {
        char v44 = (void *)v3[2];
        BOOL v45 = *v44 == (void)v3;
        id v3 = v44;
      }
      while (!v45);
    }
    id v3 = v44;
  }
  while (v44 != v47);
}

void sub_1BD155B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);

  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::~__hash_table(v6);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1725FD0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1725FD0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C187B8A0);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1F1725FD0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BD155D28(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1725FD0;
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48))(v1) + 48;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsPresence const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1726060;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsPresence const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1726060;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C187B8A0);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsPresence const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1F1726060;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BD155FC0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsPresence const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1726060;
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsPresence const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsPresence const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsPresence const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  unint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsPresence const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsPresence const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsPresence const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::~__func()
{
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F17260F0;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F17260F0;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 616))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a4, 3, @"Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date");
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
  }
  double v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(void *)(a1 + 40) && a3) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_advanceToTime(a1, v8);
    }
    HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    unint64_t v9 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    uint64_t v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v9, a4);
  }
  return v10;
}

void sub_1BD1563D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_earliestStartTimeWithoutInvalidation(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    if (!*(unsigned char *)(a1 + 616))
    {
      double v1 = *(double *)(a1 + 176);
      double result = *(double *)(a1 + 120);
      if (v1 <= result)
      {
        double v1 = -1.79769313e308;
      }
      else if (*(unsigned char *)(a1 + 144))
      {
        double v1 = -1.79769313e308;
      }
      if (v1 >= result) {
        return v1;
      }
      return result;
    }
    return -1.79769313e308;
  }
  double result = *(double *)(a1 + 176);
  if (result <= *(double *)(a1 + 120)) {
    return -1.79769313e308;
  }
  if (*(unsigned char *)(a1 + 144)) {
    return -1.79769313e308;
  }
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_advanceToTime(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 128) <= a2)
  {
    uint64_t v4 = a1 + 112;
    uint64_t v5 = a1 + 120;
    do
    {
      uint64_t v6 = *(void *)(a1 + 592);
      uint64_t v7 = *(void *)(a1 + 584);
      if (v6 == v7)
      {
        uint64_t v22 = 0;
        long long v15 = *(void **)(a1 + 40);
        id v16 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a2];
        double v8 = [v15 dateIntervalContainingDate:v16 index:&v22];

        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        unint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v17 = v22;
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v19 = v18;
        float v20 = [v8 endDate];
        [v20 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::resetToBucket(v4, v17, v19, v21);
      }
      else
      {
        double v8 = [*(id *)(a1 + 40) dateIntervalAtIndex:*(void *)(a1 + 112) + 1];
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        unint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v12 = v11;
        unint64_t v13 = [v8 endDate];
        [v13 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::advanceBucket(v4, v12, v14);
      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_didChangeBucket(a1, v9);
      if (v6 != v7) {
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
      }
    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1BD15665C(_Unwind_Exception *exception_object)
{
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a1 + 8;
  double v6 = *(double *)a2;
  double v7 = *(double *)(a2 + 8);
  double v8 = *(double *)(a2 + 16);
  unint64_t v9 = *(uint64_t **)(a2 + 24);
  unsigned __int8 v10 = *(unsigned char *)(a2 + 32);
  char v11 = *(unsigned char *)(a2 + 33);
  double v12 = *(double *)(a1 + 8) - v7;
  int v13 = v10;
  unint64_t v14 = (unint64_t)v9;
  char v15 = v11;
  double v16 = v8;
  double v17 = v7;
  double v18 = *(double *)a2;
  if (v12 >= 0.01)
  {
    if (v8 - v7 - v12 >= 0.01)
    {
      int v13 = *(unsigned __int8 *)(a2 + 32);
      double v18 = v6 - v6 * (v12 / (v8 - v7));
      unint64_t v14 = *(void *)(a2 + 24);
      char v15 = *(unsigned char *)(a2 + 33);
      double v16 = *(double *)(a2 + 16);
      double v17 = *(double *)(a1 + 8);
    }
    else
    {
      int v13 = 0;
      unint64_t v14 = 0;
      char v15 = 0;
      double v16 = 0.0;
      double v17 = 0.0;
      double v18 = 0.0;
    }
  }
  double v19 = *(double *)(a1 + 16);
  double v20 = v19 - v17;
  double v21 = v16 - v17;
  double v22 = v16 - v17 - (v19 - v17);
  if (*(_DWORD *)(a1 + 36))
  {
    if (v20 >= 0.01)
    {
      if (v22 >= 0.01)
      {
LABEL_24:
        double v25 = v16;
        unint64_t v68 = v14;
        double v24 = v18 - v18 * (v20 / v21);
        int v23 = v13;
        char v69 = v15;
        double v16 = *(double *)(a1 + 16);
        double v18 = v18 * (v20 / v21);
        if (!v13) {
          goto LABEL_25;
        }
        goto LABEL_11;
      }
LABEL_10:
      unint64_t v68 = 0;
      int v23 = 0;
      char v69 = 0;
      double v24 = 0.0;
      double v19 = 0.0;
      double v25 = 0.0;
      if (!v13)
      {
LABEL_25:
        char v15 = v69;
        goto LABEL_63;
      }
LABEL_11:
      double v66 = v17;
      double v67 = v16;
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 288, v14, v14);
      unint64_t v26 = *(void *)(a1 + 112);
      if (v26 == *(void *)(a1 + 104) && *(uint64_t *)(a1 + 136) <= 0)
      {
        v31.f64[1] = *(float64_t *)(a1 + 16);
        double v28 = v66;
        double v27 = v67;
        v31.f64[0] = v66;
        v32.f64[0] = *(float64_t *)(a1 + 8);
        v32.f64[1] = v67;
        int8x16_t v33 = (int8x16_t)vcgtq_f64(v32, v31);
        v32.f64[0] = v66;
        *(int8x16_t *)(a1 + 48) = vbslq_s8(v33, *(int8x16_t *)(a1 + 8), (int8x16_t)v32);
      }
      else
      {
        double v28 = v66;
        double v27 = v67;
        if (v66 < *(double *)(a1 + 48))
        {
          double v29 = *(double *)(a1 + 8);
          if (v66 >= v29) {
            double v29 = v66;
          }
          *(double *)(a1 + 48) = v29;
        }
        if (v67 > *(double *)(a1 + 56))
        {
          double v30 = *(double *)(a1 + 16);
          if (v30 >= v67) {
            double v30 = v67;
          }
          *(double *)(a1 + 56) = v30;
        }
      }
      if (*(unsigned char *)(a1 + 32))
      {
        double v34 = *(double *)(a1 + 64);
        if (v28 < v34) {
          double v34 = v28;
        }
        *(double *)(a1 + 64) = v34;
      }
      if (a3 && v28 < *(double *)(a1 + 16))
      {
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_mergeThroughTime(v5, v28);
        double v28 = v66;
        double v27 = v67;
        unint64_t v26 = *(void *)(a1 + 112);
      }
      unint64_t v35 = *(void *)(a1 + 120);
      if (v26 >= v35)
      {
        uint64_t v37 = *(void *)(a1 + 104);
        unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - v37) >> 4);
        unint64_t v39 = v38 + 1;
        if (v38 + 1 > 0x555555555555555) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - v37) >> 4);
        if (2 * v40 > v39) {
          unint64_t v39 = 2 * v40;
        }
        if (v40 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v41 = 0x555555555555555;
        }
        else {
          unint64_t v41 = v39;
        }
        if (v41)
        {
          unint64_t v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v41);
          double v28 = v66;
          double v27 = v67;
        }
        else
        {
          uint64_t v42 = 0;
        }
        unint64_t v43 = v41 + 48 * v38;
        unint64_t v44 = v41 + 48 * v42;
        *(double *)unint64_t v43 = v18;
        *(double *)(v43 + 8) = v28;
        *(double *)(v43 + 16) = v27;
        *(void *)(v43 + 24) = v14;
        *(unsigned char *)(v43 + 32) = v13;
        *(unsigned char *)(v43 + 33) = v15;
        *(_WORD *)(v43 + 40) = 0;
        *(unsigned char *)(v43 + 42) = 0;
        unint64_t v36 = v43 + 48;
        long long v46 = *(char **)(a1 + 104);
        BOOL v45 = *(char **)(a1 + 112);
        if (v45 == v46)
        {
          char v15 = v69;
        }
        else
        {
          char v15 = v69;
          do
          {
            long long v47 = *((_OWORD *)v45 - 3);
            long long v48 = *((_OWORD *)v45 - 2);
            *(_OWORD *)(v43 - 21) = *(_OWORD *)(v45 - 21);
            *(_OWORD *)(v43 - 48) = v47;
            *(_OWORD *)(v43 - 32) = v48;
            v43 -= 48;
            v45 -= 48;
          }
          while (v45 != v46);
          BOOL v45 = *(char **)(a1 + 104);
        }
        *(void *)(a1 + 104) = v43;
        *(void *)(a1 + 112) = v36;
        *(void *)(a1 + 120) = v44;
        if (v45) {
          operator delete(v45);
        }
      }
      else
      {
        *(double *)unint64_t v26 = v18;
        *(double *)(v26 + 8) = v28;
        *(double *)(v26 + 16) = v27;
        *(void *)(v26 + 24) = v14;
        *(unsigned char *)(v26 + 32) = v13;
        *(unsigned char *)(v26 + 33) = v15;
        *(_WORD *)(v26 + 40) = 0;
        unint64_t v36 = v26 + 48;
        *(unsigned char *)(v26 + 42) = 0;
        char v15 = v69;
      }
      *(void *)(a1 + 112) = v36;
      if (!*(unsigned char *)(a1 + 256) || *(double *)(a1 + 232) <= v7)
      {
        *(double *)(a1 + 224) = v6;
        *(double *)(a1 + 232) = v7;
        *(double *)(a1 + 240) = v8;
        *(void *)(a1 + 248) = v9;
        *(unsigned char *)(a1 + 256) = v10;
        *(unsigned char *)(a1 + 257) = v11;
        if (!*(unsigned char *)(a1 + 176) || *(double *)(a1 + 152) <= v7)
        {
          *(double *)(a1 + 144) = v6;
          *(double *)(a1 + 152) = v7;
          *(double *)(a1 + 160) = v8;
          *(void *)(a1 + 168) = v9;
          *(unsigned char *)(a1 + 176) = v10;
          *(unsigned char *)(a1 + 177) = v11;
        }
      }
      if (*(unsigned char *)(a1 + 33))
      {
        unint64_t v49 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(v5, v14);
        unint64_t v50 = HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_statisticsForSource(v5, v49);
        if (!*((unsigned char *)v50 + 128) || *((double *)v50 + 13) <= v7)
        {
          *((double *)v50 + 12) = v6;
          *((double *)v50 + 13) = v7;
          *((double *)v50 + 14) = v8;
          v50[15] = v9;
          *((unsigned char *)v50 + 128) = v10;
          *((unsigned char *)v50 + 129) = v11;
          if (!*((unsigned char *)v50 + 48) || *((double *)v50 + 3) <= v7)
          {
            *((double *)v50 + 2) = v6;
            *((double *)v50 + 3) = v7;
            *((double *)v50 + 4) = v8;
            v50[5] = v9;
            *((unsigned char *)v50 + 48) = v10;
            *((unsigned char *)v50 + 49) = v11;
          }
        }
      }
LABEL_63:
      unint64_t v14 = v68;
      if (!v23) {
        return;
      }
      goto LABEL_64;
    }
  }
  else
  {
    if (v22 < 0.01) {
      goto LABEL_10;
    }
    if (v20 >= 0.01) {
      goto LABEL_24;
    }
  }
  LOBYTE(v23) = v13;
  double v25 = v16;
  double v19 = v17;
  double v24 = v18;
  if (!v13) {
    return;
  }
LABEL_64:
  unint64_t v51 = *(void *)(a1 + 480);
  unint64_t v52 = *(void *)(a1 + 488);
  if (v51 >= v52)
  {
    uint64_t v54 = *(void *)(a1 + 472);
    unint64_t v55 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v51 - v54) >> 3);
    unint64_t v56 = v55 + 1;
    if (v55 + 1 > 0x666666666666666) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v57 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v52 - v54) >> 3);
    if (2 * v57 > v56) {
      unint64_t v56 = 2 * v57;
    }
    if (v57 >= 0x333333333333333) {
      unint64_t v58 = 0x666666666666666;
    }
    else {
      unint64_t v58 = v56;
    }
    if (v58) {
      unint64_t v58 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v58);
    }
    else {
      uint64_t v59 = 0;
    }
    unint64_t v60 = v58 + 40 * v55;
    unint64_t v61 = v58 + 40 * v59;
    *(double *)unint64_t v60 = v24;
    *(double *)(v60 + 8) = v19;
    *(double *)(v60 + 16) = v25;
    *(void *)(v60 + 24) = v14;
    *(unsigned char *)(v60 + 32) = v23;
    *(unsigned char *)(v60 + 33) = v15;
    unint64_t v53 = v60 + 40;
    uint64_t v63 = *(char **)(a1 + 472);
    long long v62 = *(char **)(a1 + 480);
    if (v62 != v63)
    {
      do
      {
        long long v64 = *(_OWORD *)(v62 - 40);
        long long v65 = *(_OWORD *)(v62 - 24);
        *(_WORD *)(v60 - 8) = *((_WORD *)v62 - 4);
        *(_OWORD *)(v60 - 24) = v65;
        *(_OWORD *)(v60 - 40) = v64;
        v60 -= 40;
        v62 -= 40;
      }
      while (v62 != v63);
      long long v62 = *(char **)(a1 + 472);
    }
    *(void *)(a1 + 472) = v60;
    *(void *)(a1 + 480) = v53;
    *(void *)(a1 + 488) = v61;
    if (v62) {
      operator delete(v62);
    }
  }
  else
  {
    *(double *)unint64_t v51 = v24;
    *(double *)(v51 + 8) = v19;
    *(double *)(v51 + 16) = v25;
    *(void *)(v51 + 24) = v14;
    *(unsigned char *)(v51 + 32) = v23;
    unint64_t v53 = v51 + 40;
    *(unsigned char *)(v51 + 33) = v15;
  }
  *(void *)(a1 + 480) = v53;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 618))
  {
    *(unsigned char *)(a1 + 620) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 620) = 0;
    unint64_t v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      uint64_t v4 = v2;
      uint64_t v3 = (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      if (v3) {
        v4[2](v4, v3);
      }

      unint64_t v2 = v4;
    }
  }
}

void sub_1BD156CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  unint64_t v9 = 0;
  unsigned __int8 v10 = 0;
  uint64_t v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 472), *(void *)(a1 + 480), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 480) - *(void *)(a1 + 472)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::resetToBucket(a1, *(void *)a1 + 1, a2, a3);
  double v6 = v9;
  double v7 = v10;
  if (v9 != v10)
  {
    uint64_t v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BD156DCC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8 = (id *)(a1 + 40);
  objc_storeStrong((id *)(a1 + 496), *(id *)(a1 + 40));
  *((double *)v8 - 4) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  long long v9 = 0uLL;
  memset(v18, 0, sizeof(v18));
  unsigned __int8 v10 = *(void **)(a1 + 192);
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)&v18[4];
  *(_OWORD *)(a1 + 152) = *(_OWORD *)&v18[20];
  *(_OWORD *)(a1 + 168) = *(_OWORD *)&v18[36];
  *(void *)(a1 + 184) = 0;
  if (v10)
  {
    *(void *)(a1 + 200) = v10;
    operator delete(v10);
    long long v9 = 0uLL;
  }
  *(_WORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 224) = v9;
  *(_OWORD *)(a1 + 240) = v9;
  *(_OWORD *)(a1 + 192) = v9;
  *(_OWORD *)(a1 + 208) = v9;
  if (*(void *)(a1 + 280))
  {
    uint64_t v11 = *(void **)(a1 + 264);
    uint64_t v12 = *(void *)(a1 + 272);
    *(void *)(a1 + 264) = a1 + 272;
    *(void *)(v12 + 16) = 0;
    *(void *)(a1 + 272) = 0;
    *(void *)(a1 + 280) = 0;
    if (v11[1]) {
      int v13 = (void *)v11[1];
    }
    else {
      int v13 = v11;
    }
    if (v13)
    {
      unint64_t v14 = (void *)v13[2];
      if (v14)
      {
        char v15 = (void *)*v14;
        if ((void *)*v14 == v13)
        {
          *unint64_t v14 = 0;
          while (1)
          {
            double v17 = (void *)v14[1];
            if (!v17) {
              break;
            }
            do
            {
              unint64_t v14 = v17;
              double v17 = (void *)*v17;
            }
            while (v17);
          }
        }
        else
        {
          for (v14[1] = 0; v15; char v15 = (void *)v14[1])
          {
            do
            {
              unint64_t v14 = v15;
              char v15 = (void *)*v15;
            }
            while (v15);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::destroy(v13);
        for (uint64_t i = (void *)v14[2]; i; uint64_t i = (void *)i[2])
          unint64_t v14 = i;
        int v13 = v14;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::destroy(v13);
  }
  objc_storeStrong(v8, *(id *)(a1 + 496));
  *(void *)(a1 + 480) = *(void *)(a1 + 472);
  *(void *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 620))
  {
    if (v3)
    {
      id v6 = v3;
      uint64_t v4 = _Block_copy(*(const void **)(a1 + 96));
      uint64_t v5 = v4;
      if (v4) {
        (*((void (**)(void *, id))v4 + 2))(v4, v6);
      }

      id v3 = v6;
    }
    *(unsigned char *)(a1 + 620) = 0;
  }
}

void sub_1BD157000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 startDate];
  id v6 = [v4 startDate];
  uint64_t v7 = [v5 compare:v6];

  return v7;
}

void sub_1BD157088(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 13);
  if (WeakRetained)
  {
    if (v5
      && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_currentBucketInterval((uint64_t)a1),
          (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v8 = [v5 endDate];
      long long v9 = [v7 startDate];
      if (objc_msgSend(v8, "hk_isAfterDate:", v9))
      {
        unsigned __int8 v10 = [v5 startDate];
        uint64_t v11 = [v7 endDate];
        char v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);
      }
      else
      {
        char v12 = 0;
      }

      int v13 = _Block_copy(a1[12]);
      if ((v12 & 1) == 0) {
        operator new();
      }
    }
    else
    {
      int v13 = _Block_copy(a1[12]);
    }
    *((unsigned char *)a1 + 616) = 1;
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
    v27[3] = &unk_1E6308FF8;
    id v15 = v5;
    id v28 = v15;
    id v16 = v13;
    id v29 = v16;
    (*((void (**)(id *, void *))*a1 + 9))(a1, v27);
    if (v5)
    {
      double v17 = [v15 startDate];
      [v17 timeIntervalSinceReferenceDate];
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_configureForStartTime((uint64_t)a1);
    }
    else
    {
      (*((void (**)(id *))*a1 + 4))(a1);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
    v21[3] = &unk_1E6309060;
    double v24 = a1;
    id v5 = v15;
    char v26 = 1;
    id v22 = v5;
    double v25 = a1;
    id v23 = WeakRetained;
    uint64_t v14 = (*((uint64_t (**)(id *, void *, uint64_t))*a1 + 14))(a1, v21, a3);
    double v18 = _Block_copy(v16);
    id v19 = a1[12];
    a1[12] = v18;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to invalidate interval: no data source available.");
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1BD1574D8(_Unwind_Exception *a1)
{
  MEMORY[0x1C187B8A0](v4, 0x10F1C4064CA91B5);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_11;
  }
  id v3 = [v10 endDate];
  uint64_t v4 = [*(id *)(a1 + 32) startDate];
  char v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    id v6 = [v10 startDate];
    uint64_t v7 = [*(id *)(a1 + 32) endDate];
    char v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_11:
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9) {
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
      }
    }
  }
}

void sub_1BD1576BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = [*(id *)(a1 + 32) startDate];
  [v5 timeIntervalSinceReferenceDate];
  uint64_t v7 = v6;

  char v8 = [*(id *)(a1 + 32) endDate];
  [v8 timeIntervalSinceReferenceDate];
  uint64_t v10 = v9;

  uint64_t v11 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  uint64_t v13 = *(void *)(a1 + 32);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  char v32 = *(unsigned char *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  uint64_t v31 = *(void *)(a1 + 56);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  void v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  uint64_t v14 = [v11 collectionCalculator:WeakRetained queryForInterval:v13 error:a2 sampleHandler:v30 mergeHandler:v29];

  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15 != v4)
    {
      id v16 = [*(id *)(a1 + 32) endDate];
      [v16 timeIntervalSinceReferenceDate];
      if (*(void *)(v15 + 40))
      {
        double v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          id v19 = [*(id *)(v15 + 40) dateIntervalAtIndex:*(void *)(v15 + 112) + 1];
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          double v20 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(v15, v15 + 120);
          double v21 = [v19 startDate];
          [v21 timeIntervalSinceReferenceDate];
          double v23 = v22;
          double v24 = [v19 endDate];
          [v24 timeIntervalSinceReferenceDate];
          HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            char v26 = _Block_copy(*(const void **)(v15 + 96));
            double v27 = v26;
            if (v26) {
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);
            }
          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_didChangeBucket(v15, 0);
        }
      }
    }
  }
  return v14;
}

void sub_1BD157968(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7 = *(double *)(a1 + 32) - a6;
  if (v7 >= 0.01)
  {
    double v9 = a7 - a6;
    if (v9 - v7 >= 0.01)
    {
      a5 = a5 - v7 / v9 * a5;
      int v8 = 1;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      int v8 = 0;
      a5 = 0.0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    int v8 = 1;
  }
  *(double *)uint64_t v13 = a5;
  *(double *)&v13[1] = a6;
  double v14 = a7;
  uint64_t v15 = a2;
  char v16 = v8;
  char v17 = 0;
  if (*(unsigned char *)(a1 + 56))
  {
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)v13, a3, a4);
    }
  }
  else
  {
    double v11 = *(double *)(a1 + 40) - a6;
    if (v11 >= 0.01)
    {
      double v12 = a7 - a6;
      if (v12 - v11 >= 0.01)
      {
        a5 = a5 * (v11 / v12);
        a7 = *(double *)(a1 + 40);
      }
    }
    else
    {
      int v8 = 0;
    }
    *(double *)uint64_t v13 = a5;
    double v14 = a7;
    char v16 = v8;
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)v13, a3, a4);
    }
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 616)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
  }
  if (*(void *)(a1 + 40)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_advanceToTime(a1, a2);
  }
  if (*(double *)(a1 + 128) > a2)
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_mergeThroughTime(a1 + 120, a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 32) < *(double *)(v10 + 8))
                {
                  uint64_t v129 = *(void *)(v10 + 32);
                  long long v113 = *(_OWORD *)v10;
                  long long v121 = *(_OWORD *)(v10 + 16);
                  long long v52 = *(_OWORD *)(a2 - 40);
                  long long v53 = *(_OWORD *)(a2 - 24);
                  *(_WORD *)(v10 + 32) = *(_WORD *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(_WORD *)(a2 - 8) = v129;
                  *(_OWORD *)(a2 - 24) = v121;
                  *(_OWORD *)(a2 - 40) = v113;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v10, (double *)(v10 + 40), (double *)(a2 - 40));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, v10 + 120, a2 - 40);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            uint64_t v54 = (void *)(v10 + 40);
            BOOL v56 = v10 == a2 || v54 == (void *)a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  uint64_t v59 = v54;
                  double v60 = *(double *)(v58 + 48);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *v54;
                    long long v114 = *(_OWORD *)(v58 + 56);
                    uint64_t v122 = *(void *)(v58 + 72);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      uint64_t v63 = v10 + v62;
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      *(_OWORD *)(v63 + 40) = *(_OWORD *)(v10 + v62);
                      *(_OWORD *)(v63 + 56) = v64;
                      *(_WORD *)(v63 + 72) = *(_WORD *)(v10 + v62 + 32);
                      if (!v62) {
                        break;
                      }
                      v62 -= 40;
                      if (v60 >= *(double *)(v63 - 32))
                      {
                        uint64_t v65 = v10 + v62 + 40;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = v114;
                    *(_WORD *)(v65 + 32) = v122;
                  }
                  uint64_t v54 = v59 + 5;
                  v57 += 40;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 5 != (void *)a2);
              }
            }
            else if (!v56)
            {
              do
              {
                int v98 = v54;
                double v99 = *(double *)(a1 + 48);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *v54;
                  long long v117 = *(_OWORD *)(a1 + 56);
                  uint64_t v125 = *(void *)(a1 + 72);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(_OWORD *)(v101 - 3);
                    *(_OWORD *)long long v101 = *(_OWORD *)(v101 - 5);
                    *((_OWORD *)v101 + 1) = v102;
                    *((_WORD *)v101 + 16) = *((_WORD *)v101 - 4);
                    double v103 = *((double *)v101 - 9);
                    v101 -= 5;
                  }
                  while (v99 < v103);
                  void *v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *((_WORD *)v101 + 16) = v125;
                  *((_OWORD *)v101 + 1) = v117;
                }
                v54 += 5;
                a1 = (unint64_t)v98;
              }
              while (v98 + 5 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 40 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v10 + 40 * v69 + 8) < *(double *)(v70 + 48))
                  {
                    v70 += 40;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  double v71 = *(double *)(v10 + 40 * v68 + 8);
                  if (*(double *)(v70 + 8) >= v71)
                  {
                    unint64_t v72 = v10 + 40 * v68;
                    uint64_t v73 = *(void *)v72;
                    uint64_t v123 = *(void *)(v72 + 32);
                    long long v115 = *(_OWORD *)(v72 + 16);
                    do
                    {
                      unint64_t v74 = v72;
                      unint64_t v72 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_WORD *)(v74 + 32) = *(_WORD *)(v70 + 32);
                      *(_OWORD *)unint64_t v74 = v75;
                      *(_OWORD *)(v74 + 16) = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 40 * v77;
                      uint64_t v78 = 2 * v69 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v10 + 40 * v77 + 8) < *(double *)(v70 + 48))
                      {
                        v70 += 40;
                        uint64_t v77 = v78;
                      }
                      uint64_t v69 = v77;
                    }
                    while (*(double *)(v70 + 8) >= v71);
                    *(void *)unint64_t v72 = v73;
                    *(double *)(v72 + 8) = v71;
                    *(_OWORD *)(v72 + 16) = v115;
                    *(_WORD *)(v72 + 32) = v123;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x28uLL;
              do
              {
                uint64_t v80 = 0;
                uint64_t v130 = *(void *)(v10 + 32);
                long long v116 = *(_OWORD *)v10;
                long long v124 = *(_OWORD *)(v10 + 16);
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = v81;
                  uint64_t v83 = v80 + 1;
                  v81 += 40 * (v80 + 1);
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v85 = v84 + 2;
                  if (v85 < v79 && *(double *)(v82 + 40 * v83 + 8) < *(double *)(v81 + 48))
                  {
                    v81 += 40;
                    uint64_t v80 = v85;
                  }
                  long long v86 = *(_OWORD *)v81;
                  long long v87 = *(_OWORD *)(v81 + 16);
                  *(_WORD *)(v82 + 32) = *(_WORD *)(v81 + 32);
                  *(_OWORD *)unint64_t v82 = v86;
                  *(_OWORD *)(v82 + 16) = v87;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 40;
                if (v81 == a2)
                {
                  *(_WORD *)(v81 + 32) = v130;
                  *(_OWORD *)unint64_t v81 = v116;
                  *(_OWORD *)(v81 + 16) = v124;
                }
                else
                {
                  long long v88 = *(_OWORD *)a2;
                  long long v89 = *(_OWORD *)(a2 + 16);
                  *(_WORD *)(v81 + 32) = *(_WORD *)(a2 + 32);
                  *(_OWORD *)unint64_t v81 = v88;
                  *(_OWORD *)(v81 + 16) = v89;
                  *(_WORD *)(a2 + 32) = v130;
                  *(_OWORD *)a2 = v116;
                  *(_OWORD *)(a2 + 16) = v124;
                  uint64_t v90 = v81 - v10 + 40;
                  if (v90 >= 41)
                  {
                    unint64_t v91 = (v90 / 0x28uLL - 2) >> 1;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v10 + 40 * v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      uint64_t v109 = *(void *)(v81 + 32);
                      long long v106 = *(_OWORD *)(v81 + 16);
                      do
                      {
                        unint64_t v94 = v81;
                        unint64_t v81 = v10 + 40 * v91;
                        long long v95 = *(_OWORD *)v81;
                        long long v96 = *(_OWORD *)(v81 + 16);
                        *(_WORD *)(v94 + 32) = *(_WORD *)(v81 + 32);
                        *(_OWORD *)unint64_t v94 = v95;
                        *(_OWORD *)(v94 + 16) = v96;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 40 * v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_WORD *)(v81 + 32) = v109;
                      *(_OWORD *)(v81 + 16) = v106;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40 * (v12 >> 1)), (double *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            char v16 = (double *)(a1 + 40 * v13 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40), v16, (double *)(a2 - 80));
            char v17 = (double *)(a1 + 40 + 8 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 80), v17, (double *)(a2 - 120));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v16, (double *)v14, v17);
            uint64_t v126 = *(void *)(a1 + 32);
            long long v110 = *(_OWORD *)a1;
            long long v118 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 16) = v19;
            *(_WORD *)(v14 + 32) = v126;
            *(_OWORD *)unint64_t v14 = v110;
            *(_OWORD *)(v14 + 16) = v118;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40 * (v12 >> 1)), (double *)a1, (double *)(a2 - 40));
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 32) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          long long v105 = *(_OWORD *)(a1 + 16);
          uint64_t v108 = *(void *)(a1 + 32);
          if (v20 >= *(double *)(a2 - 32))
          {
            unint64_t v41 = a1 + 40;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 40;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 40;
              double v40 = *(double *)(v39 + 48);
              v39 += 40;
            }
            while (v20 >= v40);
          }
          unint64_t v43 = a2;
          if (v10 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              unint64_t v43 = v44 - 40;
              double v45 = *(double *)(v44 - 32);
              v44 -= 40;
            }
            while (v20 < v45);
          }
          while (v10 < v43)
          {
            uint64_t v128 = *(void *)(v10 + 32);
            long long v112 = *(_OWORD *)v10;
            long long v120 = *(_OWORD *)(v10 + 16);
            long long v46 = *(_OWORD *)v43;
            long long v47 = *(_OWORD *)(v43 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v43 + 32);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(_WORD *)(v43 + 32) = v128;
            *(_OWORD *)unint64_t v43 = v112;
            *(_OWORD *)(v43 + 16) = v120;
            do
            {
              double v48 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *(double *)(v43 - 32);
              v43 -= 40;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 40);
            long long v51 = *(_OWORD *)(v10 - 24);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 40) = v38;
          *(double *)(v10 - 32) = v20;
          *(_WORD *)(v10 - 8) = v108;
          *(_OWORD *)(v10 - 24) = v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        long long v104 = *(_OWORD *)(a1 + 16);
        uint64_t v107 = *(void *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 48);
          v21 += 40;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        unint64_t v25 = a2;
        if (v21 == 40)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 40;
            double v29 = *(double *)(v28 - 32);
            v28 -= 40;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 40;
            double v27 = *(double *)(v25 - 32);
            v25 -= 40;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v127 = *(void *)(v10 + 32);
            long long v111 = *(_OWORD *)v10;
            long long v119 = *(_OWORD *)(v10 + 16);
            long long v31 = *(_OWORD *)v30;
            long long v32 = *(_OWORD *)(v30 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v30 + 32);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(_WORD *)(v30 + 32) = v127;
            *(_OWORD *)unint64_t v30 = v111;
            *(_OWORD *)(v30 + 16) = v119;
            do
            {
              double v33 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v33 < v20);
            do
            {
              double v34 = *(double *)(v30 - 32);
              v30 -= 40;
            }
            while (v34 >= v20);
          }
          while (v10 < v30);
        }
        if (v10 - 40 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 40);
          long long v36 = *(_OWORD *)(v10 - 24);
          *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 40) = v22;
        *(double *)(v10 - 32) = v20;
        *(_WORD *)(v10 - 8) = v107;
        *(_OWORD *)(v10 - 24) = v104;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 40;
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        __int16 v9 = *(_WORD *)(a2 - 8);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      uint64_t v16 = *(void *)v12;
      long long v21 = *(_OWORD *)(v12 + 16);
      uint64_t v22 = *(void *)(v12 + 32);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(void *)uint64_t v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(void *a1, uint64_t a2)
{
  id v3 = (void *)a1[5];
  uint64_t v4 = a1[6];
  BOOL v5 = (void *)a1[4];
  uint64_t v6 = [v5 dateInterval];
  void v9[4] = v4;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  uint64_t v7 = [v3 collectionCalculator:v5 queryForInterval:v6 error:a2 sampleHandler:v10 mergeHandler:v9];

  return v7;
}

void sub_1BD158708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10 = *(void *)(a1 + 32);
  *(double *)int v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  char v15 = 1;
  uint64_t v11 = [MEMORY[0x1E4F1C9C8] distantFuture];
  [v11 timeIntervalSinceReferenceDate];
  BOOL v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1BD1587AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
}

void HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::archive(uint64_t a1, int8x16_t *a2)
{
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 112);
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F171B978;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  statistics::Statistics::makePrimaryStatistics(a1);
  HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>::archive((uint64_t)v6, (uint64_t)&a2->i64[1]);
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v6);
  statistics::Statistics::~Statistics((statistics::Statistics *)v6);
  uint64_t v5 = a2->i32[0];
  *(_DWORD *)(a1 + 204) |= 0x100u;
  *(void *)(a1 + 136) = v5;
  statistics::Statistics::makeMostRecentDatum(a1);
  v6[0] = &unk_1F17206F8;
  int v10 = 127;
  int8x16_t v7 = vextq_s8(a2[6], a2[6], 8uLL);
  v6[1] = a2[7].i64[0];
  v6[2] = a2[7].i64[1];
  __int16 v8 = 0;
  char v9 = 0;
  statistics::RawQuantitySample::operator=(*v4, (uint64_t)v6);
  PB::Base::~Base((PB::Base *)v6);
}

void sub_1BD1588DC(_Unwind_Exception *a1)
{
  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

void HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>::archive(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F171B978;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (statistics **)(a1 + 8);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = 0;
  statistics::Statistics::makePrimaryStatistics(a1);
  HDStatisticsPresence::archive((HDStatisticsPresence *)a2, (uint64_t)v5);
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v5);
  statistics::Statistics::~Statistics((statistics::Statistics *)v5);
  statistics::Statistics::makeAuxiliaryStatistics(a1);
  HDStatisticsTimeInterval::archive((HDStatisticsTimeInterval *)(a2 + 48), (uint64_t)v5);
  statistics::Statistics::operator=(*v4, (uint64_t)v5);
  statistics::Statistics::~Statistics((statistics::Statistics *)v5);
}

void sub_1BD1589B4(_Unwind_Exception *a1)
{
  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::unarchive(uint64_t a1, void *a2)
{
  *(_DWORD *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v5 = (_OWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 34) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 114) = 0u;
  uint64_t v6 = a2[16];
  if (v6)
  {
    HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>::unarchive((uint64_t)v11, *(HDStatisticsTimeInterval **)(v6 + 8), *(void *)(v6 + 128));
    long long v7 = v11[1];
    *uint64_t v5 = v11[0];
    v5[1] = v7;
    v5[2] = v11[2];
    *(void *)(a1 + 56) = v12;
    double result = v15;
    uint64_t v8 = v14;
    *(_OWORD *)(a1 + 64) = v13;
    *(void *)(a1 + 80) = v8;
    *(double *)(a1 + 88) = result;
  }
  *(_DWORD *)a1 = a2[17];
  uint64_t v9 = a2[14];
  if (v9)
  {
    double result = *(double *)(v9 + 8);
    uint64_t v10 = *(void *)(v9 + 16);
    *(int8x16_t *)(a1 + 96) = vextq_s8(*(int8x16_t *)(v9 + 24), *(int8x16_t *)(v9 + 24), 8uLL);
    *(double *)(a1 + 112) = result;
    *(void *)(a1 + 120) = v10;
    *(_WORD *)(a1 + 128) = 1;
  }
  return result;
}

double HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>::unarchive(uint64_t a1, HDStatisticsTimeInterval *this, uint64_t a3)
{
  int8x16_t v4 = 0uLL;
  *(_OWORD *)(a1 + 26) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  if (a3)
  {
    uint64_t v5 = *(void *)(a3 + 112);
    if (v5)
    {
      int8x16_t v4 = *(int8x16_t *)(v5 + 24);
      uint64_t v6 = *(void *)(v5 + 8);
      char v7 = 1;
      uint64_t v5 = *(void *)(v5 + 16);
    }
    else
    {
      char v7 = 0;
      uint64_t v6 = 0;
    }
    *(void *)a1 = *(void *)(a3 + 24);
    int8x16_t v4 = vextq_s8(v4, v4, 8uLL);
    *(int8x16_t *)(a1 + 8) = v4;
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = v5;
    *(unsigned char *)(a1 + 40) = v7;
    *(unsigned char *)(a1 + 41) = 0;
  }
  if (this)
  {
    HDStatisticsTimeInterval::unarchive(this, (uint64_t)&v10);
    *(void *)(a1 + 48) = v10;
    v4.i64[0] = v13;
    uint64_t v8 = v12;
    *(_OWORD *)(a1 + 56) = v11;
    *(void *)(a1 + 72) = v8;
    *(void *)(a1 + 80) = v4.i64[0];
  }
  return *(double *)v4.i64;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6 = a3;
  uint64_t v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = &unk_1F17261A0;
  double v9 = 900.0;
  if ((v6 & 0x10) == 0) {
    double v9 = 0.0;
  }
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(void *)(v8 + 104) = 0;
  *(void *)(v8 + 112) = 0;
  *(void *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_WORD *)(a1 + 568) = 1;
  *(unsigned char *)(a1 + 570) = 0;
  *(unsigned char *)(a1 + 572) = 0;
  *(void *)(a1 + 576) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(void *)(a1 + 616) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);

  JUMPOUT(0x1C187B8A0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1F17261A0;
  unint64_t v2 = *(void **)(a1 + 600);
  if (v2)
  {
    *(void *)(a1 + 608) = v2;
    operator delete(v2);
  }

  id v3 = *(void **)(a1 + 536);
  if (v3)
  {
    *(void *)(a1 + 544) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  int8x16_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(unsigned char *)(result + 568) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::setDateInterval(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 copy];
  int8x16_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;

  uint64_t v5 = [v6 startDate];
  [v5 timeIntervalSinceReferenceDate];
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
}

void sub_1BD158CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(void *)(a1 + 40))
  {
    id v5 = v3;
    [v3 timeIntervalSinceReferenceDate];
    *(void *)(a1 + 576) = v4;
    id v3 = v5;
  }
}

void sub_1BD158D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::setStatisticsConfiguration(id *a1, void *a2)
{
  objc_storeStrong(a1 + 73, a2);
  id v7 = a2;
  id v4 = a1[73];
  id v5 = a1[70];
  a1[70] = v4;
  id v6 = v4;

  objc_storeStrong(a1 + 19, a1[70]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (*(void *)(a1 + 40)) {
    return 1;
  }
  BOOL v7 = *(void *)(a1 + 224) == *(void *)(a1 + 216) && *(uint64_t *)(a1 + 240) < 1
    || HKIntervalMask<double>::firstDifference(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)a2, *(void *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (v7) {
    return 1;
  }
  double v9 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128);

  return v9(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 copy];
  id v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v3;
}

void sub_1BD158F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::dataSource(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));

  return WeakRetained;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::currentStatistics(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 568))
  {
    double v1 = 0;
  }
  else
  {
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_updateSourceOrder((uint64_t)v4);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_mergeThroughTime((uint64_t)v4, v4[1]);
    double v1 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v4);
  }

  return v1;
}

void sub_1BD159028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(a1 + 64);
  BOOL v7 = v6;
  if (v6)
  {
    uint64_t v8 = [v6 startDate];
    [v8 timeIntervalSinceReferenceDate];
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    uint64_t v10 = [v7 endDate];
    [v10 timeIntervalSinceReferenceDate];
    double v12 = v11;
    double v13 = *(double *)(a2 + 8);

    if (v12 < v13) {
      goto LABEL_9;
    }
  }
  if (!*(unsigned char *)(a1 + 570))
  {
LABEL_11:
    uint64_t v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 569))
  {
LABEL_9:
    uint64_t v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(unsigned char *)(a1 + 571)) {
      goto LABEL_11;
    }
    unint64_t v17 = *(void *)(a1 + 608);
    unint64_t v18 = *(void *)(a1 + 616);
    if (v17 >= v18)
    {
      uint64_t v22 = *(void *)(a1 + 600);
      unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      unint64_t v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24) {
        unint64_t v24 = 2 * v25;
      }
      if (v25 >= 0x333333333333333) {
        unint64_t v26 = 0x666666666666666;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26) {
        unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      }
      else {
        uint64_t v27 = 0;
      }
      unint64_t v28 = v26 + 40 * v23;
      unint64_t v29 = v26 + 40 * v27;
      long long v30 = *(_OWORD *)a2;
      long long v31 = *(_OWORD *)(a2 + 16);
      *(void *)(v28 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      unint64_t v21 = v28 + 40;
      long long v32 = *(char **)(a1 + 608);
      double v33 = *(char **)(a1 + 600);
      if (v32 != v33)
      {
        do
        {
          long long v34 = *(_OWORD *)(v32 - 40);
          long long v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        long long v32 = *(char **)(a1 + 600);
      }
      *(void *)(a1 + 600) = v28;
      *(void *)(a1 + 608) = v21;
      *(void *)(a1 + 616) = v29;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      long long v19 = *(_OWORD *)a2;
      long long v20 = *(_OWORD *)(a2 + 16);
      *(void *)(v17 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      unint64_t v21 = v17 + 40;
    }
    *(void *)(a1 + 608) = v21;
    goto LABEL_9;
  }
  uint64_t v14 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
  uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1BD159298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = v5;
  if (*(unsigned char *)(a1 + 570))
  {
    uint64_t v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 570) = 1;
  uint64_t v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    uint64_t v7 = 0;
    goto LABEL_82;
  }
  uint64_t v65 = v6;
  if (*(unsigned char *)(a1 + 569)) {
    goto LABEL_5;
  }
  double v9 = *(void **)(a1 + 592);
  if (!v9)
  {
    id v68 = 0;
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 40))
  {
LABEL_5:
    int v8 = 0;
    id v68 = 0;
    goto LABEL_29;
  }
  [v9 sortUsingComparator:&__block_literal_global_1051];
  id v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v10 = *(id *)(a1 + 592);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  if (!v11)
  {

    id v12 = 0;
    goto LABEL_27;
  }
  id v12 = 0;
  uint64_t v13 = *(void *)v70;
  do
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (*(void *)v70 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(id *)(*((void *)&v69 + 1) + 8 * i);
      BOOL v16 = v15;
      if (v12)
      {
        unint64_t v17 = [v15 startDate];
        unint64_t v18 = [v12 endDate];
        int v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          long long v20 = [v16 endDate];
          unint64_t v21 = [v12 endDate];
          int v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22) {
            goto LABEL_21;
          }
          id v23 = objc_alloc(MEMORY[0x1E4F28C18]);
          unint64_t v24 = [v12 startDate];
          unint64_t v25 = [v16 endDate];
          id v26 = (id)[v23 initWithStartDate:v24 endDate:v25];
        }
        else
        {
          [v68 addObject:v12];
          id v26 = v16;
        }
        id v12 = v26;
      }
      else
      {
        id v12 = v15;
      }
LABEL_21:
    }
    uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  }
  while (v11);

  if (v12) {
    [v68 addObject:v12];
  }
LABEL_27:

LABEL_28:
  int v8 = 1;
LABEL_29:
  uint64_t v27 = *(void **)(a1 + 592);
  *(void *)(a1 + 592) = 0;

  *(unsigned char *)(a1 + 569) = 0;
  if (!v8)
  {
    unint64_t v38 = *(void *)(a1 + 600);
    *(void *)(a1 + 616) = 0;
    *(void *)(a1 + 608) = 0;
    *(void *)(a1 + 600) = 0;
    unint64_t v39 = v38;
    goto LABEL_47;
  }
  unint64_t v28 = [v68 lastObject];
  if (v28)
  {
    unint64_t v29 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_currentBucketInterval(a1);
    long long v30 = [v29 endDate];
    long long v31 = [v28 endDate];
    int v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      double v33 = [v28 endDate];
      [v33 timeIntervalSinceReferenceDate];
      double v35 = v34;

      uint64_t v36 = *(void *)(a1 + 600);
      BOOL v37 = *(long long **)(a1 + 608);
      while ((long long *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((long long *)v36 != v37)
          {
            double v40 = (long long *)(v36 + 40);
            if ((long long *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  long long v41 = *v40;
                  long long v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)uint64_t v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                double v40 = (long long *)((char *)v40 + 40);
              }
              while (v40 != v37);
              BOOL v37 = *(long long **)(a1 + 608);
            }
          }
          if ((long long *)v36 != v37) {
            *(void *)(a1 + 608) = v36;
          }
          break;
        }
        v36 += 40;
      }
    }
  }
  unint64_t v38 = *(void *)(a1 + 600);
  unint64_t v39 = *(void *)(a1 + 608);
  *(void *)(a1 + 616) = 0;
  *(void *)(a1 + 600) = 0;
  *(void *)(a1 + 608) = 0;
  if (![v68 count]) {
    goto LABEL_60;
  }
LABEL_47:
  id v43 = v68;
  long long __p = (void *)v38;
  if (v43)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v44 = v43;
    uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v70;
      while (2)
      {
        for (uint64_t j = 0; j != v45; ++j)
        {
          if (*(void *)v70 != v46) {
            objc_enumerationMutation(v44);
          }
          id v48 = *(id *)(*((void *)&v69 + 1) + 8 * j);
          int v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval((id *)a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
        if (v45) {
          continue;
        }
        break;
      }
    }

LABEL_59:
    unint64_t v38 = (unint64_t)__p;
LABEL_60:
    unint64_t v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v51;
    }
    int v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    long long __p = (void *)v38;
    if (v39 != v38)
    {
      uint64_t v54 = v38;
      uint64_t v50 = v67;
      do
      {
        int v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_primitiveAddSample(a1, v54, 1, v50);
        int v53 = v55;
        v54 += 40;
        if (v54 == v39) {
          char v56 = 0;
        }
        else {
          char v56 = v55;
        }
        uint64_t v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval((id *)a1, 0, v67))goto LABEL_59; {
LABEL_70:
    }
    int v53 = 0;
  }
  if (*(void *)(a1 + 40) && *(void *)(a1 + 544) != *(void *)(a1 + 536))
  {
    do
    {
      uint64_t v57 = objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(void *)(a1 + 112) + 1, v50, v65);
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      unint64_t v58 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, a1 + 120);
      uint64_t v59 = [v57 startDate];
      [v59 timeIntervalSinceReferenceDate];
      double v61 = v60;
      uint64_t v62 = [v57 endDate];
      [v62 timeIntervalSinceReferenceDate];
      HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
    }
    while (*(void *)(a1 + 544) != *(void *)(a1 + 536));
  }
  *(unsigned char *)(a1 + 570) = 0;
  if (__p) {
    operator delete(__p);
  }

  if (v53)
  {
    if (*(unsigned char *)(a1 + 572))
    {
      *(unsigned char *)(a1 + 572) = 0;
      id v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
      uint64_t v7 = 1;
      goto LABEL_82;
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v6 = v65;
LABEL_82:
  *(unsigned char *)(a1 + 570) = 0;
LABEL_83:

  return v7;
}

void sub_1BD15999C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    *(unsigned char *)(v13 + 570) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(unsigned char *)(result + 571) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(unsigned char *)(a1 + 570)) {
      goto LABEL_12;
    }
    uint64_t v7 = 0;
LABEL_14:
    uint64_t v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval((id *)a1, v7, a3);
    goto LABEL_15;
  }
  uint64_t v7 = [v6 dateIntervalForIntervalsContainingInterval:v5];

  if (!*(unsigned char *)(a1 + 570)) {
    goto LABEL_14;
  }
  if (!v7)
  {
LABEL_12:
    id v12 = *(void **)(a1 + 592);
    *(void *)(a1 + 592) = 0;

    uint64_t v7 = 0;
    uint64_t v11 = 1;
    *(unsigned char *)(a1 + 569) = 1;
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 569))
  {
    int v8 = *(void **)(a1 + 592);
    if (!v8)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      id v10 = *(void **)(a1 + 592);
      *(void *)(a1 + 592) = v9;

      int v8 = *(void **)(a1 + 592);
    }
    [v8 addObject:v7];
  }
  uint64_t v11 = 1;
LABEL_15:

  return v11;
}

void sub_1BD159C9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    *(unsigned char *)(a1 + 568) = 1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v9[3] = &unk_1E63043E8;
    uint64_t v12 = a1;
    id v10 = v5;
    id v11 = WeakRetained;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 112))(a1, v9, a3);
    if (v7 && *(unsigned char *)(a1 + 568) && !*(void *)(a1 + 40)) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to query for initial statistics: no data source available.");
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1BD159DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::reset(uint64_t result)
{
  *(unsigned char *)(result + 568) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 encodeBool:*(unsigned __int8 *)(a1 + 568) forKey:@"needs_config"];
  id v12 = v3;
  int v32 = &unk_1F1726FA0;
  double v33 = 0;
  int v38 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
  LOBYTE(v38) = 1;
  uint64_t v34 = v4;
  uint64_t v35 = 0;
  statistics::StatisticsEngine::makeCurrentBucket((uint64_t)&v32);
  uint64_t v13 = &unk_1F171B9C8;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  int v31 = 511;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 0;
  int8x16_t v14 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  uint64_t v5 = *(void *)(a1 + 136);
  char v29 = *(unsigned char *)(a1 + 144);
  char v30 = *(unsigned char *)(a1 + 145);
  BOOL v28 = *(_DWORD *)(a1 + 148) == 0;
  int8x16_t v15 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  uint64_t v7 = *(int8x16_t **)(a1 + 216);
  if (v7 != *(int8x16_t **)(a1 + 224))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v7, *v7, 8uLL);
    int8x16_t v40 = v7[1];
    char v43 = 0;
    HIBYTE(v42) = v7[2].i8[9];
    LOBYTE(v42) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>();
  }
  statistics::StatisticsBucket::makeStatistics((uint64_t)&v13);
  HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>::archive((uint64_t)&v39, a1 + 240);
  statistics::Statistics::operator=(*((statistics **)&v22 + 1), (uint64_t)&v39);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v39);
  uint64_t v8 = *(void *)(a1 + 328);
  if (v8 != a1 + 336)
  {
    HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>::archive((uint64_t)&v39, v8 + 40);
    uint64_t v9 = *(void *)(v8 + 32);
    v46 |= 0x200u;
    uint64_t v45 = v9;
    PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>();
  }
  id v10 = *(int8x16_t **)(a1 + 184);
  if (v10 != *(int8x16_t **)(a1 + 192))
  {
    unint64_t v39 = (char *)&unk_1F1727540;
    v41.i32[0] = 3;
    int8x16_t v40 = vextq_s8(*v10, *v10, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>();
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v13);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v13);
  id v11 = *(int8x16_t **)(a1 + 536);
  if (v11 != *(int8x16_t **)(a1 + 544))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v11, *v11, 8uLL);
    int8x16_t v40 = v11[1];
    __int16 v42 = 0;
    char v43 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>();
  }
  PB::Writer::Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v39);
  [v12 encodeBytes:v40.i64[0] length:&v39[-v40.i64[0]] forKey:@"hdsce_archived_representation"];
  PB::Writer::~Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);
}

void sub_1BD15A1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v58 = a2;
  *(unsigned char *)(a1 + 568) = [v58 decodeBoolForKey:@"needs_config"];
  id v3 = v58;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v63, 0, -1.79769313e308, 1.79769313e308);
  long long v64 = 0u;
  long long v65 = 0u;
  uint64_t v102 = 0;
  id v61 = v3;
  PB::Reader::Reader((PB::Reader *)v101, (const unsigned __int8 *)[v61 decodeBytesForKey:@"hdsce_archived_representation" returnedLength:&v102]);
  uint64_t v60 = a1;
  unint64_t v94 = &unk_1F1726FA0;
  uint64_t v95 = 0;
  uint64_t v99 = 0;
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  int v100 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v94, (PB::Reader *)v101);
  uint64_t v62 = v96;
  if (v95)
  {
    uint64_t v70 = 0;
    memset(v73, 0, sizeof(v73));
    memset(&v75[56], 0, 32);
    uint64_t v79 = 0;
    uint64_t v78 = 0;
    long long __p = 0u;
    memset(v75, 0, 50);
    uint64_t v76 = 0;
    uint64_t v77 = &v78;
    long long v80 = 0u;
    long long v81 = 0u;
    int v82 = 1065353216;
    long long v83 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    uint64_t v86 = 0;
    int v87 = 1065353216;
    long long v88 = 0u;
    long long v89 = 0u;
    int v90 = 1065353216;
    long long v91 = 0u;
    long long v92 = 0u;
    int v93 = 1065353216;
    int8x16_t v66 = vextq_s8(*(int8x16_t *)(v95 + 8), *(int8x16_t *)(v95 + 8), 8uLL);
    uint64_t v4 = *(void *)(v95 + 72);
    uint64_t v67 = *(void *)(v95 + 64);
    char v68 = *(unsigned char *)(v95 + 185);
    char v69 = *(unsigned char *)(v95 + 186);
    int8x16_t v71 = vextq_s8(*(int8x16_t *)(v95 + 24), *(int8x16_t *)(v95 + 24), 8uLL);
    uint64_t v72 = v4;
    uint64_t v6 = *(void *)(v95 + 80);
    uint64_t v5 = *(void *)(v95 + 88);
    uint64_t v59 = (void *)v95;
    if (v6 != v5)
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(*(void *)v6 + 24);
        uint64_t v9 = *(void *)(*(void *)v6 + 32);
        uint64_t v10 = *(void *)(*(void *)v6 + 8);
        uint64_t v11 = *(void *)(*(void *)v6 + 16);
        char v12 = *(unsigned char *)(*(void *)v6 + 41);
        char v13 = *(unsigned char *)(*(void *)v6 + 40);
        if ((unint64_t)v7 >= *(void *)v75)
        {
          int8x16_t v14 = (void *)__p;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v7 - __p) >> 4);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(*(void *)v75 - __p) >> 4) > v16) {
            unint64_t v16 = 0x5555555555555556 * ((uint64_t)(*(void *)v75 - __p) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v75 - __p) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v17 = 0x555555555555555;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17)
          {
            unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            uint64_t v7 = (void *)*((void *)&__p + 1);
            int8x16_t v14 = (void *)__p;
          }
          else
          {
            uint64_t v18 = 0;
          }
          unint64_t v19 = v17 + 48 * v15;
          *(void *)unint64_t v19 = v9;
          *(void *)(v19 + 8) = v8;
          *(void *)(v19 + 16) = v10;
          *(void *)(v19 + 24) = v11;
          *(_WORD *)(v19 + 32) = 1;
          *(unsigned char *)(v19 + 40) = 0;
          *(unsigned char *)(v19 + 41) = v12;
          *(unsigned char *)(v19 + 42) = v13;
          unint64_t v20 = v19;
          if (v7 != v14)
          {
            do
            {
              long long v21 = *((_OWORD *)v7 - 3);
              long long v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)((char *)v7 - 21);
              *(_OWORD *)(v20 - 48) = v21;
              *(_OWORD *)(v20 - 32) = v22;
              v20 -= 48;
              v7 -= 6;
            }
            while (v7 != v14);
            int8x16_t v14 = (void *)__p;
          }
          uint64_t v7 = (void *)(v19 + 48);
          *(void *)&long long __p = v20;
          *((void *)&__p + 1) = v19 + 48;
          *(void *)long long v75 = v17 + 48 * v18;
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          void *v7 = v9;
          v7[1] = v8;
          v7[2] = v10;
          v7[3] = v11;
          *((_WORD *)v7 + 16) = 1;
          *((unsigned char *)v7 + 40) = 0;
          *((unsigned char *)v7 + 41) = v12;
          *((unsigned char *)v7 + 42) = v13;
          v7 += 6;
        }
        *((void *)&__p + 1) = v7;
        v6 += 8;
      }
      while (v6 != v5);
    }
    uint64_t v23 = v59[13];
    if (v23)
    {
      HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>::unarchive((uint64_t)&v103, *(HDStatisticsTimeInterval **)(v23 + 8), *(void *)(v23 + 128));
      *(_OWORD *)&v75[8] = v103;
      *(_OWORD *)&v75[24] = v104;
      *(_OWORD *)&v75[40] = v105;
      *(void *)&v75[56] = v106;
      if (*(void *)&v75[64])
      {
        *(void *)&v75[72] = *(void *)&v75[64];
        operator delete(*(void **)&v75[64]);
      }
      *(_OWORD *)&v75[64] = v107;
      *(void *)&v75[80] = v108;
      uint64_t v108 = 0;
      long long v107 = 0uLL;
      uint64_t v76 = v109;
    }
    long long v24 = (uint64_t *)v59[17];
    for (uint64_t i = (uint64_t *)v59[18]; v24 != i; ++v24)
    {
      uint64_t v26 = *v24;
      HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>::unarchive((uint64_t)&v103, *(HDStatisticsTimeInterval **)(*v24 + 8), *(void *)(*v24 + 128));
      uint64_t v27 = *(void *)(v26 + 144);
      BOOL v28 = v78;
      char v29 = &v78;
      char v30 = &v78;
      if (v78)
      {
        do
        {
          while (1)
          {
            char v30 = (uint64_t **)v28;
            uint64_t v31 = v28[4];
            if (v31 <= v27) {
              break;
            }
            BOOL v28 = *v30;
            char v29 = v30;
            if (!*v30) {
              goto LABEL_34;
            }
          }
          if (v31 >= v27)
          {
            double v33 = (char *)v30;
            goto LABEL_37;
          }
          BOOL v28 = v30[1];
        }
        while (v28);
        char v29 = v30 + 1;
      }
LABEL_34:
      double v33 = (char *)operator new(0x80uLL);
      *((void *)v33 + 4) = v27;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *((void *)v33 + 15) = 0;
      *(void *)double v33 = 0;
      *((void *)v33 + 1) = 0;
      *((void *)v33 + 2) = v30;
      *char v29 = (uint64_t *)v33;
      int v32 = (uint64_t *)v33;
      if (*v77)
      {
        uint64_t v77 = (uint64_t **)*v77;
        int v32 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v78, v32);
      ++v79;
LABEL_37:
      long long v34 = v105;
      uint64_t v35 = (void *)*((void *)v33 + 12);
      long long v36 = v104;
      *(_OWORD *)(v33 + 40) = v103;
      *(_OWORD *)(v33 + 56) = v36;
      *(_OWORD *)(v33 + 72) = v34;
      *((void *)v33 + 11) = v106;
      if (v35)
      {
        *((void *)v33 + 13) = v35;
        operator delete(v35);
        *((void *)v33 + 12) = 0;
        *((void *)v33 + 13) = 0;
        *((void *)v33 + 14) = 0;
      }
      *((_OWORD *)v33 + 6) = v107;
      *((void *)v33 + 14) = v108;
      uint64_t v108 = 0;
      long long v107 = 0uLL;
      *((void *)v33 + 15) = v109;
    }
    uint64_t v37 = v59[5];
    for (uint64_t j = v59[6]; v37 != j; v37 += 8)
    {
      double v40 = *(double *)(*(void *)v37 + 8);
      double v39 = *(double *)(*(void *)v37 + 16);
      if (v40 >= v39) {
        double v41 = *(double *)(*(void *)v37 + 16);
      }
      else {
        double v41 = *(double *)(*(void *)v37 + 8);
      }
      if (v39 < v40) {
        double v39 = *(double *)(*(void *)v37 + 8);
      }
      HKIntervalMask<double>::_insertInterval(v73, v41, v39);
    }
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::operator=((uint64_t)v63, (uint64_t)&v66);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v66);
  }
  uint64_t v42 = v97;
  uint64_t v43 = v98;
  if (v97 != v98)
  {
    unint64_t v44 = *((void *)&v64 + 1);
    do
    {
      uint64_t v45 = *(void *)(*(void *)v42 + 24);
      uint64_t v46 = *(void *)(*(void *)v42 + 32);
      uint64_t v47 = *(void *)(*(void *)v42 + 8);
      uint64_t v48 = *(void *)(*(void *)v42 + 16);
      if (v44 >= (unint64_t)v65)
      {
        int v49 = (void *)v64;
        unint64_t v50 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v44 - v64) >> 3);
        unint64_t v51 = v50 + 1;
        if (v50 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(v65 - v64) >> 3) > v51) {
          unint64_t v51 = 0x999999999999999ALL * ((uint64_t)(v65 - v64) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v65 - v64) >> 3) >= 0x333333333333333) {
          unint64_t v52 = 0x666666666666666;
        }
        else {
          unint64_t v52 = v51;
        }
        if (v52)
        {
          unint64_t v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v52);
          unint64_t v44 = *((void *)&v64 + 1);
          int v49 = (void *)v64;
        }
        else
        {
          uint64_t v53 = 0;
        }
        unint64_t v54 = v52 + 40 * v50;
        *(void *)unint64_t v54 = v46;
        *(void *)(v54 + 8) = v45;
        *(void *)(v54 + 16) = v47;
        *(void *)(v54 + 24) = v48;
        *(_WORD *)(v54 + 32) = 1;
        unint64_t v55 = v54;
        if ((void *)v44 != v49)
        {
          do
          {
            long long v56 = *(_OWORD *)(v44 - 40);
            long long v57 = *(_OWORD *)(v44 - 24);
            *(_WORD *)(v55 - 8) = *(_WORD *)(v44 - 8);
            *(_OWORD *)(v55 - 24) = v57;
            *(_OWORD *)(v55 - 40) = v56;
            v55 -= 40;
            v44 -= 40;
          }
          while ((void *)v44 != v49);
          int v49 = (void *)v64;
        }
        unint64_t v44 = v54 + 40;
        *(void *)&long long v64 = v55;
        *((void *)&v64 + 1) = v54 + 40;
        *(void *)&long long v65 = v52 + 40 * v53;
        if (v49) {
          operator delete(v49);
        }
      }
      else
      {
        *(void *)unint64_t v44 = v46;
        *(void *)(v44 + 8) = v45;
        *(void *)(v44 + 16) = v47;
        *(void *)(v44 + 24) = v48;
        *(_WORD *)(v44 + 32) = 1;
        v44 += 40;
      }
      *((void *)&v64 + 1) = v44;
      v42 += 8;
    }
    while (v42 != v43);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v94);

  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::operator=((void *)(v60 + 112), (uint64_t)&v62);
  if ((void)v64)
  {
    *((void *)&v64 + 1) = v64;
    operator delete((void *)v64);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v63);
}

void sub_1BD15A958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a3);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table((uint64_t)&STACK[0x350]);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x328]);
  uint64_t v9 = (void *)STACK[0x310];
  if (STACK[0x310])
  {
    STACK[0x318] = (unint64_t)v9;
    operator delete(v9);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x2E8]);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>>::destroy((void *)STACK[0x2D8]);
  uint64_t v10 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v11;
    operator delete(v11);
  }
  objc_destroyWeak((id *)&STACK[0x258]);
  char v12 = (void *)STACK[0x240];
  if (STACK[0x240])
  {
    STACK[0x248] = (unint64_t)v12;
    operator delete(v12);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x3A8]);
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_WORD *)(a1 + 160) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = a1 + 216;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 264) = 1065353216;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(void *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 1065353216;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_DWORD *)(a1 + 368) = 1065353216;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_DWORD *)(a1 + 408) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 424);
  if (v2)
  {
    *(void *)(a1 + 432) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::~HDStatisticsBucket(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 376);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 336);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 296);
  unint64_t v2 = *(void **)(a1 + 272);
  if (v2)
  {
    *(void *)(a1 + 280) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 232);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>>::destroy(*(void **)(a1 + 216));
  id v3 = *(void **)(a1 + 176);
  if (v3)
  {
    *(void *)(a1 + 184) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(void *)(a1 + 104) = v4;
    operator delete(v4);
  }
  objc_destroyWeak((id *)(a1 + 88));
  uint64_t v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(void *)(a1 + 72) = v5;
    operator delete(v5);
  }

  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>>::destroy(a1[1]);
    unint64_t v2 = (void *)a1[12];
    if (v2)
    {
      a1[13] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_configureForStartTime(uint64_t a1)
{
  uint64_t v29 = 0;
  unint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
    uint64_t v4 = [v2 dateIntervalContainingDate:v3 index:&v29];

    uint64_t v5 = [v4 startDate];
    [v5 timeIntervalSinceReferenceDate];
    double v7 = v6;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
LABEL_5:
    double v13 = v9;

    goto LABEL_6;
  }
  id v10 = *(id *)(a1 + 64);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v11 = [v10 startDate];
    [v11 timeIntervalSinceReferenceDate];
    double v7 = v12;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
    goto LABEL_5;
  }
  double v7 = -1.79769313e308;
  double v13 = 1.79769313e308;
LABEL_6:

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v22, WeakRetained, v7, v13);

  if (*(void *)(a1 + 32) == 1) {
    char v24 = 1;
  }
  uint64_t v23 = *(void *)(a1 + 56);
  char v25 = *(unsigned char *)(a1 + 24) & 1;
  if (v28 != (char *)(a1 + 72)) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v28, *(char **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4);
  }
  objc_storeStrong(&v27, *(id *)(a1 + 584));
  if (!*(void *)(a1 + 40)) {
    int v26 = 0;
  }
  uint64_t v15 = v29;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v22);
  uint64_t v18 = v15;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v19, (uint64_t)v17);
  long long __p = 0u;
  long long v21 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::operator=((void *)(a1 + 112), (uint64_t)&v18);

  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v19);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v17);
  *(unsigned char *)(a1 + 568) = 0;
  return HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v22);
}

void sub_1BD15AF08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::operator=(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::operator=((uint64_t)(a1 + 1), a2 + 8);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 53), (__n128 *)(a2 + 424));
  uint64_t v4 = *(void *)(a2 + 448);
  *(void *)(a2 + 448) = 0;
  uint64_t v5 = (void *)a1[56];
  a1[56] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 96);
  double v7 = *(unsigned char **)(a2 + 104);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(void *)(a1 + 96) = v10;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(void *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  long long v12 = *(_OWORD *)(a2 + 120);
  long long v13 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v13;
  *(_OWORD *)(a1 + 120) = v12;
  uint64_t v14 = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 168) = v14;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 176), *(const void **)(a2 + 176), *(void *)(a2 + 184), (uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 4);
  uint64_t v15 = *(void *)(a2 + 200);
  *(void *)(a1 + 216) = 0;
  unint64_t v16 = (void *)(a1 + 216);
  *(void *)(a1 + 200) = v15;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 208) = a1 + 216;
  unint64_t v17 = *(void **)(a2 + 208);
  if (v17 != (void *)(a2 + 216))
  {
    uint64_t v18 = 0;
    unint64_t v19 = (void *)(a1 + 216);
    while (1)
    {
      unint64_t v20 = (void *)(a1 + 216);
      if (v19 == v16) {
        goto LABEL_12;
      }
      long long v21 = v18;
      long long v22 = (void *)(a1 + 216);
      if (v18)
      {
        do
        {
          unint64_t v20 = v21;
          long long v21 = (void *)v21[1];
        }
        while (v21);
      }
      else
      {
        do
        {
          unint64_t v20 = (void *)v22[2];
          BOOL v23 = *v20 == (void)v22;
          long long v22 = v20;
        }
        while (v23);
      }
      uint64_t v24 = v17[4];
      if (v20[4] < v24)
      {
LABEL_12:
        if (v18) {
          char v25 = (uint64_t **)v20;
        }
        else {
          char v25 = (uint64_t **)(a1 + 216);
        }
        if (v18) {
          int v26 = (uint64_t **)(v20 + 1);
        }
        else {
          int v26 = (uint64_t **)(a1 + 216);
        }
        if (!*v26)
        {
LABEL_28:
          uint64_t v29 = (char *)operator new(0x80uLL);
          *((void *)v29 + 4) = v17[4];
          long long v30 = *(_OWORD *)(v17 + 5);
          long long v31 = *(_OWORD *)(v17 + 7);
          *(_OWORD *)(v29 + 72) = *(_OWORD *)(v17 + 9);
          *(_OWORD *)(v29 + 56) = v31;
          *(_OWORD *)(v29 + 40) = v30;
          uint64_t v32 = v17[11];
          *((void *)v29 + 12) = 0;
          *((void *)v29 + 11) = v32;
          *((void *)v29 + 13) = 0;
          *((void *)v29 + 14) = 0;
          std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)v29 + 12, (const void *)v17[12], v17[13], (uint64_t)(v17[13] - v17[12]) >> 4);
          *((void *)v29 + 15) = v17[15];
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 208), (uint64_t)v25, v26, (uint64_t *)v29);
        }
      }
      else
      {
        int v26 = (uint64_t **)(a1 + 216);
        char v25 = (uint64_t **)(a1 + 216);
        if (!v18) {
          goto LABEL_28;
        }
        id v27 = v18;
        while (1)
        {
          while (1)
          {
            char v25 = (uint64_t **)v27;
            uint64_t v28 = v27[4];
            if (v28 <= v24) {
              break;
            }
            id v27 = *v25;
            int v26 = v25;
            if (!*v25) {
              goto LABEL_28;
            }
          }
          if (v28 >= v24) {
            break;
          }
          id v27 = v25[1];
          if (!v27)
          {
            int v26 = v25 + 1;
            goto LABEL_28;
          }
        }
      }
      double v33 = (void *)v17[1];
      if (v33)
      {
        do
        {
          long long v34 = v33;
          double v33 = (void *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          long long v34 = (void *)v17[2];
          BOOL v23 = *v34 == (void)v17;
          unint64_t v17 = v34;
        }
        while (!v23);
      }
      if (v34 == (void *)(a2 + 216)) {
        break;
      }
      uint64_t v18 = (void *)*v16;
      unint64_t v19 = *(void **)(a1 + 208);
      unint64_t v17 = v34;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 232, a2 + 232);
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 272), *(const void **)(a2 + 272), *(void *)(a2 + 280), (uint64_t)(*(void *)(a2 + 280) - *(void *)(a2 + 272)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 296, a2 + 296);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 336, a2 + 336);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 376, a2 + 376);
  return a1;
}

void sub_1BD15B2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, id *location, void **a12)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v17);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  unint64_t v19 = *v15;
  if (*v15)
  {
    *(void *)(v13 + 280) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>>::destroy(*v12);
  unint64_t v20 = *a9;
  if (*a9)
  {
    *(void *)(v13 + 184) = v20;
    operator delete(v20);
  }
  long long v21 = *a10;
  if (*a10)
  {
    *(void *)(v13 + 104) = v21;
    operator delete(v21);
  }
  objc_destroyWeak(location);
  long long v22 = *a12;
  if (*a12)
  {
    *(void *)(v13 + 72) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::operator=(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  long long v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v5;

  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  id WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  uint64_t v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(void *)(a1 + 104) = v9;
    operator delete(v9);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  long long v10 = *(_OWORD *)(a2 + 120);
  long long v11 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v11;
  *(_OWORD *)(a1 + 120) = v10;
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 176, (__n128 *)(a2 + 176));
  uint64_t v13 = a1 + 216;
  long long v12 = *(void **)(a1 + 216);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>>::destroy(v12);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  uint64_t v14 = (void *)(a2 + 216);
  uint64_t v15 = *(void *)(a2 + 216);
  *(void *)(a1 + 216) = v15;
  uint64_t v16 = *(void *)(a2 + 224);
  *(void *)(a1 + 224) = v16;
  if (v16)
  {
    *(void *)(v15 + 16) = v13;
    *(void *)(a2 + 208) = v14;
    *uint64_t v14 = 0;
    *(void *)(a2 + 224) = 0;
  }
  else
  {
    *(void *)(a1 + 208) = v13;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 232, (uint64_t *)(a2 + 232));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 272, (__n128 *)(a2 + 272));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 296, (uint64_t *)(a2 + 296));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 336, (uint64_t *)(a2 + 336));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 376, (uint64_t *)(a2 + 376));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  double v3 = *(double *)a2;
  id v4 = objc_alloc(MEMORY[0x1E4F1C9C8]);
  uint64_t v5 = (double *)(a2 + 40);
  if (v3 != -1.79769313e308) {
    uint64_t v5 = (double *)a2;
  }
  uint64_t v59 = (void *)[v4 initWithTimeIntervalSinceReferenceDate:*v5];
  if (*(double *)(a2 + 8) == 1.79769313e308) {
    uint64_t v6 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 48)];
  }
  else {
    uint64_t v6 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 8)];
  }
  long long v7 = (void *)v6;
  id v8 = *(id *)(a1 + 16);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v9 = *(id *)(a1 + 16);
    if ([v9 shouldUseUnderlyingTypeForStatistics])
    {
      uint64_t v10 = [v9 underlyingSampleType];

      id v8 = (id)v10;
    }
  }
  long long v11 = (void *)[objc_alloc(MEMORY[0x1E4F2B5B0]) initWithDataType:v8 startDate:v59 endDate:v7];
  if (*(unsigned char *)(a1 + 24))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      id v13 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      uint64_t v14 = *(uint64_t **)(a2 + 272);
      uint64_t v15 = *(uint64_t **)(a2 + 280);
      while (v14 != v15)
      {
        uint64_t v16 = *v14;
        id v17 = objc_loadWeakRetained((id *)(a1 + 48));
        uint64_t v18 = [v17 sourceForSourceID:v16];

        if (v18)
        {
          if (([v13 containsObject:v18] & 1) == 0) {
            [v13 addObject:v18];
          }
        }

        ++v14;
      }
      unint64_t v19 = (void *)[v13 copy];
      [v11 _setSources:v19];
    }
  }

  v70[0] = &unk_1F1726390;
  v70[3] = v70;
  id v60 = v11;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)v72, (uint64_t)v70);
  uint64_t v74 = 0;
  unint64_t v20 = operator new(0x28uLL);
  *unint64_t v20 = &unk_1F1726270;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(v20 + 1), (uint64_t)v72);
  uint64_t v74 = v20;
  id v21 = v60;
  long long v22 = (void *)MEMORY[0x1E4F2B370];
  BOOL v23 = [MEMORY[0x1E4F2B618] secondUnit];
  long long v24 = *(_OWORD *)(a2 + 136);
  long long v62 = *(_OWORD *)(a2 + 120);
  long long v63 = v24;
  long long v64 = *(_OWORD *)(a2 + 152);
  char v25 = *(const void **)(a2 + 176);
  uint64_t v65 = *(void *)(a2 + 168);
  long long __p = 0;
  uint64_t v26 = *(void *)(a2 + 184);
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v25, v26, (v26 - (uint64_t)v25) >> 4);
  uint64_t v69 = *(void *)(a2 + 200);
  if (!v74) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v27 = (*(uint64_t (**)(void *, long long *))(*v74 + 48))(v74, &v62);
  uint64_t v28 = *(double **)(v27 + 8);
  double v29 = 0.0;
  while (v28 != *(double **)(v27 + 16))
  {
    double v31 = *v28;
    double v30 = v28[1];
    v28 += 2;
    double v29 = v29 + v30 - v31;
  }
  uint64_t v32 = [v22 quantityWithUnit:v23 doubleValue:v29 + *(double *)(v27 + 32)];
  [v21 setDuration:v32];

  if (__p)
  {
    uint64_t v67 = __p;
    operator delete(__p);
  }

  long long v33 = *(_OWORD *)(a2 + 136);
  long long v62 = *(_OWORD *)(a2 + 120);
  long long v63 = v33;
  long long v64 = *(_OWORD *)(a2 + 152);
  long long v34 = *(const void **)(a2 + 176);
  uint64_t v65 = *(void *)(a2 + 168);
  long long __p = 0;
  uint64_t v35 = *(void *)(a2 + 184);
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v34, v35, (v35 - (uint64_t)v34) >> 4);
  uint64_t v69 = *(void *)(a2 + 200);
  if (!v74) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  objc_msgSend(v21, "setDataCount:", *(void *)(*(uint64_t (**)(void *, long long *))(*v74 + 48))(v74, &v62));
  if (__p)
  {
    uint64_t v67 = __p;
    operator delete(__p);
  }
  if (*(unsigned char *)(a1 + 24))
  {
    id v36 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v37 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier((uint64_t)&v62, a2);
    for (uint64_t i = (uint64_t **)v63; i; uint64_t i = (uint64_t **)*i)
    {
      double v39 = i[2];
      double v40 = (void *)MEMORY[0x1E4F2B370];
      double v41 = [MEMORY[0x1E4F2B618] secondUnit];
      if (!v74) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v42 = (*(uint64_t (**)(void *, uint64_t *))(*v74 + 48))(v74, (uint64_t *)i + 3);
      uint64_t v43 = *(double **)(v42 + 8);
      double v44 = 0.0;
      while (v43 != *(double **)(v42 + 16))
      {
        double v46 = *v43;
        double v45 = v43[1];
        v43 += 2;
        double v44 = v44 + v45 - v46;
      }
      uint64_t v47 = [v40 quantityWithUnit:v41 doubleValue:v44 + *(double *)(v42 + 32)];
      [v36 setObject:v47 forKeyedSubscript:v39];

      if (!v74) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v48 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)(*(uint64_t (**)(void *, uint64_t *))(*v74 + 48))(v74, (uint64_t *)i + 3));
      [v37 setObject:v48 forKeyedSubscript:v39];
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)&v62);
    [v21 setDurationBySource:v36];
    [v21 setDataCountBySource:v37];
  }
  std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v73);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v72);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)v71, (uint64_t)v70);
  uint64_t v74 = 0;
  int v49 = operator new(0x28uLL);
  *int v49 = &unk_1F1726300;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(v49 + 1), (uint64_t)v71);
  uint64_t v74 = v49;
  id v50 = v21;
  long long v51 = *(_OWORD *)(a2 + 136);
  long long v62 = *(_OWORD *)(a2 + 120);
  long long v63 = v51;
  long long v64 = *(_OWORD *)(a2 + 152);
  unint64_t v52 = *(const void **)(a2 + 176);
  uint64_t v65 = *(void *)(a2 + 168);
  long long __p = 0;
  uint64_t v53 = *(void *)(a2 + 184);
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v52, v53, (v53 - (uint64_t)v52) >> 4);
  uint64_t v69 = *(void *)(a2 + 200);
  if (!v74) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  objc_msgSend(v50, "setDataCount:", *(void *)(*(uint64_t (**)(void *, long long *))(*v74 + 48))(v74, &v62));
  if (__p)
  {
    uint64_t v67 = __p;
    operator delete(__p);
  }
  if (*(unsigned char *)(a1 + 24))
  {
    id v54 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier((uint64_t)&v62, a2);
    for (uint64_t j = (uint64_t **)v63; j; uint64_t j = (uint64_t **)*j)
    {
      long long v56 = j[2];
      if (!v74) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      long long v57 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)(*(uint64_t (**)(void *, uint64_t *))(*v74 + 48))(v74, (uint64_t *)j + 3));
      [v54 setObject:v57 forKeyedSubscript:v56];
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)&v62);
    [v50 setDataCountBySource:v54];
  }
  std::__function::__value_func<HDStatisticsPresence const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v73);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v71);

  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v70);

  return v50;
}

void sub_1BD15BCFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 256);
  uint64_t v2 = *(void *)(a1 + 272);
  if (v1 != (*(void *)(a1 + 280) - v2) >> 3)
  {
    id v4 = (void **)(a1 + 272);
    *(void *)(a1 + 280) = v2;
    std::vector<long long>::reserve((void **)(a1 + 272), v1);
    uint64_t v5 = *(void **)(a1 + 248);
    if (v5)
    {
      uint64_t v6 = *(char **)(a1 + 280);
      do
      {
        uint64_t v7 = v5[2];
        unint64_t v8 = *(void *)(a1 + 288);
        if ((unint64_t)v6 >= v8)
        {
          uint64_t v10 = (char *)*v4;
          uint64_t v11 = (v6 - (unsigned char *)*v4) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            uint64_t v10 = *(char **)(a1 + 272);
            uint64_t v6 = *(char **)(a1 + 280);
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v16 = (void *)(v14 + 8 * v11);
          void *v16 = v7;
          id v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            uint64_t v17 = *((void *)v6 - 1);
            v6 -= 8;
            *--uint64_t v16 = v17;
          }
          *(void *)(a1 + 272) = v16;
          *(void *)(a1 + 280) = v9;
          *(void *)(a1 + 288) = v14 + 8 * v15;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)uint64_t v6 = v7;
          id v9 = v6 + 8;
        }
        *(void *)(a1 + 280) = v9;
        uint64_t v5 = (void *)*v5;
        uint64_t v6 = v9;
      }
      while (v5);
    }
    uint64_t v18 = (id *)(a1 + 88);
    id WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      id v20 = objc_loadWeakRetained(v18);
      [v20 orderSourceIDs:v4];
    }
  }
}

void sub_1BD15C074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2) {
    a2 = v4 * floor(a2 / v4);
  }
  double v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    uint64_t v126 = (void *)(a1 + 96);
    uint64_t v122 = (double **)(a1 + 64);
    long long v120 = (uint64_t *)(a1 + 168);
    location = (id *)(a1 + 88);
    long long v116 = (double **)(a1 + 176);
    long long v115 = (void *)(a1 + 216);
    while (1)
    {
      unint64_t v6 = *(void *)(a1 + 96);
      uint64_t v7 = *(long long **)(a1 + 104);
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v7 - v6) >> 4);
      if (v8) {
        break;
      }
LABEL_134:
      *(double *)(a1 + 56) = a2;
LABEL_135:
      double v112 = *(double *)(a1 + 56);
      if (v112 == v5)
      {
        long long v113 = [MEMORY[0x1E4F28B00] currentHandler];
        long long v114 = objc_msgSend(NSString, "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence, HDStatisticsTimeInterval>>::_mergeThroughTime(double) [Statistics = HDStatisticsCombined<HDStatisticsPresence, HDStatisticsTimeInterval>]");
        [v113 handleFailureInFunction:v114 file:@"HDStatisticsBucket.hpp" lineNumber:234 description:@"Failed to make forward progress during statistics merge."];

        double v112 = *(double *)(a1 + 56);
      }
      double v5 = v112;
      if (v112 >= a2) {
        return;
      }
    }
    if (v8 != 1)
    {
      double v20 = a2;
      double v21 = a2;
      double v22 = v5;
      uint64_t v23 = *(void *)(a1 + 96);
      if ((long long *)v6 != v7)
      {
        do
        {
          double v24 = *(double *)(v23 + 8);
          double v25 = *(double *)(v23 + 16);
          if (v24 > v22 && v24 < v21) {
            double v21 = *(double *)(v23 + 8);
          }
          if (v25 > v5) {
            double v27 = *(double *)(v23 + 16);
          }
          else {
            double v27 = v20;
          }
          if (v25 < v20)
          {
            double v22 = v5;
            double v20 = v27;
          }
          v23 += 48;
        }
        while ((long long *)v23 != v7);
      }
      if (v20 >= v21) {
        double v28 = v21;
      }
      else {
        double v28 = v20;
      }
      double v29 = *(double *)(a1 + 16);
      if (v29 > 0.0)
      {
        double v30 = v29 * floor(v28 / v29);
        double v31 = v29 * floor((v29 + v5) / v29);
        if (v30 >= v31) {
          double v28 = v30;
        }
        else {
          double v28 = v31;
        }
      }
      void *v126 = 0;
      v126[1] = 0;
      v126[2] = 0;
      if ((long long *)v6 != v7)
      {
        if (v8 > 0x555555555555555) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v8);
        uint64_t v35 = *(char **)(a1 + 96);
        long long v34 = *(char **)(a1 + 104);
        id v36 = v32;
        if (v34 != v35)
        {
          do
          {
            long long v37 = *((_OWORD *)v34 - 3);
            long long v38 = *((_OWORD *)v34 - 2);
            *(_OWORD *)(v36 - 21) = *(_OWORD *)(v34 - 21);
            *((_OWORD *)v36 - 3) = v37;
            *((_OWORD *)v36 - 2) = v38;
            v36 -= 48;
            v34 -= 48;
          }
          while (v34 != v35);
          long long v34 = (char *)*v126;
        }
        *(void *)(a1 + 96) = v36;
        *(void *)(a1 + 104) = v32;
        *(void *)(a1 + 112) = &v32[48 * v33];
        if (v34) {
          operator delete(v34);
        }
      }
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_updateSourceOrder(a1);
      id WeakRetained = objc_loadWeakRetained(location);

      if (WeakRetained)
      {
        *(void *)&v128.var0 = a1;
        unint64_t v40 = 126 - 2 * __clz(v8);
        if ((long long *)v6 == v7) {
          uint64_t v41 = 0;
        }
        else {
          uint64_t v41 = v40;
        }
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(v6, v7, (uint64_t)&v128, v41, 1);
      }
      if (*(unsigned char *)(a1 + 25)) {
        id v119 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      }
      else {
        id v119 = 0;
      }
      long long v118 = (void *)v6;
      if ((long long *)v6 == v7)
      {
LABEL_112:
        *(double *)(a1 + 200) = HKIntervalMask<double>::removeIntervalsBefore(v116, v28) + *(double *)(a1 + 200);
        uint64_t v97 = *(void **)(a1 + 208);
        if (v97 != v115)
        {
          do
          {
            *((double *)v97 + 15) = HKIntervalMask<double>::removeIntervalsBefore((double **)v97 + 12, v28)
                                  + *((double *)v97 + 15);
            uint64_t v98 = (void *)v97[1];
            if (v98)
            {
              do
              {
                uint64_t v99 = v98;
                uint64_t v98 = (void *)*v98;
              }
              while (v98);
            }
            else
            {
              do
              {
                uint64_t v99 = (void *)v97[2];
                BOOL v100 = *v99 == (void)v97;
                uint64_t v97 = v99;
              }
              while (!v100);
            }
            uint64_t v97 = v99;
          }
          while (v99 != v115);
        }
        *(double *)(a1 + 56) = v28;

        if (v118) {
          operator delete(v118);
        }
        goto LABEL_135;
      }
      int64_t v121 = 0;
      char v44 = 0;
      unint64_t v45 = v6;
      while (2)
      {
        long long v46 = *(_OWORD *)(v45 + 16);
        *(_OWORD *)&v128.var0 = *(_OWORD *)v45;
        *(_OWORD *)&v128.double var2 = v46;
        *(void *)&v128.BOOL var4 = *(void *)(v45 + 32);
        uint64_t v47 = v46;
        double v48 = v28 - v128.var1;
        double v49 = *(double *)&v46 - v128.var1;
        if (v49 - (v28 - v128.var1) >= 0.01)
        {
          if (v48 < 0.01)
          {
            v128.BOOL var4 = 0;
            goto LABEL_61;
          }
          double v55 = v48 / v49 * v128.var0;
          int64_t var3 = v128.var3;
          BOOL var5 = v128.var5;
          double v54 = v128.var0 - v55;
          v128.var0 = v55;
          v128.double var2 = v28;
          double v53 = v28;
          BOOL var4 = v128.var4;
          if (v128.var4) {
            goto LABEL_54;
          }
LABEL_61:
          uint64_t v59 = *(_OWORD **)(a1 + 104);
          unint64_t v60 = *(void *)(a1 + 112);
          if ((unint64_t)v59 < v60)
          {
            long long v61 = *(_OWORD *)v45;
            long long v62 = *(_OWORD *)(v45 + 32);
            v59[1] = *(_OWORD *)(v45 + 16);
            v59[2] = v62;
            *uint64_t v59 = v61;
            long long v63 = v59 + 3;
            goto LABEL_110;
          }
          unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v59 - *v126) >> 4);
          unint64_t v65 = v64 + 1;
          if (v64 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - *v126) >> 4);
          if (2 * v66 > v65) {
            unint64_t v65 = 2 * v66;
          }
          if (v66 >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v67 = 0x555555555555555;
          }
          else {
            unint64_t v67 = v65;
          }
          if (v67) {
            unint64_t v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v67);
          }
          else {
            uint64_t v68 = 0;
          }
          uint64_t v74 = (_OWORD *)(v67 + 48 * v64);
          long long v75 = *(_OWORD *)v45;
          long long v76 = *(_OWORD *)(v45 + 32);
          v74[1] = *(_OWORD *)(v45 + 16);
          v74[2] = v76;
          *uint64_t v74 = v75;
          uint64_t v78 = *(char **)(a1 + 96);
          uint64_t v77 = *(char **)(a1 + 104);
          uint64_t v79 = v74;
          if (v77 != v78)
          {
            do
            {
              long long v80 = *((_OWORD *)v77 - 3);
              long long v81 = *((_OWORD *)v77 - 2);
              *(_OWORD *)((char *)v79 - 21) = *(_OWORD *)(v77 - 21);
              *(v79 - 3) = v80;
              *(v79 - 2) = v81;
              v79 -= 3;
              v77 -= 48;
            }
            while (v77 != v78);
            uint64_t v77 = (char *)*v126;
          }
          long long v63 = v74 + 3;
          *(void *)(a1 + 96) = v79;
          *(void *)(a1 + 104) = v74 + 3;
          *(void *)(a1 + 112) = v67 + 48 * v68;
          if (v77)
          {
            int v82 = v77;
            goto LABEL_109;
          }
LABEL_110:
          *(void *)(a1 + 104) = v63;
        }
        else
        {
          int64_t var3 = 0;
          BOOL var4 = 0;
          BOOL var5 = 0;
          double v53 = 0.0;
          uint64_t v47 = 0;
          double v54 = 0.0;
          if (!v128.var4) {
            goto LABEL_61;
          }
LABEL_54:
          BOOL v124 = var5;
          int64_t v125 = var3;
          HDRawQuantitySample::applyMask((uint64_t)&v128, v122);
          int v56 = *(unsigned __int8 *)(v45 + 42);
          int v57 = *(unsigned __int8 *)(v45 + 41);
          char v123 = *(unsigned char *)(v45 + 40);
          if (v128.var4)
          {
            if (v44)
            {
              unint64_t v58 = v128.var3;
              if (v121 == v128.var3 || *(unsigned char *)(a1 + 24))
              {
                if (!*(unsigned char *)(v45 + 42)) {
                  ++*(void *)(a1 + 120);
                }
                HDStatisticsTimeInterval::addSample(v120, &v128, v56 == 0);
                int v56 = 1;
              }
            }
            else
            {
              if (!*(unsigned char *)(v45 + 42)) {
                ++*(void *)(a1 + 120);
              }
              HDStatisticsTimeInterval::addSample(v120, &v128, v56 == 0);
              int v56 = 1;
              unint64_t v58 = v128.var3;
              int64_t v121 = v128.var3;
            }
            if (*(unsigned char *)(a1 + 25))
            {
              uint64_t v69 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, v58);
              if (v69)
              {
                uint64_t v70 = [v119 objectForKeyedSubscript:v69];
                int8x16_t v71 = v70;
                if (v70)
                {
                  if ([v70 longLongValue] == v58 || *(unsigned char *)(a1 + 24))
                  {
                    unint64_t v72 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v58);
                    uint64_t v73 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_statisticsForSource(a1, v72);
                    goto LABEL_87;
                  }
                }
                else
                {
                  long long v83 = [NSNumber numberWithLongLong:v58];
                  [v119 setObject:v83 forKeyedSubscript:v69];

                  unint64_t v84 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v58);
                  uint64_t v73 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_statisticsForSource(a1, v84);
LABEL_87:
                  if (!v57) {
                    *uint64_t v73 = (uint64_t *)((char *)*v73 + 1);
                  }
                  HDStatisticsTimeInterval::addSample((uint64_t *)v73 + 6, &v128, v57 == 0);
                  LOBYTE(v57) = 1;
                }
              }
            }
            char v44 = 1;
          }
          if (var4)
          {
            BOOL v85 = v56 != 0;
            int v87 = *(char **)(a1 + 104);
            unint64_t v86 = *(void *)(a1 + 112);
            if ((unint64_t)v87 < v86)
            {
              *(double *)int v87 = v54;
              *((double *)v87 + 1) = v53;
              *((void *)v87 + 2) = v47;
              *((void *)v87 + 3) = v125;
              v87[32] = var4;
              v87[33] = v124;
              v87[40] = v123;
              v87[41] = v57;
              long long v63 = v87 + 48;
              v87[42] = v85;
              goto LABEL_110;
            }
            int v82 = (char *)*v126;
            unint64_t v88 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v87[-*v126] >> 4);
            unint64_t v89 = v88 + 1;
            if (v88 + 1 > 0x555555555555555) {
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v90 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v86 - (void)v82) >> 4);
            if (2 * v90 > v89) {
              unint64_t v89 = 2 * v90;
            }
            if (v90 >= 0x2AAAAAAAAAAAAAALL) {
              unint64_t v91 = 0x555555555555555;
            }
            else {
              unint64_t v91 = v89;
            }
            if (v91)
            {
              unint64_t v91 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v91);
              int v82 = *(char **)(a1 + 96);
              int v87 = *(char **)(a1 + 104);
            }
            else
            {
              uint64_t v92 = 0;
            }
            unint64_t v93 = v91 + 48 * v88;
            *(double *)unint64_t v93 = v54;
            *(double *)(v93 + 8) = v53;
            *(void *)(v93 + 16) = v47;
            *(void *)(v93 + 24) = v125;
            *(unsigned char *)(v93 + 32) = var4;
            *(unsigned char *)(v93 + 33) = v124;
            *(unsigned char *)(v93 + 40) = v123;
            *(unsigned char *)(v93 + 41) = v57;
            *(unsigned char *)(v93 + 42) = v85;
            unint64_t v94 = v93;
            if (v87 != v82)
            {
              do
              {
                long long v95 = *((_OWORD *)v87 - 3);
                long long v96 = *((_OWORD *)v87 - 2);
                *(_OWORD *)(v94 - 21) = *(_OWORD *)(v87 - 21);
                *(_OWORD *)(v94 - 48) = v95;
                *(_OWORD *)(v94 - 32) = v96;
                v94 -= 48;
                v87 -= 48;
              }
              while (v87 != v82);
              int v82 = (char *)*v126;
            }
            long long v63 = (_OWORD *)(v93 + 48);
            *(void *)(a1 + 96) = v94;
            *(void *)(a1 + 104) = v93 + 48;
            *(void *)(a1 + 112) = v91 + 48 * v92;
            if (v82) {
LABEL_109:
            }
              operator delete(v82);
            goto LABEL_110;
          }
        }
        v45 += 48;
        if ((long long *)v45 == v7) {
          goto LABEL_112;
        }
        continue;
      }
    }
    double v10 = *(double *)v6;
    double v9 = *(double *)(v6 + 8);
    double v11 = *(double *)(v6 + 16);
    int64_t v12 = *(void *)(v6 + 24);
    char v13 = *(unsigned char *)(v6 + 32);
    char v14 = *(unsigned char *)(v6 + 33);
    double v15 = a2 - v9;
    if (a2 - v9 >= 0.01)
    {
      if (v11 - v9 - v15 < 0.01)
      {
        uint64_t v42 = 0;
        char v43 = 0;
        double v18 = 0.0;
        double v17 = *(double *)(v6 + 16);
        char v16 = *(unsigned char *)(v6 + 32);
        double v19 = 0.0;
        double v11 = 0.0;
        char v13 = 0;
LABEL_123:
        int v102 = *(unsigned __int8 *)(v6 + 42);
        int v103 = *(unsigned __int8 *)(v6 + 41);
        int v104 = *(unsigned __int8 *)(v6 + 40);
        v128.var0 = v10;
        v128.double var1 = v9;
        v128.double var2 = v17;
        v128.int64_t var3 = v12;
        v128.BOOL var4 = v16;
        v128.BOOL var5 = v14;
        *(_DWORD *)(&v128.var5 + 1) = *(_DWORD *)(v6 + 34);
        *(_WORD *)(&v128.var5 + 5) = *(_WORD *)(v6 + 38);
        *(double *)&long long v129 = v18;
        *((double *)&v129 + 1) = v19;
        *(double *)&long long v130 = v11;
        *((void *)&v130 + 1) = v42;
        LOBYTE(v131) = v13;
        HIBYTE(v131) = v43;
        HDRawQuantitySample::applyMask((uint64_t)&v128, v122);
        BOOL v105 = v104 != 0;
        BOOL v106 = v103 != 0;
        BOOL v107 = v102 != 0;
        if (v128.var4)
        {
          if (!v102) {
            ++*(void *)(a1 + 120);
          }
          HDStatisticsTimeInterval::addSample(v120, &v128, v102 == 0);
          if (*(unsigned char *)(a1 + 25))
          {
            unint64_t v108 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v128.var3);
            uint64_t v109 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_statisticsForSource(a1, v108);
            if (!v103) {
              *uint64_t v109 = (uint64_t *)((char *)*v109 + 1);
            }
            HDStatisticsTimeInterval::addSample((uint64_t *)v109 + 6, &v128, v103 == 0);
          }
          BOOL v105 = 1;
          BOOL v106 = 1;
          BOOL v107 = 1;
        }
        if ((_BYTE)v131)
        {
          LOWORD(v127) = v131;
          long long v110 = v130;
          long long v111 = (char *)*v126;
          *(_OWORD *)long long v111 = v129;
          *((_OWORD *)v111 + 1) = v110;
          *((void *)v111 + 4) = v127;
          v111[40] = v105;
          v111[41] = v106;
          v111[42] = v107;
        }
        else
        {
          *(void *)(a1 + 104) = *(void *)(a1 + 96);
        }
        goto LABEL_134;
      }
      double v101 = v10 * (v15 / (v11 - v9));
      double v17 = a2;
      char v16 = *(unsigned char *)(v6 + 32);
      double v18 = v10 - v101;
      double v10 = v101;
      double v19 = a2;
    }
    else
    {
      char v16 = 0;
      double v17 = *(double *)(v6 + 16);
      double v18 = *(double *)v6;
      double v19 = *(double *)(v6 + 8);
    }
    uint64_t v42 = *(void *)(v6 + 24);
    char v43 = *(unsigned char *)(v6 + 33);
    goto LABEL_123;
  }
}

void sub_1BD15CA68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    double v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((void *)(a1 + 296), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, a2);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      id v10 = v6;
      uint64_t v7 = (void *)(a1 + 336);
      unint64_t v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        double v11 = &v10;
        *((void *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        id v6 = v10;
      }
    }
  }
  return a2;
}

void sub_1BD15CBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  double v4 = (id *)(a1 + 88);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    id v6 = (void *)(a1 + 376);
    uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
    if (v7)
    {
      id v8 = (id)v7[3];
    }
    else
    {
      id v9 = objc_loadWeakRetained(v4);
      id v8 = [v9 bundleIdentifierForSourceID:a2];

      if (v8)
      {
        id v10 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
        objc_storeStrong(v10 + 3, v8);
      }
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1BD15CC98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v12 = a2 - 3;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 4);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v103 = *((void *)a2 - 3);
                uint64_t v104 = *(void *)(v13 + 24);
                if (v103 == v104) {
                  return;
                }
                BOOL v105 = *(char **)(*(void *)a3 + 272);
                BOOL v106 = *(char **)(*(void *)a3 + 280);
                BOOL v107 = v105;
                unint64_t v108 = v105;
                if (v105 == v106) {
                  goto LABEL_171;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)v13, (long long *)(v13 + 48), a2 - 3, a3);
                return;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, (uint64_t)(a2 - 3), a3);
                return;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, v13 + 144, (uint64_t)(a2 - 3), a3);
                return;
              default:
                JUMPOUT(0);
            }
            do
            {
              if (*(void *)v108 == v103) {
                goto LABEL_168;
              }
              v108 += 8;
            }
            while (v108 != v106);
            unint64_t v108 = *(char **)(*(void *)a3 + 280);
LABEL_168:
            while (*(void *)v107 != v104)
            {
              v107 += 8;
              if (v107 == v106)
              {
                BOOL v107 = *(char **)(*(void *)a3 + 280);
                break;
              }
            }
LABEL_171:
            if (v108 - v105 < v107 - v105)
            {
              *(_OWORD *)v226 = *(_OWORD *)(v13 + 16);
              *(_OWORD *)&v226[16] = *(_OWORD *)(v13 + 32);
              long long v218 = *(_OWORD *)v13;
              long long v109 = *v12;
              long long v110 = *(a2 - 2);
              *(_OWORD *)(v13 + 27) = *(long long *)((char *)a2 - 21);
              *(_OWORD *)unint64_t v13 = v109;
              *(_OWORD *)(v13 + 16) = v110;
              *(long long *)((char *)a2 - 21) = *(_OWORD *)&v226[11];
              long long *v12 = v218;
              *(a2 - 2) = *(_OWORD *)v226;
            }
            return;
          }
          if (v14 <= 1151)
          {
            long long v111 = (long long *)(v13 + 48);
            BOOL v113 = (long long *)v13 == a2 || v111 == a2;
            if (a5)
            {
              if (!v113)
              {
                unint64_t v114 = v13;
                do
                {
                  unint64_t v115 = v114;
                  unint64_t v114 = (unint64_t)v111;
                  uint64_t v116 = *(void *)(v115 + 72);
                  uint64_t v117 = *(void *)(v115 + 24);
                  if (v116 != v117)
                  {
                    long long v118 = *(char **)(*(void *)a3 + 272);
                    id v119 = *(char **)(*(void *)a3 + 280);
                    long long v120 = v118;
                    int64_t v121 = v118;
                    if (v118 != v119)
                    {
                      do
                      {
                        if (*(void *)v121 == v116) {
                          goto LABEL_196;
                        }
                        v121 += 8;
                      }
                      while (v121 != v119);
                      int64_t v121 = *(char **)(*(void *)a3 + 280);
LABEL_196:
                      while (*(void *)v120 != v117)
                      {
                        v120 += 8;
                        if (v120 == v119)
                        {
                          long long v120 = *(char **)(*(void *)a3 + 280);
                          break;
                        }
                      }
                    }
                    if (v121 - v118 < v120 - v118)
                    {
                      uint64_t v227 = *(void *)(v114 + 16);
                      long long v219 = *(_OWORD *)v114;
                      long long v236 = *(_OWORD *)(v115 + 80);
                      unint64_t v122 = v114;
                      while (1)
                      {
                        long long v123 = *(_OWORD *)(v115 + 16);
                        *(_OWORD *)unint64_t v122 = *(_OWORD *)v115;
                        *(_OWORD *)(v122 + 16) = v123;
                        *(_OWORD *)(v122 + 27) = *(_OWORD *)(v115 + 27);
                        if (v115 == v13) {
                          break;
                        }
                        unint64_t v122 = v115;
                        uint64_t v124 = *(void *)(v115 - 24);
                        if (v116 != v124)
                        {
                          int64_t v125 = *(char **)(*(void *)a3 + 272);
                          uint64_t v126 = *(char **)(*(void *)a3 + 280);
                          uint64_t v127 = v125;
                          HDRawQuantitySample v128 = v125;
                          if (v125 != v126)
                          {
                            do
                            {
                              if (*(void *)v128 == v116) {
                                goto LABEL_208;
                              }
                              v128 += 8;
                            }
                            while (v128 != v126);
                            HDRawQuantitySample v128 = *(char **)(*(void *)a3 + 280);
LABEL_208:
                            while (*(void *)v127 != v124)
                            {
                              v127 += 8;
                              if (v127 == v126)
                              {
                                uint64_t v127 = *(char **)(*(void *)a3 + 280);
                                break;
                              }
                            }
                          }
                          unint64_t v115 = v122 - 48;
                          if (v128 - v125 < v127 - v125) {
                            continue;
                          }
                        }
                        goto LABEL_212;
                      }
                      unint64_t v122 = v13;
LABEL_212:
                      *(_OWORD *)unint64_t v122 = v219;
                      *(void *)(v122 + 16) = v227;
                      *(void *)(v122 + 24) = v116;
                      *(void *)(v122 + 32) = v236;
                      *(_DWORD *)(v122 + 39) = *(_DWORD *)((char *)&v236 + 7);
                    }
                  }
                  long long v111 = (long long *)(v114 + 48);
                }
                while ((long long *)(v114 + 48) != a2);
              }
            }
            else if (!v113)
            {
              do
              {
                unint64_t v201 = a1;
                a1 = (unint64_t)v111;
                uint64_t v202 = *(void *)(v201 + 72);
                uint64_t v203 = *(void *)(v201 + 24);
                if (v202 != v203)
                {
                  v204 = *(char **)(*(void *)a3 + 272);
                  v205 = *(char **)(*(void *)a3 + 280);
                  v206 = v204;
                  v207 = v204;
                  if (v204 != v205)
                  {
                    do
                    {
                      if (*(void *)v207 == v202) {
                        goto LABEL_312;
                      }
                      v207 += 8;
                    }
                    while (v207 != v205);
                    v207 = *(char **)(*(void *)a3 + 280);
LABEL_312:
                    while (*(void *)v206 != v203)
                    {
                      v206 += 8;
                      if (v206 == v205)
                      {
                        v206 = *(char **)(*(void *)a3 + 280);
                        break;
                      }
                    }
                  }
                  if (v207 - v204 < v206 - v204)
                  {
                    uint64_t v230 = *(void *)(a1 + 16);
                    long long v222 = *(_OWORD *)a1;
                    long long v239 = *(_OWORD *)(v201 + 80);
                    unint64_t v208 = a1;
                    do
                    {
                      v209 = (_OWORD *)v208;
                      unint64_t v208 = v201;
                      long long v210 = *(_OWORD *)(v201 + 16);
                      _OWORD *v209 = *(_OWORD *)v201;
                      v209[1] = v210;
                      *(_OWORD *)((char *)v209 + 27) = *(_OWORD *)(v201 + 27);
                      uint64_t v211 = *(void *)(v201 - 24);
                      if (v202 == v211) {
                        break;
                      }
                      v212 = *(char **)(*(void *)a3 + 272);
                      v213 = *(char **)(*(void *)a3 + 280);
                      v214 = v212;
                      v215 = v212;
                      if (v212 != v213)
                      {
                        do
                        {
                          if (*(void *)v215 == v202) {
                            goto LABEL_322;
                          }
                          v215 += 8;
                        }
                        while (v215 != v213);
                        v215 = *(char **)(*(void *)a3 + 280);
LABEL_322:
                        while (*(void *)v214 != v211)
                        {
                          v214 += 8;
                          if (v214 == v213)
                          {
                            v214 = *(char **)(*(void *)a3 + 280);
                            break;
                          }
                        }
                      }
                      unint64_t v201 = v208 - 48;
                    }
                    while (v215 - v212 < v214 - v212);
                    *(_OWORD *)unint64_t v208 = v222;
                    *(void *)(v208 + 16) = v230;
                    *(void *)(v208 + 24) = v202;
                    *(void *)(v208 + 32) = v239;
                    *(_DWORD *)(v208 + 39) = *(_DWORD *)((char *)&v239 + 7);
                  }
                }
                long long v111 = (long long *)(a1 + 48);
              }
              while ((long long *)(a1 + 48) != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((long long *)v13 != a2)
            {
              int64_t v129 = (v15 - 2) >> 1;
              int64_t v130 = v129;
              do
              {
                int64_t v131 = v130;
                if (v129 >= v130)
                {
                  uint64_t v132 = (2 * v130) | 1;
                  unint64_t v133 = v13 + 48 * v132;
                  if (2 * v131 + 2 < (uint64_t)v15)
                  {
                    uint64_t v134 = *(void *)(v133 + 24);
                    uint64_t v135 = *(void *)(v133 + 72);
                    if (v134 != v135)
                    {
                      v137 = *(char **)(*(void *)a3 + 272);
                      v136 = *(char **)(*(void *)a3 + 280);
                      v138 = v137;
                      v139 = v137;
                      if (v137 != v136)
                      {
                        do
                        {
                          if (*(void *)v139 == v134) {
                            goto LABEL_224;
                          }
                          v139 += 8;
                        }
                        while (v139 != v136);
                        v139 = *(char **)(*(void *)a3 + 280);
LABEL_224:
                        while (*(void *)v138 != v135)
                        {
                          v138 += 8;
                          if (v138 == v136)
                          {
                            v138 = *(char **)(*(void *)a3 + 280);
                            break;
                          }
                        }
                      }
                      v133 += 48 * (v139 - v137 < v138 - v137);
                      if (v139 - v137 < v138 - v137) {
                        uint64_t v132 = 2 * v131 + 2;
                      }
                    }
                  }
                  unint64_t v140 = v13 + 48 * v131;
                  uint64_t v141 = *(void *)(v133 + 24);
                  uint64_t v142 = *(void *)(v140 + 24);
                  if (v141 == v142) {
                    goto LABEL_238;
                  }
                  v144 = *(char **)(*(void *)a3 + 272);
                  v143 = *(char **)(*(void *)a3 + 280);
                  v145 = v144;
                  v146 = v144;
                  if (v144 != v143)
                  {
                    do
                    {
                      if (*(void *)v146 == v141) {
                        goto LABEL_234;
                      }
                      v146 += 8;
                    }
                    while (v146 != v143);
                    v146 = *(char **)(*(void *)a3 + 280);
LABEL_234:
                    while (*(void *)v145 != v142)
                    {
                      v145 += 8;
                      if (v145 == v143)
                      {
                        v145 = *(char **)(*(void *)a3 + 280);
                        break;
                      }
                    }
                  }
                  if (v146 - v144 >= v145 - v144)
                  {
LABEL_238:
                    uint64_t v228 = *(void *)(v140 + 16);
                    long long v220 = *(_OWORD *)v140;
                    long long v237 = *(_OWORD *)(v140 + 32);
                    long long v147 = *(_OWORD *)v133;
                    long long v148 = *(_OWORD *)(v133 + 16);
                    *(_OWORD *)(v140 + 27) = *(_OWORD *)(v133 + 27);
                    *(_OWORD *)unint64_t v140 = v147;
                    *(_OWORD *)(v140 + 16) = v148;
                    if (v129 >= v132)
                    {
                      while (1)
                      {
                        uint64_t v150 = 2 * v132;
                        uint64_t v132 = (2 * v132) | 1;
                        unint64_t v149 = v13 + 48 * v132;
                        uint64_t v151 = v150 + 2;
                        if (v151 < (uint64_t)v15)
                        {
                          uint64_t v152 = *(void *)(v149 + 24);
                          uint64_t v153 = *(void *)(v149 + 72);
                          if (v152 != v153)
                          {
                            v154 = *(char **)(*(void *)a3 + 272);
                            v155 = *(char **)(*(void *)a3 + 280);
                            v156 = v154;
                            v157 = v154;
                            if (v154 != v155)
                            {
                              do
                              {
                                if (*(void *)v157 == v152) {
                                  goto LABEL_246;
                                }
                                v157 += 8;
                              }
                              while (v157 != v155);
                              v157 = *(char **)(*(void *)a3 + 280);
LABEL_246:
                              while (*(void *)v156 != v153)
                              {
                                v156 += 8;
                                if (v156 == v155)
                                {
                                  v156 = *(char **)(*(void *)a3 + 280);
                                  break;
                                }
                              }
                            }
                            v149 += 48 * (v157 - v154 < v156 - v154);
                            if (v157 - v154 < v156 - v154) {
                              uint64_t v132 = v151;
                            }
                          }
                        }
                        uint64_t v158 = *(void *)(v149 + 24);
                        if (v158 != v142)
                        {
                          v160 = *(char **)(*(void *)a3 + 272);
                          v159 = *(char **)(*(void *)a3 + 280);
                          v161 = v160;
                          v162 = v160;
                          if (v160 != v159)
                          {
                            do
                            {
                              if (*(void *)v162 == v158) {
                                goto LABEL_256;
                              }
                              v162 += 8;
                            }
                            while (v162 != v159);
                            v162 = *(char **)(*(void *)a3 + 280);
LABEL_256:
                            while (*(void *)v161 != v142)
                            {
                              v161 += 8;
                              if (v161 == v159)
                              {
                                v161 = *(char **)(*(void *)a3 + 280);
                                break;
                              }
                            }
                          }
                          if (v162 - v160 < v161 - v160) {
                            break;
                          }
                        }
                        long long v163 = *(_OWORD *)v149;
                        long long v164 = *(_OWORD *)(v149 + 16);
                        *(_OWORD *)(v133 + 27) = *(_OWORD *)(v149 + 27);
                        *(_OWORD *)unint64_t v133 = v163;
                        *(_OWORD *)(v133 + 16) = v164;
                        unint64_t v133 = v149;
                        if (v129 < v132) {
                          goto LABEL_261;
                        }
                      }
                    }
                    unint64_t v149 = v133;
LABEL_261:
                    *(_OWORD *)unint64_t v149 = v220;
                    *(void *)(v149 + 16) = v228;
                    *(void *)(v149 + 24) = v142;
                    *(void *)(v149 + 32) = v237;
                    *(_DWORD *)(v149 + 39) = *(_DWORD *)((char *)&v237 + 7);
                  }
                }
                int64_t v130 = v131 - 1;
              }
              while (v131);
              int64_t v165 = v14 / 0x30uLL;
              do
              {
                uint64_t v166 = 0;
                *(_OWORD *)v229 = *(_OWORD *)(v13 + 16);
                *(_OWORD *)&v229[16] = *(_OWORD *)(v13 + 32);
                long long v221 = *(_OWORD *)v13;
                uint64_t v167 = v165 - 2;
                if (v165 < 2) {
                  uint64_t v167 = v165 - 1;
                }
                uint64_t v168 = v167 >> 1;
                unint64_t v169 = v13;
                do
                {
                  v170 = (_OWORD *)v169;
                  v169 += 48 * v166 + 48;
                  uint64_t v171 = 2 * v166;
                  uint64_t v166 = (2 * v166) | 1;
                  uint64_t v172 = v171 + 2;
                  if (v171 + 2 < v165)
                  {
                    uint64_t v173 = *(void *)(v169 + 24);
                    uint64_t v174 = *(void *)(v169 + 72);
                    if (v173 != v174)
                    {
                      v176 = *(char **)(*(void *)a3 + 272);
                      v175 = *(char **)(*(void *)a3 + 280);
                      v177 = v176;
                      v178 = v176;
                      if (v176 != v175)
                      {
                        do
                        {
                          if (*(void *)v178 == v173) {
                            goto LABEL_273;
                          }
                          v178 += 8;
                        }
                        while (v178 != v175);
                        v178 = *(char **)(*(void *)a3 + 280);
LABEL_273:
                        while (*(void *)v177 != v174)
                        {
                          v177 += 8;
                          if (v177 == v175)
                          {
                            v177 = *(char **)(*(void *)a3 + 280);
                            break;
                          }
                        }
                      }
                      v169 += 48 * (v178 - v176 < v177 - v176);
                      if (v178 - v176 < v177 - v176) {
                        uint64_t v166 = v172;
                      }
                    }
                  }
                  long long v179 = *(_OWORD *)v169;
                  long long v180 = *(_OWORD *)(v169 + 16);
                  *(_OWORD *)((char *)v170 + 27) = *(_OWORD *)(v169 + 27);
                  _OWORD *v170 = v179;
                  v170[1] = v180;
                }
                while (v166 <= v168);
                a2 -= 3;
                if ((long long *)v169 == a2)
                {
                  *(_OWORD *)(v169 + 27) = *(_OWORD *)&v229[11];
                  *(_OWORD *)unint64_t v169 = v221;
                  *(_OWORD *)(v169 + 16) = *(_OWORD *)v229;
                }
                else
                {
                  long long v181 = *a2;
                  long long v182 = a2[1];
                  *(_OWORD *)(v169 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v169 = v181;
                  *(_OWORD *)(v169 + 16) = v182;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v229[11];
                  *a2 = v221;
                  a2[1] = *(_OWORD *)v229;
                  uint64_t v183 = v169 - v13 + 48;
                  if (v183 >= 49)
                  {
                    unint64_t v184 = (v183 / 0x30uLL - 2) >> 1;
                    unint64_t v185 = v13 + 48 * v184;
                    uint64_t v186 = *(void *)(v185 + 24);
                    uint64_t v187 = *(void *)(v169 + 24);
                    if (v186 != v187)
                    {
                      v189 = *(char **)(*(void *)a3 + 272);
                      v188 = *(char **)(*(void *)a3 + 280);
                      v190 = v189;
                      v191 = v189;
                      if (v189 != v188)
                      {
                        do
                        {
                          if (*(void *)v191 == v186) {
                            goto LABEL_286;
                          }
                          v191 += 8;
                        }
                        while (v191 != v188);
                        v191 = *(char **)(*(void *)a3 + 280);
LABEL_286:
                        while (*(void *)v190 != v187)
                        {
                          v190 += 8;
                          if (v190 == v188)
                          {
                            v190 = *(char **)(*(void *)a3 + 280);
                            break;
                          }
                        }
                      }
                      if (v191 - v189 < v190 - v189)
                      {
                        uint64_t v242 = *(void *)(v169 + 16);
                        long long v238 = *(_OWORD *)v169;
                        long long v233 = *(_OWORD *)(v169 + 32);
                        do
                        {
                          v192 = (_OWORD *)v169;
                          unint64_t v169 = v185;
                          long long v193 = *(_OWORD *)v185;
                          long long v194 = *(_OWORD *)(v185 + 16);
                          *(_OWORD *)((char *)v192 + 27) = *(_OWORD *)(v185 + 27);
                          _OWORD *v192 = v193;
                          v192[1] = v194;
                          if (!v184) {
                            break;
                          }
                          unint64_t v184 = (v184 - 1) >> 1;
                          unint64_t v185 = v13 + 48 * v184;
                          uint64_t v195 = *(void *)(v185 + 24);
                          if (v195 == v187) {
                            break;
                          }
                          v197 = *(char **)(*(void *)a3 + 272);
                          v196 = *(char **)(*(void *)a3 + 280);
                          v198 = v197;
                          v199 = v197;
                          if (v197 != v196)
                          {
                            do
                            {
                              if (*(void *)v199 == v195) {
                                goto LABEL_297;
                              }
                              v199 += 8;
                            }
                            while (v199 != v196);
                            v199 = *(char **)(*(void *)a3 + 280);
LABEL_297:
                            while (*(void *)v198 != v187)
                            {
                              v198 += 8;
                              if (v198 == v196)
                              {
                                v198 = *(char **)(*(void *)a3 + 280);
                                break;
                              }
                            }
                          }
                        }
                        while (v199 - v197 < v198 - v197);
                        *(_OWORD *)unint64_t v169 = v238;
                        *(void *)(v169 + 16) = v242;
                        *(void *)(v169 + 24) = v187;
                        *(void *)(v169 + 32) = v233;
                        *(_DWORD *)(v169 + 39) = *(_DWORD *)((char *)&v233 + 7);
                      }
                    }
                  }
                }
              }
              while (v165-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          double v17 = (long long *)(v13 + 48 * (v15 >> 1));
          if ((unint64_t)v14 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v15 >> 1)), a2 - 3, a3);
            uint64_t v18 = 3 * v16;
            double v19 = (long long *)(a1 + 48 * v16 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)(a1 + 48), v19, a2 - 6, a3);
            double v20 = (long long *)(a1 + 48 + 16 * v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)(a1 + 96), v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>(v19, v17, v20, a3);
            *(_OWORD *)v223 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v223[16] = *(_OWORD *)(a1 + 32);
            long long v216 = *(_OWORD *)a1;
            long long v21 = *(long long *)((char *)v17 + 27);
            long long v22 = v17[1];
            *(_OWORD *)a1 = *v17;
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(a1 + 27) = v21;
            *(long long *)((char *)v17 + 27) = *(_OWORD *)&v223[11];
            *double v17 = v216;
            v17[1] = *(_OWORD *)v223;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)(a1 + 48 * (v15 >> 1)), (long long *)a1, a2 - 3, a3);
          }
          --a4;
          if (a5)
          {
            uint64_t v23 = *(void *)(a1 + 24);
            uint64_t v24 = *(void *)a3;
            break;
          }
          uint64_t v25 = *(void *)(a1 - 24);
          uint64_t v23 = *(void *)(a1 + 24);
          if (v25 != v23)
          {
            uint64_t v24 = *(void *)a3;
            uint64_t v26 = *(char **)(*(void *)a3 + 272);
            double v27 = *(char **)(*(void *)a3 + 280);
            double v28 = v26;
            double v29 = v26;
            if (v26 != v27)
            {
              do
              {
                if (*(void *)v29 == v25) {
                  goto LABEL_16;
                }
                v29 += 8;
              }
              while (v29 != v27);
              double v29 = *(char **)(*(void *)a3 + 280);
LABEL_16:
              while (*(void *)v28 != v23)
              {
                v28 += 8;
                if (v28 == v27)
                {
                  double v28 = *(char **)(*(void *)a3 + 280);
                  break;
                }
              }
            }
            if (v29 - v26 < v28 - v26) {
              break;
            }
          }
          uint64_t v241 = *(void *)(a1 + 16);
          long long v232 = *(_OWORD *)(a1 + 32);
          long long v235 = *(_OWORD *)a1;
          uint64_t v67 = *((void *)a2 - 3);
          if (v23 == v67) {
            goto LABEL_107;
          }
          uint64_t v68 = *(char **)(*(void *)a3 + 272);
          uint64_t v69 = *(char **)(*(void *)a3 + 280);
          if (v68 == v69)
          {
            int8x16_t v71 = *(char **)(*(void *)a3 + 272);
            uint64_t v70 = v71;
          }
          else
          {
            uint64_t v70 = *(char **)(*(void *)a3 + 272);
            while (*(void *)v70 != v23)
            {
              v70 += 8;
              if (v70 == v69)
              {
                uint64_t v70 = *(char **)(*(void *)a3 + 280);
                break;
              }
            }
            int8x16_t v71 = *(char **)(*(void *)a3 + 272);
            while (*(void *)v71 != v67)
            {
              v71 += 8;
              if (v71 == v69)
              {
                int8x16_t v71 = *(char **)(*(void *)a3 + 280);
                break;
              }
            }
          }
          if (v70 - v68 >= v71 - v68)
          {
LABEL_107:
            unint64_t v13 = a1 + 48;
            if (a1 + 48 < (unint64_t)a2)
            {
              uint64_t v75 = *(void *)a3;
              unint64_t v76 = a1;
              do
              {
                uint64_t v77 = *(void *)(v76 + 72);
                unint64_t v76 = v13;
                if (v23 != v77)
                {
                  uint64_t v78 = *(char **)(v75 + 272);
                  uint64_t v79 = *(char **)(v75 + 280);
                  long long v80 = v78;
                  long long v81 = v78;
                  if (v78 != v79)
                  {
                    do
                    {
                      if (*(void *)v81 == v23) {
                        goto LABEL_114;
                      }
                      v81 += 8;
                    }
                    while (v81 != v79);
                    long long v81 = *(char **)(v75 + 280);
LABEL_114:
                    while (*(void *)v80 != v77)
                    {
                      v80 += 8;
                      if (v80 == v79)
                      {
                        long long v80 = *(char **)(v75 + 280);
                        break;
                      }
                    }
                  }
                  if (v81 - v78 < v80 - v78) {
                    break;
                  }
                }
                v13 += 48;
              }
              while (v76 + 48 < (unint64_t)a2);
            }
          }
          else
          {
            unint64_t v13 = a1;
            do
            {
              do
              {
                uint64_t v72 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v72);
              if (v68 == v69)
              {
                uint64_t v74 = *(char **)(*(void *)a3 + 272);
                uint64_t v73 = v74;
              }
              else
              {
                uint64_t v73 = *(char **)(*(void *)a3 + 272);
                while (*(void *)v73 != v23)
                {
                  v73 += 8;
                  if (v73 == v69)
                  {
                    uint64_t v73 = *(char **)(*(void *)a3 + 280);
                    break;
                  }
                }
                uint64_t v74 = *(char **)(*(void *)a3 + 272);
                while (*(void *)v74 != v72)
                {
                  v74 += 8;
                  if (v74 == v69)
                  {
                    uint64_t v74 = *(char **)(*(void *)a3 + 280);
                    break;
                  }
                }
              }
            }
            while (v73 - v68 >= v74 - v68);
          }
          int v82 = a2;
          if (v13 < (unint64_t)a2)
          {
            uint64_t v83 = *(void *)a3;
            int v82 = a2;
            do
            {
              uint64_t v84 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v84) {
                break;
              }
              BOOL v85 = *(char **)(v83 + 272);
              unint64_t v86 = *(char **)(v83 + 280);
              int v87 = v85;
              unint64_t v88 = v85;
              if (v85 != v86)
              {
                do
                {
                  if (*(void *)v88 == v23) {
                    goto LABEL_126;
                  }
                  v88 += 8;
                }
                while (v88 != v86);
                unint64_t v88 = *(char **)(v83 + 280);
LABEL_126:
                while (*(void *)v87 != v84)
                {
                  v87 += 8;
                  if (v87 == v86)
                  {
                    int v87 = *(char **)(v83 + 280);
                    break;
                  }
                }
              }
            }
            while (v88 - v85 < v87 - v85);
          }
          while (v13 < (unint64_t)v82)
          {
            *(_OWORD *)v225 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v225[16] = *(_OWORD *)(v13 + 32);
            long long v217 = *(_OWORD *)v13;
            long long v89 = *v82;
            long long v90 = v82[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v82 + 27);
            *(_OWORD *)unint64_t v13 = v89;
            *(_OWORD *)(v13 + 16) = v90;
            *(long long *)((char *)v82 + 27) = *(_OWORD *)&v225[11];
            *int v82 = v217;
            v82[1] = *(_OWORD *)v225;
            uint64_t v91 = *(void *)a3;
            do
            {
              do
              {
                uint64_t v92 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v92);
              unint64_t v93 = *(char **)(v91 + 272);
              unint64_t v94 = *(char **)(v91 + 280);
              if (v93 == v94)
              {
                long long v96 = *(char **)(v91 + 272);
                long long v95 = v96;
              }
              else
              {
                long long v95 = *(char **)(v91 + 272);
                while (*(void *)v95 != v23)
                {
                  v95 += 8;
                  if (v95 == v94)
                  {
                    long long v95 = *(char **)(v91 + 280);
                    break;
                  }
                }
                long long v96 = *(char **)(v91 + 272);
                while (*(void *)v96 != v92)
                {
                  v96 += 8;
                  if (v96 == v94)
                  {
                    long long v96 = *(char **)(v91 + 280);
                    break;
                  }
                }
              }
            }
            while (v95 - v93 >= v96 - v93);
            do
            {
              uint64_t v97 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v97) {
                break;
              }
              if (v93 == v94)
              {
                uint64_t v99 = v93;
                uint64_t v98 = v93;
              }
              else
              {
                uint64_t v98 = v93;
                while (*(void *)v98 != v23)
                {
                  v98 += 8;
                  if (v98 == v94)
                  {
                    uint64_t v98 = v94;
                    break;
                  }
                }
                uint64_t v99 = v93;
                while (*(void *)v99 != v97)
                {
                  v99 += 8;
                  if (v99 == v94)
                  {
                    uint64_t v99 = v94;
                    break;
                  }
                }
              }
            }
            while (v98 - v93 < v99 - v93);
          }
          BOOL v100 = (long long *)(v13 - 48);
          BOOL v5 = v13 - 48 >= a1;
          BOOL v6 = v13 - 48 == a1;
          if (v13 - 48 != a1)
          {
            long long v101 = *v100;
            long long v102 = *(_OWORD *)(v13 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
            *(_OWORD *)a1 = v101;
            *(_OWORD *)(a1 + 16) = v102;
          }
          a5 = 0;
          *BOOL v100 = v235;
          *(void *)(v13 - 32) = v241;
          *(void *)(v13 - 24) = v23;
          *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v232 + 7);
          *(void *)(v13 - 16) = v232;
        }
        uint64_t v240 = *(void *)(a1 + 16);
        long long v231 = *(_OWORD *)(a1 + 32);
        long long v234 = *(_OWORD *)a1;
        unint64_t v30 = a1;
        do
        {
          unint64_t v31 = v30;
          v30 += 48;
          uint64_t v32 = *(void *)(v31 + 72);
          if (v32 == v23) {
            break;
          }
          uint64_t v33 = *(char **)(v24 + 272);
          long long v34 = *(char **)(v24 + 280);
          uint64_t v35 = v33;
          id v36 = v33;
          if (v33 != v34)
          {
            do
            {
              if (*(void *)v36 == v32) {
                goto LABEL_26;
              }
              v36 += 8;
            }
            while (v36 != v34);
            id v36 = *(char **)(v24 + 280);
LABEL_26:
            while (*(void *)v35 != v23)
            {
              v35 += 8;
              if (v35 == v34)
              {
                uint64_t v35 = *(char **)(v24 + 280);
                break;
              }
            }
          }
        }
        while (v36 - v33 < v35 - v33);
        long long v37 = a2;
        if (v31 == a1)
        {
          long long v37 = a2;
          if (v30 < (unint64_t)a2)
          {
            long long v37 = a2;
            do
            {
              uint64_t v43 = *((void *)v37 - 3);
              v37 -= 3;
              if (v43 != v23)
              {
                char v44 = *(char **)(v24 + 272);
                unint64_t v45 = *(char **)(v24 + 280);
                long long v46 = v44;
                uint64_t v47 = v44;
                if (v44 != v45)
                {
                  do
                  {
                    if (*(void *)v47 == v43) {
                      goto LABEL_48;
                    }
                    v47 += 8;
                  }
                  while (v47 != v45);
                  uint64_t v47 = *(char **)(v24 + 280);
LABEL_48:
                  while (*(void *)v46 != v23)
                  {
                    v46 += 8;
                    if (v46 == v45)
                    {
                      long long v46 = *(char **)(v24 + 280);
                      break;
                    }
                  }
                }
                if (v47 - v44 < v46 - v44) {
                  break;
                }
              }
            }
            while (v30 < (unint64_t)v37);
          }
        }
        else
        {
          do
          {
            do
            {
              uint64_t v38 = *((void *)v37 - 3);
              v37 -= 3;
            }
            while (v38 == v23);
            double v39 = *(char **)(v24 + 272);
            unint64_t v40 = *(char **)(v24 + 280);
            uint64_t v41 = v39;
            uint64_t v42 = v39;
            if (v39 != v40)
            {
              do
              {
                if (*(void *)v42 == v38) {
                  goto LABEL_36;
                }
                v42 += 8;
              }
              while (v42 != v40);
              uint64_t v42 = *(char **)(v24 + 280);
LABEL_36:
              while (*(void *)v41 != v23)
              {
                v41 += 8;
                if (v41 == v40)
                {
                  uint64_t v41 = *(char **)(v24 + 280);
                  break;
                }
              }
            }
          }
          while (v42 - v39 >= v41 - v39);
        }
        unint64_t v13 = v30;
        if (v30 < (unint64_t)v37)
        {
          double v48 = v37;
          do
          {
            *(_OWORD *)v224 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v224[16] = *(_OWORD *)(v13 + 32);
            long long v49 = *(_OWORD *)v13;
            long long v51 = *v48;
            long long v50 = v48[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v48 + 27);
            *(_OWORD *)unint64_t v13 = v51;
            *(_OWORD *)(v13 + 16) = v50;
            *(long long *)((char *)v48 + 27) = *(_OWORD *)&v224[11];
            *double v48 = v49;
            v48[1] = *(_OWORD *)v224;
            uint64_t v52 = *(void *)a3;
            do
            {
              uint64_t v53 = *(void *)(v13 + 72);
              v13 += 48;
              if (v53 == v23) {
                break;
              }
              double v54 = *(char **)(v52 + 272);
              double v55 = *(char **)(v52 + 280);
              int v56 = v54;
              int v57 = v54;
              if (v54 != v55)
              {
                do
                {
                  if (*(void *)v57 == v53) {
                    goto LABEL_61;
                  }
                  v57 += 8;
                }
                while (v57 != v55);
                int v57 = *(char **)(v52 + 280);
LABEL_61:
                while (*(void *)v56 != v23)
                {
                  v56 += 8;
                  if (v56 == v55)
                  {
                    int v56 = *(char **)(v52 + 280);
                    break;
                  }
                }
              }
            }
            while (v57 - v54 < v56 - v54);
            do
            {
              do
              {
                uint64_t v58 = *((void *)v48 - 3);
                v48 -= 3;
              }
              while (v58 == v23);
              uint64_t v59 = *(char **)(v52 + 272);
              unint64_t v60 = *(char **)(v52 + 280);
              long long v61 = v59;
              long long v62 = v59;
              if (v59 != v60)
              {
                do
                {
                  if (*(void *)v62 == v58) {
                    goto LABEL_70;
                  }
                  v62 += 8;
                }
                while (v62 != v60);
                long long v62 = *(char **)(v52 + 280);
LABEL_70:
                while (*(void *)v61 != v23)
                {
                  v61 += 8;
                  if (v61 == v60)
                  {
                    long long v61 = *(char **)(v52 + 280);
                    break;
                  }
                }
              }
            }
            while (v62 - v59 >= v61 - v59);
          }
          while (v13 < (unint64_t)v48);
        }
        long long v63 = (long long *)(v13 - 48);
        if (v13 - 48 != a1)
        {
          long long v64 = *v63;
          long long v65 = *(_OWORD *)(v13 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
          *(_OWORD *)a1 = v64;
          *(_OWORD *)(a1 + 16) = v65;
        }
        *long long v63 = v234;
        *(void *)(v13 - 32) = v240;
        *(void *)(v13 - 24) = v23;
        *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v231 + 7);
        *(void *)(v13 - 16) = v231;
        if (v30 >= (unint64_t)v37) {
          break;
        }
LABEL_80:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(a1, v13 - 48, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, v13 - 48, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_SampleRemainder*>(v13, (uint64_t)a2, a3))
      {
        break;
      }
      if (!v66) {
        goto LABEL_80;
      }
    }
    a2 = (long long *)(v13 - 48);
    if (!v66) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 - 24);
      uint64_t v9 = *(void *)(a1 + 24);
      if (v8 == v9) {
        return result;
      }
      id v10 = *(char **)(*(void *)a3 + 272);
      double v11 = *(char **)(*(void *)a3 + 280);
      unint64_t v12 = v10;
      unint64_t v13 = v10;
      if (v10 == v11) {
        goto LABEL_10;
      }
      do
      {
        if (*(void *)v13 == v8) {
          goto LABEL_7;
        }
        v13 += 8;
      }
      while (v13 != v11);
      unint64_t v13 = *(char **)(*(void *)a3 + 280);
      do
      {
LABEL_7:
        if (*(void *)v12 == v9) {
          goto LABEL_10;
        }
        v12 += 8;
      }
      while (v12 != v11);
      unint64_t v12 = *(char **)(*(void *)a3 + 280);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        uint64_t v14 = (long long *)(a2 - 48);
        long long v15 = *(_OWORD *)a1;
        *(_OWORD *)uint64_t v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        long long v16 = *(_OWORD *)(a2 - 21);
        long long v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *uint64_t v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(long long *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), a3);
      uint64_t v19 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      int v20 = 0;
      break;
  }
  while (1)
  {
    uint64_t v21 = *(void *)(v19 + 24);
    uint64_t v22 = *(void *)(v18 + 24);
    if (v21 != v22)
    {
      uint64_t v23 = *(char **)(*(void *)a3 + 272);
      uint64_t v24 = *(char **)(*(void *)a3 + 280);
      uint64_t v25 = v23;
      uint64_t v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(void *)v26 == v21) {
            goto LABEL_19;
          }
          v26 += 8;
        }
        while (v26 != v24);
        uint64_t v26 = *(char **)(*(void *)a3 + 280);
LABEL_19:
        while (*(void *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            uint64_t v25 = *(char **)(*(void *)a3 + 280);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        long long v34 = *(_OWORD *)v19;
        uint64_t v36 = *(void *)(v19 + 16);
        long long v37 = *(_OWORD *)(v19 + 32);
        uint64_t v27 = v19;
        while (1)
        {
          long long v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1) {
            break;
          }
          uint64_t v27 = v18;
          uint64_t v29 = *(void *)(v18 - 24);
          if (v21 != v29)
          {
            unint64_t v30 = *(char **)(*(void *)a3 + 272);
            unint64_t v31 = *(char **)(*(void *)a3 + 280);
            uint64_t v32 = v30;
            uint64_t v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(void *)v33 == v21) {
                  goto LABEL_30;
                }
                v33 += 8;
              }
              while (v33 != v31);
              uint64_t v33 = *(char **)(*(void *)a3 + 280);
LABEL_30:
              while (*(void *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  uint64_t v32 = *(char **)(*(void *)a3 + 280);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30) {
              continue;
            }
          }
          goto LABEL_36;
        }
        uint64_t v27 = a1;
LABEL_36:
        *(_OWORD *)uint64_t v27 = v34;
        *(void *)(v27 + 16) = v36;
        *(void *)(v27 + 24) = v21;
        *(void *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8) {
          return v19 + 48 == a2;
        }
      }
    }
    uint64_t v18 = v19;
    v19 += 48;
    if (v19 == a2) {
      return 1;
    }
  }
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  double v3 = *(void **)(a2 + 208);
  unint64_t v45 = (void *)(a2 + 216);
  if (v3 == (void *)(a2 + 216)) {
    return;
  }
  uint64_t v47 = (void *)(a1 + 16);
  do
  {
    BOOL v5 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a2, v3[4]);
    uint64_t v6 = v5;
    if (!v5) {
      goto LABEL_80;
    }
    unint64_t v7 = [v5 hash];
    unint64_t v8 = v7;
    unint64_t v9 = *(void *)(a1 + 8);
    if (!v9) {
      goto LABEL_21;
    }
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v48 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v2 = v7;
      if (v7 >= v9) {
        unint64_t v2 = v7 % v9;
      }
    }
    else
    {
      unint64_t v2 = (v9 - 1) & v7;
    }
    double v11 = *(char ***)(*(void *)a1 + 8 * v2);
    if (!v11 || (unint64_t v12 = *v11) == 0)
    {
LABEL_21:
      uint64_t v19 = (char *)operator new(0x70uLL);
      v49[0] = v19;
      v49[1] = v47;
      *(void *)uint64_t v19 = 0;
      *((void *)v19 + 1) = v8;
      *((void *)v19 + 2) = v6;
      *(_OWORD *)(v19 + 24) = 0u;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      *((void *)v19 + 13) = 0;
      char v50 = 1;
      float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v21 = *(float *)(a1 + 32);
      if (v9 && (float)(v21 * (float)v9) >= v20)
      {
LABEL_67:
        long long v37 = *(char ***)(*(void *)a1 + 8 * v2);
        unint64_t v12 = (char *)v49[0];
        if (v37)
        {
          *(void *)v49[0] = *v37;
        }
        else
        {
          *(void *)v49[0] = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = v12;
          *(void *)(*(void *)a1 + 8 * v2) = v47;
          if (!*(void *)v12)
          {
LABEL_76:
            v49[0] = 0;
            ++*(void *)(a1 + 24);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v49);
            goto LABEL_77;
          }
          unint64_t v38 = *(void *)(*(void *)v12 + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v38 >= v9) {
              v38 %= v9;
            }
          }
          else
          {
            v38 &= v9 - 1;
          }
          long long v37 = (char **)(*(void *)a1 + 8 * v38);
        }
        *long long v37 = v12;
        goto LABEL_76;
      }
      BOOL v22 = (v9 & (v9 - 1)) != 0;
      if (v9 < 3) {
        BOOL v22 = 1;
      }
      unint64_t v23 = v22 | (2 * v9);
      unint64_t v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      else {
        int8x8_t prime = (int8x8_t)v23;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v9 = *(void *)(a1 + 8);
      if (*(void *)&prime > v9) {
        goto LABEL_33;
      }
      if (*(void *)&prime < v9)
      {
        unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          unint64_t v32 = std::__next_prime(v32);
        }
        else
        {
          uint64_t v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2) {
            unint64_t v32 = v34;
          }
        }
        if (*(void *)&prime <= v32) {
          int8x8_t prime = (int8x8_t)v32;
        }
        if (*(void *)&prime >= v9)
        {
          unint64_t v9 = *(void *)(a1 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v26 = operator new(8 * *(void *)&prime);
            uint64_t v27 = *(void **)a1;
            *(void *)a1 = v26;
            if (v27) {
              operator delete(v27);
            }
            uint64_t v28 = 0;
            *(int8x8_t *)(a1 + 8) = prime;
            do
              *(void *)(*(void *)a1 + 8 * v28++) = 0;
            while (*(void *)&prime != v28);
            uint64_t v29 = (void *)*v47;
            if (*v47)
            {
              unint64_t v30 = v29[1];
              uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(void *)&prime) {
                  v30 %= *(void *)&prime;
                }
              }
              else
              {
                v30 &= *(void *)&prime - 1;
              }
              *(void *)(*(void *)a1 + 8 * v30) = v47;
              uint64_t v35 = (void *)*v29;
              if (*v29)
              {
                do
                {
                  unint64_t v36 = v35[1];
                  if (v31.u32[0] > 1uLL)
                  {
                    if (v36 >= *(void *)&prime) {
                      v36 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v36 &= *(void *)&prime - 1;
                  }
                  if (v36 != v30)
                  {
                    if (!*(void *)(*(void *)a1 + 8 * v36))
                    {
                      *(void *)(*(void *)a1 + 8 * v36) = v29;
                      goto LABEL_58;
                    }
                    *uint64_t v29 = *v35;
                    *uint64_t v35 = **(void **)(*(void *)a1 + 8 * v36);
                    **(void **)(*(void *)a1 + 8 * v36) = v35;
                    uint64_t v35 = v29;
                  }
                  unint64_t v36 = v30;
LABEL_58:
                  uint64_t v29 = v35;
                  uint64_t v35 = (void *)*v35;
                  unint64_t v30 = v36;
                }
                while (v35);
              }
            }
            unint64_t v9 = (unint64_t)prime;
            goto LABEL_62;
          }
          char v44 = *(void **)a1;
          *(void *)a1 = 0;
          if (v44) {
            operator delete(v44);
          }
          unint64_t v9 = 0;
          *(void *)(a1 + 8) = 0;
        }
      }
LABEL_62:
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v8 >= v9) {
          unint64_t v2 = v8 % v9;
        }
        else {
          unint64_t v2 = v8;
        }
      }
      else
      {
        unint64_t v2 = (v9 - 1) & v8;
      }
      goto LABEL_67;
    }
    while (1)
    {
      unint64_t v13 = *((void *)v12 + 1);
      if (v13 == v8) {
        break;
      }
      if (v48 > 1)
      {
        if (v13 >= v9) {
          v13 %= v9;
        }
      }
      else
      {
        v13 &= v9 - 1;
      }
      if (v13 != v2) {
        goto LABEL_21;
      }
LABEL_20:
      unint64_t v12 = *(char **)v12;
      if (!v12) {
        goto LABEL_21;
      }
    }
    id v14 = *((id *)v12 + 2);
    long long v15 = v6;
    id v16 = v6;
    long long v17 = v16;
    if (v14 != v16)
    {
      char v18 = [v14 isEqualToString:v16];

      uint64_t v6 = v15;
      if (v18) {
        goto LABEL_77;
      }
      goto LABEL_20;
    }

    uint64_t v6 = v15;
LABEL_77:
    long long v39 = *(_OWORD *)(v3 + 5);
    long long v40 = *(_OWORD *)(v3 + 7);
    *(_OWORD *)(v12 + 56) = *(_OWORD *)(v3 + 9);
    *(_OWORD *)(v12 + 40) = v40;
    *(_OWORD *)(v12 + 24) = v39;
    *((void *)v12 + 9) = v3[11];
    if (v12 + 16 != (char *)(v3 + 4)) {
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v12 + 80, (char *)v3[12], v3[13], (uint64_t)(v3[13] - v3[12]) >> 4);
    }
    *((void *)v12 + 13) = v3[15];

LABEL_80:
    uint64_t v41 = (void *)v3[1];
    if (v41)
    {
      do
      {
        uint64_t v42 = v41;
        uint64_t v41 = (void *)*v41;
      }
      while (v41);
    }
    else
    {
      do
      {
        uint64_t v42 = (void *)v3[2];
        BOOL v43 = *v42 == (void)v3;
        double v3 = v42;
      }
      while (!v43);
    }
    double v3 = v42;
  }
  while (v42 != v45);
}

void sub_1BD15E850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);

  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>>::~__hash_table(v6);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  unint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,0>(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
  double v3 = *(void **)a1;
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      double v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  double v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1726270;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1726270;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C187B8A0);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1F1726270;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BD15EB2C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1726270;
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48))(v1) + 48;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsPresence const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1726300;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsPresence const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1726300;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C187B8A0);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsPresence const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1F1726300;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BD15EDC4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsPresence const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1726300;
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsPresence const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsPresence const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsPresence const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  unint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsPresence const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsPresence const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsPresence const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::~__func()
{
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F1726390;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1726390;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 568))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a4, 3, @"Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date");
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  }
  double v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(void *)(a1 + 40) && a3) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_advanceToTime(a1, v8);
    }
    HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    unint64_t v9 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    uint64_t v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v9, a4);
  }
  return v10;
}

void sub_1BD15F1D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_advanceToTime(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 128) <= a2)
  {
    uint64_t v4 = a1 + 112;
    uint64_t v5 = a1 + 120;
    do
    {
      uint64_t v6 = *(void *)(a1 + 544);
      uint64_t v7 = *(void *)(a1 + 536);
      if (v6 == v7)
      {
        uint64_t v22 = 0;
        long long v15 = *(void **)(a1 + 40);
        id v16 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a2];
        double v8 = [v15 dateIntervalContainingDate:v16 index:&v22];

        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        unint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v17 = v22;
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v19 = v18;
        float v20 = [v8 endDate];
        [v20 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::resetToBucket(v4, v17, v19, v21);
      }
      else
      {
        double v8 = [*(id *)(a1 + 40) dateIntervalAtIndex:*(void *)(a1 + 112) + 1];
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        unint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v12 = v11;
        unint64_t v13 = [v8 endDate];
        [v13 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::advanceBucket(v4, v12, v14);
      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_didChangeBucket(a1, v9);
      if (v6 != v7) {
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
      }
    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1BD15F3E0(_Unwind_Exception *exception_object)
{
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a1 + 8;
  double v6 = *(double *)a2;
  double v7 = *(double *)(a2 + 8);
  double v8 = *(double *)(a2 + 16);
  unint64_t v9 = *(uint64_t **)(a2 + 24);
  unsigned __int8 v10 = *(unsigned char *)(a2 + 32);
  char v11 = *(unsigned char *)(a2 + 33);
  double v12 = *(double *)(a1 + 8) - v7;
  int v13 = v10;
  unint64_t v14 = (unint64_t)v9;
  char v15 = v11;
  double v16 = v8;
  double v17 = v7;
  double v18 = *(double *)a2;
  if (v12 >= 0.01)
  {
    if (v8 - v7 - v12 >= 0.01)
    {
      int v13 = *(unsigned __int8 *)(a2 + 32);
      double v18 = v6 - v6 * (v12 / (v8 - v7));
      unint64_t v14 = *(void *)(a2 + 24);
      char v15 = *(unsigned char *)(a2 + 33);
      double v16 = *(double *)(a2 + 16);
      double v17 = *(double *)(a1 + 8);
    }
    else
    {
      int v13 = 0;
      unint64_t v14 = 0;
      char v15 = 0;
      double v16 = 0.0;
      double v17 = 0.0;
      double v18 = 0.0;
    }
  }
  double v19 = *(double *)(a1 + 16);
  double v20 = v19 - v17;
  double v21 = v16 - v17;
  double v22 = v16 - v17 - (v19 - v17);
  if (!*(_DWORD *)(a1 + 36))
  {
    if (v22 < 0.01) {
      goto LABEL_10;
    }
    if (v20 >= 0.01) {
      goto LABEL_24;
    }
LABEL_22:
    int v23 = v13;
    unint64_t v31 = v14;
    double v25 = v16;
    double v19 = v17;
    double v24 = v18;
    if (!v23) {
      return;
    }
    goto LABEL_60;
  }
  if (v20 < 0.01) {
    goto LABEL_22;
  }
  if (v22 >= 0.01)
  {
LABEL_24:
    double v25 = v16;
    unint64_t v69 = v14;
    double v24 = v18 - v18 * (v20 / v21);
    int v23 = v13;
    char v70 = v15;
    double v16 = *(double *)(a1 + 16);
    double v18 = v18 * (v20 / v21);
    if (!v13)
    {
LABEL_25:
      char v15 = v70;
      unint64_t v31 = v69;
      if (!v23) {
        return;
      }
      goto LABEL_60;
    }
    goto LABEL_11;
  }
LABEL_10:
  unint64_t v69 = 0;
  int v23 = 0;
  char v70 = 0;
  double v24 = 0.0;
  double v19 = 0.0;
  double v25 = 0.0;
  if (!v13) {
    goto LABEL_25;
  }
LABEL_11:
  double v67 = v17;
  double v68 = v16;
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 240, v14, v14);
  unint64_t v26 = *(void *)(a1 + 112);
  if (v26 == *(void *)(a1 + 104) && *(uint64_t *)(a1 + 128) <= 0)
  {
    v32.f64[1] = *(float64_t *)(a1 + 16);
    double v28 = v67;
    double v27 = v68;
    v32.f64[0] = v67;
    v33.f64[0] = *(float64_t *)(a1 + 8);
    v33.f64[1] = v68;
    int8x16_t v34 = (int8x16_t)vcgtq_f64(v33, v32);
    v33.f64[0] = v67;
    *(int8x16_t *)(a1 + 48) = vbslq_s8(v34, *(int8x16_t *)(a1 + 8), (int8x16_t)v33);
  }
  else
  {
    double v28 = v67;
    double v27 = v68;
    if (v67 < *(double *)(a1 + 48))
    {
      double v29 = *(double *)(a1 + 8);
      if (v67 >= v29) {
        double v29 = v67;
      }
      *(double *)(a1 + 48) = v29;
    }
    if (v68 > *(double *)(a1 + 56))
    {
      double v30 = *(double *)(a1 + 16);
      if (v30 >= v68) {
        double v30 = v68;
      }
      *(double *)(a1 + 56) = v30;
    }
  }
  if (*(unsigned char *)(a1 + 32))
  {
    double v35 = *(double *)(a1 + 64);
    if (v28 < v35) {
      double v35 = v28;
    }
    *(double *)(a1 + 64) = v35;
  }
  if (a3 && v28 < *(double *)(a1 + 16))
  {
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, v28);
    double v28 = v67;
    double v27 = v68;
    unint64_t v26 = *(void *)(a1 + 112);
  }
  unint64_t v36 = *(void *)(a1 + 120);
  if (v26 >= v36)
  {
    uint64_t v38 = *(void *)(a1 + 104);
    unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - v38) >> 4);
    unint64_t v40 = v39 + 1;
    if (v39 + 1 > 0x555555555555555) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - v38) >> 4);
    if (2 * v41 > v40) {
      unint64_t v40 = 2 * v41;
    }
    if (v41 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v42 = 0x555555555555555;
    }
    else {
      unint64_t v42 = v40;
    }
    if (v42)
    {
      unint64_t v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v42);
      double v28 = v67;
      double v27 = v68;
    }
    else
    {
      uint64_t v43 = 0;
    }
    unint64_t v44 = v42 + 48 * v39;
    unint64_t v45 = v42 + 48 * v43;
    *(double *)unint64_t v44 = v18;
    *(double *)(v44 + 8) = v28;
    *(double *)(v44 + 16) = v27;
    *(void *)(v44 + 24) = v14;
    *(unsigned char *)(v44 + 32) = v13;
    *(unsigned char *)(v44 + 33) = v15;
    *(_WORD *)(v44 + 40) = 0;
    *(unsigned char *)(v44 + 42) = 0;
    unint64_t v37 = v44 + 48;
    uint64_t v47 = *(char **)(a1 + 104);
    long long v46 = *(char **)(a1 + 112);
    if (v46 == v47)
    {
      char v15 = v70;
      unint64_t v31 = v69;
    }
    else
    {
      char v15 = v70;
      unint64_t v31 = v69;
      do
      {
        long long v48 = *((_OWORD *)v46 - 3);
        long long v49 = *((_OWORD *)v46 - 2);
        *(_OWORD *)(v44 - 21) = *(_OWORD *)(v46 - 21);
        *(_OWORD *)(v44 - 48) = v48;
        *(_OWORD *)(v44 - 32) = v49;
        v44 -= 48;
        v46 -= 48;
      }
      while (v46 != v47);
      long long v46 = *(char **)(a1 + 104);
    }
    *(void *)(a1 + 104) = v44;
    *(void *)(a1 + 112) = v37;
    *(void *)(a1 + 120) = v45;
    if (v46) {
      operator delete(v46);
    }
  }
  else
  {
    *(double *)unint64_t v26 = v18;
    *(double *)(v26 + 8) = v28;
    *(double *)(v26 + 16) = v27;
    *(void *)(v26 + 24) = v14;
    *(unsigned char *)(v26 + 32) = v13;
    *(unsigned char *)(v26 + 33) = v15;
    *(_WORD *)(v26 + 40) = 0;
    unint64_t v37 = v26 + 48;
    *(unsigned char *)(v26 + 42) = 0;
    char v15 = v70;
    unint64_t v31 = v69;
  }
  *(void *)(a1 + 112) = v37;
  if (!*(unsigned char *)(a1 + 168) || *(double *)(a1 + 144) <= v7)
  {
    *(double *)(a1 + 136) = v6;
    *(double *)(a1 + 144) = v7;
    *(double *)(a1 + 152) = v8;
    *(void *)(a1 + 160) = v9;
    *(unsigned char *)(a1 + 168) = v10;
    *(unsigned char *)(a1 + 169) = v11;
  }
  if (*(unsigned char *)(a1 + 33)
    && ((unint64_t v50 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(v5, v14), v51 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_statisticsForSource(v5, v50), !*((unsigned char *)v51 + 40))|| *((double *)v51 + 2) <= v7))
  {
    *((double *)v51 + 1) = v6;
    *((double *)v51 + 2) = v7;
    *((double *)v51 + 3) = v8;
    v51[4] = v9;
    *((unsigned char *)v51 + 40) = v10;
    *((unsigned char *)v51 + 41) = v11;
    if (!v23) {
      return;
    }
  }
  else if (!v23)
  {
    return;
  }
LABEL_60:
  unint64_t v52 = *(void *)(a1 + 432);
  unint64_t v53 = *(void *)(a1 + 440);
  if (v52 >= v53)
  {
    uint64_t v55 = *(void *)(a1 + 424);
    unint64_t v56 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v52 - v55) >> 3);
    unint64_t v57 = v56 + 1;
    if (v56 + 1 > 0x666666666666666) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v58 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v53 - v55) >> 3);
    if (2 * v58 > v57) {
      unint64_t v57 = 2 * v58;
    }
    if (v58 >= 0x333333333333333) {
      unint64_t v59 = 0x666666666666666;
    }
    else {
      unint64_t v59 = v57;
    }
    if (v59) {
      unint64_t v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v59);
    }
    else {
      uint64_t v60 = 0;
    }
    unint64_t v61 = v59 + 40 * v56;
    unint64_t v62 = v59 + 40 * v60;
    *(double *)unint64_t v61 = v24;
    *(double *)(v61 + 8) = v19;
    *(double *)(v61 + 16) = v25;
    *(void *)(v61 + 24) = v31;
    *(unsigned char *)(v61 + 32) = v23;
    *(unsigned char *)(v61 + 33) = v15;
    unint64_t v54 = v61 + 40;
    long long v64 = *(char **)(a1 + 424);
    long long v63 = *(char **)(a1 + 432);
    if (v63 != v64)
    {
      do
      {
        long long v65 = *(_OWORD *)(v63 - 40);
        long long v66 = *(_OWORD *)(v63 - 24);
        *(_WORD *)(v61 - 8) = *((_WORD *)v63 - 4);
        *(_OWORD *)(v61 - 24) = v66;
        *(_OWORD *)(v61 - 40) = v65;
        v61 -= 40;
        v63 -= 40;
      }
      while (v63 != v64);
      long long v63 = *(char **)(a1 + 424);
    }
    *(void *)(a1 + 424) = v61;
    *(void *)(a1 + 432) = v54;
    *(void *)(a1 + 440) = v62;
    if (v63) {
      operator delete(v63);
    }
  }
  else
  {
    *(double *)unint64_t v52 = v24;
    *(double *)(v52 + 8) = v19;
    *(double *)(v52 + 16) = v25;
    *(void *)(v52 + 24) = v31;
    *(unsigned char *)(v52 + 32) = v23;
    unint64_t v54 = v52 + 40;
    *(unsigned char *)(v52 + 33) = v15;
  }
  *(void *)(a1 + 432) = v54;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 570))
  {
    *(unsigned char *)(a1 + 572) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 572) = 0;
    unint64_t v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      uint64_t v4 = v2;
      uint64_t v3 = (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      if (v3) {
        v4[2](v4, v3);
      }

      unint64_t v2 = v4;
    }
  }
}

void sub_1BD15FA20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  unint64_t v9 = 0;
  unsigned __int8 v10 = 0;
  uint64_t v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 424), *(void *)(a1 + 432), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 432) - *(void *)(a1 + 424)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::resetToBucket(a1, *(void *)a1 + 1, a2, a3);
  double v6 = v9;
  double v7 = v10;
  if (v9 != v10)
  {
    uint64_t v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BD15FB1C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8 = (id *)(a1 + 40);
  objc_storeStrong((id *)(a1 + 448), *(id *)(a1 + 40));
  unint64_t v9 = *(void **)(a1 + 184);
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  long long v10 = 0uLL;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0;
  if (v9)
  {
    *(void *)(a1 + 192) = v9;
    operator delete(v9);
    long long v10 = 0uLL;
  }
  *(_OWORD *)(a1 + 184) = v10;
  *(_OWORD *)(a1 + 200) = v10;
  if (*(void *)(a1 + 232))
  {
    uint64_t v11 = *(void *)(a1 + 224);
    double v12 = *(void **)(a1 + 216);
    *(void *)(a1 + 216) = a1 + 224;
    *(void *)(v11 + 16) = 0;
    *(void *)(a1 + 224) = 0;
    *(void *)(a1 + 232) = 0;
    if (v12[1]) {
      int v13 = (void *)v12[1];
    }
    else {
      int v13 = v12;
    }
    if (v13)
    {
      unint64_t v14 = (void *)v13[2];
      if (v14)
      {
        char v15 = (void *)*v14;
        if ((void *)*v14 == v13)
        {
          *unint64_t v14 = 0;
          while (1)
          {
            double v17 = (void *)v14[1];
            if (!v17) {
              break;
            }
            do
            {
              unint64_t v14 = v17;
              double v17 = (void *)*v17;
            }
            while (v17);
          }
        }
        else
        {
          for (v14[1] = 0; v15; char v15 = (void *)v14[1])
          {
            do
            {
              unint64_t v14 = v15;
              char v15 = (void *)*v15;
            }
            while (v15);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>>::destroy(v13);
        for (uint64_t i = (void *)v14[2]; i; uint64_t i = (void *)i[2])
          unint64_t v14 = i;
        int v13 = v14;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>>::destroy(v13);
  }
  objc_storeStrong(v8, *(id *)(a1 + 448));
  *(void *)(a1 + 432) = *(void *)(a1 + 424);
  *(void *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 572))
  {
    if (v3)
    {
      id v6 = v3;
      uint64_t v4 = _Block_copy(*(const void **)(a1 + 96));
      uint64_t v5 = v4;
      if (v4) {
        (*((void (**)(void *, id))v4 + 2))(v4, v6);
      }

      id v3 = v6;
    }
    *(unsigned char *)(a1 + 572) = 0;
  }
}

void sub_1BD15FCF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 startDate];
  id v6 = [v4 startDate];
  uint64_t v7 = [v5 compare:v6];

  return v7;
}

void sub_1BD15FD78(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 13);
  if (WeakRetained)
  {
    if (v5
      && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_currentBucketInterval((uint64_t)a1),
          (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v8 = [v5 endDate];
      unint64_t v9 = [v7 startDate];
      if (objc_msgSend(v8, "hk_isAfterDate:", v9))
      {
        long long v10 = [v5 startDate];
        uint64_t v11 = [v7 endDate];
        char v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);
      }
      else
      {
        char v12 = 0;
      }

      int v13 = _Block_copy(a1[12]);
      if ((v12 & 1) == 0) {
        operator new();
      }
    }
    else
    {
      int v13 = _Block_copy(a1[12]);
    }
    *((unsigned char *)a1 + 568) = 1;
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
    v27[3] = &unk_1E6308FF8;
    id v15 = v5;
    id v28 = v15;
    id v16 = v13;
    id v29 = v16;
    (*((void (**)(id *, void *))*a1 + 9))(a1, v27);
    if (v5)
    {
      double v17 = [v15 startDate];
      [v17 timeIntervalSinceReferenceDate];
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_configureForStartTime((uint64_t)a1);
    }
    else
    {
      (*((void (**)(id *))*a1 + 4))(a1);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
    v21[3] = &unk_1E6309060;
    double v24 = a1;
    id v5 = v15;
    char v26 = 1;
    id v22 = v5;
    double v25 = a1;
    id v23 = WeakRetained;
    uint64_t v14 = (*((uint64_t (**)(id *, void *, uint64_t))*a1 + 14))(a1, v21, a3);
    double v18 = _Block_copy(v16);
    id v19 = a1[12];
    a1[12] = v18;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to invalidate interval: no data source available.");
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1BD1601C8(_Unwind_Exception *a1)
{
  MEMORY[0x1C187B8A0](v4, 0x10F1C4004ACF899);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_11;
  }
  id v3 = [v10 endDate];
  uint64_t v4 = [*(id *)(a1 + 32) startDate];
  char v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    id v6 = [v10 startDate];
    uint64_t v7 = [*(id *)(a1 + 32) endDate];
    char v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_11:
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9) {
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
      }
    }
  }
}

void sub_1BD1603AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = [*(id *)(a1 + 32) startDate];
  [v5 timeIntervalSinceReferenceDate];
  uint64_t v7 = v6;

  char v8 = [*(id *)(a1 + 32) endDate];
  [v8 timeIntervalSinceReferenceDate];
  uint64_t v10 = v9;

  uint64_t v11 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  uint64_t v13 = *(void *)(a1 + 32);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  char v32 = *(unsigned char *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  uint64_t v31 = *(void *)(a1 + 56);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  void v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  uint64_t v14 = [v11 collectionCalculator:WeakRetained queryForInterval:v13 error:a2 sampleHandler:v30 mergeHandler:v29];

  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15 != v4)
    {
      id v16 = [*(id *)(a1 + 32) endDate];
      [v16 timeIntervalSinceReferenceDate];
      if (*(void *)(v15 + 40))
      {
        double v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          id v19 = [*(id *)(v15 + 40) dateIntervalAtIndex:*(void *)(v15 + 112) + 1];
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          double v20 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(v15, v15 + 120);
          double v21 = [v19 startDate];
          [v21 timeIntervalSinceReferenceDate];
          double v23 = v22;
          double v24 = [v19 endDate];
          [v24 timeIntervalSinceReferenceDate];
          HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            char v26 = _Block_copy(*(const void **)(v15 + 96));
            double v27 = v26;
            if (v26) {
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);
            }
          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_didChangeBucket(v15, 0);
        }
      }
    }
  }
  return v14;
}

void sub_1BD160658(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7 = *(double *)(a1 + 32) - a6;
  if (v7 >= 0.01)
  {
    double v9 = a7 - a6;
    if (v9 - v7 >= 0.01)
    {
      a5 = a5 - v7 / v9 * a5;
      int v8 = 1;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      int v8 = 0;
      a5 = 0.0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    int v8 = 1;
  }
  *(double *)uint64_t v13 = a5;
  *(double *)&v13[1] = a6;
  double v14 = a7;
  uint64_t v15 = a2;
  char v16 = v8;
  char v17 = 0;
  if (*(unsigned char *)(a1 + 56))
  {
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)v13, a3, a4);
    }
  }
  else
  {
    double v11 = *(double *)(a1 + 40) - a6;
    if (v11 >= 0.01)
    {
      double v12 = a7 - a6;
      if (v12 - v11 >= 0.01)
      {
        a5 = a5 * (v11 / v12);
        a7 = *(double *)(a1 + 40);
      }
    }
    else
    {
      int v8 = 0;
    }
    *(double *)uint64_t v13 = a5;
    double v14 = a7;
    char v16 = v8;
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)v13, a3, a4);
    }
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 568)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  }
  if (*(void *)(a1 + 40)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_advanceToTime(a1, a2);
  }
  if (*(double *)(a1 + 128) > a2)
  {
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 32) < *(double *)(v10 + 8))
                {
                  uint64_t v129 = *(void *)(v10 + 32);
                  long long v113 = *(_OWORD *)v10;
                  long long v121 = *(_OWORD *)(v10 + 16);
                  long long v52 = *(_OWORD *)(a2 - 40);
                  long long v53 = *(_OWORD *)(a2 - 24);
                  *(_WORD *)(v10 + 32) = *(_WORD *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(_WORD *)(a2 - 8) = v129;
                  *(_OWORD *)(a2 - 24) = v121;
                  *(_OWORD *)(a2 - 40) = v113;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v10, (double *)(v10 + 40), (double *)(a2 - 40));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, v10 + 120, a2 - 40);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            unint64_t v54 = (void *)(v10 + 40);
            BOOL v56 = v10 == a2 || v54 == (void *)a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  unint64_t v59 = v54;
                  double v60 = *(double *)(v58 + 48);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *v54;
                    long long v114 = *(_OWORD *)(v58 + 56);
                    uint64_t v122 = *(void *)(v58 + 72);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      uint64_t v63 = v10 + v62;
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      *(_OWORD *)(v63 + 40) = *(_OWORD *)(v10 + v62);
                      *(_OWORD *)(v63 + 56) = v64;
                      *(_WORD *)(v63 + 72) = *(_WORD *)(v10 + v62 + 32);
                      if (!v62) {
                        break;
                      }
                      v62 -= 40;
                      if (v60 >= *(double *)(v63 - 32))
                      {
                        uint64_t v65 = v10 + v62 + 40;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = v114;
                    *(_WORD *)(v65 + 32) = v122;
                  }
                  unint64_t v54 = v59 + 5;
                  v57 += 40;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 5 != (void *)a2);
              }
            }
            else if (!v56)
            {
              do
              {
                uint64_t v98 = v54;
                double v99 = *(double *)(a1 + 48);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *v54;
                  long long v117 = *(_OWORD *)(a1 + 56);
                  uint64_t v125 = *(void *)(a1 + 72);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(_OWORD *)(v101 - 3);
                    *(_OWORD *)long long v101 = *(_OWORD *)(v101 - 5);
                    *((_OWORD *)v101 + 1) = v102;
                    *((_WORD *)v101 + 16) = *((_WORD *)v101 - 4);
                    double v103 = *((double *)v101 - 9);
                    v101 -= 5;
                  }
                  while (v99 < v103);
                  void *v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *((_WORD *)v101 + 16) = v125;
                  *((_OWORD *)v101 + 1) = v117;
                }
                v54 += 5;
                a1 = (unint64_t)v98;
              }
              while (v98 + 5 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 40 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v10 + 40 * v69 + 8) < *(double *)(v70 + 48))
                  {
                    v70 += 40;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  double v71 = *(double *)(v10 + 40 * v68 + 8);
                  if (*(double *)(v70 + 8) >= v71)
                  {
                    unint64_t v72 = v10 + 40 * v68;
                    uint64_t v73 = *(void *)v72;
                    uint64_t v123 = *(void *)(v72 + 32);
                    long long v115 = *(_OWORD *)(v72 + 16);
                    do
                    {
                      unint64_t v74 = v72;
                      unint64_t v72 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_WORD *)(v74 + 32) = *(_WORD *)(v70 + 32);
                      *(_OWORD *)unint64_t v74 = v75;
                      *(_OWORD *)(v74 + 16) = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 40 * v77;
                      uint64_t v78 = 2 * v69 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v10 + 40 * v77 + 8) < *(double *)(v70 + 48))
                      {
                        v70 += 40;
                        uint64_t v77 = v78;
                      }
                      uint64_t v69 = v77;
                    }
                    while (*(double *)(v70 + 8) >= v71);
                    *(void *)unint64_t v72 = v73;
                    *(double *)(v72 + 8) = v71;
                    *(_OWORD *)(v72 + 16) = v115;
                    *(_WORD *)(v72 + 32) = v123;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x28uLL;
              do
              {
                uint64_t v80 = 0;
                uint64_t v130 = *(void *)(v10 + 32);
                long long v116 = *(_OWORD *)v10;
                long long v124 = *(_OWORD *)(v10 + 16);
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = v81;
                  uint64_t v83 = v80 + 1;
                  v81 += 40 * (v80 + 1);
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v85 = v84 + 2;
                  if (v85 < v79 && *(double *)(v82 + 40 * v83 + 8) < *(double *)(v81 + 48))
                  {
                    v81 += 40;
                    uint64_t v80 = v85;
                  }
                  long long v86 = *(_OWORD *)v81;
                  long long v87 = *(_OWORD *)(v81 + 16);
                  *(_WORD *)(v82 + 32) = *(_WORD *)(v81 + 32);
                  *(_OWORD *)unint64_t v82 = v86;
                  *(_OWORD *)(v82 + 16) = v87;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 40;
                if (v81 == a2)
                {
                  *(_WORD *)(v81 + 32) = v130;
                  *(_OWORD *)unint64_t v81 = v116;
                  *(_OWORD *)(v81 + 16) = v124;
                }
                else
                {
                  long long v88 = *(_OWORD *)a2;
                  long long v89 = *(_OWORD *)(a2 + 16);
                  *(_WORD *)(v81 + 32) = *(_WORD *)(a2 + 32);
                  *(_OWORD *)unint64_t v81 = v88;
                  *(_OWORD *)(v81 + 16) = v89;
                  *(_WORD *)(a2 + 32) = v130;
                  *(_OWORD *)a2 = v116;
                  *(_OWORD *)(a2 + 16) = v124;
                  uint64_t v90 = v81 - v10 + 40;
                  if (v90 >= 41)
                  {
                    unint64_t v91 = (v90 / 0x28uLL - 2) >> 1;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v10 + 40 * v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      uint64_t v109 = *(void *)(v81 + 32);
                      long long v106 = *(_OWORD *)(v81 + 16);
                      do
                      {
                        unint64_t v94 = v81;
                        unint64_t v81 = v10 + 40 * v91;
                        long long v95 = *(_OWORD *)v81;
                        long long v96 = *(_OWORD *)(v81 + 16);
                        *(_WORD *)(v94 + 32) = *(_WORD *)(v81 + 32);
                        *(_OWORD *)unint64_t v94 = v95;
                        *(_OWORD *)(v94 + 16) = v96;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 40 * v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_WORD *)(v81 + 32) = v109;
                      *(_OWORD *)(v81 + 16) = v106;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40 * (v12 >> 1)), (double *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            char v16 = (double *)(a1 + 40 * v13 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40), v16, (double *)(a2 - 80));
            char v17 = (double *)(a1 + 40 + 8 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 80), v17, (double *)(a2 - 120));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v16, (double *)v14, v17);
            uint64_t v126 = *(void *)(a1 + 32);
            long long v110 = *(_OWORD *)a1;
            long long v118 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 16) = v19;
            *(_WORD *)(v14 + 32) = v126;
            *(_OWORD *)unint64_t v14 = v110;
            *(_OWORD *)(v14 + 16) = v118;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40 * (v12 >> 1)), (double *)a1, (double *)(a2 - 40));
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 32) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          long long v105 = *(_OWORD *)(a1 + 16);
          uint64_t v108 = *(void *)(a1 + 32);
          if (v20 >= *(double *)(a2 - 32))
          {
            unint64_t v41 = a1 + 40;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 40;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 40;
              double v40 = *(double *)(v39 + 48);
              v39 += 40;
            }
            while (v20 >= v40);
          }
          unint64_t v43 = a2;
          if (v10 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              unint64_t v43 = v44 - 40;
              double v45 = *(double *)(v44 - 32);
              v44 -= 40;
            }
            while (v20 < v45);
          }
          while (v10 < v43)
          {
            uint64_t v128 = *(void *)(v10 + 32);
            long long v112 = *(_OWORD *)v10;
            long long v120 = *(_OWORD *)(v10 + 16);
            long long v46 = *(_OWORD *)v43;
            long long v47 = *(_OWORD *)(v43 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v43 + 32);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(_WORD *)(v43 + 32) = v128;
            *(_OWORD *)unint64_t v43 = v112;
            *(_OWORD *)(v43 + 16) = v120;
            do
            {
              double v48 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *(double *)(v43 - 32);
              v43 -= 40;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 40);
            long long v51 = *(_OWORD *)(v10 - 24);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 40) = v38;
          *(double *)(v10 - 32) = v20;
          *(_WORD *)(v10 - 8) = v108;
          *(_OWORD *)(v10 - 24) = v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        long long v104 = *(_OWORD *)(a1 + 16);
        uint64_t v107 = *(void *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 48);
          v21 += 40;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        unint64_t v25 = a2;
        if (v21 == 40)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 40;
            double v29 = *(double *)(v28 - 32);
            v28 -= 40;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 40;
            double v27 = *(double *)(v25 - 32);
            v25 -= 40;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v127 = *(void *)(v10 + 32);
            long long v111 = *(_OWORD *)v10;
            long long v119 = *(_OWORD *)(v10 + 16);
            long long v31 = *(_OWORD *)v30;
            long long v32 = *(_OWORD *)(v30 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v30 + 32);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(_WORD *)(v30 + 32) = v127;
            *(_OWORD *)unint64_t v30 = v111;
            *(_OWORD *)(v30 + 16) = v119;
            do
            {
              double v33 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v33 < v20);
            do
            {
              double v34 = *(double *)(v30 - 32);
              v30 -= 40;
            }
            while (v34 >= v20);
          }
          while (v10 < v30);
        }
        if (v10 - 40 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 40);
          long long v36 = *(_OWORD *)(v10 - 24);
          *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 40) = v22;
        *(double *)(v10 - 32) = v20;
        *(_WORD *)(v10 - 8) = v107;
        *(_OWORD *)(v10 - 24) = v104;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 40;
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        __int16 v9 = *(_WORD *)(a2 - 8);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      uint64_t v16 = *(void *)v12;
      long long v21 = *(_OWORD *)(v12 + 16);
      uint64_t v22 = *(void *)(v12 + 32);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(void *)uint64_t v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(void *a1, uint64_t a2)
{
  id v3 = (void *)a1[5];
  uint64_t v4 = a1[6];
  BOOL v5 = (void *)a1[4];
  uint64_t v6 = [v5 dateInterval];
  void v9[4] = v4;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  uint64_t v7 = [v3 collectionCalculator:v5 queryForInterval:v6 error:a2 sampleHandler:v10 mergeHandler:v9];

  return v7;
}

void sub_1BD1613F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10 = *(void *)(a1 + 32);
  *(double *)int v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  char v15 = 1;
  uint64_t v11 = [MEMORY[0x1E4F1C9C8] distantFuture];
  [v11 timeIntervalSinceReferenceDate];
  BOOL v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1BD16149C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6 = a3;
  uint64_t v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = &unk_1F1726440;
  double v9 = 900.0;
  if ((v6 & 0x10) == 0) {
    double v9 = 0.0;
  }
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(void *)(v8 + 104) = 0;
  *(void *)(v8 + 112) = 0;
  *(void *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_WORD *)(a1 + 576) = 1;
  *(unsigned char *)(a1 + 578) = 0;
  *(unsigned char *)(a1 + 580) = 0;
  *(void *)(a1 + 584) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(void *)(a1 + 624) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);

  JUMPOUT(0x1C187B8A0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1F1726440;
  unint64_t v2 = *(void **)(a1 + 608);
  if (v2)
  {
    *(void *)(a1 + 616) = v2;
    operator delete(v2);
  }

  id v3 = *(void **)(a1 + 544);
  if (v3)
  {
    *(void *)(a1 + 552) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(unsigned char *)(result + 576) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::setDateInterval(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 copy];
  uint64_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;

  BOOL v5 = [v6 startDate];
  [v5 timeIntervalSinceReferenceDate];
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_configureForStartTime(a1);
}

void sub_1BD161644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(void *)(a1 + 40))
  {
    id v5 = v3;
    [v3 timeIntervalSinceReferenceDate];
    *(void *)(a1 + 584) = v4;
    id v3 = v5;
  }
}

void sub_1BD1616B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::setStatisticsConfiguration(id *a1, void *a2)
{
  objc_storeStrong(a1 + 74, a2);
  id v7 = a2;
  id v4 = a1[74];
  id v5 = a1[71];
  a1[71] = v4;
  id v6 = v4;

  objc_storeStrong(a1 + 19, a1[71]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (*(void *)(a1 + 40)) {
    return 1;
  }
  BOOL v7 = *(void *)(a1 + 224) == *(void *)(a1 + 216) && *(uint64_t *)(a1 + 248) < 1
    || HKIntervalMask<double>::firstDifference(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)a2, *(void *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (v7) {
    return 1;
  }
  double v9 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128);

  return v9(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 copy];
  id v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v3;
}

void sub_1BD1618A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::dataSource(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));

  return WeakRetained;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::currentStatistics(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 576))
  {
    uint64_t v1 = 0;
  }
  else
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_updateSourceOrder((uint64_t)v4);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_mergeThroughTime((uint64_t)v4, v5);
    uint64_t v1 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::~HDStatisticsBucket((uint64_t)v4);
  }

  return v1;
}

void sub_1BD161970(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::~HDStatisticsBucket((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(a1 + 64);
  BOOL v7 = v6;
  if (v6)
  {
    uint64_t v8 = [v6 startDate];
    [v8 timeIntervalSinceReferenceDate];
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    uint64_t v10 = [v7 endDate];
    [v10 timeIntervalSinceReferenceDate];
    double v12 = v11;
    double v13 = *(double *)(a2 + 8);

    if (v12 < v13) {
      goto LABEL_9;
    }
  }
  if (!*(unsigned char *)(a1 + 578))
  {
LABEL_11:
    uint64_t v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 577))
  {
LABEL_9:
    uint64_t v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(unsigned char *)(a1 + 579)) {
      goto LABEL_11;
    }
    unint64_t v17 = *(void *)(a1 + 616);
    unint64_t v18 = *(void *)(a1 + 624);
    if (v17 >= v18)
    {
      uint64_t v22 = *(void *)(a1 + 608);
      unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      unint64_t v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24) {
        unint64_t v24 = 2 * v25;
      }
      if (v25 >= 0x333333333333333) {
        unint64_t v26 = 0x666666666666666;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26) {
        unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      }
      else {
        uint64_t v27 = 0;
      }
      unint64_t v28 = v26 + 40 * v23;
      unint64_t v29 = v26 + 40 * v27;
      long long v30 = *(_OWORD *)a2;
      long long v31 = *(_OWORD *)(a2 + 16);
      *(void *)(v28 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      unint64_t v21 = v28 + 40;
      long long v32 = *(char **)(a1 + 616);
      double v33 = *(char **)(a1 + 608);
      if (v32 != v33)
      {
        do
        {
          long long v34 = *(_OWORD *)(v32 - 40);
          long long v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        long long v32 = *(char **)(a1 + 608);
      }
      *(void *)(a1 + 608) = v28;
      *(void *)(a1 + 616) = v21;
      *(void *)(a1 + 624) = v29;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      long long v19 = *(_OWORD *)a2;
      long long v20 = *(_OWORD *)(a2 + 16);
      *(void *)(v17 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      unint64_t v21 = v17 + 40;
    }
    *(void *)(a1 + 616) = v21;
    goto LABEL_9;
  }
  int v14 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
  uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1BD161BE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = v5;
  if (*(unsigned char *)(a1 + 578))
  {
    uint64_t v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 578) = 1;
  uint64_t v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    uint64_t v7 = 0;
    goto LABEL_82;
  }
  uint64_t v65 = v6;
  if (*(unsigned char *)(a1 + 577)) {
    goto LABEL_5;
  }
  double v9 = *(void **)(a1 + 600);
  if (!v9)
  {
    id v68 = 0;
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 40))
  {
LABEL_5:
    int v8 = 0;
    id v68 = 0;
    goto LABEL_29;
  }
  [v9 sortUsingComparator:&__block_literal_global_1060];
  id v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v10 = *(id *)(a1 + 600);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  if (!v11)
  {

    id v12 = 0;
    goto LABEL_27;
  }
  id v12 = 0;
  uint64_t v13 = *(void *)v70;
  do
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (*(void *)v70 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(id *)(*((void *)&v69 + 1) + 8 * i);
      BOOL v16 = v15;
      if (v12)
      {
        unint64_t v17 = [v15 startDate];
        unint64_t v18 = [v12 endDate];
        int v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          long long v20 = [v16 endDate];
          unint64_t v21 = [v12 endDate];
          int v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22) {
            goto LABEL_21;
          }
          id v23 = objc_alloc(MEMORY[0x1E4F28C18]);
          unint64_t v24 = [v12 startDate];
          unint64_t v25 = [v16 endDate];
          id v26 = (id)[v23 initWithStartDate:v24 endDate:v25];
        }
        else
        {
          [v68 addObject:v12];
          id v26 = v16;
        }
        id v12 = v26;
      }
      else
      {
        id v12 = v15;
      }
LABEL_21:
    }
    uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  }
  while (v11);

  if (v12) {
    [v68 addObject:v12];
  }
LABEL_27:

LABEL_28:
  int v8 = 1;
LABEL_29:
  uint64_t v27 = *(void **)(a1 + 600);
  *(void *)(a1 + 600) = 0;

  *(unsigned char *)(a1 + 577) = 0;
  if (!v8)
  {
    unint64_t v38 = *(void *)(a1 + 608);
    *(void *)(a1 + 624) = 0;
    *(void *)(a1 + 616) = 0;
    *(void *)(a1 + 608) = 0;
    unint64_t v39 = v38;
    goto LABEL_47;
  }
  unint64_t v28 = [v68 lastObject];
  if (v28)
  {
    unint64_t v29 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_currentBucketInterval(a1);
    long long v30 = [v29 endDate];
    long long v31 = [v28 endDate];
    int v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      double v33 = [v28 endDate];
      [v33 timeIntervalSinceReferenceDate];
      double v35 = v34;

      uint64_t v36 = *(void *)(a1 + 608);
      BOOL v37 = *(long long **)(a1 + 616);
      while ((long long *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((long long *)v36 != v37)
          {
            double v40 = (long long *)(v36 + 40);
            if ((long long *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  long long v41 = *v40;
                  long long v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)uint64_t v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                double v40 = (long long *)((char *)v40 + 40);
              }
              while (v40 != v37);
              BOOL v37 = *(long long **)(a1 + 616);
            }
          }
          if ((long long *)v36 != v37) {
            *(void *)(a1 + 616) = v36;
          }
          break;
        }
        v36 += 40;
      }
    }
  }
  unint64_t v38 = *(void *)(a1 + 608);
  unint64_t v39 = *(void *)(a1 + 616);
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 616) = 0;
  if (![v68 count]) {
    goto LABEL_60;
  }
LABEL_47:
  id v43 = v68;
  long long __p = (void *)v38;
  if (v43)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v44 = v43;
    uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v70;
      while (2)
      {
        for (uint64_t j = 0; j != v45; ++j)
        {
          if (*(void *)v70 != v46) {
            objc_enumerationMutation(v44);
          }
          id v48 = *(id *)(*((void *)&v69 + 1) + 8 * j);
          int v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_primitiveInvalidateInterval((id *)a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
        if (v45) {
          continue;
        }
        break;
      }
    }

LABEL_59:
    unint64_t v38 = (unint64_t)__p;
LABEL_60:
    unint64_t v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v51;
    }
    int v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    long long __p = (void *)v38;
    if (v39 != v38)
    {
      uint64_t v54 = v38;
      uint64_t v50 = v67;
      do
      {
        int v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_primitiveAddSample(a1, v54, 1, v50);
        int v53 = v55;
        v54 += 40;
        if (v54 == v39) {
          char v56 = 0;
        }
        else {
          char v56 = v55;
        }
        uint64_t v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_primitiveInvalidateInterval((id *)a1, 0, v67))goto LABEL_59; {
LABEL_70:
    }
    int v53 = 0;
  }
  if (*(void *)(a1 + 40) && *(void *)(a1 + 552) != *(void *)(a1 + 544))
  {
    do
    {
      uint64_t v57 = objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(void *)(a1 + 112) + 1, v50, v65);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      unint64_t v58 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_statisticsFromFinishedBucket(a1, a1 + 120);
      unint64_t v59 = [v57 startDate];
      [v59 timeIntervalSinceReferenceDate];
      double v61 = v60;
      uint64_t v62 = [v57 endDate];
      [v62 timeIntervalSinceReferenceDate];
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPresence>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_notifyForCurrentBucket(a1);
    }
    while (*(void *)(a1 + 552) != *(void *)(a1 + 544));
  }
  *(unsigned char *)(a1 + 578) = 0;
  if (__p) {
    operator delete(__p);
  }

  if (v53)
  {
    if (*(unsigned char *)(a1 + 580))
    {
      *(unsigned char *)(a1 + 580) = 0;
      id v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_notifyForCurrentBucket(a1);
      uint64_t v7 = 1;
      goto LABEL_82;
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v6 = v65;
LABEL_82:
  *(unsigned char *)(a1 + 578) = 0;
LABEL_83:

  return v7;
}

void sub_1BD1622E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    *(unsigned char *)(v13 + 578) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(unsigned char *)(result + 579) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(unsigned char *)(a1 + 578)) {
      goto LABEL_12;
    }
    uint64_t v7 = 0;
LABEL_14:
    uint64_t v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_primitiveInvalidateInterval((id *)a1, v7, a3);
    goto LABEL_15;
  }
  uint64_t v7 = [v6 dateIntervalForIntervalsContainingInterval:v5];

  if (!*(unsigned char *)(a1 + 578)) {
    goto LABEL_14;
  }
  if (!v7)
  {
LABEL_12:
    id v12 = *(void **)(a1 + 600);
    *(void *)(a1 + 600) = 0;

    uint64_t v7 = 0;
    uint64_t v11 = 1;
    *(unsigned char *)(a1 + 577) = 1;
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 577))
  {
    int v8 = *(void **)(a1 + 600);
    if (!v8)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      id v10 = *(void **)(a1 + 600);
      *(void *)(a1 + 600) = v9;

      int v8 = *(void **)(a1 + 600);
    }
    [v8 addObject:v7];
  }
  uint64_t v11 = 1;
LABEL_15:

  return v11;
}

void sub_1BD1625E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    *(unsigned char *)(a1 + 576) = 1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsPresenceEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v9[3] = &unk_1E63043E8;
    uint64_t v12 = a1;
    id v10 = v5;
    id v11 = WeakRetained;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 112))(a1, v9, a3);
    if (v7 && *(unsigned char *)(a1 + 576) && !*(void *)(a1 + 40)) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_configureForStartTime(a1);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to query for initial statistics: no data source available.");
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1BD162738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::reset(uint64_t result)
{
  *(unsigned char *)(result + 576) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 encodeBool:*(unsigned __int8 *)(a1 + 576) forKey:@"needs_config"];
  id v12 = v3;
  int v32 = &unk_1F1726FA0;
  double v33 = 0;
  int v38 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
  LOBYTE(v38) = 1;
  uint64_t v34 = v4;
  uint64_t v35 = 0;
  statistics::StatisticsEngine::makeCurrentBucket((uint64_t)&v32);
  uint64_t v13 = &unk_1F171B9C8;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  int v31 = 511;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 0;
  int8x16_t v14 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  uint64_t v5 = *(void *)(a1 + 136);
  char v29 = *(unsigned char *)(a1 + 144);
  char v30 = *(unsigned char *)(a1 + 145);
  BOOL v28 = *(_DWORD *)(a1 + 148) == 0;
  int8x16_t v15 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  uint64_t v7 = *(int8x16_t **)(a1 + 216);
  if (v7 != *(int8x16_t **)(a1 + 224))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v7, *v7, 8uLL);
    int8x16_t v40 = v7[1];
    char v43 = 0;
    HIBYTE(v42) = v7[2].i8[9];
    LOBYTE(v42) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>();
  }
  statistics::StatisticsBucket::makeStatistics((uint64_t)&v13);
  HDStatisticsRelative<HDStatisticsPresence>::archive((uint64_t)&v39, (int *)(a1 + 240));
  statistics::Statistics::operator=(*((statistics **)&v22 + 1), (uint64_t)&v39);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v39);
  uint64_t v8 = *(void *)(a1 + 336);
  if (v8 != a1 + 344)
  {
    HDStatisticsRelative<HDStatisticsPresence>::archive((uint64_t)&v39, (int *)(v8 + 40));
    uint64_t v9 = *(void *)(v8 + 32);
    v46 |= 0x200u;
    uint64_t v45 = v9;
    PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>();
  }
  id v10 = *(int8x16_t **)(a1 + 184);
  if (v10 != *(int8x16_t **)(a1 + 192))
  {
    unint64_t v39 = (char *)&unk_1F1727540;
    v41.i32[0] = 3;
    int8x16_t v40 = vextq_s8(*v10, *v10, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>();
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v13);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v13);
  id v11 = *(int8x16_t **)(a1 + 544);
  if (v11 != *(int8x16_t **)(a1 + 552))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v11, *v11, 8uLL);
    int8x16_t v40 = v11[1];
    __int16 v42 = 0;
    char v43 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>();
  }
  PB::Writer::Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v39);
  [v12 encodeBytes:v40.i64[0] length:&v39[-v40.i64[0]] forKey:@"hdsce_archived_representation"];
  PB::Writer::~Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);
}

void sub_1BD162B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v59 = a2;
  *(unsigned char *)(a1 + 576) = [v59 decodeBoolForKey:@"needs_config"];
  id v3 = v59;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::HDStatisticsBucket((uint64_t)&v63.n128_i64[1], 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)long long v64 = 0u;
  long long v65 = 0u;
  uint64_t v103 = 0;
  id v62 = v3;
  PB::Reader::Reader((PB::Reader *)v102, (const unsigned __int8 *)[v62 decodeBytesForKey:@"hdsce_archived_representation" returnedLength:&v103]);
  long long v95 = &unk_1F1726FA0;
  uint64_t v96 = 0;
  uint64_t v100 = 0;
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  int v101 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v95, (PB::Reader *)v102);
  uint64_t v61 = a1;
  v63.n128_u64[0] = v97;
  if (v96)
  {
    uint64_t v70 = 0;
    memset(v73, 0, sizeof(v73));
    long long __p = 0;
    memset(&v77[8], 0, 42);
    memset(&v77[56], 0, 34);
    uint64_t v80 = 0;
    unint64_t v76 = 0;
    long long v75 = 0;
    *(_DWORD *)uint64_t v77 = 0;
    int64_t v79 = 0;
    uint64_t v78 = &v79;
    long long v81 = 0u;
    long long v82 = 0u;
    int v83 = 1065353216;
    long long v84 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    uint64_t v87 = 0;
    int v88 = 1065353216;
    long long v89 = 0u;
    long long v90 = 0u;
    int v91 = 1065353216;
    long long v92 = 0u;
    long long v93 = 0u;
    int v94 = 1065353216;
    int8x16_t v66 = vextq_s8(*(int8x16_t *)(v96 + 8), *(int8x16_t *)(v96 + 8), 8uLL);
    uint64_t v4 = *(void *)(v96 + 72);
    uint64_t v67 = *(void *)(v96 + 64);
    char v68 = *(unsigned char *)(v96 + 185);
    char v69 = *(unsigned char *)(v96 + 186);
    int8x16_t v71 = vextq_s8(*(int8x16_t *)(v96 + 24), *(int8x16_t *)(v96 + 24), 8uLL);
    uint64_t v72 = v4;
    uint64_t v5 = *(void *)(v96 + 80);
    uint64_t v6 = *(void *)(v96 + 88);
    double v60 = (void *)v96;
    if (v5 != v6)
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(*(void *)v5 + 24);
        uint64_t v9 = *(void *)(*(void *)v5 + 32);
        uint64_t v10 = *(void *)(*(void *)v5 + 8);
        uint64_t v11 = *(void *)(*(void *)v5 + 16);
        char v12 = *(unsigned char *)(*(void *)v5 + 41);
        char v13 = *(unsigned char *)(*(void *)v5 + 40);
        if ((unint64_t)v7 >= v76)
        {
          int8x16_t v14 = (char *)__p;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)__p) >> 4);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v76 - (void)__p) >> 4) > v16) {
            unint64_t v16 = 0x5555555555555556 * ((uint64_t)(v76 - (void)__p) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v76 - (void)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v17 = 0x555555555555555;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17)
          {
            unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            uint64_t v7 = v75;
            int8x16_t v14 = (char *)__p;
          }
          else
          {
            uint64_t v18 = 0;
          }
          uint64_t v19 = (void *)(v17 + 48 * v15);
          *uint64_t v19 = v9;
          v19[1] = v8;
          v19[2] = v10;
          v19[3] = v11;
          *((_WORD *)v19 + 16) = 1;
          *((unsigned char *)v19 + 40) = 0;
          *((unsigned char *)v19 + 41) = v12;
          *((unsigned char *)v19 + 42) = v13;
          uint64_t v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              long long v21 = *((_OWORD *)v7 - 3);
              long long v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            int8x16_t v14 = (char *)__p;
          }
          uint64_t v7 = (char *)(v19 + 6);
          long long __p = v20;
          long long v75 = (char *)(v19 + 6);
          unint64_t v76 = v17 + 48 * v18;
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)uint64_t v7 = v9;
          *((void *)v7 + 1) = v8;
          *((void *)v7 + 2) = v10;
          *((void *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        long long v75 = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    long long v23 = (void *)v60[13];
    if (v23)
    {
      HDStatisticsRelative<HDStatisticsPresence>::unarchive((uint64_t)&v104, v23);
      *(_OWORD *)&v77[32] = v106;
      *(_OWORD *)&v77[48] = v107;
      *(_OWORD *)&v77[64] = v108;
      *(_OWORD *)&v77[80] = v109;
      *(_OWORD *)uint64_t v77 = v104;
      *(_OWORD *)&v77[16] = v105;
    }
    long long v24 = (void **)v60[17];
    long long v25 = (void **)v60[18];
    while (v24 != v25)
    {
      uint64_t v26 = (uint64_t)*v24;
      HDStatisticsRelative<HDStatisticsPresence>::unarchive((uint64_t)&v104, *v24);
      uint64_t v27 = *(void *)(v26 + 144);
      BOOL v28 = v79;
      char v29 = &v79;
      char v30 = &v79;
      if (v79)
      {
        do
        {
          while (1)
          {
            char v30 = (uint64_t **)v28;
            uint64_t v31 = v28[4];
            if (v31 <= v27) {
              break;
            }
            BOOL v28 = *v30;
            char v29 = v30;
            if (!*v30) {
              goto LABEL_33;
            }
          }
          if (v31 >= v27)
          {
            double v33 = (char *)v30;
            goto LABEL_36;
          }
          BOOL v28 = v30[1];
        }
        while (v28);
        char v29 = v30 + 1;
      }
LABEL_33:
      double v33 = (char *)operator new(0x88uLL);
      *((void *)v33 + 4) = v27;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *(_OWORD *)(v33 + 120) = 0u;
      *(void *)double v33 = 0;
      *((void *)v33 + 1) = 0;
      *((void *)v33 + 2) = v30;
      *char v29 = (uint64_t *)v33;
      int v32 = (uint64_t *)v33;
      if (*v78)
      {
        uint64_t v78 = (uint64_t **)*v78;
        int v32 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v79, v32);
      ++v80;
LABEL_36:
      long long v35 = v108;
      long long v34 = v109;
      long long v36 = v107;
      *(_OWORD *)(v33 + 72) = v106;
      *(_OWORD *)(v33 + 88) = v36;
      *(_OWORD *)(v33 + 104) = v35;
      *(_OWORD *)(v33 + 120) = v34;
      long long v37 = v105;
      *(_OWORD *)(v33 + 40) = v104;
      ++v24;
      *(_OWORD *)(v33 + 56) = v37;
    }
    uint64_t v38 = v60[5];
    for (uint64_t i = v60[6]; v38 != i; v38 += 8)
    {
      double v41 = *(double *)(*(void *)v38 + 8);
      double v40 = *(double *)(*(void *)v38 + 16);
      if (v41 >= v40) {
        double v42 = *(double *)(*(void *)v38 + 16);
      }
      else {
        double v42 = *(double *)(*(void *)v38 + 8);
      }
      if (v40 < v41) {
        double v40 = *(double *)(*(void *)v38 + 8);
      }
      HKIntervalMask<double>::_insertInterval(v73, v42, v40);
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::operator=((uint64_t)&v63.n128_i64[1], (uint64_t)&v66);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::~HDStatisticsBucket((uint64_t)&v66);
  }
  uint64_t v43 = v98;
  uint64_t v44 = v99;
  if (v98 != v99)
  {
    uint64_t v45 = (char *)v64[1];
    do
    {
      uint64_t v46 = *(void *)(*(void *)v43 + 24);
      uint64_t v47 = *(void *)(*(void *)v43 + 32);
      uint64_t v48 = *(void *)(*(void *)v43 + 8);
      uint64_t v49 = *(void *)(*(void *)v43 + 16);
      if ((unint64_t)v45 >= (unint64_t)v65)
      {
        uint64_t v50 = (char *)v64[0];
        unint64_t v51 = 0xCCCCCCCCCCCCCCCDLL * ((v45 - (char *)v64[0]) >> 3);
        unint64_t v52 = v51 + 1;
        if (v51 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(v65 - (unint64_t)v64[0]) >> 3) > v52) {
          unint64_t v52 = 0x999999999999999ALL * ((uint64_t)(v65 - (unint64_t)v64[0]) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v65 - (unint64_t)v64[0]) >> 3) >= 0x333333333333333) {
          unint64_t v53 = 0x666666666666666;
        }
        else {
          unint64_t v53 = v52;
        }
        if (v53)
        {
          unint64_t v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v53);
          uint64_t v50 = (char *)v64[0];
          uint64_t v45 = (char *)v64[1];
        }
        else
        {
          uint64_t v54 = 0;
        }
        unint64_t v55 = v53 + 40 * v51;
        *(void *)unint64_t v55 = v47;
        *(void *)(v55 + 8) = v46;
        *(void *)(v55 + 16) = v48;
        *(void *)(v55 + 24) = v49;
        *(_WORD *)(v55 + 32) = 1;
        char v56 = (char *)v55;
        if (v45 != v50)
        {
          do
          {
            long long v57 = *(_OWORD *)(v45 - 40);
            long long v58 = *(_OWORD *)(v45 - 24);
            *((_WORD *)v56 - 4) = *((_WORD *)v45 - 4);
            *(_OWORD *)(v56 - 24) = v58;
            *(_OWORD *)(v56 - 40) = v57;
            v56 -= 40;
            v45 -= 40;
          }
          while (v45 != v50);
          uint64_t v50 = (char *)v64[0];
        }
        uint64_t v45 = (char *)(v55 + 40);
        v64[0] = v56;
        v64[1] = (void *)(v55 + 40);
        *(void *)&long long v65 = v53 + 40 * v54;
        if (v50) {
          operator delete(v50);
        }
      }
      else
      {
        *(void *)uint64_t v45 = v47;
        *((void *)v45 + 1) = v46;
        *((void *)v45 + 2) = v48;
        *((void *)v45 + 3) = v49;
        *((_WORD *)v45 + 16) = 1;
        v45 += 40;
      }
      v64[1] = v45;
      v43 += 8;
    }
    while (v43 != v44);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v95);

  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPresence>>::operator=((void *)(v61 + 112), &v63);
  if (v64[0])
  {
    v64[1] = v64[0];
    operator delete(v64[0]);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::~HDStatisticsBucket((uint64_t)&v63.n128_i64[1]);
}

void sub_1BD16320C(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  va_start(va, a7);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x3B0]);
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPresence>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 154) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_WORD *)(a1 + 208) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(void *)(a1 + 216) = a1 + 224;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 272) = 1065353216;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(void *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 376) = 1065353216;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_DWORD *)(a1 + 416) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPresence>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 432);
  if (v2)
  {
    *(void *)(a1 + 440) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::~HDStatisticsBucket(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 384);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 344);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 304);
  unint64_t v2 = *(void **)(a1 + 280);
  if (v2)
  {
    *(void *)(a1 + 288) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 240);
  std::__tree<long>::destroy(*(void **)(a1 + 224));
  id v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(void *)(a1 + 104) = v3;
    operator delete(v3);
  }
  objc_destroyWeak((id *)(a1 + 88));
  uint64_t v4 = *(void **)(a1 + 64);
  if (v4)
  {
    *(void *)(a1 + 72) = v4;
    operator delete(v4);
  }

  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_configureForStartTime(uint64_t a1)
{
  unint64_t v28 = 0;
  unint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
    uint64_t v4 = [v2 dateIntervalContainingDate:v3 index:&v28];

    uint64_t v5 = [v4 startDate];
    [v5 timeIntervalSinceReferenceDate];
    double v7 = v6;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
LABEL_5:
    double v13 = v9;

    goto LABEL_6;
  }
  id v10 = *(id *)(a1 + 64);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v11 = [v10 startDate];
    [v11 timeIntervalSinceReferenceDate];
    double v7 = v12;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
    goto LABEL_5;
  }
  double v7 = -1.79769313e308;
  double v13 = 1.79769313e308;
LABEL_6:

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::HDStatisticsBucket((uint64_t)v21, WeakRetained, v7, v13);

  if (*(void *)(a1 + 32) == 1) {
    char v23 = 1;
  }
  uint64_t v22 = *(void *)(a1 + 56);
  char v24 = *(unsigned char *)(a1 + 24) & 1;
  if (v27 != (char *)(a1 + 72)) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27, *(char **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4);
  }
  objc_storeStrong(&v26, *(id *)(a1 + 592));
  if (!*(void *)(a1 + 40)) {
    int v25 = 0;
  }
  unint64_t v15 = v28;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v21);
  v18.n128_u64[0] = v15;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::HDStatisticsBucket((uint64_t)&v18.n128_i64[1], (uint64_t)v17);
  long long __p = 0u;
  long long v20 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPresence>>::operator=((void *)(a1 + 112), &v18);

  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::~HDStatisticsBucket((uint64_t)&v18.n128_i64[1]);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::~HDStatisticsBucket((uint64_t)v17);
  *(unsigned char *)(a1 + 576) = 0;
  return HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::~HDStatisticsBucket((uint64_t)v21);
}

void sub_1BD163728(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPresence>>::operator=(void *a1, __n128 *a2)
{
  *a1 = a2->n128_u64[0];
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::operator=((uint64_t)(a1 + 1), (uint64_t)&a2->n128_i64[1]);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 54), a2 + 27);
  unint64_t v4 = a2[28].n128_u64[1];
  a2[28].n128_u64[1] = 0;
  uint64_t v5 = (void *)a1[57];
  a1[57] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 96);
  double v7 = *(unsigned char **)(a2 + 104);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(void *)(a1 + 96) = v10;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(void *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  long long v12 = *(_OWORD *)(a2 + 152);
  long long v13 = *(_OWORD *)(a2 + 168);
  long long v14 = *(_OWORD *)(a2 + 184);
  long long v15 = *(_OWORD *)(a2 + 200);
  long long v16 = *(_OWORD *)(a2 + 120);
  long long v17 = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 224) = 0;
  __n128 v18 = (void *)(a1 + 224);
  *(void *)(a1 + 216) = a1 + 224;
  *(_OWORD *)(a1 + 120) = v16;
  *(_OWORD *)(a1 + 136) = v17;
  *(_OWORD *)(a1 + 184) = v14;
  *(_OWORD *)(a1 + 200) = v15;
  *(_OWORD *)(a1 + 152) = v12;
  *(_OWORD *)(a1 + 168) = v13;
  *(void *)(a1 + 232) = 0;
  uint64_t v19 = *(void **)(a2 + 216);
  if (v19 != (void *)(a2 + 224))
  {
    long long v20 = 0;
    long long v21 = (void *)(a1 + 224);
    while (1)
    {
      uint64_t v22 = v19[4];
      char v23 = (void *)(a1 + 224);
      if (v21 == v18) {
        goto LABEL_12;
      }
      char v24 = v20;
      int v25 = (void *)(a1 + 224);
      if (v20)
      {
        do
        {
          char v23 = v24;
          char v24 = (void *)v24[1];
        }
        while (v24);
      }
      else
      {
        do
        {
          char v23 = (void *)v25[2];
          BOOL v26 = *v23 == (void)v25;
          int v25 = v23;
        }
        while (v26);
      }
      if (v23[4] < v22)
      {
LABEL_12:
        if (v20) {
          uint64_t v27 = (uint64_t **)v23;
        }
        else {
          uint64_t v27 = (uint64_t **)(a1 + 224);
        }
        if (v20) {
          unint64_t v28 = (uint64_t **)(v23 + 1);
        }
        else {
          unint64_t v28 = (uint64_t **)(a1 + 224);
        }
        if (!*v28)
        {
LABEL_28:
          uint64_t v31 = operator new(0x88uLL);
          long long v32 = *((_OWORD *)v19 + 2);
          long long v33 = *((_OWORD *)v19 + 4);
          v31[3] = *((_OWORD *)v19 + 3);
          v31[4] = v33;
          v31[2] = v32;
          long long v34 = *((_OWORD *)v19 + 5);
          long long v35 = *((_OWORD *)v19 + 6);
          long long v36 = *((_OWORD *)v19 + 7);
          *((void *)v31 + 16) = v19[16];
          v31[6] = v35;
          v31[7] = v36;
          v31[5] = v34;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 216), (uint64_t)v27, v28, (uint64_t *)v31);
        }
      }
      else
      {
        unint64_t v28 = (uint64_t **)(a1 + 224);
        uint64_t v27 = (uint64_t **)(a1 + 224);
        if (!v20) {
          goto LABEL_28;
        }
        char v29 = v20;
        while (1)
        {
          while (1)
          {
            uint64_t v27 = (uint64_t **)v29;
            uint64_t v30 = v29[4];
            if (v30 <= v22) {
              break;
            }
            char v29 = *v27;
            unint64_t v28 = v27;
            if (!*v27) {
              goto LABEL_28;
            }
          }
          if (v30 >= v22) {
            break;
          }
          char v29 = v27[1];
          if (!v29)
          {
            unint64_t v28 = v27 + 1;
            goto LABEL_28;
          }
        }
      }
      long long v37 = (void *)v19[1];
      if (v37)
      {
        do
        {
          uint64_t v38 = v37;
          long long v37 = (void *)*v37;
        }
        while (v37);
      }
      else
      {
        do
        {
          uint64_t v38 = (void *)v19[2];
          BOOL v26 = *v38 == (void)v19;
          uint64_t v19 = v38;
        }
        while (!v26);
      }
      if (v38 == (void *)(a2 + 224)) {
        break;
      }
      long long v20 = (void *)*v18;
      long long v21 = *(void **)(a1 + 216);
      uint64_t v19 = v38;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 240, a2 + 240);
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 280), *(const void **)(a2 + 280), *(void *)(a2 + 288), (uint64_t)(*(void *)(a2 + 288) - *(void *)(a2 + 280)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 304, a2 + 304);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 344, a2 + 344);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 384, a2 + 384);
  return a1;
}

void sub_1BD163AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, id *location, void **a12)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v16);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v15);
  uint64_t v19 = *v14;
  if (*v14)
  {
    *(void *)(v12 + 288) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v13);
  std::__tree<long>::destroy(*v17);
  long long v20 = *a10;
  if (*a10)
  {
    *(void *)(v12 + 104) = v20;
    operator delete(v20);
  }
  objc_destroyWeak(location);
  long long v21 = *a12;
  if (*a12)
  {
    *(void *)(v12 + 72) = v21;
    operator delete(v21);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::operator=(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  long long v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v5;

  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  id WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  uint64_t v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(void *)(a1 + 104) = v9;
    operator delete(v9);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 96) = 0;
  long long v10 = *(_OWORD *)(a2 + 168);
  long long v11 = *(_OWORD *)(a2 + 184);
  long long v12 = *(_OWORD *)(a2 + 200);
  uint64_t v14 = a1 + 224;
  uint64_t v13 = *(void **)(a1 + 224);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 200) = v12;
  *(_OWORD *)(a1 + 184) = v11;
  *(_OWORD *)(a1 + 168) = v10;
  long long v15 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v15;
  std::__tree<long>::destroy(v13);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  uint64_t v16 = (void *)(a2 + 224);
  uint64_t v17 = *(void *)(a2 + 224);
  *(void *)(a1 + 224) = v17;
  uint64_t v18 = *(void *)(a2 + 232);
  *(void *)(a1 + 232) = v18;
  if (v18)
  {
    *(void *)(v17 + 16) = v14;
    *(void *)(a2 + 216) = v16;
    void *v16 = 0;
    *(void *)(a2 + 232) = 0;
  }
  else
  {
    *(void *)(a1 + 216) = v14;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 240, (uint64_t *)(a2 + 240));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 280, (__n128 *)(a2 + 280));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 304, (uint64_t *)(a2 + 304));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 344, (uint64_t *)(a2 + 344));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 384, (uint64_t *)(a2 + 384));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  double v4 = *(double *)a2;
  id v5 = objc_alloc(MEMORY[0x1E4F1C9C8]);
  long long v6 = (double *)(a2 + 40);
  if (v4 != -1.79769313e308) {
    long long v6 = (double *)a2;
  }
  id v75 = (id)[v5 initWithTimeIntervalSinceReferenceDate:*v6];
  uint64_t v77 = a2;
  if (*(double *)(a2 + 8) == 1.79769313e308) {
    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 48)];
  }
  else {
    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 8)];
  }
  uint64_t v8 = (void *)v7;
  uint64_t v9 = (uint64_t *)*(id *)(a1 + 16);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v10 = *(id *)(a1 + 16);
    if ([v10 shouldUseUnderlyingTypeForStatistics])
    {
      unint64_t WeakRetained = [v10 underlyingSampleType];

      uint64_t v9 = (uint64_t *)WeakRetained;
    }
  }
  long long v11 = (void *)[objc_alloc(MEMORY[0x1E4F2B5B0]) initWithDataType:v9 startDate:v75 endDate:v8];
  if (*(unsigned char *)(a1 + 24))
  {
    unint64_t WeakRetained = (unint64_t)objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      unint64_t WeakRetained = (unint64_t)objc_alloc_init(MEMORY[0x1E4F1CA48]);
      long long v12 = *(uint64_t **)(a2 + 280);
      uint64_t v13 = *(uint64_t **)(a2 + 288);
      while (v12 != v13)
      {
        uint64_t v14 = *v12;
        id v15 = objc_loadWeakRetained((id *)(a1 + 48));
        uint64_t v16 = [v15 sourceForSourceID:v14];

        if (v16)
        {
          if (([(id)WeakRetained containsObject:v16] & 1) == 0) {
            [(id)WeakRetained addObject:v16];
          }
        }

        ++v12;
      }
      uint64_t v17 = (void *)[(id)WeakRetained copy];
      [v11 _setSources:v17];
    }
  }

  v84[0] = &unk_1F1726510;
  long long v85 = v84;
  id v76 = v11;
  long long v18 = *(_OWORD *)(v77 + 168);
  long long v80 = *(_OWORD *)(v77 + 152);
  long long v81 = v18;
  long long v19 = *(_OWORD *)(v77 + 200);
  long long v82 = *(_OWORD *)(v77 + 184);
  long long v83 = v19;
  long long v20 = *(_OWORD *)(v77 + 136);
  *(_OWORD *)long long __p = *(_OWORD *)(v77 + 120);
  long long v79 = v20;
  if (!v85) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  objc_msgSend(v76, "setDataCount:", *(void *)(*(uint64_t (**)(void *, void **))(*v85 + 48))(v85, __p));
  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    goto LABEL_119;
  }
  id v74 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  *(_OWORD *)long long __p = 0u;
  long long v79 = 0u;
  LODWORD(v80) = 1065353216;
  long long v21 = *(void **)(v77 + 216);
  if (v21 == (void *)(v77 + 224)) {
    goto LABEL_118;
  }
  do
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_bundleIdentifierForSourceID(v77, v21[4]);
    uint64_t v22 = (uint64_t *)objc_claimAutoreleasedReturnValue();
    uint64_t v9 = v22;
    if (!v22) {
      goto LABEL_98;
    }
    unint64_t v23 = [v22 hash];
    unint64_t v24 = v23;
    unint64_t v25 = (unint64_t)__p[1];
    if (!__p[1]) {
      goto LABEL_41;
    }
    uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v26.i16[0] = vaddlv_u8(v26);
    unint64_t v27 = v26.u32[0];
    if (v26.u32[0] > 1uLL)
    {
      unint64_t WeakRetained = v23;
      if ((void *)v23 >= __p[1]) {
        unint64_t WeakRetained = v23 % (unint64_t)__p[1];
      }
    }
    else
    {
      unint64_t WeakRetained = ((unint64_t)__p[1] - 1) & v23;
    }
    unint64_t v28 = (void **)*((void *)__p[0] + WeakRetained);
    if (!v28 || (char v29 = (char *)*v28) == 0)
    {
LABEL_41:
      char v29 = (char *)operator new(0x78uLL);
      *(void *)char v29 = 0;
      *((void *)v29 + 1) = v24;
      *((void *)v29 + 2) = v9;
      *(_OWORD *)(v29 + 24) = 0u;
      *(_OWORD *)(v29 + 40) = 0u;
      *(_OWORD *)(v29 + 56) = 0u;
      *(_OWORD *)(v29 + 72) = 0u;
      *(_OWORD *)(v29 + 88) = 0u;
      *(_OWORD *)(v29 + 104) = 0u;
      float v35 = (float)(unint64_t)(*((void *)&v79 + 1) + 1);
      if (v25 && (float)(*(float *)&v80 * (float)v25) >= v35)
      {
LABEL_87:
        unint64_t v51 = __p[0];
        unint64_t v52 = (void *)*((void *)__p[0] + WeakRetained);
        if (v52)
        {
          *(void *)char v29 = *v52;
        }
        else
        {
          *(void *)char v29 = v79;
          *(void *)&long long v79 = v29;
          v51[WeakRetained] = &v79;
          if (!*(void *)v29)
          {
LABEL_96:
            ++*((void *)&v79 + 1);
            goto LABEL_97;
          }
          unint64_t v53 = *(void *)(*(void *)v29 + 8);
          if ((v25 & (v25 - 1)) != 0)
          {
            if (v53 >= v25) {
              v53 %= v25;
            }
          }
          else
          {
            v53 &= v25 - 1;
          }
          unint64_t v52 = (char *)__p[0] + 8 * v53;
        }
        *unint64_t v52 = v29;
        goto LABEL_96;
      }
      BOOL v36 = (v25 & (v25 - 1)) != 0;
      if (v25 < 3) {
        BOOL v36 = 1;
      }
      unint64_t v37 = v36 | (2 * v25);
      unint64_t v38 = vcvtps_u32_f32(v35 / *(float *)&v80);
      if (v37 <= v38) {
        int8x8_t prime = (int8x8_t)v38;
      }
      else {
        int8x8_t prime = (int8x8_t)v37;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v25 = (unint64_t)__p[1];
      if ((void *)*(void *)&prime > __p[1]) {
        goto LABEL_53;
      }
      if ((void *)*(void *)&prime < __p[1])
      {
        unint64_t v46 = vcvtps_u32_f32((float)*((unint64_t *)&v79 + 1) / *(float *)&v80);
        if (__p[1] < (void *)3
          || (uint8x8_t v47 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v47.i16[0] = vaddlv_u8(v47), v47.u32[0] > 1uLL))
        {
          unint64_t v46 = std::__next_prime(v46);
        }
        else
        {
          uint64_t v48 = 1 << -(char)__clz(v46 - 1);
          if (v46 >= 2) {
            unint64_t v46 = v48;
          }
        }
        if (*(void *)&prime <= v46) {
          int8x8_t prime = (int8x8_t)v46;
        }
        if (*(void *)&prime >= v25)
        {
          unint64_t v25 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_53:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            double v40 = operator new(8 * *(void *)&prime);
            double v41 = __p[0];
            __p[0] = v40;
            if (v41) {
              operator delete(v41);
            }
            uint64_t v42 = 0;
            __p[1] = (void *)prime;
            do
              *((void *)__p[0] + v42++) = 0;
            while (*(void *)&prime != v42);
            uint64_t v43 = (void **)v79;
            if ((void)v79)
            {
              unint64_t v44 = *(void *)(v79 + 8);
              uint8x8_t v45 = (uint8x8_t)vcnt_s8(prime);
              v45.i16[0] = vaddlv_u8(v45);
              if (v45.u32[0] > 1uLL)
              {
                if (v44 >= *(void *)&prime) {
                  v44 %= *(void *)&prime;
                }
              }
              else
              {
                v44 &= *(void *)&prime - 1;
              }
              *((void *)__p[0] + v44) = &v79;
              for (i = *v43; i; unint64_t v44 = v50)
              {
                unint64_t v50 = i[1];
                if (v45.u32[0] > 1uLL)
                {
                  if (v50 >= *(void *)&prime) {
                    v50 %= *(void *)&prime;
                  }
                }
                else
                {
                  v50 &= *(void *)&prime - 1;
                }
                if (v50 != v44)
                {
                  if (!*((void *)__p[0] + v50))
                  {
                    *((void *)__p[0] + v50) = v43;
                    goto LABEL_78;
                  }
                  *uint64_t v43 = (void *)*i;
                  void *i = **((void **)__p[0] + v50);
                  **((void **)__p[0] + v50) = i;
                  uint64_t i = v43;
                }
                unint64_t v50 = v44;
LABEL_78:
                uint64_t v43 = (void **)i;
                uint64_t i = (void *)*i;
              }
            }
            unint64_t v25 = (unint64_t)prime;
            goto LABEL_82;
          }
          uint64_t v61 = __p[0];
          __p[0] = 0;
          if (v61) {
            operator delete(v61);
          }
          unint64_t v25 = 0;
          __p[1] = 0;
        }
      }
LABEL_82:
      if ((v25 & (v25 - 1)) != 0)
      {
        if (v24 >= v25) {
          unint64_t WeakRetained = v24 % v25;
        }
        else {
          unint64_t WeakRetained = v24;
        }
      }
      else
      {
        unint64_t WeakRetained = (v25 - 1) & v24;
      }
      goto LABEL_87;
    }
    unint64_t v73 = (unint64_t)__p[1] - 1;
    while (1)
    {
      unint64_t v30 = *((void *)v29 + 1);
      if (v30 == v24) {
        break;
      }
      if (v27 > 1)
      {
        if (v30 >= v25) {
          v30 %= v25;
        }
      }
      else
      {
        v30 &= v73;
      }
      if (v30 != WeakRetained) {
        goto LABEL_41;
      }
LABEL_40:
      char v29 = *(char **)v29;
      if (!v29) {
        goto LABEL_41;
      }
    }
    uint64_t v31 = (uint64_t *)*((id *)v29 + 2);
    long long v32 = v9;
    long long v33 = v32;
    if (v31 != v32)
    {
      char v34 = [v31 isEqualToString:v32];

      if (v34) {
        goto LABEL_97;
      }
      goto LABEL_40;
    }

LABEL_97:
    long long v54 = *(_OWORD *)(v21 + 5);
    *(_OWORD *)(v29 + 40) = *(_OWORD *)(v21 + 7);
    *(_OWORD *)(v29 + 24) = v54;
    long long v55 = *(_OWORD *)(v21 + 9);
    long long v56 = *(_OWORD *)(v21 + 11);
    long long v57 = *(_OWORD *)(v21 + 13);
    *(_OWORD *)(v29 + 104) = *(_OWORD *)(v21 + 15);
    *(_OWORD *)(v29 + 88) = v57;
    *(_OWORD *)(v29 + 72) = v56;
    *(_OWORD *)(v29 + 56) = v55;

LABEL_98:
    long long v58 = (void *)v21[1];
    if (v58)
    {
      do
      {
        id v59 = v58;
        long long v58 = (void *)*v58;
      }
      while (v58);
    }
    else
    {
      do
      {
        id v59 = (void *)v21[2];
        BOOL v60 = *v59 == (void)v21;
        long long v21 = v59;
      }
      while (!v60);
    }
    long long v21 = v59;
  }
  while (v59 != (void *)(v77 + 224));
  for (uint64_t j = (uint64_t **)v79; j; uint64_t j = (uint64_t **)*j)
  {
    uint64_t v9 = j[2];
    if (!v85) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    __n128 v63 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)(*(uint64_t (**)(void *, uint64_t *))(*v85 + 48))(v85, (uint64_t *)j + 3));
    [v74 setObject:v63 forKeyedSubscript:v9];
  }
LABEL_118:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>>>::~__hash_table((uint64_t)__p);
  [v76 setDataCountBySource:v74];

LABEL_119:
  std::__function::__value_func<HDStatisticsPresence const& ()(HDStatisticsRelative<HDStatisticsPresence> const&)>::~__value_func[abi:ne180100](v84);
  long long v64 = [*(id *)(a1 + 16) _unitForChangeInCanonicalUnit];
  long long v65 = [v76 averageQuantity];
  if (v65)
  {
    uint64_t v9 = [v76 averageQuantity];
    if (([v9 isCompatibleWithUnit:v64] & 1) == 0)
    {

      goto LABEL_133;
    }
  }
  int8x16_t v66 = [v76 minimumQuantity];
  if (v66)
  {
    unint64_t WeakRetained = [v76 minimumQuantity];
    if (![(id)WeakRetained isCompatibleWithUnit:v64])
    {
      int v67 = 1;
      goto LABEL_127;
    }
  }
  char v68 = [v76 maximumQuantity];
  if (v68)
  {
    char v69 = [v76 maximumQuantity];
    int v70 = [v69 isCompatibleWithUnit:v64];

    int v67 = v70 ^ 1;
    if (v66) {
      goto LABEL_127;
    }
LABEL_131:
    if (!v65) {
      goto LABEL_132;
    }
LABEL_128:

    if ((v67 & 1) == 0) {
      goto LABEL_134;
    }
LABEL_133:
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8], @"Expected compatibility with %@", v64 format];
    goto LABEL_134;
  }
  int v67 = 0;
  if (!v66) {
    goto LABEL_131;
  }
LABEL_127:

  if (v65) {
    goto LABEL_128;
  }
LABEL_132:

  if (v67) {
    goto LABEL_133;
  }
LABEL_134:

  return v76;
}

void sub_1BD1646AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  if (v18) {
  if (v16)
  }

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 264);
  uint64_t v2 = *(void *)(a1 + 280);
  if (v1 != (*(void *)(a1 + 288) - v2) >> 3)
  {
    double v4 = (void **)(a1 + 280);
    *(void *)(a1 + 288) = v2;
    std::vector<long long>::reserve((void **)(a1 + 280), v1);
    id v5 = *(void **)(a1 + 256);
    if (v5)
    {
      long long v6 = *(char **)(a1 + 288);
      do
      {
        uint64_t v7 = v5[2];
        unint64_t v8 = *(void *)(a1 + 296);
        if ((unint64_t)v6 >= v8)
        {
          id v10 = (char *)*v4;
          uint64_t v11 = (v6 - (unsigned char *)*v4) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            id v10 = *(char **)(a1 + 280);
            long long v6 = *(char **)(a1 + 288);
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v16 = (void *)(v14 + 8 * v11);
          void *v16 = v7;
          uint64_t v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            uint64_t v17 = *((void *)v6 - 1);
            v6 -= 8;
            *--uint64_t v16 = v17;
          }
          *(void *)(a1 + 280) = v16;
          *(void *)(a1 + 288) = v9;
          *(void *)(a1 + 296) = v14 + 8 * v15;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)long long v6 = v7;
          uint64_t v9 = v6 + 8;
        }
        *(void *)(a1 + 288) = v9;
        id v5 = (void *)*v5;
        long long v6 = v9;
      }
      while (v5);
    }
    long long v18 = (id *)(a1 + 88);
    id WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      id v20 = objc_loadWeakRetained(v18);
      [v20 orderSourceIDs:v4];
    }
  }
}

void sub_1BD1649C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2) {
    a2 = v4 * floor(a2 / v4);
  }
  double v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    uint64_t v126 = (void **)(a1 + 96);
    uint64_t v122 = (double **)(a1 + 64);
    uint64_t v120 = a1 + 120;
    location = (id *)(a1 + 88);
    long long v116 = (void *)(a1 + 224);
    while (1)
    {
      uint64_t v6 = *(void *)(a1 + 96);
      uint64_t v7 = *(long long **)(a1 + 104);
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4);
      if (v8) {
        break;
      }
LABEL_124:
      *(double *)(a1 + 56) = a2;
LABEL_125:
      double v113 = *(double *)(a1 + 56);
      if (v113 == v5)
      {
        long long v114 = [MEMORY[0x1E4F28B00] currentHandler];
        long long v115 = [NSString stringWithUTF8String:"void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_mergeThroughTime(double) [Statistics = HDStatisticsRelative<HDStatisticsPresence>]"];
        [v114 handleFailureInFunction:v115 file:@"HDStatisticsBucket.hpp" lineNumber:234 description:@"Failed to make forward progress during statistics merge."];

        double v113 = *(double *)(a1 + 56);
      }
      double v5 = v113;
      if (v113 >= a2) {
        return;
      }
    }
    if (v8 != 1)
    {
      double v20 = a2;
      double v21 = a2;
      double v22 = v5;
      uint64_t v23 = *(void *)(a1 + 96);
      if ((long long *)v6 != v7)
      {
        do
        {
          double v24 = *(double *)(v23 + 8);
          double v25 = *(double *)(v23 + 16);
          if (v24 > v22 && v24 < v21) {
            double v21 = *(double *)(v23 + 8);
          }
          if (v25 > v5) {
            double v27 = *(double *)(v23 + 16);
          }
          else {
            double v27 = v20;
          }
          if (v25 < v20)
          {
            double v22 = v5;
            double v20 = v27;
          }
          v23 += 48;
        }
        while ((long long *)v23 != v7);
      }
      if (v20 >= v21) {
        double v28 = v21;
      }
      else {
        double v28 = v20;
      }
      double v29 = *(double *)(a1 + 16);
      if (v29 > 0.0)
      {
        double v30 = v29 * floor(v28 / v29);
        double v31 = v29 * floor((v29 + v5) / v29);
        if (v30 >= v31) {
          double v28 = v30;
        }
        else {
          double v28 = v31;
        }
      }
      char *v126 = 0;
      v126[1] = 0;
      v126[2] = 0;
      if ((long long *)v6 != v7)
      {
        if (v8 > 0x555555555555555) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        long long v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4));
        float v35 = *(char **)(a1 + 96);
        char v34 = *(char **)(a1 + 104);
        BOOL v36 = v32;
        if (v34 != v35)
        {
          do
          {
            long long v37 = *((_OWORD *)v34 - 3);
            long long v38 = *((_OWORD *)v34 - 2);
            *(_OWORD *)(v36 - 21) = *(_OWORD *)(v34 - 21);
            *((_OWORD *)v36 - 3) = v37;
            *((_OWORD *)v36 - 2) = v38;
            v36 -= 48;
            v34 -= 48;
          }
          while (v34 != v35);
          char v34 = (char *)*v126;
        }
        *(void *)(a1 + 96) = v36;
        *(void *)(a1 + 104) = v32;
        *(void *)(a1 + 112) = &v32[48 * v33];
        if (v34) {
          operator delete(v34);
        }
      }
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_updateSourceOrder(a1);
      long long v118 = (long long *)v6;
      id WeakRetained = objc_loadWeakRetained(location);

      if (WeakRetained)
      {
        *(void *)&long long v128 = a1;
        unint64_t v40 = 126 - 2 * __clz(v8);
        if (v118 == v7) {
          uint64_t v41 = 0;
        }
        else {
          uint64_t v41 = v40;
        }
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_SampleRemainder*,false>((unint64_t)v118, v7, (uint64_t)&v128, v41, 1);
      }
      if (*(unsigned char *)(a1 + 25)) {
        id v119 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      }
      else {
        id v119 = 0;
      }
      if (v118 == v7)
      {
LABEL_106:
        uint64_t v96 = *(void **)(a1 + 216);
        if (v96 != v116)
        {
          do
          {
            unint64_t v97 = (void *)v96[1];
            if (v97)
            {
              do
              {
                uint64_t v98 = v97;
                unint64_t v97 = (void *)*v97;
              }
              while (v97);
            }
            else
            {
              do
              {
                uint64_t v98 = (void *)v96[2];
                BOOL v99 = *v98 == (void)v96;
                uint64_t v96 = v98;
              }
              while (!v99);
            }
            uint64_t v96 = v98;
          }
          while (v98 != v116);
        }
        *(double *)(a1 + 56) = v28;

        if (v118) {
          operator delete(v118);
        }
        goto LABEL_125;
      }
      uint64_t v121 = 0;
      char v44 = 0;
      uint8x8_t v45 = v118;
      while (2)
      {
        long long v46 = v45[1];
        long long v128 = *v45;
        long long v129 = v46;
        uint64_t v130 = *((void *)v45 + 4);
        uint64_t v47 = v46;
        double v48 = v28 - *((double *)&v128 + 1);
        double v49 = *(double *)&v46 - *((double *)&v128 + 1);
        if (v49 - (v28 - *((double *)&v128 + 1)) < 0.01)
        {
          uint64_t v50 = 0;
          int v51 = 0;
          char v52 = 0;
          double v53 = 0.0;
          uint64_t v47 = 0;
          double v54 = 0.0;
          if (!(_BYTE)v130) {
            goto LABEL_59;
          }
LABEL_54:
          char v124 = v52;
          uint64_t v125 = v50;
          HDRawQuantitySample::applyMask((uint64_t)&v128, v122);
          int v56 = *((unsigned __int8 *)v45 + 42);
          int v57 = *((unsigned __int8 *)v45 + 41);
          char v123 = *((unsigned char *)v45 + 40);
          if (!(_BYTE)v130) {
            goto LABEL_87;
          }
          if (v44)
          {
            unint64_t v58 = *((void *)&v129 + 1);
            if (v121 == *((void *)&v129 + 1) || *(unsigned char *)(a1 + 24))
            {
              HDStatisticsRelative<HDStatisticsPresence>::addSample(v120, v56 == 0, *(double *)&v128);
              int v56 = 1;
            }
          }
          else
          {
            HDStatisticsRelative<HDStatisticsPresence>::addSample(v120, v56 == 0, *(double *)&v128);
            int v56 = 1;
            unint64_t v58 = *((void *)&v129 + 1);
            uint64_t v121 = *((void *)&v129 + 1);
          }
          if (!*(unsigned char *)(a1 + 25)) {
            goto LABEL_86;
          }
          char v69 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_bundleIdentifierForSourceID(a1, v58);
          if (!v69) {
            goto LABEL_85;
          }
          int v70 = [v119 objectForKeyedSubscript:v69];
          int8x16_t v71 = v70;
          if (v70)
          {
            if ([v70 longLongValue] != v58 && !*(unsigned char *)(a1 + 24))
            {
LABEL_84:

LABEL_85:
LABEL_86:
              char v44 = 1;
LABEL_87:
              if (v51)
              {
                BOOL v84 = v56 != 0;
                uint64_t v86 = *(char **)(a1 + 104);
                unint64_t v85 = *(void *)(a1 + 112);
                if ((unint64_t)v86 < v85)
                {
                  *(double *)uint64_t v86 = v54;
                  *((double *)v86 + 1) = v53;
                  *((void *)v86 + 2) = v47;
                  *((void *)v86 + 3) = v125;
                  v86[32] = v51;
                  v86[33] = v124;
                  v86[40] = v123;
                  v86[41] = v57;
                  __n128 v63 = v86 + 48;
                  v86[42] = v84;
                  goto LABEL_104;
                }
                long long v80 = (char *)*v126;
                unint64_t v87 = 0xAAAAAAAAAAAAAAABLL * ((v86 - (unsigned char *)*v126) >> 4);
                unint64_t v88 = v87 + 1;
                if (v87 + 1 > 0x555555555555555) {
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v89 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v85 - (void)v80) >> 4);
                if (2 * v89 > v88) {
                  unint64_t v88 = 2 * v89;
                }
                if (v89 >= 0x2AAAAAAAAAAAAAALL) {
                  unint64_t v90 = 0x555555555555555;
                }
                else {
                  unint64_t v90 = v88;
                }
                if (v90)
                {
                  unint64_t v90 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v90);
                  long long v80 = *(char **)(a1 + 96);
                  uint64_t v86 = *(char **)(a1 + 104);
                }
                else
                {
                  uint64_t v91 = 0;
                }
                unint64_t v92 = v90 + 48 * v87;
                *(double *)unint64_t v92 = v54;
                *(double *)(v92 + 8) = v53;
                *(void *)(v92 + 16) = v47;
                *(void *)(v92 + 24) = v125;
                *(unsigned char *)(v92 + 32) = v51;
                *(unsigned char *)(v92 + 33) = v124;
                *(unsigned char *)(v92 + 40) = v123;
                *(unsigned char *)(v92 + 41) = v57;
                *(unsigned char *)(v92 + 42) = v84;
                unint64_t v93 = v92;
                if (v86 != v80)
                {
                  do
                  {
                    long long v94 = *((_OWORD *)v86 - 3);
                    long long v95 = *((_OWORD *)v86 - 2);
                    *(_OWORD *)(v93 - 21) = *(_OWORD *)(v86 - 21);
                    *(_OWORD *)(v93 - 48) = v94;
                    *(_OWORD *)(v93 - 32) = v95;
                    v93 -= 48;
                    v86 -= 48;
                  }
                  while (v86 != v80);
                  long long v80 = (char *)*v126;
                }
                __n128 v63 = (_OWORD *)(v92 + 48);
                *(void *)(a1 + 96) = v93;
                *(void *)(a1 + 104) = v92 + 48;
                *(void *)(a1 + 112) = v90 + 48 * v91;
                if (v80) {
LABEL_103:
                }
                  operator delete(v80);
                goto LABEL_104;
              }
              goto LABEL_105;
            }
          }
          else
          {
            long long v81 = [NSNumber numberWithLongLong:v58];
            [v119 setObject:v81 forKeyedSubscript:v69];
          }
          unint64_t v82 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_canonicalSourceIDForSourceID(a1, v58);
          long long v83 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v82);
          HDStatisticsRelative<HDStatisticsPresence>::addSample((uint64_t)v83, v57 == 0, *(double *)&v128);
          LOBYTE(v57) = 1;
          goto LABEL_84;
        }
        if (v48 < 0.01)
        {
          LOBYTE(v130) = 0;
          goto LABEL_59;
        }
        double v55 = v48 / v49 * *(double *)&v128;
        uint64_t v50 = *((void *)&v129 + 1);
        char v52 = BYTE1(v130);
        double v54 = *(double *)&v128 - v55;
        *(double *)&long long v128 = v55;
        *(double *)&long long v129 = v28;
        double v53 = v28;
        int v51 = v130;
        if ((_BYTE)v130) {
          goto LABEL_54;
        }
LABEL_59:
        id v59 = *(long long **)(a1 + 104);
        unint64_t v60 = *(void *)(a1 + 112);
        if ((unint64_t)v59 < v60)
        {
          long long v61 = *v45;
          long long v62 = v45[2];
          v59[1] = v45[1];
          v59[2] = v62;
          *id v59 = v61;
          __n128 v63 = v59 + 3;
          goto LABEL_104;
        }
        unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * (((char *)v59 - (unsigned char *)*v126) >> 4);
        unint64_t v65 = v64 + 1;
        if (v64 + 1 > 0x555555555555555) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - (void)*v126) >> 4);
        if (2 * v66 > v65) {
          unint64_t v65 = 2 * v66;
        }
        if (v66 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v67 = 0x555555555555555;
        }
        else {
          unint64_t v67 = v65;
        }
        if (v67) {
          unint64_t v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v67);
        }
        else {
          uint64_t v68 = 0;
        }
        uint64_t v72 = (long long *)(v67 + 48 * v64);
        long long v73 = *v45;
        long long v74 = v45[2];
        v72[1] = v45[1];
        v72[2] = v74;
        *uint64_t v72 = v73;
        id v76 = *(char **)(a1 + 96);
        id v75 = *(char **)(a1 + 104);
        uint64_t v77 = v72;
        if (v75 != v76)
        {
          do
          {
            long long v78 = *((_OWORD *)v75 - 3);
            long long v79 = *((_OWORD *)v75 - 2);
            *(long long *)((char *)v77 - 21) = *(_OWORD *)(v75 - 21);
            *(v77 - 3) = v78;
            *(v77 - 2) = v79;
            v77 -= 3;
            v75 -= 48;
          }
          while (v75 != v76);
          id v75 = (char *)*v126;
        }
        __n128 v63 = v72 + 3;
        *(void *)(a1 + 96) = v77;
        *(void *)(a1 + 104) = v72 + 3;
        *(void *)(a1 + 112) = v67 + 48 * v68;
        if (v75)
        {
          long long v80 = v75;
          goto LABEL_103;
        }
LABEL_104:
        *(void *)(a1 + 104) = v63;
LABEL_105:
        v45 += 3;
        if (v45 == v7) {
          goto LABEL_106;
        }
        continue;
      }
    }
    double v10 = *(double *)v6;
    double v9 = *(double *)(v6 + 8);
    double v11 = *(double *)(v6 + 16);
    uint64_t v12 = *(void *)(v6 + 24);
    char v13 = *(unsigned char *)(v6 + 32);
    char v14 = *(unsigned char *)(v6 + 33);
    double v15 = a2 - v9;
    if (a2 - v9 >= 0.01)
    {
      if (v11 - v9 - v15 < 0.01)
      {
        uint64_t v42 = 0;
        char v43 = 0;
        double v18 = 0.0;
        double v17 = *(double *)(v6 + 16);
        char v16 = *(unsigned char *)(v6 + 32);
        double v19 = 0.0;
        double v11 = 0.0;
        char v13 = 0;
LABEL_117:
        int v101 = *(unsigned __int8 *)(v6 + 42);
        int v102 = *(unsigned __int8 *)(v6 + 41);
        uint64_t v103 = *(void *)(a1 + 96);
        int v104 = *(unsigned __int8 *)(v6 + 40);
        *(double *)&long long v128 = v10;
        *((double *)&v128 + 1) = v9;
        *(double *)&long long v129 = v17;
        *((void *)&v129 + 1) = v12;
        LOBYTE(v130) = v16;
        BYTE1(v130) = v14;
        *(_DWORD *)((char *)&v130 + 2) = *(_DWORD *)(v103 + 34);
        HIWORD(v130) = *(_WORD *)(v103 + 38);
        *(double *)&long long v131 = v18;
        *((double *)&v131 + 1) = v19;
        *(double *)&long long v132 = v11;
        *((void *)&v132 + 1) = v42;
        LOBYTE(v133) = v13;
        HIBYTE(v133) = v43;
        HDRawQuantitySample::applyMask((uint64_t)&v128, v122);
        BOOL v105 = v104 != 0;
        BOOL v106 = v102 != 0;
        BOOL v107 = v101 != 0;
        if ((_BYTE)v130)
        {
          double v108 = *(double *)&v128;
          HDStatisticsRelative<HDStatisticsPresence>::addSample(v120, v101 == 0, *(double *)&v128);
          if (*(unsigned char *)(a1 + 25))
          {
            unint64_t v109 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_canonicalSourceIDForSourceID(a1, *((unint64_t *)&v129 + 1));
            long long v110 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v109);
            HDStatisticsRelative<HDStatisticsPresence>::addSample((uint64_t)v110, v102 == 0, v108);
          }
          BOOL v105 = 1;
          BOOL v106 = 1;
          BOOL v107 = 1;
        }
        if ((_BYTE)v133)
        {
          LOWORD(v127) = v133;
          long long v111 = v132;
          long long v112 = (char *)*v126;
          *(_OWORD *)long long v112 = v131;
          *((_OWORD *)v112 + 1) = v111;
          *((void *)v112 + 4) = v127;
          v112[40] = v105;
          v112[41] = v106;
          v112[42] = v107;
        }
        else
        {
          *(void *)(a1 + 104) = *(void *)(a1 + 96);
        }
        goto LABEL_124;
      }
      double v100 = v10 * (v15 / (v11 - v9));
      double v17 = a2;
      char v16 = *(unsigned char *)(v6 + 32);
      double v18 = v10 - v100;
      double v10 = v100;
      double v19 = a2;
    }
    else
    {
      char v16 = 0;
      double v17 = *(double *)(v6 + 16);
      double v18 = *(double *)v6;
      double v19 = *(double *)(v6 + 8);
    }
    uint64_t v42 = *(void *)(v6 + 24);
    char v43 = *(unsigned char *)(v6 + 33);
    goto LABEL_117;
  }
}

void sub_1BD165320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  _Unwind_Resume(a1);
}

uint64_t HDStatisticsRelative<HDStatisticsPresence>::addSample(uint64_t result, int a2, double a3)
{
  int v3 = 2 * (a3 != -1.79769313e308);
  if (a3 == 1.79769313e308) {
    int v3 = 1;
  }
  if (v3)
  {
    if (v3 == 1)
    {
      if (*(_DWORD *)result) {
        return result;
      }
      int v5 = 1;
    }
    else
    {
      if (v3 != 2) {
        return result;
      }
      if (*(_DWORD *)result == 2)
      {
        uint64_t v4 = *(void *)(result + 8) + 1;
LABEL_20:
        *(void *)(result + 8) = v4;
        return result;
      }
      int v5 = 2;
    }
    *(_DWORD *)BOOL result = v5;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    long long v6 = *(_OWORD *)(result + 72);
    *(_WORD *)(result + 48) = *(_WORD *)(result + 88);
    *(_OWORD *)(result + 16) = *(_OWORD *)(result + 56);
    *(_OWORD *)(result + 32) = v6;
    if (a2) {
      *(void *)(result + 8) = 1;
    }
  }
  else if (!*(_DWORD *)result && !*(void *)(result + 8) && a2 != 0)
  {
    uint64_t v4 = 1;
    goto LABEL_20;
  }
  return result;
}

unint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    int v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((void *)(a1 + 304), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_bundleIdentifierForSourceID(a1, a2);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      id v10 = v6;
      uint64_t v7 = (void *)(a1 + 344);
      unint64_t v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        double v11 = &v10;
        *((void *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        id v6 = v10;
      }
    }
  }
  return a2;
}

void sub_1BD165528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  uint64_t v4 = (id *)(a1 + 88);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    id v6 = (void *)(a1 + 384);
    uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
    if (v7)
    {
      id v8 = (id)v7[3];
    }
    else
    {
      id v9 = objc_loadWeakRetained(v4);
      id v8 = [v9 bundleIdentifierForSourceID:a2];

      if (v8)
      {
        id v10 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
        objc_storeStrong(v10 + 3, v8);
      }
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1BD16560C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v12 = a2 - 3;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 4);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v103 = *((void *)a2 - 3);
                uint64_t v104 = *(void *)(v13 + 24);
                if (v103 == v104) {
                  return;
                }
                BOOL v105 = *(char **)(*(void *)a3 + 280);
                BOOL v106 = *(char **)(*(void *)a3 + 288);
                BOOL v107 = v105;
                double v108 = v105;
                if (v105 == v106) {
                  goto LABEL_171;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)v13, (long long *)(v13 + 48), a2 - 3, a3);
                return;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, (uint64_t)(a2 - 3), a3);
                return;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, v13 + 144, (uint64_t)(a2 - 3), a3);
                return;
              default:
                JUMPOUT(0);
            }
            do
            {
              if (*(void *)v108 == v103) {
                goto LABEL_168;
              }
              v108 += 8;
            }
            while (v108 != v106);
            double v108 = *(char **)(*(void *)a3 + 288);
LABEL_168:
            while (*(void *)v107 != v104)
            {
              v107 += 8;
              if (v107 == v106)
              {
                BOOL v107 = *(char **)(*(void *)a3 + 288);
                break;
              }
            }
LABEL_171:
            if (v108 - v105 < v107 - v105)
            {
              *(_OWORD *)v226 = *(_OWORD *)(v13 + 16);
              *(_OWORD *)&v226[16] = *(_OWORD *)(v13 + 32);
              long long v218 = *(_OWORD *)v13;
              long long v109 = *v12;
              long long v110 = *(a2 - 2);
              *(_OWORD *)(v13 + 27) = *(long long *)((char *)a2 - 21);
              *(_OWORD *)unint64_t v13 = v109;
              *(_OWORD *)(v13 + 16) = v110;
              *(long long *)((char *)a2 - 21) = *(_OWORD *)&v226[11];
              long long *v12 = v218;
              *(a2 - 2) = *(_OWORD *)v226;
            }
            return;
          }
          if (v14 <= 1151)
          {
            long long v111 = (long long *)(v13 + 48);
            BOOL v113 = (long long *)v13 == a2 || v111 == a2;
            if (a5)
            {
              if (!v113)
              {
                unint64_t v114 = v13;
                do
                {
                  unint64_t v115 = v114;
                  unint64_t v114 = (unint64_t)v111;
                  uint64_t v116 = *(void *)(v115 + 72);
                  uint64_t v117 = *(void *)(v115 + 24);
                  if (v116 != v117)
                  {
                    long long v118 = *(char **)(*(void *)a3 + 280);
                    id v119 = *(char **)(*(void *)a3 + 288);
                    uint64_t v120 = v118;
                    uint64_t v121 = v118;
                    if (v118 != v119)
                    {
                      do
                      {
                        if (*(void *)v121 == v116) {
                          goto LABEL_196;
                        }
                        v121 += 8;
                      }
                      while (v121 != v119);
                      uint64_t v121 = *(char **)(*(void *)a3 + 288);
LABEL_196:
                      while (*(void *)v120 != v117)
                      {
                        v120 += 8;
                        if (v120 == v119)
                        {
                          uint64_t v120 = *(char **)(*(void *)a3 + 288);
                          break;
                        }
                      }
                    }
                    if (v121 - v118 < v120 - v118)
                    {
                      uint64_t v227 = *(void *)(v114 + 16);
                      long long v219 = *(_OWORD *)v114;
                      long long v236 = *(_OWORD *)(v115 + 80);
                      unint64_t v122 = v114;
                      while (1)
                      {
                        long long v123 = *(_OWORD *)(v115 + 16);
                        *(_OWORD *)unint64_t v122 = *(_OWORD *)v115;
                        *(_OWORD *)(v122 + 16) = v123;
                        *(_OWORD *)(v122 + 27) = *(_OWORD *)(v115 + 27);
                        if (v115 == v13) {
                          break;
                        }
                        unint64_t v122 = v115;
                        uint64_t v124 = *(void *)(v115 - 24);
                        if (v116 != v124)
                        {
                          uint64_t v125 = *(char **)(*(void *)a3 + 280);
                          uint64_t v126 = *(char **)(*(void *)a3 + 288);
                          uint64_t v127 = v125;
                          long long v128 = v125;
                          if (v125 != v126)
                          {
                            do
                            {
                              if (*(void *)v128 == v116) {
                                goto LABEL_208;
                              }
                              v128 += 8;
                            }
                            while (v128 != v126);
                            long long v128 = *(char **)(*(void *)a3 + 288);
LABEL_208:
                            while (*(void *)v127 != v124)
                            {
                              v127 += 8;
                              if (v127 == v126)
                              {
                                uint64_t v127 = *(char **)(*(void *)a3 + 288);
                                break;
                              }
                            }
                          }
                          unint64_t v115 = v122 - 48;
                          if (v128 - v125 < v127 - v125) {
                            continue;
                          }
                        }
                        goto LABEL_212;
                      }
                      unint64_t v122 = v13;
LABEL_212:
                      *(_OWORD *)unint64_t v122 = v219;
                      *(void *)(v122 + 16) = v227;
                      *(void *)(v122 + 24) = v116;
                      *(void *)(v122 + 32) = v236;
                      *(_DWORD *)(v122 + 39) = *(_DWORD *)((char *)&v236 + 7);
                    }
                  }
                  long long v111 = (long long *)(v114 + 48);
                }
                while ((long long *)(v114 + 48) != a2);
              }
            }
            else if (!v113)
            {
              do
              {
                unint64_t v201 = a1;
                a1 = (unint64_t)v111;
                uint64_t v202 = *(void *)(v201 + 72);
                uint64_t v203 = *(void *)(v201 + 24);
                if (v202 != v203)
                {
                  v204 = *(char **)(*(void *)a3 + 280);
                  v205 = *(char **)(*(void *)a3 + 288);
                  v206 = v204;
                  v207 = v204;
                  if (v204 != v205)
                  {
                    do
                    {
                      if (*(void *)v207 == v202) {
                        goto LABEL_312;
                      }
                      v207 += 8;
                    }
                    while (v207 != v205);
                    v207 = *(char **)(*(void *)a3 + 288);
LABEL_312:
                    while (*(void *)v206 != v203)
                    {
                      v206 += 8;
                      if (v206 == v205)
                      {
                        v206 = *(char **)(*(void *)a3 + 288);
                        break;
                      }
                    }
                  }
                  if (v207 - v204 < v206 - v204)
                  {
                    uint64_t v230 = *(void *)(a1 + 16);
                    long long v222 = *(_OWORD *)a1;
                    long long v239 = *(_OWORD *)(v201 + 80);
                    unint64_t v208 = a1;
                    do
                    {
                      v209 = (_OWORD *)v208;
                      unint64_t v208 = v201;
                      long long v210 = *(_OWORD *)(v201 + 16);
                      _OWORD *v209 = *(_OWORD *)v201;
                      v209[1] = v210;
                      *(_OWORD *)((char *)v209 + 27) = *(_OWORD *)(v201 + 27);
                      uint64_t v211 = *(void *)(v201 - 24);
                      if (v202 == v211) {
                        break;
                      }
                      v212 = *(char **)(*(void *)a3 + 280);
                      v213 = *(char **)(*(void *)a3 + 288);
                      v214 = v212;
                      v215 = v212;
                      if (v212 != v213)
                      {
                        do
                        {
                          if (*(void *)v215 == v202) {
                            goto LABEL_322;
                          }
                          v215 += 8;
                        }
                        while (v215 != v213);
                        v215 = *(char **)(*(void *)a3 + 288);
LABEL_322:
                        while (*(void *)v214 != v211)
                        {
                          v214 += 8;
                          if (v214 == v213)
                          {
                            v214 = *(char **)(*(void *)a3 + 288);
                            break;
                          }
                        }
                      }
                      unint64_t v201 = v208 - 48;
                    }
                    while (v215 - v212 < v214 - v212);
                    *(_OWORD *)unint64_t v208 = v222;
                    *(void *)(v208 + 16) = v230;
                    *(void *)(v208 + 24) = v202;
                    *(void *)(v208 + 32) = v239;
                    *(_DWORD *)(v208 + 39) = *(_DWORD *)((char *)&v239 + 7);
                  }
                }
                long long v111 = (long long *)(a1 + 48);
              }
              while ((long long *)(a1 + 48) != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((long long *)v13 != a2)
            {
              int64_t v129 = (v15 - 2) >> 1;
              int64_t v130 = v129;
              do
              {
                int64_t v131 = v130;
                if (v129 >= v130)
                {
                  uint64_t v132 = (2 * v130) | 1;
                  unint64_t v133 = v13 + 48 * v132;
                  if (2 * v131 + 2 < (uint64_t)v15)
                  {
                    uint64_t v134 = *(void *)(v133 + 24);
                    uint64_t v135 = *(void *)(v133 + 72);
                    if (v134 != v135)
                    {
                      v137 = *(char **)(*(void *)a3 + 280);
                      v136 = *(char **)(*(void *)a3 + 288);
                      v138 = v137;
                      v139 = v137;
                      if (v137 != v136)
                      {
                        do
                        {
                          if (*(void *)v139 == v134) {
                            goto LABEL_224;
                          }
                          v139 += 8;
                        }
                        while (v139 != v136);
                        v139 = *(char **)(*(void *)a3 + 288);
LABEL_224:
                        while (*(void *)v138 != v135)
                        {
                          v138 += 8;
                          if (v138 == v136)
                          {
                            v138 = *(char **)(*(void *)a3 + 288);
                            break;
                          }
                        }
                      }
                      v133 += 48 * (v139 - v137 < v138 - v137);
                      if (v139 - v137 < v138 - v137) {
                        uint64_t v132 = 2 * v131 + 2;
                      }
                    }
                  }
                  unint64_t v140 = v13 + 48 * v131;
                  uint64_t v141 = *(void *)(v133 + 24);
                  uint64_t v142 = *(void *)(v140 + 24);
                  if (v141 == v142) {
                    goto LABEL_238;
                  }
                  v144 = *(char **)(*(void *)a3 + 280);
                  v143 = *(char **)(*(void *)a3 + 288);
                  v145 = v144;
                  v146 = v144;
                  if (v144 != v143)
                  {
                    do
                    {
                      if (*(void *)v146 == v141) {
                        goto LABEL_234;
                      }
                      v146 += 8;
                    }
                    while (v146 != v143);
                    v146 = *(char **)(*(void *)a3 + 288);
LABEL_234:
                    while (*(void *)v145 != v142)
                    {
                      v145 += 8;
                      if (v145 == v143)
                      {
                        v145 = *(char **)(*(void *)a3 + 288);
                        break;
                      }
                    }
                  }
                  if (v146 - v144 >= v145 - v144)
                  {
LABEL_238:
                    uint64_t v228 = *(void *)(v140 + 16);
                    long long v220 = *(_OWORD *)v140;
                    long long v237 = *(_OWORD *)(v140 + 32);
                    long long v147 = *(_OWORD *)v133;
                    long long v148 = *(_OWORD *)(v133 + 16);
                    *(_OWORD *)(v140 + 27) = *(_OWORD *)(v133 + 27);
                    *(_OWORD *)unint64_t v140 = v147;
                    *(_OWORD *)(v140 + 16) = v148;
                    if (v129 >= v132)
                    {
                      while (1)
                      {
                        uint64_t v150 = 2 * v132;
                        uint64_t v132 = (2 * v132) | 1;
                        unint64_t v149 = v13 + 48 * v132;
                        uint64_t v151 = v150 + 2;
                        if (v151 < (uint64_t)v15)
                        {
                          uint64_t v152 = *(void *)(v149 + 24);
                          uint64_t v153 = *(void *)(v149 + 72);
                          if (v152 != v153)
                          {
                            v154 = *(char **)(*(void *)a3 + 280);
                            v155 = *(char **)(*(void *)a3 + 288);
                            v156 = v154;
                            v157 = v154;
                            if (v154 != v155)
                            {
                              do
                              {
                                if (*(void *)v157 == v152) {
                                  goto LABEL_246;
                                }
                                v157 += 8;
                              }
                              while (v157 != v155);
                              v157 = *(char **)(*(void *)a3 + 288);
LABEL_246:
                              while (*(void *)v156 != v153)
                              {
                                v156 += 8;
                                if (v156 == v155)
                                {
                                  v156 = *(char **)(*(void *)a3 + 288);
                                  break;
                                }
                              }
                            }
                            v149 += 48 * (v157 - v154 < v156 - v154);
                            if (v157 - v154 < v156 - v154) {
                              uint64_t v132 = v151;
                            }
                          }
                        }
                        uint64_t v158 = *(void *)(v149 + 24);
                        if (v158 != v142)
                        {
                          v160 = *(char **)(*(void *)a3 + 280);
                          v159 = *(char **)(*(void *)a3 + 288);
                          v161 = v160;
                          v162 = v160;
                          if (v160 != v159)
                          {
                            do
                            {
                              if (*(void *)v162 == v158) {
                                goto LABEL_256;
                              }
                              v162 += 8;
                            }
                            while (v162 != v159);
                            v162 = *(char **)(*(void *)a3 + 288);
LABEL_256:
                            while (*(void *)v161 != v142)
                            {
                              v161 += 8;
                              if (v161 == v159)
                              {
                                v161 = *(char **)(*(void *)a3 + 288);
                                break;
                              }
                            }
                          }
                          if (v162 - v160 < v161 - v160) {
                            break;
                          }
                        }
                        long long v163 = *(_OWORD *)v149;
                        long long v164 = *(_OWORD *)(v149 + 16);
                        *(_OWORD *)(v133 + 27) = *(_OWORD *)(v149 + 27);
                        *(_OWORD *)unint64_t v133 = v163;
                        *(_OWORD *)(v133 + 16) = v164;
                        unint64_t v133 = v149;
                        if (v129 < v132) {
                          goto LABEL_261;
                        }
                      }
                    }
                    unint64_t v149 = v133;
LABEL_261:
                    *(_OWORD *)unint64_t v149 = v220;
                    *(void *)(v149 + 16) = v228;
                    *(void *)(v149 + 24) = v142;
                    *(void *)(v149 + 32) = v237;
                    *(_DWORD *)(v149 + 39) = *(_DWORD *)((char *)&v237 + 7);
                  }
                }
                int64_t v130 = v131 - 1;
              }
              while (v131);
              int64_t v165 = v14 / 0x30uLL;
              do
              {
                uint64_t v166 = 0;
                *(_OWORD *)v229 = *(_OWORD *)(v13 + 16);
                *(_OWORD *)&v229[16] = *(_OWORD *)(v13 + 32);
                long long v221 = *(_OWORD *)v13;
                uint64_t v167 = v165 - 2;
                if (v165 < 2) {
                  uint64_t v167 = v165 - 1;
                }
                uint64_t v168 = v167 >> 1;
                unint64_t v169 = v13;
                do
                {
                  v170 = (_OWORD *)v169;
                  v169 += 48 * v166 + 48;
                  uint64_t v171 = 2 * v166;
                  uint64_t v166 = (2 * v166) | 1;
                  uint64_t v172 = v171 + 2;
                  if (v171 + 2 < v165)
                  {
                    uint64_t v173 = *(void *)(v169 + 24);
                    uint64_t v174 = *(void *)(v169 + 72);
                    if (v173 != v174)
                    {
                      v176 = *(char **)(*(void *)a3 + 280);
                      v175 = *(char **)(*(void *)a3 + 288);
                      v177 = v176;
                      v178 = v176;
                      if (v176 != v175)
                      {
                        do
                        {
                          if (*(void *)v178 == v173) {
                            goto LABEL_273;
                          }
                          v178 += 8;
                        }
                        while (v178 != v175);
                        v178 = *(char **)(*(void *)a3 + 288);
LABEL_273:
                        while (*(void *)v177 != v174)
                        {
                          v177 += 8;
                          if (v177 == v175)
                          {
                            v177 = *(char **)(*(void *)a3 + 288);
                            break;
                          }
                        }
                      }
                      v169 += 48 * (v178 - v176 < v177 - v176);
                      if (v178 - v176 < v177 - v176) {
                        uint64_t v166 = v172;
                      }
                    }
                  }
                  long long v179 = *(_OWORD *)v169;
                  long long v180 = *(_OWORD *)(v169 + 16);
                  *(_OWORD *)((char *)v170 + 27) = *(_OWORD *)(v169 + 27);
                  _OWORD *v170 = v179;
                  v170[1] = v180;
                }
                while (v166 <= v168);
                a2 -= 3;
                if ((long long *)v169 == a2)
                {
                  *(_OWORD *)(v169 + 27) = *(_OWORD *)&v229[11];
                  *(_OWORD *)unint64_t v169 = v221;
                  *(_OWORD *)(v169 + 16) = *(_OWORD *)v229;
                }
                else
                {
                  long long v181 = *a2;
                  long long v182 = a2[1];
                  *(_OWORD *)(v169 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v169 = v181;
                  *(_OWORD *)(v169 + 16) = v182;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v229[11];
                  *a2 = v221;
                  a2[1] = *(_OWORD *)v229;
                  uint64_t v183 = v169 - v13 + 48;
                  if (v183 >= 49)
                  {
                    unint64_t v184 = (v183 / 0x30uLL - 2) >> 1;
                    unint64_t v185 = v13 + 48 * v184;
                    uint64_t v186 = *(void *)(v185 + 24);
                    uint64_t v187 = *(void *)(v169 + 24);
                    if (v186 != v187)
                    {
                      v189 = *(char **)(*(void *)a3 + 280);
                      v188 = *(char **)(*(void *)a3 + 288);
                      v190 = v189;
                      v191 = v189;
                      if (v189 != v188)
                      {
                        do
                        {
                          if (*(void *)v191 == v186) {
                            goto LABEL_286;
                          }
                          v191 += 8;
                        }
                        while (v191 != v188);
                        v191 = *(char **)(*(void *)a3 + 288);
LABEL_286:
                        while (*(void *)v190 != v187)
                        {
                          v190 += 8;
                          if (v190 == v188)
                          {
                            v190 = *(char **)(*(void *)a3 + 288);
                            break;
                          }
                        }
                      }
                      if (v191 - v189 < v190 - v189)
                      {
                        uint64_t v242 = *(void *)(v169 + 16);
                        long long v238 = *(_OWORD *)v169;
                        long long v233 = *(_OWORD *)(v169 + 32);
                        do
                        {
                          v192 = (_OWORD *)v169;
                          unint64_t v169 = v185;
                          long long v193 = *(_OWORD *)v185;
                          long long v194 = *(_OWORD *)(v185 + 16);
                          *(_OWORD *)((char *)v192 + 27) = *(_OWORD *)(v185 + 27);
                          _OWORD *v192 = v193;
                          v192[1] = v194;
                          if (!v184) {
                            break;
                          }
                          unint64_t v184 = (v184 - 1) >> 1;
                          unint64_t v185 = v13 + 48 * v184;
                          uint64_t v195 = *(void *)(v185 + 24);
                          if (v195 == v187) {
                            break;
                          }
                          v197 = *(char **)(*(void *)a3 + 280);
                          v196 = *(char **)(*(void *)a3 + 288);
                          v198 = v197;
                          v199 = v197;
                          if (v197 != v196)
                          {
                            do
                            {
                              if (*(void *)v199 == v195) {
                                goto LABEL_297;
                              }
                              v199 += 8;
                            }
                            while (v199 != v196);
                            v199 = *(char **)(*(void *)a3 + 288);
LABEL_297:
                            while (*(void *)v198 != v187)
                            {
                              v198 += 8;
                              if (v198 == v196)
                              {
                                v198 = *(char **)(*(void *)a3 + 288);
                                break;
                              }
                            }
                          }
                        }
                        while (v199 - v197 < v198 - v197);
                        *(_OWORD *)unint64_t v169 = v238;
                        *(void *)(v169 + 16) = v242;
                        *(void *)(v169 + 24) = v187;
                        *(void *)(v169 + 32) = v233;
                        *(_DWORD *)(v169 + 39) = *(_DWORD *)((char *)&v233 + 7);
                      }
                    }
                  }
                }
              }
              while (v165-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          double v17 = (long long *)(v13 + 48 * (v15 >> 1));
          if ((unint64_t)v14 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v15 >> 1)), a2 - 3, a3);
            uint64_t v18 = 3 * v16;
            double v19 = (long long *)(a1 + 48 * v16 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)(a1 + 48), v19, a2 - 6, a3);
            double v20 = (long long *)(a1 + 48 + 16 * v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)(a1 + 96), v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(v19, v17, v20, a3);
            *(_OWORD *)v223 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v223[16] = *(_OWORD *)(a1 + 32);
            long long v216 = *(_OWORD *)a1;
            long long v21 = *(long long *)((char *)v17 + 27);
            long long v22 = v17[1];
            *(_OWORD *)a1 = *v17;
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(a1 + 27) = v21;
            *(long long *)((char *)v17 + 27) = *(_OWORD *)&v223[11];
            *double v17 = v216;
            v17[1] = *(_OWORD *)v223;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)(a1 + 48 * (v15 >> 1)), (long long *)a1, a2 - 3, a3);
          }
          --a4;
          if (a5)
          {
            uint64_t v23 = *(void *)(a1 + 24);
            uint64_t v24 = *(void *)a3;
            break;
          }
          uint64_t v25 = *(void *)(a1 - 24);
          uint64_t v23 = *(void *)(a1 + 24);
          if (v25 != v23)
          {
            uint64_t v24 = *(void *)a3;
            uint8x8_t v26 = *(char **)(*(void *)a3 + 280);
            double v27 = *(char **)(*(void *)a3 + 288);
            double v28 = v26;
            double v29 = v26;
            if (v26 != v27)
            {
              do
              {
                if (*(void *)v29 == v25) {
                  goto LABEL_16;
                }
                v29 += 8;
              }
              while (v29 != v27);
              double v29 = *(char **)(*(void *)a3 + 288);
LABEL_16:
              while (*(void *)v28 != v23)
              {
                v28 += 8;
                if (v28 == v27)
                {
                  double v28 = *(char **)(*(void *)a3 + 288);
                  break;
                }
              }
            }
            if (v29 - v26 < v28 - v26) {
              break;
            }
          }
          uint64_t v241 = *(void *)(a1 + 16);
          long long v232 = *(_OWORD *)(a1 + 32);
          long long v235 = *(_OWORD *)a1;
          uint64_t v67 = *((void *)a2 - 3);
          if (v23 == v67) {
            goto LABEL_107;
          }
          uint64_t v68 = *(char **)(*(void *)a3 + 280);
          char v69 = *(char **)(*(void *)a3 + 288);
          if (v68 == v69)
          {
            int8x16_t v71 = *(char **)(*(void *)a3 + 280);
            int v70 = v71;
          }
          else
          {
            int v70 = *(char **)(*(void *)a3 + 280);
            while (*(void *)v70 != v23)
            {
              v70 += 8;
              if (v70 == v69)
              {
                int v70 = *(char **)(*(void *)a3 + 288);
                break;
              }
            }
            int8x16_t v71 = *(char **)(*(void *)a3 + 280);
            while (*(void *)v71 != v67)
            {
              v71 += 8;
              if (v71 == v69)
              {
                int8x16_t v71 = *(char **)(*(void *)a3 + 288);
                break;
              }
            }
          }
          if (v70 - v68 >= v71 - v68)
          {
LABEL_107:
            unint64_t v13 = a1 + 48;
            if (a1 + 48 < (unint64_t)a2)
            {
              uint64_t v75 = *(void *)a3;
              unint64_t v76 = a1;
              do
              {
                uint64_t v77 = *(void *)(v76 + 72);
                unint64_t v76 = v13;
                if (v23 != v77)
                {
                  long long v78 = *(char **)(v75 + 280);
                  long long v79 = *(char **)(v75 + 288);
                  long long v80 = v78;
                  long long v81 = v78;
                  if (v78 != v79)
                  {
                    do
                    {
                      if (*(void *)v81 == v23) {
                        goto LABEL_114;
                      }
                      v81 += 8;
                    }
                    while (v81 != v79);
                    long long v81 = *(char **)(v75 + 288);
LABEL_114:
                    while (*(void *)v80 != v77)
                    {
                      v80 += 8;
                      if (v80 == v79)
                      {
                        long long v80 = *(char **)(v75 + 288);
                        break;
                      }
                    }
                  }
                  if (v81 - v78 < v80 - v78) {
                    break;
                  }
                }
                v13 += 48;
              }
              while (v76 + 48 < (unint64_t)a2);
            }
          }
          else
          {
            unint64_t v13 = a1;
            do
            {
              do
              {
                uint64_t v72 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v72);
              if (v68 == v69)
              {
                long long v74 = *(char **)(*(void *)a3 + 280);
                long long v73 = v74;
              }
              else
              {
                long long v73 = *(char **)(*(void *)a3 + 280);
                while (*(void *)v73 != v23)
                {
                  v73 += 8;
                  if (v73 == v69)
                  {
                    long long v73 = *(char **)(*(void *)a3 + 288);
                    break;
                  }
                }
                long long v74 = *(char **)(*(void *)a3 + 280);
                while (*(void *)v74 != v72)
                {
                  v74 += 8;
                  if (v74 == v69)
                  {
                    long long v74 = *(char **)(*(void *)a3 + 288);
                    break;
                  }
                }
              }
            }
            while (v73 - v68 >= v74 - v68);
          }
          unint64_t v82 = a2;
          if (v13 < (unint64_t)a2)
          {
            uint64_t v83 = *(void *)a3;
            unint64_t v82 = a2;
            do
            {
              uint64_t v84 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v84) {
                break;
              }
              unint64_t v85 = *(char **)(v83 + 280);
              uint64_t v86 = *(char **)(v83 + 288);
              unint64_t v87 = v85;
              unint64_t v88 = v85;
              if (v85 != v86)
              {
                do
                {
                  if (*(void *)v88 == v23) {
                    goto LABEL_126;
                  }
                  v88 += 8;
                }
                while (v88 != v86);
                unint64_t v88 = *(char **)(v83 + 288);
LABEL_126:
                while (*(void *)v87 != v84)
                {
                  v87 += 8;
                  if (v87 == v86)
                  {
                    unint64_t v87 = *(char **)(v83 + 288);
                    break;
                  }
                }
              }
            }
            while (v88 - v85 < v87 - v85);
          }
          while (v13 < (unint64_t)v82)
          {
            *(_OWORD *)v225 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v225[16] = *(_OWORD *)(v13 + 32);
            long long v217 = *(_OWORD *)v13;
            long long v89 = *v82;
            long long v90 = v82[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v82 + 27);
            *(_OWORD *)unint64_t v13 = v89;
            *(_OWORD *)(v13 + 16) = v90;
            *(long long *)((char *)v82 + 27) = *(_OWORD *)&v225[11];
            *unint64_t v82 = v217;
            v82[1] = *(_OWORD *)v225;
            uint64_t v91 = *(void *)a3;
            do
            {
              do
              {
                uint64_t v92 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v92);
              unint64_t v93 = *(char **)(v91 + 280);
              long long v94 = *(char **)(v91 + 288);
              if (v93 == v94)
              {
                uint64_t v96 = *(char **)(v91 + 280);
                long long v95 = v96;
              }
              else
              {
                long long v95 = *(char **)(v91 + 280);
                while (*(void *)v95 != v23)
                {
                  v95 += 8;
                  if (v95 == v94)
                  {
                    long long v95 = *(char **)(v91 + 288);
                    break;
                  }
                }
                uint64_t v96 = *(char **)(v91 + 280);
                while (*(void *)v96 != v92)
                {
                  v96 += 8;
                  if (v96 == v94)
                  {
                    uint64_t v96 = *(char **)(v91 + 288);
                    break;
                  }
                }
              }
            }
            while (v95 - v93 >= v96 - v93);
            do
            {
              uint64_t v97 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v97) {
                break;
              }
              if (v93 == v94)
              {
                BOOL v99 = v93;
                uint64_t v98 = v93;
              }
              else
              {
                uint64_t v98 = v93;
                while (*(void *)v98 != v23)
                {
                  v98 += 8;
                  if (v98 == v94)
                  {
                    uint64_t v98 = v94;
                    break;
                  }
                }
                BOOL v99 = v93;
                while (*(void *)v99 != v97)
                {
                  v99 += 8;
                  if (v99 == v94)
                  {
                    BOOL v99 = v94;
                    break;
                  }
                }
              }
            }
            while (v98 - v93 < v99 - v93);
          }
          double v100 = (long long *)(v13 - 48);
          BOOL v5 = v13 - 48 >= a1;
          BOOL v6 = v13 - 48 == a1;
          if (v13 - 48 != a1)
          {
            long long v101 = *v100;
            long long v102 = *(_OWORD *)(v13 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
            *(_OWORD *)a1 = v101;
            *(_OWORD *)(a1 + 16) = v102;
          }
          a5 = 0;
          *double v100 = v235;
          *(void *)(v13 - 32) = v241;
          *(void *)(v13 - 24) = v23;
          *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v232 + 7);
          *(void *)(v13 - 16) = v232;
        }
        uint64_t v240 = *(void *)(a1 + 16);
        long long v231 = *(_OWORD *)(a1 + 32);
        long long v234 = *(_OWORD *)a1;
        unint64_t v30 = a1;
        do
        {
          unint64_t v31 = v30;
          v30 += 48;
          uint64_t v32 = *(void *)(v31 + 72);
          if (v32 == v23) {
            break;
          }
          uint64_t v33 = *(char **)(v24 + 280);
          char v34 = *(char **)(v24 + 288);
          float v35 = v33;
          BOOL v36 = v33;
          if (v33 != v34)
          {
            do
            {
              if (*(void *)v36 == v32) {
                goto LABEL_26;
              }
              v36 += 8;
            }
            while (v36 != v34);
            BOOL v36 = *(char **)(v24 + 288);
LABEL_26:
            while (*(void *)v35 != v23)
            {
              v35 += 8;
              if (v35 == v34)
              {
                float v35 = *(char **)(v24 + 288);
                break;
              }
            }
          }
        }
        while (v36 - v33 < v35 - v33);
        long long v37 = a2;
        if (v31 == a1)
        {
          long long v37 = a2;
          if (v30 < (unint64_t)a2)
          {
            long long v37 = a2;
            do
            {
              uint64_t v43 = *((void *)v37 - 3);
              v37 -= 3;
              if (v43 != v23)
              {
                char v44 = *(char **)(v24 + 280);
                uint8x8_t v45 = *(char **)(v24 + 288);
                long long v46 = v44;
                uint64_t v47 = v44;
                if (v44 != v45)
                {
                  do
                  {
                    if (*(void *)v47 == v43) {
                      goto LABEL_48;
                    }
                    v47 += 8;
                  }
                  while (v47 != v45);
                  uint64_t v47 = *(char **)(v24 + 288);
LABEL_48:
                  while (*(void *)v46 != v23)
                  {
                    v46 += 8;
                    if (v46 == v45)
                    {
                      long long v46 = *(char **)(v24 + 288);
                      break;
                    }
                  }
                }
                if (v47 - v44 < v46 - v44) {
                  break;
                }
              }
            }
            while (v30 < (unint64_t)v37);
          }
        }
        else
        {
          do
          {
            do
            {
              uint64_t v38 = *((void *)v37 - 3);
              v37 -= 3;
            }
            while (v38 == v23);
            unint64_t v39 = *(char **)(v24 + 280);
            unint64_t v40 = *(char **)(v24 + 288);
            uint64_t v41 = v39;
            uint64_t v42 = v39;
            if (v39 != v40)
            {
              do
              {
                if (*(void *)v42 == v38) {
                  goto LABEL_36;
                }
                v42 += 8;
              }
              while (v42 != v40);
              uint64_t v42 = *(char **)(v24 + 288);
LABEL_36:
              while (*(void *)v41 != v23)
              {
                v41 += 8;
                if (v41 == v40)
                {
                  uint64_t v41 = *(char **)(v24 + 288);
                  break;
                }
              }
            }
          }
          while (v42 - v39 >= v41 - v39);
        }
        unint64_t v13 = v30;
        if (v30 < (unint64_t)v37)
        {
          double v48 = v37;
          do
          {
            *(_OWORD *)v224 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v224[16] = *(_OWORD *)(v13 + 32);
            long long v49 = *(_OWORD *)v13;
            long long v51 = *v48;
            long long v50 = v48[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v48 + 27);
            *(_OWORD *)unint64_t v13 = v51;
            *(_OWORD *)(v13 + 16) = v50;
            *(long long *)((char *)v48 + 27) = *(_OWORD *)&v224[11];
            *double v48 = v49;
            v48[1] = *(_OWORD *)v224;
            uint64_t v52 = *(void *)a3;
            do
            {
              uint64_t v53 = *(void *)(v13 + 72);
              v13 += 48;
              if (v53 == v23) {
                break;
              }
              double v54 = *(char **)(v52 + 280);
              double v55 = *(char **)(v52 + 288);
              int v56 = v54;
              int v57 = v54;
              if (v54 != v55)
              {
                do
                {
                  if (*(void *)v57 == v53) {
                    goto LABEL_61;
                  }
                  v57 += 8;
                }
                while (v57 != v55);
                int v57 = *(char **)(v52 + 288);
LABEL_61:
                while (*(void *)v56 != v23)
                {
                  v56 += 8;
                  if (v56 == v55)
                  {
                    int v56 = *(char **)(v52 + 288);
                    break;
                  }
                }
              }
            }
            while (v57 - v54 < v56 - v54);
            do
            {
              do
              {
                uint64_t v58 = *((void *)v48 - 3);
                v48 -= 3;
              }
              while (v58 == v23);
              id v59 = *(char **)(v52 + 280);
              unint64_t v60 = *(char **)(v52 + 288);
              long long v61 = v59;
              long long v62 = v59;
              if (v59 != v60)
              {
                do
                {
                  if (*(void *)v62 == v58) {
                    goto LABEL_70;
                  }
                  v62 += 8;
                }
                while (v62 != v60);
                long long v62 = *(char **)(v52 + 288);
LABEL_70:
                while (*(void *)v61 != v23)
                {
                  v61 += 8;
                  if (v61 == v60)
                  {
                    long long v61 = *(char **)(v52 + 288);
                    break;
                  }
                }
              }
            }
            while (v62 - v59 >= v61 - v59);
          }
          while (v13 < (unint64_t)v48);
        }
        __n128 v63 = (long long *)(v13 - 48);
        if (v13 - 48 != a1)
        {
          long long v64 = *v63;
          long long v65 = *(_OWORD *)(v13 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
          *(_OWORD *)a1 = v64;
          *(_OWORD *)(a1 + 16) = v65;
        }
        *__n128 v63 = v234;
        *(void *)(v13 - 32) = v240;
        *(void *)(v13 - 24) = v23;
        *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v231 + 7);
        *(void *)(v13 - 16) = v231;
        if (v30 >= (unint64_t)v37) {
          break;
        }
LABEL_80:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_SampleRemainder*,false>(a1, v13 - 48, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_SampleRemainder*>(a1, v13 - 48, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_SampleRemainder*>(v13, (uint64_t)a2, a3))
      {
        break;
      }
      if (!v66) {
        goto LABEL_80;
      }
    }
    a2 = (long long *)(v13 - 48);
    if (!v66) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 - 24);
      uint64_t v9 = *(void *)(a1 + 24);
      if (v8 == v9) {
        return result;
      }
      id v10 = *(char **)(*(void *)a3 + 280);
      double v11 = *(char **)(*(void *)a3 + 288);
      unint64_t v12 = v10;
      unint64_t v13 = v10;
      if (v10 == v11) {
        goto LABEL_10;
      }
      do
      {
        if (*(void *)v13 == v8) {
          goto LABEL_7;
        }
        v13 += 8;
      }
      while (v13 != v11);
      unint64_t v13 = *(char **)(*(void *)a3 + 288);
      do
      {
LABEL_7:
        if (*(void *)v12 == v9) {
          goto LABEL_10;
        }
        v12 += 8;
      }
      while (v12 != v11);
      unint64_t v12 = *(char **)(*(void *)a3 + 288);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        uint64_t v14 = (long long *)(a2 - 48);
        long long v15 = *(_OWORD *)a1;
        *(_OWORD *)float v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        long long v16 = *(_OWORD *)(a2 - 21);
        long long v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *uint64_t v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(long long *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), a3);
      uint64_t v19 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      int v20 = 0;
      break;
  }
  while (1)
  {
    uint64_t v21 = *(void *)(v19 + 24);
    uint64_t v22 = *(void *)(v18 + 24);
    if (v21 != v22)
    {
      uint64_t v23 = *(char **)(*(void *)a3 + 280);
      uint64_t v24 = *(char **)(*(void *)a3 + 288);
      uint64_t v25 = v23;
      uint8x8_t v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(void *)v26 == v21) {
            goto LABEL_19;
          }
          v26 += 8;
        }
        while (v26 != v24);
        uint8x8_t v26 = *(char **)(*(void *)a3 + 288);
LABEL_19:
        while (*(void *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            uint64_t v25 = *(char **)(*(void *)a3 + 288);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        long long v34 = *(_OWORD *)v19;
        uint64_t v36 = *(void *)(v19 + 16);
        long long v37 = *(_OWORD *)(v19 + 32);
        uint64_t v27 = v19;
        while (1)
        {
          long long v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1) {
            break;
          }
          uint64_t v27 = v18;
          uint64_t v29 = *(void *)(v18 - 24);
          if (v21 != v29)
          {
            unint64_t v30 = *(char **)(*(void *)a3 + 280);
            unint64_t v31 = *(char **)(*(void *)a3 + 288);
            uint64_t v32 = v30;
            uint64_t v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(void *)v33 == v21) {
                  goto LABEL_30;
                }
                v33 += 8;
              }
              while (v33 != v31);
              uint64_t v33 = *(char **)(*(void *)a3 + 288);
LABEL_30:
              while (*(void *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  uint64_t v32 = *(char **)(*(void *)a3 + 288);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30) {
              continue;
            }
          }
          goto LABEL_36;
        }
        uint64_t v27 = a1;
LABEL_36:
        *(_OWORD *)uint64_t v27 = v34;
        *(void *)(v27 + 16) = v36;
        *(void *)(v27 + 24) = v21;
        *(void *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8) {
          return v19 + 48 == a2;
        }
      }
    }
    uint64_t v18 = v19;
    v19 += 48;
    if (v19 == a2) {
      return 1;
    }
  }
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPresence> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPresence> const&)#1}>,HDStatisticsPresence const& ()(HDStatisticsRelative<HDStatisticsPresence> const&)>::~__func()
{
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPresence> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPresence> const&)#1}>,HDStatisticsPresence const& ()(HDStatisticsRelative<HDStatisticsPresence> const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F1726510;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPresence> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPresence> const&)#1}>,HDStatisticsPresence const& ()(HDStatisticsRelative<HDStatisticsPresence> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1726510;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPresence> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPresence> const&)#1}>,HDStatisticsPresence const& ()(HDStatisticsRelative<HDStatisticsPresence> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPresence> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPresence> const&)#1}>,HDStatisticsPresence const& ()(HDStatisticsRelative<HDStatisticsPresence> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPresence> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPresence> const&)#1}>,HDStatisticsPresence const& ()(HDStatisticsRelative<HDStatisticsPresence> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsPresence const& ()(HDStatisticsRelative<HDStatisticsPresence> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 576))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a4, 3, @"Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date");
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_configureForStartTime(a1);
  }
  double v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(void *)(a1 + 40) && a3) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_advanceToTime(a1, v8);
    }
    HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPresence>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    uint64_t v9 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    uint64_t v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v9, a4);
  }
  return v10;
}

void sub_1BD166ED4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_advanceToTime(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 128) <= a2)
  {
    uint64_t v4 = a1 + 112;
    uint64_t v5 = a1 + 120;
    do
    {
      uint64_t v6 = *(void *)(a1 + 552);
      uint64_t v7 = *(void *)(a1 + 544);
      if (v6 == v7)
      {
        uint64_t v22 = 0;
        long long v15 = *(void **)(a1 + 40);
        long long v16 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a2];
        double v8 = [v15 dateIntervalContainingDate:v16 index:&v22];

        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v17 = v22;
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v19 = v18;
        int v20 = [v8 endDate];
        [v20 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPresence>>::resetToBucket(v4, v17, v19, v21);
      }
      else
      {
        double v8 = [*(id *)(a1 + 40) dateIntervalAtIndex:*(void *)(a1 + 112) + 1];
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v12 = v11;
        unint64_t v13 = [v8 endDate];
        [v13 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPresence>>::advanceBucket(v4, v12, v14);
      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_didChangeBucket(a1, v9);
      if (v6 != v7) {
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_notifyForCurrentBucket(a1);
      }
    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1BD1670E0(_Unwind_Exception *exception_object)
{
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPresence>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a1 + 8;
  double v6 = *(double *)a2;
  double v7 = *(double *)(a2 + 8);
  double v8 = *(double *)(a2 + 16);
  uint64_t v9 = *(uint64_t **)(a2 + 24);
  unsigned __int8 v10 = *(unsigned char *)(a2 + 32);
  char v11 = *(unsigned char *)(a2 + 33);
  double v12 = *(double *)(a1 + 8) - v7;
  int v13 = v10;
  unint64_t v14 = (unint64_t)v9;
  char v15 = v11;
  double v16 = v8;
  double v17 = v7;
  double v18 = *(double *)a2;
  if (v12 >= 0.01)
  {
    if (v8 - v7 - v12 >= 0.01)
    {
      int v13 = *(unsigned __int8 *)(a2 + 32);
      double v18 = v6 - v6 * (v12 / (v8 - v7));
      unint64_t v14 = *(void *)(a2 + 24);
      char v15 = *(unsigned char *)(a2 + 33);
      double v16 = *(double *)(a2 + 16);
      double v17 = *(double *)(a1 + 8);
    }
    else
    {
      int v13 = 0;
      unint64_t v14 = 0;
      char v15 = 0;
      double v16 = 0.0;
      double v17 = 0.0;
      double v18 = 0.0;
    }
  }
  double v19 = *(double *)(a1 + 16);
  double v20 = v19 - v17;
  double v21 = v16 - v17;
  double v22 = v16 - v17 - (v19 - v17);
  if (*(_DWORD *)(a1 + 36))
  {
    if (v20 >= 0.01)
    {
      if (v22 >= 0.01)
      {
LABEL_24:
        double v25 = v16;
        unint64_t v68 = v14;
        double v24 = v18 - v18 * (v20 / v21);
        int v23 = v13;
        char v69 = v15;
        double v16 = *(double *)(a1 + 16);
        double v18 = v18 * (v20 / v21);
        if (!v13) {
          goto LABEL_25;
        }
        goto LABEL_11;
      }
LABEL_10:
      unint64_t v68 = 0;
      int v23 = 0;
      char v69 = 0;
      double v24 = 0.0;
      double v19 = 0.0;
      double v25 = 0.0;
      if (!v13)
      {
LABEL_25:
        char v15 = v69;
        goto LABEL_63;
      }
LABEL_11:
      double v66 = v17;
      double v67 = v16;
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 248, v14, v14);
      unint64_t v26 = *(void *)(a1 + 112);
      if (v26 == *(void *)(a1 + 104) && *(uint64_t *)(a1 + 136) <= 0)
      {
        v31.f64[1] = *(float64_t *)(a1 + 16);
        double v28 = v66;
        double v27 = v67;
        v31.f64[0] = v66;
        v32.f64[0] = *(float64_t *)(a1 + 8);
        v32.f64[1] = v67;
        int8x16_t v33 = (int8x16_t)vcgtq_f64(v32, v31);
        v32.f64[0] = v66;
        *(int8x16_t *)(a1 + 48) = vbslq_s8(v33, *(int8x16_t *)(a1 + 8), (int8x16_t)v32);
      }
      else
      {
        double v28 = v66;
        double v27 = v67;
        if (v66 < *(double *)(a1 + 48))
        {
          double v29 = *(double *)(a1 + 8);
          if (v66 >= v29) {
            double v29 = v66;
          }
          *(double *)(a1 + 48) = v29;
        }
        if (v67 > *(double *)(a1 + 56))
        {
          double v30 = *(double *)(a1 + 16);
          if (v30 >= v67) {
            double v30 = v67;
          }
          *(double *)(a1 + 56) = v30;
        }
      }
      if (*(unsigned char *)(a1 + 32))
      {
        double v34 = *(double *)(a1 + 64);
        if (v28 < v34) {
          double v34 = v28;
        }
        *(double *)(a1 + 64) = v34;
      }
      if (a3 && v28 < *(double *)(a1 + 16))
      {
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_mergeThroughTime(v5, v28);
        double v28 = v66;
        double v27 = v67;
        unint64_t v26 = *(void *)(a1 + 112);
      }
      unint64_t v35 = *(void *)(a1 + 120);
      if (v26 >= v35)
      {
        uint64_t v37 = *(void *)(a1 + 104);
        unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - v37) >> 4);
        unint64_t v39 = v38 + 1;
        if (v38 + 1 > 0x555555555555555) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - v37) >> 4);
        if (2 * v40 > v39) {
          unint64_t v39 = 2 * v40;
        }
        if (v40 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v41 = 0x555555555555555;
        }
        else {
          unint64_t v41 = v39;
        }
        if (v41)
        {
          unint64_t v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v41);
          double v28 = v66;
          double v27 = v67;
        }
        else
        {
          uint64_t v42 = 0;
        }
        unint64_t v43 = v41 + 48 * v38;
        unint64_t v44 = v41 + 48 * v42;
        *(double *)unint64_t v43 = v18;
        *(double *)(v43 + 8) = v28;
        *(double *)(v43 + 16) = v27;
        *(void *)(v43 + 24) = v14;
        *(unsigned char *)(v43 + 32) = v13;
        *(unsigned char *)(v43 + 33) = v15;
        *(_WORD *)(v43 + 40) = 0;
        *(unsigned char *)(v43 + 42) = 0;
        unint64_t v36 = v43 + 48;
        long long v46 = *(char **)(a1 + 104);
        uint8x8_t v45 = *(char **)(a1 + 112);
        if (v45 == v46)
        {
          char v15 = v69;
        }
        else
        {
          char v15 = v69;
          do
          {
            long long v47 = *((_OWORD *)v45 - 3);
            long long v48 = *((_OWORD *)v45 - 2);
            *(_OWORD *)(v43 - 21) = *(_OWORD *)(v45 - 21);
            *(_OWORD *)(v43 - 48) = v47;
            *(_OWORD *)(v43 - 32) = v48;
            v43 -= 48;
            v45 -= 48;
          }
          while (v45 != v46);
          uint8x8_t v45 = *(char **)(a1 + 104);
        }
        *(void *)(a1 + 104) = v43;
        *(void *)(a1 + 112) = v36;
        *(void *)(a1 + 120) = v44;
        if (v45) {
          operator delete(v45);
        }
      }
      else
      {
        *(double *)unint64_t v26 = v18;
        *(double *)(v26 + 8) = v28;
        *(double *)(v26 + 16) = v27;
        *(void *)(v26 + 24) = v14;
        *(unsigned char *)(v26 + 32) = v13;
        *(unsigned char *)(v26 + 33) = v15;
        *(_WORD *)(v26 + 40) = 0;
        unint64_t v36 = v26 + 48;
        *(unsigned char *)(v26 + 42) = 0;
        char v15 = v69;
      }
      *(void *)(a1 + 112) = v36;
      if (!*(unsigned char *)(a1 + 216) || *(double *)(a1 + 192) <= v7)
      {
        *(double *)(a1 + 184) = v6;
        *(double *)(a1 + 192) = v7;
        *(double *)(a1 + 200) = v8;
        *(void *)(a1 + 208) = v9;
        *(unsigned char *)(a1 + 216) = v10;
        *(unsigned char *)(a1 + 217) = v11;
        if (!*(unsigned char *)(a1 + 176) || *(double *)(a1 + 152) <= v7)
        {
          *(double *)(a1 + 144) = v6;
          *(double *)(a1 + 152) = v7;
          *(double *)(a1 + 160) = v8;
          *(void *)(a1 + 168) = v9;
          *(unsigned char *)(a1 + 176) = v10;
          *(unsigned char *)(a1 + 177) = v11;
        }
      }
      if (*(unsigned char *)(a1 + 33))
      {
        unint64_t v49 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_canonicalSourceIDForSourceID(v5, v14);
        long long v50 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_statisticsForSource(v5, v49);
        if (!*((unsigned char *)v50 + 88) || *((double *)v50 + 8) <= v7)
        {
          *((double *)v50 + 7) = v6;
          *((double *)v50 + 8) = v7;
          *((double *)v50 + 9) = v8;
          v50[10] = v9;
          *((unsigned char *)v50 + 88) = v10;
          *((unsigned char *)v50 + 89) = v11;
          if (!*((unsigned char *)v50 + 48) || *((double *)v50 + 3) <= v7)
          {
            *((double *)v50 + 2) = v6;
            *((double *)v50 + 3) = v7;
            *((double *)v50 + 4) = v8;
            v50[5] = v9;
            *((unsigned char *)v50 + 48) = v10;
            *((unsigned char *)v50 + 49) = v11;
          }
        }
      }
LABEL_63:
      unint64_t v14 = v68;
      if (!v23) {
        return;
      }
      goto LABEL_64;
    }
  }
  else
  {
    if (v22 < 0.01) {
      goto LABEL_10;
    }
    if (v20 >= 0.01) {
      goto LABEL_24;
    }
  }
  LOBYTE(v23) = v13;
  double v25 = v16;
  double v19 = v17;
  double v24 = v18;
  if (!v13) {
    return;
  }
LABEL_64:
  unint64_t v51 = *(void *)(a1 + 440);
  unint64_t v52 = *(void *)(a1 + 448);
  if (v51 >= v52)
  {
    uint64_t v54 = *(void *)(a1 + 432);
    unint64_t v55 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v51 - v54) >> 3);
    unint64_t v56 = v55 + 1;
    if (v55 + 1 > 0x666666666666666) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v57 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v52 - v54) >> 3);
    if (2 * v57 > v56) {
      unint64_t v56 = 2 * v57;
    }
    if (v57 >= 0x333333333333333) {
      unint64_t v58 = 0x666666666666666;
    }
    else {
      unint64_t v58 = v56;
    }
    if (v58) {
      unint64_t v58 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v58);
    }
    else {
      uint64_t v59 = 0;
    }
    unint64_t v60 = v58 + 40 * v55;
    unint64_t v61 = v58 + 40 * v59;
    *(double *)unint64_t v60 = v24;
    *(double *)(v60 + 8) = v19;
    *(double *)(v60 + 16) = v25;
    *(void *)(v60 + 24) = v14;
    *(unsigned char *)(v60 + 32) = v23;
    *(unsigned char *)(v60 + 33) = v15;
    unint64_t v53 = v60 + 40;
    __n128 v63 = *(char **)(a1 + 432);
    long long v62 = *(char **)(a1 + 440);
    if (v62 != v63)
    {
      do
      {
        long long v64 = *(_OWORD *)(v62 - 40);
        long long v65 = *(_OWORD *)(v62 - 24);
        *(_WORD *)(v60 - 8) = *((_WORD *)v62 - 4);
        *(_OWORD *)(v60 - 24) = v65;
        *(_OWORD *)(v60 - 40) = v64;
        v60 -= 40;
        v62 -= 40;
      }
      while (v62 != v63);
      long long v62 = *(char **)(a1 + 432);
    }
    *(void *)(a1 + 432) = v60;
    *(void *)(a1 + 440) = v53;
    *(void *)(a1 + 448) = v61;
    if (v62) {
      operator delete(v62);
    }
  }
  else
  {
    *(double *)unint64_t v51 = v24;
    *(double *)(v51 + 8) = v19;
    *(double *)(v51 + 16) = v25;
    *(void *)(v51 + 24) = v14;
    *(unsigned char *)(v51 + 32) = v23;
    unint64_t v53 = v51 + 40;
    *(unsigned char *)(v51 + 33) = v15;
  }
  *(void *)(a1 + 440) = v53;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_notifyForCurrentBucket(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 578))
  {
    *(unsigned char *)(a1 + 580) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 580) = 0;
    uint64_t v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      uint64_t v4 = v2;
      int v3 = (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      if (v3) {
        v4[2](v4, v3);
      }

      uint64_t v2 = v4;
    }
  }
}

void sub_1BD167754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPresence>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  uint64_t v9 = 0;
  unsigned __int8 v10 = 0;
  uint64_t v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 432), *(void *)(a1 + 440), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 440) - *(void *)(a1 + 432)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPresence>>::resetToBucket(a1, *(void *)a1 + 1, a2, a3);
  double v6 = v9;
  double v7 = v10;
  if (v9 != v10)
  {
    uint64_t v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPresence>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BD167850(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPresence>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8 = a1 + 40;
  objc_storeStrong((id *)(a1 + 456), *(id *)(a1 + 40));
  *(double *)(v8 - 32) = a3;
  *(double *)(v8 - 24) = a4;
  *(double *)(v8 + 24) = a3;
  *(void *)(v8 + 72) = *(void *)(v8 + 64);
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  if (*(void *)(v8 + 200))
  {
    uint64_t v9 = *(void *)(a1 + 232);
    unsigned __int8 v10 = *(void **)(a1 + 224);
    *(void *)(a1 + 224) = a1 + 232;
    *(void *)(v9 + 16) = 0;
    *(void *)(a1 + 232) = 0;
    *(void *)(a1 + 240) = 0;
    if (v10[1]) {
      uint64_t v11 = (void *)v10[1];
    }
    else {
      uint64_t v11 = v10;
    }
    if (v11)
    {
      double v12 = (void *)v11[2];
      if (v12)
      {
        int v13 = (void *)*v12;
        if ((void *)*v12 == v11)
        {
          void *v12 = 0;
          while (1)
          {
            char v15 = (void *)v12[1];
            if (!v15) {
              break;
            }
            do
            {
              double v12 = v15;
              char v15 = (void *)*v15;
            }
            while (v15);
          }
        }
        else
        {
          for (v12[1] = 0; v13; int v13 = (void *)v12[1])
          {
            do
            {
              double v12 = v13;
              int v13 = (void *)*v13;
            }
            while (v13);
          }
        }
        std::__tree<long>::destroy(v11);
        for (uint64_t i = (void *)v12[2]; i; uint64_t i = (void *)i[2])
          double v12 = i;
        uint64_t v11 = v12;
      }
    }
    std::__tree<long>::destroy(v11);
  }
  objc_storeStrong((id *)v8, *(id *)(a1 + 456));
  *(void *)(a1 + 440) = *(void *)(a1 + 432);
  *(void *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 580))
  {
    if (v3)
    {
      id v6 = v3;
      uint64_t v4 = _Block_copy(*(const void **)(a1 + 96));
      uint64_t v5 = v4;
      if (v4) {
        (*((void (**)(void *, id))v4 + 2))(v4, v6);
      }

      id v3 = v6;
    }
    *(unsigned char *)(a1 + 580) = 0;
  }
}

void sub_1BD167A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsPresenceEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 startDate];
  id v6 = [v4 startDate];
  uint64_t v7 = [v5 compare:v6];

  return v7;
}

void sub_1BD167A98(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_primitiveInvalidateInterval(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 13);
  if (WeakRetained)
  {
    if (v5
      && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_currentBucketInterval((uint64_t)a1),
          (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v8 = [v5 endDate];
      uint64_t v9 = [v7 startDate];
      if (objc_msgSend(v8, "hk_isAfterDate:", v9))
      {
        unsigned __int8 v10 = [v5 startDate];
        uint64_t v11 = [v7 endDate];
        char v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);
      }
      else
      {
        char v12 = 0;
      }

      int v13 = _Block_copy(a1[12]);
      if ((v12 & 1) == 0) {
        operator new();
      }
    }
    else
    {
      int v13 = _Block_copy(a1[12]);
    }
    *((unsigned char *)a1 + 576) = 1;
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsPresenceEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
    v27[3] = &unk_1E6308FF8;
    id v15 = v5;
    id v28 = v15;
    id v16 = v13;
    id v29 = v16;
    (*((void (**)(id *, void *))*a1 + 9))(a1, v27);
    if (v5)
    {
      double v17 = [v15 startDate];
      [v17 timeIntervalSinceReferenceDate];
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_configureForStartTime((uint64_t)a1);
    }
    else
    {
      (*((void (**)(id *))*a1 + 4))(a1);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsPresenceEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
    v21[3] = &unk_1E6309060;
    double v24 = a1;
    id v5 = v15;
    char v26 = 1;
    id v22 = v5;
    double v25 = a1;
    id v23 = WeakRetained;
    uint64_t v14 = (*((uint64_t (**)(id *, void *, uint64_t))*a1 + 14))(a1, v21, a3);
    double v18 = _Block_copy(v16);
    id v19 = a1[12];
    a1[12] = v18;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to invalidate interval: no data source available.");
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1BD167EE8(_Unwind_Exception *a1)
{
  MEMORY[0x1C187B8A0](v4, 0x10F1C40D05041EALL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsPresenceEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_11;
  }
  id v3 = [v10 endDate];
  uint64_t v4 = [*(id *)(a1 + 32) startDate];
  char v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    id v6 = [v10 startDate];
    uint64_t v7 = [*(id *)(a1 + 32) endDate];
    char v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_11:
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9) {
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
      }
    }
  }
}

void sub_1BD1680CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsPresenceEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = [*(id *)(a1 + 32) startDate];
  [v5 timeIntervalSinceReferenceDate];
  uint64_t v7 = v6;

  char v8 = [*(id *)(a1 + 32) endDate];
  [v8 timeIntervalSinceReferenceDate];
  uint64_t v10 = v9;

  uint64_t v11 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  uint64_t v13 = *(void *)(a1 + 32);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsPresenceEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  char v32 = *(unsigned char *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  uint64_t v31 = *(void *)(a1 + 56);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsPresenceEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  void v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  uint64_t v14 = [v11 collectionCalculator:WeakRetained queryForInterval:v13 error:a2 sampleHandler:v30 mergeHandler:v29];

  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15 != v4)
    {
      id v16 = [*(id *)(a1 + 32) endDate];
      [v16 timeIntervalSinceReferenceDate];
      if (*(void *)(v15 + 40))
      {
        double v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          id v19 = [*(id *)(v15 + 40) dateIntervalAtIndex:*(void *)(v15 + 112) + 1];
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          double v20 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_statisticsFromFinishedBucket(v15, v15 + 120);
          double v21 = [v19 startDate];
          [v21 timeIntervalSinceReferenceDate];
          double v23 = v22;
          double v24 = [v19 endDate];
          [v24 timeIntervalSinceReferenceDate];
          HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPresence>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            char v26 = _Block_copy(*(const void **)(v15 + 96));
            double v27 = v26;
            if (v26) {
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);
            }
          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_didChangeBucket(v15, 0);
        }
      }
    }
  }
  return v14;
}

void sub_1BD168378(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsPresenceEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7 = *(double *)(a1 + 32) - a6;
  if (v7 >= 0.01)
  {
    double v9 = a7 - a6;
    if (v9 - v7 >= 0.01)
    {
      a5 = a5 - v7 / v9 * a5;
      int v8 = 1;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      int v8 = 0;
      a5 = 0.0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    int v8 = 1;
  }
  *(double *)uint64_t v13 = a5;
  *(double *)&v13[1] = a6;
  double v14 = a7;
  uint64_t v15 = a2;
  char v16 = v8;
  char v17 = 0;
  if (*(unsigned char *)(a1 + 56))
  {
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)v13, a3, a4);
    }
  }
  else
  {
    double v11 = *(double *)(a1 + 40) - a6;
    if (v11 >= 0.01)
    {
      double v12 = a7 - a6;
      if (v12 - v11 >= 0.01)
      {
        a5 = a5 * (v11 / v12);
        a7 = *(double *)(a1 + 40);
      }
    }
    else
    {
      int v8 = 0;
    }
    *(double *)uint64_t v13 = a5;
    double v14 = a7;
    char v16 = v8;
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)v13, a3, a4);
    }
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsPresenceEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 576)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_configureForStartTime(a1);
  }
  if (*(void *)(a1 + 40)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_advanceToTime(a1, a2);
  }
  if (*(double *)(a1 + 128) > a2)
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_mergeThroughTime(a1 + 120, a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 32) < *(double *)(v10 + 8))
                {
                  uint64_t v129 = *(void *)(v10 + 32);
                  long long v113 = *(_OWORD *)v10;
                  long long v121 = *(_OWORD *)(v10 + 16);
                  long long v52 = *(_OWORD *)(a2 - 40);
                  long long v53 = *(_OWORD *)(a2 - 24);
                  *(_WORD *)(v10 + 32) = *(_WORD *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(_WORD *)(a2 - 8) = v129;
                  *(_OWORD *)(a2 - 24) = v121;
                  *(_OWORD *)(a2 - 40) = v113;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v10, (double *)(v10 + 40), (double *)(a2 - 40));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, v10 + 120, a2 - 40);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            uint64_t v54 = (void *)(v10 + 40);
            BOOL v56 = v10 == a2 || v54 == (void *)a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  uint64_t v59 = v54;
                  double v60 = *(double *)(v58 + 48);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *v54;
                    long long v114 = *(_OWORD *)(v58 + 56);
                    uint64_t v122 = *(void *)(v58 + 72);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      uint64_t v63 = v10 + v62;
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      *(_OWORD *)(v63 + 40) = *(_OWORD *)(v10 + v62);
                      *(_OWORD *)(v63 + 56) = v64;
                      *(_WORD *)(v63 + 72) = *(_WORD *)(v10 + v62 + 32);
                      if (!v62) {
                        break;
                      }
                      v62 -= 40;
                      if (v60 >= *(double *)(v63 - 32))
                      {
                        uint64_t v65 = v10 + v62 + 40;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = v114;
                    *(_WORD *)(v65 + 32) = v122;
                  }
                  uint64_t v54 = v59 + 5;
                  v57 += 40;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 5 != (void *)a2);
              }
            }
            else if (!v56)
            {
              do
              {
                uint64_t v98 = v54;
                double v99 = *(double *)(a1 + 48);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *v54;
                  long long v117 = *(_OWORD *)(a1 + 56);
                  uint64_t v125 = *(void *)(a1 + 72);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(_OWORD *)(v101 - 3);
                    *(_OWORD *)long long v101 = *(_OWORD *)(v101 - 5);
                    *((_OWORD *)v101 + 1) = v102;
                    *((_WORD *)v101 + 16) = *((_WORD *)v101 - 4);
                    double v103 = *((double *)v101 - 9);
                    v101 -= 5;
                  }
                  while (v99 < v103);
                  void *v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *((_WORD *)v101 + 16) = v125;
                  *((_OWORD *)v101 + 1) = v117;
                }
                v54 += 5;
                a1 = (unint64_t)v98;
              }
              while (v98 + 5 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 40 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v10 + 40 * v69 + 8) < *(double *)(v70 + 48))
                  {
                    v70 += 40;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  double v71 = *(double *)(v10 + 40 * v68 + 8);
                  if (*(double *)(v70 + 8) >= v71)
                  {
                    unint64_t v72 = v10 + 40 * v68;
                    uint64_t v73 = *(void *)v72;
                    uint64_t v123 = *(void *)(v72 + 32);
                    long long v115 = *(_OWORD *)(v72 + 16);
                    do
                    {
                      unint64_t v74 = v72;
                      unint64_t v72 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_WORD *)(v74 + 32) = *(_WORD *)(v70 + 32);
                      *(_OWORD *)unint64_t v74 = v75;
                      *(_OWORD *)(v74 + 16) = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 40 * v77;
                      uint64_t v78 = 2 * v69 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v10 + 40 * v77 + 8) < *(double *)(v70 + 48))
                      {
                        v70 += 40;
                        uint64_t v77 = v78;
                      }
                      uint64_t v69 = v77;
                    }
                    while (*(double *)(v70 + 8) >= v71);
                    *(void *)unint64_t v72 = v73;
                    *(double *)(v72 + 8) = v71;
                    *(_OWORD *)(v72 + 16) = v115;
                    *(_WORD *)(v72 + 32) = v123;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x28uLL;
              do
              {
                uint64_t v80 = 0;
                uint64_t v130 = *(void *)(v10 + 32);
                long long v116 = *(_OWORD *)v10;
                long long v124 = *(_OWORD *)(v10 + 16);
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = v81;
                  uint64_t v83 = v80 + 1;
                  v81 += 40 * (v80 + 1);
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v85 = v84 + 2;
                  if (v85 < v79 && *(double *)(v82 + 40 * v83 + 8) < *(double *)(v81 + 48))
                  {
                    v81 += 40;
                    uint64_t v80 = v85;
                  }
                  long long v86 = *(_OWORD *)v81;
                  long long v87 = *(_OWORD *)(v81 + 16);
                  *(_WORD *)(v82 + 32) = *(_WORD *)(v81 + 32);
                  *(_OWORD *)unint64_t v82 = v86;
                  *(_OWORD *)(v82 + 16) = v87;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 40;
                if (v81 == a2)
                {
                  *(_WORD *)(v81 + 32) = v130;
                  *(_OWORD *)unint64_t v81 = v116;
                  *(_OWORD *)(v81 + 16) = v124;
                }
                else
                {
                  long long v88 = *(_OWORD *)a2;
                  long long v89 = *(_OWORD *)(a2 + 16);
                  *(_WORD *)(v81 + 32) = *(_WORD *)(a2 + 32);
                  *(_OWORD *)unint64_t v81 = v88;
                  *(_OWORD *)(v81 + 16) = v89;
                  *(_WORD *)(a2 + 32) = v130;
                  *(_OWORD *)a2 = v116;
                  *(_OWORD *)(a2 + 16) = v124;
                  uint64_t v90 = v81 - v10 + 40;
                  if (v90 >= 41)
                  {
                    unint64_t v91 = (v90 / 0x28uLL - 2) >> 1;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v10 + 40 * v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      uint64_t v109 = *(void *)(v81 + 32);
                      long long v106 = *(_OWORD *)(v81 + 16);
                      do
                      {
                        unint64_t v94 = v81;
                        unint64_t v81 = v10 + 40 * v91;
                        long long v95 = *(_OWORD *)v81;
                        long long v96 = *(_OWORD *)(v81 + 16);
                        *(_WORD *)(v94 + 32) = *(_WORD *)(v81 + 32);
                        *(_OWORD *)unint64_t v94 = v95;
                        *(_OWORD *)(v94 + 16) = v96;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 40 * v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_WORD *)(v81 + 32) = v109;
                      *(_OWORD *)(v81 + 16) = v106;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40 * (v12 >> 1)), (double *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            char v16 = (double *)(a1 + 40 * v13 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40), v16, (double *)(a2 - 80));
            char v17 = (double *)(a1 + 40 + 8 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 80), v17, (double *)(a2 - 120));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v16, (double *)v14, v17);
            uint64_t v126 = *(void *)(a1 + 32);
            long long v110 = *(_OWORD *)a1;
            long long v118 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 16) = v19;
            *(_WORD *)(v14 + 32) = v126;
            *(_OWORD *)unint64_t v14 = v110;
            *(_OWORD *)(v14 + 16) = v118;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40 * (v12 >> 1)), (double *)a1, (double *)(a2 - 40));
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 32) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          long long v105 = *(_OWORD *)(a1 + 16);
          uint64_t v108 = *(void *)(a1 + 32);
          if (v20 >= *(double *)(a2 - 32))
          {
            unint64_t v41 = a1 + 40;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 40;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 40;
              double v40 = *(double *)(v39 + 48);
              v39 += 40;
            }
            while (v20 >= v40);
          }
          unint64_t v43 = a2;
          if (v10 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              unint64_t v43 = v44 - 40;
              double v45 = *(double *)(v44 - 32);
              v44 -= 40;
            }
            while (v20 < v45);
          }
          while (v10 < v43)
          {
            uint64_t v128 = *(void *)(v10 + 32);
            long long v112 = *(_OWORD *)v10;
            long long v120 = *(_OWORD *)(v10 + 16);
            long long v46 = *(_OWORD *)v43;
            long long v47 = *(_OWORD *)(v43 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v43 + 32);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(_WORD *)(v43 + 32) = v128;
            *(_OWORD *)unint64_t v43 = v112;
            *(_OWORD *)(v43 + 16) = v120;
            do
            {
              double v48 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *(double *)(v43 - 32);
              v43 -= 40;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 40);
            long long v51 = *(_OWORD *)(v10 - 24);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 40) = v38;
          *(double *)(v10 - 32) = v20;
          *(_WORD *)(v10 - 8) = v108;
          *(_OWORD *)(v10 - 24) = v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        long long v104 = *(_OWORD *)(a1 + 16);
        uint64_t v107 = *(void *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 48);
          v21 += 40;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        unint64_t v25 = a2;
        if (v21 == 40)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 40;
            double v29 = *(double *)(v28 - 32);
            v28 -= 40;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 40;
            double v27 = *(double *)(v25 - 32);
            v25 -= 40;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v127 = *(void *)(v10 + 32);
            long long v111 = *(_OWORD *)v10;
            long long v119 = *(_OWORD *)(v10 + 16);
            long long v31 = *(_OWORD *)v30;
            long long v32 = *(_OWORD *)(v30 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v30 + 32);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(_WORD *)(v30 + 32) = v127;
            *(_OWORD *)unint64_t v30 = v111;
            *(_OWORD *)(v30 + 16) = v119;
            do
            {
              double v33 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v33 < v20);
            do
            {
              double v34 = *(double *)(v30 - 32);
              v30 -= 40;
            }
            while (v34 >= v20);
          }
          while (v10 < v30);
        }
        if (v10 - 40 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 40);
          long long v36 = *(_OWORD *)(v10 - 24);
          *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 40) = v22;
        *(double *)(v10 - 32) = v20;
        *(_WORD *)(v10 - 8) = v107;
        *(_OWORD *)(v10 - 24) = v104;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 40;
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        __int16 v9 = *(_WORD *)(a2 - 8);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      uint64_t v16 = *(void *)v12;
      long long v21 = *(_OWORD *)(v12 + 16);
      uint64_t v22 = *(void *)(v12 + 32);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(void *)uint64_t v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsPresenceEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(void *a1, uint64_t a2)
{
  id v3 = (void *)a1[5];
  uint64_t v4 = a1[6];
  BOOL v5 = (void *)a1[4];
  uint64_t v6 = [v5 dateInterval];
  void v9[4] = v4;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsPresenceEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsPresenceEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  uint64_t v7 = [v3 collectionCalculator:v5 queryForInterval:v6 error:a2 sampleHandler:v10 mergeHandler:v9];

  return v7;
}

void sub_1BD169118(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsPresenceEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10 = *(void *)(a1 + 32);
  *(double *)int v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  char v15 = 1;
  uint64_t v11 = [MEMORY[0x1E4F1C9C8] distantFuture];
  [v11 timeIntervalSinceReferenceDate];
  BOOL v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1BD1691BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsPresenceEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
}

void HDStatisticsRelative<HDStatisticsPresence>::archive(uint64_t a1, int *a2)
{
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 112);
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F171B978;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  statistics::Statistics::makePrimaryStatistics(a1);
  HDStatisticsPresence::archive((HDStatisticsPresence *)(a2 + 2), (uint64_t)v6);
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v6);
  statistics::Statistics::~Statistics((statistics::Statistics *)v6);
  uint64_t v5 = *a2;
  *(_DWORD *)(a1 + 204) |= 0x100u;
  *(void *)(a1 + 136) = v5;
  statistics::Statistics::makeMostRecentDatum(a1);
  v6[0] = &unk_1F17206F8;
  int v10 = 127;
  int8x16_t v7 = vextq_s8(*(int8x16_t *)(a2 + 14), *(int8x16_t *)(a2 + 14), 8uLL);
  v6[1] = *((void *)a2 + 9);
  v6[2] = *((void *)a2 + 10);
  __int16 v8 = 0;
  char v9 = 0;
  statistics::RawQuantitySample::operator=(*v4, (uint64_t)v6);
  PB::Base::~Base((PB::Base *)v6);
}

void sub_1BD1692EC(_Unwind_Exception *a1)
{
  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsPresence>::unarchive(uint64_t a1, void *a2)
{
  int8x16_t v2 = 0uLL;
  *(_OWORD *)(a1 + 34) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_WORD *)(a1 + 88) = 0;
  uint64_t v3 = a2[16];
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 24);
    uint64_t v5 = *(void *)(v3 + 112);
    if (v5)
    {
      int8x16_t v2 = *(int8x16_t *)(v5 + 24);
      uint64_t v6 = *(void *)(v5 + 8);
      char v7 = 1;
      uint64_t v5 = *(void *)(v5 + 16);
    }
    else
    {
      char v7 = 0;
      uint64_t v6 = 0;
    }
    *(void *)(a1 + 8) = v4;
    int8x16_t v2 = vextq_s8(v2, v2, 8uLL);
    *(int8x16_t *)(a1 + 16) = v2;
    *(void *)(a1 + 32) = v6;
    *(void *)(a1 + 40) = v5;
    *(unsigned char *)(a1 + 48) = v7;
    *(unsigned char *)(a1 + 49) = 0;
  }
  *(_DWORD *)a1 = a2[17];
  uint64_t v8 = a2[14];
  if (v8)
  {
    v2.i64[0] = *(void *)(v8 + 8);
    uint64_t v9 = *(void *)(v8 + 16);
    *(int8x16_t *)(a1 + 56) = vextq_s8(*(int8x16_t *)(v8 + 24), *(int8x16_t *)(v8 + 24), 8uLL);
    *(void *)(a1 + 72) = v2.i64[0];
    *(void *)(a1 + 80) = v9;
    *(_WORD *)(a1 + 88) = 1;
  }
  return *(double *)v2.i64;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6 = a3;
  uint64_t v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = &unk_1F17265C0;
  double v9 = 900.0;
  if ((v6 & 0x10) == 0) {
    double v9 = 0.0;
  }
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(void *)(v8 + 104) = 0;
  *(void *)(v8 + 112) = 0;
  *(void *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsPresence>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_WORD *)(a1 + 528) = 1;
  *(unsigned char *)(a1 + 530) = 0;
  *(unsigned char *)(a1 + 532) = 0;
  *(void *)(a1 + 536) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(void *)(a1 + 576) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);

  JUMPOUT(0x1C187B8A0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1F17265C0;
  int8x16_t v2 = *(void **)(a1 + 560);
  if (v2)
  {
    *(void *)(a1 + 568) = v2;
    operator delete(v2);
  }

  uint64_t v3 = *(void **)(a1 + 496);
  if (v3)
  {
    *(void *)(a1 + 504) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsPresence>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(unsigned char *)(result + 528) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::setDateInterval(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 copy];
  uint64_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;

  uint64_t v5 = [v6 startDate];
  [v5 timeIntervalSinceReferenceDate];
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_configureForStartTime(a1);
}

void sub_1BD169534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(void *)(a1 + 40))
  {
    id v5 = v3;
    [v3 timeIntervalSinceReferenceDate];
    *(void *)(a1 + 536) = v4;
    id v3 = v5;
  }
}

void sub_1BD1695A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::setStatisticsConfiguration(id *a1, void *a2)
{
  objc_storeStrong(a1 + 68, a2);
  id v7 = a2;
  id v4 = a1[68];
  id v5 = a1[65];
  a1[65] = v4;
  id v6 = v4;

  objc_storeStrong(a1 + 19, a1[65]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (*(void *)(a1 + 40)) {
    return 1;
  }
  BOOL v7 = *(void *)(a1 + 224) == *(void *)(a1 + 216) && *(uint64_t *)(a1 + 240) < 1
    || HKIntervalMask<double>::firstDifference(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)a2, *(void *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (v7) {
    return 1;
  }
  double v9 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128);

  return v9(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::setStatisticsHandler(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 copy];
  id v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v3;
}

void sub_1BD169790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::dataSource(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));

  return WeakRetained;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::currentStatistics(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 528))
  {
    unint64_t v1 = 0;
  }
  else
  {
    HDStatisticsBucket<HDStatisticsPresence>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
    HDStatisticsBucket<HDStatisticsPresence>::_updateSourceOrder((uint64_t)v4);
    HDStatisticsBucket<HDStatisticsPresence>::_mergeThroughTime((uint64_t)v4, v5);
    unint64_t v1 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
    HDStatisticsBucket<HDStatisticsPresence>::~HDStatisticsBucket((uint64_t)v4);
  }

  return v1;
}

void sub_1BD169860(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HDStatisticsBucket<HDStatisticsPresence>::~HDStatisticsBucket((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(a1 + 64);
  BOOL v7 = v6;
  if (v6)
  {
    uint64_t v8 = [v6 startDate];
    [v8 timeIntervalSinceReferenceDate];
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    int v10 = [v7 endDate];
    [v10 timeIntervalSinceReferenceDate];
    double v12 = v11;
    double v13 = *(double *)(a2 + 8);

    if (v12 < v13) {
      goto LABEL_9;
    }
  }
  if (!*(unsigned char *)(a1 + 530))
  {
LABEL_11:
    uint64_t v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 529))
  {
LABEL_9:
    uint64_t v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(unsigned char *)(a1 + 531)) {
      goto LABEL_11;
    }
    unint64_t v17 = *(void *)(a1 + 568);
    unint64_t v18 = *(void *)(a1 + 576);
    if (v17 >= v18)
    {
      uint64_t v22 = *(void *)(a1 + 560);
      unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      unint64_t v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24) {
        unint64_t v24 = 2 * v25;
      }
      if (v25 >= 0x333333333333333) {
        unint64_t v26 = 0x666666666666666;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26) {
        unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      }
      else {
        uint64_t v27 = 0;
      }
      unint64_t v28 = v26 + 40 * v23;
      unint64_t v29 = v26 + 40 * v27;
      long long v30 = *(_OWORD *)a2;
      long long v31 = *(_OWORD *)(a2 + 16);
      *(void *)(v28 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      unint64_t v21 = v28 + 40;
      long long v32 = *(char **)(a1 + 568);
      double v33 = *(char **)(a1 + 560);
      if (v32 != v33)
      {
        do
        {
          long long v34 = *(_OWORD *)(v32 - 40);
          long long v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        long long v32 = *(char **)(a1 + 560);
      }
      *(void *)(a1 + 560) = v28;
      *(void *)(a1 + 568) = v21;
      *(void *)(a1 + 576) = v29;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      long long v19 = *(_OWORD *)a2;
      long long v20 = *(_OWORD *)(a2 + 16);
      *(void *)(v17 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      unint64_t v21 = v17 + 40;
    }
    *(void *)(a1 + 568) = v21;
    goto LABEL_9;
  }
  int v14 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
  uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1BD169AD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = v5;
  if (*(unsigned char *)(a1 + 530))
  {
    uint64_t v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 530) = 1;
  uint64_t v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    uint64_t v7 = 0;
    goto LABEL_82;
  }
  uint64_t v65 = v6;
  if (*(unsigned char *)(a1 + 529)) {
    goto LABEL_5;
  }
  double v9 = *(void **)(a1 + 552);
  if (!v9)
  {
    id v68 = 0;
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 40))
  {
LABEL_5:
    int v8 = 0;
    id v68 = 0;
    goto LABEL_29;
  }
  [v9 sortUsingComparator:&__block_literal_global_1069];
  id v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v10 = *(id *)(a1 + 552);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  if (!v11)
  {

    id v12 = 0;
    goto LABEL_27;
  }
  id v12 = 0;
  uint64_t v13 = *(void *)v70;
  do
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (*(void *)v70 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(id *)(*((void *)&v69 + 1) + 8 * i);
      BOOL v16 = v15;
      if (v12)
      {
        unint64_t v17 = [v15 startDate];
        unint64_t v18 = [v12 endDate];
        int v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          long long v20 = [v16 endDate];
          unint64_t v21 = [v12 endDate];
          int v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22) {
            goto LABEL_21;
          }
          id v23 = objc_alloc(MEMORY[0x1E4F28C18]);
          unint64_t v24 = [v12 startDate];
          unint64_t v25 = [v16 endDate];
          id v26 = (id)[v23 initWithStartDate:v24 endDate:v25];
        }
        else
        {
          [v68 addObject:v12];
          id v26 = v16;
        }
        id v12 = v26;
      }
      else
      {
        id v12 = v15;
      }
LABEL_21:
    }
    uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  }
  while (v11);

  if (v12) {
    [v68 addObject:v12];
  }
LABEL_27:

LABEL_28:
  int v8 = 1;
LABEL_29:
  uint64_t v27 = *(void **)(a1 + 552);
  *(void *)(a1 + 552) = 0;

  *(unsigned char *)(a1 + 529) = 0;
  if (!v8)
  {
    unint64_t v38 = *(void *)(a1 + 560);
    *(void *)(a1 + 576) = 0;
    *(void *)(a1 + 568) = 0;
    *(void *)(a1 + 560) = 0;
    unint64_t v39 = v38;
    goto LABEL_47;
  }
  unint64_t v28 = [v68 lastObject];
  if (v28)
  {
    unint64_t v29 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_currentBucketInterval(a1);
    long long v30 = [v29 endDate];
    long long v31 = [v28 endDate];
    int v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      double v33 = [v28 endDate];
      [v33 timeIntervalSinceReferenceDate];
      double v35 = v34;

      uint64_t v36 = *(void *)(a1 + 560);
      BOOL v37 = *(long long **)(a1 + 568);
      while ((long long *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((long long *)v36 != v37)
          {
            double v40 = (long long *)(v36 + 40);
            if ((long long *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  long long v41 = *v40;
                  long long v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)uint64_t v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                double v40 = (long long *)((char *)v40 + 40);
              }
              while (v40 != v37);
              BOOL v37 = *(long long **)(a1 + 568);
            }
          }
          if ((long long *)v36 != v37) {
            *(void *)(a1 + 568) = v36;
          }
          break;
        }
        v36 += 40;
      }
    }
  }
  unint64_t v38 = *(void *)(a1 + 560);
  unint64_t v39 = *(void *)(a1 + 568);
  *(void *)(a1 + 576) = 0;
  *(void *)(a1 + 560) = 0;
  *(void *)(a1 + 568) = 0;
  if (![v68 count]) {
    goto LABEL_60;
  }
LABEL_47:
  id v43 = v68;
  long long __p = (void *)v38;
  if (v43)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v44 = v43;
    uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v70;
      while (2)
      {
        for (uint64_t j = 0; j != v45; ++j)
        {
          if (*(void *)v70 != v46) {
            objc_enumerationMutation(v44);
          }
          id v48 = *(id *)(*((void *)&v69 + 1) + 8 * j);
          int v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_primitiveInvalidateInterval((id *)a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
        if (v45) {
          continue;
        }
        break;
      }
    }

LABEL_59:
    unint64_t v38 = (unint64_t)__p;
LABEL_60:
    unint64_t v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v51;
    }
    int v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    long long __p = (void *)v38;
    if (v39 != v38)
    {
      uint64_t v54 = v38;
      uint64_t v50 = v67;
      do
      {
        int v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_primitiveAddSample(a1, v54, 1, v50);
        int v53 = v55;
        v54 += 40;
        if (v54 == v39) {
          char v56 = 0;
        }
        else {
          char v56 = v55;
        }
        uint64_t v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_primitiveInvalidateInterval((id *)a1, 0, v67))goto LABEL_59; {
LABEL_70:
    }
    int v53 = 0;
  }
  if (*(void *)(a1 + 40) && *(void *)(a1 + 504) != *(void *)(a1 + 496))
  {
    do
    {
      uint64_t v57 = objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(void *)(a1 + 112) + 1, v50, v65);
      HDStatisticsBucket<HDStatisticsPresence>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsPresence>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      unint64_t v58 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_statisticsFromFinishedBucket(a1, a1 + 120);
      uint64_t v59 = [v57 startDate];
      [v59 timeIntervalSinceReferenceDate];
      double v61 = v60;
      uint64_t v62 = [v57 endDate];
      [v62 timeIntervalSinceReferenceDate];
      HDStatisticsCollectionEngine<HDStatisticsPresence>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_notifyForCurrentBucket(a1);
    }
    while (*(void *)(a1 + 504) != *(void *)(a1 + 496));
  }
  *(unsigned char *)(a1 + 530) = 0;
  if (__p) {
    operator delete(__p);
  }

  if (v53)
  {
    if (*(unsigned char *)(a1 + 532))
    {
      *(unsigned char *)(a1 + 532) = 0;
      id v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_notifyForCurrentBucket(a1);
      uint64_t v7 = 1;
      goto LABEL_82;
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v6 = v65;
LABEL_82:
  *(unsigned char *)(a1 + 530) = 0;
LABEL_83:

  return v7;
}

void sub_1BD16A1CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    *(unsigned char *)(v13 + 530) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::enableImmediateSampleInsertion(uint64_t result)
{
  *(unsigned char *)(result + 531) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(unsigned char *)(a1 + 530)) {
      goto LABEL_12;
    }
    uint64_t v7 = 0;
LABEL_14:
    uint64_t v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_primitiveInvalidateInterval((id *)a1, v7, a3);
    goto LABEL_15;
  }
  uint64_t v7 = [v6 dateIntervalForIntervalsContainingInterval:v5];

  if (!*(unsigned char *)(a1 + 530)) {
    goto LABEL_14;
  }
  if (!v7)
  {
LABEL_12:
    id v12 = *(void **)(a1 + 552);
    *(void *)(a1 + 552) = 0;

    uint64_t v7 = 0;
    uint64_t v11 = 1;
    *(unsigned char *)(a1 + 529) = 1;
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 529))
  {
    int v8 = *(void **)(a1 + 552);
    if (!v8)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      id v10 = *(void **)(a1 + 552);
      *(void *)(a1 + 552) = v9;

      int v8 = *(void **)(a1 + 552);
    }
    [v8 addObject:v7];
  }
  uint64_t v11 = 1;
LABEL_15:

  return v11;
}

void sub_1BD16A4CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    *(unsigned char *)(a1 + 528) = 1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsPresenceE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v9[3] = &unk_1E63043E8;
    uint64_t v12 = a1;
    id v10 = v5;
    id v11 = WeakRetained;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 112))(a1, v9, a3);
    if (v7 && *(unsigned char *)(a1 + 528) && !*(void *)(a1 + 40)) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_configureForStartTime(a1);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to query for initial statistics: no data source available.");
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1BD16A620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::reset(uint64_t result)
{
  *(unsigned char *)(result + 528) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 encodeBool:*(unsigned __int8 *)(a1 + 528) forKey:@"needs_config"];
  id v12 = v3;
  int v32 = &unk_1F1726FA0;
  double v33 = 0;
  int v38 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
  LOBYTE(v38) = 1;
  uint64_t v34 = v4;
  uint64_t v35 = 0;
  statistics::StatisticsEngine::makeCurrentBucket((uint64_t)&v32);
  uint64_t v13 = &unk_1F171B9C8;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  int v31 = 511;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 0;
  int8x16_t v14 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  uint64_t v5 = *(void *)(a1 + 136);
  char v29 = *(unsigned char *)(a1 + 144);
  char v30 = *(unsigned char *)(a1 + 145);
  BOOL v28 = *(_DWORD *)(a1 + 148) == 0;
  int8x16_t v15 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  uint64_t v7 = *(int8x16_t **)(a1 + 216);
  if (v7 != *(int8x16_t **)(a1 + 224))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v7, *v7, 8uLL);
    int8x16_t v40 = v7[1];
    char v43 = 0;
    HIBYTE(v42) = v7[2].i8[9];
    LOBYTE(v42) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>();
  }
  statistics::StatisticsBucket::makeStatistics((uint64_t)&v13);
  HDStatisticsPresence::archive((HDStatisticsPresence *)(a1 + 240), (uint64_t)&v39);
  statistics::Statistics::operator=(*((statistics **)&v22 + 1), (uint64_t)&v39);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v39);
  uint64_t v8 = *(void *)(a1 + 288);
  if (v8 != a1 + 296)
  {
    HDStatisticsPresence::archive((HDStatisticsPresence *)(v8 + 40), (uint64_t)&v39);
    uint64_t v9 = *(void *)(v8 + 32);
    v46 |= 0x200u;
    uint64_t v45 = v9;
    PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>();
  }
  id v10 = *(int8x16_t **)(a1 + 184);
  if (v10 != *(int8x16_t **)(a1 + 192))
  {
    unint64_t v39 = (char *)&unk_1F1727540;
    v41.i32[0] = 3;
    int8x16_t v40 = vextq_s8(*v10, *v10, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>();
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v13);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v13);
  id v11 = *(int8x16_t **)(a1 + 496);
  if (v11 != *(int8x16_t **)(a1 + 504))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v11, *v11, 8uLL);
    int8x16_t v40 = v11[1];
    __int16 v42 = 0;
    char v43 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>();
  }
  PB::Writer::Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v39);
  [v12 encodeBytes:v40.i64[0] length:&v39[-v40.i64[0]] forKey:@"hdsce_archived_representation"];
  PB::Writer::~Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);
}

void sub_1BD16AA1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v65 = a2;
  *(unsigned char *)(a1 + 528) = [v65 decodeBoolForKey:@"needs_config"];
  id v3 = v65;
  HDStatisticsBucket<HDStatisticsPresence>::HDStatisticsBucket((uint64_t)&v70.n128_i64[1], 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)long long v71 = 0u;
  long long v72 = 0u;
  v110[0] = 0;
  id v68 = v3;
  PB::Reader::Reader((PB::Reader *)v109, (const unsigned __int8 *)[v68 decodeBytesForKey:@"hdsce_archived_representation" returnedLength:v110]);
  long long v102 = &unk_1F1726FA0;
  uint64_t v103 = 0;
  uint64_t v106 = 0;
  uint64_t v107 = 0;
  uint64_t v105 = 0;
  int v108 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v102, (PB::Reader *)v109);
  uint64_t v67 = a1;
  v70.n128_u64[0] = v104;
  if (v103)
  {
    uint64_t v76 = 0;
    memset(v79, 0, sizeof(v79));
    uint64_t v87 = 0;
    *(_OWORD *)long long __p = 0u;
    long long v81 = 0u;
    int8x16_t v82 = 0u;
    long long v83 = 0u;
    __int16 v84 = 0;
    long long v86 = 0;
    int64_t v85 = &v86;
    long long v88 = 0u;
    long long v89 = 0u;
    int v90 = 1065353216;
    long long v93 = 0u;
    uint64_t v94 = 0;
    long long v92 = 0u;
    long long v91 = 0u;
    int v95 = 1065353216;
    long long v96 = 0u;
    long long v97 = 0u;
    int v98 = 1065353216;
    long long v99 = 0u;
    long long v100 = 0u;
    int v101 = 1065353216;
    int8x16_t v73 = vextq_s8(*(int8x16_t *)(v103 + 8), *(int8x16_t *)(v103 + 8), 8uLL);
    uint64_t v4 = *(void *)(v103 + 72);
    uint64_t v74 = *(void *)(v103 + 64);
    __int16 v75 = *(_WORD *)(v103 + 185);
    int8x16_t v77 = vextq_s8(*(int8x16_t *)(v103 + 24), *(int8x16_t *)(v103 + 24), 8uLL);
    uint64_t v78 = v4;
    uint64_t v5 = *(void *)(v103 + 80);
    uint64_t v6 = *(void *)(v103 + 88);
    int64_t v66 = (void *)v103;
    if (v5 != v6)
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(*(void *)v5 + 24);
        uint64_t v9 = *(void *)(*(void *)v5 + 32);
        uint64_t v10 = *(void *)(*(void *)v5 + 8);
        uint64_t v11 = *(void *)(*(void *)v5 + 16);
        char v12 = *(unsigned char *)(*(void *)v5 + 41);
        char v13 = *(unsigned char *)(*(void *)v5 + 40);
        if ((unint64_t)v7 >= (unint64_t)v81)
        {
          int8x16_t v14 = (char *)__p[0];
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (char *)__p[0]) >> 4);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v81 - (unint64_t)__p[0]) >> 4) > v16) {
            unint64_t v16 = 0x5555555555555556 * ((uint64_t)(v81 - (unint64_t)__p[0]) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v81 - (unint64_t)__p[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v17 = 0x555555555555555;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17)
          {
            unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            uint64_t v7 = (char *)__p[1];
            int8x16_t v14 = (char *)__p[0];
          }
          else
          {
            uint64_t v18 = 0;
          }
          unint64_t v19 = v17 + 48 * v15;
          *(void *)unint64_t v19 = v9;
          *(void *)(v19 + 8) = v8;
          *(void *)(v19 + 16) = v10;
          *(void *)(v19 + 24) = v11;
          *(_WORD *)(v19 + 32) = 1;
          *(unsigned char *)(v19 + 40) = 0;
          *(unsigned char *)(v19 + 41) = v12;
          *(unsigned char *)(v19 + 42) = v13;
          uint64_t v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              long long v21 = *((_OWORD *)v7 - 3);
              long long v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            int8x16_t v14 = (char *)__p[0];
          }
          uint64_t v7 = (char *)(v19 + 48);
          __p[0] = v20;
          __p[1] = (void *)(v19 + 48);
          *(void *)&long long v81 = v17 + 48 * v18;
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)uint64_t v7 = v9;
          *((void *)v7 + 1) = v8;
          *((void *)v7 + 2) = v10;
          *((void *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        __p[1] = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    uint64_t v23 = v66[13];
    if (v23)
    {
      uint64_t v24 = *(void *)(v23 + 24);
      uint64_t v25 = *(void *)(v23 + 112);
      if (v25)
      {
        int8x16_t v26 = *(int8x16_t *)(v25 + 24);
        uint64_t v27 = *(void *)(v25 + 8);
        unsigned __int8 v28 = 1;
        uint64_t v25 = *(void *)(v25 + 16);
      }
      else
      {
        unsigned __int8 v28 = 0;
        int8x16_t v26 = 0uLL;
        uint64_t v27 = 0;
      }
      *((void *)&v81 + 1) = v24;
      int8x16_t v82 = vextq_s8(v26, v26, 8uLL);
      *(void *)&long long v83 = v27;
      *((void *)&v83 + 1) = v25;
      __int16 v84 = v28;
    }
    char v29 = (uint64_t *)v66[17];
    char v30 = (uint64_t *)v66[18];
    while (v29 != v30)
    {
      uint64_t v31 = *v29;
      uint64_t v32 = *(void *)(*v29 + 112);
      if (v32)
      {
        int8x16_t v69 = *(int8x16_t *)(v32 + 24);
        uint64_t v33 = *(void *)(v32 + 8);
        char v34 = 1;
        uint64_t v35 = *(void *)(v32 + 16);
      }
      else
      {
        uint64_t v35 = 0;
        char v34 = 0;
        uint64_t v33 = 0;
        int8x16_t v69 = 0u;
      }
      uint64_t v36 = *(void *)(v31 + 24);
      uint64_t v37 = *(void *)(v31 + 144);
      int v38 = &v86;
      unint64_t v39 = &v86;
      int8x16_t v40 = v86;
      if (v86)
      {
        do
        {
          while (1)
          {
            unint64_t v39 = (uint64_t **)v40;
            uint64_t v41 = v40[4];
            if (v41 <= v37) {
              break;
            }
            int8x16_t v40 = *v39;
            int v38 = v39;
            if (!*v39) {
              goto LABEL_39;
            }
          }
          if (v41 >= v37)
          {
            char v43 = (char *)v39;
            goto LABEL_42;
          }
          int8x16_t v40 = v39[1];
        }
        while (v40);
        int v38 = v39 + 1;
      }
LABEL_39:
      char v43 = (char *)operator new(0x58uLL);
      *((void *)v43 + 4) = v37;
      *(_OWORD *)(v43 + 40) = 0u;
      *(_OWORD *)(v43 + 56) = 0u;
      *(_OWORD *)(v43 + 72) = 0u;
      *(void *)char v43 = 0;
      *((void *)v43 + 1) = 0;
      *((void *)v43 + 2) = v39;
      *int v38 = (uint64_t *)v43;
      __int16 v42 = (uint64_t *)v43;
      if (*v85)
      {
        int64_t v85 = (uint64_t **)*v85;
        __int16 v42 = *v38;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v86, v42);
      ++v87;
LABEL_42:
      *((void *)v43 + 5) = v36;
      *((int8x16_t *)v43 + 3) = vextq_s8(v69, v69, 8uLL);
      *((void *)v43 + 8) = v33;
      *((void *)v43 + 9) = v35;
      v43[80] = v34;
      v43[81] = 0;
      ++v29;
    }
    uint64_t v44 = v66[5];
    for (uint64_t i = v66[6]; v44 != i; v44 += 8)
    {
      double v47 = *(double *)(*(void *)v44 + 8);
      double v46 = *(double *)(*(void *)v44 + 16);
      if (v47 >= v46) {
        double v48 = *(double *)(*(void *)v44 + 16);
      }
      else {
        double v48 = *(double *)(*(void *)v44 + 8);
      }
      if (v46 < v47) {
        double v46 = *(double *)(*(void *)v44 + 8);
      }
      HKIntervalMask<double>::_insertInterval(v79, v48, v46);
    }
    HDStatisticsBucket<HDStatisticsPresence>::operator=((uint64_t)&v70.n128_i64[1], (uint64_t)&v73);
    HDStatisticsBucket<HDStatisticsPresence>::~HDStatisticsBucket((uint64_t)&v73);
  }
  uint64_t v49 = v105;
  uint64_t v50 = v106;
  if (v105 != v106)
  {
    unint64_t v51 = (char *)v71[1];
    do
    {
      uint64_t v52 = *(void *)(*(void *)v49 + 24);
      uint64_t v53 = *(void *)(*(void *)v49 + 32);
      uint64_t v54 = *(void *)(*(void *)v49 + 8);
      uint64_t v55 = *(void *)(*(void *)v49 + 16);
      if ((unint64_t)v51 >= (unint64_t)v72)
      {
        char v56 = (char *)v71[0];
        unint64_t v57 = 0xCCCCCCCCCCCCCCCDLL * ((v51 - (char *)v71[0]) >> 3);
        unint64_t v58 = v57 + 1;
        if (v57 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(v72 - (unint64_t)v71[0]) >> 3) > v58) {
          unint64_t v58 = 0x999999999999999ALL * ((uint64_t)(v72 - (unint64_t)v71[0]) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v72 - (unint64_t)v71[0]) >> 3) >= 0x333333333333333) {
          unint64_t v59 = 0x666666666666666;
        }
        else {
          unint64_t v59 = v58;
        }
        if (v59)
        {
          unint64_t v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v59);
          char v56 = (char *)v71[0];
          unint64_t v51 = (char *)v71[1];
        }
        else
        {
          uint64_t v60 = 0;
        }
        unint64_t v61 = v59 + 40 * v57;
        *(void *)unint64_t v61 = v53;
        *(void *)(v61 + 8) = v52;
        *(void *)(v61 + 16) = v54;
        *(void *)(v61 + 24) = v55;
        *(_WORD *)(v61 + 32) = 1;
        uint64_t v62 = (char *)v61;
        if (v51 != v56)
        {
          do
          {
            long long v63 = *(_OWORD *)(v51 - 40);
            long long v64 = *(_OWORD *)(v51 - 24);
            *((_WORD *)v62 - 4) = *((_WORD *)v51 - 4);
            *(_OWORD *)(v62 - 24) = v64;
            *(_OWORD *)(v62 - 40) = v63;
            v62 -= 40;
            v51 -= 40;
          }
          while (v51 != v56);
          char v56 = (char *)v71[0];
        }
        unint64_t v51 = (char *)(v61 + 40);
        v71[0] = v62;
        v71[1] = (void *)(v61 + 40);
        *(void *)&long long v72 = v59 + 40 * v60;
        if (v56) {
          operator delete(v56);
        }
      }
      else
      {
        *(void *)unint64_t v51 = v53;
        *((void *)v51 + 1) = v52;
        *((void *)v51 + 2) = v54;
        *((void *)v51 + 3) = v55;
        *((_WORD *)v51 + 16) = 1;
        v51 += 40;
      }
      v71[1] = v51;
      v49 += 8;
    }
    while (v49 != v50);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v102);

  HDStatisticsCollectionEngine<HDStatisticsPresence>::operator=((void *)(v67 + 112), &v70);
  if (v71[0])
  {
    v71[1] = v71[0];
    operator delete(v71[0]);
  }
  HDStatisticsBucket<HDStatisticsPresence>::~HDStatisticsBucket((uint64_t)&v70.n128_i64[1]);
}

void sub_1BD16B110(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)(v9 - 224));
  HDStatisticsCollectionEngine<HDStatisticsPresence>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsPresence>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_WORD *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = a1 + 176;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 288) = 1065353216;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_DWORD *)(a1 + 328) = 1065353216;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_DWORD *)(a1 + 368) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsPresence>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  int8x16_t v2 = *(void **)(a1 + 384);
  if (v2)
  {
    *(void *)(a1 + 392) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsPresence>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsPresence>::~HDStatisticsBucket(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 336);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 296);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 256);
  int8x16_t v2 = *(void **)(a1 + 232);
  if (v2)
  {
    *(void *)(a1 + 240) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 192);
  std::__tree<long>::destroy(*(void **)(a1 + 176));
  id v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(void *)(a1 + 104) = v3;
    operator delete(v3);
  }
  objc_destroyWeak((id *)(a1 + 88));
  uint64_t v4 = *(void **)(a1 + 64);
  if (v4)
  {
    *(void *)(a1 + 72) = v4;
    operator delete(v4);
  }

  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_configureForStartTime(uint64_t a1)
{
  unint64_t v28 = 0;
  int8x16_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
    uint64_t v4 = [v2 dateIntervalContainingDate:v3 index:&v28];

    uint64_t v5 = [v4 startDate];
    [v5 timeIntervalSinceReferenceDate];
    double v7 = v6;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
LABEL_5:
    double v13 = v9;

    goto LABEL_6;
  }
  id v10 = *(id *)(a1 + 64);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v11 = [v10 startDate];
    [v11 timeIntervalSinceReferenceDate];
    double v7 = v12;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
    goto LABEL_5;
  }
  double v7 = -1.79769313e308;
  double v13 = 1.79769313e308;
LABEL_6:

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsPresence>::HDStatisticsBucket((uint64_t)v21, WeakRetained, v7, v13);

  if (*(void *)(a1 + 32) == 1) {
    char v23 = 1;
  }
  uint64_t v22 = *(void *)(a1 + 56);
  char v24 = *(unsigned char *)(a1 + 24) & 1;
  if (v27 != (char *)(a1 + 72)) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27, *(char **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4);
  }
  objc_storeStrong(&v26, *(id *)(a1 + 544));
  if (!*(void *)(a1 + 40)) {
    int v25 = 0;
  }
  unint64_t v15 = v28;
  HDStatisticsBucket<HDStatisticsPresence>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v21);
  v18.n128_u64[0] = v15;
  HDStatisticsBucket<HDStatisticsPresence>::HDStatisticsBucket((uint64_t)&v18.n128_i64[1], (uint64_t)v17);
  long long __p = 0u;
  long long v20 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsPresence>::operator=((void *)(a1 + 112), &v18);

  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsPresence>::~HDStatisticsBucket((uint64_t)&v18.n128_i64[1]);
  HDStatisticsBucket<HDStatisticsPresence>::~HDStatisticsBucket((uint64_t)v17);
  *(unsigned char *)(a1 + 528) = 0;
  return HDStatisticsBucket<HDStatisticsPresence>::~HDStatisticsBucket((uint64_t)v21);
}

void sub_1BD16B620(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *HDStatisticsCollectionEngine<HDStatisticsPresence>::operator=(void *a1, __n128 *a2)
{
  *a1 = a2->n128_u64[0];
  HDStatisticsBucket<HDStatisticsPresence>::operator=((uint64_t)(a1 + 1), (uint64_t)&a2->n128_i64[1]);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 48), a2 + 24);
  unint64_t v4 = a2[25].n128_u64[1];
  a2[25].n128_u64[1] = 0;
  uint64_t v5 = (void *)a1[51];
  a1[51] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsPresence>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 96);
  double v7 = *(unsigned char **)(a2 + 104);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(void *)(a1 + 96) = v10;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(void *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  long long v12 = *(_OWORD *)(a2 + 120);
  long long v13 = *(_OWORD *)(a2 + 136);
  long long v14 = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 176) = 0;
  unint64_t v15 = (void *)(a1 + 176);
  *(void *)(a1 + 168) = a1 + 176;
  *(_OWORD *)(a1 + 136) = v13;
  *(_OWORD *)(a1 + 152) = v14;
  *(_OWORD *)(a1 + 120) = v12;
  *(void *)(a1 + 184) = 0;
  unint64_t v16 = *(void **)(a2 + 168);
  if (v16 != (void *)(a2 + 176))
  {
    unint64_t v17 = 0;
    __n128 v18 = (void *)(a1 + 176);
    while (1)
    {
      uint64_t v19 = v16[4];
      long long v20 = (void *)(a1 + 176);
      if (v18 == v15) {
        goto LABEL_12;
      }
      long long v21 = v17;
      uint64_t v22 = (void *)(a1 + 176);
      if (v17)
      {
        do
        {
          long long v20 = v21;
          long long v21 = (void *)v21[1];
        }
        while (v21);
      }
      else
      {
        do
        {
          long long v20 = (void *)v22[2];
          BOOL v23 = *v20 == (void)v22;
          uint64_t v22 = v20;
        }
        while (v23);
      }
      if (v20[4] < v19)
      {
LABEL_12:
        if (v17) {
          char v24 = (uint64_t **)v20;
        }
        else {
          char v24 = (uint64_t **)(a1 + 176);
        }
        if (v17) {
          int v25 = (uint64_t **)(v20 + 1);
        }
        else {
          int v25 = (uint64_t **)(a1 + 176);
        }
        if (!*v25)
        {
LABEL_28:
          unint64_t v28 = operator new(0x58uLL);
          long long v29 = *((_OWORD *)v16 + 2);
          long long v30 = *((_OWORD *)v16 + 3);
          long long v31 = *((_OWORD *)v16 + 4);
          v28[10] = v16[10];
          *((_OWORD *)v28 + 3) = v30;
          *((_OWORD *)v28 + 4) = v31;
          *((_OWORD *)v28 + 2) = v29;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 168), (uint64_t)v24, v25, v28);
        }
      }
      else
      {
        int v25 = (uint64_t **)(a1 + 176);
        char v24 = (uint64_t **)(a1 + 176);
        if (!v17) {
          goto LABEL_28;
        }
        id v26 = v17;
        while (1)
        {
          while (1)
          {
            char v24 = (uint64_t **)v26;
            uint64_t v27 = v26[4];
            if (v27 <= v19) {
              break;
            }
            id v26 = *v24;
            int v25 = v24;
            if (!*v24) {
              goto LABEL_28;
            }
          }
          if (v27 >= v19) {
            break;
          }
          id v26 = v24[1];
          if (!v26)
          {
            int v25 = v24 + 1;
            goto LABEL_28;
          }
        }
      }
      uint64_t v32 = (void *)v16[1];
      if (v32)
      {
        do
        {
          uint64_t v33 = v32;
          uint64_t v32 = (void *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          uint64_t v33 = (void *)v16[2];
          BOOL v23 = *v33 == (void)v16;
          unint64_t v16 = v33;
        }
        while (!v23);
      }
      if (v33 == (void *)(a2 + 176)) {
        break;
      }
      unint64_t v17 = (void *)*v15;
      __n128 v18 = *(void **)(a1 + 168);
      unint64_t v16 = v33;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 192, a2 + 192);
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 232), *(const void **)(a2 + 232), *(void *)(a2 + 240), (uint64_t)(*(void *)(a2 + 240) - *(void *)(a2 + 232)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 256, a2 + 256);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 296, a2 + 296);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 336, a2 + 336);
  return a1;
}

void sub_1BD16B9B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, id *location, void **a12)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v16);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v15);
  uint64_t v19 = *v14;
  if (*v14)
  {
    *(void *)(v12 + 240) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v13);
  std::__tree<long>::destroy(*v17);
  long long v20 = *a10;
  if (*a10)
  {
    *(void *)(v12 + 104) = v20;
    operator delete(v20);
  }
  objc_destroyWeak(location);
  long long v21 = *a12;
  if (*a12)
  {
    *(void *)(v12 + 72) = v21;
    operator delete(v21);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsPresence>::operator=(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  long long v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v5;

  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  id WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  uint64_t v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(void *)(a1 + 104) = v9;
    operator delete(v9);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 96) = 0;
  long long v10 = *(_OWORD *)(a2 + 152);
  long long v11 = *(_OWORD *)(a2 + 136);
  uint64_t v13 = a1 + 176;
  uint64_t v12 = *(void **)(a1 + 176);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v11;
  *(_OWORD *)(a1 + 152) = v10;
  std::__tree<long>::destroy(v12);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  long long v14 = (void *)(a2 + 176);
  uint64_t v15 = *(void *)(a2 + 176);
  *(void *)(a1 + 176) = v15;
  uint64_t v16 = *(void *)(a2 + 184);
  *(void *)(a1 + 184) = v16;
  if (v16)
  {
    *(void *)(v15 + 16) = v13;
    *(void *)(a2 + 168) = v14;
    *long long v14 = 0;
    *(void *)(a2 + 184) = 0;
  }
  else
  {
    *(void *)(a1 + 168) = v13;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 192, (uint64_t *)(a2 + 192));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 232, (__n128 *)(a2 + 232));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 256, (uint64_t *)(a2 + 256));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 296, (uint64_t *)(a2 + 296));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 336, (uint64_t *)(a2 + 336));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  double v4 = *(double *)a2;
  id v5 = objc_alloc(MEMORY[0x1E4F1C9C8]);
  long long v6 = (double *)(a2 + 40);
  if (v4 != -1.79769313e308) {
    long long v6 = (double *)a2;
  }
  id v68 = (id)[v5 initWithTimeIntervalSinceReferenceDate:*v6];
  uint64_t v70 = a2;
  if (*(double *)(a2 + 8) == 1.79769313e308) {
    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 48)];
  }
  else {
    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 8)];
  }
  uint64_t v8 = (void *)v7;
  id v9 = *(id *)(a1 + 16);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v10 = *(id *)(a1 + 16);
    if ([v10 shouldUseUnderlyingTypeForStatistics])
    {
      uint64_t v11 = [v10 underlyingSampleType];

      id v9 = (id)v11;
    }
  }
  uint64_t v12 = [objc_alloc(MEMORY[0x1E4F2B5B0]) initWithDataType:v9 startDate:v68 endDate:v8];
  if (*(unsigned char *)(a1 + 24))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      id v14 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      uint64_t v15 = *(uint64_t **)(a2 + 232);
      uint64_t v16 = *(uint64_t **)(a2 + 240);
      while (v15 != v16)
      {
        uint64_t v17 = *v15;
        id v18 = objc_loadWeakRetained((id *)(a1 + 48));
        uint64_t v19 = [v18 sourceForSourceID:v17];

        if (v19)
        {
          if (([v14 containsObject:v19] & 1) == 0) {
            [v14 addObject:v19];
          }
        }

        ++v15;
      }
      long long v20 = (void *)[v14 copy];
      [(id)v12 _setSources:v20];
    }
  }

  v74[0] = &unk_1F1726690;
  __int16 v75 = v74;
  id v69 = (id)v12;
  long long v21 = *(_OWORD *)(v70 + 136);
  *(_OWORD *)long long __p = *(_OWORD *)(v70 + 120);
  long long v72 = v21;
  long long v73 = *(_OWORD *)(v70 + 152);
  if (!v75) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  objc_msgSend(v69, "setDataCount:", *(void *)(*(uint64_t (**)(void *, void **))(*v75 + 48))(v75, __p));
  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    goto LABEL_119;
  }
  id v67 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  *(_OWORD *)long long __p = 0u;
  long long v72 = 0u;
  LODWORD(v73) = 1065353216;
  uint64_t v22 = *(void **)(v70 + 168);
  if (v22 == (void *)(v70 + 176)) {
    goto LABEL_118;
  }
  do
  {
    BOOL v23 = HDStatisticsBucket<HDStatisticsPresence>::_bundleIdentifierForSourceID(v70, v22[4]);
    char v24 = v23;
    if (!v23) {
      goto LABEL_98;
    }
    unint64_t v25 = [v23 hash];
    unint64_t v26 = v25;
    unint64_t v27 = (unint64_t)__p[1];
    if (!__p[1]) {
      goto LABEL_41;
    }
    uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v28.i16[0] = vaddlv_u8(v28);
    unint64_t v29 = v28.u32[0];
    if (v28.u32[0] > 1uLL)
    {
      uint64_t v12 = v25;
      if ((void *)v25 >= __p[1]) {
        uint64_t v12 = v25 % (unint64_t)__p[1];
      }
    }
    else
    {
      uint64_t v12 = ((unint64_t)__p[1] - 1) & v25;
    }
    long long v30 = (void **)*((void *)__p[0] + v12);
    if (!v30 || (long long v31 = (char *)*v30) == 0)
    {
LABEL_41:
      long long v31 = (char *)operator new(0x48uLL);
      *(void *)long long v31 = 0;
      *((void *)v31 + 1) = v26;
      *((void *)v31 + 2) = v24;
      *(_OWORD *)(v31 + 24) = 0u;
      *(_OWORD *)(v31 + 40) = 0u;
      *(_OWORD *)(v31 + 56) = 0u;
      float v37 = (float)(unint64_t)(*((void *)&v72 + 1) + 1);
      if (v27 && (float)(*(float *)&v73 * (float)v27) >= v37)
      {
LABEL_87:
        uint64_t v53 = __p[0];
        uint64_t v54 = (void *)*((void *)__p[0] + v12);
        if (v54)
        {
          *(void *)long long v31 = *v54;
        }
        else
        {
          *(void *)long long v31 = v72;
          *(void *)&long long v72 = v31;
          v53[v12] = &v72;
          if (!*(void *)v31)
          {
LABEL_96:
            ++*((void *)&v72 + 1);
            goto LABEL_97;
          }
          unint64_t v55 = *(void *)(*(void *)v31 + 8);
          if ((v27 & (v27 - 1)) != 0)
          {
            if (v55 >= v27) {
              v55 %= v27;
            }
          }
          else
          {
            v55 &= v27 - 1;
          }
          uint64_t v54 = (char *)__p[0] + 8 * v55;
        }
        *uint64_t v54 = v31;
        goto LABEL_96;
      }
      BOOL v38 = (v27 & (v27 - 1)) != 0;
      if (v27 < 3) {
        BOOL v38 = 1;
      }
      unint64_t v39 = v38 | (2 * v27);
      unint64_t v40 = vcvtps_u32_f32(v37 / *(float *)&v73);
      if (v39 <= v40) {
        int8x8_t prime = (int8x8_t)v40;
      }
      else {
        int8x8_t prime = (int8x8_t)v39;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v27 = (unint64_t)__p[1];
      if ((void *)*(void *)&prime > __p[1]) {
        goto LABEL_53;
      }
      if ((void *)*(void *)&prime < __p[1])
      {
        unint64_t v48 = vcvtps_u32_f32((float)*((unint64_t *)&v72 + 1) / *(float *)&v73);
        if (__p[1] < (void *)3
          || (uint8x8_t v49 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v49.i16[0] = vaddlv_u8(v49), v49.u32[0] > 1uLL))
        {
          unint64_t v48 = std::__next_prime(v48);
        }
        else
        {
          uint64_t v50 = 1 << -(char)__clz(v48 - 1);
          if (v48 >= 2) {
            unint64_t v48 = v50;
          }
        }
        if (*(void *)&prime <= v48) {
          int8x8_t prime = (int8x8_t)v48;
        }
        if (*(void *)&prime >= v27)
        {
          unint64_t v27 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_53:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            __int16 v42 = operator new(8 * *(void *)&prime);
            char v43 = __p[0];
            __p[0] = v42;
            if (v43) {
              operator delete(v43);
            }
            uint64_t v44 = 0;
            __p[1] = (void *)prime;
            do
              *((void *)__p[0] + v44++) = 0;
            while (*(void *)&prime != v44);
            uint64_t v45 = (void **)v72;
            if ((void)v72)
            {
              unint64_t v46 = *(void *)(v72 + 8);
              uint8x8_t v47 = (uint8x8_t)vcnt_s8(prime);
              v47.i16[0] = vaddlv_u8(v47);
              if (v47.u32[0] > 1uLL)
              {
                if (v46 >= *(void *)&prime) {
                  v46 %= *(void *)&prime;
                }
              }
              else
              {
                v46 &= *(void *)&prime - 1;
              }
              *((void *)__p[0] + v46) = &v72;
              for (i = *v45; i; unint64_t v46 = v52)
              {
                unint64_t v52 = i[1];
                if (v47.u32[0] > 1uLL)
                {
                  if (v52 >= *(void *)&prime) {
                    v52 %= *(void *)&prime;
                  }
                }
                else
                {
                  v52 &= *(void *)&prime - 1;
                }
                if (v52 != v46)
                {
                  if (!*((void *)__p[0] + v52))
                  {
                    *((void *)__p[0] + v52) = v45;
                    goto LABEL_78;
                  }
                  *uint64_t v45 = (void *)*i;
                  void *i = **((void **)__p[0] + v52);
                  **((void **)__p[0] + v52) = i;
                  uint64_t i = v45;
                }
                unint64_t v52 = v46;
LABEL_78:
                uint64_t v45 = (void **)i;
                uint64_t i = (void *)*i;
              }
            }
            unint64_t v27 = (unint64_t)prime;
            goto LABEL_82;
          }
          unint64_t v61 = __p[0];
          __p[0] = 0;
          if (v61) {
            operator delete(v61);
          }
          unint64_t v27 = 0;
          __p[1] = 0;
        }
      }
LABEL_82:
      if ((v27 & (v27 - 1)) != 0)
      {
        if (v26 >= v27) {
          uint64_t v12 = v26 % v27;
        }
        else {
          uint64_t v12 = v26;
        }
      }
      else
      {
        uint64_t v12 = (v27 - 1) & v26;
      }
      goto LABEL_87;
    }
    unint64_t v66 = (unint64_t)__p[1] - 1;
    while (1)
    {
      unint64_t v32 = *((void *)v31 + 1);
      if (v32 == v26) {
        break;
      }
      if (v29 > 1)
      {
        if (v32 >= v27) {
          v32 %= v27;
        }
      }
      else
      {
        v32 &= v66;
      }
      if (v32 != v12) {
        goto LABEL_41;
      }
LABEL_40:
      long long v31 = *(char **)v31;
      if (!v31) {
        goto LABEL_41;
      }
    }
    id v33 = *((id *)v31 + 2);
    id v34 = v24;
    uint64_t v35 = v34;
    if (v33 != v34)
    {
      char v36 = [v33 isEqualToString:v34];

      if (v36) {
        goto LABEL_97;
      }
      goto LABEL_40;
    }

LABEL_97:
    long long v56 = *(_OWORD *)(v22 + 5);
    long long v57 = *(_OWORD *)(v22 + 7);
    *(_OWORD *)(v31 + 56) = *(_OWORD *)(v22 + 9);
    *(_OWORD *)(v31 + 40) = v57;
    *(_OWORD *)(v31 + 24) = v56;

LABEL_98:
    unint64_t v58 = (void *)v22[1];
    if (v58)
    {
      do
      {
        unint64_t v59 = v58;
        unint64_t v58 = (void *)*v58;
      }
      while (v58);
    }
    else
    {
      do
      {
        unint64_t v59 = (void *)v22[2];
        BOOL v60 = *v59 == (void)v22;
        uint64_t v22 = v59;
      }
      while (!v60);
    }
    uint64_t v22 = v59;
  }
  while (v59 != (void *)(v70 + 176));
  for (uint64_t j = (uint64_t **)v72; j; uint64_t j = (uint64_t **)*j)
  {
    long long v63 = j[2];
    if (!v75) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    long long v64 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)(*(uint64_t (**)(void *, uint64_t *))(*v75 + 48))(v75, (uint64_t *)j + 3));
    [v67 setObject:v64 forKeyedSubscript:v63];
  }
LABEL_118:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>>>::~__hash_table((uint64_t)__p);
  [v69 setDataCountBySource:v67];

LABEL_119:
  std::__function::__value_func<HDStatisticsPresence const& ()(HDStatisticsPresence const&)>::~__value_func[abi:ne180100](v74);

  return v69;
}

void sub_1BD16C3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsPresence>::_updateSourceOrder(uint64_t a1)
{
  int8x16_t v2 = (void **)(a1 + 232);
  uint64_t v1 = *(void *)(a1 + 232);
  unint64_t v3 = *(void *)(a1 + 216);
  if (v3 != (*(void *)(a1 + 240) - v1) >> 3)
  {
    *(void *)(a1 + 240) = v1;
    std::vector<long long>::reserve((void **)(a1 + 232), v3);
    id v5 = *(void **)(a1 + 208);
    if (v5)
    {
      long long v6 = *(char **)(a1 + 240);
      do
      {
        uint64_t v7 = v5[2];
        unint64_t v8 = *(void *)(a1 + 248);
        if ((unint64_t)v6 >= v8)
        {
          id v10 = (char *)*v2;
          uint64_t v11 = (v6 - (unsigned char *)*v2) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            id v10 = *(char **)(a1 + 232);
            long long v6 = *(char **)(a1 + 240);
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v16 = (void *)(v14 + 8 * v11);
          void *v16 = v7;
          id v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            uint64_t v17 = *((void *)v6 - 1);
            v6 -= 8;
            *--uint64_t v16 = v17;
          }
          *(void *)(a1 + 232) = v16;
          *(void *)(a1 + 240) = v9;
          *(void *)(a1 + 248) = v14 + 8 * v15;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)long long v6 = v7;
          id v9 = v6 + 8;
        }
        *(void *)(a1 + 240) = v9;
        id v5 = (void *)*v5;
        long long v6 = v9;
      }
      while (v5);
    }
    id v18 = (id *)(a1 + 88);
    id WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      id v20 = objc_loadWeakRetained(v18);
      [v20 orderSourceIDs:v2];
    }
  }
}

void sub_1BD16C674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsPresence>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2) {
    a2 = v4 * floor(a2 / v4);
  }
  double v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    long long v124 = (void *)(a1 + 96);
    long long v120 = (double **)(a1 + 64);
    location = (id *)(a1 + 88);
    long long v115 = (void *)(a1 + 176);
    while (1)
    {
      uint64_t v6 = *(void *)(a1 + 96);
      uint64_t v7 = *(long long **)(a1 + 104);
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4);
      if (v8) {
        break;
      }
LABEL_138:
      *(double *)(a1 + 56) = a2;
LABEL_139:
      double v112 = *(double *)(a1 + 56);
      if (v112 == v5)
      {
        long long v113 = [MEMORY[0x1E4F28B00] currentHandler];
        long long v114 = [NSString stringWithUTF8String:"void HDStatisticsBucket<HDStatisticsPresence>::_mergeThroughTime(double) [Statistics = HDStatisticsPresence]"];
        [v113 handleFailureInFunction:v114 file:@"HDStatisticsBucket.hpp" lineNumber:234 description:@"Failed to make forward progress during statistics merge."];

        double v112 = *(double *)(a1 + 56);
      }
      double v5 = v112;
      if (v112 >= a2) {
        return;
      }
    }
    if (v8 != 1)
    {
      double v20 = a2;
      double v21 = a2;
      double v22 = v5;
      uint64_t v23 = *(void *)(a1 + 96);
      if ((long long *)v6 != v7)
      {
        do
        {
          double v24 = *(double *)(v23 + 8);
          double v25 = *(double *)(v23 + 16);
          if (v24 > v22 && v24 < v21) {
            double v21 = *(double *)(v23 + 8);
          }
          if (v25 > v5) {
            double v27 = *(double *)(v23 + 16);
          }
          else {
            double v27 = v20;
          }
          if (v25 < v20)
          {
            double v22 = v5;
            double v20 = v27;
          }
          v23 += 48;
        }
        while ((long long *)v23 != v7);
      }
      if (v20 >= v21) {
        double v28 = v21;
      }
      else {
        double v28 = v20;
      }
      double v29 = *(double *)(a1 + 16);
      if (v29 > 0.0)
      {
        double v30 = v29 * floor(v28 / v29);
        double v31 = v29 * floor((v29 + v5) / v29);
        if (v30 >= v31) {
          double v28 = v30;
        }
        else {
          double v28 = v31;
        }
      }
      *long long v124 = 0;
      v124[1] = 0;
      void v124[2] = 0;
      if ((long long *)v6 != v7)
      {
        if (v8 > 0x555555555555555) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4));
        uint64_t v35 = *(char **)(a1 + 96);
        id v34 = *(char **)(a1 + 104);
        char v36 = v32;
        if (v34 != v35)
        {
          do
          {
            long long v37 = *((_OWORD *)v34 - 3);
            long long v38 = *((_OWORD *)v34 - 2);
            *(_OWORD *)(v36 - 21) = *(_OWORD *)(v34 - 21);
            *((_OWORD *)v36 - 3) = v37;
            *((_OWORD *)v36 - 2) = v38;
            v36 -= 48;
            v34 -= 48;
          }
          while (v34 != v35);
          id v34 = (char *)*v124;
        }
        *(void *)(a1 + 96) = v36;
        *(void *)(a1 + 104) = v32;
        *(void *)(a1 + 112) = &v32[48 * v33];
        if (v34) {
          operator delete(v34);
        }
      }
      HDStatisticsBucket<HDStatisticsPresence>::_updateSourceOrder(a1);
      long long v117 = (long long *)v6;
      id WeakRetained = objc_loadWeakRetained(location);

      if (WeakRetained)
      {
        *(void *)&long long v126 = a1;
        unint64_t v40 = 126 - 2 * __clz(v8);
        if (v117 == v7) {
          uint64_t v41 = 0;
        }
        else {
          uint64_t v41 = v40;
        }
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsPresence>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder*,false>((unint64_t)v117, v7, (uint64_t)&v126, v41, 1);
      }
      if (*(unsigned char *)(a1 + 25)) {
        id v118 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      }
      else {
        id v118 = 0;
      }
      if (v117 == v7)
      {
LABEL_117:
        long long v96 = *(void **)(a1 + 168);
        if (v96 != v115)
        {
          do
          {
            long long v97 = (void *)v96[1];
            if (v97)
            {
              do
              {
                int v98 = v97;
                long long v97 = (void *)*v97;
              }
              while (v97);
            }
            else
            {
              do
              {
                int v98 = (void *)v96[2];
                BOOL v99 = *v98 == (void)v96;
                long long v96 = v98;
              }
              while (!v99);
            }
            long long v96 = v98;
          }
          while (v98 != v115);
        }
        *(double *)(a1 + 56) = v28;

        if (v117) {
          operator delete(v117);
        }
        goto LABEL_139;
      }
      unint64_t v119 = 0;
      char v44 = 0;
      uint64_t v45 = v117;
      while (2)
      {
        long long v46 = v45[1];
        long long v126 = *v45;
        long long v127 = v46;
        uint64_t v128 = *((void *)v45 + 4);
        uint64_t v47 = v46;
        double v48 = v28 - *((double *)&v126 + 1);
        double v49 = *(double *)&v46 - *((double *)&v126 + 1);
        if (v49 - (v28 - *((double *)&v126 + 1)) >= 0.01)
        {
          if (v48 < 0.01)
          {
            LOBYTE(v128) = 0;
            goto LABEL_59;
          }
          double v55 = v48 / v49 * *(double *)&v126;
          uint64_t v50 = *((void *)&v127 + 1);
          char v52 = BYTE1(v128);
          double v54 = *(double *)&v126 - v55;
          *(double *)&long long v126 = v55;
          *(double *)&long long v127 = v28;
          double v53 = v28;
          int v51 = v128;
          if ((_BYTE)v128) {
            goto LABEL_54;
          }
LABEL_59:
          unint64_t v59 = *(long long **)(a1 + 104);
          unint64_t v60 = *(void *)(a1 + 112);
          if ((unint64_t)v59 < v60)
          {
            long long v61 = *v45;
            long long v62 = v45[2];
            v59[1] = v45[1];
            v59[2] = v62;
            *unint64_t v59 = v61;
            long long v63 = v59 + 3;
            goto LABEL_115;
          }
          unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v59 - *v124) >> 4);
          unint64_t v65 = v64 + 1;
          if (v64 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - *v124) >> 4);
          if (2 * v66 > v65) {
            unint64_t v65 = 2 * v66;
          }
          if (v66 >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v67 = 0x555555555555555;
          }
          else {
            unint64_t v67 = v65;
          }
          if (v67) {
            unint64_t v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v67);
          }
          else {
            uint64_t v68 = 0;
          }
          id v69 = (long long *)(v67 + 48 * v64);
          long long v70 = *v45;
          long long v71 = v45[2];
          v69[1] = v45[1];
          v69[2] = v71;
          *id v69 = v70;
          long long v73 = *(char **)(a1 + 96);
          long long v72 = *(char **)(a1 + 104);
          uint64_t v74 = v69;
          if (v72 != v73)
          {
            do
            {
              long long v75 = *((_OWORD *)v72 - 3);
              long long v76 = *((_OWORD *)v72 - 2);
              *(long long *)((char *)v74 - 21) = *(_OWORD *)(v72 - 21);
              *(v74 - 3) = v75;
              *(v74 - 2) = v76;
              v74 -= 3;
              v72 -= 48;
            }
            while (v72 != v73);
            long long v72 = (char *)*v124;
          }
          long long v63 = v69 + 3;
          *(void *)(a1 + 96) = v74;
          *(void *)(a1 + 104) = v69 + 3;
          *(void *)(a1 + 112) = v67 + 48 * v68;
          if (v72)
          {
            int8x16_t v77 = v72;
            goto LABEL_114;
          }
LABEL_115:
          *(void *)(a1 + 104) = v63;
        }
        else
        {
          uint64_t v50 = 0;
          int v51 = 0;
          char v52 = 0;
          double v53 = 0.0;
          uint64_t v47 = 0;
          double v54 = 0.0;
          if (!(_BYTE)v128) {
            goto LABEL_59;
          }
LABEL_54:
          uint64_t v123 = v50;
          HDRawQuantitySample::applyMask((uint64_t)&v126, v120);
          int v56 = *((unsigned __int8 *)v45 + 41);
          char v121 = *((unsigned char *)v45 + 40);
          char v122 = v52;
          if ((_BYTE)v128)
          {
            if (v44)
            {
              unint64_t v57 = *((void *)&v127 + 1);
              if (v119 == *((void *)&v127 + 1))
              {
                if (*((unsigned char *)v45 + 42))
                {
                  int v58 = 1;
                  unint64_t v57 = v119;
                  goto LABEL_86;
                }
LABEL_85:
                ++*(void *)(a1 + 120);
                int v58 = 1;
              }
              else
              {
                if (*(unsigned char *)(a1 + 24)) {
                  int v58 = 1;
                }
                else {
                  int v58 = *((unsigned __int8 *)v45 + 42);
                }
                if (!*((unsigned char *)v45 + 42) && *(unsigned char *)(a1 + 24)) {
                  goto LABEL_85;
                }
              }
            }
            else
            {
              if (!*((unsigned char *)v45 + 42)) {
                ++*(void *)(a1 + 120);
              }
              int v58 = 1;
              unint64_t v57 = *((void *)&v127 + 1);
              unint64_t v119 = *((void *)&v127 + 1);
            }
LABEL_86:
            if (*(unsigned char *)(a1 + 25))
            {
              uint64_t v78 = HDStatisticsBucket<HDStatisticsPresence>::_bundleIdentifierForSourceID(a1, v57);
              if (v78)
              {
                int64_t v79 = [v118 objectForKeyedSubscript:v78];
                uint64_t v80 = v79;
                if (v79)
                {
                  if ([v79 longLongValue] != v57 && !*(unsigned char *)(a1 + 24)) {
                    goto LABEL_96;
                  }
                }
                else
                {
                  long long v81 = [NSNumber numberWithLongLong:v57];
                  [v118 setObject:v81 forKeyedSubscript:v78];
                }
                unint64_t v82 = HDStatisticsBucket<HDStatisticsPresence>::_canonicalSourceIDForSourceID(a1, v57);
                long long v83 = HDStatisticsBucket<HDStatisticsPresence>::_statisticsForSource(a1, v82);
                if (!v56) {
                  *long long v83 = (uint64_t *)((char *)*v83 + 1);
                }
                LOBYTE(v56) = 1;
LABEL_96:
              }
            }
            char v44 = 1;
            if (v51)
            {
LABEL_99:
              BOOL v84 = v58 != 0;
              long long v86 = *(char **)(a1 + 104);
              unint64_t v85 = *(void *)(a1 + 112);
              if ((unint64_t)v86 < v85)
              {
                *(double *)long long v86 = v54;
                *((double *)v86 + 1) = v53;
                *((void *)v86 + 2) = v47;
                *((void *)v86 + 3) = v123;
                v86[32] = v51;
                v86[33] = v122;
                v86[40] = v121;
                v86[41] = v56;
                long long v63 = v86 + 48;
                v86[42] = v84;
                goto LABEL_115;
              }
              int8x16_t v77 = (char *)*v124;
              unint64_t v87 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v86[-*v124] >> 4);
              unint64_t v88 = v87 + 1;
              if (v87 + 1 > 0x555555555555555) {
                std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v89 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v85 - (void)v77) >> 4);
              if (2 * v89 > v88) {
                unint64_t v88 = 2 * v89;
              }
              if (v89 >= 0x2AAAAAAAAAAAAAALL) {
                unint64_t v90 = 0x555555555555555;
              }
              else {
                unint64_t v90 = v88;
              }
              if (v90)
              {
                unint64_t v90 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v90);
                int8x16_t v77 = *(char **)(a1 + 96);
                long long v86 = *(char **)(a1 + 104);
              }
              else
              {
                uint64_t v91 = 0;
              }
              unint64_t v92 = v90 + 48 * v87;
              *(double *)unint64_t v92 = v54;
              *(double *)(v92 + 8) = v53;
              *(void *)(v92 + 16) = v47;
              *(void *)(v92 + 24) = v123;
              *(unsigned char *)(v92 + 32) = v51;
              *(unsigned char *)(v92 + 33) = v122;
              *(unsigned char *)(v92 + 40) = v121;
              *(unsigned char *)(v92 + 41) = v56;
              *(unsigned char *)(v92 + 42) = v84;
              unint64_t v93 = v92;
              if (v86 != v77)
              {
                do
                {
                  long long v94 = *((_OWORD *)v86 - 3);
                  long long v95 = *((_OWORD *)v86 - 2);
                  *(_OWORD *)(v93 - 21) = *(_OWORD *)(v86 - 21);
                  *(_OWORD *)(v93 - 48) = v94;
                  *(_OWORD *)(v93 - 32) = v95;
                  v93 -= 48;
                  v86 -= 48;
                }
                while (v86 != v77);
                int8x16_t v77 = (char *)*v124;
              }
              long long v63 = (_OWORD *)(v92 + 48);
              *(void *)(a1 + 96) = v93;
              *(void *)(a1 + 104) = v92 + 48;
              *(void *)(a1 + 112) = v90 + 48 * v91;
              if (v77) {
LABEL_114:
              }
                operator delete(v77);
              goto LABEL_115;
            }
          }
          else
          {
            int v58 = *((unsigned __int8 *)v45 + 42);
            if (v51) {
              goto LABEL_99;
            }
          }
        }
        v45 += 3;
        if (v45 == v7) {
          goto LABEL_117;
        }
        continue;
      }
    }
    double v10 = *(double *)v6;
    double v9 = *(double *)(v6 + 8);
    double v11 = *(double *)(v6 + 16);
    uint64_t v12 = *(void *)(v6 + 24);
    char v13 = *(unsigned char *)(v6 + 32);
    char v14 = *(unsigned char *)(v6 + 33);
    double v15 = a2 - v9;
    if (a2 - v9 >= 0.01)
    {
      if (v11 - v9 - v15 < 0.01)
      {
        uint64_t v42 = 0;
        char v43 = 0;
        double v18 = 0.0;
        double v17 = *(double *)(v6 + 16);
        char v16 = *(unsigned char *)(v6 + 32);
        double v19 = 0.0;
        double v11 = 0.0;
        char v13 = 0;
LABEL_128:
        int v101 = *(unsigned __int8 *)(v6 + 42);
        int v102 = *(unsigned __int8 *)(v6 + 41);
        uint64_t v103 = *(void *)(a1 + 96);
        int v104 = *(unsigned __int8 *)(v6 + 40);
        *(double *)&long long v126 = v10;
        *((double *)&v126 + 1) = v9;
        *(double *)&long long v127 = v17;
        *((void *)&v127 + 1) = v12;
        LOBYTE(v128) = v16;
        BYTE1(v128) = v14;
        *(_DWORD *)((char *)&v128 + 2) = *(_DWORD *)(v103 + 34);
        HIWORD(v128) = *(_WORD *)(v103 + 38);
        *(double *)&long long v129 = v18;
        *((double *)&v129 + 1) = v19;
        *(double *)&long long v130 = v11;
        *((void *)&v130 + 1) = v42;
        LOBYTE(v131) = v13;
        HIBYTE(v131) = v43;
        HDRawQuantitySample::applyMask((uint64_t)&v126, v120);
        BOOL v105 = v104 != 0;
        BOOL v106 = v102 != 0;
        BOOL v107 = v101 != 0;
        if ((_BYTE)v128)
        {
          if (!v101) {
            ++*(void *)(a1 + 120);
          }
          if (*(unsigned char *)(a1 + 25))
          {
            unint64_t v108 = HDStatisticsBucket<HDStatisticsPresence>::_canonicalSourceIDForSourceID(a1, *((unint64_t *)&v127 + 1));
            uint64_t v109 = HDStatisticsBucket<HDStatisticsPresence>::_statisticsForSource(a1, v108);
            if (!v102) {
              *uint64_t v109 = (uint64_t *)((char *)*v109 + 1);
            }
          }
          BOOL v105 = 1;
          BOOL v106 = 1;
          BOOL v107 = 1;
        }
        if ((_BYTE)v131)
        {
          LOWORD(v125) = v131;
          long long v110 = v130;
          long long v111 = (char *)*v124;
          *(_OWORD *)long long v111 = v129;
          *((_OWORD *)v111 + 1) = v110;
          *((void *)v111 + 4) = v125;
          v111[40] = v105;
          v111[41] = v106;
          v111[42] = v107;
        }
        else
        {
          *(void *)(a1 + 104) = *(void *)(a1 + 96);
        }
        goto LABEL_138;
      }
      double v100 = v10 * (v15 / (v11 - v9));
      double v17 = a2;
      char v16 = *(unsigned char *)(v6 + 32);
      double v18 = v10 - v100;
      double v10 = v100;
      double v19 = a2;
    }
    else
    {
      char v16 = 0;
      double v17 = *(double *)(v6 + 16);
      double v18 = *(double *)v6;
      double v19 = *(double *)(v6 + 8);
    }
    uint64_t v42 = *(void *)(v6 + 24);
    char v43 = *(unsigned char *)(v6 + 33);
    goto LABEL_128;
  }
}

void sub_1BD16CFCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  _Unwind_Resume(a1);
}

uint64_t **HDStatisticsBucket<HDStatisticsPresence>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = a2;
  double v5 = *(void **)(a1 + 176);
  unint64_t v3 = (uint64_t **)(a1 + 176);
  double v4 = v5;
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = v3;
  do
  {
    uint64_t v7 = v4[4];
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      double v9 = v4;
    }
    else {
      double v9 = v4 + 1;
    }
    if (!v8) {
      uint64_t v6 = (uint64_t **)v4;
    }
    double v4 = (void *)*v9;
  }
  while (*v9);
  if (v6 == v3 || (uint64_t)v6[4] > a2)
  {
LABEL_11:
    double v10 = v3 - 1;
    std::__tree<std::__value_type<long long,HDStatisticsPresence>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsPresence>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsPresence>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v3 - 1, a2, &v12);
    uint64_t v6 = std::__tree<std::__value_type<long long,HDStatisticsPresence>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsPresence>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsPresence>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v10, a2, &v12);
  }
  return v6 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsPresence>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    double v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((void *)(a1 + 256), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsPresence>::_bundleIdentifierForSourceID(a1, a2);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      id v10 = v6;
      uint64_t v7 = (void *)(a1 + 296);
      BOOL v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        double v11 = &v10;
        *((void *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        id v6 = v10;
      }
    }
  }
  return a2;
}

void sub_1BD16D1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsPresence>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  double v4 = (id *)(a1 + 88);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    id v6 = (void *)(a1 + 336);
    uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
    if (v7)
    {
      id v8 = (id)v7[3];
    }
    else
    {
      id v9 = objc_loadWeakRetained(v4);
      id v8 = [v9 bundleIdentifierForSourceID:a2];

      if (v8)
      {
        id v10 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
        objc_storeStrong(v10 + 3, v8);
      }
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1BD16D284(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsPresence>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsPresence>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsPresence>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, void *a3)
{
  id v6 = a1 + 1;
  double v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        uint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        double v5 = *v7;
        id v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      double v5 = v7[1];
      if (!v5)
      {
        id v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    id v9 = (char *)operator new(0x58uLL);
    *((void *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsPresence>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v12 = a2 - 3;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 4);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v103 = *((void *)a2 - 3);
                uint64_t v104 = *(void *)(v13 + 24);
                if (v103 == v104) {
                  return;
                }
                BOOL v105 = *(char **)(*(void *)a3 + 232);
                BOOL v106 = *(char **)(*(void *)a3 + 240);
                BOOL v107 = v105;
                unint64_t v108 = v105;
                if (v105 == v106) {
                  goto LABEL_171;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsPresence>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder*>((long long *)v13, (long long *)(v13 + 48), a2 - 3, a3);
                return;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsPresence>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, (uint64_t)(a2 - 3), a3);
                return;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsPresence>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, v13 + 144, (uint64_t)(a2 - 3), a3);
                return;
              default:
                JUMPOUT(0);
            }
            do
            {
              if (*(void *)v108 == v103) {
                goto LABEL_168;
              }
              v108 += 8;
            }
            while (v108 != v106);
            unint64_t v108 = *(char **)(*(void *)a3 + 240);
LABEL_168:
            while (*(void *)v107 != v104)
            {
              v107 += 8;
              if (v107 == v106)
              {
                BOOL v107 = *(char **)(*(void *)a3 + 240);
                break;
              }
            }
LABEL_171:
            if (v108 - v105 < v107 - v105)
            {
              *(_OWORD *)v226 = *(_OWORD *)(v13 + 16);
              *(_OWORD *)&v226[16] = *(_OWORD *)(v13 + 32);
              long long v218 = *(_OWORD *)v13;
              long long v109 = *v12;
              long long v110 = *(a2 - 2);
              *(_OWORD *)(v13 + 27) = *(long long *)((char *)a2 - 21);
              *(_OWORD *)unint64_t v13 = v109;
              *(_OWORD *)(v13 + 16) = v110;
              *(long long *)((char *)a2 - 21) = *(_OWORD *)&v226[11];
              long long *v12 = v218;
              *(a2 - 2) = *(_OWORD *)v226;
            }
            return;
          }
          if (v14 <= 1151)
          {
            long long v111 = (long long *)(v13 + 48);
            BOOL v113 = (long long *)v13 == a2 || v111 == a2;
            if (a5)
            {
              if (!v113)
              {
                unint64_t v114 = v13;
                do
                {
                  unint64_t v115 = v114;
                  unint64_t v114 = (unint64_t)v111;
                  uint64_t v116 = *(void *)(v115 + 72);
                  uint64_t v117 = *(void *)(v115 + 24);
                  if (v116 != v117)
                  {
                    id v118 = *(char **)(*(void *)a3 + 232);
                    unint64_t v119 = *(char **)(*(void *)a3 + 240);
                    long long v120 = v118;
                    char v121 = v118;
                    if (v118 != v119)
                    {
                      do
                      {
                        if (*(void *)v121 == v116) {
                          goto LABEL_196;
                        }
                        v121 += 8;
                      }
                      while (v121 != v119);
                      char v121 = *(char **)(*(void *)a3 + 240);
LABEL_196:
                      while (*(void *)v120 != v117)
                      {
                        v120 += 8;
                        if (v120 == v119)
                        {
                          long long v120 = *(char **)(*(void *)a3 + 240);
                          break;
                        }
                      }
                    }
                    if (v121 - v118 < v120 - v118)
                    {
                      uint64_t v227 = *(void *)(v114 + 16);
                      long long v219 = *(_OWORD *)v114;
                      long long v236 = *(_OWORD *)(v115 + 80);
                      unint64_t v122 = v114;
                      while (1)
                      {
                        long long v123 = *(_OWORD *)(v115 + 16);
                        *(_OWORD *)unint64_t v122 = *(_OWORD *)v115;
                        *(_OWORD *)(v122 + 16) = v123;
                        *(_OWORD *)(v122 + 27) = *(_OWORD *)(v115 + 27);
                        if (v115 == v13) {
                          break;
                        }
                        unint64_t v122 = v115;
                        uint64_t v124 = *(void *)(v115 - 24);
                        if (v116 != v124)
                        {
                          uint64_t v125 = *(char **)(*(void *)a3 + 232);
                          long long v126 = *(char **)(*(void *)a3 + 240);
                          long long v127 = v125;
                          uint64_t v128 = v125;
                          if (v125 != v126)
                          {
                            do
                            {
                              if (*(void *)v128 == v116) {
                                goto LABEL_208;
                              }
                              v128 += 8;
                            }
                            while (v128 != v126);
                            uint64_t v128 = *(char **)(*(void *)a3 + 240);
LABEL_208:
                            while (*(void *)v127 != v124)
                            {
                              v127 += 8;
                              if (v127 == v126)
                              {
                                long long v127 = *(char **)(*(void *)a3 + 240);
                                break;
                              }
                            }
                          }
                          unint64_t v115 = v122 - 48;
                          if (v128 - v125 < v127 - v125) {
                            continue;
                          }
                        }
                        goto LABEL_212;
                      }
                      unint64_t v122 = v13;
LABEL_212:
                      *(_OWORD *)unint64_t v122 = v219;
                      *(void *)(v122 + 16) = v227;
                      *(void *)(v122 + 24) = v116;
                      *(void *)(v122 + 32) = v236;
                      *(_DWORD *)(v122 + 39) = *(_DWORD *)((char *)&v236 + 7);
                    }
                  }
                  long long v111 = (long long *)(v114 + 48);
                }
                while ((long long *)(v114 + 48) != a2);
              }
            }
            else if (!v113)
            {
              do
              {
                unint64_t v201 = a1;
                a1 = (unint64_t)v111;
                uint64_t v202 = *(void *)(v201 + 72);
                uint64_t v203 = *(void *)(v201 + 24);
                if (v202 != v203)
                {
                  v204 = *(char **)(*(void *)a3 + 232);
                  v205 = *(char **)(*(void *)a3 + 240);
                  v206 = v204;
                  v207 = v204;
                  if (v204 != v205)
                  {
                    do
                    {
                      if (*(void *)v207 == v202) {
                        goto LABEL_312;
                      }
                      v207 += 8;
                    }
                    while (v207 != v205);
                    v207 = *(char **)(*(void *)a3 + 240);
LABEL_312:
                    while (*(void *)v206 != v203)
                    {
                      v206 += 8;
                      if (v206 == v205)
                      {
                        v206 = *(char **)(*(void *)a3 + 240);
                        break;
                      }
                    }
                  }
                  if (v207 - v204 < v206 - v204)
                  {
                    uint64_t v230 = *(void *)(a1 + 16);
                    long long v222 = *(_OWORD *)a1;
                    long long v239 = *(_OWORD *)(v201 + 80);
                    unint64_t v208 = a1;
                    do
                    {
                      v209 = (_OWORD *)v208;
                      unint64_t v208 = v201;
                      long long v210 = *(_OWORD *)(v201 + 16);
                      _OWORD *v209 = *(_OWORD *)v201;
                      v209[1] = v210;
                      *(_OWORD *)((char *)v209 + 27) = *(_OWORD *)(v201 + 27);
                      uint64_t v211 = *(void *)(v201 - 24);
                      if (v202 == v211) {
                        break;
                      }
                      v212 = *(char **)(*(void *)a3 + 232);
                      v213 = *(char **)(*(void *)a3 + 240);
                      v214 = v212;
                      v215 = v212;
                      if (v212 != v213)
                      {
                        do
                        {
                          if (*(void *)v215 == v202) {
                            goto LABEL_322;
                          }
                          v215 += 8;
                        }
                        while (v215 != v213);
                        v215 = *(char **)(*(void *)a3 + 240);
LABEL_322:
                        while (*(void *)v214 != v211)
                        {
                          v214 += 8;
                          if (v214 == v213)
                          {
                            v214 = *(char **)(*(void *)a3 + 240);
                            break;
                          }
                        }
                      }
                      unint64_t v201 = v208 - 48;
                    }
                    while (v215 - v212 < v214 - v212);
                    *(_OWORD *)unint64_t v208 = v222;
                    *(void *)(v208 + 16) = v230;
                    *(void *)(v208 + 24) = v202;
                    *(void *)(v208 + 32) = v239;
                    *(_DWORD *)(v208 + 39) = *(_DWORD *)((char *)&v239 + 7);
                  }
                }
                long long v111 = (long long *)(a1 + 48);
              }
              while ((long long *)(a1 + 48) != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((long long *)v13 != a2)
            {
              int64_t v129 = (v15 - 2) >> 1;
              int64_t v130 = v129;
              do
              {
                int64_t v131 = v130;
                if (v129 >= v130)
                {
                  uint64_t v132 = (2 * v130) | 1;
                  unint64_t v133 = v13 + 48 * v132;
                  if (2 * v131 + 2 < (uint64_t)v15)
                  {
                    uint64_t v134 = *(void *)(v133 + 24);
                    uint64_t v135 = *(void *)(v133 + 72);
                    if (v134 != v135)
                    {
                      v137 = *(char **)(*(void *)a3 + 232);
                      v136 = *(char **)(*(void *)a3 + 240);
                      v138 = v137;
                      v139 = v137;
                      if (v137 != v136)
                      {
                        do
                        {
                          if (*(void *)v139 == v134) {
                            goto LABEL_224;
                          }
                          v139 += 8;
                        }
                        while (v139 != v136);
                        v139 = *(char **)(*(void *)a3 + 240);
LABEL_224:
                        while (*(void *)v138 != v135)
                        {
                          v138 += 8;
                          if (v138 == v136)
                          {
                            v138 = *(char **)(*(void *)a3 + 240);
                            break;
                          }
                        }
                      }
                      v133 += 48 * (v139 - v137 < v138 - v137);
                      if (v139 - v137 < v138 - v137) {
                        uint64_t v132 = 2 * v131 + 2;
                      }
                    }
                  }
                  unint64_t v140 = v13 + 48 * v131;
                  uint64_t v141 = *(void *)(v133 + 24);
                  uint64_t v142 = *(void *)(v140 + 24);
                  if (v141 == v142) {
                    goto LABEL_238;
                  }
                  v144 = *(char **)(*(void *)a3 + 232);
                  v143 = *(char **)(*(void *)a3 + 240);
                  v145 = v144;
                  v146 = v144;
                  if (v144 != v143)
                  {
                    do
                    {
                      if (*(void *)v146 == v141) {
                        goto LABEL_234;
                      }
                      v146 += 8;
                    }
                    while (v146 != v143);
                    v146 = *(char **)(*(void *)a3 + 240);
LABEL_234:
                    while (*(void *)v145 != v142)
                    {
                      v145 += 8;
                      if (v145 == v143)
                      {
                        v145 = *(char **)(*(void *)a3 + 240);
                        break;
                      }
                    }
                  }
                  if (v146 - v144 >= v145 - v144)
                  {
LABEL_238:
                    uint64_t v228 = *(void *)(v140 + 16);
                    long long v220 = *(_OWORD *)v140;
                    long long v237 = *(_OWORD *)(v140 + 32);
                    long long v147 = *(_OWORD *)v133;
                    long long v148 = *(_OWORD *)(v133 + 16);
                    *(_OWORD *)(v140 + 27) = *(_OWORD *)(v133 + 27);
                    *(_OWORD *)unint64_t v140 = v147;
                    *(_OWORD *)(v140 + 16) = v148;
                    if (v129 >= v132)
                    {
                      while (1)
                      {
                        uint64_t v150 = 2 * v132;
                        uint64_t v132 = (2 * v132) | 1;
                        unint64_t v149 = v13 + 48 * v132;
                        uint64_t v151 = v150 + 2;
                        if (v151 < (uint64_t)v15)
                        {
                          uint64_t v152 = *(void *)(v149 + 24);
                          uint64_t v153 = *(void *)(v149 + 72);
                          if (v152 != v153)
                          {
                            v154 = *(char **)(*(void *)a3 + 232);
                            v155 = *(char **)(*(void *)a3 + 240);
                            v156 = v154;
                            v157 = v154;
                            if (v154 != v155)
                            {
                              do
                              {
                                if (*(void *)v157 == v152) {
                                  goto LABEL_246;
                                }
                                v157 += 8;
                              }
                              while (v157 != v155);
                              v157 = *(char **)(*(void *)a3 + 240);
LABEL_246:
                              while (*(void *)v156 != v153)
                              {
                                v156 += 8;
                                if (v156 == v155)
                                {
                                  v156 = *(char **)(*(void *)a3 + 240);
                                  break;
                                }
                              }
                            }
                            v149 += 48 * (v157 - v154 < v156 - v154);
                            if (v157 - v154 < v156 - v154) {
                              uint64_t v132 = v151;
                            }
                          }
                        }
                        uint64_t v158 = *(void *)(v149 + 24);
                        if (v158 != v142)
                        {
                          v160 = *(char **)(*(void *)a3 + 232);
                          v159 = *(char **)(*(void *)a3 + 240);
                          v161 = v160;
                          v162 = v160;
                          if (v160 != v159)
                          {
                            do
                            {
                              if (*(void *)v162 == v158) {
                                goto LABEL_256;
                              }
                              v162 += 8;
                            }
                            while (v162 != v159);
                            v162 = *(char **)(*(void *)a3 + 240);
LABEL_256:
                            while (*(void *)v161 != v142)
                            {
                              v161 += 8;
                              if (v161 == v159)
                              {
                                v161 = *(char **)(*(void *)a3 + 240);
                                break;
                              }
                            }
                          }
                          if (v162 - v160 < v161 - v160) {
                            break;
                          }
                        }
                        long long v163 = *(_OWORD *)v149;
                        long long v164 = *(_OWORD *)(v149 + 16);
                        *(_OWORD *)(v133 + 27) = *(_OWORD *)(v149 + 27);
                        *(_OWORD *)unint64_t v133 = v163;
                        *(_OWORD *)(v133 + 16) = v164;
                        unint64_t v133 = v149;
                        if (v129 < v132) {
                          goto LABEL_261;
                        }
                      }
                    }
                    unint64_t v149 = v133;
LABEL_261:
                    *(_OWORD *)unint64_t v149 = v220;
                    *(void *)(v149 + 16) = v228;
                    *(void *)(v149 + 24) = v142;
                    *(void *)(v149 + 32) = v237;
                    *(_DWORD *)(v149 + 39) = *(_DWORD *)((char *)&v237 + 7);
                  }
                }
                int64_t v130 = v131 - 1;
              }
              while (v131);
              int64_t v165 = v14 / 0x30uLL;
              do
              {
                uint64_t v166 = 0;
                *(_OWORD *)v229 = *(_OWORD *)(v13 + 16);
                *(_OWORD *)&v229[16] = *(_OWORD *)(v13 + 32);
                long long v221 = *(_OWORD *)v13;
                uint64_t v167 = v165 - 2;
                if (v165 < 2) {
                  uint64_t v167 = v165 - 1;
                }
                uint64_t v168 = v167 >> 1;
                unint64_t v169 = v13;
                do
                {
                  v170 = (_OWORD *)v169;
                  v169 += 48 * v166 + 48;
                  uint64_t v171 = 2 * v166;
                  uint64_t v166 = (2 * v166) | 1;
                  uint64_t v172 = v171 + 2;
                  if (v171 + 2 < v165)
                  {
                    uint64_t v173 = *(void *)(v169 + 24);
                    uint64_t v174 = *(void *)(v169 + 72);
                    if (v173 != v174)
                    {
                      v176 = *(char **)(*(void *)a3 + 232);
                      v175 = *(char **)(*(void *)a3 + 240);
                      v177 = v176;
                      v178 = v176;
                      if (v176 != v175)
                      {
                        do
                        {
                          if (*(void *)v178 == v173) {
                            goto LABEL_273;
                          }
                          v178 += 8;
                        }
                        while (v178 != v175);
                        v178 = *(char **)(*(void *)a3 + 240);
LABEL_273:
                        while (*(void *)v177 != v174)
                        {
                          v177 += 8;
                          if (v177 == v175)
                          {
                            v177 = *(char **)(*(void *)a3 + 240);
                            break;
                          }
                        }
                      }
                      v169 += 48 * (v178 - v176 < v177 - v176);
                      if (v178 - v176 < v177 - v176) {
                        uint64_t v166 = v172;
                      }
                    }
                  }
                  long long v179 = *(_OWORD *)v169;
                  long long v180 = *(_OWORD *)(v169 + 16);
                  *(_OWORD *)((char *)v170 + 27) = *(_OWORD *)(v169 + 27);
                  _OWORD *v170 = v179;
                  v170[1] = v180;
                }
                while (v166 <= v168);
                a2 -= 3;
                if ((long long *)v169 == a2)
                {
                  *(_OWORD *)(v169 + 27) = *(_OWORD *)&v229[11];
                  *(_OWORD *)unint64_t v169 = v221;
                  *(_OWORD *)(v169 + 16) = *(_OWORD *)v229;
                }
                else
                {
                  long long v181 = *a2;
                  long long v182 = a2[1];
                  *(_OWORD *)(v169 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v169 = v181;
                  *(_OWORD *)(v169 + 16) = v182;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v229[11];
                  *a2 = v221;
                  a2[1] = *(_OWORD *)v229;
                  uint64_t v183 = v169 - v13 + 48;
                  if (v183 >= 49)
                  {
                    unint64_t v184 = (v183 / 0x30uLL - 2) >> 1;
                    unint64_t v185 = v13 + 48 * v184;
                    uint64_t v186 = *(void *)(v185 + 24);
                    uint64_t v187 = *(void *)(v169 + 24);
                    if (v186 != v187)
                    {
                      v189 = *(char **)(*(void *)a3 + 232);
                      v188 = *(char **)(*(void *)a3 + 240);
                      v190 = v189;
                      v191 = v189;
                      if (v189 != v188)
                      {
                        do
                        {
                          if (*(void *)v191 == v186) {
                            goto LABEL_286;
                          }
                          v191 += 8;
                        }
                        while (v191 != v188);
                        v191 = *(char **)(*(void *)a3 + 240);
LABEL_286:
                        while (*(void *)v190 != v187)
                        {
                          v190 += 8;
                          if (v190 == v188)
                          {
                            v190 = *(char **)(*(void *)a3 + 240);
                            break;
                          }
                        }
                      }
                      if (v191 - v189 < v190 - v189)
                      {
                        uint64_t v242 = *(void *)(v169 + 16);
                        long long v238 = *(_OWORD *)v169;
                        long long v233 = *(_OWORD *)(v169 + 32);
                        do
                        {
                          v192 = (_OWORD *)v169;
                          unint64_t v169 = v185;
                          long long v193 = *(_OWORD *)v185;
                          long long v194 = *(_OWORD *)(v185 + 16);
                          *(_OWORD *)((char *)v192 + 27) = *(_OWORD *)(v185 + 27);
                          _OWORD *v192 = v193;
                          v192[1] = v194;
                          if (!v184) {
                            break;
                          }
                          unint64_t v184 = (v184 - 1) >> 1;
                          unint64_t v185 = v13 + 48 * v184;
                          uint64_t v195 = *(void *)(v185 + 24);
                          if (v195 == v187) {
                            break;
                          }
                          v197 = *(char **)(*(void *)a3 + 232);
                          v196 = *(char **)(*(void *)a3 + 240);
                          v198 = v197;
                          v199 = v197;
                          if (v197 != v196)
                          {
                            do
                            {
                              if (*(void *)v199 == v195) {
                                goto LABEL_297;
                              }
                              v199 += 8;
                            }
                            while (v199 != v196);
                            v199 = *(char **)(*(void *)a3 + 240);
LABEL_297:
                            while (*(void *)v198 != v187)
                            {
                              v198 += 8;
                              if (v198 == v196)
                              {
                                v198 = *(char **)(*(void *)a3 + 240);
                                break;
                              }
                            }
                          }
                        }
                        while (v199 - v197 < v198 - v197);
                        *(_OWORD *)unint64_t v169 = v238;
                        *(void *)(v169 + 16) = v242;
                        *(void *)(v169 + 24) = v187;
                        *(void *)(v169 + 32) = v233;
                        *(_DWORD *)(v169 + 39) = *(_DWORD *)((char *)&v233 + 7);
                      }
                    }
                  }
                }
              }
              while (v165-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          double v17 = (long long *)(v13 + 48 * (v15 >> 1));
          if ((unint64_t)v14 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsPresence>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v15 >> 1)), a2 - 3, a3);
            uint64_t v18 = 3 * v16;
            double v19 = (long long *)(a1 + 48 * v16 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsPresence>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder*>((long long *)(a1 + 48), v19, a2 - 6, a3);
            double v20 = (long long *)(a1 + 48 + 16 * v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsPresence>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder*>((long long *)(a1 + 96), v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsPresence>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder*>(v19, v17, v20, a3);
            *(_OWORD *)v223 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v223[16] = *(_OWORD *)(a1 + 32);
            long long v216 = *(_OWORD *)a1;
            long long v21 = *(long long *)((char *)v17 + 27);
            long long v22 = v17[1];
            *(_OWORD *)a1 = *v17;
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(a1 + 27) = v21;
            *(long long *)((char *)v17 + 27) = *(_OWORD *)&v223[11];
            *double v17 = v216;
            v17[1] = *(_OWORD *)v223;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsPresence>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder*>((long long *)(a1 + 48 * (v15 >> 1)), (long long *)a1, a2 - 3, a3);
          }
          --a4;
          if (a5)
          {
            uint64_t v23 = *(void *)(a1 + 24);
            uint64_t v24 = *(void *)a3;
            break;
          }
          uint64_t v25 = *(void *)(a1 - 24);
          uint64_t v23 = *(void *)(a1 + 24);
          if (v25 != v23)
          {
            uint64_t v24 = *(void *)a3;
            unint64_t v26 = *(char **)(*(void *)a3 + 232);
            double v27 = *(char **)(*(void *)a3 + 240);
            double v28 = v26;
            double v29 = v26;
            if (v26 != v27)
            {
              do
              {
                if (*(void *)v29 == v25) {
                  goto LABEL_16;
                }
                v29 += 8;
              }
              while (v29 != v27);
              double v29 = *(char **)(*(void *)a3 + 240);
LABEL_16:
              while (*(void *)v28 != v23)
              {
                v28 += 8;
                if (v28 == v27)
                {
                  double v28 = *(char **)(*(void *)a3 + 240);
                  break;
                }
              }
            }
            if (v29 - v26 < v28 - v26) {
              break;
            }
          }
          uint64_t v241 = *(void *)(a1 + 16);
          long long v232 = *(_OWORD *)(a1 + 32);
          long long v235 = *(_OWORD *)a1;
          uint64_t v67 = *((void *)a2 - 3);
          if (v23 == v67) {
            goto LABEL_107;
          }
          uint64_t v68 = *(char **)(*(void *)a3 + 232);
          id v69 = *(char **)(*(void *)a3 + 240);
          if (v68 == v69)
          {
            long long v71 = *(char **)(*(void *)a3 + 232);
            long long v70 = v71;
          }
          else
          {
            long long v70 = *(char **)(*(void *)a3 + 232);
            while (*(void *)v70 != v23)
            {
              v70 += 8;
              if (v70 == v69)
              {
                long long v70 = *(char **)(*(void *)a3 + 240);
                break;
              }
            }
            long long v71 = *(char **)(*(void *)a3 + 232);
            while (*(void *)v71 != v67)
            {
              v71 += 8;
              if (v71 == v69)
              {
                long long v71 = *(char **)(*(void *)a3 + 240);
                break;
              }
            }
          }
          if (v70 - v68 >= v71 - v68)
          {
LABEL_107:
            unint64_t v13 = a1 + 48;
            if (a1 + 48 < (unint64_t)a2)
            {
              uint64_t v75 = *(void *)a3;
              unint64_t v76 = a1;
              do
              {
                uint64_t v77 = *(void *)(v76 + 72);
                unint64_t v76 = v13;
                if (v23 != v77)
                {
                  uint64_t v78 = *(char **)(v75 + 232);
                  int64_t v79 = *(char **)(v75 + 240);
                  uint64_t v80 = v78;
                  long long v81 = v78;
                  if (v78 != v79)
                  {
                    do
                    {
                      if (*(void *)v81 == v23) {
                        goto LABEL_114;
                      }
                      v81 += 8;
                    }
                    while (v81 != v79);
                    long long v81 = *(char **)(v75 + 240);
LABEL_114:
                    while (*(void *)v80 != v77)
                    {
                      v80 += 8;
                      if (v80 == v79)
                      {
                        uint64_t v80 = *(char **)(v75 + 240);
                        break;
                      }
                    }
                  }
                  if (v81 - v78 < v80 - v78) {
                    break;
                  }
                }
                v13 += 48;
              }
              while (v76 + 48 < (unint64_t)a2);
            }
          }
          else
          {
            unint64_t v13 = a1;
            do
            {
              do
              {
                uint64_t v72 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v72);
              if (v68 == v69)
              {
                uint64_t v74 = *(char **)(*(void *)a3 + 232);
                long long v73 = v74;
              }
              else
              {
                long long v73 = *(char **)(*(void *)a3 + 232);
                while (*(void *)v73 != v23)
                {
                  v73 += 8;
                  if (v73 == v69)
                  {
                    long long v73 = *(char **)(*(void *)a3 + 240);
                    break;
                  }
                }
                uint64_t v74 = *(char **)(*(void *)a3 + 232);
                while (*(void *)v74 != v72)
                {
                  v74 += 8;
                  if (v74 == v69)
                  {
                    uint64_t v74 = *(char **)(*(void *)a3 + 240);
                    break;
                  }
                }
              }
            }
            while (v73 - v68 >= v74 - v68);
          }
          unint64_t v82 = a2;
          if (v13 < (unint64_t)a2)
          {
            uint64_t v83 = *(void *)a3;
            unint64_t v82 = a2;
            do
            {
              uint64_t v84 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v84) {
                break;
              }
              unint64_t v85 = *(char **)(v83 + 232);
              long long v86 = *(char **)(v83 + 240);
              unint64_t v87 = v85;
              unint64_t v88 = v85;
              if (v85 != v86)
              {
                do
                {
                  if (*(void *)v88 == v23) {
                    goto LABEL_126;
                  }
                  v88 += 8;
                }
                while (v88 != v86);
                unint64_t v88 = *(char **)(v83 + 240);
LABEL_126:
                while (*(void *)v87 != v84)
                {
                  v87 += 8;
                  if (v87 == v86)
                  {
                    unint64_t v87 = *(char **)(v83 + 240);
                    break;
                  }
                }
              }
            }
            while (v88 - v85 < v87 - v85);
          }
          while (v13 < (unint64_t)v82)
          {
            *(_OWORD *)v225 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v225[16] = *(_OWORD *)(v13 + 32);
            long long v217 = *(_OWORD *)v13;
            long long v89 = *v82;
            long long v90 = v82[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v82 + 27);
            *(_OWORD *)unint64_t v13 = v89;
            *(_OWORD *)(v13 + 16) = v90;
            *(long long *)((char *)v82 + 27) = *(_OWORD *)&v225[11];
            *unint64_t v82 = v217;
            v82[1] = *(_OWORD *)v225;
            uint64_t v91 = *(void *)a3;
            do
            {
              do
              {
                uint64_t v92 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v92);
              unint64_t v93 = *(char **)(v91 + 232);
              long long v94 = *(char **)(v91 + 240);
              if (v93 == v94)
              {
                long long v96 = *(char **)(v91 + 232);
                long long v95 = v96;
              }
              else
              {
                long long v95 = *(char **)(v91 + 232);
                while (*(void *)v95 != v23)
                {
                  v95 += 8;
                  if (v95 == v94)
                  {
                    long long v95 = *(char **)(v91 + 240);
                    break;
                  }
                }
                long long v96 = *(char **)(v91 + 232);
                while (*(void *)v96 != v92)
                {
                  v96 += 8;
                  if (v96 == v94)
                  {
                    long long v96 = *(char **)(v91 + 240);
                    break;
                  }
                }
              }
            }
            while (v95 - v93 >= v96 - v93);
            do
            {
              uint64_t v97 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v97) {
                break;
              }
              if (v93 == v94)
              {
                BOOL v99 = v93;
                int v98 = v93;
              }
              else
              {
                int v98 = v93;
                while (*(void *)v98 != v23)
                {
                  v98 += 8;
                  if (v98 == v94)
                  {
                    int v98 = v94;
                    break;
                  }
                }
                BOOL v99 = v93;
                while (*(void *)v99 != v97)
                {
                  v99 += 8;
                  if (v99 == v94)
                  {
                    BOOL v99 = v94;
                    break;
                  }
                }
              }
            }
            while (v98 - v93 < v99 - v93);
          }
          double v100 = (long long *)(v13 - 48);
          BOOL v5 = v13 - 48 >= a1;
          BOOL v6 = v13 - 48 == a1;
          if (v13 - 48 != a1)
          {
            long long v101 = *v100;
            long long v102 = *(_OWORD *)(v13 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
            *(_OWORD *)a1 = v101;
            *(_OWORD *)(a1 + 16) = v102;
          }
          a5 = 0;
          *double v100 = v235;
          *(void *)(v13 - 32) = v241;
          *(void *)(v13 - 24) = v23;
          *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v232 + 7);
          *(void *)(v13 - 16) = v232;
        }
        uint64_t v240 = *(void *)(a1 + 16);
        long long v231 = *(_OWORD *)(a1 + 32);
        long long v234 = *(_OWORD *)a1;
        unint64_t v30 = a1;
        do
        {
          unint64_t v31 = v30;
          v30 += 48;
          uint64_t v32 = *(void *)(v31 + 72);
          if (v32 == v23) {
            break;
          }
          uint64_t v33 = *(char **)(v24 + 232);
          id v34 = *(char **)(v24 + 240);
          uint64_t v35 = v33;
          char v36 = v33;
          if (v33 != v34)
          {
            do
            {
              if (*(void *)v36 == v32) {
                goto LABEL_26;
              }
              v36 += 8;
            }
            while (v36 != v34);
            char v36 = *(char **)(v24 + 240);
LABEL_26:
            while (*(void *)v35 != v23)
            {
              v35 += 8;
              if (v35 == v34)
              {
                uint64_t v35 = *(char **)(v24 + 240);
                break;
              }
            }
          }
        }
        while (v36 - v33 < v35 - v33);
        long long v37 = a2;
        if (v31 == a1)
        {
          long long v37 = a2;
          if (v30 < (unint64_t)a2)
          {
            long long v37 = a2;
            do
            {
              uint64_t v43 = *((void *)v37 - 3);
              v37 -= 3;
              if (v43 != v23)
              {
                char v44 = *(char **)(v24 + 232);
                uint64_t v45 = *(char **)(v24 + 240);
                long long v46 = v44;
                uint64_t v47 = v44;
                if (v44 != v45)
                {
                  do
                  {
                    if (*(void *)v47 == v43) {
                      goto LABEL_48;
                    }
                    v47 += 8;
                  }
                  while (v47 != v45);
                  uint64_t v47 = *(char **)(v24 + 240);
LABEL_48:
                  while (*(void *)v46 != v23)
                  {
                    v46 += 8;
                    if (v46 == v45)
                    {
                      long long v46 = *(char **)(v24 + 240);
                      break;
                    }
                  }
                }
                if (v47 - v44 < v46 - v44) {
                  break;
                }
              }
            }
            while (v30 < (unint64_t)v37);
          }
        }
        else
        {
          do
          {
            do
            {
              uint64_t v38 = *((void *)v37 - 3);
              v37 -= 3;
            }
            while (v38 == v23);
            unint64_t v39 = *(char **)(v24 + 232);
            unint64_t v40 = *(char **)(v24 + 240);
            uint64_t v41 = v39;
            uint64_t v42 = v39;
            if (v39 != v40)
            {
              do
              {
                if (*(void *)v42 == v38) {
                  goto LABEL_36;
                }
                v42 += 8;
              }
              while (v42 != v40);
              uint64_t v42 = *(char **)(v24 + 240);
LABEL_36:
              while (*(void *)v41 != v23)
              {
                v41 += 8;
                if (v41 == v40)
                {
                  uint64_t v41 = *(char **)(v24 + 240);
                  break;
                }
              }
            }
          }
          while (v42 - v39 >= v41 - v39);
        }
        unint64_t v13 = v30;
        if (v30 < (unint64_t)v37)
        {
          double v48 = v37;
          do
          {
            *(_OWORD *)v224 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v224[16] = *(_OWORD *)(v13 + 32);
            long long v49 = *(_OWORD *)v13;
            long long v51 = *v48;
            long long v50 = v48[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v48 + 27);
            *(_OWORD *)unint64_t v13 = v51;
            *(_OWORD *)(v13 + 16) = v50;
            *(long long *)((char *)v48 + 27) = *(_OWORD *)&v224[11];
            *double v48 = v49;
            v48[1] = *(_OWORD *)v224;
            uint64_t v52 = *(void *)a3;
            do
            {
              uint64_t v53 = *(void *)(v13 + 72);
              v13 += 48;
              if (v53 == v23) {
                break;
              }
              double v54 = *(char **)(v52 + 232);
              double v55 = *(char **)(v52 + 240);
              int v56 = v54;
              unint64_t v57 = v54;
              if (v54 != v55)
              {
                do
                {
                  if (*(void *)v57 == v53) {
                    goto LABEL_61;
                  }
                  v57 += 8;
                }
                while (v57 != v55);
                unint64_t v57 = *(char **)(v52 + 240);
LABEL_61:
                while (*(void *)v56 != v23)
                {
                  v56 += 8;
                  if (v56 == v55)
                  {
                    int v56 = *(char **)(v52 + 240);
                    break;
                  }
                }
              }
            }
            while (v57 - v54 < v56 - v54);
            do
            {
              do
              {
                uint64_t v58 = *((void *)v48 - 3);
                v48 -= 3;
              }
              while (v58 == v23);
              unint64_t v59 = *(char **)(v52 + 232);
              unint64_t v60 = *(char **)(v52 + 240);
              long long v61 = v59;
              long long v62 = v59;
              if (v59 != v60)
              {
                do
                {
                  if (*(void *)v62 == v58) {
                    goto LABEL_70;
                  }
                  v62 += 8;
                }
                while (v62 != v60);
                long long v62 = *(char **)(v52 + 240);
LABEL_70:
                while (*(void *)v61 != v23)
                {
                  v61 += 8;
                  if (v61 == v60)
                  {
                    long long v61 = *(char **)(v52 + 240);
                    break;
                  }
                }
              }
            }
            while (v62 - v59 >= v61 - v59);
          }
          while (v13 < (unint64_t)v48);
        }
        long long v63 = (long long *)(v13 - 48);
        if (v13 - 48 != a1)
        {
          long long v64 = *v63;
          long long v65 = *(_OWORD *)(v13 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
          *(_OWORD *)a1 = v64;
          *(_OWORD *)(a1 + 16) = v65;
        }
        *long long v63 = v234;
        *(void *)(v13 - 32) = v240;
        *(void *)(v13 - 24) = v23;
        *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v231 + 7);
        *(void *)(v13 - 16) = v231;
        if (v30 >= (unint64_t)v37) {
          break;
        }
LABEL_80:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsPresence>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder*,false>(a1, v13 - 48, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsPresence>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder*>(a1, v13 - 48, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsPresence>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder*>(v13, (uint64_t)a2, a3))
      {
        break;
      }
      if (!v66) {
        goto LABEL_80;
      }
    }
    a2 = (long long *)(v13 - 48);
    if (!v66) {
      continue;
    }
    break;
  }
}