__n128 HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::overallStatistics(uint64_t a1, uint64_t a2)
{
  long long v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  __n128 result;
  long long v9;

  v4 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 128);
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 160);
  v5 = *(void *)(a2 + 184);
  *(void *)(a1 + 56) = *(void *)(a2 + 176);
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  v6 = *(const void **)(a2 + 192);
  v7 = *(void *)(a2 + 200);
  *(void *)(a1 + 72) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 72), v6, v7, (v7 - (uint64_t)v6) >> 4);
  *(void *)(a1 + 96) = *(void *)(a2 + 216);
  result = *(__n128 *)(a2 + 224);
  v9 = *(_OWORD *)(a2 + 240);
  *(__n128 *)(a1 + 104) = result;
  *(_OWORD *)(a1 + 120) = v9;
  *(void *)(a1 + 136) = *(void *)(a2 + 256);
  return result;
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  v3 = *(void **)(a2 + 264);
  v48 = (void *)(a2 + 272);
  if (v3 == (void *)(a2 + 272)) {
    return;
  }
  v50 = (void *)(a1 + 16);
  do
  {
    v5 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a2, v3[4]);
    v6 = v5;
    if (!v5) {
      goto LABEL_80;
    }
    unint64_t v7 = [v5 hash];
    unint64_t v8 = v7;
    unint64_t v9 = *(void *)(a1 + 8);
    if (!v9) {
      goto LABEL_21;
    }
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v51 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v2 = v7;
      if (v7 >= v9) {
        unint64_t v2 = v7 % v9;
      }
    }
    else
    {
      unint64_t v2 = (v9 - 1) & v7;
    }
    v11 = *(uint64_t ***)(*(void *)a1 + 8 * v2);
    if (!v11 || (v12 = *v11) == 0)
    {
LABEL_21:
      v19 = (char *)operator new(0xA8uLL);
      v52[0] = v19;
      v52[1] = v50;
      *(void *)v19 = 0;
      *((void *)v19 + 1) = v8;
      *((void *)v19 + 2) = v6;
      *(_OWORD *)(v19 + 24) = 0u;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      *(_OWORD *)(v19 + 104) = 0u;
      *(_OWORD *)(v19 + 120) = 0u;
      *(_OWORD *)(v19 + 136) = 0u;
      *(_OWORD *)(v19 + 152) = 0u;
      char v53 = 1;
      float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v21 = *(float *)(a1 + 32);
      if (v9 && (float)(v21 * (float)v9) >= v20)
      {
LABEL_67:
        v37 = *(void **)(*(void *)a1 + 8 * v2);
        v12 = (uint64_t *)v52[0];
        if (v37)
        {
          *(void *)v52[0] = *v37;
        }
        else
        {
          *(void *)v52[0] = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = v12;
          *(void *)(*(void *)a1 + 8 * v2) = v50;
          if (!*v12)
          {
LABEL_76:
            v52[0] = 0;
            ++*(void *)(a1 + 24);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v52);
            goto LABEL_77;
          }
          unint64_t v38 = *(void *)(*v12 + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v38 >= v9) {
              v38 %= v9;
            }
          }
          else
          {
            v38 &= v9 - 1;
          }
          v37 = (void *)(*(void *)a1 + 8 * v38);
        }
        void *v37 = v12;
        goto LABEL_76;
      }
      BOOL v22 = (v9 & (v9 - 1)) != 0;
      if (v9 < 3) {
        BOOL v22 = 1;
      }
      unint64_t v23 = v22 | (2 * v9);
      unint64_t v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      else {
        int8x8_t prime = (int8x8_t)v23;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v9 = *(void *)(a1 + 8);
      if (*(void *)&prime > v9) {
        goto LABEL_33;
      }
      if (*(void *)&prime < v9)
      {
        unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          unint64_t v32 = std::__next_prime(v32);
        }
        else
        {
          uint64_t v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2) {
            unint64_t v32 = v34;
          }
        }
        if (*(void *)&prime <= v32) {
          int8x8_t prime = (int8x8_t)v32;
        }
        if (*(void *)&prime >= v9)
        {
          unint64_t v9 = *(void *)(a1 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            v26 = operator new(8 * *(void *)&prime);
            v27 = *(void **)a1;
            *(void *)a1 = v26;
            if (v27) {
              operator delete(v27);
            }
            uint64_t v28 = 0;
            *(int8x8_t *)(a1 + 8) = prime;
            do
              *(void *)(*(void *)a1 + 8 * v28++) = 0;
            while (*(void *)&prime != v28);
            v29 = (void *)*v50;
            if (*v50)
            {
              unint64_t v30 = v29[1];
              uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(void *)&prime) {
                  v30 %= *(void *)&prime;
                }
              }
              else
              {
                v30 &= *(void *)&prime - 1;
              }
              *(void *)(*(void *)a1 + 8 * v30) = v50;
              v35 = (void *)*v29;
              if (*v29)
              {
                do
                {
                  unint64_t v36 = v35[1];
                  if (v31.u32[0] > 1uLL)
                  {
                    if (v36 >= *(void *)&prime) {
                      v36 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v36 &= *(void *)&prime - 1;
                  }
                  if (v36 != v30)
                  {
                    if (!*(void *)(*(void *)a1 + 8 * v36))
                    {
                      *(void *)(*(void *)a1 + 8 * v36) = v29;
                      goto LABEL_58;
                    }
                    void *v29 = *v35;
                    void *v35 = **(void **)(*(void *)a1 + 8 * v36);
                    **(void **)(*(void *)a1 + 8 * v36) = v35;
                    v35 = v29;
                  }
                  unint64_t v36 = v30;
LABEL_58:
                  v29 = v35;
                  v35 = (void *)*v35;
                  unint64_t v30 = v36;
                }
                while (v35);
              }
            }
            unint64_t v9 = (unint64_t)prime;
            goto LABEL_62;
          }
          v47 = *(void **)a1;
          *(void *)a1 = 0;
          if (v47) {
            operator delete(v47);
          }
          unint64_t v9 = 0;
          *(void *)(a1 + 8) = 0;
        }
      }
LABEL_62:
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v8 >= v9) {
          unint64_t v2 = v8 % v9;
        }
        else {
          unint64_t v2 = v8;
        }
      }
      else
      {
        unint64_t v2 = (v9 - 1) & v8;
      }
      goto LABEL_67;
    }
    while (1)
    {
      unint64_t v13 = v12[1];
      if (v13 == v8) {
        break;
      }
      if (v51 > 1)
      {
        if (v13 >= v9) {
          v13 %= v9;
        }
      }
      else
      {
        v13 &= v9 - 1;
      }
      if (v13 != v2) {
        goto LABEL_21;
      }
LABEL_20:
      v12 = (uint64_t *)*v12;
      if (!v12) {
        goto LABEL_21;
      }
    }
    id v14 = (id)v12[2];
    v15 = v6;
    id v16 = v6;
    v17 = v16;
    if (v14 != v16)
    {
      char v18 = [v14 isEqualToString:v16];

      v6 = v15;
      if (v18) {
        goto LABEL_77;
      }
      goto LABEL_20;
    }

    v6 = v15;
LABEL_77:
    *((_DWORD *)v12 + 6) = *((_DWORD *)v3 + 10);
    long long v39 = *((_OWORD *)v3 + 3);
    long long v40 = *((_OWORD *)v3 + 4);
    long long v41 = *((_OWORD *)v3 + 5);
    v12[10] = v3[12];
    *((_OWORD *)v12 + 3) = v40;
    *((_OWORD *)v12 + 4) = v41;
    *((_OWORD *)v12 + 2) = v39;
    v12[11] = v3[13];
    if (v12 + 2 != v3 + 4) {
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)v12 + 96, (char *)v3[14], v3[15], (uint64_t)(v3[15] - v3[14]) >> 4);
    }
    v12[15] = v3[17];
    long long v42 = *((_OWORD *)v3 + 9);
    long long v43 = *((_OWORD *)v3 + 10);
    *((_WORD *)v12 + 80) = *((_WORD *)v3 + 88);
    *((_OWORD *)v12 + 8) = v42;
    *((_OWORD *)v12 + 9) = v43;

LABEL_80:
    v44 = (void *)v3[1];
    if (v44)
    {
      do
      {
        v45 = v44;
        v44 = (void *)*v44;
      }
      while (v44);
    }
    else
    {
      do
      {
        v45 = (void *)v3[2];
        BOOL v46 = *v45 == (void)v3;
        v3 = v45;
      }
      while (!v46);
    }
    v3 = v45;
  }
  while (v45 != v48);
}

void sub_1BD054A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);

  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::~__hash_table(v6);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,0>(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1722630;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1722630;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C187B8A0);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0x28uLL);
  *unint64_t v2 = &unk_1F1722630;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BD054D44(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1722630;
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48))(v1) + 56;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsCumulative const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F17226C0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsCumulative const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F17226C0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C187B8A0);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsCumulative const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0x28uLL);
  *unint64_t v2 = &unk_1F17226C0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BD054FDC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsCumulative const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F17226C0;
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsCumulative const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsCumulative const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsCumulative const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  unint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsCumulative const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsCumulative const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsCumulative const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::~__func()
{
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::__clone()
{
  result = operator new(0x10uLL);
  void *result = &unk_1F1722750;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1722750;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 624))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a4, 3, @"Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date");
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
  }
  double v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(void *)(a1 + 40) && a3) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_advanceToTime(a1, v8);
    }
    HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    unint64_t v9 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    uint64_t v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v9, a4);
  }
  return v10;
}

void sub_1BD0553EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_earliestStartTimeWithoutInvalidation(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    if (!*(unsigned char *)(a1 + 624))
    {
      double v1 = *(double *)(a1 + 176);
      double result = *(double *)(a1 + 120);
      if (v1 <= result)
      {
        double v1 = -1.79769313e308;
      }
      else if (*(unsigned char *)(a1 + 144))
      {
        double v1 = -1.79769313e308;
      }
      if (v1 >= result) {
        return v1;
      }
      return result;
    }
    return -1.79769313e308;
  }
  double result = *(double *)(a1 + 176);
  if (result <= *(double *)(a1 + 120)) {
    return -1.79769313e308;
  }
  if (*(unsigned char *)(a1 + 144)) {
    return -1.79769313e308;
  }
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_advanceToTime(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 128) <= a2)
  {
    uint64_t v4 = a1 + 112;
    uint64_t v5 = a1 + 120;
    do
    {
      uint64_t v6 = *(void *)(a1 + 600);
      uint64_t v7 = *(void *)(a1 + 592);
      if (v6 == v7)
      {
        uint64_t v22 = 0;
        v15 = *(void **)(a1 + 40);
        id v16 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a2];
        double v8 = [v15 dateIntervalContainingDate:v16 index:&v22];

        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        unint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v17 = v22;
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v19 = v18;
        float v20 = [v8 endDate];
        [v20 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::resetToBucket(v4, v17, v19, v21);
      }
      else
      {
        double v8 = [*(id *)(a1 + 40) dateIntervalAtIndex:*(void *)(a1 + 112) + 1];
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        unint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v12 = v11;
        unint64_t v13 = [v8 endDate];
        [v13 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::advanceBucket(v4, v12, v14);
      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_didChangeBucket(a1, v9);
      if (v6 != v7) {
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
      }
    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1BD055678(_Unwind_Exception *exception_object)
{
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a1 + 8;
  double v6 = *(double *)a2;
  double v7 = *(double *)(a2 + 8);
  double v8 = *(double *)(a2 + 16);
  unint64_t v9 = *(uint64_t **)(a2 + 24);
  unsigned __int8 v10 = *(unsigned char *)(a2 + 32);
  char v11 = *(unsigned char *)(a2 + 33);
  double v12 = *(double *)(a1 + 8) - v7;
  int v13 = v10;
  unint64_t v14 = (unint64_t)v9;
  char v15 = v11;
  double v16 = v8;
  double v17 = v7;
  double v18 = *(double *)a2;
  if (v12 >= 0.01)
  {
    if (v8 - v7 - v12 >= 0.01)
    {
      int v13 = *(unsigned __int8 *)(a2 + 32);
      double v18 = v6 - v6 * (v12 / (v8 - v7));
      unint64_t v14 = *(void *)(a2 + 24);
      char v15 = *(unsigned char *)(a2 + 33);
      double v16 = *(double *)(a2 + 16);
      double v17 = *(double *)(a1 + 8);
    }
    else
    {
      int v13 = 0;
      unint64_t v14 = 0;
      char v15 = 0;
      double v16 = 0.0;
      double v17 = 0.0;
      double v18 = 0.0;
    }
  }
  double v19 = *(double *)(a1 + 16);
  double v20 = v19 - v17;
  double v21 = v16 - v17;
  double v22 = v16 - v17 - (v19 - v17);
  if (*(_DWORD *)(a1 + 36))
  {
    if (v20 >= 0.01)
    {
      if (v22 >= 0.01)
      {
LABEL_24:
        double v25 = v16;
        unint64_t v68 = v14;
        double v24 = v18 - v18 * (v20 / v21);
        int v23 = v13;
        char v69 = v15;
        double v16 = *(double *)(a1 + 16);
        double v18 = v18 * (v20 / v21);
        if (!v13) {
          goto LABEL_25;
        }
        goto LABEL_11;
      }
LABEL_10:
      unint64_t v68 = 0;
      int v23 = 0;
      char v69 = 0;
      double v24 = 0.0;
      double v19 = 0.0;
      double v25 = 0.0;
      if (!v13)
      {
LABEL_25:
        char v15 = v69;
        goto LABEL_63;
      }
LABEL_11:
      double v66 = v17;
      double v67 = v16;
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 296, v14, v14);
      unint64_t v26 = *(void *)(a1 + 112);
      if (v26 == *(void *)(a1 + 104) && *(uint64_t *)(a1 + 144) <= 0)
      {
        v31.f64[1] = *(float64_t *)(a1 + 16);
        double v28 = v66;
        double v27 = v67;
        v31.f64[0] = v66;
        v32.f64[0] = *(float64_t *)(a1 + 8);
        v32.f64[1] = v67;
        int8x16_t v33 = (int8x16_t)vcgtq_f64(v32, v31);
        v32.f64[0] = v66;
        *(int8x16_t *)(a1 + 48) = vbslq_s8(v33, *(int8x16_t *)(a1 + 8), (int8x16_t)v32);
      }
      else
      {
        double v28 = v66;
        double v27 = v67;
        if (v66 < *(double *)(a1 + 48))
        {
          double v29 = *(double *)(a1 + 8);
          if (v66 >= v29) {
            double v29 = v66;
          }
          *(double *)(a1 + 48) = v29;
        }
        if (v67 > *(double *)(a1 + 56))
        {
          double v30 = *(double *)(a1 + 16);
          if (v30 >= v67) {
            double v30 = v67;
          }
          *(double *)(a1 + 56) = v30;
        }
      }
      if (*(unsigned char *)(a1 + 32))
      {
        double v34 = *(double *)(a1 + 64);
        if (v28 < v34) {
          double v34 = v28;
        }
        *(double *)(a1 + 64) = v34;
      }
      if (a3 && v28 < *(double *)(a1 + 16))
      {
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeThroughTime(v5, v28);
        double v28 = v66;
        double v27 = v67;
        unint64_t v26 = *(void *)(a1 + 112);
      }
      unint64_t v35 = *(void *)(a1 + 120);
      if (v26 >= v35)
      {
        uint64_t v37 = *(void *)(a1 + 104);
        unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - v37) >> 4);
        unint64_t v39 = v38 + 1;
        if (v38 + 1 > 0x555555555555555) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - v37) >> 4);
        if (2 * v40 > v39) {
          unint64_t v39 = 2 * v40;
        }
        if (v40 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v41 = 0x555555555555555;
        }
        else {
          unint64_t v41 = v39;
        }
        if (v41)
        {
          unint64_t v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v41);
          double v28 = v66;
          double v27 = v67;
        }
        else
        {
          uint64_t v42 = 0;
        }
        unint64_t v43 = v41 + 48 * v38;
        unint64_t v44 = v41 + 48 * v42;
        *(double *)unint64_t v43 = v18;
        *(double *)(v43 + 8) = v28;
        *(double *)(v43 + 16) = v27;
        *(void *)(v43 + 24) = v14;
        *(unsigned char *)(v43 + 32) = v13;
        *(unsigned char *)(v43 + 33) = v15;
        *(_WORD *)(v43 + 40) = 0;
        *(unsigned char *)(v43 + 42) = 0;
        unint64_t v36 = v43 + 48;
        BOOL v46 = *(char **)(a1 + 104);
        v45 = *(char **)(a1 + 112);
        if (v45 == v46)
        {
          char v15 = v69;
        }
        else
        {
          char v15 = v69;
          do
          {
            long long v47 = *((_OWORD *)v45 - 3);
            long long v48 = *((_OWORD *)v45 - 2);
            *(_OWORD *)(v43 - 21) = *(_OWORD *)(v45 - 21);
            *(_OWORD *)(v43 - 48) = v47;
            *(_OWORD *)(v43 - 32) = v48;
            v43 -= 48;
            v45 -= 48;
          }
          while (v45 != v46);
          v45 = *(char **)(a1 + 104);
        }
        *(void *)(a1 + 104) = v43;
        *(void *)(a1 + 112) = v36;
        *(void *)(a1 + 120) = v44;
        if (v45) {
          operator delete(v45);
        }
      }
      else
      {
        *(double *)unint64_t v26 = v18;
        *(double *)(v26 + 8) = v28;
        *(double *)(v26 + 16) = v27;
        *(void *)(v26 + 24) = v14;
        *(unsigned char *)(v26 + 32) = v13;
        *(unsigned char *)(v26 + 33) = v15;
        *(_WORD *)(v26 + 40) = 0;
        unint64_t v36 = v26 + 48;
        *(unsigned char *)(v26 + 42) = 0;
        char v15 = v69;
      }
      *(void *)(a1 + 112) = v36;
      if (!*(unsigned char *)(a1 + 264) || *(double *)(a1 + 240) <= v7)
      {
        *(double *)(a1 + 232) = v6;
        *(double *)(a1 + 240) = v7;
        *(double *)(a1 + 248) = v8;
        *(void *)(a1 + 256) = v9;
        *(unsigned char *)(a1 + 264) = v10;
        *(unsigned char *)(a1 + 265) = v11;
        if (!*(unsigned char *)(a1 + 184) || *(double *)(a1 + 160) <= v7)
        {
          *(double *)(a1 + 152) = v6;
          *(double *)(a1 + 160) = v7;
          *(double *)(a1 + 168) = v8;
          *(void *)(a1 + 176) = v9;
          *(unsigned char *)(a1 + 184) = v10;
          *(unsigned char *)(a1 + 185) = v11;
        }
      }
      if (*(unsigned char *)(a1 + 33))
      {
        unint64_t v49 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(v5, v14);
        v50 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_statisticsForSource(v5, v49);
        if (!*((unsigned char *)v50 + 136) || *((double *)v50 + 14) <= v7)
        {
          *((double *)v50 + 13) = v6;
          *((double *)v50 + 14) = v7;
          *((double *)v50 + 15) = v8;
          v50[16] = v9;
          *((unsigned char *)v50 + 136) = v10;
          *((unsigned char *)v50 + 137) = v11;
          if (!*((unsigned char *)v50 + 56) || *((double *)v50 + 4) <= v7)
          {
            *((double *)v50 + 3) = v6;
            *((double *)v50 + 4) = v7;
            *((double *)v50 + 5) = v8;
            v50[6] = v9;
            *((unsigned char *)v50 + 56) = v10;
            *((unsigned char *)v50 + 57) = v11;
          }
        }
      }
LABEL_63:
      unint64_t v14 = v68;
      if (!v23) {
        return;
      }
      goto LABEL_64;
    }
  }
  else
  {
    if (v22 < 0.01) {
      goto LABEL_10;
    }
    if (v20 >= 0.01) {
      goto LABEL_24;
    }
  }
  LOBYTE(v23) = v13;
  double v25 = v16;
  double v19 = v17;
  double v24 = v18;
  if (!v13) {
    return;
  }
LABEL_64:
  unint64_t v51 = *(void *)(a1 + 488);
  unint64_t v52 = *(void *)(a1 + 496);
  if (v51 >= v52)
  {
    uint64_t v54 = *(void *)(a1 + 480);
    unint64_t v55 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v51 - v54) >> 3);
    unint64_t v56 = v55 + 1;
    if (v55 + 1 > 0x666666666666666) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v57 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v52 - v54) >> 3);
    if (2 * v57 > v56) {
      unint64_t v56 = 2 * v57;
    }
    if (v57 >= 0x333333333333333) {
      unint64_t v58 = 0x666666666666666;
    }
    else {
      unint64_t v58 = v56;
    }
    if (v58) {
      unint64_t v58 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v58);
    }
    else {
      uint64_t v59 = 0;
    }
    unint64_t v60 = v58 + 40 * v55;
    unint64_t v61 = v58 + 40 * v59;
    *(double *)unint64_t v60 = v24;
    *(double *)(v60 + 8) = v19;
    *(double *)(v60 + 16) = v25;
    *(void *)(v60 + 24) = v14;
    *(unsigned char *)(v60 + 32) = v23;
    *(unsigned char *)(v60 + 33) = v15;
    unint64_t v53 = v60 + 40;
    v63 = *(char **)(a1 + 480);
    v62 = *(char **)(a1 + 488);
    if (v62 != v63)
    {
      do
      {
        long long v64 = *(_OWORD *)(v62 - 40);
        long long v65 = *(_OWORD *)(v62 - 24);
        *(_WORD *)(v60 - 8) = *((_WORD *)v62 - 4);
        *(_OWORD *)(v60 - 24) = v65;
        *(_OWORD *)(v60 - 40) = v64;
        v60 -= 40;
        v62 -= 40;
      }
      while (v62 != v63);
      v62 = *(char **)(a1 + 480);
    }
    *(void *)(a1 + 480) = v60;
    *(void *)(a1 + 488) = v53;
    *(void *)(a1 + 496) = v61;
    if (v62) {
      operator delete(v62);
    }
  }
  else
  {
    *(double *)unint64_t v51 = v24;
    *(double *)(v51 + 8) = v19;
    *(double *)(v51 + 16) = v25;
    *(void *)(v51 + 24) = v14;
    *(unsigned char *)(v51 + 32) = v23;
    unint64_t v53 = v51 + 40;
    *(unsigned char *)(v51 + 33) = v15;
  }
  *(void *)(a1 + 488) = v53;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 626))
  {
    *(unsigned char *)(a1 + 628) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 628) = 0;
    unint64_t v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      uint64_t v4 = v2;
      uint64_t v3 = (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      if (v3) {
        v4[2](v4, v3);
      }

      unint64_t v2 = v4;
    }
  }
}

void sub_1BD055CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  unint64_t v9 = 0;
  unsigned __int8 v10 = 0;
  uint64_t v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 480), *(void *)(a1 + 488), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 488) - *(void *)(a1 + 480)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::resetToBucket(a1, *(void *)a1 + 1, a2, a3);
  double v6 = v9;
  double v7 = v10;
  if (v9 != v10)
  {
    uint64_t v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BD055DE8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8 = (id *)(a1 + 40);
  objc_storeStrong((id *)(a1 + 504), *(id *)(a1 + 40));
  *((double *)v8 - 4) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  long long v9 = 0uLL;
  memset(v18, 0, sizeof(v18));
  unsigned __int8 v10 = *(void **)(a1 + 200);
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)&v18[4];
  *(_OWORD *)(a1 + 152) = *(_OWORD *)&v18[20];
  *(_OWORD *)(a1 + 168) = *(_OWORD *)&v18[36];
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  if (v10)
  {
    *(void *)(a1 + 208) = v10;
    operator delete(v10);
    long long v9 = 0uLL;
  }
  *(_WORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 232) = v9;
  *(_OWORD *)(a1 + 248) = v9;
  *(_OWORD *)(a1 + 200) = v9;
  *(_OWORD *)(a1 + 216) = v9;
  if (*(void *)(a1 + 288))
  {
    uint64_t v11 = *(void **)(a1 + 272);
    uint64_t v12 = *(void *)(a1 + 280);
    *(void *)(a1 + 272) = a1 + 280;
    *(void *)(v12 + 16) = 0;
    *(void *)(a1 + 280) = 0;
    *(void *)(a1 + 288) = 0;
    if (v11[1]) {
      int v13 = (void *)v11[1];
    }
    else {
      int v13 = v11;
    }
    if (v13)
    {
      unint64_t v14 = (void *)v13[2];
      if (v14)
      {
        char v15 = (void *)*v14;
        if ((void *)*v14 == v13)
        {
          *unint64_t v14 = 0;
          while (1)
          {
            double v17 = (void *)v14[1];
            if (!v17) {
              break;
            }
            do
            {
              unint64_t v14 = v17;
              double v17 = (void *)*v17;
            }
            while (v17);
          }
        }
        else
        {
          for (v14[1] = 0; v15; char v15 = (void *)v14[1])
          {
            do
            {
              unint64_t v14 = v15;
              char v15 = (void *)*v15;
            }
            while (v15);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::destroy(v13);
        for (i = (void *)v14[2]; i; i = (void *)i[2])
          unint64_t v14 = i;
        int v13 = v14;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::destroy(v13);
  }
  objc_storeStrong(v8, *(id *)(a1 + 504));
  *(void *)(a1 + 488) = *(void *)(a1 + 480);
  *(void *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 628))
  {
    if (v3)
    {
      id v6 = v3;
      uint64_t v4 = _Block_copy(*(const void **)(a1 + 96));
      uint64_t v5 = v4;
      if (v4) {
        (*((void (**)(void *, id))v4 + 2))(v4, v6);
      }

      id v3 = v6;
    }
    *(unsigned char *)(a1 + 628) = 0;
  }
}

void sub_1BD05601C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_currentBucketInterval(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 624))
  {
    double v1 = 0;
  }
  else
  {
    double v1 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", *(double *)(a1 + 120), *(double *)(a1 + 128));
  }

  return v1;
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 startDate];
  id v6 = [v4 startDate];
  uint64_t v7 = [v5 compare:v6];

  return v7;
}

void sub_1BD0560F0(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 13);
  if (WeakRetained)
  {
    if (v5
      && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_currentBucketInterval((uint64_t)a1),
          (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v8 = [v5 endDate];
      long long v9 = [v7 startDate];
      if (objc_msgSend(v8, "hk_isAfterDate:", v9))
      {
        unsigned __int8 v10 = [v5 startDate];
        uint64_t v11 = [v7 endDate];
        char v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);
      }
      else
      {
        char v12 = 0;
      }

      int v13 = _Block_copy(a1[12]);
      if ((v12 & 1) == 0) {
        operator new();
      }
    }
    else
    {
      int v13 = _Block_copy(a1[12]);
    }
    *((unsigned char *)a1 + 624) = 1;
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
    v27[3] = &unk_1E6308FF8;
    id v15 = v5;
    id v28 = v15;
    id v16 = v13;
    id v29 = v16;
    (*((void (**)(id *, void *))*a1 + 9))(a1, v27);
    if (v5)
    {
      double v17 = [v15 startDate];
      [v17 timeIntervalSinceReferenceDate];
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_configureForStartTime((uint64_t)a1);
    }
    else
    {
      (*((void (**)(id *))*a1 + 4))(a1);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
    v21[3] = &unk_1E6309060;
    double v24 = a1;
    id v5 = v15;
    char v26 = 1;
    id v22 = v5;
    double v25 = a1;
    id v23 = WeakRetained;
    uint64_t v14 = (*((uint64_t (**)(id *, void *, uint64_t))*a1 + 14))(a1, v21, a3);
    double v18 = _Block_copy(v16);
    id v19 = a1[12];
    a1[12] = v18;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to invalidate interval: no data source available.");
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1BD056540(_Unwind_Exception *a1)
{
  MEMORY[0x1C187B8A0](v4, 0x10F1C40E5794905);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_11;
  }
  id v3 = [v10 endDate];
  uint64_t v4 = [*(id *)(a1 + 32) startDate];
  char v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    id v6 = [v10 startDate];
    uint64_t v7 = [*(id *)(a1 + 32) endDate];
    char v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_11:
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9) {
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
      }
    }
  }
}

void sub_1BD056724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = [*(id *)(a1 + 32) startDate];
  [v5 timeIntervalSinceReferenceDate];
  uint64_t v7 = v6;

  char v8 = [*(id *)(a1 + 32) endDate];
  [v8 timeIntervalSinceReferenceDate];
  uint64_t v10 = v9;

  uint64_t v11 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  uint64_t v13 = *(void *)(a1 + 32);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  char v32 = *(unsigned char *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  uint64_t v31 = *(void *)(a1 + 56);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  uint64_t v14 = [v11 collectionCalculator:WeakRetained queryForInterval:v13 error:a2 sampleHandler:v30 mergeHandler:v29];

  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15 != v4)
    {
      id v16 = [*(id *)(a1 + 32) endDate];
      [v16 timeIntervalSinceReferenceDate];
      if (*(void *)(v15 + 40))
      {
        double v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          id v19 = [*(id *)(v15 + 40) dateIntervalAtIndex:*(void *)(v15 + 112) + 1];
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          double v20 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(v15, v15 + 120);
          double v21 = [v19 startDate];
          [v21 timeIntervalSinceReferenceDate];
          double v23 = v22;
          double v24 = [v19 endDate];
          [v24 timeIntervalSinceReferenceDate];
          HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            char v26 = _Block_copy(*(const void **)(v15 + 96));
            double v27 = v26;
            if (v26) {
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);
            }
          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_didChangeBucket(v15, 0);
        }
      }
    }
  }
  return v14;
}

void sub_1BD0569D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7 = *(double *)(a1 + 32) - a6;
  if (v7 >= 0.01)
  {
    double v9 = a7 - a6;
    if (v9 - v7 >= 0.01)
    {
      a5 = a5 - v7 / v9 * a5;
      int v8 = 1;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      int v8 = 0;
      a5 = 0.0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    int v8 = 1;
  }
  *(double *)uint64_t v13 = a5;
  *(double *)&v13[1] = a6;
  double v14 = a7;
  uint64_t v15 = a2;
  char v16 = v8;
  char v17 = 0;
  if (*(unsigned char *)(a1 + 56))
  {
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)v13, a3, a4);
    }
  }
  else
  {
    double v11 = *(double *)(a1 + 40) - a6;
    if (v11 >= 0.01)
    {
      double v12 = a7 - a6;
      if (v12 - v11 >= 0.01)
      {
        a5 = a5 * (v11 / v12);
        a7 = *(double *)(a1 + 40);
      }
    }
    else
    {
      int v8 = 0;
    }
    *(double *)uint64_t v13 = a5;
    double v14 = a7;
    char v16 = v8;
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)v13, a3, a4);
    }
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 624)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
  }
  if (*(void *)(a1 + 40)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_advanceToTime(a1, a2);
  }
  if (*(double *)(a1 + 128) > a2)
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeThroughTime(a1 + 120, a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 32) < *(double *)(v10 + 8))
                {
                  uint64_t v129 = *(void *)(v10 + 32);
                  long long v113 = *(_OWORD *)v10;
                  long long v121 = *(_OWORD *)(v10 + 16);
                  long long v52 = *(_OWORD *)(a2 - 40);
                  long long v53 = *(_OWORD *)(a2 - 24);
                  *(_WORD *)(v10 + 32) = *(_WORD *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(_WORD *)(a2 - 8) = v129;
                  *(_OWORD *)(a2 - 24) = v121;
                  *(_OWORD *)(a2 - 40) = v113;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v10, (double *)(v10 + 40), (double *)(a2 - 40));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, v10 + 120, a2 - 40);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            uint64_t v54 = (void *)(v10 + 40);
            BOOL v56 = v10 == a2 || v54 == (void *)a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  uint64_t v59 = v54;
                  double v60 = *(double *)(v58 + 48);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *v54;
                    long long v114 = *(_OWORD *)(v58 + 56);
                    uint64_t v122 = *(void *)(v58 + 72);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      uint64_t v63 = v10 + v62;
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      *(_OWORD *)(v63 + 40) = *(_OWORD *)(v10 + v62);
                      *(_OWORD *)(v63 + 56) = v64;
                      *(_WORD *)(v63 + 72) = *(_WORD *)(v10 + v62 + 32);
                      if (!v62) {
                        break;
                      }
                      v62 -= 40;
                      if (v60 >= *(double *)(v63 - 32))
                      {
                        uint64_t v65 = v10 + v62 + 40;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = v114;
                    *(_WORD *)(v65 + 32) = v122;
                  }
                  uint64_t v54 = v59 + 5;
                  v57 += 40;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 5 != (void *)a2);
              }
            }
            else if (!v56)
            {
              do
              {
                v98 = v54;
                double v99 = *(double *)(a1 + 48);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *v54;
                  long long v117 = *(_OWORD *)(a1 + 56);
                  uint64_t v125 = *(void *)(a1 + 72);
                  v101 = v54;
                  do
                  {
                    long long v102 = *(_OWORD *)(v101 - 3);
                    *(_OWORD *)v101 = *(_OWORD *)(v101 - 5);
                    *((_OWORD *)v101 + 1) = v102;
                    *((_WORD *)v101 + 16) = *((_WORD *)v101 - 4);
                    double v103 = *((double *)v101 - 9);
                    v101 -= 5;
                  }
                  while (v99 < v103);
                  void *v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *((_WORD *)v101 + 16) = v125;
                  *((_OWORD *)v101 + 1) = v117;
                }
                v54 += 5;
                a1 = (unint64_t)v98;
              }
              while (v98 + 5 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 40 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v10 + 40 * v69 + 8) < *(double *)(v70 + 48))
                  {
                    v70 += 40;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  double v71 = *(double *)(v10 + 40 * v68 + 8);
                  if (*(double *)(v70 + 8) >= v71)
                  {
                    unint64_t v72 = v10 + 40 * v68;
                    uint64_t v73 = *(void *)v72;
                    uint64_t v123 = *(void *)(v72 + 32);
                    long long v115 = *(_OWORD *)(v72 + 16);
                    do
                    {
                      unint64_t v74 = v72;
                      unint64_t v72 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_WORD *)(v74 + 32) = *(_WORD *)(v70 + 32);
                      *(_OWORD *)unint64_t v74 = v75;
                      *(_OWORD *)(v74 + 16) = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 40 * v77;
                      uint64_t v78 = 2 * v69 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v10 + 40 * v77 + 8) < *(double *)(v70 + 48))
                      {
                        v70 += 40;
                        uint64_t v77 = v78;
                      }
                      uint64_t v69 = v77;
                    }
                    while (*(double *)(v70 + 8) >= v71);
                    *(void *)unint64_t v72 = v73;
                    *(double *)(v72 + 8) = v71;
                    *(_OWORD *)(v72 + 16) = v115;
                    *(_WORD *)(v72 + 32) = v123;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x28uLL;
              do
              {
                uint64_t v80 = 0;
                uint64_t v130 = *(void *)(v10 + 32);
                long long v116 = *(_OWORD *)v10;
                long long v124 = *(_OWORD *)(v10 + 16);
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = v81;
                  uint64_t v83 = v80 + 1;
                  v81 += 40 * (v80 + 1);
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v85 = v84 + 2;
                  if (v85 < v79 && *(double *)(v82 + 40 * v83 + 8) < *(double *)(v81 + 48))
                  {
                    v81 += 40;
                    uint64_t v80 = v85;
                  }
                  long long v86 = *(_OWORD *)v81;
                  long long v87 = *(_OWORD *)(v81 + 16);
                  *(_WORD *)(v82 + 32) = *(_WORD *)(v81 + 32);
                  *(_OWORD *)unint64_t v82 = v86;
                  *(_OWORD *)(v82 + 16) = v87;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 40;
                if (v81 == a2)
                {
                  *(_WORD *)(v81 + 32) = v130;
                  *(_OWORD *)unint64_t v81 = v116;
                  *(_OWORD *)(v81 + 16) = v124;
                }
                else
                {
                  long long v88 = *(_OWORD *)a2;
                  long long v89 = *(_OWORD *)(a2 + 16);
                  *(_WORD *)(v81 + 32) = *(_WORD *)(a2 + 32);
                  *(_OWORD *)unint64_t v81 = v88;
                  *(_OWORD *)(v81 + 16) = v89;
                  *(_WORD *)(a2 + 32) = v130;
                  *(_OWORD *)a2 = v116;
                  *(_OWORD *)(a2 + 16) = v124;
                  uint64_t v90 = v81 - v10 + 40;
                  if (v90 >= 41)
                  {
                    unint64_t v91 = (v90 / 0x28uLL - 2) >> 1;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v10 + 40 * v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      uint64_t v109 = *(void *)(v81 + 32);
                      long long v106 = *(_OWORD *)(v81 + 16);
                      do
                      {
                        unint64_t v94 = v81;
                        unint64_t v81 = v10 + 40 * v91;
                        long long v95 = *(_OWORD *)v81;
                        long long v96 = *(_OWORD *)(v81 + 16);
                        *(_WORD *)(v94 + 32) = *(_WORD *)(v81 + 32);
                        *(_OWORD *)unint64_t v94 = v95;
                        *(_OWORD *)(v94 + 16) = v96;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 40 * v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_WORD *)(v81 + 32) = v109;
                      *(_OWORD *)(v81 + 16) = v106;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40 * (v12 >> 1)), (double *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            char v16 = (double *)(a1 + 40 * v13 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40), v16, (double *)(a2 - 80));
            char v17 = (double *)(a1 + 40 + 8 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 80), v17, (double *)(a2 - 120));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v16, (double *)v14, v17);
            uint64_t v126 = *(void *)(a1 + 32);
            long long v110 = *(_OWORD *)a1;
            long long v118 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 16) = v19;
            *(_WORD *)(v14 + 32) = v126;
            *(_OWORD *)unint64_t v14 = v110;
            *(_OWORD *)(v14 + 16) = v118;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40 * (v12 >> 1)), (double *)a1, (double *)(a2 - 40));
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 32) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          long long v105 = *(_OWORD *)(a1 + 16);
          uint64_t v108 = *(void *)(a1 + 32);
          if (v20 >= *(double *)(a2 - 32))
          {
            unint64_t v41 = a1 + 40;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 40;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 40;
              double v40 = *(double *)(v39 + 48);
              v39 += 40;
            }
            while (v20 >= v40);
          }
          unint64_t v43 = a2;
          if (v10 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              unint64_t v43 = v44 - 40;
              double v45 = *(double *)(v44 - 32);
              v44 -= 40;
            }
            while (v20 < v45);
          }
          while (v10 < v43)
          {
            uint64_t v128 = *(void *)(v10 + 32);
            long long v112 = *(_OWORD *)v10;
            long long v120 = *(_OWORD *)(v10 + 16);
            long long v46 = *(_OWORD *)v43;
            long long v47 = *(_OWORD *)(v43 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v43 + 32);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(_WORD *)(v43 + 32) = v128;
            *(_OWORD *)unint64_t v43 = v112;
            *(_OWORD *)(v43 + 16) = v120;
            do
            {
              double v48 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *(double *)(v43 - 32);
              v43 -= 40;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 40);
            long long v51 = *(_OWORD *)(v10 - 24);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 40) = v38;
          *(double *)(v10 - 32) = v20;
          *(_WORD *)(v10 - 8) = v108;
          *(_OWORD *)(v10 - 24) = v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        long long v104 = *(_OWORD *)(a1 + 16);
        uint64_t v107 = *(void *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 48);
          v21 += 40;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        unint64_t v25 = a2;
        if (v21 == 40)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 40;
            double v29 = *(double *)(v28 - 32);
            v28 -= 40;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 40;
            double v27 = *(double *)(v25 - 32);
            v25 -= 40;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v127 = *(void *)(v10 + 32);
            long long v111 = *(_OWORD *)v10;
            long long v119 = *(_OWORD *)(v10 + 16);
            long long v31 = *(_OWORD *)v30;
            long long v32 = *(_OWORD *)(v30 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v30 + 32);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(_WORD *)(v30 + 32) = v127;
            *(_OWORD *)unint64_t v30 = v111;
            *(_OWORD *)(v30 + 16) = v119;
            do
            {
              double v33 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v33 < v20);
            do
            {
              double v34 = *(double *)(v30 - 32);
              v30 -= 40;
            }
            while (v34 >= v20);
          }
          while (v10 < v30);
        }
        if (v10 - 40 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 40);
          long long v36 = *(_OWORD *)(v10 - 24);
          *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 40) = v22;
        *(double *)(v10 - 32) = v20;
        *(_WORD *)(v10 - 8) = v107;
        *(_OWORD *)(v10 - 24) = v104;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 40;
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        __int16 v9 = *(_WORD *)(a2 - 8);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      uint64_t v16 = *(void *)v12;
      long long v21 = *(_OWORD *)(v12 + 16);
      uint64_t v22 = *(void *)(v12 + 32);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(void *)uint64_t v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(void *a1, uint64_t a2)
{
  id v3 = (void *)a1[5];
  uint64_t v4 = a1[6];
  BOOL v5 = (void *)a1[4];
  uint64_t v6 = [v5 dateInterval];
  v9[4] = v4;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  uint64_t v7 = [v3 collectionCalculator:v5 queryForInterval:v6 error:a2 sampleHandler:v10 mergeHandler:v9];

  return v7;
}

void sub_1BD057770(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10 = *(void *)(a1 + 32);
  *(double *)int v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  char v15 = 1;
  uint64_t v11 = [MEMORY[0x1E4F1C9C8] distantFuture];
  [v11 timeIntervalSinceReferenceDate];
  BOOL v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1BD057814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
}

void HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::archive(uint64_t a1, int *a2)
{
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 112);
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F171B978;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  statistics::Statistics::makePrimaryStatistics(a1);
  HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>::archive((uint64_t)v6, (int8x16_t *)(a2 + 2));
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v6);
  statistics::Statistics::~Statistics((statistics::Statistics *)v6);
  uint64_t v5 = *a2;
  *(_DWORD *)(a1 + 204) |= 0x100u;
  *(void *)(a1 + 136) = v5;
  statistics::Statistics::makeMostRecentDatum(a1);
  v6[0] = &unk_1F17206F8;
  int v10 = 127;
  int8x16_t v7 = vextq_s8(*(int8x16_t *)(a2 + 26), *(int8x16_t *)(a2 + 26), 8uLL);
  v6[1] = *((void *)a2 + 15);
  v6[2] = *((void *)a2 + 16);
  __int16 v8 = 0;
  char v9 = 0;
  statistics::RawQuantitySample::operator=(*v4, (uint64_t)v6);
  PB::Base::~Base((PB::Base *)v6);
}

void sub_1BD057944(_Unwind_Exception *a1)
{
  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

void HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>::archive(uint64_t a1, int8x16_t *a2)
{
  *(void *)a1 = &unk_1F171B978;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (statistics **)(a1 + 8);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = 0;
  statistics::Statistics::makePrimaryStatistics(a1);
  HDStatisticsCumulative::archive(a2, (uint64_t)v5);
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v5);
  statistics::Statistics::~Statistics((statistics::Statistics *)v5);
  statistics::Statistics::makeAuxiliaryStatistics(a1);
  HDStatisticsTimeInterval::archive((HDStatisticsTimeInterval *)&a2[3].u64[1], (uint64_t)v5);
  statistics::Statistics::operator=(*v4, (uint64_t)v5);
  statistics::Statistics::~Statistics((statistics::Statistics *)v5);
}

void sub_1BD057A1C(_Unwind_Exception *a1)
{
  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::unarchive(uint64_t a1, void *a2)
{
  *(_DWORD *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v5 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_WORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 122) = 0u;
  uint64_t v6 = a2[16];
  if (v6)
  {
    HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>::unarchive((uint64_t)v12, *(HDStatisticsTimeInterval **)(v6 + 8), *(void **)(v6 + 128));
    uint64_t v7 = v14;
    *(void *)(v5 + 48) = v13;
    long long v8 = v12[1];
    *(_OWORD *)uint64_t v5 = v12[0];
    *(_OWORD *)(v5 + 16) = v8;
    *(_OWORD *)(v5 + 32) = v12[2];
    *(void *)(a1 + 64) = v7;
    double result = v17;
    uint64_t v9 = v16;
    *(_OWORD *)(a1 + 72) = v15;
    *(void *)(a1 + 88) = v9;
    *(double *)(a1 + 96) = result;
  }
  *(_DWORD *)a1 = a2[17];
  uint64_t v10 = a2[14];
  if (v10)
  {
    double result = *(double *)(v10 + 8);
    uint64_t v11 = *(void *)(v10 + 16);
    *(int8x16_t *)(a1 + 104) = vextq_s8(*(int8x16_t *)(v10 + 24), *(int8x16_t *)(v10 + 24), 8uLL);
    *(double *)(a1 + 120) = result;
    *(void *)(a1 + 128) = v11;
    *(_WORD *)(a1 + 136) = 1;
  }
  return result;
}

double HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>::unarchive(uint64_t a1, HDStatisticsTimeInterval *this, void *a3)
{
  *(_WORD *)(a1 + 48) = 0;
  int8x16_t v4 = 0uLL;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0;
  if (a3)
  {
    uint64_t v5 = a3[3];
    uint64_t v6 = a3[14];
    if (v6)
    {
      int8x16_t v4 = *(int8x16_t *)(v6 + 24);
      uint64_t v7 = *(void *)(v6 + 8);
      char v8 = 1;
      uint64_t v6 = *(void *)(v6 + 16);
    }
    else
    {
      char v8 = 0;
      uint64_t v7 = 0;
    }
    *(void *)a1 = a3[19];
    *(void *)(a1 + 8) = v5;
    int8x16_t v4 = vextq_s8(v4, v4, 8uLL);
    *(int8x16_t *)(a1 + 16) = v4;
    *(void *)(a1 + 32) = v7;
    *(void *)(a1 + 40) = v6;
    *(unsigned char *)(a1 + 48) = v8;
    *(unsigned char *)(a1 + 49) = 0;
  }
  if (this)
  {
    HDStatisticsTimeInterval::unarchive(this, (uint64_t)&v11);
    *(void *)(a1 + 56) = v11;
    v4.i64[0] = v14;
    uint64_t v9 = v13;
    *(_OWORD *)(a1 + 64) = v12;
    *(void *)(a1 + 80) = v9;
    *(void *)(a1 + 88) = v4.i64[0];
  }
  return *(double *)v4.i64;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6 = a3;
  uint64_t v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = &unk_1F1722800;
  double v9 = 900.0;
  if ((v6 & 0x10) == 0) {
    double v9 = 0.0;
  }
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(void *)(v8 + 104) = 0;
  *(void *)(v8 + 112) = 0;
  *(void *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_WORD *)(a1 + 576) = 1;
  *(unsigned char *)(a1 + 578) = 0;
  *(unsigned char *)(a1 + 580) = 0;
  *(void *)(a1 + 584) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(void *)(a1 + 624) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);

  JUMPOUT(0x1C187B8A0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1F1722800;
  unint64_t v2 = *(void **)(a1 + 608);
  if (v2)
  {
    *(void *)(a1 + 616) = v2;
    operator delete(v2);
  }

  id v3 = *(void **)(a1 + 544);
  if (v3)
  {
    *(void *)(a1 + 552) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  int8x16_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(unsigned char *)(result + 576) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::setDateInterval(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 copy];
  int8x16_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;

  uint64_t v5 = [v6 startDate];
  [v5 timeIntervalSinceReferenceDate];
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
}

void sub_1BD057D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(void *)(a1 + 40))
  {
    id v5 = v3;
    [v3 timeIntervalSinceReferenceDate];
    *(void *)(a1 + 584) = v4;
    id v3 = v5;
  }
}

void sub_1BD057DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::setStatisticsConfiguration(id *a1, void *a2)
{
  objc_storeStrong(a1 + 74, a2);
  id v7 = a2;
  id v4 = a1[74];
  id v5 = a1[71];
  a1[71] = v4;
  id v6 = v4;

  objc_storeStrong(a1 + 19, a1[71]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (*(void *)(a1 + 40)) {
    return 1;
  }
  BOOL v7 = *(void *)(a1 + 224) == *(void *)(a1 + 216) && *(uint64_t *)(a1 + 248) < 1
    || HKIntervalMask<double>::firstDifference(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)a2, *(void *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (v7) {
    return 1;
  }
  double v9 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128);

  return v9(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 copy];
  id v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v3;
}

void sub_1BD057FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::dataSource(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));

  return WeakRetained;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::currentStatistics(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 576))
  {
    double v1 = 0;
  }
  else
  {
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_updateSourceOrder((uint64_t)v4);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeThroughTime((uint64_t)v4, v5);
    double v1 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v4);
  }

  return v1;
}

void sub_1BD058094(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(a1 + 64);
  BOOL v7 = v6;
  if (v6)
  {
    uint64_t v8 = [v6 startDate];
    [v8 timeIntervalSinceReferenceDate];
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    uint64_t v10 = [v7 endDate];
    [v10 timeIntervalSinceReferenceDate];
    double v12 = v11;
    double v13 = *(double *)(a2 + 8);

    if (v12 < v13) {
      goto LABEL_9;
    }
  }
  if (!*(unsigned char *)(a1 + 578))
  {
LABEL_11:
    uint64_t v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 577))
  {
LABEL_9:
    uint64_t v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(unsigned char *)(a1 + 579)) {
      goto LABEL_11;
    }
    unint64_t v17 = *(void *)(a1 + 616);
    unint64_t v18 = *(void *)(a1 + 624);
    if (v17 >= v18)
    {
      uint64_t v22 = *(void *)(a1 + 608);
      unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      unint64_t v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24) {
        unint64_t v24 = 2 * v25;
      }
      if (v25 >= 0x333333333333333) {
        unint64_t v26 = 0x666666666666666;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26) {
        unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      }
      else {
        uint64_t v27 = 0;
      }
      unint64_t v28 = v26 + 40 * v23;
      unint64_t v29 = v26 + 40 * v27;
      long long v30 = *(_OWORD *)a2;
      long long v31 = *(_OWORD *)(a2 + 16);
      *(void *)(v28 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      unint64_t v21 = v28 + 40;
      long long v32 = *(char **)(a1 + 616);
      double v33 = *(char **)(a1 + 608);
      if (v32 != v33)
      {
        do
        {
          long long v34 = *(_OWORD *)(v32 - 40);
          long long v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        long long v32 = *(char **)(a1 + 608);
      }
      *(void *)(a1 + 608) = v28;
      *(void *)(a1 + 616) = v21;
      *(void *)(a1 + 624) = v29;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      long long v19 = *(_OWORD *)a2;
      long long v20 = *(_OWORD *)(a2 + 16);
      *(void *)(v17 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      unint64_t v21 = v17 + 40;
    }
    *(void *)(a1 + 616) = v21;
    goto LABEL_9;
  }
  uint64_t v14 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
  uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1BD058304(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = v5;
  if (*(unsigned char *)(a1 + 578))
  {
    uint64_t v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 578) = 1;
  uint64_t v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    uint64_t v7 = 0;
    goto LABEL_82;
  }
  uint64_t v65 = v6;
  if (*(unsigned char *)(a1 + 577)) {
    goto LABEL_5;
  }
  double v9 = *(void **)(a1 + 600);
  if (!v9)
  {
    id v68 = 0;
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 40))
  {
LABEL_5:
    int v8 = 0;
    id v68 = 0;
    goto LABEL_29;
  }
  [v9 sortUsingComparator:&__block_literal_global_616];
  id v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v10 = *(id *)(a1 + 600);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  if (!v11)
  {

    id v12 = 0;
    goto LABEL_27;
  }
  id v12 = 0;
  uint64_t v13 = *(void *)v70;
  do
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (*(void *)v70 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(id *)(*((void *)&v69 + 1) + 8 * i);
      uint64_t v16 = v15;
      if (v12)
      {
        unint64_t v17 = [v15 startDate];
        unint64_t v18 = [v12 endDate];
        int v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          long long v20 = [v16 endDate];
          unint64_t v21 = [v12 endDate];
          int v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22) {
            goto LABEL_21;
          }
          id v23 = objc_alloc(MEMORY[0x1E4F28C18]);
          unint64_t v24 = [v12 startDate];
          unint64_t v25 = [v16 endDate];
          id v26 = (id)[v23 initWithStartDate:v24 endDate:v25];
        }
        else
        {
          [v68 addObject:v12];
          id v26 = v16;
        }
        id v12 = v26;
      }
      else
      {
        id v12 = v15;
      }
LABEL_21:
    }
    uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  }
  while (v11);

  if (v12) {
    [v68 addObject:v12];
  }
LABEL_27:

LABEL_28:
  int v8 = 1;
LABEL_29:
  uint64_t v27 = *(void **)(a1 + 600);
  *(void *)(a1 + 600) = 0;

  *(unsigned char *)(a1 + 577) = 0;
  if (!v8)
  {
    unint64_t v38 = *(void *)(a1 + 608);
    *(void *)(a1 + 624) = 0;
    *(void *)(a1 + 616) = 0;
    *(void *)(a1 + 608) = 0;
    unint64_t v39 = v38;
    goto LABEL_47;
  }
  unint64_t v28 = [v68 lastObject];
  if (v28)
  {
    unint64_t v29 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_currentBucketInterval(a1);
    long long v30 = [v29 endDate];
    long long v31 = [v28 endDate];
    int v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      double v33 = [v28 endDate];
      [v33 timeIntervalSinceReferenceDate];
      double v35 = v34;

      uint64_t v36 = *(void *)(a1 + 608);
      BOOL v37 = *(long long **)(a1 + 616);
      while ((long long *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((long long *)v36 != v37)
          {
            double v40 = (long long *)(v36 + 40);
            if ((long long *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  long long v41 = *v40;
                  long long v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)uint64_t v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                double v40 = (long long *)((char *)v40 + 40);
              }
              while (v40 != v37);
              BOOL v37 = *(long long **)(a1 + 616);
            }
          }
          if ((long long *)v36 != v37) {
            *(void *)(a1 + 616) = v36;
          }
          break;
        }
        v36 += 40;
      }
    }
  }
  unint64_t v38 = *(void *)(a1 + 608);
  unint64_t v39 = *(void *)(a1 + 616);
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 616) = 0;
  if (![v68 count]) {
    goto LABEL_60;
  }
LABEL_47:
  id v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v44 = v43;
    uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v70;
      while (2)
      {
        for (uint64_t j = 0; j != v45; ++j)
        {
          if (*(void *)v70 != v46) {
            objc_enumerationMutation(v44);
          }
          id v48 = *(id *)(*((void *)&v69 + 1) + 8 * j);
          int v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval((id *)a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
        if (v45) {
          continue;
        }
        break;
      }
    }

LABEL_59:
    unint64_t v38 = (unint64_t)__p;
LABEL_60:
    unint64_t v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v51;
    }
    int v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      uint64_t v54 = v38;
      uint64_t v50 = v67;
      do
      {
        int v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_primitiveAddSample(a1, v54, 1, v50);
        int v53 = v55;
        v54 += 40;
        if (v54 == v39) {
          char v56 = 0;
        }
        else {
          char v56 = v55;
        }
        uint64_t v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval((id *)a1, 0, v67))goto LABEL_59; {
LABEL_70:
    }
    int v53 = 0;
  }
  if (*(void *)(a1 + 40) && *(void *)(a1 + 552) != *(void *)(a1 + 544))
  {
    do
    {
      uint64_t v57 = objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(void *)(a1 + 112) + 1, v50, v65);
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      unint64_t v58 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, a1 + 120);
      uint64_t v59 = [v57 startDate];
      [v59 timeIntervalSinceReferenceDate];
      double v61 = v60;
      uint64_t v62 = [v57 endDate];
      [v62 timeIntervalSinceReferenceDate];
      HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
    }
    while (*(void *)(a1 + 552) != *(void *)(a1 + 544));
  }
  *(unsigned char *)(a1 + 578) = 0;
  if (__p) {
    operator delete(__p);
  }

  if (v53)
  {
    if (*(unsigned char *)(a1 + 580))
    {
      *(unsigned char *)(a1 + 580) = 0;
      id v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
      uint64_t v7 = 1;
      goto LABEL_82;
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v6 = v65;
LABEL_82:
  *(unsigned char *)(a1 + 578) = 0;
LABEL_83:

  return v7;
}

void sub_1BD058A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    *(unsigned char *)(v13 + 578) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(unsigned char *)(result + 579) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(unsigned char *)(a1 + 578)) {
      goto LABEL_12;
    }
    uint64_t v7 = 0;
LABEL_14:
    uint64_t v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval((id *)a1, v7, a3);
    goto LABEL_15;
  }
  uint64_t v7 = [v6 dateIntervalForIntervalsContainingInterval:v5];

  if (!*(unsigned char *)(a1 + 578)) {
    goto LABEL_14;
  }
  if (!v7)
  {
LABEL_12:
    id v12 = *(void **)(a1 + 600);
    *(void *)(a1 + 600) = 0;

    uint64_t v7 = 0;
    uint64_t v11 = 1;
    *(unsigned char *)(a1 + 577) = 1;
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 577))
  {
    int v8 = *(void **)(a1 + 600);
    if (!v8)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      id v10 = *(void **)(a1 + 600);
      *(void *)(a1 + 600) = v9;

      int v8 = *(void **)(a1 + 600);
    }
    [v8 addObject:v7];
  }
  uint64_t v11 = 1;
LABEL_15:

  return v11;
}

void sub_1BD058D08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    *(unsigned char *)(a1 + 576) = 1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v9[3] = &unk_1E63043E8;
    uint64_t v12 = a1;
    id v10 = v5;
    id v11 = WeakRetained;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 112))(a1, v9, a3);
    if (v7 && *(unsigned char *)(a1 + 576) && !*(void *)(a1 + 40)) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to query for initial statistics: no data source available.");
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1BD058E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::reset(uint64_t result)
{
  *(unsigned char *)(result + 576) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 encodeBool:*(unsigned __int8 *)(a1 + 576) forKey:@"needs_config"];
  id v12 = v3;
  int v32 = &unk_1F1726FA0;
  double v33 = 0;
  int v38 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
  LOBYTE(v38) = 1;
  uint64_t v34 = v4;
  uint64_t v35 = 0;
  statistics::StatisticsEngine::makeCurrentBucket((uint64_t)&v32);
  uint64_t v13 = &unk_1F171B9C8;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  int v31 = 511;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 0;
  int8x16_t v14 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  uint64_t v5 = *(void *)(a1 + 136);
  char v29 = *(unsigned char *)(a1 + 144);
  char v30 = *(unsigned char *)(a1 + 145);
  BOOL v28 = *(_DWORD *)(a1 + 148) == 0;
  int8x16_t v15 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  uint64_t v7 = *(int8x16_t **)(a1 + 216);
  if (v7 != *(int8x16_t **)(a1 + 224))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v7, *v7, 8uLL);
    int8x16_t v40 = v7[1];
    char v43 = 0;
    HIBYTE(v42) = v7[2].i8[9];
    LOBYTE(v42) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>();
  }
  statistics::StatisticsBucket::makeStatistics((uint64_t)&v13);
  HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>::archive((uint64_t)&v39, (int8x16_t *)(a1 + 240));
  statistics::Statistics::operator=(*((statistics **)&v22 + 1), (uint64_t)&v39);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v39);
  uint64_t v8 = *(void *)(a1 + 336);
  if (v8 != a1 + 344)
  {
    HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>::archive((uint64_t)&v39, (int8x16_t *)(v8 + 40));
    uint64_t v9 = *(void *)(v8 + 32);
    v46 |= 0x200u;
    uint64_t v45 = v9;
    PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>();
  }
  id v10 = *(int8x16_t **)(a1 + 184);
  if (v10 != *(int8x16_t **)(a1 + 192))
  {
    unint64_t v39 = (char *)&unk_1F1727540;
    v41.i32[0] = 3;
    int8x16_t v40 = vextq_s8(*v10, *v10, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>();
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v13);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v13);
  id v11 = *(int8x16_t **)(a1 + 544);
  if (v11 != *(int8x16_t **)(a1 + 552))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v11, *v11, 8uLL);
    int8x16_t v40 = v11[1];
    __int16 v42 = 0;
    char v43 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>();
  }
  PB::Writer::Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v39);
  [v12 encodeBytes:v40.i64[0] length:&v39[-v40.i64[0]] forKey:@"hdsce_archived_representation"];
  PB::Writer::~Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);
}

void sub_1BD05925C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v59 = a2;
  *(unsigned char *)(a1 + 576) = [v59 decodeBoolForKey:@"needs_config"];
  id v3 = v59;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)&v63.n128_i64[1], 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)long long v64 = 0u;
  long long v65 = 0u;
  uint64_t v102 = 0;
  id v62 = v3;
  PB::Reader::Reader((PB::Reader *)v101, (const unsigned __int8 *)[v62 decodeBytesForKey:@"hdsce_archived_representation" returnedLength:&v102]);
  unint64_t v94 = &unk_1F1726FA0;
  uint64_t v95 = 0;
  uint64_t v99 = 0;
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  int v100 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v94, (PB::Reader *)v101);
  uint64_t v61 = a1;
  v63.n128_u64[0] = v96;
  if (v95)
  {
    uint64_t v70 = 0;
    memset(v73, 0, sizeof(v73));
    memset(&v75[64], 0, 32);
    uint64_t v79 = 0;
    uint64_t v78 = 0;
    *(_OWORD *)__p = 0u;
    memset(v75, 0, 58);
    uint64_t v76 = 0;
    uint64_t v77 = &v78;
    long long v80 = 0u;
    long long v81 = 0u;
    int v82 = 1065353216;
    long long v83 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    uint64_t v86 = 0;
    int v87 = 1065353216;
    long long v88 = 0u;
    long long v89 = 0u;
    int v90 = 1065353216;
    long long v91 = 0u;
    long long v92 = 0u;
    int v93 = 1065353216;
    int8x16_t v66 = vextq_s8(*(int8x16_t *)(v95 + 8), *(int8x16_t *)(v95 + 8), 8uLL);
    uint64_t v4 = *(void *)(v95 + 72);
    uint64_t v67 = *(void *)(v95 + 64);
    char v68 = *(unsigned char *)(v95 + 185);
    char v69 = *(unsigned char *)(v95 + 186);
    int8x16_t v71 = vextq_s8(*(int8x16_t *)(v95 + 24), *(int8x16_t *)(v95 + 24), 8uLL);
    uint64_t v72 = v4;
    uint64_t v6 = *(void *)(v95 + 80);
    uint64_t v5 = *(void *)(v95 + 88);
    double v60 = (void *)v95;
    if (v6 != v5)
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(*(void *)v6 + 24);
        uint64_t v9 = *(void *)(*(void *)v6 + 32);
        uint64_t v10 = *(void *)(*(void *)v6 + 8);
        uint64_t v11 = *(void *)(*(void *)v6 + 16);
        char v12 = *(unsigned char *)(*(void *)v6 + 41);
        char v13 = *(unsigned char *)(*(void *)v6 + 40);
        if ((unint64_t)v7 >= *(void *)v75)
        {
          int8x16_t v14 = (char *)__p[0];
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (char *)__p[0]) >> 4);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(*(void *)v75 - (unint64_t)__p[0]) >> 4) > v16) {
            unint64_t v16 = 0x5555555555555556 * ((uint64_t)(*(void *)v75 - (unint64_t)__p[0]) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v75 - (unint64_t)__p[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v17 = 0x555555555555555;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17)
          {
            unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            uint64_t v7 = (char *)__p[1];
            int8x16_t v14 = (char *)__p[0];
          }
          else
          {
            uint64_t v18 = 0;
          }
          unint64_t v19 = v17 + 48 * v15;
          *(void *)unint64_t v19 = v9;
          *(void *)(v19 + 8) = v8;
          *(void *)(v19 + 16) = v10;
          *(void *)(v19 + 24) = v11;
          *(_WORD *)(v19 + 32) = 1;
          *(unsigned char *)(v19 + 40) = 0;
          *(unsigned char *)(v19 + 41) = v12;
          *(unsigned char *)(v19 + 42) = v13;
          uint64_t v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              long long v21 = *((_OWORD *)v7 - 3);
              long long v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            int8x16_t v14 = (char *)__p[0];
          }
          uint64_t v7 = (char *)(v19 + 48);
          __p[0] = v20;
          __p[1] = (void *)(v19 + 48);
          *(void *)long long v75 = v17 + 48 * v18;
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)uint64_t v7 = v9;
          *((void *)v7 + 1) = v8;
          *((void *)v7 + 2) = v10;
          *((void *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        __p[1] = v7;
        v6 += 8;
      }
      while (v6 != v5);
    }
    uint64_t v23 = v60[13];
    if (v23)
    {
      HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>::unarchive((uint64_t)&v103, *(HDStatisticsTimeInterval **)(v23 + 8), *(void **)(v23 + 128));
      *(_OWORD *)&v75[8] = v103;
      *(_OWORD *)&v75[24] = v104;
      *(_OWORD *)&v75[40] = v105;
      *(void *)&v75[56] = v106;
      *(void *)&v75[64] = v107;
      if (*(void *)&v75[72])
      {
        *(void *)&v75[80] = *(void *)&v75[72];
        operator delete(*(void **)&v75[72]);
      }
      *(_OWORD *)&v75[72] = v108;
      *(void *)&v75[88] = v109;
      uint64_t v109 = 0;
      long long v108 = 0uLL;
      uint64_t v76 = v110;
    }
    long long v24 = (uint64_t *)v60[17];
    for (uint64_t i = (uint64_t *)v60[18]; v24 != i; ++v24)
    {
      uint64_t v26 = *v24;
      HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>::unarchive((uint64_t)&v103, *(HDStatisticsTimeInterval **)(*v24 + 8), *(void **)(*v24 + 128));
      uint64_t v27 = *(void *)(v26 + 144);
      BOOL v28 = v78;
      char v29 = &v78;
      char v30 = &v78;
      if (v78)
      {
        do
        {
          while (1)
          {
            char v30 = (uint64_t **)v28;
            uint64_t v31 = v28[4];
            if (v31 <= v27) {
              break;
            }
            BOOL v28 = *v30;
            char v29 = v30;
            if (!*v30) {
              goto LABEL_34;
            }
          }
          if (v31 >= v27)
          {
            double v33 = (char *)v30;
            goto LABEL_37;
          }
          BOOL v28 = v30[1];
        }
        while (v28);
        char v29 = v30 + 1;
      }
LABEL_34:
      double v33 = (char *)operator new(0x88uLL);
      *((void *)v33 + 4) = v27;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *(_OWORD *)(v33 + 120) = 0u;
      *(void *)double v33 = 0;
      *((void *)v33 + 1) = 0;
      *((void *)v33 + 2) = v30;
      void *v29 = (uint64_t *)v33;
      int v32 = (uint64_t *)v33;
      if (*v77)
      {
        uint64_t v77 = (uint64_t **)*v77;
        int v32 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v78, v32);
      ++v79;
LABEL_37:
      uint64_t v34 = v106;
      long long v36 = v104;
      long long v35 = v105;
      uint64_t v37 = (void *)*((void *)v33 + 13);
      *(_OWORD *)(v33 + 40) = v103;
      *(_OWORD *)(v33 + 56) = v36;
      *(_OWORD *)(v33 + 72) = v35;
      *((void *)v33 + 11) = v34;
      *((void *)v33 + 12) = v107;
      if (v37)
      {
        *((void *)v33 + 14) = v37;
        operator delete(v37);
        *((void *)v33 + 13) = 0;
        *((void *)v33 + 14) = 0;
        *((void *)v33 + 15) = 0;
      }
      *(_OWORD *)(v33 + 104) = v108;
      *((void *)v33 + 15) = v109;
      uint64_t v109 = 0;
      long long v108 = 0uLL;
      *((void *)v33 + 16) = v110;
    }
    uint64_t v38 = v60[5];
    for (uint64_t j = v60[6]; v38 != j; v38 += 8)
    {
      double v41 = *(double *)(*(void *)v38 + 8);
      double v40 = *(double *)(*(void *)v38 + 16);
      if (v41 >= v40) {
        double v42 = *(double *)(*(void *)v38 + 16);
      }
      else {
        double v42 = *(double *)(*(void *)v38 + 8);
      }
      if (v40 < v41) {
        double v40 = *(double *)(*(void *)v38 + 8);
      }
      HKIntervalMask<double>::_insertInterval(v73, v42, v40);
    }
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::operator=((uint64_t)&v63.n128_i64[1], (uint64_t)&v66);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v66);
  }
  uint64_t v43 = v97;
  uint64_t v44 = v98;
  if (v97 != v98)
  {
    uint64_t v45 = (char *)v64[1];
    do
    {
      uint64_t v46 = *(void *)(*(void *)v43 + 24);
      uint64_t v47 = *(void *)(*(void *)v43 + 32);
      uint64_t v48 = *(void *)(*(void *)v43 + 8);
      uint64_t v49 = *(void *)(*(void *)v43 + 16);
      if ((unint64_t)v45 >= (unint64_t)v65)
      {
        uint64_t v50 = (char *)v64[0];
        unint64_t v51 = 0xCCCCCCCCCCCCCCCDLL * ((v45 - (char *)v64[0]) >> 3);
        unint64_t v52 = v51 + 1;
        if (v51 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(v65 - (unint64_t)v64[0]) >> 3) > v52) {
          unint64_t v52 = 0x999999999999999ALL * ((uint64_t)(v65 - (unint64_t)v64[0]) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v65 - (unint64_t)v64[0]) >> 3) >= 0x333333333333333) {
          unint64_t v53 = 0x666666666666666;
        }
        else {
          unint64_t v53 = v52;
        }
        if (v53)
        {
          unint64_t v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v53);
          uint64_t v50 = (char *)v64[0];
          uint64_t v45 = (char *)v64[1];
        }
        else
        {
          uint64_t v54 = 0;
        }
        unint64_t v55 = v53 + 40 * v51;
        *(void *)unint64_t v55 = v47;
        *(void *)(v55 + 8) = v46;
        *(void *)(v55 + 16) = v48;
        *(void *)(v55 + 24) = v49;
        *(_WORD *)(v55 + 32) = 1;
        char v56 = (char *)v55;
        if (v45 != v50)
        {
          do
          {
            long long v57 = *(_OWORD *)(v45 - 40);
            long long v58 = *(_OWORD *)(v45 - 24);
            *((_WORD *)v56 - 4) = *((_WORD *)v45 - 4);
            *(_OWORD *)(v56 - 24) = v58;
            *(_OWORD *)(v56 - 40) = v57;
            v56 -= 40;
            v45 -= 40;
          }
          while (v45 != v50);
          uint64_t v50 = (char *)v64[0];
        }
        uint64_t v45 = (char *)(v55 + 40);
        v64[0] = v56;
        v64[1] = (void *)(v55 + 40);
        *(void *)&long long v65 = v53 + 40 * v54;
        if (v50) {
          operator delete(v50);
        }
      }
      else
      {
        *(void *)uint64_t v45 = v47;
        *((void *)v45 + 1) = v46;
        *((void *)v45 + 2) = v48;
        *((void *)v45 + 3) = v49;
        *((_WORD *)v45 + 16) = 1;
        v45 += 40;
      }
      v64[1] = v45;
      v43 += 8;
    }
    while (v43 != v44);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v94);

  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::operator=((void *)(v61 + 112), &v63);
  if (v64[0])
  {
    v64[1] = v64[0];
    operator delete(v64[0]);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v63.n128_i64[1]);
}

void sub_1BD0599B4(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table((uint64_t)&STACK[0x380]);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a2);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x330]);
  uint64_t v8 = (void *)STACK[0x318];
  if (STACK[0x318])
  {
    STACK[0x320] = (unint64_t)v8;
    operator delete(v8);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x2F0]);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::destroy((void *)STACK[0x2E0]);
  uint64_t v9 = (void *)STACK[0x2B8];
  if (STACK[0x2B8])
  {
    STACK[0x2C0] = (unint64_t)v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v10;
    operator delete(v10);
  }
  objc_destroyWeak((id *)&STACK[0x258]);
  uint64_t v11 = (void *)STACK[0x240];
  if (STACK[0x240])
  {
    STACK[0x248] = (unint64_t)v11;
    operator delete(v11);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x3B0]);
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 256;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 154) = 0u;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = a1 + 224;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 272) = 1065353216;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(void *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 376) = 1065353216;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_DWORD *)(a1 + 416) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 432);
  if (v2)
  {
    *(void *)(a1 + 440) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsBucket(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 384);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 344);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 304);
  unint64_t v2 = *(void **)(a1 + 280);
  if (v2)
  {
    *(void *)(a1 + 288) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 240);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::destroy(*(void **)(a1 + 224));
  id v3 = *(void **)(a1 + 184);
  if (v3)
  {
    *(void *)(a1 + 192) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(void *)(a1 + 104) = v4;
    operator delete(v4);
  }
  objc_destroyWeak((id *)(a1 + 88));
  uint64_t v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(void *)(a1 + 72) = v5;
    operator delete(v5);
  }

  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::destroy(a1[1]);
    unint64_t v2 = (void *)a1[13];
    if (v2)
    {
      a1[14] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_configureForStartTime(uint64_t a1)
{
  unint64_t v28 = 0;
  unint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
    uint64_t v4 = [v2 dateIntervalContainingDate:v3 index:&v28];

    uint64_t v5 = [v4 startDate];
    [v5 timeIntervalSinceReferenceDate];
    double v7 = v6;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
LABEL_5:
    double v13 = v9;

    goto LABEL_6;
  }
  id v10 = *(id *)(a1 + 64);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v11 = [v10 startDate];
    [v11 timeIntervalSinceReferenceDate];
    double v7 = v12;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
    goto LABEL_5;
  }
  double v7 = -1.79769313e308;
  double v13 = 1.79769313e308;
LABEL_6:

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v21, WeakRetained, v7, v13);

  if (*(void *)(a1 + 32) == 1) {
    char v23 = 1;
  }
  uint64_t v22 = *(void *)(a1 + 56);
  char v24 = *(unsigned char *)(a1 + 24) & 1;
  if (v27 != (char *)(a1 + 72)) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27, *(char **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4);
  }
  objc_storeStrong(&v26, *(id *)(a1 + 592));
  if (!*(void *)(a1 + 40)) {
    int v25 = 0;
  }
  unint64_t v15 = v28;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v21);
  v18.n128_u64[0] = v15;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)&v18.n128_i64[1], (uint64_t)v17);
  long long __p = 0u;
  long long v20 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::operator=((void *)(a1 + 112), &v18);

  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v18.n128_i64[1]);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v17);
  *(unsigned char *)(a1 + 576) = 0;
  return HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v21);
}

void sub_1BD059F5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::operator=(void *a1, __n128 *a2)
{
  *a1 = a2->n128_u64[0];
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::operator=((uint64_t)(a1 + 1), (uint64_t)&a2->n128_i64[1]);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 54), a2 + 27);
  unint64_t v4 = a2[28].n128_u64[1];
  a2[28].n128_u64[1] = 0;
  uint64_t v5 = (void *)a1[57];
  a1[57] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 96);
  double v7 = *(unsigned char **)(a2 + 104);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(void *)(a1 + 96) = v10;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(void *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  long long v12 = *(_OWORD *)(a2 + 120);
  long long v13 = *(_OWORD *)(a2 + 136);
  long long v14 = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v14;
  *(_OWORD *)(a1 + 136) = v13;
  *(_OWORD *)(a1 + 120) = v12;
  uint64_t v15 = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 176) = v15;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 184), *(const void **)(a2 + 184), *(void *)(a2 + 192), (uint64_t)(*(void *)(a2 + 192) - *(void *)(a2 + 184)) >> 4);
  uint64_t v16 = *(void *)(a2 + 208);
  *(void *)(a1 + 224) = 0;
  unint64_t v17 = (void *)(a1 + 224);
  *(void *)(a1 + 208) = v16;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 216) = a1 + 224;
  __n128 v18 = *(void **)(a2 + 216);
  if (v18 != (void *)(a2 + 224))
  {
    unint64_t v19 = 0;
    long long v20 = (void *)(a1 + 224);
    while (1)
    {
      long long v21 = (void *)(a1 + 224);
      if (v20 == v17) {
        goto LABEL_12;
      }
      uint64_t v22 = v19;
      char v23 = (void *)(a1 + 224);
      if (v19)
      {
        do
        {
          long long v21 = v22;
          uint64_t v22 = (void *)v22[1];
        }
        while (v22);
      }
      else
      {
        do
        {
          long long v21 = (void *)v23[2];
          BOOL v24 = *v21 == (void)v23;
          char v23 = v21;
        }
        while (v24);
      }
      uint64_t v25 = v18[4];
      if (v21[4] < v25)
      {
LABEL_12:
        if (v19) {
          id v26 = (uint64_t **)v21;
        }
        else {
          id v26 = (uint64_t **)(a1 + 224);
        }
        if (v19) {
          uint64_t v27 = (uint64_t **)(v21 + 1);
        }
        else {
          uint64_t v27 = (uint64_t **)(a1 + 224);
        }
        if (!*v27)
        {
LABEL_28:
          char v30 = (char *)operator new(0x88uLL);
          *((void *)v30 + 4) = v18[4];
          long long v31 = *(_OWORD *)(v18 + 5);
          long long v32 = *(_OWORD *)(v18 + 7);
          long long v33 = *(_OWORD *)(v18 + 9);
          *((void *)v30 + 11) = v18[11];
          *(_OWORD *)(v30 + 72) = v33;
          *(_OWORD *)(v30 + 56) = v32;
          *(_OWORD *)(v30 + 40) = v31;
          uint64_t v34 = v18[12];
          *((void *)v30 + 13) = 0;
          *((void *)v30 + 12) = v34;
          *((void *)v30 + 14) = 0;
          *((void *)v30 + 15) = 0;
          std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)v30 + 13, (const void *)v18[13], v18[14], (uint64_t)(v18[14] - v18[13]) >> 4);
          *((void *)v30 + 16) = v18[16];
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 216), (uint64_t)v26, v27, (uint64_t *)v30);
        }
      }
      else
      {
        uint64_t v27 = (uint64_t **)(a1 + 224);
        id v26 = (uint64_t **)(a1 + 224);
        if (!v19) {
          goto LABEL_28;
        }
        unint64_t v28 = v19;
        while (1)
        {
          while (1)
          {
            id v26 = (uint64_t **)v28;
            uint64_t v29 = v28[4];
            if (v29 <= v25) {
              break;
            }
            unint64_t v28 = *v26;
            uint64_t v27 = v26;
            if (!*v26) {
              goto LABEL_28;
            }
          }
          if (v29 >= v25) {
            break;
          }
          unint64_t v28 = v26[1];
          if (!v28)
          {
            uint64_t v27 = v26 + 1;
            goto LABEL_28;
          }
        }
      }
      long long v35 = (void *)v18[1];
      if (v35)
      {
        do
        {
          long long v36 = v35;
          long long v35 = (void *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          long long v36 = (void *)v18[2];
          BOOL v24 = *v36 == (void)v18;
          __n128 v18 = v36;
        }
        while (!v24);
      }
      if (v36 == (void *)(a2 + 224)) {
        break;
      }
      unint64_t v19 = (void *)*v17;
      long long v20 = *(void **)(a1 + 216);
      __n128 v18 = v36;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 240, a2 + 240);
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 280), *(const void **)(a2 + 280), *(void *)(a2 + 288), (uint64_t)(*(void *)(a2 + 288) - *(void *)(a2 + 280)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 304, a2 + 304);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 344, a2 + 344);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 384, a2 + 384);
  return a1;
}

void sub_1BD05A35C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, id *location, void **a12)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v17);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  unint64_t v19 = *v15;
  if (*v15)
  {
    *(void *)(v13 + 288) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::destroy(*v12);
  long long v20 = *a9;
  if (*a9)
  {
    *(void *)(v13 + 192) = v20;
    operator delete(v20);
  }
  long long v21 = *a10;
  if (*a10)
  {
    *(void *)(v13 + 104) = v21;
    operator delete(v21);
  }
  objc_destroyWeak(location);
  uint64_t v22 = *a12;
  if (*a12)
  {
    *(void *)(v13 + 72) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::operator=(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  long long v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v5;

  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  id WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  uint64_t v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(void *)(a1 + 104) = v9;
    operator delete(v9);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  long long v10 = *(_OWORD *)(a2 + 120);
  long long v11 = *(_OWORD *)(a2 + 136);
  long long v12 = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v12;
  *(_OWORD *)(a1 + 136) = v11;
  *(_OWORD *)(a1 + 120) = v10;
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 184, (__n128 *)(a2 + 184));
  uint64_t v14 = a1 + 224;
  uint64_t v13 = *(void **)(a1 + 224);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::destroy(v13);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  uint64_t v15 = (void *)(a2 + 224);
  uint64_t v16 = *(void *)(a2 + 224);
  *(void *)(a1 + 224) = v16;
  uint64_t v17 = *(void *)(a2 + 232);
  *(void *)(a1 + 232) = v17;
  if (v17)
  {
    *(void *)(v16 + 16) = v14;
    *(void *)(a2 + 216) = v15;
    void *v15 = 0;
    *(void *)(a2 + 232) = 0;
  }
  else
  {
    *(void *)(a1 + 216) = v14;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 240, (uint64_t *)(a2 + 240));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 280, (__n128 *)(a2 + 280));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 304, (uint64_t *)(a2 + 304));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 344, (uint64_t *)(a2 + 344));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 384, (uint64_t *)(a2 + 384));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  double v3 = *(double *)a2;
  id v4 = objc_alloc(MEMORY[0x1E4F1C9C8]);
  uint64_t v5 = (double *)(a2 + 40);
  if (v3 != -1.79769313e308) {
    uint64_t v5 = (double *)a2;
  }
  long long v80 = (void *)[v4 initWithTimeIntervalSinceReferenceDate:*v5];
  if (*(double *)(a2 + 8) == 1.79769313e308) {
    uint64_t v6 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 48)];
  }
  else {
    uint64_t v6 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 8)];
  }
  long long v7 = (void *)v6;
  id v8 = *(id *)(a1 + 16);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v9 = *(id *)(a1 + 16);
    if ([v9 shouldUseUnderlyingTypeForStatistics])
    {
      uint64_t v10 = [v9 underlyingSampleType];

      id v8 = (id)v10;
    }
  }
  long long v11 = (void *)[objc_alloc(MEMORY[0x1E4F2B5B0]) initWithDataType:v8 startDate:v80 endDate:v7];
  if (*(unsigned char *)(a1 + 24))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      id v13 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      uint64_t v14 = *(uint64_t **)(a2 + 280);
      uint64_t v15 = *(uint64_t **)(a2 + 288);
      while (v14 != v15)
      {
        uint64_t v16 = *v14;
        id v17 = objc_loadWeakRetained((id *)(a1 + 48));
        __n128 v18 = [v17 sourceForSourceID:v16];

        if (v18)
        {
          if (([v13 containsObject:v18] & 1) == 0) {
            [v13 addObject:v18];
          }
        }

        ++v14;
      }
      unint64_t v19 = (void *)[v13 copy];
      [v11 _setSources:v19];
    }
  }

  v96[0] = &unk_1F17229F0;
  v96[3] = v96;
  id v81 = v11;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)v98, (uint64_t)v96);
  int v100 = 0;
  long long v20 = operator new(0x28uLL);
  *long long v20 = &unk_1F17228D0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(v20 + 1), (uint64_t)v98);
  int v100 = v20;
  id v21 = v81;
  uint64_t v22 = (void *)MEMORY[0x1E4F2B370];
  id v85 = v21;
  char v23 = [MEMORY[0x1E4F2B618] secondUnit];
  long long v24 = *(_OWORD *)(a2 + 136);
  long long v87 = *(_OWORD *)(a2 + 120);
  long long v88 = v24;
  long long v89 = *(_OWORD *)(a2 + 152);
  uint64_t v25 = *(void *)(a2 + 176);
  uint64_t v90 = *(void *)(a2 + 168);
  uint64_t v91 = v25;
  int v93 = 0;
  uint64_t v94 = 0;
  id v26 = *(const void **)(a2 + 184);
  uint64_t v27 = *(void *)(a2 + 192);
  long long __p = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v26, v27, (v27 - (uint64_t)v26) >> 4);
  uint64_t v95 = *(void *)(a2 + 208);
  if (!v100) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v28 = (*(uint64_t (**)(void *, long long *))(*v100 + 48))(v100, &v87);
  uint64_t v29 = *(double **)(v28 + 8);
  double v30 = 0.0;
  while (v29 != *(double **)(v28 + 16))
  {
    double v32 = *v29;
    double v31 = v29[1];
    v29 += 2;
    double v30 = v30 + v31 - v32;
  }
  long long v33 = [v22 quantityWithUnit:v23 doubleValue:v30 + *(double *)(v28 + 32)];
  [v21 setDuration:v33];

  if (__p)
  {
    int v93 = __p;
    operator delete(__p);
  }

  long long v34 = *(_OWORD *)(a2 + 136);
  long long v87 = *(_OWORD *)(a2 + 120);
  long long v88 = v34;
  long long v89 = *(_OWORD *)(a2 + 152);
  uint64_t v36 = *(void *)(a2 + 176);
  long long v35 = *(const void **)(a2 + 184);
  uint64_t v90 = *(void *)(a2 + 168);
  uint64_t v91 = v36;
  int v93 = 0;
  uint64_t v94 = 0;
  uint64_t v37 = *(void *)(a2 + 192);
  long long __p = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v35, v37, (v37 - (uint64_t)v35) >> 4);
  uint64_t v95 = *(void *)(a2 + 208);
  if (!v100) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  objc_msgSend(v21, "setDataCount:", *(void *)(*(uint64_t (**)(void *, long long *))(*v100 + 48))(v100, &v87));
  if (__p)
  {
    int v93 = __p;
    operator delete(__p);
  }
  if (*(unsigned char *)(a1 + 24))
  {
    id v38 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v39 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier((uint64_t)&v87, a2);
    for (uint64_t i = (uint64_t **)v88; i; uint64_t i = (uint64_t **)*i)
    {
      double v41 = i[2];
      double v42 = (void *)MEMORY[0x1E4F2B370];
      uint64_t v43 = [MEMORY[0x1E4F2B618] secondUnit];
      if (!v100) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v44 = (*(uint64_t (**)(void *, uint64_t *))(*v100 + 48))(v100, (uint64_t *)i + 3);
      uint64_t v45 = *(double **)(v44 + 8);
      double v46 = 0.0;
      while (v45 != *(double **)(v44 + 16))
      {
        double v48 = *v45;
        double v47 = v45[1];
        v45 += 2;
        double v46 = v46 + v47 - v48;
      }
      uint64_t v49 = [v42 quantityWithUnit:v43 doubleValue:v46 + *(double *)(v44 + 32)];
      [v38 setObject:v49 forKeyedSubscript:v41];

      if (!v100) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v50 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)(*(uint64_t (**)(void *, uint64_t *))(*v100 + 48))(v100, (uint64_t *)i + 3));
      [v39 setObject:v50 forKeyedSubscript:v41];
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)&v87);
    [v85 setDurationBySource:v38];
    [v85 setDataCountBySource:v39];
  }
  std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v99);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v98);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)v97, (uint64_t)v96);
  int v100 = 0;
  unint64_t v51 = operator new(0x28uLL);
  *unint64_t v51 = &unk_1F1722960;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(v51 + 1), (uint64_t)v97);
  int v100 = v51;
  id v86 = v85;
  unint64_t v52 = [*(id *)(a1 + 16) canonicalUnit];
  long long v53 = *(_OWORD *)(a2 + 136);
  long long v87 = *(_OWORD *)(a2 + 120);
  long long v88 = v53;
  long long v89 = *(_OWORD *)(a2 + 152);
  uint64_t v55 = *(void *)(a2 + 176);
  uint64_t v54 = *(const void **)(a2 + 184);
  uint64_t v90 = *(void *)(a2 + 168);
  uint64_t v91 = v55;
  int v93 = 0;
  uint64_t v94 = 0;
  uint64_t v56 = *(void *)(a2 + 192);
  long long __p = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v54, v56, (v56 - (uint64_t)v54) >> 4);
  uint64_t v95 = *(void *)(a2 + 208);
  if (!v100) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  long long v57 = (double *)(*(uint64_t (**)(void *, long long *))(*v100 + 48))(v100, &v87);
  double v58 = *v57;
  uint64_t v59 = *((void *)v57 + 1);
  double v61 = v57[2];
  double v60 = v57[3];
  double v62 = v57[4];
  if (__p)
  {
    int v93 = __p;
    operator delete(__p);
  }
  __n128 v63 = objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v52, v58, v81);
  [v86 setSumQuantity:v63];

  [v86 setDataCount:v59];
  uint64_t v64 = *(void *)(a1 + 24);
  LOBYTE(v65) = v64;
  if ((v64 & 0x20) != 0)
  {
    int8x16_t v66 = [MEMORY[0x1E4F2B370] quantityWithUnit:v52 doubleValue:v61];
    [v86 setMostRecentQuantity:v66];

    uint64_t v67 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v60, v62);
    [v86 setMostRecentQuantityDateInterval:v67];

    uint64_t v65 = *(void *)(a1 + 24);
  }
  if (v65)
  {
    id v68 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v69 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    if ((v64 & 0x20) != 0)
    {
      id v82 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      id v84 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    }
    else
    {
      id v82 = 0;
      id v84 = 0;
    }
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier((uint64_t)&v87, a2);
    for (uint64_t j = (uint64_t **)v88; j; uint64_t j = (uint64_t **)*j)
    {
      int8x16_t v71 = j[2];
      if (!v100
        || (objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v52, *(double *)(*(uint64_t (**)(void *, uint64_t *))(*v100 + 48))(v100, (uint64_t *)j + 3)), uint64_t v72 = objc_claimAutoreleasedReturnValue(), objc_msgSend(v68, "setObject:forKeyedSubscript:", v72, v71), v72, !v100))
      {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v73 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)((*(uint64_t (**)(void *, uint64_t *))(*v100 + 48))(v100, (uint64_t *)j + 3) + 8));
      [v69 setObject:v73 forKeyedSubscript:v71];

      if ((v64 & 0x20) != 0)
      {
        if (!v100) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        uint64_t v74 = (*(uint64_t (**)(void *, uint64_t *))(*v100 + 48))(v100, (uint64_t *)j + 3);
        double v75 = *(double *)(v74 + 24);
        double v76 = *(double *)(v74 + 32);
        uint64_t v77 = [MEMORY[0x1E4F2B370] quantityWithUnit:v52 doubleValue:*(double *)(v74 + 16)];
        [v82 setObject:v77 forKeyedSubscript:v71];

        uint64_t v78 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v75, v76);
        [v84 setObject:v78 forKeyedSubscript:v71];
      }
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)&v87);
    [v86 setSumQuantityBySource:v68];
    [v86 setDataCountBySource:v69];
    if ((v64 & 0x20) != 0)
    {
      [v86 setMostRecentQuantityBySource:v82];
      [v86 setMostRecentQuantityDateIntervalBySource:v84];
    }
  }
  std::__function::__value_func<HDStatisticsCumulative const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v99);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v97);

  std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v96);

  return v86;
}

void sub_1BD05AFC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, void *a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::__function::__value_func<HDStatisticsCumulative const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100]((void *)(v36 - 160));
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](&a29);

  std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](&a25);
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 264);
  uint64_t v2 = *(void *)(a1 + 280);
  if (v1 != (*(void *)(a1 + 288) - v2) >> 3)
  {
    id v4 = (void **)(a1 + 280);
    *(void *)(a1 + 288) = v2;
    std::vector<long long>::reserve((void **)(a1 + 280), v1);
    uint64_t v5 = *(void **)(a1 + 256);
    if (v5)
    {
      uint64_t v6 = *(char **)(a1 + 288);
      do
      {
        uint64_t v7 = v5[2];
        unint64_t v8 = *(void *)(a1 + 296);
        if ((unint64_t)v6 >= v8)
        {
          uint64_t v10 = (char *)*v4;
          uint64_t v11 = (v6 - (unsigned char *)*v4) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            uint64_t v10 = *(char **)(a1 + 280);
            uint64_t v6 = *(char **)(a1 + 288);
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v16 = (void *)(v14 + 8 * v11);
          *uint64_t v16 = v7;
          id v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            uint64_t v17 = *((void *)v6 - 1);
            v6 -= 8;
            *--uint64_t v16 = v17;
          }
          *(void *)(a1 + 280) = v16;
          *(void *)(a1 + 288) = v9;
          *(void *)(a1 + 296) = v14 + 8 * v15;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)uint64_t v6 = v7;
          id v9 = v6 + 8;
        }
        *(void *)(a1 + 288) = v9;
        uint64_t v5 = (void *)*v5;
        uint64_t v6 = v9;
      }
      while (v5);
    }
    __n128 v18 = (id *)(a1 + 88);
    id WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      id v20 = objc_loadWeakRetained(v18);
      [v20 orderSourceIDs:v4];
    }
  }
}

void sub_1BD05B3CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2) {
    a2 = v4 * floor(a2 / v4);
  }
  double v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    uint64_t v127 = (void *)(a1 + 96);
    uint64_t v123 = (double **)(a1 + 64);
    long long v121 = (uint64_t *)(a1 + 176);
    location = (id *)(a1 + 88);
    long long v117 = (double **)(a1 + 184);
    long long v116 = (void *)(a1 + 224);
    while (1)
    {
      unint64_t v6 = *(void *)(a1 + 96);
      uint64_t v7 = *(long long **)(a1 + 104);
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v7 - v6) >> 4);
      if (v8) {
        break;
      }
LABEL_134:
      *(double *)(a1 + 56) = a2;
LABEL_135:
      double v113 = *(double *)(a1 + 56);
      if (v113 == v5)
      {
        long long v114 = [MEMORY[0x1E4F28B00] currentHandler];
        long long v115 = objc_msgSend(NSString, "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative, HDStatisticsTimeInterval>>::_mergeThroughTime(double) [Statistics = HDStatisticsCombined<HDStatisticsCumulative, HDStatisticsTimeInterval>]");
        [v114 handleFailureInFunction:v115 file:@"HDStatisticsBucket.hpp" lineNumber:234 description:@"Failed to make forward progress during statistics merge."];

        double v113 = *(double *)(a1 + 56);
      }
      double v5 = v113;
      if (v113 >= a2) {
        return;
      }
    }
    if (v8 != 1)
    {
      double v20 = a2;
      double v21 = a2;
      double v22 = v5;
      uint64_t v23 = *(void *)(a1 + 96);
      if ((long long *)v6 != v7)
      {
        do
        {
          double v24 = *(double *)(v23 + 8);
          double v25 = *(double *)(v23 + 16);
          if (v24 > v22 && v24 < v21) {
            double v21 = *(double *)(v23 + 8);
          }
          if (v25 > v5) {
            double v27 = *(double *)(v23 + 16);
          }
          else {
            double v27 = v20;
          }
          if (v25 < v20)
          {
            double v22 = v5;
            double v20 = v27;
          }
          v23 += 48;
        }
        while ((long long *)v23 != v7);
      }
      if (v20 >= v21) {
        double v28 = v21;
      }
      else {
        double v28 = v20;
      }
      double v29 = *(double *)(a1 + 16);
      if (v29 > 0.0)
      {
        double v30 = v29 * floor(v28 / v29);
        double v31 = v29 * floor((v29 + v5) / v29);
        if (v30 >= v31) {
          double v28 = v30;
        }
        else {
          double v28 = v31;
        }
      }
      *uint64_t v127 = 0;
      v127[1] = 0;
      v127[2] = 0;
      if ((long long *)v6 != v7)
      {
        if (v8 > 0x555555555555555) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        double v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v8);
        long long v35 = *(char **)(a1 + 96);
        long long v34 = *(char **)(a1 + 104);
        uint64_t v36 = v32;
        if (v34 != v35)
        {
          do
          {
            long long v37 = *((_OWORD *)v34 - 3);
            long long v38 = *((_OWORD *)v34 - 2);
            *(_OWORD *)(v36 - 21) = *(_OWORD *)(v34 - 21);
            *((_OWORD *)v36 - 3) = v37;
            *((_OWORD *)v36 - 2) = v38;
            v36 -= 48;
            v34 -= 48;
          }
          while (v34 != v35);
          long long v34 = (char *)*v127;
        }
        *(void *)(a1 + 96) = v36;
        *(void *)(a1 + 104) = v32;
        *(void *)(a1 + 112) = &v32[48 * v33];
        if (v34) {
          operator delete(v34);
        }
      }
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_updateSourceOrder(a1);
      id WeakRetained = objc_loadWeakRetained(location);

      if (WeakRetained)
      {
        *(void *)&v129.double var0 = a1;
        unint64_t v40 = 126 - 2 * __clz(v8);
        if ((long long *)v6 == v7) {
          uint64_t v41 = 0;
        }
        else {
          uint64_t v41 = v40;
        }
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(v6, v7, (uint64_t)&v129, v41, 1);
      }
      if (*(unsigned char *)(a1 + 25)) {
        id v120 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      }
      else {
        id v120 = 0;
      }
      long long v119 = (void *)v6;
      if ((long long *)v6 == v7)
      {
LABEL_112:
        *(double *)(a1 + 208) = HKIntervalMask<double>::removeIntervalsBefore(v117, v28) + *(double *)(a1 + 208);
        uint64_t v97 = *(void **)(a1 + 216);
        if (v97 != v116)
        {
          do
          {
            *((double *)v97 + 16) = HKIntervalMask<double>::removeIntervalsBefore((double **)v97 + 13, v28)
                                  + *((double *)v97 + 16);
            uint64_t v98 = (void *)v97[1];
            if (v98)
            {
              do
              {
                uint64_t v99 = v98;
                uint64_t v98 = (void *)*v98;
              }
              while (v98);
            }
            else
            {
              do
              {
                uint64_t v99 = (void *)v97[2];
                BOOL v100 = *v99 == (void)v97;
                uint64_t v97 = v99;
              }
              while (!v100);
            }
            uint64_t v97 = v99;
          }
          while (v99 != v116);
        }
        *(double *)(a1 + 56) = v28;

        if (v119) {
          operator delete(v119);
        }
        goto LABEL_135;
      }
      int64_t v122 = 0;
      char v44 = 0;
      unint64_t v45 = v6;
      while (2)
      {
        long long v46 = *(_OWORD *)(v45 + 16);
        *(_OWORD *)&v129.double var0 = *(_OWORD *)v45;
        *(_OWORD *)&v129.var2 = v46;
        *(void *)&v129.BOOL var4 = *(void *)(v45 + 32);
        uint64_t v47 = v46;
        double v48 = v28 - v129.var1;
        double v49 = *(double *)&v46 - v129.var1;
        if (v49 - (v28 - v129.var1) >= 0.01)
        {
          if (v48 < 0.01)
          {
            v129.BOOL var4 = 0;
            goto LABEL_61;
          }
          double v55 = v48 / v49 * v129.var0;
          int64_t var3 = v129.var3;
          BOOL var5 = v129.var5;
          double v54 = v129.var0 - v55;
          v129.double var0 = v55;
          v129.var2 = v28;
          double v53 = v28;
          BOOL var4 = v129.var4;
          if (v129.var4) {
            goto LABEL_54;
          }
LABEL_61:
          uint64_t v59 = *(_OWORD **)(a1 + 104);
          unint64_t v60 = *(void *)(a1 + 112);
          if ((unint64_t)v59 < v60)
          {
            long long v61 = *(_OWORD *)v45;
            long long v62 = *(_OWORD *)(v45 + 32);
            v59[1] = *(_OWORD *)(v45 + 16);
            v59[2] = v62;
            *uint64_t v59 = v61;
            __n128 v63 = v59 + 3;
            goto LABEL_110;
          }
          unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v59 - *v127) >> 4);
          unint64_t v65 = v64 + 1;
          if (v64 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - *v127) >> 4);
          if (2 * v66 > v65) {
            unint64_t v65 = 2 * v66;
          }
          if (v66 >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v67 = 0x555555555555555;
          }
          else {
            unint64_t v67 = v65;
          }
          if (v67) {
            unint64_t v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v67);
          }
          else {
            uint64_t v68 = 0;
          }
          uint64_t v74 = (_OWORD *)(v67 + 48 * v64);
          long long v75 = *(_OWORD *)v45;
          long long v76 = *(_OWORD *)(v45 + 32);
          v74[1] = *(_OWORD *)(v45 + 16);
          v74[2] = v76;
          *uint64_t v74 = v75;
          uint64_t v78 = *(char **)(a1 + 96);
          uint64_t v77 = *(char **)(a1 + 104);
          uint64_t v79 = v74;
          if (v77 != v78)
          {
            do
            {
              long long v80 = *((_OWORD *)v77 - 3);
              long long v81 = *((_OWORD *)v77 - 2);
              *(_OWORD *)((char *)v79 - 21) = *(_OWORD *)(v77 - 21);
              *(v79 - 3) = v80;
              *(v79 - 2) = v81;
              v79 -= 3;
              v77 -= 48;
            }
            while (v77 != v78);
            uint64_t v77 = (char *)*v127;
          }
          __n128 v63 = v74 + 3;
          *(void *)(a1 + 96) = v79;
          *(void *)(a1 + 104) = v74 + 3;
          *(void *)(a1 + 112) = v67 + 48 * v68;
          if (v77)
          {
            id v82 = v77;
            goto LABEL_109;
          }
LABEL_110:
          *(void *)(a1 + 104) = v63;
        }
        else
        {
          int64_t var3 = 0;
          BOOL var4 = 0;
          BOOL var5 = 0;
          double v53 = 0.0;
          uint64_t v47 = 0;
          double v54 = 0.0;
          if (!v129.var4) {
            goto LABEL_61;
          }
LABEL_54:
          BOOL v125 = var5;
          int64_t v126 = var3;
          HDRawQuantitySample::applyMask((uint64_t)&v129, v123);
          int v56 = *(unsigned __int8 *)(v45 + 42);
          int v57 = *(unsigned __int8 *)(v45 + 41);
          char v124 = *(unsigned char *)(v45 + 40);
          if (v129.var4)
          {
            if (v44)
            {
              unint64_t v58 = v129.var3;
              if (v122 == v129.var3 || *(unsigned char *)(a1 + 24))
              {
                *(double *)(a1 + 120) = v129.var0 + *(double *)(a1 + 120);
                if (!v56) {
                  ++*(void *)(a1 + 128);
                }
                HDStatisticsTimeInterval::addSample(v121, &v129, v56 == 0);
                int v56 = 1;
              }
            }
            else
            {
              *(double *)(a1 + 120) = v129.var0 + *(double *)(a1 + 120);
              if (!v56) {
                ++*(void *)(a1 + 128);
              }
              HDStatisticsTimeInterval::addSample(v121, &v129, v56 == 0);
              int v56 = 1;
              unint64_t v58 = v129.var3;
              int64_t v122 = v129.var3;
            }
            if (*(unsigned char *)(a1 + 25))
            {
              id v69 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, v58);
              if (v69)
              {
                uint64_t v70 = [v120 objectForKeyedSubscript:v69];
                int8x16_t v71 = v70;
                if (v70)
                {
                  if ([v70 longLongValue] == v58 || *(unsigned char *)(a1 + 24))
                  {
                    unint64_t v72 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v58);
                    uint64_t v73 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v72);
                    goto LABEL_87;
                  }
                }
                else
                {
                  long long v83 = [NSNumber numberWithLongLong:v58];
                  [v120 setObject:v83 forKeyedSubscript:v69];

                  unint64_t v84 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v58);
                  uint64_t v73 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v84);
LABEL_87:
                  *(double *)uint64_t v73 = v129.var0 + *(double *)v73;
                  if (!v57) {
                    v73[1] = (uint64_t *)((char *)v73[1] + 1);
                  }
                  HDStatisticsTimeInterval::addSample((uint64_t *)v73 + 7, &v129, v57 == 0);
                  LOBYTE(v57) = 1;
                }
              }
            }
            char v44 = 1;
          }
          if (var4)
          {
            BOOL v85 = v56 != 0;
            long long v87 = *(char **)(a1 + 104);
            unint64_t v86 = *(void *)(a1 + 112);
            if ((unint64_t)v87 < v86)
            {
              *(double *)long long v87 = v54;
              *((double *)v87 + 1) = v53;
              *((void *)v87 + 2) = v47;
              *((void *)v87 + 3) = v126;
              v87[32] = var4;
              v87[33] = v125;
              v87[40] = v124;
              v87[41] = v57;
              __n128 v63 = v87 + 48;
              v87[42] = v85;
              goto LABEL_110;
            }
            id v82 = (char *)*v127;
            unint64_t v88 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v87[-*v127] >> 4);
            unint64_t v89 = v88 + 1;
            if (v88 + 1 > 0x555555555555555) {
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v90 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v86 - (void)v82) >> 4);
            if (2 * v90 > v89) {
              unint64_t v89 = 2 * v90;
            }
            if (v90 >= 0x2AAAAAAAAAAAAAALL) {
              unint64_t v91 = 0x555555555555555;
            }
            else {
              unint64_t v91 = v89;
            }
            if (v91)
            {
              unint64_t v91 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v91);
              id v82 = *(char **)(a1 + 96);
              long long v87 = *(char **)(a1 + 104);
            }
            else
            {
              uint64_t v92 = 0;
            }
            unint64_t v93 = v91 + 48 * v88;
            *(double *)unint64_t v93 = v54;
            *(double *)(v93 + 8) = v53;
            *(void *)(v93 + 16) = v47;
            *(void *)(v93 + 24) = v126;
            *(unsigned char *)(v93 + 32) = var4;
            *(unsigned char *)(v93 + 33) = v125;
            *(unsigned char *)(v93 + 40) = v124;
            *(unsigned char *)(v93 + 41) = v57;
            *(unsigned char *)(v93 + 42) = v85;
            unint64_t v94 = v93;
            if (v87 != v82)
            {
              do
              {
                long long v95 = *((_OWORD *)v87 - 3);
                long long v96 = *((_OWORD *)v87 - 2);
                *(_OWORD *)(v94 - 21) = *(_OWORD *)(v87 - 21);
                *(_OWORD *)(v94 - 48) = v95;
                *(_OWORD *)(v94 - 32) = v96;
                v94 -= 48;
                v87 -= 48;
              }
              while (v87 != v82);
              id v82 = (char *)*v127;
            }
            __n128 v63 = (_OWORD *)(v93 + 48);
            *(void *)(a1 + 96) = v94;
            *(void *)(a1 + 104) = v93 + 48;
            *(void *)(a1 + 112) = v91 + 48 * v92;
            if (v82) {
LABEL_109:
            }
              operator delete(v82);
            goto LABEL_110;
          }
        }
        v45 += 48;
        if ((long long *)v45 == v7) {
          goto LABEL_112;
        }
        continue;
      }
    }
    double v10 = *(double *)v6;
    double v9 = *(double *)(v6 + 8);
    double v11 = *(double *)(v6 + 16);
    int64_t v12 = *(void *)(v6 + 24);
    char v13 = *(unsigned char *)(v6 + 32);
    char v14 = *(unsigned char *)(v6 + 33);
    double v15 = a2 - v9;
    if (a2 - v9 >= 0.01)
    {
      if (v11 - v9 - v15 < 0.01)
      {
        uint64_t v42 = 0;
        char v43 = 0;
        double v18 = 0.0;
        double v17 = *(double *)(v6 + 16);
        char v16 = *(unsigned char *)(v6 + 32);
        double v19 = 0.0;
        double v11 = 0.0;
        char v13 = 0;
LABEL_123:
        int v102 = *(unsigned __int8 *)(v6 + 42);
        int v103 = *(unsigned __int8 *)(v6 + 41);
        int v104 = *(unsigned __int8 *)(v6 + 40);
        v129.double var0 = v10;
        v129.var1 = v9;
        v129.var2 = v17;
        v129.int64_t var3 = v12;
        v129.BOOL var4 = v16;
        v129.BOOL var5 = v14;
        *(_DWORD *)(&v129.var5 + 1) = *(_DWORD *)(v6 + 34);
        *(_WORD *)(&v129.var5 + 5) = *(_WORD *)(v6 + 38);
        *(double *)&long long v130 = v18;
        *((double *)&v130 + 1) = v19;
        *(double *)&long long v131 = v11;
        *((void *)&v131 + 1) = v42;
        LOBYTE(v132) = v13;
        HIBYTE(v132) = v43;
        HDRawQuantitySample::applyMask((uint64_t)&v129, v123);
        BOOL v105 = v104 != 0;
        BOOL v106 = v103 != 0;
        BOOL v107 = v102 != 0;
        if (v129.var4)
        {
          double var0 = v129.var0;
          *(double *)(a1 + 120) = v129.var0 + *(double *)(a1 + 120);
          if (!v102) {
            ++*(void *)(a1 + 128);
          }
          HDStatisticsTimeInterval::addSample(v121, &v129, v102 == 0);
          if (*(unsigned char *)(a1 + 25))
          {
            unint64_t v109 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v129.var3);
            uint64_t v110 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v109);
            *(double *)uint64_t v110 = var0 + *(double *)v110;
            if (!v103) {
              v110[1] = (uint64_t *)((char *)v110[1] + 1);
            }
            HDStatisticsTimeInterval::addSample((uint64_t *)v110 + 7, &v129, v103 == 0);
          }
          BOOL v105 = 1;
          BOOL v106 = 1;
          BOOL v107 = 1;
        }
        if ((_BYTE)v132)
        {
          LOWORD(v128) = v132;
          long long v111 = v131;
          long long v112 = (char *)*v127;
          *(_OWORD *)long long v112 = v130;
          *((_OWORD *)v112 + 1) = v111;
          *((void *)v112 + 4) = v128;
          v112[40] = v105;
          v112[41] = v106;
          v112[42] = v107;
        }
        else
        {
          *(void *)(a1 + 104) = *(void *)(a1 + 96);
        }
        goto LABEL_134;
      }
      double v101 = v10 * (v15 / (v11 - v9));
      double v17 = a2;
      char v16 = *(unsigned char *)(v6 + 32);
      double v18 = v10 - v101;
      double v10 = v101;
      double v19 = a2;
    }
    else
    {
      char v16 = 0;
      double v17 = *(double *)(v6 + 16);
      double v18 = *(double *)v6;
      double v19 = *(double *)(v6 + 8);
    }
    uint64_t v42 = *(void *)(v6 + 24);
    char v43 = *(unsigned char *)(v6 + 33);
    goto LABEL_123;
  }
}

void sub_1BD05BE0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = a2;
  double v5 = *(void **)(a1 + 224);
  double v3 = (uint64_t **)(a1 + 224);
  double v4 = v5;
  if (!v5) {
    goto LABEL_11;
  }
  unint64_t v6 = v3;
  do
  {
    uint64_t v7 = v4[4];
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      double v9 = v4;
    }
    else {
      double v9 = v4 + 1;
    }
    if (!v8) {
      unint64_t v6 = (uint64_t **)v4;
    }
    double v4 = (void *)*v9;
  }
  while (*v9);
  if (v6 == v3 || (uint64_t)v6[4] > a2)
  {
LABEL_11:
    double v10 = v3 - 1;
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v3 - 1, a2, &v12);
    unint64_t v6 = std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v10, a2, &v12);
  }
  return v6 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    double v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((void *)(a1 + 304), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, a2);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      id v10 = v6;
      uint64_t v7 = (void *)(a1 + 344);
      BOOL v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        double v11 = &v10;
        *((void *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        id v6 = v10;
      }
    }
  }
  return a2;
}

void sub_1BD05BFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  double v4 = (id *)(a1 + 88);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    id v6 = (void *)(a1 + 384);
    uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
    if (v7)
    {
      id v8 = (id)v7[3];
    }
    else
    {
      id v9 = objc_loadWeakRetained(v4);
      id v8 = [v9 bundleIdentifierForSourceID:a2];

      if (v8)
      {
        id v10 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
        objc_storeStrong(v10 + 3, v8);
      }
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1BD05C0D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, void *a3)
{
  id v6 = a1 + 1;
  double v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        uint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        double v5 = *v7;
        id v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      double v5 = v7[1];
      if (!v5)
      {
        id v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    id v9 = (char *)operator new(0x88uLL);
    *((void *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v12 = a2 - 3;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 4);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v103 = *((void *)a2 - 3);
                uint64_t v104 = *(void *)(v13 + 24);
                if (v103 == v104) {
                  return;
                }
                BOOL v105 = *(char **)(*(void *)a3 + 280);
                BOOL v106 = *(char **)(*(void *)a3 + 288);
                BOOL v107 = v105;
                long long v108 = v105;
                if (v105 == v106) {
                  goto LABEL_171;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)v13, (long long *)(v13 + 48), a2 - 3, a3);
                return;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, (uint64_t)(a2 - 3), a3);
                return;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, v13 + 144, (uint64_t)(a2 - 3), a3);
                return;
              default:
                JUMPOUT(0);
            }
            do
            {
              if (*(void *)v108 == v103) {
                goto LABEL_168;
              }
              v108 += 8;
            }
            while (v108 != v106);
            long long v108 = *(char **)(*(void *)a3 + 288);
LABEL_168:
            while (*(void *)v107 != v104)
            {
              v107 += 8;
              if (v107 == v106)
              {
                BOOL v107 = *(char **)(*(void *)a3 + 288);
                break;
              }
            }
LABEL_171:
            if (v108 - v105 < v107 - v105)
            {
              *(_OWORD *)v226 = *(_OWORD *)(v13 + 16);
              *(_OWORD *)&v226[16] = *(_OWORD *)(v13 + 32);
              long long v218 = *(_OWORD *)v13;
              long long v109 = *v12;
              long long v110 = *(a2 - 2);
              *(_OWORD *)(v13 + 27) = *(long long *)((char *)a2 - 21);
              *(_OWORD *)unint64_t v13 = v109;
              *(_OWORD *)(v13 + 16) = v110;
              *(long long *)((char *)a2 - 21) = *(_OWORD *)&v226[11];
              long long *v12 = v218;
              *(a2 - 2) = *(_OWORD *)v226;
            }
            return;
          }
          if (v14 <= 1151)
          {
            long long v111 = (long long *)(v13 + 48);
            BOOL v113 = (long long *)v13 == a2 || v111 == a2;
            if (a5)
            {
              if (!v113)
              {
                unint64_t v114 = v13;
                do
                {
                  unint64_t v115 = v114;
                  unint64_t v114 = (unint64_t)v111;
                  uint64_t v116 = *(void *)(v115 + 72);
                  uint64_t v117 = *(void *)(v115 + 24);
                  if (v116 != v117)
                  {
                    long long v118 = *(char **)(*(void *)a3 + 280);
                    long long v119 = *(char **)(*(void *)a3 + 288);
                    id v120 = v118;
                    long long v121 = v118;
                    if (v118 != v119)
                    {
                      do
                      {
                        if (*(void *)v121 == v116) {
                          goto LABEL_196;
                        }
                        v121 += 8;
                      }
                      while (v121 != v119);
                      long long v121 = *(char **)(*(void *)a3 + 288);
LABEL_196:
                      while (*(void *)v120 != v117)
                      {
                        v120 += 8;
                        if (v120 == v119)
                        {
                          id v120 = *(char **)(*(void *)a3 + 288);
                          break;
                        }
                      }
                    }
                    if (v121 - v118 < v120 - v118)
                    {
                      uint64_t v227 = *(void *)(v114 + 16);
                      long long v219 = *(_OWORD *)v114;
                      long long v236 = *(_OWORD *)(v115 + 80);
                      unint64_t v122 = v114;
                      while (1)
                      {
                        long long v123 = *(_OWORD *)(v115 + 16);
                        *(_OWORD *)unint64_t v122 = *(_OWORD *)v115;
                        *(_OWORD *)(v122 + 16) = v123;
                        *(_OWORD *)(v122 + 27) = *(_OWORD *)(v115 + 27);
                        if (v115 == v13) {
                          break;
                        }
                        unint64_t v122 = v115;
                        uint64_t v124 = *(void *)(v115 - 24);
                        if (v116 != v124)
                        {
                          BOOL v125 = *(char **)(*(void *)a3 + 280);
                          int64_t v126 = *(char **)(*(void *)a3 + 288);
                          uint64_t v127 = v125;
                          uint64_t v128 = v125;
                          if (v125 != v126)
                          {
                            do
                            {
                              if (*(void *)v128 == v116) {
                                goto LABEL_208;
                              }
                              v128 += 8;
                            }
                            while (v128 != v126);
                            uint64_t v128 = *(char **)(*(void *)a3 + 288);
LABEL_208:
                            while (*(void *)v127 != v124)
                            {
                              v127 += 8;
                              if (v127 == v126)
                              {
                                uint64_t v127 = *(char **)(*(void *)a3 + 288);
                                break;
                              }
                            }
                          }
                          unint64_t v115 = v122 - 48;
                          if (v128 - v125 < v127 - v125) {
                            continue;
                          }
                        }
                        goto LABEL_212;
                      }
                      unint64_t v122 = v13;
LABEL_212:
                      *(_OWORD *)unint64_t v122 = v219;
                      *(void *)(v122 + 16) = v227;
                      *(void *)(v122 + 24) = v116;
                      *(void *)(v122 + 32) = v236;
                      *(_DWORD *)(v122 + 39) = *(_DWORD *)((char *)&v236 + 7);
                    }
                  }
                  long long v111 = (long long *)(v114 + 48);
                }
                while ((long long *)(v114 + 48) != a2);
              }
            }
            else if (!v113)
            {
              do
              {
                unint64_t v201 = a1;
                a1 = (unint64_t)v111;
                uint64_t v202 = *(void *)(v201 + 72);
                uint64_t v203 = *(void *)(v201 + 24);
                if (v202 != v203)
                {
                  v204 = *(char **)(*(void *)a3 + 280);
                  v205 = *(char **)(*(void *)a3 + 288);
                  v206 = v204;
                  v207 = v204;
                  if (v204 != v205)
                  {
                    do
                    {
                      if (*(void *)v207 == v202) {
                        goto LABEL_312;
                      }
                      v207 += 8;
                    }
                    while (v207 != v205);
                    v207 = *(char **)(*(void *)a3 + 288);
LABEL_312:
                    while (*(void *)v206 != v203)
                    {
                      v206 += 8;
                      if (v206 == v205)
                      {
                        v206 = *(char **)(*(void *)a3 + 288);
                        break;
                      }
                    }
                  }
                  if (v207 - v204 < v206 - v204)
                  {
                    uint64_t v230 = *(void *)(a1 + 16);
                    long long v222 = *(_OWORD *)a1;
                    long long v239 = *(_OWORD *)(v201 + 80);
                    unint64_t v208 = a1;
                    do
                    {
                      v209 = (_OWORD *)v208;
                      unint64_t v208 = v201;
                      long long v210 = *(_OWORD *)(v201 + 16);
                      _OWORD *v209 = *(_OWORD *)v201;
                      v209[1] = v210;
                      *(_OWORD *)((char *)v209 + 27) = *(_OWORD *)(v201 + 27);
                      uint64_t v211 = *(void *)(v201 - 24);
                      if (v202 == v211) {
                        break;
                      }
                      v212 = *(char **)(*(void *)a3 + 280);
                      v213 = *(char **)(*(void *)a3 + 288);
                      v214 = v212;
                      v215 = v212;
                      if (v212 != v213)
                      {
                        do
                        {
                          if (*(void *)v215 == v202) {
                            goto LABEL_322;
                          }
                          v215 += 8;
                        }
                        while (v215 != v213);
                        v215 = *(char **)(*(void *)a3 + 288);
LABEL_322:
                        while (*(void *)v214 != v211)
                        {
                          v214 += 8;
                          if (v214 == v213)
                          {
                            v214 = *(char **)(*(void *)a3 + 288);
                            break;
                          }
                        }
                      }
                      unint64_t v201 = v208 - 48;
                    }
                    while (v215 - v212 < v214 - v212);
                    *(_OWORD *)unint64_t v208 = v222;
                    *(void *)(v208 + 16) = v230;
                    *(void *)(v208 + 24) = v202;
                    *(void *)(v208 + 32) = v239;
                    *(_DWORD *)(v208 + 39) = *(_DWORD *)((char *)&v239 + 7);
                  }
                }
                long long v111 = (long long *)(a1 + 48);
              }
              while ((long long *)(a1 + 48) != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((long long *)v13 != a2)
            {
              int64_t v129 = (v15 - 2) >> 1;
              int64_t v130 = v129;
              do
              {
                int64_t v131 = v130;
                if (v129 >= v130)
                {
                  uint64_t v132 = (2 * v130) | 1;
                  unint64_t v133 = v13 + 48 * v132;
                  if (2 * v131 + 2 < (uint64_t)v15)
                  {
                    uint64_t v134 = *(void *)(v133 + 24);
                    uint64_t v135 = *(void *)(v133 + 72);
                    if (v134 != v135)
                    {
                      v137 = *(char **)(*(void *)a3 + 280);
                      v136 = *(char **)(*(void *)a3 + 288);
                      v138 = v137;
                      v139 = v137;
                      if (v137 != v136)
                      {
                        do
                        {
                          if (*(void *)v139 == v134) {
                            goto LABEL_224;
                          }
                          v139 += 8;
                        }
                        while (v139 != v136);
                        v139 = *(char **)(*(void *)a3 + 288);
LABEL_224:
                        while (*(void *)v138 != v135)
                        {
                          v138 += 8;
                          if (v138 == v136)
                          {
                            v138 = *(char **)(*(void *)a3 + 288);
                            break;
                          }
                        }
                      }
                      v133 += 48 * (v139 - v137 < v138 - v137);
                      if (v139 - v137 < v138 - v137) {
                        uint64_t v132 = 2 * v131 + 2;
                      }
                    }
                  }
                  unint64_t v140 = v13 + 48 * v131;
                  uint64_t v141 = *(void *)(v133 + 24);
                  uint64_t v142 = *(void *)(v140 + 24);
                  if (v141 == v142) {
                    goto LABEL_238;
                  }
                  v144 = *(char **)(*(void *)a3 + 280);
                  v143 = *(char **)(*(void *)a3 + 288);
                  v145 = v144;
                  v146 = v144;
                  if (v144 != v143)
                  {
                    do
                    {
                      if (*(void *)v146 == v141) {
                        goto LABEL_234;
                      }
                      v146 += 8;
                    }
                    while (v146 != v143);
                    v146 = *(char **)(*(void *)a3 + 288);
LABEL_234:
                    while (*(void *)v145 != v142)
                    {
                      v145 += 8;
                      if (v145 == v143)
                      {
                        v145 = *(char **)(*(void *)a3 + 288);
                        break;
                      }
                    }
                  }
                  if (v146 - v144 >= v145 - v144)
                  {
LABEL_238:
                    uint64_t v228 = *(void *)(v140 + 16);
                    long long v220 = *(_OWORD *)v140;
                    long long v237 = *(_OWORD *)(v140 + 32);
                    long long v147 = *(_OWORD *)v133;
                    long long v148 = *(_OWORD *)(v133 + 16);
                    *(_OWORD *)(v140 + 27) = *(_OWORD *)(v133 + 27);
                    *(_OWORD *)unint64_t v140 = v147;
                    *(_OWORD *)(v140 + 16) = v148;
                    if (v129 >= v132)
                    {
                      while (1)
                      {
                        uint64_t v150 = 2 * v132;
                        uint64_t v132 = (2 * v132) | 1;
                        unint64_t v149 = v13 + 48 * v132;
                        uint64_t v151 = v150 + 2;
                        if (v151 < (uint64_t)v15)
                        {
                          uint64_t v152 = *(void *)(v149 + 24);
                          uint64_t v153 = *(void *)(v149 + 72);
                          if (v152 != v153)
                          {
                            v154 = *(char **)(*(void *)a3 + 280);
                            v155 = *(char **)(*(void *)a3 + 288);
                            v156 = v154;
                            v157 = v154;
                            if (v154 != v155)
                            {
                              do
                              {
                                if (*(void *)v157 == v152) {
                                  goto LABEL_246;
                                }
                                v157 += 8;
                              }
                              while (v157 != v155);
                              v157 = *(char **)(*(void *)a3 + 288);
LABEL_246:
                              while (*(void *)v156 != v153)
                              {
                                v156 += 8;
                                if (v156 == v155)
                                {
                                  v156 = *(char **)(*(void *)a3 + 288);
                                  break;
                                }
                              }
                            }
                            v149 += 48 * (v157 - v154 < v156 - v154);
                            if (v157 - v154 < v156 - v154) {
                              uint64_t v132 = v151;
                            }
                          }
                        }
                        uint64_t v158 = *(void *)(v149 + 24);
                        if (v158 != v142)
                        {
                          v160 = *(char **)(*(void *)a3 + 280);
                          v159 = *(char **)(*(void *)a3 + 288);
                          v161 = v160;
                          v162 = v160;
                          if (v160 != v159)
                          {
                            do
                            {
                              if (*(void *)v162 == v158) {
                                goto LABEL_256;
                              }
                              v162 += 8;
                            }
                            while (v162 != v159);
                            v162 = *(char **)(*(void *)a3 + 288);
LABEL_256:
                            while (*(void *)v161 != v142)
                            {
                              v161 += 8;
                              if (v161 == v159)
                              {
                                v161 = *(char **)(*(void *)a3 + 288);
                                break;
                              }
                            }
                          }
                          if (v162 - v160 < v161 - v160) {
                            break;
                          }
                        }
                        long long v163 = *(_OWORD *)v149;
                        long long v164 = *(_OWORD *)(v149 + 16);
                        *(_OWORD *)(v133 + 27) = *(_OWORD *)(v149 + 27);
                        *(_OWORD *)unint64_t v133 = v163;
                        *(_OWORD *)(v133 + 16) = v164;
                        unint64_t v133 = v149;
                        if (v129 < v132) {
                          goto LABEL_261;
                        }
                      }
                    }
                    unint64_t v149 = v133;
LABEL_261:
                    *(_OWORD *)unint64_t v149 = v220;
                    *(void *)(v149 + 16) = v228;
                    *(void *)(v149 + 24) = v142;
                    *(void *)(v149 + 32) = v237;
                    *(_DWORD *)(v149 + 39) = *(_DWORD *)((char *)&v237 + 7);
                  }
                }
                int64_t v130 = v131 - 1;
              }
              while (v131);
              int64_t v165 = v14 / 0x30uLL;
              do
              {
                uint64_t v166 = 0;
                *(_OWORD *)v229 = *(_OWORD *)(v13 + 16);
                *(_OWORD *)&v229[16] = *(_OWORD *)(v13 + 32);
                long long v221 = *(_OWORD *)v13;
                uint64_t v167 = v165 - 2;
                if (v165 < 2) {
                  uint64_t v167 = v165 - 1;
                }
                uint64_t v168 = v167 >> 1;
                unint64_t v169 = v13;
                do
                {
                  v170 = (_OWORD *)v169;
                  v169 += 48 * v166 + 48;
                  uint64_t v171 = 2 * v166;
                  uint64_t v166 = (2 * v166) | 1;
                  uint64_t v172 = v171 + 2;
                  if (v171 + 2 < v165)
                  {
                    uint64_t v173 = *(void *)(v169 + 24);
                    uint64_t v174 = *(void *)(v169 + 72);
                    if (v173 != v174)
                    {
                      v176 = *(char **)(*(void *)a3 + 280);
                      v175 = *(char **)(*(void *)a3 + 288);
                      v177 = v176;
                      v178 = v176;
                      if (v176 != v175)
                      {
                        do
                        {
                          if (*(void *)v178 == v173) {
                            goto LABEL_273;
                          }
                          v178 += 8;
                        }
                        while (v178 != v175);
                        v178 = *(char **)(*(void *)a3 + 288);
LABEL_273:
                        while (*(void *)v177 != v174)
                        {
                          v177 += 8;
                          if (v177 == v175)
                          {
                            v177 = *(char **)(*(void *)a3 + 288);
                            break;
                          }
                        }
                      }
                      v169 += 48 * (v178 - v176 < v177 - v176);
                      if (v178 - v176 < v177 - v176) {
                        uint64_t v166 = v172;
                      }
                    }
                  }
                  long long v179 = *(_OWORD *)v169;
                  long long v180 = *(_OWORD *)(v169 + 16);
                  *(_OWORD *)((char *)v170 + 27) = *(_OWORD *)(v169 + 27);
                  _OWORD *v170 = v179;
                  v170[1] = v180;
                }
                while (v166 <= v168);
                a2 -= 3;
                if ((long long *)v169 == a2)
                {
                  *(_OWORD *)(v169 + 27) = *(_OWORD *)&v229[11];
                  *(_OWORD *)unint64_t v169 = v221;
                  *(_OWORD *)(v169 + 16) = *(_OWORD *)v229;
                }
                else
                {
                  long long v181 = *a2;
                  long long v182 = a2[1];
                  *(_OWORD *)(v169 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v169 = v181;
                  *(_OWORD *)(v169 + 16) = v182;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v229[11];
                  *a2 = v221;
                  a2[1] = *(_OWORD *)v229;
                  uint64_t v183 = v169 - v13 + 48;
                  if (v183 >= 49)
                  {
                    unint64_t v184 = (v183 / 0x30uLL - 2) >> 1;
                    unint64_t v185 = v13 + 48 * v184;
                    uint64_t v186 = *(void *)(v185 + 24);
                    uint64_t v187 = *(void *)(v169 + 24);
                    if (v186 != v187)
                    {
                      v189 = *(char **)(*(void *)a3 + 280);
                      v188 = *(char **)(*(void *)a3 + 288);
                      v190 = v189;
                      v191 = v189;
                      if (v189 != v188)
                      {
                        do
                        {
                          if (*(void *)v191 == v186) {
                            goto LABEL_286;
                          }
                          v191 += 8;
                        }
                        while (v191 != v188);
                        v191 = *(char **)(*(void *)a3 + 288);
LABEL_286:
                        while (*(void *)v190 != v187)
                        {
                          v190 += 8;
                          if (v190 == v188)
                          {
                            v190 = *(char **)(*(void *)a3 + 288);
                            break;
                          }
                        }
                      }
                      if (v191 - v189 < v190 - v189)
                      {
                        uint64_t v242 = *(void *)(v169 + 16);
                        long long v238 = *(_OWORD *)v169;
                        long long v233 = *(_OWORD *)(v169 + 32);
                        do
                        {
                          v192 = (_OWORD *)v169;
                          unint64_t v169 = v185;
                          long long v193 = *(_OWORD *)v185;
                          long long v194 = *(_OWORD *)(v185 + 16);
                          *(_OWORD *)((char *)v192 + 27) = *(_OWORD *)(v185 + 27);
                          _OWORD *v192 = v193;
                          v192[1] = v194;
                          if (!v184) {
                            break;
                          }
                          unint64_t v184 = (v184 - 1) >> 1;
                          unint64_t v185 = v13 + 48 * v184;
                          uint64_t v195 = *(void *)(v185 + 24);
                          if (v195 == v187) {
                            break;
                          }
                          v197 = *(char **)(*(void *)a3 + 280);
                          v196 = *(char **)(*(void *)a3 + 288);
                          v198 = v197;
                          v199 = v197;
                          if (v197 != v196)
                          {
                            do
                            {
                              if (*(void *)v199 == v195) {
                                goto LABEL_297;
                              }
                              v199 += 8;
                            }
                            while (v199 != v196);
                            v199 = *(char **)(*(void *)a3 + 288);
LABEL_297:
                            while (*(void *)v198 != v187)
                            {
                              v198 += 8;
                              if (v198 == v196)
                              {
                                v198 = *(char **)(*(void *)a3 + 288);
                                break;
                              }
                            }
                          }
                        }
                        while (v199 - v197 < v198 - v197);
                        *(_OWORD *)unint64_t v169 = v238;
                        *(void *)(v169 + 16) = v242;
                        *(void *)(v169 + 24) = v187;
                        *(void *)(v169 + 32) = v233;
                        *(_DWORD *)(v169 + 39) = *(_DWORD *)((char *)&v233 + 7);
                      }
                    }
                  }
                }
              }
              while (v165-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          double v17 = (long long *)(v13 + 48 * (v15 >> 1));
          if ((unint64_t)v14 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v15 >> 1)), a2 - 3, a3);
            uint64_t v18 = 3 * v16;
            double v19 = (long long *)(a1 + 48 * v16 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)(a1 + 48), v19, a2 - 6, a3);
            double v20 = (long long *)(a1 + 48 + 16 * v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)(a1 + 96), v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(v19, v17, v20, a3);
            *(_OWORD *)v223 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v223[16] = *(_OWORD *)(a1 + 32);
            long long v216 = *(_OWORD *)a1;
            long long v21 = *(long long *)((char *)v17 + 27);
            long long v22 = v17[1];
            *(_OWORD *)a1 = *v17;
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(a1 + 27) = v21;
            *(long long *)((char *)v17 + 27) = *(_OWORD *)&v223[11];
            long long *v17 = v216;
            v17[1] = *(_OWORD *)v223;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)(a1 + 48 * (v15 >> 1)), (long long *)a1, a2 - 3, a3);
          }
          --a4;
          if (a5)
          {
            uint64_t v23 = *(void *)(a1 + 24);
            uint64_t v24 = *(void *)a3;
            break;
          }
          uint64_t v25 = *(void *)(a1 - 24);
          uint64_t v23 = *(void *)(a1 + 24);
          if (v25 != v23)
          {
            uint64_t v24 = *(void *)a3;
            id v26 = *(char **)(*(void *)a3 + 280);
            double v27 = *(char **)(*(void *)a3 + 288);
            double v28 = v26;
            double v29 = v26;
            if (v26 != v27)
            {
              do
              {
                if (*(void *)v29 == v25) {
                  goto LABEL_16;
                }
                v29 += 8;
              }
              while (v29 != v27);
              double v29 = *(char **)(*(void *)a3 + 288);
LABEL_16:
              while (*(void *)v28 != v23)
              {
                v28 += 8;
                if (v28 == v27)
                {
                  double v28 = *(char **)(*(void *)a3 + 288);
                  break;
                }
              }
            }
            if (v29 - v26 < v28 - v26) {
              break;
            }
          }
          uint64_t v241 = *(void *)(a1 + 16);
          long long v232 = *(_OWORD *)(a1 + 32);
          long long v235 = *(_OWORD *)a1;
          uint64_t v67 = *((void *)a2 - 3);
          if (v23 == v67) {
            goto LABEL_107;
          }
          uint64_t v68 = *(char **)(*(void *)a3 + 280);
          id v69 = *(char **)(*(void *)a3 + 288);
          if (v68 == v69)
          {
            int8x16_t v71 = *(char **)(*(void *)a3 + 280);
            uint64_t v70 = v71;
          }
          else
          {
            uint64_t v70 = *(char **)(*(void *)a3 + 280);
            while (*(void *)v70 != v23)
            {
              v70 += 8;
              if (v70 == v69)
              {
                uint64_t v70 = *(char **)(*(void *)a3 + 288);
                break;
              }
            }
            int8x16_t v71 = *(char **)(*(void *)a3 + 280);
            while (*(void *)v71 != v67)
            {
              v71 += 8;
              if (v71 == v69)
              {
                int8x16_t v71 = *(char **)(*(void *)a3 + 288);
                break;
              }
            }
          }
          if (v70 - v68 >= v71 - v68)
          {
LABEL_107:
            unint64_t v13 = a1 + 48;
            if (a1 + 48 < (unint64_t)a2)
            {
              uint64_t v75 = *(void *)a3;
              unint64_t v76 = a1;
              do
              {
                uint64_t v77 = *(void *)(v76 + 72);
                unint64_t v76 = v13;
                if (v23 != v77)
                {
                  uint64_t v78 = *(char **)(v75 + 280);
                  uint64_t v79 = *(char **)(v75 + 288);
                  long long v80 = v78;
                  long long v81 = v78;
                  if (v78 != v79)
                  {
                    do
                    {
                      if (*(void *)v81 == v23) {
                        goto LABEL_114;
                      }
                      v81 += 8;
                    }
                    while (v81 != v79);
                    long long v81 = *(char **)(v75 + 288);
LABEL_114:
                    while (*(void *)v80 != v77)
                    {
                      v80 += 8;
                      if (v80 == v79)
                      {
                        long long v80 = *(char **)(v75 + 288);
                        break;
                      }
                    }
                  }
                  if (v81 - v78 < v80 - v78) {
                    break;
                  }
                }
                v13 += 48;
              }
              while (v76 + 48 < (unint64_t)a2);
            }
          }
          else
          {
            unint64_t v13 = a1;
            do
            {
              do
              {
                uint64_t v72 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v72);
              if (v68 == v69)
              {
                uint64_t v74 = *(char **)(*(void *)a3 + 280);
                uint64_t v73 = v74;
              }
              else
              {
                uint64_t v73 = *(char **)(*(void *)a3 + 280);
                while (*(void *)v73 != v23)
                {
                  v73 += 8;
                  if (v73 == v69)
                  {
                    uint64_t v73 = *(char **)(*(void *)a3 + 288);
                    break;
                  }
                }
                uint64_t v74 = *(char **)(*(void *)a3 + 280);
                while (*(void *)v74 != v72)
                {
                  v74 += 8;
                  if (v74 == v69)
                  {
                    uint64_t v74 = *(char **)(*(void *)a3 + 288);
                    break;
                  }
                }
              }
            }
            while (v73 - v68 >= v74 - v68);
          }
          id v82 = a2;
          if (v13 < (unint64_t)a2)
          {
            uint64_t v83 = *(void *)a3;
            id v82 = a2;
            do
            {
              uint64_t v84 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v84) {
                break;
              }
              BOOL v85 = *(char **)(v83 + 280);
              unint64_t v86 = *(char **)(v83 + 288);
              long long v87 = v85;
              unint64_t v88 = v85;
              if (v85 != v86)
              {
                do
                {
                  if (*(void *)v88 == v23) {
                    goto LABEL_126;
                  }
                  v88 += 8;
                }
                while (v88 != v86);
                unint64_t v88 = *(char **)(v83 + 288);
LABEL_126:
                while (*(void *)v87 != v84)
                {
                  v87 += 8;
                  if (v87 == v86)
                  {
                    long long v87 = *(char **)(v83 + 288);
                    break;
                  }
                }
              }
            }
            while (v88 - v85 < v87 - v85);
          }
          while (v13 < (unint64_t)v82)
          {
            *(_OWORD *)v225 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v225[16] = *(_OWORD *)(v13 + 32);
            long long v217 = *(_OWORD *)v13;
            long long v89 = *v82;
            long long v90 = v82[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v82 + 27);
            *(_OWORD *)unint64_t v13 = v89;
            *(_OWORD *)(v13 + 16) = v90;
            *(long long *)((char *)v82 + 27) = *(_OWORD *)&v225[11];
            *id v82 = v217;
            v82[1] = *(_OWORD *)v225;
            uint64_t v91 = *(void *)a3;
            do
            {
              do
              {
                uint64_t v92 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v92);
              unint64_t v93 = *(char **)(v91 + 280);
              unint64_t v94 = *(char **)(v91 + 288);
              if (v93 == v94)
              {
                long long v96 = *(char **)(v91 + 280);
                long long v95 = v96;
              }
              else
              {
                long long v95 = *(char **)(v91 + 280);
                while (*(void *)v95 != v23)
                {
                  v95 += 8;
                  if (v95 == v94)
                  {
                    long long v95 = *(char **)(v91 + 288);
                    break;
                  }
                }
                long long v96 = *(char **)(v91 + 280);
                while (*(void *)v96 != v92)
                {
                  v96 += 8;
                  if (v96 == v94)
                  {
                    long long v96 = *(char **)(v91 + 288);
                    break;
                  }
                }
              }
            }
            while (v95 - v93 >= v96 - v93);
            do
            {
              uint64_t v97 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v97) {
                break;
              }
              if (v93 == v94)
              {
                uint64_t v99 = v93;
                uint64_t v98 = v93;
              }
              else
              {
                uint64_t v98 = v93;
                while (*(void *)v98 != v23)
                {
                  v98 += 8;
                  if (v98 == v94)
                  {
                    uint64_t v98 = v94;
                    break;
                  }
                }
                uint64_t v99 = v93;
                while (*(void *)v99 != v97)
                {
                  v99 += 8;
                  if (v99 == v94)
                  {
                    uint64_t v99 = v94;
                    break;
                  }
                }
              }
            }
            while (v98 - v93 < v99 - v93);
          }
          BOOL v100 = (long long *)(v13 - 48);
          BOOL v5 = v13 - 48 >= a1;
          BOOL v6 = v13 - 48 == a1;
          if (v13 - 48 != a1)
          {
            long long v101 = *v100;
            long long v102 = *(_OWORD *)(v13 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
            *(_OWORD *)a1 = v101;
            *(_OWORD *)(a1 + 16) = v102;
          }
          a5 = 0;
          *BOOL v100 = v235;
          *(void *)(v13 - 32) = v241;
          *(void *)(v13 - 24) = v23;
          *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v232 + 7);
          *(void *)(v13 - 16) = v232;
        }
        uint64_t v240 = *(void *)(a1 + 16);
        long long v231 = *(_OWORD *)(a1 + 32);
        long long v234 = *(_OWORD *)a1;
        unint64_t v30 = a1;
        do
        {
          unint64_t v31 = v30;
          v30 += 48;
          uint64_t v32 = *(void *)(v31 + 72);
          if (v32 == v23) {
            break;
          }
          uint64_t v33 = *(char **)(v24 + 280);
          long long v34 = *(char **)(v24 + 288);
          long long v35 = v33;
          uint64_t v36 = v33;
          if (v33 != v34)
          {
            do
            {
              if (*(void *)v36 == v32) {
                goto LABEL_26;
              }
              v36 += 8;
            }
            while (v36 != v34);
            uint64_t v36 = *(char **)(v24 + 288);
LABEL_26:
            while (*(void *)v35 != v23)
            {
              v35 += 8;
              if (v35 == v34)
              {
                long long v35 = *(char **)(v24 + 288);
                break;
              }
            }
          }
        }
        while (v36 - v33 < v35 - v33);
        long long v37 = a2;
        if (v31 == a1)
        {
          long long v37 = a2;
          if (v30 < (unint64_t)a2)
          {
            long long v37 = a2;
            do
            {
              uint64_t v43 = *((void *)v37 - 3);
              v37 -= 3;
              if (v43 != v23)
              {
                char v44 = *(char **)(v24 + 280);
                unint64_t v45 = *(char **)(v24 + 288);
                long long v46 = v44;
                uint64_t v47 = v44;
                if (v44 != v45)
                {
                  do
                  {
                    if (*(void *)v47 == v43) {
                      goto LABEL_48;
                    }
                    v47 += 8;
                  }
                  while (v47 != v45);
                  uint64_t v47 = *(char **)(v24 + 288);
LABEL_48:
                  while (*(void *)v46 != v23)
                  {
                    v46 += 8;
                    if (v46 == v45)
                    {
                      long long v46 = *(char **)(v24 + 288);
                      break;
                    }
                  }
                }
                if (v47 - v44 < v46 - v44) {
                  break;
                }
              }
            }
            while (v30 < (unint64_t)v37);
          }
        }
        else
        {
          do
          {
            do
            {
              uint64_t v38 = *((void *)v37 - 3);
              v37 -= 3;
            }
            while (v38 == v23);
            id v39 = *(char **)(v24 + 280);
            unint64_t v40 = *(char **)(v24 + 288);
            uint64_t v41 = v39;
            uint64_t v42 = v39;
            if (v39 != v40)
            {
              do
              {
                if (*(void *)v42 == v38) {
                  goto LABEL_36;
                }
                v42 += 8;
              }
              while (v42 != v40);
              uint64_t v42 = *(char **)(v24 + 288);
LABEL_36:
              while (*(void *)v41 != v23)
              {
                v41 += 8;
                if (v41 == v40)
                {
                  uint64_t v41 = *(char **)(v24 + 288);
                  break;
                }
              }
            }
          }
          while (v42 - v39 >= v41 - v39);
        }
        unint64_t v13 = v30;
        if (v30 < (unint64_t)v37)
        {
          double v48 = v37;
          do
          {
            *(_OWORD *)v224 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v224[16] = *(_OWORD *)(v13 + 32);
            long long v49 = *(_OWORD *)v13;
            long long v51 = *v48;
            long long v50 = v48[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v48 + 27);
            *(_OWORD *)unint64_t v13 = v51;
            *(_OWORD *)(v13 + 16) = v50;
            *(long long *)((char *)v48 + 27) = *(_OWORD *)&v224[11];
            long long *v48 = v49;
            v48[1] = *(_OWORD *)v224;
            uint64_t v52 = *(void *)a3;
            do
            {
              uint64_t v53 = *(void *)(v13 + 72);
              v13 += 48;
              if (v53 == v23) {
                break;
              }
              double v54 = *(char **)(v52 + 280);
              double v55 = *(char **)(v52 + 288);
              int v56 = v54;
              int v57 = v54;
              if (v54 != v55)
              {
                do
                {
                  if (*(void *)v57 == v53) {
                    goto LABEL_61;
                  }
                  v57 += 8;
                }
                while (v57 != v55);
                int v57 = *(char **)(v52 + 288);
LABEL_61:
                while (*(void *)v56 != v23)
                {
                  v56 += 8;
                  if (v56 == v55)
                  {
                    int v56 = *(char **)(v52 + 288);
                    break;
                  }
                }
              }
            }
            while (v57 - v54 < v56 - v54);
            do
            {
              do
              {
                uint64_t v58 = *((void *)v48 - 3);
                v48 -= 3;
              }
              while (v58 == v23);
              uint64_t v59 = *(char **)(v52 + 280);
              unint64_t v60 = *(char **)(v52 + 288);
              long long v61 = v59;
              long long v62 = v59;
              if (v59 != v60)
              {
                do
                {
                  if (*(void *)v62 == v58) {
                    goto LABEL_70;
                  }
                  v62 += 8;
                }
                while (v62 != v60);
                long long v62 = *(char **)(v52 + 288);
LABEL_70:
                while (*(void *)v61 != v23)
                {
                  v61 += 8;
                  if (v61 == v60)
                  {
                    long long v61 = *(char **)(v52 + 288);
                    break;
                  }
                }
              }
            }
            while (v62 - v59 >= v61 - v59);
          }
          while (v13 < (unint64_t)v48);
        }
        __n128 v63 = (long long *)(v13 - 48);
        if (v13 - 48 != a1)
        {
          long long v64 = *v63;
          long long v65 = *(_OWORD *)(v13 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
          *(_OWORD *)a1 = v64;
          *(_OWORD *)(a1 + 16) = v65;
        }
        long long *v63 = v234;
        *(void *)(v13 - 32) = v240;
        *(void *)(v13 - 24) = v23;
        *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v231 + 7);
        *(void *)(v13 - 16) = v231;
        if (v30 >= (unint64_t)v37) {
          break;
        }
LABEL_80:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(a1, v13 - 48, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, v13 - 48, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(v13, (uint64_t)a2, a3))
      {
        break;
      }
      if (!v66) {
        goto LABEL_80;
      }
    }
    a2 = (long long *)(v13 - 48);
    if (!v66) {
      continue;
    }
    break;
  }
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(long long *a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = *((void *)a2 + 3);
  uint64_t v5 = *((void *)a1 + 3);
  if (v4 == v5) {
    goto LABEL_23;
  }
  BOOL v6 = *(char **)(*(void *)a4 + 280);
  uint64_t v7 = *(char **)(*(void *)a4 + 288);
  if (v6 == v7)
  {
    id v9 = *(char **)(*(void *)a4 + 280);
    uint64_t v8 = v9;
  }
  else
  {
    uint64_t v8 = *(char **)(*(void *)a4 + 280);
    while (*(void *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        uint64_t v8 = *(char **)(*(void *)a4 + 288);
        break;
      }
    }
    id v9 = *(char **)(*(void *)a4 + 280);
    while (*(void *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        id v9 = *(char **)(*(void *)a4 + 288);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    uint64_t v13 = *((void *)a3 + 3);
    if (v13 != v4)
    {
      uint64_t v14 = *(char **)(*(void *)a4 + 280);
      unint64_t v15 = *(char **)(*(void *)a4 + 288);
      unint64_t v16 = v14;
      double v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(void *)v17 == v13) {
            goto LABEL_28;
          }
          v17 += 8;
        }
        while (v17 != v15);
        double v17 = *(char **)(*(void *)a4 + 288);
LABEL_28:
        while (*(void *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            unint64_t v16 = *(char **)(*(void *)a4 + 288);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        long long v18 = *a2;
        *(_OWORD *)long long v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        long long v19 = *(long long *)((char *)a3 + 27);
        long long v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(long long *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        __n128 result = *(__n128 *)&v46[11];
        *(long long *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        uint64_t v22 = *((void *)a2 + 3);
        uint64_t v23 = *((void *)a1 + 3);
        if (v22 != v23)
        {
          uint64_t v24 = *(char **)(*(void *)a4 + 280);
          uint64_t v25 = *(char **)(*(void *)a4 + 288);
          id v26 = v24;
          double v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(void *)v27 == v22) {
                goto LABEL_37;
              }
              v27 += 8;
            }
            while (v27 != v25);
            double v27 = *(char **)(*(void *)a4 + 288);
LABEL_37:
            while (*(void *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                id v26 = *(char **)(*(void *)a4 + 288);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            long long v28 = *a1;
            *(_OWORD *)uint64_t v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            long long v29 = *(long long *)((char *)a2 + 27);
            long long v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(long long *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            __n128 result = *(__n128 *)&v47[11];
            *(long long *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    uint64_t v10 = *((void *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        unint64_t v12 = *(char **)(*(void *)a4 + 280);
        double v11 = v12;
      }
      else
      {
        double v11 = *(char **)(*(void *)a4 + 280);
        while (*(void *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            double v11 = *(char **)(*(void *)a4 + 288);
            break;
          }
        }
        unint64_t v12 = *(char **)(*(void *)a4 + 280);
        while (*(void *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            unint64_t v12 = *(char **)(*(void *)a4 + 288);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        long long v31 = a1[1];
        long long v32 = *a1;
        *(void *)long long v49 = *((void *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        long long v33 = *(long long *)((char *)a3 + 27);
        long long v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(long long *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        __n128 result = *(__n128 *)&v49[3];
        *(long long *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    long long v35 = *a1;
    *(_OWORD *)double v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    long long v36 = *(long long *)((char *)a2 + 27);
    long long v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(long long *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    __n128 result = *(__n128 *)&v48[11];
    *(long long *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    uint64_t v38 = *((void *)a3 + 3);
    uint64_t v39 = *((void *)a2 + 3);
    if (v38 != v39)
    {
      unint64_t v40 = *(char **)(*(void *)a4 + 280);
      uint64_t v41 = *(char **)(*(void *)a4 + 288);
      uint64_t v42 = v40;
      uint64_t v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(void *)v43 == v38) {
            goto LABEL_50;
          }
          v43 += 8;
        }
        while (v43 != v41);
        uint64_t v43 = *(char **)(*(void *)a4 + 288);
LABEL_50:
        while (*(void *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            uint64_t v42 = *(char **)(*(void *)a4 + 288);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        long long v31 = a2[1];
        long long v32 = *a2;
        *(void *)long long v49 = *((void *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        long long v44 = *(long long *)((char *)a3 + 27);
        long long v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(long long *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 - 24);
      uint64_t v9 = *(void *)(a1 + 24);
      if (v8 == v9) {
        return result;
      }
      uint64_t v10 = *(char **)(*(void *)a3 + 280);
      double v11 = *(char **)(*(void *)a3 + 288);
      unint64_t v12 = v10;
      uint64_t v13 = v10;
      if (v10 == v11) {
        goto LABEL_10;
      }
      do
      {
        if (*(void *)v13 == v8) {
          goto LABEL_7;
        }
        v13 += 8;
      }
      while (v13 != v11);
      uint64_t v13 = *(char **)(*(void *)a3 + 288);
      do
      {
LABEL_7:
        if (*(void *)v12 == v9) {
          goto LABEL_10;
        }
        v12 += 8;
      }
      while (v12 != v11);
      unint64_t v12 = *(char **)(*(void *)a3 + 288);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        uint64_t v14 = (long long *)(a2 - 48);
        long long v15 = *(_OWORD *)a1;
        *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        long long v16 = *(_OWORD *)(a2 - 21);
        long long v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *uint64_t v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(long long *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), a3);
      uint64_t v19 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      int v20 = 0;
      break;
  }
  while (1)
  {
    uint64_t v21 = *(void *)(v19 + 24);
    uint64_t v22 = *(void *)(v18 + 24);
    if (v21 != v22)
    {
      uint64_t v23 = *(char **)(*(void *)a3 + 280);
      uint64_t v24 = *(char **)(*(void *)a3 + 288);
      uint64_t v25 = v23;
      id v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(void *)v26 == v21) {
            goto LABEL_19;
          }
          v26 += 8;
        }
        while (v26 != v24);
        id v26 = *(char **)(*(void *)a3 + 288);
LABEL_19:
        while (*(void *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            uint64_t v25 = *(char **)(*(void *)a3 + 288);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        long long v34 = *(_OWORD *)v19;
        uint64_t v36 = *(void *)(v19 + 16);
        long long v37 = *(_OWORD *)(v19 + 32);
        uint64_t v27 = v19;
        while (1)
        {
          long long v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1) {
            break;
          }
          uint64_t v27 = v18;
          uint64_t v29 = *(void *)(v18 - 24);
          if (v21 != v29)
          {
            long long v30 = *(char **)(*(void *)a3 + 280);
            long long v31 = *(char **)(*(void *)a3 + 288);
            long long v32 = v30;
            long long v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(void *)v33 == v21) {
                  goto LABEL_30;
                }
                v33 += 8;
              }
              while (v33 != v31);
              long long v33 = *(char **)(*(void *)a3 + 288);
LABEL_30:
              while (*(void *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  long long v32 = *(char **)(*(void *)a3 + 288);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30) {
              continue;
            }
          }
          goto LABEL_36;
        }
        uint64_t v27 = a1;
LABEL_36:
        *(_OWORD *)uint64_t v27 = v34;
        *(void *)(v27 + 16) = v36;
        *(void *)(v27 + 24) = v21;
        *(void *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8) {
          return v19 + 48 == a2;
        }
      }
    }
    uint64_t v18 = v19;
    v19 += 48;
    if (v19 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)a2, (long long *)a3, a5).n128_u64[0];
  uint64_t v11 = *(void *)(a4 + 24);
  uint64_t v12 = *(void *)(a3 + 24);
  if (v11 != v12)
  {
    uint64_t v13 = *(char **)(*(void *)a5 + 280);
    uint64_t v14 = *(char **)(*(void *)a5 + 288);
    long long v15 = v13;
    long long v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(void *)v16 == v11) {
          goto LABEL_6;
        }
        v16 += 8;
      }
      while (v16 != v14);
      long long v16 = *(char **)(*(void *)a5 + 288);
LABEL_6:
      while (*(void *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          long long v15 = *(char **)(*(void *)a5 + 288);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      long long v17 = *(_OWORD *)a3;
      *(_OWORD *)uint64_t v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      long long v18 = *(_OWORD *)(a4 + 27);
      long long v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v38;
      __n128 result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      uint64_t v20 = *(void *)(a3 + 24);
      uint64_t v21 = *(void *)(a2 + 24);
      if (v20 != v21)
      {
        uint64_t v22 = *(char **)(*(void *)a5 + 280);
        uint64_t v23 = *(char **)(*(void *)a5 + 288);
        uint64_t v24 = v22;
        uint64_t v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(void *)v25 == v20) {
              goto LABEL_15;
            }
            v25 += 8;
          }
          while (v25 != v23);
          uint64_t v25 = *(char **)(*(void *)a5 + 288);
LABEL_15:
          while (*(void *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              uint64_t v24 = *(char **)(*(void *)a5 + 288);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          long long v26 = *(_OWORD *)a2;
          *(_OWORD *)uint64_t v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          long long v27 = *(_OWORD *)(a3 + 27);
          long long v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 16) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)v39;
          __n128 result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          uint64_t v29 = *(void *)(a2 + 24);
          uint64_t v30 = *(void *)(a1 + 24);
          if (v29 != v30)
          {
            long long v31 = *(char **)(*(void *)a5 + 280);
            long long v32 = *(char **)(*(void *)a5 + 288);
            long long v33 = v31;
            long long v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(void *)v34 == v29) {
                  goto LABEL_24;
                }
                v34 += 8;
              }
              while (v34 != v32);
              long long v34 = *(char **)(*(void *)a5 + 288);
LABEL_24:
              while (*(void *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  long long v33 = *(char **)(*(void *)a5 + 288);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              long long v35 = *(_OWORD *)a1;
              *(_OWORD *)unint64_t v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              long long v36 = *(_OWORD *)(a2 + 27);
              long long v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 16) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 16) = *(_OWORD *)v40;
              __n128 result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  uint64_t v13 = *(void *)(a5 + 24);
  uint64_t v14 = *(void *)(a4 + 24);
  if (v13 != v14)
  {
    long long v15 = *(char **)(*(void *)a6 + 280);
    long long v16 = *(char **)(*(void *)a6 + 288);
    long long v17 = v15;
    long long v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(void *)v18 == v13) {
          goto LABEL_6;
        }
        v18 += 8;
      }
      while (v18 != v16);
      long long v18 = *(char **)(*(void *)a6 + 288);
LABEL_6:
      while (*(void *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          long long v17 = *(char **)(*(void *)a6 + 288);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      long long v19 = *(_OWORD *)a4;
      *(_OWORD *)long long v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      long long v20 = *(_OWORD *)(a5 + 27);
      long long v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 16) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v49;
      __n128 result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      uint64_t v22 = *(void *)(a4 + 24);
      uint64_t v23 = *(void *)(a3 + 24);
      if (v22 != v23)
      {
        uint64_t v24 = *(char **)(*(void *)a6 + 280);
        uint64_t v25 = *(char **)(*(void *)a6 + 288);
        long long v26 = v24;
        long long v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(void *)v27 == v22) {
              goto LABEL_15;
            }
            v27 += 8;
          }
          while (v27 != v25);
          long long v27 = *(char **)(*(void *)a6 + 288);
LABEL_15:
          while (*(void *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              long long v26 = *(char **)(*(void *)a6 + 288);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          long long v28 = *(_OWORD *)a3;
          *(_OWORD *)long long v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          long long v29 = *(_OWORD *)(a4 + 27);
          long long v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 16) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 16) = *(_OWORD *)v50;
          __n128 result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          uint64_t v31 = *(void *)(a3 + 24);
          uint64_t v32 = *(void *)(a2 + 24);
          if (v31 != v32)
          {
            long long v33 = *(char **)(*(void *)a6 + 280);
            long long v34 = *(char **)(*(void *)a6 + 288);
            long long v35 = v33;
            long long v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(void *)v36 == v31) {
                  goto LABEL_24;
                }
                v36 += 8;
              }
              while (v36 != v34);
              long long v36 = *(char **)(*(void *)a6 + 288);
LABEL_24:
              while (*(void *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  long long v35 = *(char **)(*(void *)a6 + 288);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              long long v37 = *(_OWORD *)a2;
              *(_OWORD *)long long v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              long long v38 = *(_OWORD *)(a3 + 27);
              long long v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 16) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 16) = *(_OWORD *)v51;
              __n128 result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              uint64_t v40 = *(void *)(a2 + 24);
              uint64_t v41 = *(void *)(a1 + 24);
              if (v40 != v41)
              {
                uint64_t v42 = *(char **)(*(void *)a6 + 280);
                uint64_t v43 = *(char **)(*(void *)a6 + 288);
                long long v44 = v42;
                long long v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(void *)v45 == v40) {
                      goto LABEL_33;
                    }
                    v45 += 8;
                  }
                  while (v45 != v43);
                  long long v45 = *(char **)(*(void *)a6 + 288);
LABEL_33:
                  while (*(void *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      long long v44 = *(char **)(*(void *)a6 + 288);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  long long v46 = *(_OWORD *)a1;
                  *(_OWORD *)uint64_t v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  long long v47 = *(_OWORD *)(a2 + 27);
                  long long v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 16) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 16) = *(_OWORD *)v52;
                  __n128 result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  double v3 = *(void **)(a2 + 216);
  long long v46 = (void *)(a2 + 224);
  if (v3 == (void *)(a2 + 224)) {
    return;
  }
  long long v48 = (void *)(a1 + 16);
  do
  {
    uint64_t v5 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a2, v3[4]);
    uint64_t v6 = v5;
    if (!v5) {
      goto LABEL_80;
    }
    unint64_t v7 = [v5 hash];
    unint64_t v8 = v7;
    unint64_t v9 = *(void *)(a1 + 8);
    if (!v9) {
      goto LABEL_21;
    }
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v49 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v2 = v7;
      if (v7 >= v9) {
        unint64_t v2 = v7 % v9;
      }
    }
    else
    {
      unint64_t v2 = (v9 - 1) & v7;
    }
    uint64_t v11 = *(char ***)(*(void *)a1 + 8 * v2);
    if (!v11 || (uint64_t v12 = *v11) == 0)
    {
LABEL_21:
      long long v19 = (char *)operator new(0x78uLL);
      v50[0] = v19;
      v50[1] = v48;
      *(void *)long long v19 = 0;
      *((void *)v19 + 1) = v8;
      *((void *)v19 + 2) = v6;
      *(_OWORD *)(v19 + 24) = 0u;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      *(_OWORD *)(v19 + 104) = 0u;
      char v51 = 1;
      float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v21 = *(float *)(a1 + 32);
      if (v9 && (float)(v21 * (float)v9) >= v20)
      {
LABEL_67:
        long long v37 = *(char ***)(*(void *)a1 + 8 * v2);
        uint64_t v12 = (char *)v50[0];
        if (v37)
        {
          *(void *)v50[0] = *v37;
        }
        else
        {
          *(void *)v50[0] = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = v12;
          *(void *)(*(void *)a1 + 8 * v2) = v48;
          if (!*(void *)v12)
          {
LABEL_76:
            v50[0] = 0;
            ++*(void *)(a1 + 24);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v50);
            goto LABEL_77;
          }
          unint64_t v38 = *(void *)(*(void *)v12 + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v38 >= v9) {
              v38 %= v9;
            }
          }
          else
          {
            v38 &= v9 - 1;
          }
          long long v37 = (char **)(*(void *)a1 + 8 * v38);
        }
        long long *v37 = v12;
        goto LABEL_76;
      }
      BOOL v22 = (v9 & (v9 - 1)) != 0;
      if (v9 < 3) {
        BOOL v22 = 1;
      }
      unint64_t v23 = v22 | (2 * v9);
      unint64_t v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      else {
        int8x8_t prime = (int8x8_t)v23;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v9 = *(void *)(a1 + 8);
      if (*(void *)&prime > v9) {
        goto LABEL_33;
      }
      if (*(void *)&prime < v9)
      {
        unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          unint64_t v32 = std::__next_prime(v32);
        }
        else
        {
          uint64_t v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2) {
            unint64_t v32 = v34;
          }
        }
        if (*(void *)&prime <= v32) {
          int8x8_t prime = (int8x8_t)v32;
        }
        if (*(void *)&prime >= v9)
        {
          unint64_t v9 = *(void *)(a1 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            long long v26 = operator new(8 * *(void *)&prime);
            long long v27 = *(void **)a1;
            *(void *)a1 = v26;
            if (v27) {
              operator delete(v27);
            }
            uint64_t v28 = 0;
            *(int8x8_t *)(a1 + 8) = prime;
            do
              *(void *)(*(void *)a1 + 8 * v28++) = 0;
            while (*(void *)&prime != v28);
            long long v29 = (void *)*v48;
            if (*v48)
            {
              unint64_t v30 = v29[1];
              uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(void *)&prime) {
                  v30 %= *(void *)&prime;
                }
              }
              else
              {
                v30 &= *(void *)&prime - 1;
              }
              *(void *)(*(void *)a1 + 8 * v30) = v48;
              long long v35 = (void *)*v29;
              if (*v29)
              {
                do
                {
                  unint64_t v36 = v35[1];
                  if (v31.u32[0] > 1uLL)
                  {
                    if (v36 >= *(void *)&prime) {
                      v36 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v36 &= *(void *)&prime - 1;
                  }
                  if (v36 != v30)
                  {
                    if (!*(void *)(*(void *)a1 + 8 * v36))
                    {
                      *(void *)(*(void *)a1 + 8 * v36) = v29;
                      goto LABEL_58;
                    }
                    void *v29 = *v35;
                    void *v35 = **(void **)(*(void *)a1 + 8 * v36);
                    **(void **)(*(void *)a1 + 8 * v36) = v35;
                    long long v35 = v29;
                  }
                  unint64_t v36 = v30;
LABEL_58:
                  long long v29 = v35;
                  long long v35 = (void *)*v35;
                  unint64_t v30 = v36;
                }
                while (v35);
              }
            }
            unint64_t v9 = (unint64_t)prime;
            goto LABEL_62;
          }
          long long v45 = *(void **)a1;
          *(void *)a1 = 0;
          if (v45) {
            operator delete(v45);
          }
          unint64_t v9 = 0;
          *(void *)(a1 + 8) = 0;
        }
      }
LABEL_62:
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v8 >= v9) {
          unint64_t v2 = v8 % v9;
        }
        else {
          unint64_t v2 = v8;
        }
      }
      else
      {
        unint64_t v2 = (v9 - 1) & v8;
      }
      goto LABEL_67;
    }
    while (1)
    {
      unint64_t v13 = *((void *)v12 + 1);
      if (v13 == v8) {
        break;
      }
      if (v49 > 1)
      {
        if (v13 >= v9) {
          v13 %= v9;
        }
      }
      else
      {
        v13 &= v9 - 1;
      }
      if (v13 != v2) {
        goto LABEL_21;
      }
LABEL_20:
      uint64_t v12 = *(char **)v12;
      if (!v12) {
        goto LABEL_21;
      }
    }
    id v14 = *((id *)v12 + 2);
    long long v15 = v6;
    id v16 = v6;
    long long v17 = v16;
    if (v14 != v16)
    {
      char v18 = [v14 isEqualToString:v16];

      uint64_t v6 = v15;
      if (v18) {
        goto LABEL_77;
      }
      goto LABEL_20;
    }

    uint64_t v6 = v15;
LABEL_77:
    long long v39 = *(_OWORD *)(v3 + 5);
    long long v40 = *(_OWORD *)(v3 + 7);
    long long v41 = *(_OWORD *)(v3 + 9);
    *((void *)v12 + 9) = v3[11];
    *(_OWORD *)(v12 + 56) = v41;
    *(_OWORD *)(v12 + 40) = v40;
    *(_OWORD *)(v12 + 24) = v39;
    *((void *)v12 + 10) = v3[12];
    if (v12 + 16 != (char *)(v3 + 4)) {
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v12 + 88, (char *)v3[13], v3[14], (uint64_t)(v3[14] - v3[13]) >> 4);
    }
    *((void *)v12 + 14) = v3[16];

LABEL_80:
    uint64_t v42 = (void *)v3[1];
    if (v42)
    {
      do
      {
        uint64_t v43 = v42;
        uint64_t v42 = (void *)*v42;
      }
      while (v42);
    }
    else
    {
      do
      {
        uint64_t v43 = (void *)v3[2];
        BOOL v44 = *v43 == (void)v3;
        double v3 = v43;
      }
      while (!v44);
    }
    double v3 = v43;
  }
  while (v43 != v46);
}

void sub_1BD05E528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);

  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::~__hash_table(v6);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  unint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,0>(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  double v3 = *(void **)a1;
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      double v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F17228D0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F17228D0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C187B8A0);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0x28uLL);
  *unint64_t v2 = &unk_1F17228D0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BD05E804(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F17228D0;
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48))(v1) + 56;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsCumulative const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1722960;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsCumulative const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1722960;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C187B8A0);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsCumulative const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0x28uLL);
  *unint64_t v2 = &unk_1F1722960;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BD05EA9C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsCumulative const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1722960;
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsCumulative const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsCumulative const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsCumulative const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  unint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsCumulative const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsCumulative const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsCumulative const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::~__func()
{
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_1F17229F0;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F17229F0;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 576))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a4, 3, @"Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date");
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  }
  double v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(void *)(a1 + 40) && a3) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_advanceToTime(a1, v8);
    }
    HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    unint64_t v9 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    uint64_t v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v9, a4);
  }
  return v10;
}

void sub_1BD05EEAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    if (!*(unsigned char *)(a1 + 576))
    {
      double v1 = *(double *)(a1 + 176);
      double result = *(double *)(a1 + 120);
      if (v1 <= result)
      {
        double v1 = -1.79769313e308;
      }
      else if (*(unsigned char *)(a1 + 144))
      {
        double v1 = -1.79769313e308;
      }
      if (v1 >= result) {
        return v1;
      }
      return result;
    }
    return -1.79769313e308;
  }
  double result = *(double *)(a1 + 176);
  if (result <= *(double *)(a1 + 120)) {
    return -1.79769313e308;
  }
  if (*(unsigned char *)(a1 + 144)) {
    return -1.79769313e308;
  }
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_advanceToTime(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 128) <= a2)
  {
    uint64_t v4 = a1 + 112;
    uint64_t v5 = a1 + 120;
    do
    {
      uint64_t v6 = *(void *)(a1 + 552);
      uint64_t v7 = *(void *)(a1 + 544);
      if (v6 == v7)
      {
        uint64_t v22 = 0;
        long long v15 = *(void **)(a1 + 40);
        id v16 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a2];
        double v8 = [v15 dateIntervalContainingDate:v16 index:&v22];

        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        unint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v17 = v22;
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v19 = v18;
        float v20 = [v8 endDate];
        [v20 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::resetToBucket(v4, v17, v19, v21);
      }
      else
      {
        double v8 = [*(id *)(a1 + 40) dateIntervalAtIndex:*(void *)(a1 + 112) + 1];
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        unint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v12 = v11;
        unint64_t v13 = [v8 endDate];
        [v13 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::advanceBucket(v4, v12, v14);
      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_didChangeBucket(a1, v9);
      if (v6 != v7) {
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
      }
    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1BD05F138(_Unwind_Exception *exception_object)
{
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a1 + 8;
  double v6 = *(double *)a2;
  double v7 = *(double *)(a2 + 8);
  double v8 = *(double *)(a2 + 16);
  unint64_t v9 = *(uint64_t **)(a2 + 24);
  unsigned __int8 v10 = *(unsigned char *)(a2 + 32);
  char v11 = *(unsigned char *)(a2 + 33);
  double v12 = *(double *)(a1 + 8) - v7;
  int v13 = v10;
  unint64_t v14 = (unint64_t)v9;
  char v15 = v11;
  double v16 = v8;
  double v17 = v7;
  double v18 = *(double *)a2;
  if (v12 >= 0.01)
  {
    if (v8 - v7 - v12 >= 0.01)
    {
      int v13 = *(unsigned __int8 *)(a2 + 32);
      double v18 = v6 - v6 * (v12 / (v8 - v7));
      unint64_t v14 = *(void *)(a2 + 24);
      char v15 = *(unsigned char *)(a2 + 33);
      double v16 = *(double *)(a2 + 16);
      double v17 = *(double *)(a1 + 8);
    }
    else
    {
      int v13 = 0;
      unint64_t v14 = 0;
      char v15 = 0;
      double v16 = 0.0;
      double v17 = 0.0;
      double v18 = 0.0;
    }
  }
  double v19 = *(double *)(a1 + 16);
  double v20 = v19 - v17;
  double v21 = v16 - v17;
  double v22 = v16 - v17 - (v19 - v17);
  if (!*(_DWORD *)(a1 + 36))
  {
    if (v22 < 0.01) {
      goto LABEL_10;
    }
    if (v20 >= 0.01) {
      goto LABEL_24;
    }
LABEL_22:
    int v23 = v13;
    unint64_t v31 = v14;
    double v25 = v16;
    double v19 = v17;
    double v24 = v18;
    if (!v23) {
      return;
    }
    goto LABEL_60;
  }
  if (v20 < 0.01) {
    goto LABEL_22;
  }
  if (v22 >= 0.01)
  {
LABEL_24:
    double v25 = v16;
    unint64_t v69 = v14;
    double v24 = v18 - v18 * (v20 / v21);
    int v23 = v13;
    char v70 = v15;
    double v16 = *(double *)(a1 + 16);
    double v18 = v18 * (v20 / v21);
    if (!v13)
    {
LABEL_25:
      char v15 = v70;
      unint64_t v31 = v69;
      if (!v23) {
        return;
      }
      goto LABEL_60;
    }
    goto LABEL_11;
  }
LABEL_10:
  unint64_t v69 = 0;
  int v23 = 0;
  char v70 = 0;
  double v24 = 0.0;
  double v19 = 0.0;
  double v25 = 0.0;
  if (!v13) {
    goto LABEL_25;
  }
LABEL_11:
  double v67 = v17;
  double v68 = v16;
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 248, v14, v14);
  unint64_t v26 = *(void *)(a1 + 112);
  if (v26 == *(void *)(a1 + 104) && *(uint64_t *)(a1 + 136) <= 0)
  {
    v32.f64[1] = *(float64_t *)(a1 + 16);
    double v28 = v67;
    double v27 = v68;
    v32.f64[0] = v67;
    v33.f64[0] = *(float64_t *)(a1 + 8);
    v33.f64[1] = v68;
    int8x16_t v34 = (int8x16_t)vcgtq_f64(v33, v32);
    v33.f64[0] = v67;
    *(int8x16_t *)(a1 + 48) = vbslq_s8(v34, *(int8x16_t *)(a1 + 8), (int8x16_t)v33);
  }
  else
  {
    double v28 = v67;
    double v27 = v68;
    if (v67 < *(double *)(a1 + 48))
    {
      double v29 = *(double *)(a1 + 8);
      if (v67 >= v29) {
        double v29 = v67;
      }
      *(double *)(a1 + 48) = v29;
    }
    if (v68 > *(double *)(a1 + 56))
    {
      double v30 = *(double *)(a1 + 16);
      if (v30 >= v68) {
        double v30 = v68;
      }
      *(double *)(a1 + 56) = v30;
    }
  }
  if (*(unsigned char *)(a1 + 32))
  {
    double v35 = *(double *)(a1 + 64);
    if (v28 < v35) {
      double v35 = v28;
    }
    *(double *)(a1 + 64) = v35;
  }
  if (a3 && v28 < *(double *)(a1 + 16))
  {
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, v28);
    double v28 = v67;
    double v27 = v68;
    unint64_t v26 = *(void *)(a1 + 112);
  }
  unint64_t v36 = *(void *)(a1 + 120);
  if (v26 >= v36)
  {
    uint64_t v38 = *(void *)(a1 + 104);
    unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - v38) >> 4);
    unint64_t v40 = v39 + 1;
    if (v39 + 1 > 0x555555555555555) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - v38) >> 4);
    if (2 * v41 > v40) {
      unint64_t v40 = 2 * v41;
    }
    if (v41 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v42 = 0x555555555555555;
    }
    else {
      unint64_t v42 = v40;
    }
    if (v42)
    {
      unint64_t v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v42);
      double v28 = v67;
      double v27 = v68;
    }
    else
    {
      uint64_t v43 = 0;
    }
    unint64_t v44 = v42 + 48 * v39;
    unint64_t v45 = v42 + 48 * v43;
    *(double *)unint64_t v44 = v18;
    *(double *)(v44 + 8) = v28;
    *(double *)(v44 + 16) = v27;
    *(void *)(v44 + 24) = v14;
    *(unsigned char *)(v44 + 32) = v13;
    *(unsigned char *)(v44 + 33) = v15;
    *(_WORD *)(v44 + 40) = 0;
    *(unsigned char *)(v44 + 42) = 0;
    unint64_t v37 = v44 + 48;
    long long v47 = *(char **)(a1 + 104);
    long long v46 = *(char **)(a1 + 112);
    if (v46 == v47)
    {
      char v15 = v70;
      unint64_t v31 = v69;
    }
    else
    {
      char v15 = v70;
      unint64_t v31 = v69;
      do
      {
        long long v48 = *((_OWORD *)v46 - 3);
        long long v49 = *((_OWORD *)v46 - 2);
        *(_OWORD *)(v44 - 21) = *(_OWORD *)(v46 - 21);
        *(_OWORD *)(v44 - 48) = v48;
        *(_OWORD *)(v44 - 32) = v49;
        v44 -= 48;
        v46 -= 48;
      }
      while (v46 != v47);
      long long v46 = *(char **)(a1 + 104);
    }
    *(void *)(a1 + 104) = v44;
    *(void *)(a1 + 112) = v37;
    *(void *)(a1 + 120) = v45;
    if (v46) {
      operator delete(v46);
    }
  }
  else
  {
    *(double *)unint64_t v26 = v18;
    *(double *)(v26 + 8) = v28;
    *(double *)(v26 + 16) = v27;
    *(void *)(v26 + 24) = v14;
    *(unsigned char *)(v26 + 32) = v13;
    *(unsigned char *)(v26 + 33) = v15;
    *(_WORD *)(v26 + 40) = 0;
    unint64_t v37 = v26 + 48;
    *(unsigned char *)(v26 + 42) = 0;
    char v15 = v70;
    unint64_t v31 = v69;
  }
  *(void *)(a1 + 112) = v37;
  if (!*(unsigned char *)(a1 + 176) || *(double *)(a1 + 152) <= v7)
  {
    *(double *)(a1 + 144) = v6;
    *(double *)(a1 + 152) = v7;
    *(double *)(a1 + 160) = v8;
    *(void *)(a1 + 168) = v9;
    *(unsigned char *)(a1 + 176) = v10;
    *(unsigned char *)(a1 + 177) = v11;
  }
  if (*(unsigned char *)(a1 + 33)
    && ((v50 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(v5, v14), char v51 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_statisticsForSource(v5, v50), !*((unsigned char *)v51 + 48))|| *((double *)v51 + 3) <= v7))
  {
    *((double *)v51 + 2) = v6;
    *((double *)v51 + 3) = v7;
    *((double *)v51 + 4) = v8;
    v51[5] = v9;
    *((unsigned char *)v51 + 48) = v10;
    *((unsigned char *)v51 + 49) = v11;
    if (!v23) {
      return;
    }
  }
  else if (!v23)
  {
    return;
  }
LABEL_60:
  unint64_t v52 = *(void *)(a1 + 440);
  unint64_t v53 = *(void *)(a1 + 448);
  if (v52 >= v53)
  {
    uint64_t v55 = *(void *)(a1 + 432);
    unint64_t v56 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v52 - v55) >> 3);
    unint64_t v57 = v56 + 1;
    if (v56 + 1 > 0x666666666666666) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v58 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v53 - v55) >> 3);
    if (2 * v58 > v57) {
      unint64_t v57 = 2 * v58;
    }
    if (v58 >= 0x333333333333333) {
      unint64_t v59 = 0x666666666666666;
    }
    else {
      unint64_t v59 = v57;
    }
    if (v59) {
      unint64_t v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v59);
    }
    else {
      uint64_t v60 = 0;
    }
    unint64_t v61 = v59 + 40 * v56;
    unint64_t v62 = v59 + 40 * v60;
    *(double *)unint64_t v61 = v24;
    *(double *)(v61 + 8) = v19;
    *(double *)(v61 + 16) = v25;
    *(void *)(v61 + 24) = v31;
    *(unsigned char *)(v61 + 32) = v23;
    *(unsigned char *)(v61 + 33) = v15;
    unint64_t v54 = v61 + 40;
    long long v64 = *(char **)(a1 + 432);
    __n128 v63 = *(char **)(a1 + 440);
    if (v63 != v64)
    {
      do
      {
        long long v65 = *(_OWORD *)(v63 - 40);
        long long v66 = *(_OWORD *)(v63 - 24);
        *(_WORD *)(v61 - 8) = *((_WORD *)v63 - 4);
        *(_OWORD *)(v61 - 24) = v66;
        *(_OWORD *)(v61 - 40) = v65;
        v61 -= 40;
        v63 -= 40;
      }
      while (v63 != v64);
      __n128 v63 = *(char **)(a1 + 432);
    }
    *(void *)(a1 + 432) = v61;
    *(void *)(a1 + 440) = v54;
    *(void *)(a1 + 448) = v62;
    if (v63) {
      operator delete(v63);
    }
  }
  else
  {
    *(double *)unint64_t v52 = v24;
    *(double *)(v52 + 8) = v19;
    *(double *)(v52 + 16) = v25;
    *(void *)(v52 + 24) = v31;
    *(unsigned char *)(v52 + 32) = v23;
    unint64_t v54 = v52 + 40;
    *(unsigned char *)(v52 + 33) = v15;
  }
  *(void *)(a1 + 440) = v54;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 578))
  {
    *(unsigned char *)(a1 + 580) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 580) = 0;
    unint64_t v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      uint64_t v4 = v2;
      uint64_t v3 = (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      if (v3) {
        v4[2](v4, v3);
      }

      unint64_t v2 = v4;
    }
  }
}

void sub_1BD05F778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  unint64_t v9 = 0;
  unsigned __int8 v10 = 0;
  uint64_t v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 432), *(void *)(a1 + 440), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 440) - *(void *)(a1 + 432)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::resetToBucket(a1, *(void *)a1 + 1, a2, a3);
  double v6 = v9;
  double v7 = v10;
  if (v9 != v10)
  {
    uint64_t v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BD05F874(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8 = (id *)(a1 + 40);
  objc_storeStrong((id *)(a1 + 456), *(id *)(a1 + 40));
  unint64_t v9 = *(void **)(a1 + 192);
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  long long v10 = 0uLL;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  if (v9)
  {
    *(void *)(a1 + 200) = v9;
    operator delete(v9);
    long long v10 = 0uLL;
  }
  *(_OWORD *)(a1 + 192) = v10;
  *(_OWORD *)(a1 + 208) = v10;
  if (*(void *)(a1 + 240))
  {
    uint64_t v11 = *(void *)(a1 + 232);
    double v12 = *(void **)(a1 + 224);
    *(void *)(a1 + 224) = a1 + 232;
    *(void *)(v11 + 16) = 0;
    *(void *)(a1 + 232) = 0;
    *(void *)(a1 + 240) = 0;
    if (v12[1]) {
      int v13 = (void *)v12[1];
    }
    else {
      int v13 = v12;
    }
    if (v13)
    {
      unint64_t v14 = (void *)v13[2];
      if (v14)
      {
        char v15 = (void *)*v14;
        if ((void *)*v14 == v13)
        {
          *unint64_t v14 = 0;
          while (1)
          {
            double v17 = (void *)v14[1];
            if (!v17) {
              break;
            }
            do
            {
              unint64_t v14 = v17;
              double v17 = (void *)*v17;
            }
            while (v17);
          }
        }
        else
        {
          for (v14[1] = 0; v15; char v15 = (void *)v14[1])
          {
            do
            {
              unint64_t v14 = v15;
              char v15 = (void *)*v15;
            }
            while (v15);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::destroy(v13);
        for (uint64_t i = (void *)v14[2]; i; uint64_t i = (void *)i[2])
          unint64_t v14 = i;
        int v13 = v14;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::destroy(v13);
  }
  objc_storeStrong(v8, *(id *)(a1 + 456));
  *(void *)(a1 + 440) = *(void *)(a1 + 432);
  *(void *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 580))
  {
    if (v3)
    {
      id v6 = v3;
      uint64_t v4 = _Block_copy(*(const void **)(a1 + 96));
      uint64_t v5 = v4;
      if (v4) {
        (*((void (**)(void *, id))v4 + 2))(v4, v6);
      }

      id v3 = v6;
    }
    *(unsigned char *)(a1 + 580) = 0;
  }
}

void sub_1BD05FA40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_currentBucketInterval(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 576))
  {
    double v1 = 0;
  }
  else
  {
    double v1 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", *(double *)(a1 + 120), *(double *)(a1 + 128));
  }

  return v1;
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 startDate];
  id v6 = [v4 startDate];
  uint64_t v7 = [v5 compare:v6];

  return v7;
}

void sub_1BD05FB14(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 13);
  if (WeakRetained)
  {
    if (v5
      && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_currentBucketInterval((uint64_t)a1),
          (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v8 = [v5 endDate];
      unint64_t v9 = [v7 startDate];
      if (objc_msgSend(v8, "hk_isAfterDate:", v9))
      {
        long long v10 = [v5 startDate];
        uint64_t v11 = [v7 endDate];
        char v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);
      }
      else
      {
        char v12 = 0;
      }

      int v13 = _Block_copy(a1[12]);
      if ((v12 & 1) == 0) {
        operator new();
      }
    }
    else
    {
      int v13 = _Block_copy(a1[12]);
    }
    *((unsigned char *)a1 + 576) = 1;
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
    v27[3] = &unk_1E6308FF8;
    id v15 = v5;
    id v28 = v15;
    id v16 = v13;
    id v29 = v16;
    (*((void (**)(id *, void *))*a1 + 9))(a1, v27);
    if (v5)
    {
      double v17 = [v15 startDate];
      [v17 timeIntervalSinceReferenceDate];
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_configureForStartTime((uint64_t)a1);
    }
    else
    {
      (*((void (**)(id *))*a1 + 4))(a1);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
    v21[3] = &unk_1E6309060;
    double v24 = a1;
    id v5 = v15;
    char v26 = 1;
    id v22 = v5;
    double v25 = a1;
    id v23 = WeakRetained;
    uint64_t v14 = (*((uint64_t (**)(id *, void *, uint64_t))*a1 + 14))(a1, v21, a3);
    double v18 = _Block_copy(v16);
    id v19 = a1[12];
    a1[12] = v18;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to invalidate interval: no data source available.");
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1BD05FF64(_Unwind_Exception *a1)
{
  MEMORY[0x1C187B8A0](v4, 0x10F1C409A2B2ECELL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_11;
  }
  id v3 = [v10 endDate];
  uint64_t v4 = [*(id *)(a1 + 32) startDate];
  char v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    id v6 = [v10 startDate];
    uint64_t v7 = [*(id *)(a1 + 32) endDate];
    char v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_11:
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9) {
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
      }
    }
  }
}

void sub_1BD060148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = [*(id *)(a1 + 32) startDate];
  [v5 timeIntervalSinceReferenceDate];
  uint64_t v7 = v6;

  char v8 = [*(id *)(a1 + 32) endDate];
  [v8 timeIntervalSinceReferenceDate];
  uint64_t v10 = v9;

  uint64_t v11 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  uint64_t v13 = *(void *)(a1 + 32);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  char v32 = *(unsigned char *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  uint64_t v31 = *(void *)(a1 + 56);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  uint64_t v14 = [v11 collectionCalculator:WeakRetained queryForInterval:v13 error:a2 sampleHandler:v30 mergeHandler:v29];

  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15 != v4)
    {
      id v16 = [*(id *)(a1 + 32) endDate];
      [v16 timeIntervalSinceReferenceDate];
      if (*(void *)(v15 + 40))
      {
        double v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          id v19 = [*(id *)(v15 + 40) dateIntervalAtIndex:*(void *)(v15 + 112) + 1];
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          double v20 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(v15, v15 + 120);
          double v21 = [v19 startDate];
          [v21 timeIntervalSinceReferenceDate];
          double v23 = v22;
          double v24 = [v19 endDate];
          [v24 timeIntervalSinceReferenceDate];
          HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            char v26 = _Block_copy(*(const void **)(v15 + 96));
            double v27 = v26;
            if (v26) {
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);
            }
          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_didChangeBucket(v15, 0);
        }
      }
    }
  }
  return v14;
}

void sub_1BD0603F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7 = *(double *)(a1 + 32) - a6;
  if (v7 >= 0.01)
  {
    double v9 = a7 - a6;
    if (v9 - v7 >= 0.01)
    {
      a5 = a5 - v7 / v9 * a5;
      int v8 = 1;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      int v8 = 0;
      a5 = 0.0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    int v8 = 1;
  }
  *(double *)uint64_t v13 = a5;
  *(double *)&v13[1] = a6;
  double v14 = a7;
  uint64_t v15 = a2;
  char v16 = v8;
  char v17 = 0;
  if (*(unsigned char *)(a1 + 56))
  {
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)v13, a3, a4);
    }
  }
  else
  {
    double v11 = *(double *)(a1 + 40) - a6;
    if (v11 >= 0.01)
    {
      double v12 = a7 - a6;
      if (v12 - v11 >= 0.01)
      {
        a5 = a5 * (v11 / v12);
        a7 = *(double *)(a1 + 40);
      }
    }
    else
    {
      int v8 = 0;
    }
    *(double *)uint64_t v13 = a5;
    double v14 = a7;
    char v16 = v8;
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)v13, a3, a4);
    }
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 576)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  }
  if (*(void *)(a1 + 40)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_advanceToTime(a1, a2);
  }
  if (*(double *)(a1 + 128) > a2)
  {
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 32) < *(double *)(v10 + 8))
                {
                  uint64_t v129 = *(void *)(v10 + 32);
                  long long v113 = *(_OWORD *)v10;
                  long long v121 = *(_OWORD *)(v10 + 16);
                  long long v52 = *(_OWORD *)(a2 - 40);
                  long long v53 = *(_OWORD *)(a2 - 24);
                  *(_WORD *)(v10 + 32) = *(_WORD *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(_WORD *)(a2 - 8) = v129;
                  *(_OWORD *)(a2 - 24) = v121;
                  *(_OWORD *)(a2 - 40) = v113;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v10, (double *)(v10 + 40), (double *)(a2 - 40));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, v10 + 120, a2 - 40);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            unint64_t v54 = (void *)(v10 + 40);
            BOOL v56 = v10 == a2 || v54 == (void *)a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  unint64_t v59 = v54;
                  double v60 = *(double *)(v58 + 48);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *v54;
                    long long v114 = *(_OWORD *)(v58 + 56);
                    uint64_t v122 = *(void *)(v58 + 72);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      uint64_t v63 = v10 + v62;
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      *(_OWORD *)(v63 + 40) = *(_OWORD *)(v10 + v62);
                      *(_OWORD *)(v63 + 56) = v64;
                      *(_WORD *)(v63 + 72) = *(_WORD *)(v10 + v62 + 32);
                      if (!v62) {
                        break;
                      }
                      v62 -= 40;
                      if (v60 >= *(double *)(v63 - 32))
                      {
                        uint64_t v65 = v10 + v62 + 40;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = v114;
                    *(_WORD *)(v65 + 32) = v122;
                  }
                  unint64_t v54 = v59 + 5;
                  v57 += 40;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 5 != (void *)a2);
              }
            }
            else if (!v56)
            {
              do
              {
                uint64_t v98 = v54;
                double v99 = *(double *)(a1 + 48);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *v54;
                  long long v117 = *(_OWORD *)(a1 + 56);
                  uint64_t v125 = *(void *)(a1 + 72);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(_OWORD *)(v101 - 3);
                    *(_OWORD *)long long v101 = *(_OWORD *)(v101 - 5);
                    *((_OWORD *)v101 + 1) = v102;
                    *((_WORD *)v101 + 16) = *((_WORD *)v101 - 4);
                    double v103 = *((double *)v101 - 9);
                    v101 -= 5;
                  }
                  while (v99 < v103);
                  void *v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *((_WORD *)v101 + 16) = v125;
                  *((_OWORD *)v101 + 1) = v117;
                }
                v54 += 5;
                a1 = (unint64_t)v98;
              }
              while (v98 + 5 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 40 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v10 + 40 * v69 + 8) < *(double *)(v70 + 48))
                  {
                    v70 += 40;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  double v71 = *(double *)(v10 + 40 * v68 + 8);
                  if (*(double *)(v70 + 8) >= v71)
                  {
                    unint64_t v72 = v10 + 40 * v68;
                    uint64_t v73 = *(void *)v72;
                    uint64_t v123 = *(void *)(v72 + 32);
                    long long v115 = *(_OWORD *)(v72 + 16);
                    do
                    {
                      unint64_t v74 = v72;
                      unint64_t v72 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_WORD *)(v74 + 32) = *(_WORD *)(v70 + 32);
                      *(_OWORD *)unint64_t v74 = v75;
                      *(_OWORD *)(v74 + 16) = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 40 * v77;
                      uint64_t v78 = 2 * v69 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v10 + 40 * v77 + 8) < *(double *)(v70 + 48))
                      {
                        v70 += 40;
                        uint64_t v77 = v78;
                      }
                      uint64_t v69 = v77;
                    }
                    while (*(double *)(v70 + 8) >= v71);
                    *(void *)unint64_t v72 = v73;
                    *(double *)(v72 + 8) = v71;
                    *(_OWORD *)(v72 + 16) = v115;
                    *(_WORD *)(v72 + 32) = v123;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x28uLL;
              do
              {
                uint64_t v80 = 0;
                uint64_t v130 = *(void *)(v10 + 32);
                long long v116 = *(_OWORD *)v10;
                long long v124 = *(_OWORD *)(v10 + 16);
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = v81;
                  uint64_t v83 = v80 + 1;
                  v81 += 40 * (v80 + 1);
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v85 = v84 + 2;
                  if (v85 < v79 && *(double *)(v82 + 40 * v83 + 8) < *(double *)(v81 + 48))
                  {
                    v81 += 40;
                    uint64_t v80 = v85;
                  }
                  long long v86 = *(_OWORD *)v81;
                  long long v87 = *(_OWORD *)(v81 + 16);
                  *(_WORD *)(v82 + 32) = *(_WORD *)(v81 + 32);
                  *(_OWORD *)unint64_t v82 = v86;
                  *(_OWORD *)(v82 + 16) = v87;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 40;
                if (v81 == a2)
                {
                  *(_WORD *)(v81 + 32) = v130;
                  *(_OWORD *)unint64_t v81 = v116;
                  *(_OWORD *)(v81 + 16) = v124;
                }
                else
                {
                  long long v88 = *(_OWORD *)a2;
                  long long v89 = *(_OWORD *)(a2 + 16);
                  *(_WORD *)(v81 + 32) = *(_WORD *)(a2 + 32);
                  *(_OWORD *)unint64_t v81 = v88;
                  *(_OWORD *)(v81 + 16) = v89;
                  *(_WORD *)(a2 + 32) = v130;
                  *(_OWORD *)a2 = v116;
                  *(_OWORD *)(a2 + 16) = v124;
                  uint64_t v90 = v81 - v10 + 40;
                  if (v90 >= 41)
                  {
                    unint64_t v91 = (v90 / 0x28uLL - 2) >> 1;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v10 + 40 * v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      uint64_t v109 = *(void *)(v81 + 32);
                      long long v106 = *(_OWORD *)(v81 + 16);
                      do
                      {
                        unint64_t v94 = v81;
                        unint64_t v81 = v10 + 40 * v91;
                        long long v95 = *(_OWORD *)v81;
                        long long v96 = *(_OWORD *)(v81 + 16);
                        *(_WORD *)(v94 + 32) = *(_WORD *)(v81 + 32);
                        *(_OWORD *)unint64_t v94 = v95;
                        *(_OWORD *)(v94 + 16) = v96;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 40 * v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_WORD *)(v81 + 32) = v109;
                      *(_OWORD *)(v81 + 16) = v106;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40 * (v12 >> 1)), (double *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            char v16 = (double *)(a1 + 40 * v13 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40), v16, (double *)(a2 - 80));
            char v17 = (double *)(a1 + 40 + 8 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 80), v17, (double *)(a2 - 120));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v16, (double *)v14, v17);
            uint64_t v126 = *(void *)(a1 + 32);
            long long v110 = *(_OWORD *)a1;
            long long v118 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 16) = v19;
            *(_WORD *)(v14 + 32) = v126;
            *(_OWORD *)unint64_t v14 = v110;
            *(_OWORD *)(v14 + 16) = v118;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40 * (v12 >> 1)), (double *)a1, (double *)(a2 - 40));
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 32) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          long long v105 = *(_OWORD *)(a1 + 16);
          uint64_t v108 = *(void *)(a1 + 32);
          if (v20 >= *(double *)(a2 - 32))
          {
            unint64_t v41 = a1 + 40;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 40;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 40;
              double v40 = *(double *)(v39 + 48);
              v39 += 40;
            }
            while (v20 >= v40);
          }
          unint64_t v43 = a2;
          if (v10 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              unint64_t v43 = v44 - 40;
              double v45 = *(double *)(v44 - 32);
              v44 -= 40;
            }
            while (v20 < v45);
          }
          while (v10 < v43)
          {
            uint64_t v128 = *(void *)(v10 + 32);
            long long v112 = *(_OWORD *)v10;
            long long v120 = *(_OWORD *)(v10 + 16);
            long long v46 = *(_OWORD *)v43;
            long long v47 = *(_OWORD *)(v43 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v43 + 32);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(_WORD *)(v43 + 32) = v128;
            *(_OWORD *)unint64_t v43 = v112;
            *(_OWORD *)(v43 + 16) = v120;
            do
            {
              double v48 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *(double *)(v43 - 32);
              v43 -= 40;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 40);
            long long v51 = *(_OWORD *)(v10 - 24);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 40) = v38;
          *(double *)(v10 - 32) = v20;
          *(_WORD *)(v10 - 8) = v108;
          *(_OWORD *)(v10 - 24) = v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        long long v104 = *(_OWORD *)(a1 + 16);
        uint64_t v107 = *(void *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 48);
          v21 += 40;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        unint64_t v25 = a2;
        if (v21 == 40)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 40;
            double v29 = *(double *)(v28 - 32);
            v28 -= 40;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 40;
            double v27 = *(double *)(v25 - 32);
            v25 -= 40;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v127 = *(void *)(v10 + 32);
            long long v111 = *(_OWORD *)v10;
            long long v119 = *(_OWORD *)(v10 + 16);
            long long v31 = *(_OWORD *)v30;
            long long v32 = *(_OWORD *)(v30 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v30 + 32);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(_WORD *)(v30 + 32) = v127;
            *(_OWORD *)unint64_t v30 = v111;
            *(_OWORD *)(v30 + 16) = v119;
            do
            {
              double v33 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v33 < v20);
            do
            {
              double v34 = *(double *)(v30 - 32);
              v30 -= 40;
            }
            while (v34 >= v20);
          }
          while (v10 < v30);
        }
        if (v10 - 40 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 40);
          long long v36 = *(_OWORD *)(v10 - 24);
          *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 40) = v22;
        *(double *)(v10 - 32) = v20;
        *(_WORD *)(v10 - 8) = v107;
        *(_OWORD *)(v10 - 24) = v104;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 40;
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        __int16 v9 = *(_WORD *)(a2 - 8);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      uint64_t v16 = *(void *)v12;
      long long v21 = *(_OWORD *)(v12 + 16);
      uint64_t v22 = *(void *)(v12 + 32);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(void *)uint64_t v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(void *a1, uint64_t a2)
{
  id v3 = (void *)a1[5];
  uint64_t v4 = a1[6];
  BOOL v5 = (void *)a1[4];
  uint64_t v6 = [v5 dateInterval];
  void v9[4] = v4;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  uint64_t v7 = [v3 collectionCalculator:v5 queryForInterval:v6 error:a2 sampleHandler:v10 mergeHandler:v9];

  return v7;
}

void sub_1BD061194(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10 = *(void *)(a1 + 32);
  *(double *)int v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  char v15 = 1;
  uint64_t v11 = [MEMORY[0x1E4F1C9C8] distantFuture];
  [v11 timeIntervalSinceReferenceDate];
  BOOL v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1BD061238(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6 = a3;
  uint64_t v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = &unk_1F1722AA0;
  double v9 = 900.0;
  if ((v6 & 0x10) == 0) {
    double v9 = 0.0;
  }
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(void *)(v8 + 104) = 0;
  *(void *)(v8 + 112) = 0;
  *(void *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_WORD *)(a1 + 584) = 1;
  *(unsigned char *)(a1 + 586) = 0;
  *(unsigned char *)(a1 + 588) = 0;
  *(void *)(a1 + 592) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(void *)(a1 + 632) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);

  JUMPOUT(0x1C187B8A0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1F1722AA0;
  unint64_t v2 = *(void **)(a1 + 616);
  if (v2)
  {
    *(void *)(a1 + 624) = v2;
    operator delete(v2);
  }

  id v3 = *(void **)(a1 + 552);
  if (v3)
  {
    *(void *)(a1 + 560) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(unsigned char *)(result + 584) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::setDateInterval(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 copy];
  uint64_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;

  BOOL v5 = [v6 startDate];
  [v5 timeIntervalSinceReferenceDate];
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_configureForStartTime(a1);
}

void sub_1BD0613E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(void *)(a1 + 40))
  {
    id v5 = v3;
    [v3 timeIntervalSinceReferenceDate];
    *(void *)(a1 + 592) = v4;
    id v3 = v5;
  }
}

void sub_1BD06145C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::setStatisticsConfiguration(id *a1, void *a2)
{
  objc_storeStrong(a1 + 75, a2);
  id v7 = a2;
  id v4 = a1[75];
  id v5 = a1[72];
  a1[72] = v4;
  id v6 = v4;

  objc_storeStrong(a1 + 19, a1[72]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (*(void *)(a1 + 40)) {
    return 1;
  }
  BOOL v7 = *(void *)(a1 + 224) == *(void *)(a1 + 216) && *(uint64_t *)(a1 + 256) < 1
    || HKIntervalMask<double>::firstDifference(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)a2, *(void *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (v7) {
    return 1;
  }
  double v9 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128);

  return v9(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 copy];
  id v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v3;
}

void sub_1BD061644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::dataSource(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));

  return WeakRetained;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::currentStatistics(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 584))
  {
    double v1 = 0;
  }
  else
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_updateSourceOrder((uint64_t)v4);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeThroughTime((uint64_t)v4, v4[1]);
    double v1 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_statisticsFromFinishedBucket(a1, v4);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsBucket((uint64_t)v4);
  }

  return v1;
}

void sub_1BD061714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(a1 + 64);
  BOOL v7 = v6;
  if (v6)
  {
    uint64_t v8 = [v6 startDate];
    [v8 timeIntervalSinceReferenceDate];
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    uint64_t v10 = [v7 endDate];
    [v10 timeIntervalSinceReferenceDate];
    double v12 = v11;
    double v13 = *(double *)(a2 + 8);

    if (v12 < v13) {
      goto LABEL_9;
    }
  }
  if (!*(unsigned char *)(a1 + 586))
  {
LABEL_11:
    uint64_t v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 585))
  {
LABEL_9:
    uint64_t v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(unsigned char *)(a1 + 587)) {
      goto LABEL_11;
    }
    unint64_t v17 = *(void *)(a1 + 624);
    unint64_t v18 = *(void *)(a1 + 632);
    if (v17 >= v18)
    {
      uint64_t v22 = *(void *)(a1 + 616);
      unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      unint64_t v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24) {
        unint64_t v24 = 2 * v25;
      }
      if (v25 >= 0x333333333333333) {
        unint64_t v26 = 0x666666666666666;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26) {
        unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      }
      else {
        uint64_t v27 = 0;
      }
      unint64_t v28 = v26 + 40 * v23;
      unint64_t v29 = v26 + 40 * v27;
      long long v30 = *(_OWORD *)a2;
      long long v31 = *(_OWORD *)(a2 + 16);
      *(void *)(v28 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      unint64_t v21 = v28 + 40;
      long long v32 = *(char **)(a1 + 624);
      double v33 = *(char **)(a1 + 616);
      if (v32 != v33)
      {
        do
        {
          long long v34 = *(_OWORD *)(v32 - 40);
          long long v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        long long v32 = *(char **)(a1 + 616);
      }
      *(void *)(a1 + 616) = v28;
      *(void *)(a1 + 624) = v21;
      *(void *)(a1 + 632) = v29;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      long long v19 = *(_OWORD *)a2;
      long long v20 = *(_OWORD *)(a2 + 16);
      *(void *)(v17 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      unint64_t v21 = v17 + 40;
    }
    *(void *)(a1 + 624) = v21;
    goto LABEL_9;
  }
  int v14 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
  uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1BD061984(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = v5;
  if (*(unsigned char *)(a1 + 586))
  {
    uint64_t v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 586) = 1;
  uint64_t v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    uint64_t v7 = 0;
    goto LABEL_82;
  }
  uint64_t v65 = v6;
  if (*(unsigned char *)(a1 + 585)) {
    goto LABEL_5;
  }
  double v9 = *(void **)(a1 + 608);
  if (!v9)
  {
    id v68 = 0;
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 40))
  {
LABEL_5:
    int v8 = 0;
    id v68 = 0;
    goto LABEL_29;
  }
  [v9 sortUsingComparator:&__block_literal_global_625];
  id v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v10 = *(id *)(a1 + 608);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  if (!v11)
  {

    id v12 = 0;
    goto LABEL_27;
  }
  id v12 = 0;
  uint64_t v13 = *(void *)v70;
  do
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (*(void *)v70 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(id *)(*((void *)&v69 + 1) + 8 * i);
      BOOL v16 = v15;
      if (v12)
      {
        unint64_t v17 = [v15 startDate];
        unint64_t v18 = [v12 endDate];
        int v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          long long v20 = [v16 endDate];
          unint64_t v21 = [v12 endDate];
          int v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22) {
            goto LABEL_21;
          }
          id v23 = objc_alloc(MEMORY[0x1E4F28C18]);
          unint64_t v24 = [v12 startDate];
          unint64_t v25 = [v16 endDate];
          id v26 = (id)[v23 initWithStartDate:v24 endDate:v25];
        }
        else
        {
          [v68 addObject:v12];
          id v26 = v16;
        }
        id v12 = v26;
      }
      else
      {
        id v12 = v15;
      }
LABEL_21:
    }
    uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  }
  while (v11);

  if (v12) {
    [v68 addObject:v12];
  }
LABEL_27:

LABEL_28:
  int v8 = 1;
LABEL_29:
  uint64_t v27 = *(void **)(a1 + 608);
  *(void *)(a1 + 608) = 0;

  *(unsigned char *)(a1 + 585) = 0;
  if (!v8)
  {
    unint64_t v38 = *(void *)(a1 + 616);
    *(void *)(a1 + 632) = 0;
    *(void *)(a1 + 624) = 0;
    *(void *)(a1 + 616) = 0;
    unint64_t v39 = v38;
    goto LABEL_47;
  }
  unint64_t v28 = [v68 lastObject];
  if (v28)
  {
    unint64_t v29 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_currentBucketInterval(a1);
    long long v30 = [v29 endDate];
    long long v31 = [v28 endDate];
    int v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      double v33 = [v28 endDate];
      [v33 timeIntervalSinceReferenceDate];
      double v35 = v34;

      uint64_t v36 = *(void *)(a1 + 616);
      BOOL v37 = *(long long **)(a1 + 624);
      while ((long long *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((long long *)v36 != v37)
          {
            double v40 = (long long *)(v36 + 40);
            if ((long long *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  long long v41 = *v40;
                  long long v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)uint64_t v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                double v40 = (long long *)((char *)v40 + 40);
              }
              while (v40 != v37);
              BOOL v37 = *(long long **)(a1 + 624);
            }
          }
          if ((long long *)v36 != v37) {
            *(void *)(a1 + 624) = v36;
          }
          break;
        }
        v36 += 40;
      }
    }
  }
  unint64_t v38 = *(void *)(a1 + 616);
  unint64_t v39 = *(void *)(a1 + 624);
  *(void *)(a1 + 632) = 0;
  *(void *)(a1 + 616) = 0;
  *(void *)(a1 + 624) = 0;
  if (![v68 count]) {
    goto LABEL_60;
  }
LABEL_47:
  id v43 = v68;
  long long __p = (void *)v38;
  if (v43)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v44 = v43;
    uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v70;
      while (2)
      {
        for (uint64_t j = 0; j != v45; ++j)
        {
          if (*(void *)v70 != v46) {
            objc_enumerationMutation(v44);
          }
          id v48 = *(id *)(*((void *)&v69 + 1) + 8 * j);
          int v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_primitiveInvalidateInterval((id *)a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
        if (v45) {
          continue;
        }
        break;
      }
    }

LABEL_59:
    unint64_t v38 = (unint64_t)__p;
LABEL_60:
    unint64_t v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v51;
    }
    int v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    long long __p = (void *)v38;
    if (v39 != v38)
    {
      uint64_t v54 = v38;
      uint64_t v50 = v67;
      do
      {
        int v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_primitiveAddSample(a1, v54, 1, v50);
        int v53 = v55;
        v54 += 40;
        if (v54 == v39) {
          char v56 = 0;
        }
        else {
          char v56 = v55;
        }
        uint64_t v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_primitiveInvalidateInterval((id *)a1, 0, v67))goto LABEL_59; {
LABEL_70:
    }
    int v53 = 0;
  }
  if (*(void *)(a1 + 40) && *(void *)(a1 + 560) != *(void *)(a1 + 552))
  {
    do
    {
      uint64_t v57 = objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(void *)(a1 + 112) + 1, v50, v65);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      unint64_t v58 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_statisticsFromFinishedBucket(a1, (double *)(a1 + 120));
      unint64_t v59 = [v57 startDate];
      [v59 timeIntervalSinceReferenceDate];
      double v61 = v60;
      uint64_t v62 = [v57 endDate];
      [v62 timeIntervalSinceReferenceDate];
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_notifyForCurrentBucket(a1);
    }
    while (*(void *)(a1 + 560) != *(void *)(a1 + 552));
  }
  *(unsigned char *)(a1 + 586) = 0;
  if (__p) {
    operator delete(__p);
  }

  if (v53)
  {
    if (*(unsigned char *)(a1 + 588))
    {
      *(unsigned char *)(a1 + 588) = 0;
      id v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_notifyForCurrentBucket(a1);
      uint64_t v7 = 1;
      goto LABEL_82;
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v6 = v65;
LABEL_82:
  *(unsigned char *)(a1 + 586) = 0;
LABEL_83:

  return v7;
}

void sub_1BD062088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    *(unsigned char *)(v13 + 586) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(unsigned char *)(result + 587) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(unsigned char *)(a1 + 586)) {
      goto LABEL_12;
    }
    uint64_t v7 = 0;
LABEL_14:
    uint64_t v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_primitiveInvalidateInterval((id *)a1, v7, a3);
    goto LABEL_15;
  }
  uint64_t v7 = [v6 dateIntervalForIntervalsContainingInterval:v5];

  if (!*(unsigned char *)(a1 + 586)) {
    goto LABEL_14;
  }
  if (!v7)
  {
LABEL_12:
    id v12 = *(void **)(a1 + 608);
    *(void *)(a1 + 608) = 0;

    uint64_t v7 = 0;
    uint64_t v11 = 1;
    *(unsigned char *)(a1 + 585) = 1;
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 585))
  {
    int v8 = *(void **)(a1 + 608);
    if (!v8)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      id v10 = *(void **)(a1 + 608);
      *(void *)(a1 + 608) = v9;

      int v8 = *(void **)(a1 + 608);
    }
    [v8 addObject:v7];
  }
  uint64_t v11 = 1;
LABEL_15:

  return v11;
}

void sub_1BD062388(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    *(unsigned char *)(a1 + 584) = 1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsCumulativeEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v9[3] = &unk_1E63043E8;
    uint64_t v12 = a1;
    id v10 = v5;
    id v11 = WeakRetained;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 112))(a1, v9, a3);
    if (v7 && *(unsigned char *)(a1 + 584) && !*(void *)(a1 + 40)) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_configureForStartTime(a1);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to query for initial statistics: no data source available.");
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1BD0624DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::reset(uint64_t result)
{
  *(unsigned char *)(result + 584) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 encodeBool:*(unsigned __int8 *)(a1 + 584) forKey:@"needs_config"];
  id v12 = v3;
  int v32 = &unk_1F1726FA0;
  double v33 = 0;
  int v38 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
  LOBYTE(v38) = 1;
  uint64_t v34 = v4;
  uint64_t v35 = 0;
  statistics::StatisticsEngine::makeCurrentBucket((uint64_t)&v32);
  uint64_t v13 = &unk_1F171B9C8;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  int v31 = 511;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 0;
  int8x16_t v14 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  uint64_t v5 = *(void *)(a1 + 136);
  char v29 = *(unsigned char *)(a1 + 144);
  char v30 = *(unsigned char *)(a1 + 145);
  BOOL v28 = *(_DWORD *)(a1 + 148) == 0;
  int8x16_t v15 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  uint64_t v7 = *(int8x16_t **)(a1 + 216);
  if (v7 != *(int8x16_t **)(a1 + 224))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v7, *v7, 8uLL);
    int8x16_t v40 = v7[1];
    char v43 = 0;
    HIBYTE(v42) = v7[2].i8[9];
    LOBYTE(v42) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>();
  }
  statistics::StatisticsBucket::makeStatistics((uint64_t)&v13);
  HDStatisticsRelative<HDStatisticsCumulative>::archive((uint64_t)&v39, (int *)(a1 + 240));
  statistics::Statistics::operator=(*((statistics **)&v22 + 1), (uint64_t)&v39);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v39);
  uint64_t v8 = *(void *)(a1 + 344);
  if (v8 != a1 + 352)
  {
    HDStatisticsRelative<HDStatisticsCumulative>::archive((uint64_t)&v39, (int *)(v8 + 40));
    uint64_t v9 = *(void *)(v8 + 32);
    v46 |= 0x200u;
    uint64_t v45 = v9;
    PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>();
  }
  id v10 = *(int8x16_t **)(a1 + 184);
  if (v10 != *(int8x16_t **)(a1 + 192))
  {
    unint64_t v39 = (char *)&unk_1F1727540;
    v41.i32[0] = 3;
    int8x16_t v40 = vextq_s8(*v10, *v10, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>();
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v13);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v13);
  id v11 = *(int8x16_t **)(a1 + 552);
  if (v11 != *(int8x16_t **)(a1 + 560))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v11, *v11, 8uLL);
    int8x16_t v40 = v11[1];
    __int16 v42 = 0;
    char v43 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>();
  }
  PB::Writer::Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v39);
  [v12 encodeBytes:v40.i64[0] length:&v39[-v40.i64[0]] forKey:@"hdsce_archived_representation"];
  PB::Writer::~Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);
}

void sub_1BD0628DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v60 = a2;
  *(unsigned char *)(a1 + 584) = [v60 decodeBoolForKey:@"needs_config"];
  id v3 = v60;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::HDStatisticsBucket((uint64_t)v65, 0, -1.79769313e308, 1.79769313e308);
  long long v66 = 0u;
  long long v67 = 0u;
  uint64_t v108 = 0;
  id v63 = v3;
  PB::Reader::Reader((PB::Reader *)v107, (const unsigned __int8 *)[v63 decodeBytesForKey:@"hdsce_archived_representation" returnedLength:&v108]);
  uint64_t v62 = a1;
  uint64_t v100 = &unk_1F1726FA0;
  uint64_t v101 = 0;
  uint64_t v105 = 0;
  uint64_t v103 = 0;
  uint64_t v104 = 0;
  int v106 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v100, (PB::Reader *)v107);
  uint64_t v64 = v102;
  if (v101)
  {
    uint64_t v72 = 0;
    memset(v75, 0, sizeof(v75));
    long long __p = 0;
    memset(&v79[8], 0, 50);
    long long v80 = 0u;
    long long v81 = 0u;
    LOWORD(v82) = 0;
    uint64_t v85 = 0;
    unint64_t v78 = 0;
    uint64_t v77 = 0;
    *(_DWORD *)int64_t v79 = 0;
    uint64_t v84 = 0;
    uint64_t v83 = &v84;
    long long v87 = 0u;
    long long v86 = 0u;
    int v88 = 1065353216;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v91 = 0u;
    uint64_t v92 = 0;
    int v93 = 1065353216;
    long long v94 = 0u;
    long long v95 = 0u;
    int v96 = 1065353216;
    long long v97 = 0u;
    long long v98 = 0u;
    int v99 = 1065353216;
    int8x16_t v68 = vextq_s8(*(int8x16_t *)(v101 + 8), *(int8x16_t *)(v101 + 8), 8uLL);
    uint64_t v4 = *(void *)(v101 + 72);
    uint64_t v69 = *(void *)(v101 + 64);
    char v70 = *(unsigned char *)(v101 + 185);
    char v71 = *(unsigned char *)(v101 + 186);
    int8x16_t v73 = vextq_s8(*(int8x16_t *)(v101 + 24), *(int8x16_t *)(v101 + 24), 8uLL);
    uint64_t v74 = v4;
    uint64_t v6 = *(void *)(v101 + 80);
    uint64_t v5 = *(void *)(v101 + 88);
    double v61 = (void *)v101;
    if (v6 != v5)
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(*(void *)v6 + 24);
        uint64_t v9 = *(void *)(*(void *)v6 + 32);
        uint64_t v10 = *(void *)(*(void *)v6 + 8);
        uint64_t v11 = *(void *)(*(void *)v6 + 16);
        char v12 = *(unsigned char *)(*(void *)v6 + 41);
        char v13 = *(unsigned char *)(*(void *)v6 + 40);
        if ((unint64_t)v7 >= v78)
        {
          int8x16_t v14 = (char *)__p;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)__p) >> 4);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v78 - (void)__p) >> 4) > v16) {
            unint64_t v16 = 0x5555555555555556 * ((uint64_t)(v78 - (void)__p) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v78 - (void)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v17 = 0x555555555555555;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17)
          {
            unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            uint64_t v7 = v77;
            int8x16_t v14 = (char *)__p;
          }
          else
          {
            uint64_t v18 = 0;
          }
          uint64_t v19 = (void *)(v17 + 48 * v15);
          void *v19 = v9;
          v19[1] = v8;
          v19[2] = v10;
          v19[3] = v11;
          *((_WORD *)v19 + 16) = 1;
          *((unsigned char *)v19 + 40) = 0;
          *((unsigned char *)v19 + 41) = v12;
          *((unsigned char *)v19 + 42) = v13;
          uint64_t v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              long long v21 = *((_OWORD *)v7 - 3);
              long long v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            int8x16_t v14 = (char *)__p;
          }
          uint64_t v7 = (char *)(v19 + 6);
          long long __p = v20;
          uint64_t v77 = (char *)(v19 + 6);
          unint64_t v78 = v17 + 48 * v18;
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)uint64_t v7 = v9;
          *((void *)v7 + 1) = v8;
          *((void *)v7 + 2) = v10;
          *((void *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        uint64_t v77 = v7;
        v6 += 8;
      }
      while (v6 != v5);
    }
    long long v23 = (void *)v61[13];
    if (v23)
    {
      HDStatisticsRelative<HDStatisticsCumulative>::unarchive((uint64_t)&v109, v23);
      long long v80 = v113;
      long long v81 = v114;
      uint64_t v82 = v115;
      *(_OWORD *)int64_t v79 = v109;
      *(_OWORD *)&v79[16] = v110;
      *(_OWORD *)&v79[32] = v111;
      *(_OWORD *)&v79[48] = v112;
    }
    long long v24 = (void **)v61[17];
    long long v25 = (void **)v61[18];
    while (v24 != v25)
    {
      uint64_t v26 = (uint64_t)*v24;
      HDStatisticsRelative<HDStatisticsCumulative>::unarchive((uint64_t)&v109, *v24);
      uint64_t v27 = *(void *)(v26 + 144);
      BOOL v28 = v84;
      char v29 = &v84;
      char v30 = &v84;
      if (v84)
      {
        do
        {
          while (1)
          {
            char v30 = (uint64_t **)v28;
            uint64_t v31 = v28[4];
            if (v31 <= v27) {
              break;
            }
            BOOL v28 = *v30;
            char v29 = v30;
            if (!*v30) {
              goto LABEL_33;
            }
          }
          if (v31 >= v27)
          {
            double v33 = (char *)v30;
            goto LABEL_36;
          }
          BOOL v28 = v30[1];
        }
        while (v28);
        char v29 = v30 + 1;
      }
LABEL_33:
      double v33 = (char *)operator new(0x90uLL);
      *((void *)v33 + 4) = v27;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *(_OWORD *)(v33 + 120) = 0u;
      *((void *)v33 + 17) = 0;
      *(void *)double v33 = 0;
      *((void *)v33 + 1) = 0;
      *((void *)v33 + 2) = v30;
      void *v29 = (uint64_t *)v33;
      int v32 = (uint64_t *)v33;
      if (*v83)
      {
        uint64_t v83 = (uint64_t **)*v83;
        int v32 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v84, v32);
      ++v85;
LABEL_36:
      uint64_t v34 = v115;
      long long v35 = v114;
      long long v36 = v113;
      long long v37 = v111;
      *(_OWORD *)(v33 + 88) = v112;
      *(_OWORD *)(v33 + 104) = v36;
      *(_OWORD *)(v33 + 120) = v35;
      long long v38 = v110;
      *(_OWORD *)(v33 + 40) = v109;
      *((void *)v33 + 17) = v34;
      *(_OWORD *)(v33 + 56) = v38;
      ++v24;
      *(_OWORD *)(v33 + 72) = v37;
    }
    uint64_t v39 = v61[5];
    for (uint64_t i = v61[6]; v39 != i; v39 += 8)
    {
      double v42 = *(double *)(*(void *)v39 + 8);
      double v41 = *(double *)(*(void *)v39 + 16);
      if (v42 >= v41) {
        double v43 = *(double *)(*(void *)v39 + 16);
      }
      else {
        double v43 = *(double *)(*(void *)v39 + 8);
      }
      if (v41 < v42) {
        double v41 = *(double *)(*(void *)v39 + 8);
      }
      HKIntervalMask<double>::_insertInterval(v75, v43, v41);
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::operator=((uint64_t)v65, (uint64_t)&v68);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsBucket((uint64_t)&v68);
  }
  uint64_t v44 = v103;
  uint64_t v45 = v104;
  if (v103 != v104)
  {
    unint64_t v46 = *((void *)&v66 + 1);
    do
    {
      uint64_t v47 = *(void *)(*(void *)v44 + 24);
      uint64_t v48 = *(void *)(*(void *)v44 + 32);
      uint64_t v49 = *(void *)(*(void *)v44 + 8);
      uint64_t v50 = *(void *)(*(void *)v44 + 16);
      if (v46 >= (unint64_t)v67)
      {
        unint64_t v51 = (void *)v66;
        unint64_t v52 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v46 - v66) >> 3);
        unint64_t v53 = v52 + 1;
        if (v52 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(v67 - v66) >> 3) > v53) {
          unint64_t v53 = 0x999999999999999ALL * ((uint64_t)(v67 - v66) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v67 - v66) >> 3) >= 0x333333333333333) {
          unint64_t v54 = 0x666666666666666;
        }
        else {
          unint64_t v54 = v53;
        }
        if (v54)
        {
          unint64_t v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v54);
          unint64_t v46 = *((void *)&v66 + 1);
          unint64_t v51 = (void *)v66;
        }
        else
        {
          uint64_t v55 = 0;
        }
        unint64_t v56 = v54 + 40 * v52;
        *(void *)unint64_t v56 = v48;
        *(void *)(v56 + 8) = v47;
        *(void *)(v56 + 16) = v49;
        *(void *)(v56 + 24) = v50;
        *(_WORD *)(v56 + 32) = 1;
        unint64_t v57 = v56;
        if ((void *)v46 != v51)
        {
          do
          {
            long long v58 = *(_OWORD *)(v46 - 40);
            long long v59 = *(_OWORD *)(v46 - 24);
            *(_WORD *)(v57 - 8) = *(_WORD *)(v46 - 8);
            *(_OWORD *)(v57 - 24) = v59;
            *(_OWORD *)(v57 - 40) = v58;
            v57 -= 40;
            v46 -= 40;
          }
          while ((void *)v46 != v51);
          unint64_t v51 = (void *)v66;
        }
        unint64_t v46 = v56 + 40;
        *(void *)&long long v66 = v57;
        *((void *)&v66 + 1) = v56 + 40;
        *(void *)&long long v67 = v54 + 40 * v55;
        if (v51) {
          operator delete(v51);
        }
      }
      else
      {
        *(void *)unint64_t v46 = v48;
        *(void *)(v46 + 8) = v47;
        *(void *)(v46 + 16) = v49;
        *(void *)(v46 + 24) = v50;
        *(_WORD *)(v46 + 32) = 1;
        v46 += 40;
      }
      *((void *)&v66 + 1) = v46;
      v44 += 8;
    }
    while (v44 != v45);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v100);

  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::operator=((void *)(v62 + 112), (uint64_t)&v64);
  if ((void)v66)
  {
    *((void *)&v66 + 1) = v66;
    operator delete((void *)v66);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsBucket((uint64_t)v65);
}

void sub_1BD062FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, ...)
{
  va_start(va, a8);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x3C8]);
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 256;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_WORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_WORD *)(a1 + 216) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(void *)(a1 + 224) = a1 + 232;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 280) = 1065353216;
  *(void *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_DWORD *)(a1 + 344) = 1065353216;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_DWORD *)(a1 + 384) = 1065353216;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_DWORD *)(a1 + 424) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 440);
  if (v2)
  {
    *(void *)(a1 + 448) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsBucket(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 392);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 352);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 312);
  unint64_t v2 = *(void **)(a1 + 288);
  if (v2)
  {
    *(void *)(a1 + 296) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 248);
  std::__tree<long>::destroy(*(void **)(a1 + 232));
  id v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(void *)(a1 + 104) = v3;
    operator delete(v3);
  }
  objc_destroyWeak((id *)(a1 + 88));
  uint64_t v4 = *(void **)(a1 + 64);
  if (v4)
  {
    *(void *)(a1 + 72) = v4;
    operator delete(v4);
  }

  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_configureForStartTime(uint64_t a1)
{
  uint64_t v29 = 0;
  unint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
    uint64_t v4 = [v2 dateIntervalContainingDate:v3 index:&v29];

    uint64_t v5 = [v4 startDate];
    [v5 timeIntervalSinceReferenceDate];
    double v7 = v6;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
LABEL_5:
    double v13 = v9;

    goto LABEL_6;
  }
  id v10 = *(id *)(a1 + 64);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v11 = [v10 startDate];
    [v11 timeIntervalSinceReferenceDate];
    double v7 = v12;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
    goto LABEL_5;
  }
  double v7 = -1.79769313e308;
  double v13 = 1.79769313e308;
LABEL_6:

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::HDStatisticsBucket((uint64_t)v22, WeakRetained, v7, v13);

  if (*(void *)(a1 + 32) == 1) {
    char v24 = 1;
  }
  uint64_t v23 = *(void *)(a1 + 56);
  char v25 = *(unsigned char *)(a1 + 24) & 1;
  if (v28 != (char *)(a1 + 72)) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v28, *(char **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4);
  }
  objc_storeStrong(&v27, *(id *)(a1 + 600));
  if (!*(void *)(a1 + 40)) {
    int v26 = 0;
  }
  uint64_t v15 = v29;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v22);
  uint64_t v18 = v15;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::HDStatisticsBucket((uint64_t)v19, (uint64_t)v17);
  long long __p = 0u;
  long long v21 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::operator=((void *)(a1 + 112), (uint64_t)&v18);

  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsBucket((uint64_t)v19);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsBucket((uint64_t)v17);
  *(unsigned char *)(a1 + 584) = 0;
  return HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsBucket((uint64_t)v22);
}

void sub_1BD063520(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::operator=(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::operator=((uint64_t)(a1 + 1), a2 + 8);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 55), (__n128 *)(a2 + 440));
  uint64_t v4 = *(void *)(a2 + 464);
  *(void *)(a2 + 464) = 0;
  uint64_t v5 = (void *)a1[58];
  a1[58] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 96);
  double v7 = *(unsigned char **)(a2 + 104);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(void *)(a1 + 96) = v10;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(void *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  long long v12 = *(_OWORD *)(a2 + 168);
  long long v13 = *(_OWORD *)(a2 + 184);
  long long v14 = *(_OWORD *)(a2 + 200);
  uint64_t v15 = *(void *)(a2 + 216);
  long long v16 = *(_OWORD *)(a2 + 120);
  long long v17 = *(_OWORD *)(a2 + 136);
  long long v18 = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 232) = 0;
  uint64_t v19 = (void *)(a1 + 232);
  *(void *)(a1 + 224) = a1 + 232;
  *(_OWORD *)(a1 + 152) = v18;
  *(_OWORD *)(a1 + 136) = v17;
  *(_OWORD *)(a1 + 120) = v16;
  *(void *)(a1 + 216) = v15;
  *(_OWORD *)(a1 + 200) = v14;
  *(_OWORD *)(a1 + 184) = v13;
  *(_OWORD *)(a1 + 168) = v12;
  *(void *)(a1 + 240) = 0;
  uint64_t v20 = *(void **)(a2 + 224);
  if (v20 != (void *)(a2 + 232))
  {
    long long v21 = 0;
    long long v22 = (void *)(a1 + 232);
    while (1)
    {
      uint64_t v23 = v20[4];
      char v24 = (void *)(a1 + 232);
      if (v22 == v19) {
        goto LABEL_12;
      }
      char v25 = v21;
      int v26 = (void *)(a1 + 232);
      if (v21)
      {
        do
        {
          char v24 = v25;
          char v25 = (void *)v25[1];
        }
        while (v25);
      }
      else
      {
        do
        {
          char v24 = (void *)v26[2];
          BOOL v27 = *v24 == (void)v26;
          int v26 = v24;
        }
        while (v27);
      }
      if (v24[4] < v23)
      {
LABEL_12:
        if (v21) {
          BOOL v28 = (uint64_t **)v24;
        }
        else {
          BOOL v28 = (uint64_t **)(a1 + 232);
        }
        if (v21) {
          uint64_t v29 = (uint64_t **)(v24 + 1);
        }
        else {
          uint64_t v29 = (uint64_t **)(a1 + 232);
        }
        if (!*v29)
        {
LABEL_28:
          int v32 = (uint64_t *)operator new(0x90uLL);
          long long v33 = *((_OWORD *)v20 + 2);
          long long v34 = *((_OWORD *)v20 + 4);
          *((_OWORD *)v32 + 3) = *((_OWORD *)v20 + 3);
          *((_OWORD *)v32 + 4) = v34;
          *((_OWORD *)v32 + 2) = v33;
          long long v35 = *((_OWORD *)v20 + 5);
          long long v36 = *((_OWORD *)v20 + 6);
          long long v37 = *((_OWORD *)v20 + 8);
          *((_OWORD *)v32 + 7) = *((_OWORD *)v20 + 7);
          *((_OWORD *)v32 + 8) = v37;
          *((_OWORD *)v32 + 5) = v35;
          *((_OWORD *)v32 + 6) = v36;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 224), (uint64_t)v28, v29, v32);
        }
      }
      else
      {
        uint64_t v29 = (uint64_t **)(a1 + 232);
        BOOL v28 = (uint64_t **)(a1 + 232);
        if (!v21) {
          goto LABEL_28;
        }
        char v30 = v21;
        while (1)
        {
          while (1)
          {
            BOOL v28 = (uint64_t **)v30;
            uint64_t v31 = v30[4];
            if (v31 <= v23) {
              break;
            }
            char v30 = *v28;
            uint64_t v29 = v28;
            if (!*v28) {
              goto LABEL_28;
            }
          }
          if (v31 >= v23) {
            break;
          }
          char v30 = v28[1];
          if (!v30)
          {
            uint64_t v29 = v28 + 1;
            goto LABEL_28;
          }
        }
      }
      long long v38 = (void *)v20[1];
      if (v38)
      {
        do
        {
          uint64_t v39 = v38;
          long long v38 = (void *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          uint64_t v39 = (void *)v20[2];
          BOOL v27 = *v39 == (void)v20;
          uint64_t v20 = v39;
        }
        while (!v27);
      }
      if (v39 == (void *)(a2 + 232)) {
        break;
      }
      long long v21 = (void *)*v19;
      long long v22 = *(void **)(a1 + 224);
      uint64_t v20 = v39;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 248, a2 + 248);
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 288), *(const void **)(a2 + 288), *(void *)(a2 + 296), (uint64_t)(*(void *)(a2 + 296) - *(void *)(a2 + 288)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 312, a2 + 312);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 352, a2 + 352);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 392, a2 + 392);
  return a1;
}

void sub_1BD0638DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, id *location, void **a12)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v16);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v15);
  uint64_t v19 = *v14;
  if (*v14)
  {
    *(void *)(v12 + 296) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v13);
  std::__tree<long>::destroy(*v17);
  uint64_t v20 = *a10;
  if (*a10)
  {
    *(void *)(v12 + 104) = v20;
    operator delete(v20);
  }
  objc_destroyWeak(location);
  long long v21 = *a12;
  if (*a12)
  {
    *(void *)(v12 + 72) = v21;
    operator delete(v21);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::operator=(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  long long v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v5;

  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  id WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  uint64_t v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(void *)(a1 + 104) = v9;
    operator delete(v9);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 96) = 0;
  long long v10 = *(_OWORD *)(a2 + 184);
  long long v11 = *(_OWORD *)(a2 + 200);
  long long v12 = *(_OWORD *)(a2 + 168);
  uint64_t v14 = a1 + 232;
  uint64_t v13 = *(void **)(a1 + 232);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(_OWORD *)(a1 + 184) = v10;
  *(_OWORD *)(a1 + 200) = v11;
  *(_OWORD *)(a1 + 168) = v12;
  long long v15 = *(_OWORD *)(a2 + 152);
  long long v16 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v16;
  *(_OWORD *)(a1 + 152) = v15;
  std::__tree<long>::destroy(v13);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  long long v17 = (void *)(a2 + 232);
  uint64_t v18 = *(void *)(a2 + 232);
  *(void *)(a1 + 232) = v18;
  uint64_t v19 = *(void *)(a2 + 240);
  *(void *)(a1 + 240) = v19;
  if (v19)
  {
    *(void *)(v18 + 16) = v14;
    *(void *)(a2 + 224) = v17;
    void *v17 = 0;
    *(void *)(a2 + 240) = 0;
  }
  else
  {
    *(void *)(a1 + 224) = v14;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 248, (uint64_t *)(a2 + 248));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 288, (__n128 *)(a2 + 288));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 312, (uint64_t *)(a2 + 312));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 352, (uint64_t *)(a2 + 352));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 392, (uint64_t *)(a2 + 392));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_statisticsFromFinishedBucket(uint64_t a1, double *a2)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  double v4 = *a2;
  id v5 = objc_alloc(MEMORY[0x1E4F1C9C8]);
  long long v6 = a2 + 5;
  if (v4 != -1.79769313e308) {
    long long v6 = a2;
  }
  uint64_t v100 = (uint64_t)a2;
  id v101 = (id)[v5 initWithTimeIntervalSinceReferenceDate:*v6];
  if (a2[1] == 1.79769313e308) {
    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:a2[6]];
  }
  else {
    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:a2[1]];
  }
  uint64_t v8 = (void *)v7;
  id v9 = *(id *)(a1 + 16);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v10 = *(id *)(a1 + 16);
    if ([v10 shouldUseUnderlyingTypeForStatistics])
    {
      uint64_t v11 = [v10 underlyingSampleType];

      id v9 = (id)v11;
    }
  }
  unint64_t v12 = [objc_alloc(MEMORY[0x1E4F2B5B0]) initWithDataType:v9 startDate:v101 endDate:v8];
  uint64_t v13 = a1;
  if (*(unsigned char *)(a1 + 24))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      unint64_t v2 = (unint64_t)objc_alloc_init(MEMORY[0x1E4F1CA48]);
      long long v15 = *(uint64_t **)(v100 + 288);
      long long v16 = *(uint64_t **)(v100 + 296);
      while (v15 != v16)
      {
        uint64_t v17 = *v15;
        id v18 = objc_loadWeakRetained((id *)(a1 + 48));
        uint64_t v19 = [v18 sourceForSourceID:v17];

        if (v19)
        {
          if (([(id)v2 containsObject:v19] & 1) == 0) {
            [(id)v2 addObject:v19];
          }
        }

        ++v15;
      }
      uint64_t v20 = (void *)[(id)v2 copy];
      [(id)v12 _setSources:v20];

      uint64_t v13 = a1;
    }
  }

  v110[0] = &unk_1F1722B70;
  long long v111 = v110;
  id v102 = (id)v12;
  int v99 = [*(id *)(v13 + 16) canonicalUnit];
  long long v21 = *(_OWORD *)(v100 + 168);
  long long v22 = *(_OWORD *)(v100 + 200);
  long long v107 = *(_OWORD *)(v100 + 184);
  long long v108 = v22;
  uint64_t v109 = *(void *)(v100 + 216);
  long long v23 = *(_OWORD *)(v100 + 136);
  *(_OWORD *)long long __p = *(_OWORD *)(v100 + 120);
  long long v104 = v23;
  long long v105 = *(_OWORD *)(v100 + 152);
  long long v106 = v21;
  if (!v111) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v24 = (*(uint64_t (**)(void *, void **))(*v111 + 48))(v111, __p);
  uint64_t v25 = *(void *)(v24 + 8);
  double v27 = *(double *)(v24 + 16);
  double v26 = *(double *)(v24 + 24);
  double v28 = *(double *)(v24 + 32);
  uint64_t v29 = [MEMORY[0x1E4F2B370] quantityWithUnit:v99 doubleValue:*(double *)v24];
  [v102 setSumQuantity:v29];

  [v102 setDataCount:v25];
  uint64_t v30 = *(void *)(a1 + 24);
  char v98 = v30;
  if ((v30 & 0x20) != 0)
  {
    uint64_t v31 = [MEMORY[0x1E4F2B370] quantityWithUnit:v99 doubleValue:v27];
    [v102 setMostRecentQuantity:v31];

    int v32 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v26, v28);
    [v102 setMostRecentQuantityDateInterval:v32];

    uint64_t v30 = *(void *)(a1 + 24);
  }
  if ((v30 & 1) == 0) {
    goto LABEL_130;
  }
  id v97 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v96 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  if ((v98 & 0x20) != 0)
  {
    id v92 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v93 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else
  {
    id v92 = 0;
    id v93 = 0;
  }
  *(_OWORD *)long long __p = 0u;
  long long v104 = 0u;
  LODWORD(v105) = 1065353216;
  long long v33 = *(void **)(v100 + 224);
  if (v33 == (void *)(v100 + 232)) {
    goto LABEL_127;
  }
  do
  {
    long long v34 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_bundleIdentifierForSourceID(v100, v33[4]);
    long long v35 = v34;
    if (!v34) {
      goto LABEL_103;
    }
    unint64_t v36 = [v34 hash];
    unint64_t v12 = v36;
    unint64_t v37 = (unint64_t)__p[1];
    if (!__p[1]) {
      goto LABEL_46;
    }
    uint8x8_t v38 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v38.i16[0] = vaddlv_u8(v38);
    unint64_t v39 = v38.u32[0];
    if (v38.u32[0] > 1uLL)
    {
      unint64_t v2 = v36;
      if ((void *)v36 >= __p[1]) {
        unint64_t v2 = v36 % (unint64_t)__p[1];
      }
    }
    else
    {
      unint64_t v2 = ((unint64_t)__p[1] - 1) & v36;
    }
    int8x16_t v40 = (void **)*((void *)__p[0] + v2);
    if (!v40 || (double v41 = (char *)*v40) == 0)
    {
LABEL_46:
      double v41 = (char *)operator new(0x80uLL);
      *(void *)double v41 = 0;
      *((void *)v41 + 1) = v12;
      *((void *)v41 + 2) = v35;
      *(_OWORD *)(v41 + 24) = 0u;
      *(_OWORD *)(v41 + 40) = 0u;
      *(_OWORD *)(v41 + 56) = 0u;
      *(_OWORD *)(v41 + 72) = 0u;
      *(_OWORD *)(v41 + 88) = 0u;
      *(_OWORD *)(v41 + 104) = 0u;
      *((void *)v41 + 15) = 0;
      float v47 = (float)(unint64_t)(*((void *)&v104 + 1) + 1);
      if (v37 && (float)(*(float *)&v105 * (float)v37) >= v47)
      {
LABEL_92:
        id v63 = __p[0];
        uint64_t v64 = (void *)*((void *)__p[0] + v2);
        if (v64)
        {
          *(void *)double v41 = *v64;
        }
        else
        {
          *(void *)double v41 = v104;
          *(void *)&long long v104 = v41;
          v63[v2] = &v104;
          if (!*(void *)v41)
          {
LABEL_101:
            ++*((void *)&v104 + 1);
            goto LABEL_102;
          }
          unint64_t v65 = *(void *)(*(void *)v41 + 8);
          if ((v37 & (v37 - 1)) != 0)
          {
            if (v65 >= v37) {
              v65 %= v37;
            }
          }
          else
          {
            v65 &= v37 - 1;
          }
          uint64_t v64 = (char *)__p[0] + 8 * v65;
        }
        *uint64_t v64 = v41;
        goto LABEL_101;
      }
      BOOL v48 = (v37 & (v37 - 1)) != 0;
      if (v37 < 3) {
        BOOL v48 = 1;
      }
      unint64_t v49 = v48 | (2 * v37);
      unint64_t v50 = vcvtps_u32_f32(v47 / *(float *)&v105);
      if (v49 <= v50) {
        int8x8_t prime = (int8x8_t)v50;
      }
      else {
        int8x8_t prime = (int8x8_t)v49;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v37 = (unint64_t)__p[1];
      if ((void *)*(void *)&prime > __p[1]) {
        goto LABEL_58;
      }
      if ((void *)*(void *)&prime < __p[1])
      {
        unint64_t v58 = vcvtps_u32_f32((float)*((unint64_t *)&v104 + 1) / *(float *)&v105);
        if (__p[1] < (void *)3
          || (uint8x8_t v59 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v59.i16[0] = vaddlv_u8(v59), v59.u32[0] > 1uLL))
        {
          unint64_t v58 = std::__next_prime(v58);
        }
        else
        {
          uint64_t v60 = 1 << -(char)__clz(v58 - 1);
          if (v58 >= 2) {
            unint64_t v58 = v60;
          }
        }
        if (*(void *)&prime <= v58) {
          int8x8_t prime = (int8x8_t)v58;
        }
        if (*(void *)&prime >= v37)
        {
          unint64_t v37 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_58:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v52 = operator new(8 * *(void *)&prime);
            unint64_t v53 = __p[0];
            __p[0] = v52;
            if (v53) {
              operator delete(v53);
            }
            uint64_t v54 = 0;
            __p[1] = (void *)prime;
            do
              *((void *)__p[0] + v54++) = 0;
            while (*(void *)&prime != v54);
            uint64_t v55 = (void **)v104;
            if ((void)v104)
            {
              unint64_t v56 = *(void *)(v104 + 8);
              uint8x8_t v57 = (uint8x8_t)vcnt_s8(prime);
              v57.i16[0] = vaddlv_u8(v57);
              if (v57.u32[0] > 1uLL)
              {
                if (v56 >= *(void *)&prime) {
                  v56 %= *(void *)&prime;
                }
              }
              else
              {
                v56 &= *(void *)&prime - 1;
              }
              *((void *)__p[0] + v56) = &v104;
              for (i = *v55; i; unint64_t v56 = v62)
              {
                unint64_t v62 = i[1];
                if (v57.u32[0] > 1uLL)
                {
                  if (v62 >= *(void *)&prime) {
                    v62 %= *(void *)&prime;
                  }
                }
                else
                {
                  v62 &= *(void *)&prime - 1;
                }
                if (v62 != v56)
                {
                  if (!*((void *)__p[0] + v62))
                  {
                    *((void *)__p[0] + v62) = v55;
                    goto LABEL_83;
                  }
                  *uint64_t v55 = (void *)*i;
                  void *i = **((void **)__p[0] + v62);
                  **((void **)__p[0] + v62) = i;
                  uint64_t i = v55;
                }
                unint64_t v62 = v56;
LABEL_83:
                uint64_t v55 = (void **)i;
                uint64_t i = (void *)*i;
              }
            }
            unint64_t v37 = (unint64_t)prime;
            goto LABEL_87;
          }
          uint64_t v74 = __p[0];
          __p[0] = 0;
          if (v74) {
            operator delete(v74);
          }
          unint64_t v37 = 0;
          __p[1] = 0;
        }
      }
LABEL_87:
      if ((v37 & (v37 - 1)) != 0)
      {
        if (v12 >= v37) {
          unint64_t v2 = v12 % v37;
        }
        else {
          unint64_t v2 = v12;
        }
      }
      else
      {
        unint64_t v2 = (v37 - 1) & v12;
      }
      goto LABEL_92;
    }
    unint64_t v95 = (unint64_t)__p[1] - 1;
    while (1)
    {
      unint64_t v42 = *((void *)v41 + 1);
      if (v42 == v12) {
        break;
      }
      if (v39 > 1)
      {
        if (v42 >= v37) {
          v42 %= v37;
        }
      }
      else
      {
        v42 &= v95;
      }
      if (v42 != v2) {
        goto LABEL_46;
      }
LABEL_45:
      double v41 = *(char **)v41;
      if (!v41) {
        goto LABEL_46;
      }
    }
    id v43 = *((id *)v41 + 2);
    id v44 = v35;
    uint64_t v45 = v44;
    if (v43 != v44)
    {
      char v46 = [v43 isEqualToString:v44];

      if (v46) {
        goto LABEL_102;
      }
      goto LABEL_45;
    }

LABEL_102:
    long long v66 = *(_OWORD *)(v33 + 5);
    long long v67 = *(_OWORD *)(v33 + 7);
    *(_OWORD *)(v41 + 56) = *(_OWORD *)(v33 + 9);
    *(_OWORD *)(v41 + 40) = v67;
    *(_OWORD *)(v41 + 24) = v66;
    long long v68 = *(_OWORD *)(v33 + 11);
    long long v69 = *(_OWORD *)(v33 + 13);
    long long v70 = *(_OWORD *)(v33 + 15);
    *((void *)v41 + 15) = v33[17];
    *(_OWORD *)(v41 + 104) = v70;
    *(_OWORD *)(v41 + 88) = v69;
    *(_OWORD *)(v41 + 72) = v68;

LABEL_103:
    char v71 = (void *)v33[1];
    if (v71)
    {
      do
      {
        uint64_t v72 = v71;
        char v71 = (void *)*v71;
      }
      while (v71);
    }
    else
    {
      do
      {
        uint64_t v72 = (void *)v33[2];
        BOOL v73 = *v72 == (void)v33;
        long long v33 = v72;
      }
      while (!v73);
    }
    long long v33 = v72;
  }
  while (v72 != (void *)(v100 + 232));
  for (uint64_t j = (uint64_t **)v104; j; uint64_t j = (uint64_t **)*j)
  {
    long long v76 = j[2];
    if (!v111
      || (unint64_t v2 = (unint64_t)(j + 3),
          objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v99, *(double *)(*(uint64_t (**)(void *, uint64_t *))(*v111 + 48))(v111, (uint64_t *)j + 3)), uint64_t v77 = objc_claimAutoreleasedReturnValue(), objc_msgSend(v97, "setObject:forKeyedSubscript:", v77, v76), v77, !v111))
    {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    unint64_t v78 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)((*(uint64_t (**)(void *, uint64_t *))(*v111 + 48))(v111, (uint64_t *)j + 3) + 8));
    [v96 setObject:v78 forKeyedSubscript:v76];
    unint64_t v12 = (v98 & 0x20) == 0;

    if ((v98 & 0x20) != 0)
    {
      if (!v111) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v79 = (*(uint64_t (**)(void *, uint64_t *))(*v111 + 48))(v111, (uint64_t *)j + 3);
      double v80 = *(double *)(v79 + 24);
      double v81 = *(double *)(v79 + 32);
      uint64_t v82 = [MEMORY[0x1E4F2B370] quantityWithUnit:v99 doubleValue:*(double *)(v79 + 16)];
      [v92 setObject:v82 forKeyedSubscript:v76];

      uint64_t v83 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v80, v81);
      [v93 setObject:v83 forKeyedSubscript:v76];
    }
  }
LABEL_127:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>>>::~__hash_table((uint64_t)__p);
  [v102 setSumQuantityBySource:v97];
  [v102 setDataCountBySource:v96];
  if ((v98 & 0x20) != 0)
  {
    [v102 setMostRecentQuantityBySource:v92];
    [v102 setMostRecentQuantityDateIntervalBySource:v93];
  }

LABEL_130:
  std::__function::__value_func<HDStatisticsCumulative const& ()(HDStatisticsRelative<HDStatisticsCumulative> const&)>::~__value_func[abi:ne180100](v110);
  uint64_t v84 = [*(id *)(a1 + 16) _unitForChangeInCanonicalUnit];
  uint64_t v85 = [v102 averageQuantity];
  if (v85)
  {
    unint64_t v12 = [v102 averageQuantity];
    if (([(id)v12 isCompatibleWithUnit:v84] & 1) == 0)
    {

      goto LABEL_144;
    }
  }
  long long v86 = [v102 minimumQuantity];
  if (v86)
  {
    unint64_t v2 = [v102 minimumQuantity];
    if (![(id)v2 isCompatibleWithUnit:v84])
    {
      int v87 = 1;
      goto LABEL_138;
    }
  }
  int v88 = [v102 maximumQuantity];
  if (v88)
  {
    long long v89 = [v102 maximumQuantity];
    int v90 = [v89 isCompatibleWithUnit:v84];

    int v87 = v90 ^ 1;
    if (v86) {
      goto LABEL_138;
    }
LABEL_142:
    if (!v85) {
      goto LABEL_143;
    }
LABEL_139:

    if ((v87 & 1) == 0) {
      goto LABEL_145;
    }
LABEL_144:
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8], @"Expected compatibility with %@", v84 format];
    goto LABEL_145;
  }
  int v87 = 0;
  if (!v86) {
    goto LABEL_142;
  }
LABEL_138:

  if (v85) {
    goto LABEL_139;
  }
LABEL_143:

  if (v87) {
    goto LABEL_144;
  }
LABEL_145:

  return v102;
}

void sub_1BD064714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,void *a22)
{
  std::__function::__value_func<HDStatisticsCumulative const& ()(HDStatisticsRelative<HDStatisticsCumulative> const&)>::~__value_func[abi:ne180100]((void *)(v22 - 160));
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 272);
  uint64_t v2 = *(void *)(a1 + 288);
  if (v1 != (*(void *)(a1 + 296) - v2) >> 3)
  {
    double v4 = (void **)(a1 + 288);
    *(void *)(a1 + 296) = v2;
    std::vector<long long>::reserve((void **)(a1 + 288), v1);
    id v5 = *(void **)(a1 + 264);
    if (v5)
    {
      long long v6 = *(char **)(a1 + 296);
      do
      {
        uint64_t v7 = v5[2];
        unint64_t v8 = *(void *)(a1 + 304);
        if ((unint64_t)v6 >= v8)
        {
          id v10 = (char *)*v4;
          uint64_t v11 = (v6 - (unsigned char *)*v4) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            id v10 = *(char **)(a1 + 288);
            long long v6 = *(char **)(a1 + 296);
          }
          else
          {
            uint64_t v15 = 0;
          }
          long long v16 = (void *)(v14 + 8 * v11);
          *long long v16 = v7;
          id v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            uint64_t v17 = *((void *)v6 - 1);
            v6 -= 8;
            *--long long v16 = v17;
          }
          *(void *)(a1 + 288) = v16;
          *(void *)(a1 + 296) = v9;
          *(void *)(a1 + 304) = v14 + 8 * v15;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)long long v6 = v7;
          id v9 = v6 + 8;
        }
        *(void *)(a1 + 296) = v9;
        id v5 = (void *)*v5;
        long long v6 = v9;
      }
      while (v5);
    }
    id v18 = (id *)(a1 + 88);
    id WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      id v20 = objc_loadWeakRetained(v18);
      [v20 orderSourceIDs:v4];
    }
  }
}

void sub_1BD064ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2) {
    a2 = v4 * floor(a2 / v4);
  }
  double v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    uint64_t v125 = (void **)(a1 + 96);
    long long v121 = (double **)(a1 + 64);
    uint64_t v119 = a1 + 120;
    location = (id *)(a1 + 88);
    uint64_t v115 = (void *)(a1 + 232);
    while (1)
    {
      uint64_t v6 = *(void *)(a1 + 96);
      uint64_t v7 = *(long long **)(a1 + 104);
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4);
      if (v8) {
        break;
      }
LABEL_124:
      *(double *)(a1 + 56) = a2;
LABEL_125:
      double v112 = *(double *)(a1 + 56);
      if (v112 == v5)
      {
        long long v113 = [MEMORY[0x1E4F28B00] currentHandler];
        long long v114 = [NSString stringWithUTF8String:"void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeThroughTime(double) [Statistics = HDStatisticsRelative<HDStatisticsCumulative>]"];
        [v113 handleFailureInFunction:v114 file:@"HDStatisticsBucket.hpp" lineNumber:234 description:@"Failed to make forward progress during statistics merge."];

        double v112 = *(double *)(a1 + 56);
      }
      double v5 = v112;
      if (v112 >= a2) {
        return;
      }
    }
    if (v8 != 1)
    {
      double v20 = a2;
      double v21 = a2;
      double v22 = v5;
      uint64_t v23 = *(void *)(a1 + 96);
      if ((long long *)v6 != v7)
      {
        do
        {
          double v24 = *(double *)(v23 + 8);
          double v25 = *(double *)(v23 + 16);
          if (v24 > v22 && v24 < v21) {
            double v21 = *(double *)(v23 + 8);
          }
          if (v25 > v5) {
            double v27 = *(double *)(v23 + 16);
          }
          else {
            double v27 = v20;
          }
          if (v25 < v20)
          {
            double v22 = v5;
            double v20 = v27;
          }
          v23 += 48;
        }
        while ((long long *)v23 != v7);
      }
      if (v20 >= v21) {
        double v28 = v21;
      }
      else {
        double v28 = v20;
      }
      double v29 = *(double *)(a1 + 16);
      if (v29 > 0.0)
      {
        double v30 = v29 * floor(v28 / v29);
        double v31 = v29 * floor((v29 + v5) / v29);
        if (v30 >= v31) {
          double v28 = v30;
        }
        else {
          double v28 = v31;
        }
      }
      *uint64_t v125 = 0;
      v125[1] = 0;
      v125[2] = 0;
      if ((long long *)v6 != v7)
      {
        if (v8 > 0x555555555555555) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        int v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4));
        long long v35 = *(char **)(a1 + 96);
        long long v34 = *(char **)(a1 + 104);
        unint64_t v36 = v32;
        if (v34 != v35)
        {
          do
          {
            long long v37 = *((_OWORD *)v34 - 3);
            long long v38 = *((_OWORD *)v34 - 2);
            *(_OWORD *)(v36 - 21) = *(_OWORD *)(v34 - 21);
            *((_OWORD *)v36 - 3) = v37;
            *((_OWORD *)v36 - 2) = v38;
            v36 -= 48;
            v34 -= 48;
          }
          while (v34 != v35);
          long long v34 = (char *)*v125;
        }
        *(void *)(a1 + 96) = v36;
        *(void *)(a1 + 104) = v32;
        *(void *)(a1 + 112) = &v32[48 * v33];
        if (v34) {
          operator delete(v34);
        }
      }
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_updateSourceOrder(a1);
      long long v117 = (long long *)v6;
      id WeakRetained = objc_loadWeakRetained(location);

      if (WeakRetained)
      {
        *(void *)&long long v127 = a1;
        unint64_t v40 = 126 - 2 * __clz(v8);
        if (v117 == v7) {
          uint64_t v41 = 0;
        }
        else {
          uint64_t v41 = v40;
        }
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*,false>((unint64_t)v117, v7, (uint64_t)&v127, v41, 1);
      }
      if (*(unsigned char *)(a1 + 25)) {
        id v118 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      }
      else {
        id v118 = 0;
      }
      if (v117 == v7)
      {
LABEL_106:
        id v96 = *(void **)(a1 + 224);
        if (v96 != v115)
        {
          do
          {
            id v97 = (void *)v96[1];
            if (v97)
            {
              do
              {
                char v98 = v97;
                id v97 = (void *)*v97;
              }
              while (v97);
            }
            else
            {
              do
              {
                char v98 = (void *)v96[2];
                BOOL v99 = *v98 == (void)v96;
                id v96 = v98;
              }
              while (!v99);
            }
            id v96 = v98;
          }
          while (v98 != v115);
        }
        *(double *)(a1 + 56) = v28;

        if (v117) {
          operator delete(v117);
        }
        goto LABEL_125;
      }
      uint64_t v120 = 0;
      char v44 = 0;
      uint64_t v45 = v117;
      while (2)
      {
        long long v46 = v45[1];
        long long v127 = *v45;
        long long v128 = v46;
        uint64_t v129 = *((void *)v45 + 4);
        uint64_t v47 = v46;
        double v48 = v28 - *((double *)&v127 + 1);
        double v49 = *(double *)&v46 - *((double *)&v127 + 1);
        if (v49 - (v28 - *((double *)&v127 + 1)) < 0.01)
        {
          uint64_t v50 = 0;
          int v51 = 0;
          char v52 = 0;
          double v53 = 0.0;
          uint64_t v47 = 0;
          double v54 = 0.0;
          if (!(_BYTE)v129) {
            goto LABEL_59;
          }
LABEL_54:
          char v123 = v52;
          uint64_t v124 = v50;
          HDRawQuantitySample::applyMask((uint64_t)&v127, v121);
          int v56 = *((unsigned __int8 *)v45 + 42);
          int v57 = *((unsigned __int8 *)v45 + 41);
          char v122 = *((unsigned char *)v45 + 40);
          if (!(_BYTE)v129) {
            goto LABEL_87;
          }
          if (v44)
          {
            unint64_t v58 = *((void *)&v128 + 1);
            if (v120 == *((void *)&v128 + 1) || *(unsigned char *)(a1 + 24))
            {
              HDStatisticsRelative<HDStatisticsCumulative>::addSample(v119, (double *)&v127, v56 == 0);
              int v56 = 1;
            }
          }
          else
          {
            HDStatisticsRelative<HDStatisticsCumulative>::addSample(v119, (double *)&v127, v56 == 0);
            int v56 = 1;
            unint64_t v58 = *((void *)&v128 + 1);
            uint64_t v120 = *((void *)&v128 + 1);
          }
          if (!*(unsigned char *)(a1 + 25)) {
            goto LABEL_86;
          }
          long long v69 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_bundleIdentifierForSourceID(a1, v58);
          if (!v69) {
            goto LABEL_85;
          }
          long long v70 = [v118 objectForKeyedSubscript:v69];
          char v71 = v70;
          if (v70)
          {
            if ([v70 longLongValue] != v58 && !*(unsigned char *)(a1 + 24))
            {
LABEL_84:

LABEL_85:
LABEL_86:
              char v44 = 1;
LABEL_87:
              if (v51)
              {
                BOOL v84 = v56 != 0;
                long long v86 = *(char **)(a1 + 104);
                unint64_t v85 = *(void *)(a1 + 112);
                if ((unint64_t)v86 < v85)
                {
                  *(double *)long long v86 = v54;
                  *((double *)v86 + 1) = v53;
                  *((void *)v86 + 2) = v47;
                  *((void *)v86 + 3) = v124;
                  v86[32] = v51;
                  v86[33] = v123;
                  v86[40] = v122;
                  v86[41] = v57;
                  id v63 = v86 + 48;
                  v86[42] = v84;
                  goto LABEL_104;
                }
                double v80 = (char *)*v125;
                unint64_t v87 = 0xAAAAAAAAAAAAAAABLL * ((v86 - (unsigned char *)*v125) >> 4);
                unint64_t v88 = v87 + 1;
                if (v87 + 1 > 0x555555555555555) {
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v89 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v85 - (void)v80) >> 4);
                if (2 * v89 > v88) {
                  unint64_t v88 = 2 * v89;
                }
                if (v89 >= 0x2AAAAAAAAAAAAAALL) {
                  unint64_t v90 = 0x555555555555555;
                }
                else {
                  unint64_t v90 = v88;
                }
                if (v90)
                {
                  unint64_t v90 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v90);
                  double v80 = *(char **)(a1 + 96);
                  long long v86 = *(char **)(a1 + 104);
                }
                else
                {
                  uint64_t v91 = 0;
                }
                unint64_t v92 = v90 + 48 * v87;
                *(double *)unint64_t v92 = v54;
                *(double *)(v92 + 8) = v53;
                *(void *)(v92 + 16) = v47;
                *(void *)(v92 + 24) = v124;
                *(unsigned char *)(v92 + 32) = v51;
                *(unsigned char *)(v92 + 33) = v123;
                *(unsigned char *)(v92 + 40) = v122;
                *(unsigned char *)(v92 + 41) = v57;
                *(unsigned char *)(v92 + 42) = v84;
                unint64_t v93 = v92;
                if (v86 != v80)
                {
                  do
                  {
                    long long v94 = *((_OWORD *)v86 - 3);
                    long long v95 = *((_OWORD *)v86 - 2);
                    *(_OWORD *)(v93 - 21) = *(_OWORD *)(v86 - 21);
                    *(_OWORD *)(v93 - 48) = v94;
                    *(_OWORD *)(v93 - 32) = v95;
                    v93 -= 48;
                    v86 -= 48;
                  }
                  while (v86 != v80);
                  double v80 = (char *)*v125;
                }
                id v63 = (_OWORD *)(v92 + 48);
                *(void *)(a1 + 96) = v93;
                *(void *)(a1 + 104) = v92 + 48;
                *(void *)(a1 + 112) = v90 + 48 * v91;
                if (v80) {
LABEL_103:
                }
                  operator delete(v80);
                goto LABEL_104;
              }
              goto LABEL_105;
            }
          }
          else
          {
            double v81 = [NSNumber numberWithLongLong:v58];
            [v118 setObject:v81 forKeyedSubscript:v69];
          }
          unint64_t v82 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_canonicalSourceIDForSourceID(a1, v58);
          uint64_t v83 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_statisticsForSource(a1, v82);
          HDStatisticsRelative<HDStatisticsCumulative>::addSample((uint64_t)v83, (double *)&v127, v57 == 0);
          LOBYTE(v57) = 1;
          goto LABEL_84;
        }
        if (v48 < 0.01)
        {
          LOBYTE(v129) = 0;
          goto LABEL_59;
        }
        double v55 = v48 / v49 * *(double *)&v127;
        uint64_t v50 = *((void *)&v128 + 1);
        char v52 = BYTE1(v129);
        double v54 = *(double *)&v127 - v55;
        *(double *)&long long v127 = v55;
        *(double *)&long long v128 = v28;
        double v53 = v28;
        int v51 = v129;
        if ((_BYTE)v129) {
          goto LABEL_54;
        }
LABEL_59:
        uint8x8_t v59 = *(long long **)(a1 + 104);
        unint64_t v60 = *(void *)(a1 + 112);
        if ((unint64_t)v59 < v60)
        {
          long long v61 = *v45;
          long long v62 = v45[2];
          v59[1] = v45[1];
          v59[2] = v62;
          *uint8x8_t v59 = v61;
          id v63 = v59 + 3;
          goto LABEL_104;
        }
        unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * (((char *)v59 - (unsigned char *)*v125) >> 4);
        unint64_t v65 = v64 + 1;
        if (v64 + 1 > 0x555555555555555) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - (void)*v125) >> 4);
        if (2 * v66 > v65) {
          unint64_t v65 = 2 * v66;
        }
        if (v66 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v67 = 0x555555555555555;
        }
        else {
          unint64_t v67 = v65;
        }
        if (v67) {
          unint64_t v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v67);
        }
        else {
          uint64_t v68 = 0;
        }
        uint64_t v72 = (long long *)(v67 + 48 * v64);
        long long v73 = *v45;
        long long v74 = v45[2];
        v72[1] = v45[1];
        v72[2] = v74;
        *uint64_t v72 = v73;
        long long v76 = *(char **)(a1 + 96);
        long long v75 = *(char **)(a1 + 104);
        uint64_t v77 = v72;
        if (v75 != v76)
        {
          do
          {
            long long v78 = *((_OWORD *)v75 - 3);
            long long v79 = *((_OWORD *)v75 - 2);
            *(long long *)((char *)v77 - 21) = *(_OWORD *)(v75 - 21);
            *(v77 - 3) = v78;
            *(v77 - 2) = v79;
            v77 -= 3;
            v75 -= 48;
          }
          while (v75 != v76);
          long long v75 = (char *)*v125;
        }
        id v63 = v72 + 3;
        *(void *)(a1 + 96) = v77;
        *(void *)(a1 + 104) = v72 + 3;
        *(void *)(a1 + 112) = v67 + 48 * v68;
        if (v75)
        {
          double v80 = v75;
          goto LABEL_103;
        }
LABEL_104:
        *(void *)(a1 + 104) = v63;
LABEL_105:
        v45 += 3;
        if (v45 == v7) {
          goto LABEL_106;
        }
        continue;
      }
    }
    double v10 = *(double *)v6;
    double v9 = *(double *)(v6 + 8);
    double v11 = *(double *)(v6 + 16);
    uint64_t v12 = *(void *)(v6 + 24);
    char v13 = *(unsigned char *)(v6 + 32);
    char v14 = *(unsigned char *)(v6 + 33);
    double v15 = a2 - v9;
    if (a2 - v9 >= 0.01)
    {
      if (v11 - v9 - v15 < 0.01)
      {
        uint64_t v42 = 0;
        char v43 = 0;
        double v18 = 0.0;
        double v17 = *(double *)(v6 + 16);
        char v16 = *(unsigned char *)(v6 + 32);
        double v19 = 0.0;
        double v11 = 0.0;
        char v13 = 0;
LABEL_117:
        int v101 = *(unsigned __int8 *)(v6 + 42);
        int v102 = *(unsigned __int8 *)(v6 + 41);
        uint64_t v103 = *(void *)(a1 + 96);
        int v104 = *(unsigned __int8 *)(v6 + 40);
        *(double *)&long long v127 = v10;
        *((double *)&v127 + 1) = v9;
        *(double *)&long long v128 = v17;
        *((void *)&v128 + 1) = v12;
        LOBYTE(v129) = v16;
        BYTE1(v129) = v14;
        *(_DWORD *)((char *)&v129 + 2) = *(_DWORD *)(v103 + 34);
        HIWORD(v129) = *(_WORD *)(v103 + 38);
        *(double *)&long long v130 = v18;
        *((double *)&v130 + 1) = v19;
        *(double *)&long long v131 = v11;
        *((void *)&v131 + 1) = v42;
        LOBYTE(v132) = v13;
        HIBYTE(v132) = v43;
        HDRawQuantitySample::applyMask((uint64_t)&v127, v121);
        BOOL v105 = v104 != 0;
        BOOL v106 = v102 != 0;
        BOOL v107 = v101 != 0;
        if ((_BYTE)v129)
        {
          HDStatisticsRelative<HDStatisticsCumulative>::addSample(v119, (double *)&v127, v101 == 0);
          if (*(unsigned char *)(a1 + 25))
          {
            unint64_t v108 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_canonicalSourceIDForSourceID(a1, *((unint64_t *)&v128 + 1));
            uint64_t v109 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_statisticsForSource(a1, v108);
            HDStatisticsRelative<HDStatisticsCumulative>::addSample((uint64_t)v109, (double *)&v127, v102 == 0);
          }
          BOOL v105 = 1;
          BOOL v106 = 1;
          BOOL v107 = 1;
        }
        if ((_BYTE)v132)
        {
          LOWORD(v126) = v132;
          long long v110 = v131;
          long long v111 = (char *)*v125;
          *(_OWORD *)long long v111 = v130;
          *((_OWORD *)v111 + 1) = v110;
          *((void *)v111 + 4) = v126;
          v111[40] = v105;
          v111[41] = v106;
          v111[42] = v107;
        }
        else
        {
          *(void *)(a1 + 104) = *(void *)(a1 + 96);
        }
        goto LABEL_124;
      }
      double v100 = v10 * (v15 / (v11 - v9));
      double v17 = a2;
      char v16 = *(unsigned char *)(v6 + 32);
      double v18 = v10 - v100;
      double v10 = v100;
      double v19 = a2;
    }
    else
    {
      char v16 = 0;
      double v17 = *(double *)(v6 + 16);
      double v18 = *(double *)v6;
      double v19 = *(double *)(v6 + 8);
    }
    uint64_t v42 = *(void *)(v6 + 24);
    char v43 = *(unsigned char *)(v6 + 33);
    goto LABEL_117;
  }
}

void sub_1BD065410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  _Unwind_Resume(a1);
}

uint64_t HDStatisticsRelative<HDStatisticsCumulative>::addSample(uint64_t result, double *a2, int a3)
{
  double v3 = *a2;
  int v4 = 2 * (*a2 != -1.79769313e308);
  if (*a2 == 1.79769313e308) {
    int v4 = 1;
  }
  if (v4)
  {
    if (v4 == 1)
    {
      if (*(_DWORD *)result) {
        return result;
      }
      int v6 = 1;
    }
    else
    {
      if (v4 != 2) {
        return result;
      }
      if (*(_DWORD *)result == 2)
      {
        *(double *)(result + 8) = v3 + *(double *)(result + 8);
        uint64_t v5 = *(void *)(result + 16) + 1;
LABEL_16:
        *(void *)(result + 16) = v5;
        return result;
      }
      int v6 = 2;
    }
    *(_DWORD *)BOOL result = v6;
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = *(_WORD *)(result + 96);
    long long v7 = *(_OWORD *)(result + 64);
    *(_OWORD *)(result + 40) = *(_OWORD *)(result + 80);
    *(_OWORD *)(result + 24) = v7;
    double v3 = *a2;
    double v8 = 0.0;
  }
  else
  {
    if (*(_DWORD *)result || *(void *)(result + 16)) {
      return result;
    }
    double v8 = *(double *)(result + 8);
  }
  *(double *)(result + 8) = v3 + v8;
  if (a3)
  {
    uint64_t v5 = 1;
    goto LABEL_16;
  }
  return result;
}

uint64_t **HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = a2;
  uint64_t v5 = *(void **)(a1 + 232);
  double v3 = (uint64_t **)(a1 + 232);
  int v4 = v5;
  if (!v5) {
    goto LABEL_11;
  }
  int v6 = v3;
  do
  {
    uint64_t v7 = v4[4];
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      double v9 = v4;
    }
    else {
      double v9 = v4 + 1;
    }
    if (!v8) {
      int v6 = (uint64_t **)v4;
    }
    int v4 = (void *)*v9;
  }
  while (*v9);
  if (v6 == v3 || (uint64_t)v6[4] > a2)
  {
LABEL_11:
    double v10 = v3 - 1;
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCumulative>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCumulative>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCumulative>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v3 - 1, a2, &v12);
    int v6 = std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCumulative>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCumulative>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCumulative>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v10, a2, &v12);
  }
  return v6 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    uint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((void *)(a1 + 312), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_bundleIdentifierForSourceID(a1, a2);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      id v10 = v6;
      uint64_t v7 = (void *)(a1 + 352);
      BOOL v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        double v11 = &v10;
        *((void *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        id v6 = v10;
      }
    }
  }
  return a2;
}

void sub_1BD0656B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  int v4 = (id *)(a1 + 88);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    id v6 = (void *)(a1 + 392);
    uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
    if (v7)
    {
      id v8 = (id)v7[3];
    }
    else
    {
      id v9 = objc_loadWeakRetained(v4);
      id v8 = [v9 bundleIdentifierForSourceID:a2];

      if (v8)
      {
        id v10 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
        objc_storeStrong(v10 + 3, v8);
      }
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1BD06579C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCumulative>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCumulative>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCumulative>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, void *a3)
{
  id v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        uint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        id v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        id v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    id v9 = (char *)operator new(0x90uLL);
    *((void *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    *((void *)v9 + 17) = 0;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v12 = a2 - 3;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 4);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v103 = *((void *)a2 - 3);
                uint64_t v104 = *(void *)(v13 + 24);
                if (v103 == v104) {
                  return;
                }
                BOOL v105 = *(char **)(*(void *)a3 + 288);
                BOOL v106 = *(char **)(*(void *)a3 + 296);
                BOOL v107 = v105;
                unint64_t v108 = v105;
                if (v105 == v106) {
                  goto LABEL_171;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>((long long *)v13, (long long *)(v13 + 48), a2 - 3, a3);
                return;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, (uint64_t)(a2 - 3), a3);
                return;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, v13 + 144, (uint64_t)(a2 - 3), a3);
                return;
              default:
                JUMPOUT(0);
            }
            do
            {
              if (*(void *)v108 == v103) {
                goto LABEL_168;
              }
              v108 += 8;
            }
            while (v108 != v106);
            unint64_t v108 = *(char **)(*(void *)a3 + 296);
LABEL_168:
            while (*(void *)v107 != v104)
            {
              v107 += 8;
              if (v107 == v106)
              {
                BOOL v107 = *(char **)(*(void *)a3 + 296);
                break;
              }
            }
LABEL_171:
            if (v108 - v105 < v107 - v105)
            {
              *(_OWORD *)v226 = *(_OWORD *)(v13 + 16);
              *(_OWORD *)&v226[16] = *(_OWORD *)(v13 + 32);
              long long v218 = *(_OWORD *)v13;
              long long v109 = *v12;
              long long v110 = *(a2 - 2);
              *(_OWORD *)(v13 + 27) = *(long long *)((char *)a2 - 21);
              *(_OWORD *)unint64_t v13 = v109;
              *(_OWORD *)(v13 + 16) = v110;
              *(long long *)((char *)a2 - 21) = *(_OWORD *)&v226[11];
              long long *v12 = v218;
              *(a2 - 2) = *(_OWORD *)v226;
            }
            return;
          }
          if (v14 <= 1151)
          {
            long long v111 = (long long *)(v13 + 48);
            BOOL v113 = (long long *)v13 == a2 || v111 == a2;
            if (a5)
            {
              if (!v113)
              {
                unint64_t v114 = v13;
                do
                {
                  unint64_t v115 = v114;
                  unint64_t v114 = (unint64_t)v111;
                  uint64_t v116 = *(void *)(v115 + 72);
                  uint64_t v117 = *(void *)(v115 + 24);
                  if (v116 != v117)
                  {
                    id v118 = *(char **)(*(void *)a3 + 288);
                    uint64_t v119 = *(char **)(*(void *)a3 + 296);
                    uint64_t v120 = v118;
                    long long v121 = v118;
                    if (v118 != v119)
                    {
                      do
                      {
                        if (*(void *)v121 == v116) {
                          goto LABEL_196;
                        }
                        v121 += 8;
                      }
                      while (v121 != v119);
                      long long v121 = *(char **)(*(void *)a3 + 296);
LABEL_196:
                      while (*(void *)v120 != v117)
                      {
                        v120 += 8;
                        if (v120 == v119)
                        {
                          uint64_t v120 = *(char **)(*(void *)a3 + 296);
                          break;
                        }
                      }
                    }
                    if (v121 - v118 < v120 - v118)
                    {
                      uint64_t v227 = *(void *)(v114 + 16);
                      long long v219 = *(_OWORD *)v114;
                      long long v236 = *(_OWORD *)(v115 + 80);
                      unint64_t v122 = v114;
                      while (1)
                      {
                        long long v123 = *(_OWORD *)(v115 + 16);
                        *(_OWORD *)unint64_t v122 = *(_OWORD *)v115;
                        *(_OWORD *)(v122 + 16) = v123;
                        *(_OWORD *)(v122 + 27) = *(_OWORD *)(v115 + 27);
                        if (v115 == v13) {
                          break;
                        }
                        unint64_t v122 = v115;
                        uint64_t v124 = *(void *)(v115 - 24);
                        if (v116 != v124)
                        {
                          uint64_t v125 = *(char **)(*(void *)a3 + 288);
                          uint64_t v126 = *(char **)(*(void *)a3 + 296);
                          long long v127 = v125;
                          long long v128 = v125;
                          if (v125 != v126)
                          {
                            do
                            {
                              if (*(void *)v128 == v116) {
                                goto LABEL_208;
                              }
                              v128 += 8;
                            }
                            while (v128 != v126);
                            long long v128 = *(char **)(*(void *)a3 + 296);
LABEL_208:
                            while (*(void *)v127 != v124)
                            {
                              v127 += 8;
                              if (v127 == v126)
                              {
                                long long v127 = *(char **)(*(void *)a3 + 296);
                                break;
                              }
                            }
                          }
                          unint64_t v115 = v122 - 48;
                          if (v128 - v125 < v127 - v125) {
                            continue;
                          }
                        }
                        goto LABEL_212;
                      }
                      unint64_t v122 = v13;
LABEL_212:
                      *(_OWORD *)unint64_t v122 = v219;
                      *(void *)(v122 + 16) = v227;
                      *(void *)(v122 + 24) = v116;
                      *(void *)(v122 + 32) = v236;
                      *(_DWORD *)(v122 + 39) = *(_DWORD *)((char *)&v236 + 7);
                    }
                  }
                  long long v111 = (long long *)(v114 + 48);
                }
                while ((long long *)(v114 + 48) != a2);
              }
            }
            else if (!v113)
            {
              do
              {
                unint64_t v201 = a1;
                a1 = (unint64_t)v111;
                uint64_t v202 = *(void *)(v201 + 72);
                uint64_t v203 = *(void *)(v201 + 24);
                if (v202 != v203)
                {
                  v204 = *(char **)(*(void *)a3 + 288);
                  v205 = *(char **)(*(void *)a3 + 296);
                  v206 = v204;
                  v207 = v204;
                  if (v204 != v205)
                  {
                    do
                    {
                      if (*(void *)v207 == v202) {
                        goto LABEL_312;
                      }
                      v207 += 8;
                    }
                    while (v207 != v205);
                    v207 = *(char **)(*(void *)a3 + 296);
LABEL_312:
                    while (*(void *)v206 != v203)
                    {
                      v206 += 8;
                      if (v206 == v205)
                      {
                        v206 = *(char **)(*(void *)a3 + 296);
                        break;
                      }
                    }
                  }
                  if (v207 - v204 < v206 - v204)
                  {
                    uint64_t v230 = *(void *)(a1 + 16);
                    long long v222 = *(_OWORD *)a1;
                    long long v239 = *(_OWORD *)(v201 + 80);
                    unint64_t v208 = a1;
                    do
                    {
                      v209 = (_OWORD *)v208;
                      unint64_t v208 = v201;
                      long long v210 = *(_OWORD *)(v201 + 16);
                      _OWORD *v209 = *(_OWORD *)v201;
                      v209[1] = v210;
                      *(_OWORD *)((char *)v209 + 27) = *(_OWORD *)(v201 + 27);
                      uint64_t v211 = *(void *)(v201 - 24);
                      if (v202 == v211) {
                        break;
                      }
                      v212 = *(char **)(*(void *)a3 + 288);
                      v213 = *(char **)(*(void *)a3 + 296);
                      v214 = v212;
                      v215 = v212;
                      if (v212 != v213)
                      {
                        do
                        {
                          if (*(void *)v215 == v202) {
                            goto LABEL_322;
                          }
                          v215 += 8;
                        }
                        while (v215 != v213);
                        v215 = *(char **)(*(void *)a3 + 296);
LABEL_322:
                        while (*(void *)v214 != v211)
                        {
                          v214 += 8;
                          if (v214 == v213)
                          {
                            v214 = *(char **)(*(void *)a3 + 296);
                            break;
                          }
                        }
                      }
                      unint64_t v201 = v208 - 48;
                    }
                    while (v215 - v212 < v214 - v212);
                    *(_OWORD *)unint64_t v208 = v222;
                    *(void *)(v208 + 16) = v230;
                    *(void *)(v208 + 24) = v202;
                    *(void *)(v208 + 32) = v239;
                    *(_DWORD *)(v208 + 39) = *(_DWORD *)((char *)&v239 + 7);
                  }
                }
                long long v111 = (long long *)(a1 + 48);
              }
              while ((long long *)(a1 + 48) != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((long long *)v13 != a2)
            {
              int64_t v129 = (v15 - 2) >> 1;
              int64_t v130 = v129;
              do
              {
                int64_t v131 = v130;
                if (v129 >= v130)
                {
                  uint64_t v132 = (2 * v130) | 1;
                  unint64_t v133 = v13 + 48 * v132;
                  if (2 * v131 + 2 < (uint64_t)v15)
                  {
                    uint64_t v134 = *(void *)(v133 + 24);
                    uint64_t v135 = *(void *)(v133 + 72);
                    if (v134 != v135)
                    {
                      v137 = *(char **)(*(void *)a3 + 288);
                      v136 = *(char **)(*(void *)a3 + 296);
                      v138 = v137;
                      v139 = v137;
                      if (v137 != v136)
                      {
                        do
                        {
                          if (*(void *)v139 == v134) {
                            goto LABEL_224;
                          }
                          v139 += 8;
                        }
                        while (v139 != v136);
                        v139 = *(char **)(*(void *)a3 + 296);
LABEL_224:
                        while (*(void *)v138 != v135)
                        {
                          v138 += 8;
                          if (v138 == v136)
                          {
                            v138 = *(char **)(*(void *)a3 + 296);
                            break;
                          }
                        }
                      }
                      v133 += 48 * (v139 - v137 < v138 - v137);
                      if (v139 - v137 < v138 - v137) {
                        uint64_t v132 = 2 * v131 + 2;
                      }
                    }
                  }
                  unint64_t v140 = v13 + 48 * v131;
                  uint64_t v141 = *(void *)(v133 + 24);
                  uint64_t v142 = *(void *)(v140 + 24);
                  if (v141 == v142) {
                    goto LABEL_238;
                  }
                  v144 = *(char **)(*(void *)a3 + 288);
                  v143 = *(char **)(*(void *)a3 + 296);
                  v145 = v144;
                  v146 = v144;
                  if (v144 != v143)
                  {
                    do
                    {
                      if (*(void *)v146 == v141) {
                        goto LABEL_234;
                      }
                      v146 += 8;
                    }
                    while (v146 != v143);
                    v146 = *(char **)(*(void *)a3 + 296);
LABEL_234:
                    while (*(void *)v145 != v142)
                    {
                      v145 += 8;
                      if (v145 == v143)
                      {
                        v145 = *(char **)(*(void *)a3 + 296);
                        break;
                      }
                    }
                  }
                  if (v146 - v144 >= v145 - v144)
                  {
LABEL_238:
                    uint64_t v228 = *(void *)(v140 + 16);
                    long long v220 = *(_OWORD *)v140;
                    long long v237 = *(_OWORD *)(v140 + 32);
                    long long v147 = *(_OWORD *)v133;
                    long long v148 = *(_OWORD *)(v133 + 16);
                    *(_OWORD *)(v140 + 27) = *(_OWORD *)(v133 + 27);
                    *(_OWORD *)unint64_t v140 = v147;
                    *(_OWORD *)(v140 + 16) = v148;
                    if (v129 >= v132)
                    {
                      while (1)
                      {
                        uint64_t v150 = 2 * v132;
                        uint64_t v132 = (2 * v132) | 1;
                        unint64_t v149 = v13 + 48 * v132;
                        uint64_t v151 = v150 + 2;
                        if (v151 < (uint64_t)v15)
                        {
                          uint64_t v152 = *(void *)(v149 + 24);
                          uint64_t v153 = *(void *)(v149 + 72);
                          if (v152 != v153)
                          {
                            v154 = *(char **)(*(void *)a3 + 288);
                            v155 = *(char **)(*(void *)a3 + 296);
                            v156 = v154;
                            v157 = v154;
                            if (v154 != v155)
                            {
                              do
                              {
                                if (*(void *)v157 == v152) {
                                  goto LABEL_246;
                                }
                                v157 += 8;
                              }
                              while (v157 != v155);
                              v157 = *(char **)(*(void *)a3 + 296);
LABEL_246:
                              while (*(void *)v156 != v153)
                              {
                                v156 += 8;
                                if (v156 == v155)
                                {
                                  v156 = *(char **)(*(void *)a3 + 296);
                                  break;
                                }
                              }
                            }
                            v149 += 48 * (v157 - v154 < v156 - v154);
                            if (v157 - v154 < v156 - v154) {
                              uint64_t v132 = v151;
                            }
                          }
                        }
                        uint64_t v158 = *(void *)(v149 + 24);
                        if (v158 != v142)
                        {
                          v160 = *(char **)(*(void *)a3 + 288);
                          v159 = *(char **)(*(void *)a3 + 296);
                          v161 = v160;
                          v162 = v160;
                          if (v160 != v159)
                          {
                            do
                            {
                              if (*(void *)v162 == v158) {
                                goto LABEL_256;
                              }
                              v162 += 8;
                            }
                            while (v162 != v159);
                            v162 = *(char **)(*(void *)a3 + 296);
LABEL_256:
                            while (*(void *)v161 != v142)
                            {
                              v161 += 8;
                              if (v161 == v159)
                              {
                                v161 = *(char **)(*(void *)a3 + 296);
                                break;
                              }
                            }
                          }
                          if (v162 - v160 < v161 - v160) {
                            break;
                          }
                        }
                        long long v163 = *(_OWORD *)v149;
                        long long v164 = *(_OWORD *)(v149 + 16);
                        *(_OWORD *)(v133 + 27) = *(_OWORD *)(v149 + 27);
                        *(_OWORD *)unint64_t v133 = v163;
                        *(_OWORD *)(v133 + 16) = v164;
                        unint64_t v133 = v149;
                        if (v129 < v132) {
                          goto LABEL_261;
                        }
                      }
                    }
                    unint64_t v149 = v133;
LABEL_261:
                    *(_OWORD *)unint64_t v149 = v220;
                    *(void *)(v149 + 16) = v228;
                    *(void *)(v149 + 24) = v142;
                    *(void *)(v149 + 32) = v237;
                    *(_DWORD *)(v149 + 39) = *(_DWORD *)((char *)&v237 + 7);
                  }
                }
                int64_t v130 = v131 - 1;
              }
              while (v131);
              int64_t v165 = v14 / 0x30uLL;
              do
              {
                uint64_t v166 = 0;
                *(_OWORD *)v229 = *(_OWORD *)(v13 + 16);
                *(_OWORD *)&v229[16] = *(_OWORD *)(v13 + 32);
                long long v221 = *(_OWORD *)v13;
                uint64_t v167 = v165 - 2;
                if (v165 < 2) {
                  uint64_t v167 = v165 - 1;
                }
                uint64_t v168 = v167 >> 1;
                unint64_t v169 = v13;
                do
                {
                  v170 = (_OWORD *)v169;
                  v169 += 48 * v166 + 48;
                  uint64_t v171 = 2 * v166;
                  uint64_t v166 = (2 * v166) | 1;
                  uint64_t v172 = v171 + 2;
                  if (v171 + 2 < v165)
                  {
                    uint64_t v173 = *(void *)(v169 + 24);
                    uint64_t v174 = *(void *)(v169 + 72);
                    if (v173 != v174)
                    {
                      v176 = *(char **)(*(void *)a3 + 288);
                      v175 = *(char **)(*(void *)a3 + 296);
                      v177 = v176;
                      v178 = v176;
                      if (v176 != v175)
                      {
                        do
                        {
                          if (*(void *)v178 == v173) {
                            goto LABEL_273;
                          }
                          v178 += 8;
                        }
                        while (v178 != v175);
                        v178 = *(char **)(*(void *)a3 + 296);
LABEL_273:
                        while (*(void *)v177 != v174)
                        {
                          v177 += 8;
                          if (v177 == v175)
                          {
                            v177 = *(char **)(*(void *)a3 + 296);
                            break;
                          }
                        }
                      }
                      v169 += 48 * (v178 - v176 < v177 - v176);
                      if (v178 - v176 < v177 - v176) {
                        uint64_t v166 = v172;
                      }
                    }
                  }
                  long long v179 = *(_OWORD *)v169;
                  long long v180 = *(_OWORD *)(v169 + 16);
                  *(_OWORD *)((char *)v170 + 27) = *(_OWORD *)(v169 + 27);
                  _OWORD *v170 = v179;
                  v170[1] = v180;
                }
                while (v166 <= v168);
                a2 -= 3;
                if ((long long *)v169 == a2)
                {
                  *(_OWORD *)(v169 + 27) = *(_OWORD *)&v229[11];
                  *(_OWORD *)unint64_t v169 = v221;
                  *(_OWORD *)(v169 + 16) = *(_OWORD *)v229;
                }
                else
                {
                  long long v181 = *a2;
                  long long v182 = a2[1];
                  *(_OWORD *)(v169 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v169 = v181;
                  *(_OWORD *)(v169 + 16) = v182;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v229[11];
                  *a2 = v221;
                  a2[1] = *(_OWORD *)v229;
                  uint64_t v183 = v169 - v13 + 48;
                  if (v183 >= 49)
                  {
                    unint64_t v184 = (v183 / 0x30uLL - 2) >> 1;
                    unint64_t v185 = v13 + 48 * v184;
                    uint64_t v186 = *(void *)(v185 + 24);
                    uint64_t v187 = *(void *)(v169 + 24);
                    if (v186 != v187)
                    {
                      v189 = *(char **)(*(void *)a3 + 288);
                      v188 = *(char **)(*(void *)a3 + 296);
                      v190 = v189;
                      v191 = v189;
                      if (v189 != v188)
                      {
                        do
                        {
                          if (*(void *)v191 == v186) {
                            goto LABEL_286;
                          }
                          v191 += 8;
                        }
                        while (v191 != v188);
                        v191 = *(char **)(*(void *)a3 + 296);
LABEL_286:
                        while (*(void *)v190 != v187)
                        {
                          v190 += 8;
                          if (v190 == v188)
                          {
                            v190 = *(char **)(*(void *)a3 + 296);
                            break;
                          }
                        }
                      }
                      if (v191 - v189 < v190 - v189)
                      {
                        uint64_t v242 = *(void *)(v169 + 16);
                        long long v238 = *(_OWORD *)v169;
                        long long v233 = *(_OWORD *)(v169 + 32);
                        do
                        {
                          v192 = (_OWORD *)v169;
                          unint64_t v169 = v185;
                          long long v193 = *(_OWORD *)v185;
                          long long v194 = *(_OWORD *)(v185 + 16);
                          *(_OWORD *)((char *)v192 + 27) = *(_OWORD *)(v185 + 27);
                          _OWORD *v192 = v193;
                          v192[1] = v194;
                          if (!v184) {
                            break;
                          }
                          unint64_t v184 = (v184 - 1) >> 1;
                          unint64_t v185 = v13 + 48 * v184;
                          uint64_t v195 = *(void *)(v185 + 24);
                          if (v195 == v187) {
                            break;
                          }
                          v197 = *(char **)(*(void *)a3 + 288);
                          v196 = *(char **)(*(void *)a3 + 296);
                          v198 = v197;
                          v199 = v197;
                          if (v197 != v196)
                          {
                            do
                            {
                              if (*(void *)v199 == v195) {
                                goto LABEL_297;
                              }
                              v199 += 8;
                            }
                            while (v199 != v196);
                            v199 = *(char **)(*(void *)a3 + 296);
LABEL_297:
                            while (*(void *)v198 != v187)
                            {
                              v198 += 8;
                              if (v198 == v196)
                              {
                                v198 = *(char **)(*(void *)a3 + 296);
                                break;
                              }
                            }
                          }
                        }
                        while (v199 - v197 < v198 - v197);
                        *(_OWORD *)unint64_t v169 = v238;
                        *(void *)(v169 + 16) = v242;
                        *(void *)(v169 + 24) = v187;
                        *(void *)(v169 + 32) = v233;
                        *(_DWORD *)(v169 + 39) = *(_DWORD *)((char *)&v233 + 7);
                      }
                    }
                  }
                }
              }
              while (v165-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          double v17 = (long long *)(v13 + 48 * (v15 >> 1));
          if ((unint64_t)v14 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v15 >> 1)), a2 - 3, a3);
            uint64_t v18 = 3 * v16;
            double v19 = (long long *)(a1 + 48 * v16 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>((long long *)(a1 + 48), v19, a2 - 6, a3);
            double v20 = (long long *)(a1 + 48 + 16 * v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>((long long *)(a1 + 96), v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>(v19, v17, v20, a3);
            *(_OWORD *)v223 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v223[16] = *(_OWORD *)(a1 + 32);
            long long v216 = *(_OWORD *)a1;
            long long v21 = *(long long *)((char *)v17 + 27);
            long long v22 = v17[1];
            *(_OWORD *)a1 = *v17;
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(a1 + 27) = v21;
            *(long long *)((char *)v17 + 27) = *(_OWORD *)&v223[11];
            long long *v17 = v216;
            v17[1] = *(_OWORD *)v223;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>((long long *)(a1 + 48 * (v15 >> 1)), (long long *)a1, a2 - 3, a3);
          }
          --a4;
          if (a5)
          {
            uint64_t v23 = *(void *)(a1 + 24);
            uint64_t v24 = *(void *)a3;
            break;
          }
          uint64_t v25 = *(void *)(a1 - 24);
          uint64_t v23 = *(void *)(a1 + 24);
          if (v25 != v23)
          {
            uint64_t v24 = *(void *)a3;
            double v26 = *(char **)(*(void *)a3 + 288);
            double v27 = *(char **)(*(void *)a3 + 296);
            double v28 = v26;
            double v29 = v26;
            if (v26 != v27)
            {
              do
              {
                if (*(void *)v29 == v25) {
                  goto LABEL_16;
                }
                v29 += 8;
              }
              while (v29 != v27);
              double v29 = *(char **)(*(void *)a3 + 296);
LABEL_16:
              while (*(void *)v28 != v23)
              {
                v28 += 8;
                if (v28 == v27)
                {
                  double v28 = *(char **)(*(void *)a3 + 296);
                  break;
                }
              }
            }
            if (v29 - v26 < v28 - v26) {
              break;
            }
          }
          uint64_t v241 = *(void *)(a1 + 16);
          long long v232 = *(_OWORD *)(a1 + 32);
          long long v235 = *(_OWORD *)a1;
          uint64_t v67 = *((void *)a2 - 3);
          if (v23 == v67) {
            goto LABEL_107;
          }
          uint64_t v68 = *(char **)(*(void *)a3 + 288);
          long long v69 = *(char **)(*(void *)a3 + 296);
          if (v68 == v69)
          {
            char v71 = *(char **)(*(void *)a3 + 288);
            long long v70 = v71;
          }
          else
          {
            long long v70 = *(char **)(*(void *)a3 + 288);
            while (*(void *)v70 != v23)
            {
              v70 += 8;
              if (v70 == v69)
              {
                long long v70 = *(char **)(*(void *)a3 + 296);
                break;
              }
            }
            char v71 = *(char **)(*(void *)a3 + 288);
            while (*(void *)v71 != v67)
            {
              v71 += 8;
              if (v71 == v69)
              {
                char v71 = *(char **)(*(void *)a3 + 296);
                break;
              }
            }
          }
          if (v70 - v68 >= v71 - v68)
          {
LABEL_107:
            unint64_t v13 = a1 + 48;
            if (a1 + 48 < (unint64_t)a2)
            {
              uint64_t v75 = *(void *)a3;
              unint64_t v76 = a1;
              do
              {
                uint64_t v77 = *(void *)(v76 + 72);
                unint64_t v76 = v13;
                if (v23 != v77)
                {
                  long long v78 = *(char **)(v75 + 288);
                  long long v79 = *(char **)(v75 + 296);
                  double v80 = v78;
                  double v81 = v78;
                  if (v78 != v79)
                  {
                    do
                    {
                      if (*(void *)v81 == v23) {
                        goto LABEL_114;
                      }
                      v81 += 8;
                    }
                    while (v81 != v79);
                    double v81 = *(char **)(v75 + 296);
LABEL_114:
                    while (*(void *)v80 != v77)
                    {
                      v80 += 8;
                      if (v80 == v79)
                      {
                        double v80 = *(char **)(v75 + 296);
                        break;
                      }
                    }
                  }
                  if (v81 - v78 < v80 - v78) {
                    break;
                  }
                }
                v13 += 48;
              }
              while (v76 + 48 < (unint64_t)a2);
            }
          }
          else
          {
            unint64_t v13 = a1;
            do
            {
              do
              {
                uint64_t v72 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v72);
              if (v68 == v69)
              {
                long long v74 = *(char **)(*(void *)a3 + 288);
                long long v73 = v74;
              }
              else
              {
                long long v73 = *(char **)(*(void *)a3 + 288);
                while (*(void *)v73 != v23)
                {
                  v73 += 8;
                  if (v73 == v69)
                  {
                    long long v73 = *(char **)(*(void *)a3 + 296);
                    break;
                  }
                }
                long long v74 = *(char **)(*(void *)a3 + 288);
                while (*(void *)v74 != v72)
                {
                  v74 += 8;
                  if (v74 == v69)
                  {
                    long long v74 = *(char **)(*(void *)a3 + 296);
                    break;
                  }
                }
              }
            }
            while (v73 - v68 >= v74 - v68);
          }
          unint64_t v82 = a2;
          if (v13 < (unint64_t)a2)
          {
            uint64_t v83 = *(void *)a3;
            unint64_t v82 = a2;
            do
            {
              uint64_t v84 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v84) {
                break;
              }
              unint64_t v85 = *(char **)(v83 + 288);
              long long v86 = *(char **)(v83 + 296);
              unint64_t v87 = v85;
              unint64_t v88 = v85;
              if (v85 != v86)
              {
                do
                {
                  if (*(void *)v88 == v23) {
                    goto LABEL_126;
                  }
                  v88 += 8;
                }
                while (v88 != v86);
                unint64_t v88 = *(char **)(v83 + 296);
LABEL_126:
                while (*(void *)v87 != v84)
                {
                  v87 += 8;
                  if (v87 == v86)
                  {
                    unint64_t v87 = *(char **)(v83 + 296);
                    break;
                  }
                }
              }
            }
            while (v88 - v85 < v87 - v85);
          }
          while (v13 < (unint64_t)v82)
          {
            *(_OWORD *)v225 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v225[16] = *(_OWORD *)(v13 + 32);
            long long v217 = *(_OWORD *)v13;
            long long v89 = *v82;
            long long v90 = v82[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v82 + 27);
            *(_OWORD *)unint64_t v13 = v89;
            *(_OWORD *)(v13 + 16) = v90;
            *(long long *)((char *)v82 + 27) = *(_OWORD *)&v225[11];
            *unint64_t v82 = v217;
            v82[1] = *(_OWORD *)v225;
            uint64_t v91 = *(void *)a3;
            do
            {
              do
              {
                uint64_t v92 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v92);
              unint64_t v93 = *(char **)(v91 + 288);
              long long v94 = *(char **)(v91 + 296);
              if (v93 == v94)
              {
                id v96 = *(char **)(v91 + 288);
                long long v95 = v96;
              }
              else
              {
                long long v95 = *(char **)(v91 + 288);
                while (*(void *)v95 != v23)
                {
                  v95 += 8;
                  if (v95 == v94)
                  {
                    long long v95 = *(char **)(v91 + 296);
                    break;
                  }
                }
                id v96 = *(char **)(v91 + 288);
                while (*(void *)v96 != v92)
                {
                  v96 += 8;
                  if (v96 == v94)
                  {
                    id v96 = *(char **)(v91 + 296);
                    break;
                  }
                }
              }
            }
            while (v95 - v93 >= v96 - v93);
            do
            {
              uint64_t v97 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v97) {
                break;
              }
              if (v93 == v94)
              {
                BOOL v99 = v93;
                char v98 = v93;
              }
              else
              {
                char v98 = v93;
                while (*(void *)v98 != v23)
                {
                  v98 += 8;
                  if (v98 == v94)
                  {
                    char v98 = v94;
                    break;
                  }
                }
                BOOL v99 = v93;
                while (*(void *)v99 != v97)
                {
                  v99 += 8;
                  if (v99 == v94)
                  {
                    BOOL v99 = v94;
                    break;
                  }
                }
              }
            }
            while (v98 - v93 < v99 - v93);
          }
          double v100 = (long long *)(v13 - 48);
          BOOL v5 = v13 - 48 >= a1;
          BOOL v6 = v13 - 48 == a1;
          if (v13 - 48 != a1)
          {
            long long v101 = *v100;
            long long v102 = *(_OWORD *)(v13 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
            *(_OWORD *)a1 = v101;
            *(_OWORD *)(a1 + 16) = v102;
          }
          a5 = 0;
          *double v100 = v235;
          *(void *)(v13 - 32) = v241;
          *(void *)(v13 - 24) = v23;
          *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v232 + 7);
          *(void *)(v13 - 16) = v232;
        }
        uint64_t v240 = *(void *)(a1 + 16);
        long long v231 = *(_OWORD *)(a1 + 32);
        long long v234 = *(_OWORD *)a1;
        unint64_t v30 = a1;
        do
        {
          unint64_t v31 = v30;
          v30 += 48;
          uint64_t v32 = *(void *)(v31 + 72);
          if (v32 == v23) {
            break;
          }
          uint64_t v33 = *(char **)(v24 + 288);
          long long v34 = *(char **)(v24 + 296);
          long long v35 = v33;
          unint64_t v36 = v33;
          if (v33 != v34)
          {
            do
            {
              if (*(void *)v36 == v32) {
                goto LABEL_26;
              }
              v36 += 8;
            }
            while (v36 != v34);
            unint64_t v36 = *(char **)(v24 + 296);
LABEL_26:
            while (*(void *)v35 != v23)
            {
              v35 += 8;
              if (v35 == v34)
              {
                long long v35 = *(char **)(v24 + 296);
                break;
              }
            }
          }
        }
        while (v36 - v33 < v35 - v33);
        long long v37 = a2;
        if (v31 == a1)
        {
          long long v37 = a2;
          if (v30 < (unint64_t)a2)
          {
            long long v37 = a2;
            do
            {
              uint64_t v43 = *((void *)v37 - 3);
              v37 -= 3;
              if (v43 != v23)
              {
                char v44 = *(char **)(v24 + 288);
                uint64_t v45 = *(char **)(v24 + 296);
                long long v46 = v44;
                uint64_t v47 = v44;
                if (v44 != v45)
                {
                  do
                  {
                    if (*(void *)v47 == v43) {
                      goto LABEL_48;
                    }
                    v47 += 8;
                  }
                  while (v47 != v45);
                  uint64_t v47 = *(char **)(v24 + 296);
LABEL_48:
                  while (*(void *)v46 != v23)
                  {
                    v46 += 8;
                    if (v46 == v45)
                    {
                      long long v46 = *(char **)(v24 + 296);
                      break;
                    }
                  }
                }
                if (v47 - v44 < v46 - v44) {
                  break;
                }
              }
            }
            while (v30 < (unint64_t)v37);
          }
        }
        else
        {
          do
          {
            do
            {
              uint64_t v38 = *((void *)v37 - 3);
              v37 -= 3;
            }
            while (v38 == v23);
            unint64_t v39 = *(char **)(v24 + 288);
            unint64_t v40 = *(char **)(v24 + 296);
            uint64_t v41 = v39;
            uint64_t v42 = v39;
            if (v39 != v40)
            {
              do
              {
                if (*(void *)v42 == v38) {
                  goto LABEL_36;
                }
                v42 += 8;
              }
              while (v42 != v40);
              uint64_t v42 = *(char **)(v24 + 296);
LABEL_36:
              while (*(void *)v41 != v23)
              {
                v41 += 8;
                if (v41 == v40)
                {
                  uint64_t v41 = *(char **)(v24 + 296);
                  break;
                }
              }
            }
          }
          while (v42 - v39 >= v41 - v39);
        }
        unint64_t v13 = v30;
        if (v30 < (unint64_t)v37)
        {
          double v48 = v37;
          do
          {
            *(_OWORD *)v224 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v224[16] = *(_OWORD *)(v13 + 32);
            long long v49 = *(_OWORD *)v13;
            long long v51 = *v48;
            long long v50 = v48[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v48 + 27);
            *(_OWORD *)unint64_t v13 = v51;
            *(_OWORD *)(v13 + 16) = v50;
            *(long long *)((char *)v48 + 27) = *(_OWORD *)&v224[11];
            long long *v48 = v49;
            v48[1] = *(_OWORD *)v224;
            uint64_t v52 = *(void *)a3;
            do
            {
              uint64_t v53 = *(void *)(v13 + 72);
              v13 += 48;
              if (v53 == v23) {
                break;
              }
              double v54 = *(char **)(v52 + 288);
              double v55 = *(char **)(v52 + 296);
              int v56 = v54;
              int v57 = v54;
              if (v54 != v55)
              {
                do
                {
                  if (*(void *)v57 == v53) {
                    goto LABEL_61;
                  }
                  v57 += 8;
                }
                while (v57 != v55);
                int v57 = *(char **)(v52 + 296);
LABEL_61:
                while (*(void *)v56 != v23)
                {
                  v56 += 8;
                  if (v56 == v55)
                  {
                    int v56 = *(char **)(v52 + 296);
                    break;
                  }
                }
              }
            }
            while (v57 - v54 < v56 - v54);
            do
            {
              do
              {
                uint64_t v58 = *((void *)v48 - 3);
                v48 -= 3;
              }
              while (v58 == v23);
              uint8x8_t v59 = *(char **)(v52 + 288);
              unint64_t v60 = *(char **)(v52 + 296);
              long long v61 = v59;
              long long v62 = v59;
              if (v59 != v60)
              {
                do
                {
                  if (*(void *)v62 == v58) {
                    goto LABEL_70;
                  }
                  v62 += 8;
                }
                while (v62 != v60);
                long long v62 = *(char **)(v52 + 296);
LABEL_70:
                while (*(void *)v61 != v23)
                {
                  v61 += 8;
                  if (v61 == v60)
                  {
                    long long v61 = *(char **)(v52 + 296);
                    break;
                  }
                }
              }
            }
            while (v62 - v59 >= v61 - v59);
          }
          while (v13 < (unint64_t)v48);
        }
        id v63 = (long long *)(v13 - 48);
        if (v13 - 48 != a1)
        {
          long long v64 = *v63;
          long long v65 = *(_OWORD *)(v13 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
          *(_OWORD *)a1 = v64;
          *(_OWORD *)(a1 + 16) = v65;
        }
        long long *v63 = v234;
        *(void *)(v13 - 32) = v240;
        *(void *)(v13 - 24) = v23;
        *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v231 + 7);
        *(void *)(v13 - 16) = v231;
        if (v30 >= (unint64_t)v37) {
          break;
        }
LABEL_80:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*,false>(a1, v13 - 48, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>(a1, v13 - 48, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>(v13, (uint64_t)a2, a3))
      {
        break;
      }
      if (!v66) {
        goto LABEL_80;
      }
    }
    a2 = (long long *)(v13 - 48);
    if (!v66) {
      continue;
    }
    break;
  }
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>(long long *a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = *((void *)a2 + 3);
  uint64_t v5 = *((void *)a1 + 3);
  if (v4 == v5) {
    goto LABEL_23;
  }
  BOOL v6 = *(char **)(*(void *)a4 + 288);
  uint64_t v7 = *(char **)(*(void *)a4 + 296);
  if (v6 == v7)
  {
    id v9 = *(char **)(*(void *)a4 + 288);
    uint64_t v8 = v9;
  }
  else
  {
    uint64_t v8 = *(char **)(*(void *)a4 + 288);
    while (*(void *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        uint64_t v8 = *(char **)(*(void *)a4 + 296);
        break;
      }
    }
    id v9 = *(char **)(*(void *)a4 + 288);
    while (*(void *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        id v9 = *(char **)(*(void *)a4 + 296);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    uint64_t v13 = *((void *)a3 + 3);
    if (v13 != v4)
    {
      uint64_t v14 = *(char **)(*(void *)a4 + 288);
      unint64_t v15 = *(char **)(*(void *)a4 + 296);
      unint64_t v16 = v14;
      double v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(void *)v17 == v13) {
            goto LABEL_28;
          }
          v17 += 8;
        }
        while (v17 != v15);
        double v17 = *(char **)(*(void *)a4 + 296);
LABEL_28:
        while (*(void *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            unint64_t v16 = *(char **)(*(void *)a4 + 296);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        long long v18 = *a2;
        *(_OWORD *)long long v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        long long v19 = *(long long *)((char *)a3 + 27);
        long long v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(long long *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        __n128 result = *(__n128 *)&v46[11];
        *(long long *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        uint64_t v22 = *((void *)a2 + 3);
        uint64_t v23 = *((void *)a1 + 3);
        if (v22 != v23)
        {
          uint64_t v24 = *(char **)(*(void *)a4 + 288);
          uint64_t v25 = *(char **)(*(void *)a4 + 296);
          double v26 = v24;
          double v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(void *)v27 == v22) {
                goto LABEL_37;
              }
              v27 += 8;
            }
            while (v27 != v25);
            double v27 = *(char **)(*(void *)a4 + 296);
LABEL_37:
            while (*(void *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                double v26 = *(char **)(*(void *)a4 + 296);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            long long v28 = *a1;
            *(_OWORD *)uint64_t v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            long long v29 = *(long long *)((char *)a2 + 27);
            long long v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(long long *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            __n128 result = *(__n128 *)&v47[11];
            *(long long *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    uint64_t v10 = *((void *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        unint64_t v12 = *(char **)(*(void *)a4 + 288);
        double v11 = v12;
      }
      else
      {
        double v11 = *(char **)(*(void *)a4 + 288);
        while (*(void *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            double v11 = *(char **)(*(void *)a4 + 296);
            break;
          }
        }
        unint64_t v12 = *(char **)(*(void *)a4 + 288);
        while (*(void *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            unint64_t v12 = *(char **)(*(void *)a4 + 296);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        long long v31 = a1[1];
        long long v32 = *a1;
        *(void *)long long v49 = *((void *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        long long v33 = *(long long *)((char *)a3 + 27);
        long long v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(long long *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        __n128 result = *(__n128 *)&v49[3];
        *(long long *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    long long v35 = *a1;
    *(_OWORD *)double v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    long long v36 = *(long long *)((char *)a2 + 27);
    long long v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(long long *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    __n128 result = *(__n128 *)&v48[11];
    *(long long *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    uint64_t v38 = *((void *)a3 + 3);
    uint64_t v39 = *((void *)a2 + 3);
    if (v38 != v39)
    {
      unint64_t v40 = *(char **)(*(void *)a4 + 288);
      uint64_t v41 = *(char **)(*(void *)a4 + 296);
      uint64_t v42 = v40;
      uint64_t v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(void *)v43 == v38) {
            goto LABEL_50;
          }
          v43 += 8;
        }
        while (v43 != v41);
        uint64_t v43 = *(char **)(*(void *)a4 + 296);
LABEL_50:
        while (*(void *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            uint64_t v42 = *(char **)(*(void *)a4 + 296);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        long long v31 = a2[1];
        long long v32 = *a2;
        *(void *)long long v49 = *((void *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        long long v44 = *(long long *)((char *)a3 + 27);
        long long v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(long long *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 - 24);
      uint64_t v9 = *(void *)(a1 + 24);
      if (v8 == v9) {
        return result;
      }
      uint64_t v10 = *(char **)(*(void *)a3 + 288);
      double v11 = *(char **)(*(void *)a3 + 296);
      unint64_t v12 = v10;
      uint64_t v13 = v10;
      if (v10 == v11) {
        goto LABEL_10;
      }
      do
      {
        if (*(void *)v13 == v8) {
          goto LABEL_7;
        }
        v13 += 8;
      }
      while (v13 != v11);
      uint64_t v13 = *(char **)(*(void *)a3 + 296);
      do
      {
LABEL_7:
        if (*(void *)v12 == v9) {
          goto LABEL_10;
        }
        v12 += 8;
      }
      while (v12 != v11);
      unint64_t v12 = *(char **)(*(void *)a3 + 296);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        uint64_t v14 = (long long *)(a2 - 48);
        long long v15 = *(_OWORD *)a1;
        *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        long long v16 = *(_OWORD *)(a2 - 21);
        long long v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *uint64_t v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(long long *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), a3);
      uint64_t v19 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      int v20 = 0;
      break;
  }
  while (1)
  {
    uint64_t v21 = *(void *)(v19 + 24);
    uint64_t v22 = *(void *)(v18 + 24);
    if (v21 != v22)
    {
      uint64_t v23 = *(char **)(*(void *)a3 + 288);
      uint64_t v24 = *(char **)(*(void *)a3 + 296);
      uint64_t v25 = v23;
      double v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(void *)v26 == v21) {
            goto LABEL_19;
          }
          v26 += 8;
        }
        while (v26 != v24);
        double v26 = *(char **)(*(void *)a3 + 296);
LABEL_19:
        while (*(void *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            uint64_t v25 = *(char **)(*(void *)a3 + 296);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        long long v34 = *(_OWORD *)v19;
        uint64_t v36 = *(void *)(v19 + 16);
        long long v37 = *(_OWORD *)(v19 + 32);
        uint64_t v27 = v19;
        while (1)
        {
          long long v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1) {
            break;
          }
          uint64_t v27 = v18;
          uint64_t v29 = *(void *)(v18 - 24);
          if (v21 != v29)
          {
            long long v30 = *(char **)(*(void *)a3 + 288);
            long long v31 = *(char **)(*(void *)a3 + 296);
            long long v32 = v30;
            long long v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(void *)v33 == v21) {
                  goto LABEL_30;
                }
                v33 += 8;
              }
              while (v33 != v31);
              long long v33 = *(char **)(*(void *)a3 + 296);
LABEL_30:
              while (*(void *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  long long v32 = *(char **)(*(void *)a3 + 296);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30) {
              continue;
            }
          }
          goto LABEL_36;
        }
        uint64_t v27 = a1;
LABEL_36:
        *(_OWORD *)uint64_t v27 = v34;
        *(void *)(v27 + 16) = v36;
        *(void *)(v27 + 24) = v21;
        *(void *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8) {
          return v19 + 48 == a2;
        }
      }
    }
    uint64_t v18 = v19;
    v19 += 48;
    if (v19 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>((long long *)a1, (long long *)a2, (long long *)a3, a5).n128_u64[0];
  uint64_t v11 = *(void *)(a4 + 24);
  uint64_t v12 = *(void *)(a3 + 24);
  if (v11 != v12)
  {
    uint64_t v13 = *(char **)(*(void *)a5 + 288);
    uint64_t v14 = *(char **)(*(void *)a5 + 296);
    long long v15 = v13;
    long long v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(void *)v16 == v11) {
          goto LABEL_6;
        }
        v16 += 8;
      }
      while (v16 != v14);
      long long v16 = *(char **)(*(void *)a5 + 296);
LABEL_6:
      while (*(void *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          long long v15 = *(char **)(*(void *)a5 + 296);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      long long v17 = *(_OWORD *)a3;
      *(_OWORD *)uint64_t v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      long long v18 = *(_OWORD *)(a4 + 27);
      long long v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v38;
      __n128 result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      uint64_t v20 = *(void *)(a3 + 24);
      uint64_t v21 = *(void *)(a2 + 24);
      if (v20 != v21)
      {
        uint64_t v22 = *(char **)(*(void *)a5 + 288);
        uint64_t v23 = *(char **)(*(void *)a5 + 296);
        uint64_t v24 = v22;
        uint64_t v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(void *)v25 == v20) {
              goto LABEL_15;
            }
            v25 += 8;
          }
          while (v25 != v23);
          uint64_t v25 = *(char **)(*(void *)a5 + 296);
LABEL_15:
          while (*(void *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              uint64_t v24 = *(char **)(*(void *)a5 + 296);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          long long v26 = *(_OWORD *)a2;
          *(_OWORD *)uint64_t v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          long long v27 = *(_OWORD *)(a3 + 27);
          long long v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 16) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)v39;
          __n128 result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          uint64_t v29 = *(void *)(a2 + 24);
          uint64_t v30 = *(void *)(a1 + 24);
          if (v29 != v30)
          {
            long long v31 = *(char **)(*(void *)a5 + 288);
            long long v32 = *(char **)(*(void *)a5 + 296);
            long long v33 = v31;
            long long v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(void *)v34 == v29) {
                  goto LABEL_24;
                }
                v34 += 8;
              }
              while (v34 != v32);
              long long v34 = *(char **)(*(void *)a5 + 296);
LABEL_24:
              while (*(void *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  long long v33 = *(char **)(*(void *)a5 + 296);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              long long v35 = *(_OWORD *)a1;
              *(_OWORD *)unint64_t v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              long long v36 = *(_OWORD *)(a2 + 27);
              long long v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 16) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 16) = *(_OWORD *)v40;
              __n128 result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  uint64_t v13 = *(void *)(a5 + 24);
  uint64_t v14 = *(void *)(a4 + 24);
  if (v13 != v14)
  {
    long long v15 = *(char **)(*(void *)a6 + 288);
    long long v16 = *(char **)(*(void *)a6 + 296);
    long long v17 = v15;
    long long v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(void *)v18 == v13) {
          goto LABEL_6;
        }
        v18 += 8;
      }
      while (v18 != v16);
      long long v18 = *(char **)(*(void *)a6 + 296);
LABEL_6:
      while (*(void *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          long long v17 = *(char **)(*(void *)a6 + 296);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      long long v19 = *(_OWORD *)a4;
      *(_OWORD *)long long v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      long long v20 = *(_OWORD *)(a5 + 27);
      long long v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 16) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v49;
      __n128 result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      uint64_t v22 = *(void *)(a4 + 24);
      uint64_t v23 = *(void *)(a3 + 24);
      if (v22 != v23)
      {
        uint64_t v24 = *(char **)(*(void *)a6 + 288);
        uint64_t v25 = *(char **)(*(void *)a6 + 296);
        long long v26 = v24;
        long long v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(void *)v27 == v22) {
              goto LABEL_15;
            }
            v27 += 8;
          }
          while (v27 != v25);
          long long v27 = *(char **)(*(void *)a6 + 296);
LABEL_15:
          while (*(void *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              long long v26 = *(char **)(*(void *)a6 + 296);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          long long v28 = *(_OWORD *)a3;
          *(_OWORD *)long long v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          long long v29 = *(_OWORD *)(a4 + 27);
          long long v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 16) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 16) = *(_OWORD *)v50;
          __n128 result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          uint64_t v31 = *(void *)(a3 + 24);
          uint64_t v32 = *(void *)(a2 + 24);
          if (v31 != v32)
          {
            long long v33 = *(char **)(*(void *)a6 + 288);
            long long v34 = *(char **)(*(void *)a6 + 296);
            long long v35 = v33;
            long long v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(void *)v36 == v31) {
                  goto LABEL_24;
                }
                v36 += 8;
              }
              while (v36 != v34);
              long long v36 = *(char **)(*(void *)a6 + 296);
LABEL_24:
              while (*(void *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  long long v35 = *(char **)(*(void *)a6 + 296);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              long long v37 = *(_OWORD *)a2;
              *(_OWORD *)long long v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              long long v38 = *(_OWORD *)(a3 + 27);
              long long v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 16) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 16) = *(_OWORD *)v51;
              __n128 result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              uint64_t v40 = *(void *)(a2 + 24);
              uint64_t v41 = *(void *)(a1 + 24);
              if (v40 != v41)
              {
                uint64_t v42 = *(char **)(*(void *)a6 + 288);
                uint64_t v43 = *(char **)(*(void *)a6 + 296);
                long long v44 = v42;
                long long v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(void *)v45 == v40) {
                      goto LABEL_33;
                    }
                    v45 += 8;
                  }
                  while (v45 != v43);
                  long long v45 = *(char **)(*(void *)a6 + 296);
LABEL_33:
                  while (*(void *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      long long v44 = *(char **)(*(void *)a6 + 296);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  long long v46 = *(_OWORD *)a1;
                  *(_OWORD *)uint64_t v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  long long v47 = *(_OWORD *)(a2 + 27);
                  long long v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 16) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 16) = *(_OWORD *)v52;
                  __n128 result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCumulative> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCumulative> const&)#1}>,HDStatisticsCumulative const& ()(HDStatisticsRelative<HDStatisticsCumulative> const&)>::~__func()
{
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCumulative> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCumulative> const&)#1}>,HDStatisticsCumulative const& ()(HDStatisticsRelative<HDStatisticsCumulative> const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_1F1722B70;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCumulative> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCumulative> const&)#1}>,HDStatisticsCumulative const& ()(HDStatisticsRelative<HDStatisticsCumulative> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1722B70;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCumulative> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCumulative> const&)#1}>,HDStatisticsCumulative const& ()(HDStatisticsRelative<HDStatisticsCumulative> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCumulative> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCumulative> const&)#1}>,HDStatisticsCumulative const& ()(HDStatisticsRelative<HDStatisticsCumulative> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCumulative> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCumulative> const&)#1}>,HDStatisticsCumulative const& ()(HDStatisticsRelative<HDStatisticsCumulative> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsCumulative const& ()(HDStatisticsRelative<HDStatisticsCumulative> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 584))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a4, 3, @"Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date");
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_configureForStartTime(a1);
  }
  double v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(void *)(a1 + 40) && a3) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_advanceToTime(a1, v8);
    }
    HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    uint64_t v9 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    uint64_t v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v9, a4);
  }
  return v10;
}

void sub_1BD067900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_earliestStartTimeWithoutInvalidation(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    if (!*(unsigned char *)(a1 + 584))
    {
      double v1 = *(double *)(a1 + 176);
      double result = *(double *)(a1 + 120);
      if (v1 <= result)
      {
        double v1 = -1.79769313e308;
      }
      else if (*(unsigned char *)(a1 + 144))
      {
        double v1 = -1.79769313e308;
      }
      if (v1 >= result) {
        return v1;
      }
      return result;
    }
    return -1.79769313e308;
  }
  double result = *(double *)(a1 + 176);
  if (result <= *(double *)(a1 + 120)) {
    return -1.79769313e308;
  }
  if (*(unsigned char *)(a1 + 144)) {
    return -1.79769313e308;
  }
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_advanceToTime(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 128) <= a2)
  {
    uint64_t v4 = a1 + 112;
    uint64_t v5 = (double *)(a1 + 120);
    do
    {
      uint64_t v6 = *(void *)(a1 + 560);
      uint64_t v7 = *(void *)(a1 + 552);
      if (v6 == v7)
      {
        uint64_t v22 = 0;
        long long v15 = *(void **)(a1 + 40);
        long long v16 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a2];
        double v8 = [v15 dateIntervalContainingDate:v16 index:&v22];

        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v17 = v22;
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v19 = v18;
        long long v20 = [v8 endDate];
        [v20 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::resetToBucket(v4, v17, v19, v21);
      }
      else
      {
        double v8 = [*(id *)(a1 + 40) dateIntervalAtIndex:*(void *)(a1 + 112) + 1];
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v12 = v11;
        uint64_t v13 = [v8 endDate];
        [v13 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::advanceBucket(v4, v12, v14);
      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_didChangeBucket(a1, v9);
      if (v6 != v7) {
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_notifyForCurrentBucket(a1);
      }
    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1BD067B8C(_Unwind_Exception *exception_object)
{
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a1 + 8;
  double v6 = *(double *)a2;
  double v7 = *(double *)(a2 + 8);
  double v8 = *(double *)(a2 + 16);
  uint64_t v9 = *(uint64_t **)(a2 + 24);
  unsigned __int8 v10 = *(unsigned char *)(a2 + 32);
  char v11 = *(unsigned char *)(a2 + 33);
  double v12 = *(double *)(a1 + 8) - v7;
  int v13 = v10;
  unint64_t v14 = (unint64_t)v9;
  char v15 = v11;
  double v16 = v8;
  double v17 = v7;
  double v18 = *(double *)a2;
  if (v12 >= 0.01)
  {
    if (v8 - v7 - v12 >= 0.01)
    {
      int v13 = *(unsigned __int8 *)(a2 + 32);
      double v18 = v6 - v6 * (v12 / (v8 - v7));
      unint64_t v14 = *(void *)(a2 + 24);
      char v15 = *(unsigned char *)(a2 + 33);
      double v16 = *(double *)(a2 + 16);
      double v17 = *(double *)(a1 + 8);
    }
    else
    {
      int v13 = 0;
      unint64_t v14 = 0;
      char v15 = 0;
      double v16 = 0.0;
      double v17 = 0.0;
      double v18 = 0.0;
    }
  }
  double v19 = *(double *)(a1 + 16);
  double v20 = v19 - v17;
  double v21 = v16 - v17;
  double v22 = v16 - v17 - (v19 - v17);
  if (*(_DWORD *)(a1 + 36))
  {
    if (v20 >= 0.01)
    {
      if (v22 >= 0.01)
      {
LABEL_24:
        double v25 = v16;
        unint64_t v68 = v14;
        double v24 = v18 - v18 * (v20 / v21);
        int v23 = v13;
        char v69 = v15;
        double v16 = *(double *)(a1 + 16);
        double v18 = v18 * (v20 / v21);
        if (!v13) {
          goto LABEL_25;
        }
        goto LABEL_11;
      }
LABEL_10:
      unint64_t v68 = 0;
      int v23 = 0;
      char v69 = 0;
      double v24 = 0.0;
      double v19 = 0.0;
      double v25 = 0.0;
      if (!v13)
      {
LABEL_25:
        char v15 = v69;
        goto LABEL_63;
      }
LABEL_11:
      double v66 = v17;
      double v67 = v16;
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 256, v14, v14);
      unint64_t v26 = *(void *)(a1 + 112);
      if (v26 == *(void *)(a1 + 104) && *(uint64_t *)(a1 + 144) <= 0)
      {
        v31.f64[1] = *(float64_t *)(a1 + 16);
        double v28 = v66;
        double v27 = v67;
        v31.f64[0] = v66;
        v32.f64[0] = *(float64_t *)(a1 + 8);
        v32.f64[1] = v67;
        int8x16_t v33 = (int8x16_t)vcgtq_f64(v32, v31);
        v32.f64[0] = v66;
        *(int8x16_t *)(a1 + 48) = vbslq_s8(v33, *(int8x16_t *)(a1 + 8), (int8x16_t)v32);
      }
      else
      {
        double v28 = v66;
        double v27 = v67;
        if (v66 < *(double *)(a1 + 48))
        {
          double v29 = *(double *)(a1 + 8);
          if (v66 >= v29) {
            double v29 = v66;
          }
          *(double *)(a1 + 48) = v29;
        }
        if (v67 > *(double *)(a1 + 56))
        {
          double v30 = *(double *)(a1 + 16);
          if (v30 >= v67) {
            double v30 = v67;
          }
          *(double *)(a1 + 56) = v30;
        }
      }
      if (*(unsigned char *)(a1 + 32))
      {
        double v34 = *(double *)(a1 + 64);
        if (v28 < v34) {
          double v34 = v28;
        }
        *(double *)(a1 + 64) = v34;
      }
      if (a3 && v28 < *(double *)(a1 + 16))
      {
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeThroughTime(v5, v28);
        double v28 = v66;
        double v27 = v67;
        unint64_t v26 = *(void *)(a1 + 112);
      }
      unint64_t v35 = *(void *)(a1 + 120);
      if (v26 >= v35)
      {
        uint64_t v37 = *(void *)(a1 + 104);
        unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - v37) >> 4);
        unint64_t v39 = v38 + 1;
        if (v38 + 1 > 0x555555555555555) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - v37) >> 4);
        if (2 * v40 > v39) {
          unint64_t v39 = 2 * v40;
        }
        if (v40 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v41 = 0x555555555555555;
        }
        else {
          unint64_t v41 = v39;
        }
        if (v41)
        {
          unint64_t v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v41);
          double v28 = v66;
          double v27 = v67;
        }
        else
        {
          uint64_t v42 = 0;
        }
        unint64_t v43 = v41 + 48 * v38;
        unint64_t v44 = v41 + 48 * v42;
        *(double *)unint64_t v43 = v18;
        *(double *)(v43 + 8) = v28;
        *(double *)(v43 + 16) = v27;
        *(void *)(v43 + 24) = v14;
        *(unsigned char *)(v43 + 32) = v13;
        *(unsigned char *)(v43 + 33) = v15;
        *(_WORD *)(v43 + 40) = 0;
        *(unsigned char *)(v43 + 42) = 0;
        unint64_t v36 = v43 + 48;
        long long v46 = *(char **)(a1 + 104);
        long long v45 = *(char **)(a1 + 112);
        if (v45 == v46)
        {
          char v15 = v69;
        }
        else
        {
          char v15 = v69;
          do
          {
            long long v47 = *((_OWORD *)v45 - 3);
            long long v48 = *((_OWORD *)v45 - 2);
            *(_OWORD *)(v43 - 21) = *(_OWORD *)(v45 - 21);
            *(_OWORD *)(v43 - 48) = v47;
            *(_OWORD *)(v43 - 32) = v48;
            v43 -= 48;
            v45 -= 48;
          }
          while (v45 != v46);
          long long v45 = *(char **)(a1 + 104);
        }
        *(void *)(a1 + 104) = v43;
        *(void *)(a1 + 112) = v36;
        *(void *)(a1 + 120) = v44;
        if (v45) {
          operator delete(v45);
        }
      }
      else
      {
        *(double *)unint64_t v26 = v18;
        *(double *)(v26 + 8) = v28;
        *(double *)(v26 + 16) = v27;
        *(void *)(v26 + 24) = v14;
        *(unsigned char *)(v26 + 32) = v13;
        *(unsigned char *)(v26 + 33) = v15;
        *(_WORD *)(v26 + 40) = 0;
        unint64_t v36 = v26 + 48;
        *(unsigned char *)(v26 + 42) = 0;
        char v15 = v69;
      }
      *(void *)(a1 + 112) = v36;
      if (!*(unsigned char *)(a1 + 224) || *(double *)(a1 + 200) <= v7)
      {
        *(double *)(a1 + 192) = v6;
        *(double *)(a1 + 200) = v7;
        *(double *)(a1 + 208) = v8;
        *(void *)(a1 + 216) = v9;
        *(unsigned char *)(a1 + 224) = v10;
        *(unsigned char *)(a1 + 225) = v11;
        if (!*(unsigned char *)(a1 + 184) || *(double *)(a1 + 160) <= v7)
        {
          *(double *)(a1 + 152) = v6;
          *(double *)(a1 + 160) = v7;
          *(double *)(a1 + 168) = v8;
          *(void *)(a1 + 176) = v9;
          *(unsigned char *)(a1 + 184) = v10;
          *(unsigned char *)(a1 + 185) = v11;
        }
      }
      if (*(unsigned char *)(a1 + 33))
      {
        unint64_t v49 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_canonicalSourceIDForSourceID(v5, v14);
        long long v50 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_statisticsForSource(v5, v49);
        if (!*((unsigned char *)v50 + 96) || *((double *)v50 + 9) <= v7)
        {
          *((double *)v50 + 8) = v6;
          *((double *)v50 + 9) = v7;
          *((double *)v50 + 10) = v8;
          v50[11] = v9;
          *((unsigned char *)v50 + 96) = v10;
          *((unsigned char *)v50 + 97) = v11;
          if (!*((unsigned char *)v50 + 56) || *((double *)v50 + 4) <= v7)
          {
            *((double *)v50 + 3) = v6;
            *((double *)v50 + 4) = v7;
            *((double *)v50 + 5) = v8;
            v50[6] = v9;
            *((unsigned char *)v50 + 56) = v10;
            *((unsigned char *)v50 + 57) = v11;
          }
        }
      }
LABEL_63:
      unint64_t v14 = v68;
      if (!v23) {
        return;
      }
      goto LABEL_64;
    }
  }
  else
  {
    if (v22 < 0.01) {
      goto LABEL_10;
    }
    if (v20 >= 0.01) {
      goto LABEL_24;
    }
  }
  LOBYTE(v23) = v13;
  double v25 = v16;
  double v19 = v17;
  double v24 = v18;
  if (!v13) {
    return;
  }
LABEL_64:
  unint64_t v51 = *(void *)(a1 + 448);
  unint64_t v52 = *(void *)(a1 + 456);
  if (v51 >= v52)
  {
    uint64_t v54 = *(void *)(a1 + 440);
    unint64_t v55 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v51 - v54) >> 3);
    unint64_t v56 = v55 + 1;
    if (v55 + 1 > 0x666666666666666) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v57 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v52 - v54) >> 3);
    if (2 * v57 > v56) {
      unint64_t v56 = 2 * v57;
    }
    if (v57 >= 0x333333333333333) {
      unint64_t v58 = 0x666666666666666;
    }
    else {
      unint64_t v58 = v56;
    }
    if (v58) {
      unint64_t v58 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v58);
    }
    else {
      uint64_t v59 = 0;
    }
    unint64_t v60 = v58 + 40 * v55;
    unint64_t v61 = v58 + 40 * v59;
    *(double *)unint64_t v60 = v24;
    *(double *)(v60 + 8) = v19;
    *(double *)(v60 + 16) = v25;
    *(void *)(v60 + 24) = v14;
    *(unsigned char *)(v60 + 32) = v23;
    *(unsigned char *)(v60 + 33) = v15;
    unint64_t v53 = v60 + 40;
    id v63 = *(char **)(a1 + 440);
    long long v62 = *(char **)(a1 + 448);
    if (v62 != v63)
    {
      do
      {
        long long v64 = *(_OWORD *)(v62 - 40);
        long long v65 = *(_OWORD *)(v62 - 24);
        *(_WORD *)(v60 - 8) = *((_WORD *)v62 - 4);
        *(_OWORD *)(v60 - 24) = v65;
        *(_OWORD *)(v60 - 40) = v64;
        v60 -= 40;
        v62 -= 40;
      }
      while (v62 != v63);
      long long v62 = *(char **)(a1 + 440);
    }
    *(void *)(a1 + 440) = v60;
    *(void *)(a1 + 448) = v53;
    *(void *)(a1 + 456) = v61;
    if (v62) {
      operator delete(v62);
    }
  }
  else
  {
    *(double *)unint64_t v51 = v24;
    *(double *)(v51 + 8) = v19;
    *(double *)(v51 + 16) = v25;
    *(void *)(v51 + 24) = v14;
    *(unsigned char *)(v51 + 32) = v23;
    unint64_t v53 = v51 + 40;
    *(unsigned char *)(v51 + 33) = v15;
  }
  *(void *)(a1 + 448) = v53;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_notifyForCurrentBucket(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 586))
  {
    *(unsigned char *)(a1 + 588) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 588) = 0;
    uint64_t v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      uint64_t v4 = v2;
      double v3 = (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      if (v3) {
        v4[2](v4, v3);
      }

      uint64_t v2 = v4;
    }
  }
}

void sub_1BD068200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  uint64_t v9 = 0;
  unsigned __int8 v10 = 0;
  uint64_t v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 440), *(void *)(a1 + 448), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 448) - *(void *)(a1 + 440)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::resetToBucket(a1, *(void *)a1 + 1, a2, a3);
  double v6 = v9;
  double v7 = v10;
  if (v9 != v10)
  {
    uint64_t v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BD0682FC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8 = a1 + 40;
  objc_storeStrong((id *)(a1 + 464), *(id *)(a1 + 40));
  *(double *)(v8 - 32) = a3;
  *(double *)(v8 - 24) = a4;
  *(double *)(v8 + 24) = a3;
  *(void *)(v8 + 72) = *(void *)(v8 + 64);
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(void *)(v8 + 184) = 0;
  if (*(void *)(v8 + 208))
  {
    uint64_t v9 = *(void *)(a1 + 240);
    unsigned __int8 v10 = *(void **)(a1 + 232);
    *(void *)(a1 + 232) = a1 + 240;
    *(void *)(v9 + 16) = 0;
    *(void *)(a1 + 240) = 0;
    *(void *)(a1 + 248) = 0;
    if (v10[1]) {
      uint64_t v11 = (void *)v10[1];
    }
    else {
      uint64_t v11 = v10;
    }
    if (v11)
    {
      double v12 = (void *)v11[2];
      if (v12)
      {
        int v13 = (void *)*v12;
        if ((void *)*v12 == v11)
        {
          void *v12 = 0;
          while (1)
          {
            char v15 = (void *)v12[1];
            if (!v15) {
              break;
            }
            do
            {
              double v12 = v15;
              char v15 = (void *)*v15;
            }
            while (v15);
          }
        }
        else
        {
          for (v12[1] = 0; v13; int v13 = (void *)v12[1])
          {
            do
            {
              double v12 = v13;
              int v13 = (void *)*v13;
            }
            while (v13);
          }
        }
        std::__tree<long>::destroy(v11);
        for (uint64_t i = (void *)v12[2]; i; uint64_t i = (void *)i[2])
          double v12 = i;
        uint64_t v11 = v12;
      }
    }
    std::__tree<long>::destroy(v11);
  }
  objc_storeStrong((id *)v8, *(id *)(a1 + 464));
  *(void *)(a1 + 448) = *(void *)(a1 + 440);
  *(void *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 588))
  {
    if (v3)
    {
      id v6 = v3;
      uint64_t v4 = _Block_copy(*(const void **)(a1 + 96));
      uint64_t v5 = v4;
      if (v4) {
        (*((void (**)(void *, id))v4 + 2))(v4, v6);
      }

      id v3 = v6;
    }
    *(unsigned char *)(a1 + 588) = 0;
  }
}

void sub_1BD0684C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_currentBucketInterval(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 584))
  {
    double v1 = 0;
  }
  else
  {
    double v1 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", *(double *)(a1 + 120), *(double *)(a1 + 128));
  }

  return v1;
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsCumulativeEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 startDate];
  id v6 = [v4 startDate];
  uint64_t v7 = [v5 compare:v6];

  return v7;
}

void sub_1BD068594(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_primitiveInvalidateInterval(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 13);
  if (WeakRetained)
  {
    if (v5
      && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_currentBucketInterval((uint64_t)a1),
          (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v8 = [v5 endDate];
      uint64_t v9 = [v7 startDate];
      if (objc_msgSend(v8, "hk_isAfterDate:", v9))
      {
        unsigned __int8 v10 = [v5 startDate];
        uint64_t v11 = [v7 endDate];
        char v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);
      }
      else
      {
        char v12 = 0;
      }

      int v13 = _Block_copy(a1[12]);
      if ((v12 & 1) == 0) {
        operator new();
      }
    }
    else
    {
      int v13 = _Block_copy(a1[12]);
    }
    *((unsigned char *)a1 + 584) = 1;
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsCumulativeEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
    v27[3] = &unk_1E6308FF8;
    id v15 = v5;
    id v28 = v15;
    id v16 = v13;
    id v29 = v16;
    (*((void (**)(id *, void *))*a1 + 9))(a1, v27);
    if (v5)
    {
      double v17 = [v15 startDate];
      [v17 timeIntervalSinceReferenceDate];
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_configureForStartTime((uint64_t)a1);
    }
    else
    {
      (*((void (**)(id *))*a1 + 4))(a1);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsCumulativeEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
    v21[3] = &unk_1E6309060;
    double v24 = a1;
    id v5 = v15;
    char v26 = 1;
    id v22 = v5;
    double v25 = a1;
    id v23 = WeakRetained;
    uint64_t v14 = (*((uint64_t (**)(id *, void *, uint64_t))*a1 + 14))(a1, v21, a3);
    double v18 = _Block_copy(v16);
    id v19 = a1[12];
    a1[12] = v18;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to invalidate interval: no data source available.");
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1BD0689E4(_Unwind_Exception *a1)
{
  MEMORY[0x1C187B8A0](v4, 0x10F1C40081539FBLL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsCumulativeEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_11;
  }
  id v3 = [v10 endDate];
  uint64_t v4 = [*(id *)(a1 + 32) startDate];
  char v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    id v6 = [v10 startDate];
    uint64_t v7 = [*(id *)(a1 + 32) endDate];
    char v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_11:
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9) {
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
      }
    }
  }
}

void sub_1BD068BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsCumulativeEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = [*(id *)(a1 + 32) startDate];
  [v5 timeIntervalSinceReferenceDate];
  uint64_t v7 = v6;

  char v8 = [*(id *)(a1 + 32) endDate];
  [v8 timeIntervalSinceReferenceDate];
  uint64_t v10 = v9;

  uint64_t v11 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  uint64_t v13 = *(void *)(a1 + 32);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsCumulativeEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  char v32 = *(unsigned char *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  uint64_t v31 = *(void *)(a1 + 56);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsCumulativeEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  uint64_t v14 = [v11 collectionCalculator:WeakRetained queryForInterval:v13 error:a2 sampleHandler:v30 mergeHandler:v29];

  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15 != v4)
    {
      id v16 = [*(id *)(a1 + 32) endDate];
      [v16 timeIntervalSinceReferenceDate];
      if (*(void *)(v15 + 40))
      {
        double v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          id v19 = [*(id *)(v15 + 40) dateIntervalAtIndex:*(void *)(v15 + 112) + 1];
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          double v20 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_statisticsFromFinishedBucket(v15, (double *)(v15 + 120));
          double v21 = [v19 startDate];
          [v21 timeIntervalSinceReferenceDate];
          double v23 = v22;
          double v24 = [v19 endDate];
          [v24 timeIntervalSinceReferenceDate];
          HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            char v26 = _Block_copy(*(const void **)(v15 + 96));
            double v27 = v26;
            if (v26) {
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);
            }
          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_didChangeBucket(v15, 0);
        }
      }
    }
  }
  return v14;
}

void sub_1BD068E74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsCumulativeEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7 = *(double *)(a1 + 32) - a6;
  if (v7 >= 0.01)
  {
    double v9 = a7 - a6;
    if (v9 - v7 >= 0.01)
    {
      a5 = a5 - v7 / v9 * a5;
      int v8 = 1;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      int v8 = 0;
      a5 = 0.0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    int v8 = 1;
  }
  *(double *)uint64_t v13 = a5;
  *(double *)&v13[1] = a6;
  double v14 = a7;
  uint64_t v15 = a2;
  char v16 = v8;
  char v17 = 0;
  if (*(unsigned char *)(a1 + 56))
  {
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)v13, a3, a4);
    }
  }
  else
  {
    double v11 = *(double *)(a1 + 40) - a6;
    if (v11 >= 0.01)
    {
      double v12 = a7 - a6;
      if (v12 - v11 >= 0.01)
      {
        a5 = a5 * (v11 / v12);
        a7 = *(double *)(a1 + 40);
      }
    }
    else
    {
      int v8 = 0;
    }
    *(double *)uint64_t v13 = a5;
    double v14 = a7;
    char v16 = v8;
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)v13, a3, a4);
    }
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsCumulativeEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 584)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_configureForStartTime(a1);
  }
  if (*(void *)(a1 + 40)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_advanceToTime(a1, a2);
  }
  if (*(double *)(a1 + 128) > a2)
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeThroughTime(a1 + 120, a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 32) < *(double *)(v10 + 8))
                {
                  uint64_t v129 = *(void *)(v10 + 32);
                  long long v113 = *(_OWORD *)v10;
                  long long v121 = *(_OWORD *)(v10 + 16);
                  long long v52 = *(_OWORD *)(a2 - 40);
                  long long v53 = *(_OWORD *)(a2 - 24);
                  *(_WORD *)(v10 + 32) = *(_WORD *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(_WORD *)(a2 - 8) = v129;
                  *(_OWORD *)(a2 - 24) = v121;
                  *(_OWORD *)(a2 - 40) = v113;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v10, (double *)(v10 + 40), (double *)(a2 - 40));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, v10 + 120, a2 - 40);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            uint64_t v54 = (void *)(v10 + 40);
            BOOL v56 = v10 == a2 || v54 == (void *)a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  uint64_t v59 = v54;
                  double v60 = *(double *)(v58 + 48);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *v54;
                    long long v114 = *(_OWORD *)(v58 + 56);
                    uint64_t v122 = *(void *)(v58 + 72);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      uint64_t v63 = v10 + v62;
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      *(_OWORD *)(v63 + 40) = *(_OWORD *)(v10 + v62);
                      *(_OWORD *)(v63 + 56) = v64;
                      *(_WORD *)(v63 + 72) = *(_WORD *)(v10 + v62 + 32);
                      if (!v62) {
                        break;
                      }
                      v62 -= 40;
                      if (v60 >= *(double *)(v63 - 32))
                      {
                        uint64_t v65 = v10 + v62 + 40;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = v114;
                    *(_WORD *)(v65 + 32) = v122;
                  }
                  uint64_t v54 = v59 + 5;
                  v57 += 40;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 5 != (void *)a2);
              }
            }
            else if (!v56)
            {
              do
              {
                char v98 = v54;
                double v99 = *(double *)(a1 + 48);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *v54;
                  long long v117 = *(_OWORD *)(a1 + 56);
                  uint64_t v125 = *(void *)(a1 + 72);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(_OWORD *)(v101 - 3);
                    *(_OWORD *)long long v101 = *(_OWORD *)(v101 - 5);
                    *((_OWORD *)v101 + 1) = v102;
                    *((_WORD *)v101 + 16) = *((_WORD *)v101 - 4);
                    double v103 = *((double *)v101 - 9);
                    v101 -= 5;
                  }
                  while (v99 < v103);
                  void *v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *((_WORD *)v101 + 16) = v125;
                  *((_OWORD *)v101 + 1) = v117;
                }
                v54 += 5;
                a1 = (unint64_t)v98;
              }
              while (v98 + 5 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 40 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v10 + 40 * v69 + 8) < *(double *)(v70 + 48))
                  {
                    v70 += 40;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  double v71 = *(double *)(v10 + 40 * v68 + 8);
                  if (*(double *)(v70 + 8) >= v71)
                  {
                    unint64_t v72 = v10 + 40 * v68;
                    uint64_t v73 = *(void *)v72;
                    uint64_t v123 = *(void *)(v72 + 32);
                    long long v115 = *(_OWORD *)(v72 + 16);
                    do
                    {
                      unint64_t v74 = v72;
                      unint64_t v72 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_WORD *)(v74 + 32) = *(_WORD *)(v70 + 32);
                      *(_OWORD *)unint64_t v74 = v75;
                      *(_OWORD *)(v74 + 16) = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 40 * v77;
                      uint64_t v78 = 2 * v69 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v10 + 40 * v77 + 8) < *(double *)(v70 + 48))
                      {
                        v70 += 40;
                        uint64_t v77 = v78;
                      }
                      uint64_t v69 = v77;
                    }
                    while (*(double *)(v70 + 8) >= v71);
                    *(void *)unint64_t v72 = v73;
                    *(double *)(v72 + 8) = v71;
                    *(_OWORD *)(v72 + 16) = v115;
                    *(_WORD *)(v72 + 32) = v123;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x28uLL;
              do
              {
                uint64_t v80 = 0;
                uint64_t v130 = *(void *)(v10 + 32);
                long long v116 = *(_OWORD *)v10;
                long long v124 = *(_OWORD *)(v10 + 16);
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = v81;
                  uint64_t v83 = v80 + 1;
                  v81 += 40 * (v80 + 1);
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v85 = v84 + 2;
                  if (v85 < v79 && *(double *)(v82 + 40 * v83 + 8) < *(double *)(v81 + 48))
                  {
                    v81 += 40;
                    uint64_t v80 = v85;
                  }
                  long long v86 = *(_OWORD *)v81;
                  long long v87 = *(_OWORD *)(v81 + 16);
                  *(_WORD *)(v82 + 32) = *(_WORD *)(v81 + 32);
                  *(_OWORD *)unint64_t v82 = v86;
                  *(_OWORD *)(v82 + 16) = v87;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 40;
                if (v81 == a2)
                {
                  *(_WORD *)(v81 + 32) = v130;
                  *(_OWORD *)unint64_t v81 = v116;
                  *(_OWORD *)(v81 + 16) = v124;
                }
                else
                {
                  long long v88 = *(_OWORD *)a2;
                  long long v89 = *(_OWORD *)(a2 + 16);
                  *(_WORD *)(v81 + 32) = *(_WORD *)(a2 + 32);
                  *(_OWORD *)unint64_t v81 = v88;
                  *(_OWORD *)(v81 + 16) = v89;
                  *(_WORD *)(a2 + 32) = v130;
                  *(_OWORD *)a2 = v116;
                  *(_OWORD *)(a2 + 16) = v124;
                  uint64_t v90 = v81 - v10 + 40;
                  if (v90 >= 41)
                  {
                    unint64_t v91 = (v90 / 0x28uLL - 2) >> 1;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v10 + 40 * v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      uint64_t v109 = *(void *)(v81 + 32);
                      long long v106 = *(_OWORD *)(v81 + 16);
                      do
                      {
                        unint64_t v94 = v81;
                        unint64_t v81 = v10 + 40 * v91;
                        long long v95 = *(_OWORD *)v81;
                        long long v96 = *(_OWORD *)(v81 + 16);
                        *(_WORD *)(v94 + 32) = *(_WORD *)(v81 + 32);
                        *(_OWORD *)unint64_t v94 = v95;
                        *(_OWORD *)(v94 + 16) = v96;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 40 * v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_WORD *)(v81 + 32) = v109;
                      *(_OWORD *)(v81 + 16) = v106;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40 * (v12 >> 1)), (double *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            char v16 = (double *)(a1 + 40 * v13 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40), v16, (double *)(a2 - 80));
            char v17 = (double *)(a1 + 40 + 8 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 80), v17, (double *)(a2 - 120));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v16, (double *)v14, v17);
            uint64_t v126 = *(void *)(a1 + 32);
            long long v110 = *(_OWORD *)a1;
            long long v118 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 16) = v19;
            *(_WORD *)(v14 + 32) = v126;
            *(_OWORD *)unint64_t v14 = v110;
            *(_OWORD *)(v14 + 16) = v118;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40 * (v12 >> 1)), (double *)a1, (double *)(a2 - 40));
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 32) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          long long v105 = *(_OWORD *)(a1 + 16);
          uint64_t v108 = *(void *)(a1 + 32);
          if (v20 >= *(double *)(a2 - 32))
          {
            unint64_t v41 = a1 + 40;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 40;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 40;
              double v40 = *(double *)(v39 + 48);
              v39 += 40;
            }
            while (v20 >= v40);
          }
          unint64_t v43 = a2;
          if (v10 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              unint64_t v43 = v44 - 40;
              double v45 = *(double *)(v44 - 32);
              v44 -= 40;
            }
            while (v20 < v45);
          }
          while (v10 < v43)
          {
            uint64_t v128 = *(void *)(v10 + 32);
            long long v112 = *(_OWORD *)v10;
            long long v120 = *(_OWORD *)(v10 + 16);
            long long v46 = *(_OWORD *)v43;
            long long v47 = *(_OWORD *)(v43 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v43 + 32);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(_WORD *)(v43 + 32) = v128;
            *(_OWORD *)unint64_t v43 = v112;
            *(_OWORD *)(v43 + 16) = v120;
            do
            {
              double v48 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *(double *)(v43 - 32);
              v43 -= 40;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 40);
            long long v51 = *(_OWORD *)(v10 - 24);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 40) = v38;
          *(double *)(v10 - 32) = v20;
          *(_WORD *)(v10 - 8) = v108;
          *(_OWORD *)(v10 - 24) = v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        long long v104 = *(_OWORD *)(a1 + 16);
        uint64_t v107 = *(void *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 48);
          v21 += 40;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        unint64_t v25 = a2;
        if (v21 == 40)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 40;
            double v29 = *(double *)(v28 - 32);
            v28 -= 40;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 40;
            double v27 = *(double *)(v25 - 32);
            v25 -= 40;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v127 = *(void *)(v10 + 32);
            long long v111 = *(_OWORD *)v10;
            long long v119 = *(_OWORD *)(v10 + 16);
            long long v31 = *(_OWORD *)v30;
            long long v32 = *(_OWORD *)(v30 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v30 + 32);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(_WORD *)(v30 + 32) = v127;
            *(_OWORD *)unint64_t v30 = v111;
            *(_OWORD *)(v30 + 16) = v119;
            do
            {
              double v33 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v33 < v20);
            do
            {
              double v34 = *(double *)(v30 - 32);
              v30 -= 40;
            }
            while (v34 >= v20);
          }
          while (v10 < v30);
        }
        if (v10 - 40 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 40);
          long long v36 = *(_OWORD *)(v10 - 24);
          *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 40) = v22;
        *(double *)(v10 - 32) = v20;
        *(_WORD *)(v10 - 8) = v107;
        *(_OWORD *)(v10 - 24) = v104;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 40;
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        __int16 v9 = *(_WORD *)(a2 - 8);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      uint64_t v16 = *(void *)v12;
      long long v21 = *(_OWORD *)(v12 + 16);
      uint64_t v22 = *(void *)(v12 + 32);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(void *)uint64_t v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsCumulativeEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(void *a1, uint64_t a2)
{
  id v3 = (void *)a1[5];
  uint64_t v4 = a1[6];
  BOOL v5 = (void *)a1[4];
  uint64_t v6 = [v5 dateInterval];
  void v9[4] = v4;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsCumulativeEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsCumulativeEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  uint64_t v7 = [v3 collectionCalculator:v5 queryForInterval:v6 error:a2 sampleHandler:v10 mergeHandler:v9];

  return v7;
}

void sub_1BD069C14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsCumulativeEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10 = *(void *)(a1 + 32);
  *(double *)int v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  char v15 = 1;
  uint64_t v11 = [MEMORY[0x1E4F1C9C8] distantFuture];
  [v11 timeIntervalSinceReferenceDate];
  BOOL v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1BD069CB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsCumulativeEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
}

void HDStatisticsRelative<HDStatisticsCumulative>::archive(uint64_t a1, int *a2)
{
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 112);
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F171B978;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  statistics::Statistics::makePrimaryStatistics(a1);
  HDStatisticsCumulative::archive((int8x16_t *)(a2 + 2), (uint64_t)v6);
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v6);
  statistics::Statistics::~Statistics((statistics::Statistics *)v6);
  uint64_t v5 = *a2;
  *(_DWORD *)(a1 + 204) |= 0x100u;
  *(void *)(a1 + 136) = v5;
  statistics::Statistics::makeMostRecentDatum(a1);
  v6[0] = &unk_1F17206F8;
  int v10 = 127;
  int8x16_t v7 = vextq_s8(*((int8x16_t *)a2 + 4), *((int8x16_t *)a2 + 4), 8uLL);
  v6[1] = *((void *)a2 + 10);
  v6[2] = *((void *)a2 + 11);
  __int16 v8 = 0;
  char v9 = 0;
  statistics::RawQuantitySample::operator=(*v4, (uint64_t)v6);
  PB::Base::~Base((PB::Base *)v6);
}

void sub_1BD069DE8(_Unwind_Exception *a1)
{
  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsCumulative>::unarchive(uint64_t a1, void *a2)
{
  *(_WORD *)(a1 + 56) = 0;
  int8x16_t v2 = 0uLL;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_WORD *)(a1 + 96) = 0;
  id v3 = (void *)a2[16];
  if (v3)
  {
    uint64_t v4 = v3[19];
    uint64_t v5 = v3[3];
    uint64_t v6 = v3[14];
    if (v6)
    {
      int8x16_t v2 = *(int8x16_t *)(v6 + 24);
      uint64_t v7 = *(void *)(v6 + 8);
      char v8 = 1;
      uint64_t v6 = *(void *)(v6 + 16);
    }
    else
    {
      char v8 = 0;
      uint64_t v7 = 0;
    }
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    int8x16_t v2 = vextq_s8(v2, v2, 8uLL);
    *(int8x16_t *)(a1 + 24) = v2;
    *(void *)(a1 + 40) = v7;
    *(void *)(a1 + 48) = v6;
    *(unsigned char *)(a1 + 56) = v8;
    *(unsigned char *)(a1 + 57) = 0;
  }
  *(_DWORD *)a1 = a2[17];
  uint64_t v9 = a2[14];
  if (v9)
  {
    v2.i64[0] = *(void *)(v9 + 8);
    uint64_t v10 = *(void *)(v9 + 16);
    *(int8x16_t *)(a1 + 64) = vextq_s8(*(int8x16_t *)(v9 + 24), *(int8x16_t *)(v9 + 24), 8uLL);
    *(void *)(a1 + 80) = v2.i64[0];
    *(void *)(a1 + 88) = v10;
    *(_WORD *)(a1 + 96) = 1;
  }
  return *(double *)v2.i64;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6 = a3;
  uint64_t v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = &unk_1F1722C20;
  double v9 = 900.0;
  if ((v6 & 0x10) == 0) {
    double v9 = 0.0;
  }
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(void *)(v8 + 104) = 0;
  *(void *)(v8 + 112) = 0;
  *(void *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsCumulative>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_WORD *)(a1 + 536) = 1;
  *(unsigned char *)(a1 + 538) = 0;
  *(unsigned char *)(a1 + 540) = 0;
  *(void *)(a1 + 544) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(void *)(a1 + 584) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);

  JUMPOUT(0x1C187B8A0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1F1722C20;
  int8x16_t v2 = *(void **)(a1 + 568);
  if (v2)
  {
    *(void *)(a1 + 576) = v2;
    operator delete(v2);
  }

  id v3 = *(void **)(a1 + 504);
  if (v3)
  {
    *(void *)(a1 + 512) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsCumulative>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(unsigned char *)(result + 536) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::setDateInterval(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 copy];
  uint64_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;

  uint64_t v5 = [v6 startDate];
  [v5 timeIntervalSinceReferenceDate];
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_configureForStartTime(a1);
}

void sub_1BD06A040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(void *)(a1 + 40))
  {
    id v5 = v3;
    [v3 timeIntervalSinceReferenceDate];
    *(void *)(a1 + 544) = v4;
    id v3 = v5;
  }
}

void sub_1BD06A0B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::setStatisticsConfiguration(id *a1, void *a2)
{
  objc_storeStrong(a1 + 69, a2);
  id v7 = a2;
  id v4 = a1[69];
  id v5 = a1[66];
  a1[66] = v4;
  id v6 = v4;

  objc_storeStrong(a1 + 19, a1[66]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (*(void *)(a1 + 40)) {
    return 1;
  }
  BOOL v7 = *(void *)(a1 + 224) == *(void *)(a1 + 216) && *(uint64_t *)(a1 + 248) < 1
    || HKIntervalMask<double>::firstDifference(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)a2, *(void *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (v7) {
    return 1;
  }
  double v9 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128);

  return v9(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::setStatisticsHandler(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 copy];
  id v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v3;
}

void sub_1BD06A29C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::dataSource(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));

  return WeakRetained;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::currentStatistics(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 536))
  {
    double v1 = 0;
  }
  else
  {
    HDStatisticsBucket<HDStatisticsCumulative>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
    HDStatisticsBucket<HDStatisticsCumulative>::_updateSourceOrder((uint64_t)v4);
    HDStatisticsBucket<HDStatisticsCumulative>::_mergeThroughTime((uint64_t)v4, v4[1]);
    double v1 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_statisticsFromFinishedBucket(a1, v4);
    HDStatisticsBucket<HDStatisticsCumulative>::~HDStatisticsBucket((uint64_t)v4);
  }

  return v1;
}

void sub_1BD06A36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(a1 + 64);
  BOOL v7 = v6;
  if (v6)
  {
    uint64_t v8 = [v6 startDate];
    [v8 timeIntervalSinceReferenceDate];
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    uint64_t v10 = [v7 endDate];
    [v10 timeIntervalSinceReferenceDate];
    double v12 = v11;
    double v13 = *(double *)(a2 + 8);

    if (v12 < v13) {
      goto LABEL_9;
    }
  }
  if (!*(unsigned char *)(a1 + 538))
  {
LABEL_11:
    uint64_t v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 537))
  {
LABEL_9:
    uint64_t v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(unsigned char *)(a1 + 539)) {
      goto LABEL_11;
    }
    unint64_t v17 = *(void *)(a1 + 576);
    unint64_t v18 = *(void *)(a1 + 584);
    if (v17 >= v18)
    {
      uint64_t v22 = *(void *)(a1 + 568);
      unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      unint64_t v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24) {
        unint64_t v24 = 2 * v25;
      }
      if (v25 >= 0x333333333333333) {
        unint64_t v26 = 0x666666666666666;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26) {
        unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      }
      else {
        uint64_t v27 = 0;
      }
      unint64_t v28 = v26 + 40 * v23;
      unint64_t v29 = v26 + 40 * v27;
      long long v30 = *(_OWORD *)a2;
      long long v31 = *(_OWORD *)(a2 + 16);
      *(void *)(v28 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      unint64_t v21 = v28 + 40;
      long long v32 = *(char **)(a1 + 576);
      double v33 = *(char **)(a1 + 568);
      if (v32 != v33)
      {
        do
        {
          long long v34 = *(_OWORD *)(v32 - 40);
          long long v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        long long v32 = *(char **)(a1 + 568);
      }
      *(void *)(a1 + 568) = v28;
      *(void *)(a1 + 576) = v21;
      *(void *)(a1 + 584) = v29;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      long long v19 = *(_OWORD *)a2;
      long long v20 = *(_OWORD *)(a2 + 16);
      *(void *)(v17 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      unint64_t v21 = v17 + 40;
    }
    *(void *)(a1 + 576) = v21;
    goto LABEL_9;
  }
  int v14 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
  uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1BD06A5DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = v5;
  if (*(unsigned char *)(a1 + 538))
  {
    uint64_t v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 538) = 1;
  uint64_t v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    uint64_t v7 = 0;
    goto LABEL_82;
  }
  uint64_t v65 = v6;
  if (*(unsigned char *)(a1 + 537)) {
    goto LABEL_5;
  }
  double v9 = *(void **)(a1 + 560);
  if (!v9)
  {
    id v68 = 0;
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 40))
  {
LABEL_5:
    int v8 = 0;
    id v68 = 0;
    goto LABEL_29;
  }
  [v9 sortUsingComparator:&__block_literal_global_634];
  id v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v10 = *(id *)(a1 + 560);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  if (!v11)
  {

    id v12 = 0;
    goto LABEL_27;
  }
  id v12 = 0;
  uint64_t v13 = *(void *)v70;
  do
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (*(void *)v70 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(id *)(*((void *)&v69 + 1) + 8 * i);
      BOOL v16 = v15;
      if (v12)
      {
        unint64_t v17 = [v15 startDate];
        unint64_t v18 = [v12 endDate];
        int v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          long long v20 = [v16 endDate];
          unint64_t v21 = [v12 endDate];
          int v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22) {
            goto LABEL_21;
          }
          id v23 = objc_alloc(MEMORY[0x1E4F28C18]);
          unint64_t v24 = [v12 startDate];
          unint64_t v25 = [v16 endDate];
          id v26 = (id)[v23 initWithStartDate:v24 endDate:v25];
        }
        else
        {
          [v68 addObject:v12];
          id v26 = v16;
        }
        id v12 = v26;
      }
      else
      {
        id v12 = v15;
      }
LABEL_21:
    }
    uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  }
  while (v11);

  if (v12) {
    [v68 addObject:v12];
  }
LABEL_27:

LABEL_28:
  int v8 = 1;
LABEL_29:
  uint64_t v27 = *(void **)(a1 + 560);
  *(void *)(a1 + 560) = 0;

  *(unsigned char *)(a1 + 537) = 0;
  if (!v8)
  {
    unint64_t v38 = *(void *)(a1 + 568);
    *(void *)(a1 + 584) = 0;
    *(void *)(a1 + 576) = 0;
    *(void *)(a1 + 568) = 0;
    unint64_t v39 = v38;
    goto LABEL_47;
  }
  unint64_t v28 = [v68 lastObject];
  if (v28)
  {
    unint64_t v29 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_currentBucketInterval(a1);
    long long v30 = [v29 endDate];
    long long v31 = [v28 endDate];
    int v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      double v33 = [v28 endDate];
      [v33 timeIntervalSinceReferenceDate];
      double v35 = v34;

      uint64_t v36 = *(void *)(a1 + 568);
      BOOL v37 = *(long long **)(a1 + 576);
      while ((long long *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((long long *)v36 != v37)
          {
            double v40 = (long long *)(v36 + 40);
            if ((long long *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  long long v41 = *v40;
                  long long v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)uint64_t v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                double v40 = (long long *)((char *)v40 + 40);
              }
              while (v40 != v37);
              BOOL v37 = *(long long **)(a1 + 576);
            }
          }
          if ((long long *)v36 != v37) {
            *(void *)(a1 + 576) = v36;
          }
          break;
        }
        v36 += 40;
      }
    }
  }
  unint64_t v38 = *(void *)(a1 + 568);
  unint64_t v39 = *(void *)(a1 + 576);
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 576) = 0;
  if (![v68 count]) {
    goto LABEL_60;
  }
LABEL_47:
  id v43 = v68;
  long long __p = (void *)v38;
  if (v43)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v44 = v43;
    uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v70;
      while (2)
      {
        for (uint64_t j = 0; j != v45; ++j)
        {
          if (*(void *)v70 != v46) {
            objc_enumerationMutation(v44);
          }
          id v48 = *(id *)(*((void *)&v69 + 1) + 8 * j);
          int v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_primitiveInvalidateInterval((id *)a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
        if (v45) {
          continue;
        }
        break;
      }
    }

LABEL_59:
    unint64_t v38 = (unint64_t)__p;
LABEL_60:
    unint64_t v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v51;
    }
    int v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    long long __p = (void *)v38;
    if (v39 != v38)
    {
      uint64_t v54 = v38;
      uint64_t v50 = v67;
      do
      {
        int v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_primitiveAddSample(a1, v54, 1, v50);
        int v53 = v55;
        v54 += 40;
        if (v54 == v39) {
          char v56 = 0;
        }
        else {
          char v56 = v55;
        }
        uint64_t v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_primitiveInvalidateInterval((id *)a1, 0, v67))goto LABEL_59; {
LABEL_70:
    }
    int v53 = 0;
  }
  if (*(void *)(a1 + 40) && *(void *)(a1 + 512) != *(void *)(a1 + 504))
  {
    do
    {
      uint64_t v57 = objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(void *)(a1 + 112) + 1, v50, v65);
      HDStatisticsBucket<HDStatisticsCumulative>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsCumulative>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      unint64_t v58 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_statisticsFromFinishedBucket(a1, (double *)(a1 + 120));
      uint64_t v59 = [v57 startDate];
      [v59 timeIntervalSinceReferenceDate];
      double v61 = v60;
      uint64_t v62 = [v57 endDate];
      [v62 timeIntervalSinceReferenceDate];
      HDStatisticsCollectionEngine<HDStatisticsCumulative>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_notifyForCurrentBucket(a1);
    }
    while (*(void *)(a1 + 512) != *(void *)(a1 + 504));
  }
  *(unsigned char *)(a1 + 538) = 0;
  if (__p) {
    operator delete(__p);
  }

  if (v53)
  {
    if (*(unsigned char *)(a1 + 540))
    {
      *(unsigned char *)(a1 + 540) = 0;
      id v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_notifyForCurrentBucket(a1);
      uint64_t v7 = 1;
      goto LABEL_82;
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v6 = v65;
LABEL_82:
  *(unsigned char *)(a1 + 538) = 0;
LABEL_83:

  return v7;
}

void sub_1BD06ACD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    *(unsigned char *)(v13 + 538) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::enableImmediateSampleInsertion(uint64_t result)
{
  *(unsigned char *)(result + 539) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(unsigned char *)(a1 + 538)) {
      goto LABEL_12;
    }
    uint64_t v7 = 0;
LABEL_14:
    uint64_t v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_primitiveInvalidateInterval((id *)a1, v7, a3);
    goto LABEL_15;
  }
  uint64_t v7 = [v6 dateIntervalForIntervalsContainingInterval:v5];

  if (!*(unsigned char *)(a1 + 538)) {
    goto LABEL_14;
  }
  if (!v7)
  {
LABEL_12:
    id v12 = *(void **)(a1 + 560);
    *(void *)(a1 + 560) = 0;

    uint64_t v7 = 0;
    uint64_t v11 = 1;
    *(unsigned char *)(a1 + 537) = 1;
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 537))
  {
    int v8 = *(void **)(a1 + 560);
    if (!v8)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      id v10 = *(void **)(a1 + 560);
      *(void *)(a1 + 560) = v9;

      int v8 = *(void **)(a1 + 560);
    }
    [v8 addObject:v7];
  }
  uint64_t v11 = 1;
LABEL_15:

  return v11;
}

void sub_1BD06AFD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    *(unsigned char *)(a1 + 536) = 1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsCumulativeE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v9[3] = &unk_1E63043E8;
    uint64_t v12 = a1;
    id v10 = v5;
    id v11 = WeakRetained;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 112))(a1, v9, a3);
    if (v7 && *(unsigned char *)(a1 + 536) && !*(void *)(a1 + 40)) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_configureForStartTime(a1);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to query for initial statistics: no data source available.");
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1BD06B12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::reset(uint64_t result)
{
  *(unsigned char *)(result + 536) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 encodeBool:*(unsigned __int8 *)(a1 + 536) forKey:@"needs_config"];
  id v12 = v3;
  int v32 = &unk_1F1726FA0;
  double v33 = 0;
  int v38 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
  LOBYTE(v38) = 1;
  uint64_t v34 = v4;
  uint64_t v35 = 0;
  statistics::StatisticsEngine::makeCurrentBucket((uint64_t)&v32);
  uint64_t v13 = &unk_1F171B9C8;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  int v31 = 511;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 0;
  int8x16_t v14 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  uint64_t v5 = *(void *)(a1 + 136);
  char v29 = *(unsigned char *)(a1 + 144);
  char v30 = *(unsigned char *)(a1 + 145);
  BOOL v28 = *(_DWORD *)(a1 + 148) == 0;
  int8x16_t v15 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  uint64_t v7 = *(int8x16_t **)(a1 + 216);
  if (v7 != *(int8x16_t **)(a1 + 224))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v7, *v7, 8uLL);
    int8x16_t v40 = v7[1];
    char v43 = 0;
    HIBYTE(v42) = v7[2].i8[9];
    LOBYTE(v42) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>();
  }
  statistics::StatisticsBucket::makeStatistics((uint64_t)&v13);
  HDStatisticsCumulative::archive((int8x16_t *)(a1 + 240), (uint64_t)&v39);
  statistics::Statistics::operator=(*((statistics **)&v22 + 1), (uint64_t)&v39);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v39);
  uint64_t v8 = *(void *)(a1 + 296);
  if (v8 != a1 + 304)
  {
    HDStatisticsCumulative::archive((int8x16_t *)(v8 + 40), (uint64_t)&v39);
    uint64_t v9 = *(void *)(v8 + 32);
    v46 |= 0x200u;
    uint64_t v45 = v9;
    PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>();
  }
  id v10 = *(int8x16_t **)(a1 + 184);
  if (v10 != *(int8x16_t **)(a1 + 192))
  {
    unint64_t v39 = (char *)&unk_1F1727540;
    v41.i32[0] = 3;
    int8x16_t v40 = vextq_s8(*v10, *v10, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>();
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v13);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v13);
  id v11 = *(int8x16_t **)(a1 + 504);
  if (v11 != *(int8x16_t **)(a1 + 512))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v11, *v11, 8uLL);
    int8x16_t v40 = v11[1];
    __int16 v42 = 0;
    char v43 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>();
  }
  PB::Writer::Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v39);
  [v12 encodeBytes:v40.i64[0] length:&v39[-v40.i64[0]] forKey:@"hdsce_archived_representation"];
  PB::Writer::~Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);
}

void sub_1BD06B528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v67 = a2;
  *(unsigned char *)(a1 + 536) = [v67 decodeBoolForKey:@"needs_config"];
  id v3 = v67;
  HDStatisticsBucket<HDStatisticsCumulative>::HDStatisticsBucket((uint64_t)v73, 0, -1.79769313e308, 1.79769313e308);
  long long v74 = 0u;
  long long v75 = 0u;
  v111[0] = 0;
  id v70 = v3;
  PB::Reader::Reader((PB::Reader *)v110, (const unsigned __int8 *)[v70 decodeBytesForKey:@"hdsce_archived_representation" returnedLength:v111]);
  uint64_t v69 = a1;
  double v103 = &unk_1F1726FA0;
  uint64_t v104 = 0;
  uint64_t v107 = 0;
  uint64_t v108 = 0;
  uint64_t v106 = 0;
  int v109 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v103, (PB::Reader *)v110);
  uint64_t v72 = v105;
  if (v104)
  {
    uint64_t v79 = 0;
    memset(v82, 0, sizeof(v82));
    uint64_t v88 = 0;
    long long v87 = 0;
    long long __p = 0u;
    long long v84 = 0u;
    memset(v85, 0, 42);
    long long v86 = &v87;
    long long v89 = 0u;
    long long v90 = 0u;
    int v91 = 1065353216;
    uint64_t v95 = 0;
    long long v93 = 0u;
    long long v94 = 0u;
    long long v92 = 0u;
    int v96 = 1065353216;
    long long v97 = 0u;
    long long v98 = 0u;
    int v99 = 1065353216;
    long long v100 = 0u;
    long long v101 = 0u;
    int v102 = 1065353216;
    int8x16_t v76 = vextq_s8(*(int8x16_t *)(v104 + 8), *(int8x16_t *)(v104 + 8), 8uLL);
    uint64_t v4 = *(void *)(v104 + 72);
    uint64_t v77 = *(void *)(v104 + 64);
    __int16 v78 = *(_WORD *)(v104 + 185);
    int8x16_t v80 = vextq_s8(*(int8x16_t *)(v104 + 24), *(int8x16_t *)(v104 + 24), 8uLL);
    uint64_t v81 = v4;
    uint64_t v6 = *(void *)(v104 + 80);
    uint64_t v5 = *(void *)(v104 + 88);
    id v68 = (void *)v104;
    if (v6 != v5)
    {
      unint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(*(void *)v6 + 24);
        uint64_t v9 = *(void *)(*(void *)v6 + 32);
        uint64_t v10 = *(void *)(*(void *)v6 + 8);
        uint64_t v11 = *(void *)(*(void *)v6 + 16);
        char v12 = *(unsigned char *)(*(void *)v6 + 41);
        char v13 = *(unsigned char *)(*(void *)v6 + 40);
        if (v7 >= (unint64_t)v84)
        {
          int8x16_t v14 = (void *)__p;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - __p) >> 4);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v84 - __p) >> 4) > v16) {
            unint64_t v16 = 0x5555555555555556 * ((uint64_t)(v84 - __p) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v84 - __p) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v17 = 0x555555555555555;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17)
          {
            unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            unint64_t v7 = *((void *)&__p + 1);
            int8x16_t v14 = (void *)__p;
          }
          else
          {
            uint64_t v18 = 0;
          }
          unint64_t v19 = v17 + 48 * v15;
          *(void *)unint64_t v19 = v9;
          *(void *)(v19 + 8) = v8;
          *(void *)(v19 + 16) = v10;
          *(void *)(v19 + 24) = v11;
          *(_WORD *)(v19 + 32) = 1;
          *(unsigned char *)(v19 + 40) = 0;
          *(unsigned char *)(v19 + 41) = v12;
          *(unsigned char *)(v19 + 42) = v13;
          unint64_t v20 = v19;
          if ((void *)v7 != v14)
          {
            do
            {
              long long v21 = *(_OWORD *)(v7 - 48);
              long long v22 = *(_OWORD *)(v7 - 32);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *(_OWORD *)(v20 - 48) = v21;
              *(_OWORD *)(v20 - 32) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while ((void *)v7 != v14);
            int8x16_t v14 = (void *)__p;
          }
          unint64_t v7 = v19 + 48;
          *(void *)&long long __p = v20;
          *((void *)&__p + 1) = v19 + 48;
          *(void *)&long long v84 = v17 + 48 * v18;
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)unint64_t v7 = v9;
          *(void *)(v7 + 8) = v8;
          *(void *)(v7 + 16) = v10;
          *(void *)(v7 + 24) = v11;
          *(_WORD *)(v7 + 32) = 1;
          *(unsigned char *)(v7 + 40) = 0;
          *(unsigned char *)(v7 + 41) = v12;
          *(unsigned char *)(v7 + 42) = v13;
          v7 += 48;
        }
        *((void *)&__p + 1) = v7;
        v6 += 8;
      }
      while (v6 != v5);
    }
    long long v23 = (void *)v68[13];
    if (v23)
    {
      uint64_t v24 = v23[19];
      uint64_t v25 = v23[3];
      uint64_t v26 = v23[14];
      if (v26)
      {
        int8x16_t v27 = *(int8x16_t *)(v26 + 24);
        uint64_t v28 = *(void *)(v26 + 8);
        unsigned __int8 v29 = 1;
        uint64_t v26 = *(void *)(v26 + 16);
      }
      else
      {
        unsigned __int8 v29 = 0;
        int8x16_t v27 = 0uLL;
        uint64_t v28 = 0;
      }
      *((void *)&v84 + 1) = v24;
      v85[0] = v25;
      *(int8x16_t *)&v85[1] = vextq_s8(v27, v27, 8uLL);
      v85[3] = v28;
      v85[4] = v26;
      LOWORD(v85[5]) = v29;
    }
    uint64_t v30 = v68[17];
    uint64_t v31 = v68[18];
    while (v30 != v31)
    {
      int v32 = *(void **)v30;
      uint64_t v33 = *(void *)(*(void *)v30 + 112);
      if (v33)
      {
        int8x16_t v71 = *(int8x16_t *)(v33 + 24);
        uint64_t v34 = *(void *)(v33 + 8);
        char v35 = 1;
        uint64_t v36 = *(void *)(v33 + 16);
      }
      else
      {
        uint64_t v36 = 0;
        char v35 = 0;
        uint64_t v34 = 0;
        int8x16_t v71 = 0u;
      }
      uint64_t v37 = v32[19];
      uint64_t v38 = v32[3];
      uint64_t v39 = v32[18];
      int8x16_t v40 = &v87;
      int8x16_t v41 = &v87;
      __int16 v42 = v87;
      if (v87)
      {
        do
        {
          while (1)
          {
            int8x16_t v41 = (uint64_t **)v42;
            uint64_t v43 = v42[4];
            if (v43 <= v39) {
              break;
            }
            __int16 v42 = *v41;
            int8x16_t v40 = v41;
            if (!*v41) {
              goto LABEL_39;
            }
          }
          if (v43 >= v39)
          {
            uint64_t v45 = (char *)v41;
            goto LABEL_42;
          }
          __int16 v42 = v41[1];
        }
        while (v42);
        int8x16_t v40 = v41 + 1;
      }
LABEL_39:
      uint64_t v45 = (char *)operator new(0x60uLL);
      *((void *)v45 + 4) = v39;
      *(_OWORD *)(v45 + 40) = 0u;
      *(_OWORD *)(v45 + 56) = 0u;
      *(_OWORD *)(v45 + 72) = 0u;
      *((void *)v45 + 11) = 0;
      *(void *)uint64_t v45 = 0;
      *((void *)v45 + 1) = 0;
      *((void *)v45 + 2) = v41;
      *int8x16_t v40 = (uint64_t *)v45;
      int v44 = (uint64_t *)v45;
      if (*v86)
      {
        long long v86 = (uint64_t **)*v86;
        int v44 = *v40;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v87, v44);
      ++v88;
LABEL_42:
      *((void *)v45 + 5) = v37;
      *((void *)v45 + 6) = v38;
      *(int8x16_t *)(v45 + 56) = vextq_s8(v71, v71, 8uLL);
      *((void *)v45 + 9) = v34;
      *((void *)v45 + 10) = v36;
      v45[88] = v35;
      v30 += 8;
      v45[89] = 0;
    }
    uint64_t v46 = v68[5];
    for (uint64_t i = v68[6]; v46 != i; v46 += 8)
    {
      double v49 = *(double *)(*(void *)v46 + 8);
      double v48 = *(double *)(*(void *)v46 + 16);
      if (v49 >= v48) {
        double v50 = *(double *)(*(void *)v46 + 16);
      }
      else {
        double v50 = *(double *)(*(void *)v46 + 8);
      }
      if (v48 < v49) {
        double v48 = *(double *)(*(void *)v46 + 8);
      }
      HKIntervalMask<double>::_insertInterval(v82, v50, v48);
    }
    HDStatisticsBucket<HDStatisticsCumulative>::operator=((uint64_t)v73, (uint64_t)&v76);
    HDStatisticsBucket<HDStatisticsCumulative>::~HDStatisticsBucket((uint64_t)&v76);
  }
  uint64_t v51 = v106;
  uint64_t v52 = v107;
  if (v106 != v107)
  {
    unint64_t v53 = *((void *)&v74 + 1);
    do
    {
      uint64_t v54 = *(void *)(*(void *)v51 + 24);
      uint64_t v55 = *(void *)(*(void *)v51 + 32);
      uint64_t v56 = *(void *)(*(void *)v51 + 8);
      uint64_t v57 = *(void *)(*(void *)v51 + 16);
      if (v53 >= (unint64_t)v75)
      {
        unint64_t v58 = (void *)v74;
        unint64_t v59 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v53 - v74) >> 3);
        unint64_t v60 = v59 + 1;
        if (v59 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(v75 - v74) >> 3) > v60) {
          unint64_t v60 = 0x999999999999999ALL * ((uint64_t)(v75 - v74) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v75 - v74) >> 3) >= 0x333333333333333) {
          unint64_t v61 = 0x666666666666666;
        }
        else {
          unint64_t v61 = v60;
        }
        if (v61)
        {
          unint64_t v61 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v61);
          unint64_t v53 = *((void *)&v74 + 1);
          unint64_t v58 = (void *)v74;
        }
        else
        {
          uint64_t v62 = 0;
        }
        unint64_t v63 = v61 + 40 * v59;
        *(void *)unint64_t v63 = v55;
        *(void *)(v63 + 8) = v54;
        *(void *)(v63 + 16) = v56;
        *(void *)(v63 + 24) = v57;
        *(_WORD *)(v63 + 32) = 1;
        unint64_t v64 = v63;
        if ((void *)v53 != v58)
        {
          do
          {
            long long v65 = *(_OWORD *)(v53 - 40);
            long long v66 = *(_OWORD *)(v53 - 24);
            *(_WORD *)(v64 - 8) = *(_WORD *)(v53 - 8);
            *(_OWORD *)(v64 - 24) = v66;
            *(_OWORD *)(v64 - 40) = v65;
            v64 -= 40;
            v53 -= 40;
          }
          while ((void *)v53 != v58);
          unint64_t v58 = (void *)v74;
        }
        unint64_t v53 = v63 + 40;
        *(void *)&long long v74 = v64;
        *((void *)&v74 + 1) = v63 + 40;
        *(void *)&long long v75 = v61 + 40 * v62;
        if (v58) {
          operator delete(v58);
        }
      }
      else
      {
        *(void *)unint64_t v53 = v55;
        *(void *)(v53 + 8) = v54;
        *(void *)(v53 + 16) = v56;
        *(void *)(v53 + 24) = v57;
        *(_WORD *)(v53 + 32) = 1;
        v53 += 40;
      }
      *((void *)&v74 + 1) = v53;
      v51 += 8;
    }
    while (v51 != v52);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v103);

  HDStatisticsCollectionEngine<HDStatisticsCumulative>::operator=((void *)(v69 + 112), (uint64_t)&v72);
  if ((void)v74)
  {
    *((void *)&v74 + 1) = v74;
    operator delete((void *)v74);
  }
  HDStatisticsBucket<HDStatisticsCumulative>::~HDStatisticsBucket((uint64_t)v73);
}

void sub_1BD06BC34(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)(v10 - 224));
  HDStatisticsCollectionEngine<HDStatisticsCumulative>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsCumulative>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 256;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 154) = 0u;
  *(void *)(a1 + 176) = a1 + 184;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 1065353216;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 1065353216;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 376) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsCumulative>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  int8x16_t v2 = *(void **)(a1 + 392);
  if (v2)
  {
    *(void *)(a1 + 400) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsCumulative>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsCumulative>::~HDStatisticsBucket(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 344);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 304);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 264);
  int8x16_t v2 = *(void **)(a1 + 240);
  if (v2)
  {
    *(void *)(a1 + 248) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 200);
  std::__tree<long>::destroy(*(void **)(a1 + 184));
  id v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(void *)(a1 + 104) = v3;
    operator delete(v3);
  }
  objc_destroyWeak((id *)(a1 + 88));
  uint64_t v4 = *(void **)(a1 + 64);
  if (v4)
  {
    *(void *)(a1 + 72) = v4;
    operator delete(v4);
  }

  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_configureForStartTime(uint64_t a1)
{
  uint64_t v29 = 0;
  int8x16_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
    uint64_t v4 = [v2 dateIntervalContainingDate:v3 index:&v29];

    uint64_t v5 = [v4 startDate];
    [v5 timeIntervalSinceReferenceDate];
    double v7 = v6;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
LABEL_5:
    double v13 = v9;

    goto LABEL_6;
  }
  id v10 = *(id *)(a1 + 64);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v11 = [v10 startDate];
    [v11 timeIntervalSinceReferenceDate];
    double v7 = v12;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
    goto LABEL_5;
  }
  double v7 = -1.79769313e308;
  double v13 = 1.79769313e308;
LABEL_6:

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsCumulative>::HDStatisticsBucket((uint64_t)v22, WeakRetained, v7, v13);

  if (*(void *)(a1 + 32) == 1) {
    char v24 = 1;
  }
  uint64_t v23 = *(void *)(a1 + 56);
  char v25 = *(unsigned char *)(a1 + 24) & 1;
  if (v28 != (char *)(a1 + 72)) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v28, *(char **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4);
  }
  objc_storeStrong(&v27, *(id *)(a1 + 552));
  if (!*(void *)(a1 + 40)) {
    int v26 = 0;
  }
  uint64_t v15 = v29;
  HDStatisticsBucket<HDStatisticsCumulative>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v22);
  uint64_t v18 = v15;
  HDStatisticsBucket<HDStatisticsCumulative>::HDStatisticsBucket((uint64_t)v19, (uint64_t)v17);
  long long __p = 0u;
  long long v21 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsCumulative>::operator=((void *)(a1 + 112), (uint64_t)&v18);

  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsCumulative>::~HDStatisticsBucket((uint64_t)v19);
  HDStatisticsBucket<HDStatisticsCumulative>::~HDStatisticsBucket((uint64_t)v17);
  *(unsigned char *)(a1 + 536) = 0;
  return HDStatisticsBucket<HDStatisticsCumulative>::~HDStatisticsBucket((uint64_t)v22);
}

void sub_1BD06C144(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *HDStatisticsCollectionEngine<HDStatisticsCumulative>::operator=(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  HDStatisticsBucket<HDStatisticsCumulative>::operator=((uint64_t)(a1 + 1), a2 + 8);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 49), (__n128 *)(a2 + 392));
  uint64_t v4 = *(void *)(a2 + 416);
  *(void *)(a2 + 416) = 0;
  uint64_t v5 = (void *)a1[52];
  a1[52] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsCumulative>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 96);
  double v7 = *(unsigned char **)(a2 + 104);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(void *)(a1 + 96) = v10;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(void *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  long long v12 = *(_OWORD *)(a2 + 120);
  long long v13 = *(_OWORD *)(a2 + 136);
  long long v14 = *(_OWORD *)(a2 + 152);
  uint64_t v15 = *(void *)(a2 + 168);
  *(void *)(a1 + 184) = 0;
  unint64_t v16 = (void *)(a1 + 184);
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 168) = v15;
  *(_OWORD *)(a1 + 152) = v14;
  *(_OWORD *)(a1 + 136) = v13;
  *(_OWORD *)(a1 + 120) = v12;
  *(void *)(a1 + 192) = 0;
  unint64_t v17 = *(void **)(a2 + 176);
  if (v17 != (void *)(a2 + 184))
  {
    uint64_t v18 = 0;
    unint64_t v19 = (void *)(a1 + 184);
    while (1)
    {
      uint64_t v20 = v17[4];
      long long v21 = (void *)(a1 + 184);
      if (v19 == v16) {
        goto LABEL_12;
      }
      long long v22 = v18;
      uint64_t v23 = (void *)(a1 + 184);
      if (v18)
      {
        do
        {
          long long v21 = v22;
          long long v22 = (void *)v22[1];
        }
        while (v22);
      }
      else
      {
        do
        {
          long long v21 = (void *)v23[2];
          BOOL v24 = *v21 == (void)v23;
          uint64_t v23 = v21;
        }
        while (v24);
      }
      if (v21[4] < v20)
      {
LABEL_12:
        if (v18) {
          char v25 = (uint64_t **)v21;
        }
        else {
          char v25 = (uint64_t **)(a1 + 184);
        }
        if (v18) {
          int v26 = (uint64_t **)(v21 + 1);
        }
        else {
          int v26 = (uint64_t **)(a1 + 184);
        }
        if (!*v26)
        {
LABEL_28:
          uint64_t v29 = (uint64_t *)operator new(0x60uLL);
          long long v30 = *((_OWORD *)v17 + 2);
          long long v31 = *((_OWORD *)v17 + 3);
          long long v32 = *((_OWORD *)v17 + 5);
          *((_OWORD *)v29 + 4) = *((_OWORD *)v17 + 4);
          *((_OWORD *)v29 + 5) = v32;
          *((_OWORD *)v29 + 2) = v30;
          *((_OWORD *)v29 + 3) = v31;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 176), (uint64_t)v25, v26, v29);
        }
      }
      else
      {
        int v26 = (uint64_t **)(a1 + 184);
        char v25 = (uint64_t **)(a1 + 184);
        if (!v18) {
          goto LABEL_28;
        }
        id v27 = v18;
        while (1)
        {
          while (1)
          {
            char v25 = (uint64_t **)v27;
            uint64_t v28 = v27[4];
            if (v28 <= v20) {
              break;
            }
            id v27 = *v25;
            int v26 = v25;
            if (!*v25) {
              goto LABEL_28;
            }
          }
          if (v28 >= v20) {
            break;
          }
          id v27 = v25[1];
          if (!v27)
          {
            int v26 = v25 + 1;
            goto LABEL_28;
          }
        }
      }
      uint64_t v33 = (void *)v17[1];
      if (v33)
      {
        do
        {
          uint64_t v34 = v33;
          uint64_t v33 = (void *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          uint64_t v34 = (void *)v17[2];
          BOOL v24 = *v34 == (void)v17;
          unint64_t v17 = v34;
        }
        while (!v24);
      }
      if (v34 == (void *)(a2 + 184)) {
        break;
      }
      uint64_t v18 = (void *)*v16;
      unint64_t v19 = *(void **)(a1 + 176);
      unint64_t v17 = v34;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 200, a2 + 200);
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 240), *(const void **)(a2 + 240), *(void *)(a2 + 248), (uint64_t)(*(void *)(a2 + 248) - *(void *)(a2 + 240)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 264, a2 + 264);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 304, a2 + 304);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 344, a2 + 344);
  return a1;
}

void sub_1BD06C4D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, id *location, void **a12)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v16);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v15);
  unint64_t v19 = *v14;
  if (*v14)
  {
    *(void *)(v12 + 248) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v13);
  std::__tree<long>::destroy(*v17);
  uint64_t v20 = *a10;
  if (*a10)
  {
    *(void *)(v12 + 104) = v20;
    operator delete(v20);
  }
  objc_destroyWeak(location);
  long long v21 = *a12;
  if (*a12)
  {
    *(void *)(v12 + 72) = v21;
    operator delete(v21);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsCumulative>::operator=(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  long long v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v5;

  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  id WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  uint64_t v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(void *)(a1 + 104) = v9;
    operator delete(v9);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 96) = 0;
  long long v10 = *(_OWORD *)(a2 + 136);
  long long v11 = *(_OWORD *)(a2 + 152);
  long long v12 = *(_OWORD *)(a2 + 120);
  uint64_t v14 = a1 + 184;
  uint64_t v13 = *(void **)(a1 + 184);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(_OWORD *)(a1 + 136) = v10;
  *(_OWORD *)(a1 + 152) = v11;
  *(_OWORD *)(a1 + 120) = v12;
  std::__tree<long>::destroy(v13);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  uint64_t v15 = (void *)(a2 + 184);
  uint64_t v16 = *(void *)(a2 + 184);
  *(void *)(a1 + 184) = v16;
  uint64_t v17 = *(void *)(a2 + 192);
  *(void *)(a1 + 192) = v17;
  if (v17)
  {
    *(void *)(v16 + 16) = v14;
    *(void *)(a2 + 176) = v15;
    void *v15 = 0;
    *(void *)(a2 + 192) = 0;
  }
  else
  {
    *(void *)(a1 + 176) = v14;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 200, (uint64_t *)(a2 + 200));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 240, (__n128 *)(a2 + 240));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 264, (uint64_t *)(a2 + 264));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 304, (uint64_t *)(a2 + 304));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 344, (uint64_t *)(a2 + 344));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_statisticsFromFinishedBucket(uint64_t a1, double *a2)
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  double v5 = *a2;
  id v6 = objc_alloc(MEMORY[0x1E4F1C9C8]);
  long long v7 = a2 + 5;
  if (v5 != -1.79769313e308) {
    long long v7 = a2;
  }
  id v88 = (id)[v6 initWithTimeIntervalSinceReferenceDate:*v7];
  uint64_t v92 = (uint64_t)a2;
  if (a2[1] == 1.79769313e308) {
    uint64_t v8 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:a2[6]];
  }
  else {
    uint64_t v8 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:a2[1]];
  }
  uint64_t v9 = (void *)v8;
  id v10 = *(id *)(a1 + 16);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v11 = *(id *)(a1 + 16);
    if ([v11 shouldUseUnderlyingTypeForStatistics])
    {
      uint64_t v12 = [v11 underlyingSampleType];

      id v10 = (id)v12;
    }
  }
  uint64_t v13 = (void *)[objc_alloc(MEMORY[0x1E4F2B5B0]) initWithDataType:v10 startDate:v88 endDate:v9];
  if (*(unsigned char *)(a1 + 24))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      long long v90 = v9;
      id v15 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      uint64_t v17 = *(uint64_t **)(v92 + 240);
      uint64_t v16 = *(uint64_t **)(v92 + 248);
      while (v17 != v16)
      {
        uint64_t v18 = *v17;
        unint64_t v2 = (unint64_t)objc_loadWeakRetained((id *)(a1 + 48));
        unint64_t v19 = [(id)v2 sourceForSourceID:v18];

        if (v19)
        {
          if (([v15 containsObject:v19] & 1) == 0) {
            [v15 addObject:v19];
          }
        }

        ++v17;
      }
      uint64_t v20 = (void *)[v15 copy];
      [v13 _setSources:v20];

      uint64_t v9 = v90;
    }
  }

  v97[0] = &unk_1F1722CF0;
  long long v98 = v97;
  id v89 = v13;
  int v91 = [*(id *)(a1 + 16) canonicalUnit];
  long long v21 = *(_OWORD *)(v92 + 136);
  *(_OWORD *)long long __p = *(_OWORD *)(v92 + 120);
  long long v94 = v21;
  long long v95 = *(_OWORD *)(v92 + 152);
  uint64_t v96 = *(void *)(v92 + 168);
  if (!v98) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v22 = (*(uint64_t (**)(void *, void **))(*v98 + 48))(v98, __p);
  uint64_t v23 = *(void *)(v22 + 8);
  double v25 = *(double *)(v22 + 16);
  double v24 = *(double *)(v22 + 24);
  double v26 = *(double *)(v22 + 32);
  id v27 = [MEMORY[0x1E4F2B370] quantityWithUnit:v91 doubleValue:*(double *)v22];
  [v89 setSumQuantity:v27];

  [v89 setDataCount:v23];
  uint64_t v28 = *(void *)(a1 + 24);
  char v87 = v28;
  if ((v28 & 0x20) != 0)
  {
    uint64_t v29 = [MEMORY[0x1E4F2B370] quantityWithUnit:v91 doubleValue:v25];
    [v89 setMostRecentQuantity:v29];

    long long v30 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v24, v26);
    [v89 setMostRecentQuantityDateInterval:v30];

    uint64_t v28 = *(void *)(a1 + 24);
  }
  if ((v28 & 1) == 0) {
    goto LABEL_130;
  }
  id v86 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v85 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  if ((v87 & 0x20) != 0)
  {
    id v82 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v83 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else
  {
    id v82 = 0;
    id v83 = 0;
  }
  *(_OWORD *)long long __p = 0u;
  long long v94 = 0u;
  LODWORD(v95) = 1065353216;
  long long v31 = *(void **)(v92 + 176);
  if (v31 == (void *)(v92 + 184)) {
    goto LABEL_127;
  }
  do
  {
    long long v32 = HDStatisticsBucket<HDStatisticsCumulative>::_bundleIdentifierForSourceID(v92, v31[4]);
    uint64_t v33 = v32;
    if (!v32) {
      goto LABEL_103;
    }
    unint64_t v34 = [v32 hash];
    unint64_t v35 = v34;
    unint64_t v36 = (unint64_t)__p[1];
    if (!__p[1]) {
      goto LABEL_46;
    }
    uint8x8_t v37 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v37.i16[0] = vaddlv_u8(v37);
    unint64_t v38 = v37.u32[0];
    if (v37.u32[0] > 1uLL)
    {
      unint64_t v2 = v34;
      if ((void *)v34 >= __p[1]) {
        unint64_t v2 = v34 % (unint64_t)__p[1];
      }
    }
    else
    {
      unint64_t v2 = ((unint64_t)__p[1] - 1) & v34;
    }
    uint64_t v39 = (void **)*((void *)__p[0] + v2);
    if (!v39 || (int8x16_t v40 = (char *)*v39) == 0)
    {
LABEL_46:
      int8x16_t v40 = (char *)operator new(0x50uLL);
      *(void *)int8x16_t v40 = 0;
      *((void *)v40 + 1) = v35;
      *((void *)v40 + 2) = v33;
      *(_OWORD *)(v40 + 24) = 0u;
      *(_OWORD *)(v40 + 40) = 0u;
      *(_OWORD *)(v40 + 56) = 0u;
      *((void *)v40 + 9) = 0;
      float v46 = (float)(unint64_t)(*((void *)&v94 + 1) + 1);
      if (v36 && (float)(*(float *)&v95 * (float)v36) >= v46)
      {
LABEL_92:
        uint64_t v62 = __p[0];
        unint64_t v63 = (void *)*((void *)__p[0] + v2);
        if (v63)
        {
          *(void *)int8x16_t v40 = *v63;
        }
        else
        {
          *(void *)int8x16_t v40 = v94;
          *(void *)&long long v94 = v40;
          v62[v2] = &v94;
          if (!*(void *)v40)
          {
LABEL_101:
            ++*((void *)&v94 + 1);
            goto LABEL_102;
          }
          unint64_t v64 = *(void *)(*(void *)v40 + 8);
          if ((v36 & (v36 - 1)) != 0)
          {
            if (v64 >= v36) {
              v64 %= v36;
            }
          }
          else
          {
            v64 &= v36 - 1;
          }
          unint64_t v63 = (char *)__p[0] + 8 * v64;
        }
        void *v63 = v40;
        goto LABEL_101;
      }
      BOOL v47 = (v36 & (v36 - 1)) != 0;
      if (v36 < 3) {
        BOOL v47 = 1;
      }
      unint64_t v48 = v47 | (2 * v36);
      unint64_t v49 = vcvtps_u32_f32(v46 / *(float *)&v95);
      if (v48 <= v49) {
        int8x8_t prime = (int8x8_t)v49;
      }
      else {
        int8x8_t prime = (int8x8_t)v48;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v36 = (unint64_t)__p[1];
      if ((void *)*(void *)&prime > __p[1]) {
        goto LABEL_58;
      }
      if ((void *)*(void *)&prime < __p[1])
      {
        unint64_t v57 = vcvtps_u32_f32((float)*((unint64_t *)&v94 + 1) / *(float *)&v95);
        if (__p[1] < (void *)3
          || (uint8x8_t v58 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v58.i16[0] = vaddlv_u8(v58), v58.u32[0] > 1uLL))
        {
          unint64_t v57 = std::__next_prime(v57);
        }
        else
        {
          uint64_t v59 = 1 << -(char)__clz(v57 - 1);
          if (v57 >= 2) {
            unint64_t v57 = v59;
          }
        }
        if (*(void *)&prime <= v57) {
          int8x8_t prime = (int8x8_t)v57;
        }
        if (*(void *)&prime >= v36)
        {
          unint64_t v36 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_58:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v51 = operator new(8 * *(void *)&prime);
            uint64_t v52 = __p[0];
            __p[0] = v51;
            if (v52) {
              operator delete(v52);
            }
            uint64_t v53 = 0;
            __p[1] = (void *)prime;
            do
              *((void *)__p[0] + v53++) = 0;
            while (*(void *)&prime != v53);
            uint64_t v54 = (void **)v94;
            if ((void)v94)
            {
              unint64_t v55 = *(void *)(v94 + 8);
              uint8x8_t v56 = (uint8x8_t)vcnt_s8(prime);
              v56.i16[0] = vaddlv_u8(v56);
              if (v56.u32[0] > 1uLL)
              {
                if (v55 >= *(void *)&prime) {
                  v55 %= *(void *)&prime;
                }
              }
              else
              {
                v55 &= *(void *)&prime - 1;
              }
              *((void *)__p[0] + v55) = &v94;
              for (i = *v54; i; unint64_t v55 = v61)
              {
                unint64_t v61 = i[1];
                if (v56.u32[0] > 1uLL)
                {
                  if (v61 >= *(void *)&prime) {
                    v61 %= *(void *)&prime;
                  }
                }
                else
                {
                  v61 &= *(void *)&prime - 1;
                }
                if (v61 != v55)
                {
                  if (!*((void *)__p[0] + v61))
                  {
                    *((void *)__p[0] + v61) = v54;
                    goto LABEL_83;
                  }
                  *uint64_t v54 = (void *)*i;
                  void *i = **((void **)__p[0] + v61);
                  **((void **)__p[0] + v61) = i;
                  uint64_t i = v54;
                }
                unint64_t v61 = v55;
LABEL_83:
                uint64_t v54 = (void **)i;
                uint64_t i = (void *)*i;
              }
            }
            unint64_t v36 = (unint64_t)prime;
            goto LABEL_87;
          }
          int8x16_t v71 = __p[0];
          __p[0] = 0;
          if (v71) {
            operator delete(v71);
          }
          unint64_t v36 = 0;
          __p[1] = 0;
        }
      }
LABEL_87:
      if ((v36 & (v36 - 1)) != 0)
      {
        if (v35 >= v36) {
          unint64_t v2 = v35 % v36;
        }
        else {
          unint64_t v2 = v35;
        }
      }
      else
      {
        unint64_t v2 = (v36 - 1) & v35;
      }
      goto LABEL_92;
    }
    unint64_t v84 = (unint64_t)__p[1] - 1;
    while (1)
    {
      unint64_t v41 = *((void *)v40 + 1);
      if (v41 == v35) {
        break;
      }
      if (v38 > 1)
      {
        if (v41 >= v36) {
          v41 %= v36;
        }
      }
      else
      {
        v41 &= v84;
      }
      if (v41 != v2) {
        goto LABEL_46;
      }
LABEL_45:
      int8x16_t v40 = *(char **)v40;
      if (!v40) {
        goto LABEL_46;
      }
    }
    id v42 = *((id *)v40 + 2);
    id v43 = v33;
    int v44 = v43;
    if (v42 != v43)
    {
      char v45 = [v42 isEqualToString:v43];

      if (v45) {
        goto LABEL_102;
      }
      goto LABEL_45;
    }

LABEL_102:
    long long v65 = *(_OWORD *)(v31 + 5);
    long long v66 = *(_OWORD *)(v31 + 7);
    long long v67 = *(_OWORD *)(v31 + 9);
    *((void *)v40 + 9) = v31[11];
    *(_OWORD *)(v40 + 56) = v67;
    *(_OWORD *)(v40 + 40) = v66;
    *(_OWORD *)(v40 + 24) = v65;

LABEL_103:
    id v68 = (void *)v31[1];
    if (v68)
    {
      do
      {
        uint64_t v69 = v68;
        id v68 = (void *)*v68;
      }
      while (v68);
    }
    else
    {
      do
      {
        uint64_t v69 = (void *)v31[2];
        BOOL v70 = *v69 == (void)v31;
        long long v31 = v69;
      }
      while (!v70);
    }
    long long v31 = v69;
  }
  while (v69 != (void *)(v92 + 184));
  for (uint64_t j = (uint64_t **)v94; j; uint64_t j = (uint64_t **)*j)
  {
    uint64_t v73 = j[2];
    if (!v98
      || (objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v91, *(double *)(*(uint64_t (**)(void *, uint64_t *))(*v98 + 48))(v98, (uint64_t *)j + 3)), long long v74 = objc_claimAutoreleasedReturnValue(), objc_msgSend(v86, "setObject:forKeyedSubscript:", v74, v73), v74, !v98))
    {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    long long v75 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)((*(uint64_t (**)(void *, uint64_t *))(*v98 + 48))(v98, (uint64_t *)j + 3) + 8));
    [v85 setObject:v75 forKeyedSubscript:v73];

    if ((v87 & 0x20) != 0)
    {
      if (!v98) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v76 = (*(uint64_t (**)(void *, uint64_t *))(*v98 + 48))(v98, (uint64_t *)j + 3);
      double v77 = *(double *)(v76 + 24);
      double v78 = *(double *)(v76 + 32);
      uint64_t v79 = [MEMORY[0x1E4F2B370] quantityWithUnit:v91 doubleValue:*(double *)(v76 + 16)];
      [v82 setObject:v79 forKeyedSubscript:v73];

      int8x16_t v80 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v77, v78);
      [v83 setObject:v80 forKeyedSubscript:v73];
    }
  }
LABEL_127:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>>>::~__hash_table((uint64_t)__p);
  [v89 setSumQuantityBySource:v86];
  [v89 setDataCountBySource:v85];
  if ((v87 & 0x20) != 0)
  {
    [v89 setMostRecentQuantityBySource:v82];
    [v89 setMostRecentQuantityDateIntervalBySource:v83];
  }

LABEL_130:
  std::__function::__value_func<HDStatisticsCumulative const& ()(HDStatisticsCumulative const&)>::~__value_func[abi:ne180100](v97);

  return v89;
}

void sub_1BD06D180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  std::__function::__value_func<HDStatisticsCumulative const& ()(HDStatisticsCumulative const&)>::~__value_func[abi:ne180100](&a29);
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCumulative>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v2 = (void **)(a1 + 240);
  uint64_t v1 = *(void *)(a1 + 240);
  unint64_t v3 = *(void *)(a1 + 224);
  if (v3 != (*(void *)(a1 + 248) - v1) >> 3)
  {
    *(void *)(a1 + 248) = v1;
    std::vector<long long>::reserve((void **)(a1 + 240), v3);
    double v5 = *(void **)(a1 + 216);
    if (v5)
    {
      id v6 = *(char **)(a1 + 248);
      do
      {
        uint64_t v7 = v5[2];
        unint64_t v8 = *(void *)(a1 + 256);
        if ((unint64_t)v6 >= v8)
        {
          id v10 = (char *)*v2;
          uint64_t v11 = (v6 - (unsigned char *)*v2) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            id v10 = *(char **)(a1 + 240);
            id v6 = *(char **)(a1 + 248);
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v16 = (void *)(v14 + 8 * v11);
          *uint64_t v16 = v7;
          uint64_t v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            uint64_t v17 = *((void *)v6 - 1);
            v6 -= 8;
            *--uint64_t v16 = v17;
          }
          *(void *)(a1 + 240) = v16;
          *(void *)(a1 + 248) = v9;
          *(void *)(a1 + 256) = v14 + 8 * v15;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)id v6 = v7;
          uint64_t v9 = v6 + 8;
        }
        *(void *)(a1 + 248) = v9;
        double v5 = (void *)*v5;
        id v6 = v9;
      }
      while (v5);
    }
    uint64_t v18 = (id *)(a1 + 88);
    id WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      id v20 = objc_loadWeakRetained(v18);
      [v20 orderSourceIDs:v2];
    }
  }
}

void sub_1BD06D4B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCumulative>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2) {
    a2 = v4 * floor(a2 / v4);
  }
  double v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    uint64_t v125 = (void *)(a1 + 96);
    long long v121 = (double **)(a1 + 64);
    location = (id *)(a1 + 88);
    long long v116 = (void *)(a1 + 184);
    while (1)
    {
      uint64_t v6 = *(void *)(a1 + 96);
      uint64_t v7 = *(long long **)(a1 + 104);
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4);
      if (v8) {
        break;
      }
LABEL_133:
      *(double *)(a1 + 56) = a2;
LABEL_134:
      double v113 = *(double *)(a1 + 56);
      if (v113 == v5)
      {
        long long v114 = [MEMORY[0x1E4F28B00] currentHandler];
        long long v115 = [NSString stringWithUTF8String:"void HDStatisticsBucket<HDStatisticsCumulative>::_mergeThroughTime(double) [Statistics = HDStatisticsCumulative]"];
        [v114 handleFailureInFunction:v115 file:@"HDStatisticsBucket.hpp" lineNumber:234 description:@"Failed to make forward progress during statistics merge."];

        double v113 = *(double *)(a1 + 56);
      }
      double v5 = v113;
      if (v113 >= a2) {
        return;
      }
    }
    if (v8 != 1)
    {
      double v20 = a2;
      double v21 = a2;
      double v22 = v5;
      uint64_t v23 = *(void *)(a1 + 96);
      if ((long long *)v6 != v7)
      {
        do
        {
          double v24 = *(double *)(v23 + 8);
          double v25 = *(double *)(v23 + 16);
          if (v24 > v22 && v24 < v21) {
            double v21 = *(double *)(v23 + 8);
          }
          if (v25 > v5) {
            double v27 = *(double *)(v23 + 16);
          }
          else {
            double v27 = v20;
          }
          if (v25 < v20)
          {
            double v22 = v5;
            double v20 = v27;
          }
          v23 += 48;
        }
        while ((long long *)v23 != v7);
      }
      if (v20 >= v21) {
        double v28 = v21;
      }
      else {
        double v28 = v20;
      }
      double v29 = *(double *)(a1 + 16);
      if (v29 > 0.0)
      {
        double v30 = v29 * floor(v28 / v29);
        double v31 = v29 * floor((v29 + v5) / v29);
        if (v30 >= v31) {
          double v28 = v30;
        }
        else {
          double v28 = v31;
        }
      }
      *uint64_t v125 = 0;
      v125[1] = 0;
      v125[2] = 0;
      if ((long long *)v6 != v7)
      {
        if (v8 > 0x555555555555555) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        long long v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4));
        unint64_t v35 = *(char **)(a1 + 96);
        unint64_t v34 = *(char **)(a1 + 104);
        unint64_t v36 = v32;
        if (v34 != v35)
        {
          do
          {
            long long v37 = *((_OWORD *)v34 - 3);
            long long v38 = *((_OWORD *)v34 - 2);
            *(_OWORD *)(v36 - 21) = *(_OWORD *)(v34 - 21);
            *((_OWORD *)v36 - 3) = v37;
            *((_OWORD *)v36 - 2) = v38;
            v36 -= 48;
            v34 -= 48;
          }
          while (v34 != v35);
          unint64_t v34 = (char *)*v125;
        }
        *(void *)(a1 + 96) = v36;
        *(void *)(a1 + 104) = v32;
        *(void *)(a1 + 112) = &v32[48 * v33];
        if (v34) {
          operator delete(v34);
        }
      }
      HDStatisticsBucket<HDStatisticsCumulative>::_updateSourceOrder(a1);
      long long v118 = (long long *)v6;
      id WeakRetained = objc_loadWeakRetained(location);

      if (WeakRetained)
      {
        *(void *)&long long v127 = a1;
        unint64_t v40 = 126 - 2 * __clz(v8);
        if (v118 == v7) {
          uint64_t v41 = 0;
        }
        else {
          uint64_t v41 = v40;
        }
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*,false>((unint64_t)v118, v7, (uint64_t)&v127, v41, 1);
      }
      if (*(unsigned char *)(a1 + 25)) {
        id v119 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      }
      else {
        id v119 = 0;
      }
      if (v118 == v7)
      {
LABEL_112:
        uint64_t v96 = *(void **)(a1 + 176);
        if (v96 != v116)
        {
          do
          {
            long long v97 = (void *)v96[1];
            if (v97)
            {
              do
              {
                long long v98 = v97;
                long long v97 = (void *)*v97;
              }
              while (v97);
            }
            else
            {
              do
              {
                long long v98 = (void *)v96[2];
                BOOL v99 = *v98 == (void)v96;
                uint64_t v96 = v98;
              }
              while (!v99);
            }
            uint64_t v96 = v98;
          }
          while (v98 != v116);
        }
        *(double *)(a1 + 56) = v28;

        if (v118) {
          operator delete(v118);
        }
        goto LABEL_134;
      }
      uint64_t v120 = 0;
      char v44 = 0;
      char v45 = v118;
      while (2)
      {
        long long v46 = v45[1];
        long long v127 = *v45;
        long long v128 = v46;
        uint64_t v129 = *((void *)v45 + 4);
        uint64_t v47 = v46;
        double v48 = v28 - *((double *)&v127 + 1);
        double v49 = *(double *)&v46 - *((double *)&v127 + 1);
        if (v49 - (v28 - *((double *)&v127 + 1)) >= 0.01)
        {
          if (v48 < 0.01)
          {
            LOBYTE(v129) = 0;
            goto LABEL_61;
          }
          double v55 = v48 / v49 * *(double *)&v127;
          uint64_t v50 = *((void *)&v128 + 1);
          char v52 = BYTE1(v129);
          double v54 = *(double *)&v127 - v55;
          *(double *)&long long v127 = v55;
          *(double *)&long long v128 = v28;
          double v53 = v28;
          int v51 = v129;
          if ((_BYTE)v129) {
            goto LABEL_54;
          }
LABEL_61:
          uint64_t v59 = *(long long **)(a1 + 104);
          unint64_t v60 = *(void *)(a1 + 112);
          if ((unint64_t)v59 < v60)
          {
            long long v61 = *v45;
            long long v62 = v45[2];
            v59[1] = v45[1];
            v59[2] = v62;
            *uint64_t v59 = v61;
            unint64_t v63 = v59 + 3;
            goto LABEL_110;
          }
          unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v59 - *v125) >> 4);
          unint64_t v65 = v64 + 1;
          if (v64 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - *v125) >> 4);
          if (2 * v66 > v65) {
            unint64_t v65 = 2 * v66;
          }
          if (v66 >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v67 = 0x555555555555555;
          }
          else {
            unint64_t v67 = v65;
          }
          if (v67) {
            unint64_t v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v67);
          }
          else {
            uint64_t v68 = 0;
          }
          uint64_t v72 = (long long *)(v67 + 48 * v64);
          long long v73 = *v45;
          long long v74 = v45[2];
          v72[1] = v45[1];
          v72[2] = v74;
          *uint64_t v72 = v73;
          uint64_t v76 = *(char **)(a1 + 96);
          long long v75 = *(char **)(a1 + 104);
          double v77 = v72;
          if (v75 != v76)
          {
            do
            {
              long long v78 = *((_OWORD *)v75 - 3);
              long long v79 = *((_OWORD *)v75 - 2);
              *(long long *)((char *)v77 - 21) = *(_OWORD *)(v75 - 21);
              *(v77 - 3) = v78;
              *(v77 - 2) = v79;
              v77 -= 3;
              v75 -= 48;
            }
            while (v75 != v76);
            long long v75 = (char *)*v125;
          }
          unint64_t v63 = v72 + 3;
          *(void *)(a1 + 96) = v77;
          *(void *)(a1 + 104) = v72 + 3;
          *(void *)(a1 + 112) = v67 + 48 * v68;
          if (v75)
          {
            int8x16_t v80 = v75;
            goto LABEL_109;
          }
LABEL_110:
          *(void *)(a1 + 104) = v63;
        }
        else
        {
          uint64_t v50 = 0;
          int v51 = 0;
          char v52 = 0;
          double v53 = 0.0;
          uint64_t v47 = 0;
          double v54 = 0.0;
          if (!(_BYTE)v129) {
            goto LABEL_61;
          }
LABEL_54:
          char v123 = v52;
          uint64_t v124 = v50;
          HDRawQuantitySample::applyMask((uint64_t)&v127, v121);
          int v56 = *((unsigned __int8 *)v45 + 42);
          int v57 = *((unsigned __int8 *)v45 + 41);
          char v122 = *((unsigned char *)v45 + 40);
          if ((_BYTE)v129)
          {
            if (v44)
            {
              unint64_t v58 = *((void *)&v128 + 1);
              if (v120 == *((void *)&v128 + 1) || *(unsigned char *)(a1 + 24))
              {
                *(double *)(a1 + 120) = *(double *)&v127 + *(double *)(a1 + 120);
                if (!v56) {
                  ++*(void *)(a1 + 128);
                }
                int v56 = 1;
              }
            }
            else
            {
              *(double *)(a1 + 120) = *(double *)&v127 + *(double *)(a1 + 120);
              if (!v56) {
                ++*(void *)(a1 + 128);
              }
              int v56 = 1;
              unint64_t v58 = *((void *)&v128 + 1);
              uint64_t v120 = *((void *)&v128 + 1);
            }
            if (*(unsigned char *)(a1 + 25))
            {
              uint64_t v69 = HDStatisticsBucket<HDStatisticsCumulative>::_bundleIdentifierForSourceID(a1, v58);
              if (v69)
              {
                BOOL v70 = [v119 objectForKeyedSubscript:v69];
                int8x16_t v71 = v70;
                if (v70)
                {
                  if ([v70 longLongValue] != v58 && !*(unsigned char *)(a1 + 24)) {
                    goto LABEL_90;
                  }
                }
                else
                {
                  uint64_t v81 = [NSNumber numberWithLongLong:v58];
                  [v119 setObject:v81 forKeyedSubscript:v69];
                }
                unint64_t v82 = HDStatisticsBucket<HDStatisticsCumulative>::_canonicalSourceIDForSourceID(a1, v58);
                id v83 = HDStatisticsBucket<HDStatisticsCumulative>::_statisticsForSource(a1, v82);
                *(double *)id v83 = *(double *)&v127 + *(double *)v83;
                if (!v57) {
                  v83[1] = (uint64_t *)((char *)v83[1] + 1);
                }
                LOBYTE(v57) = 1;
LABEL_90:
              }
            }
            char v44 = 1;
          }
          if (v51)
          {
            BOOL v84 = v56 != 0;
            id v86 = *(char **)(a1 + 104);
            unint64_t v85 = *(void *)(a1 + 112);
            if ((unint64_t)v86 < v85)
            {
              *(double *)id v86 = v54;
              *((double *)v86 + 1) = v53;
              *((void *)v86 + 2) = v47;
              *((void *)v86 + 3) = v124;
              v86[32] = v51;
              v86[33] = v123;
              v86[40] = v122;
              v86[41] = v57;
              unint64_t v63 = v86 + 48;
              v86[42] = v84;
              goto LABEL_110;
            }
            int8x16_t v80 = (char *)*v125;
            unint64_t v87 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v86[-*v125] >> 4);
            unint64_t v88 = v87 + 1;
            if (v87 + 1 > 0x555555555555555) {
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v89 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v85 - (void)v80) >> 4);
            if (2 * v89 > v88) {
              unint64_t v88 = 2 * v89;
            }
            if (v89 >= 0x2AAAAAAAAAAAAAALL) {
              unint64_t v90 = 0x555555555555555;
            }
            else {
              unint64_t v90 = v88;
            }
            if (v90)
            {
              unint64_t v90 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v90);
              int8x16_t v80 = *(char **)(a1 + 96);
              id v86 = *(char **)(a1 + 104);
            }
            else
            {
              uint64_t v91 = 0;
            }
            unint64_t v92 = v90 + 48 * v87;
            *(double *)unint64_t v92 = v54;
            *(double *)(v92 + 8) = v53;
            *(void *)(v92 + 16) = v47;
            *(void *)(v92 + 24) = v124;
            *(unsigned char *)(v92 + 32) = v51;
            *(unsigned char *)(v92 + 33) = v123;
            *(unsigned char *)(v92 + 40) = v122;
            *(unsigned char *)(v92 + 41) = v57;
            *(unsigned char *)(v92 + 42) = v84;
            unint64_t v93 = v92;
            if (v86 != v80)
            {
              do
              {
                long long v94 = *((_OWORD *)v86 - 3);
                long long v95 = *((_OWORD *)v86 - 2);
                *(_OWORD *)(v93 - 21) = *(_OWORD *)(v86 - 21);
                *(_OWORD *)(v93 - 48) = v94;
                *(_OWORD *)(v93 - 32) = v95;
                v93 -= 48;
                v86 -= 48;
              }
              while (v86 != v80);
              int8x16_t v80 = (char *)*v125;
            }
            unint64_t v63 = (_OWORD *)(v92 + 48);
            *(void *)(a1 + 96) = v93;
            *(void *)(a1 + 104) = v92 + 48;
            *(void *)(a1 + 112) = v90 + 48 * v91;
            if (v80) {
LABEL_109:
            }
              operator delete(v80);
            goto LABEL_110;
          }
        }
        v45 += 3;
        if (v45 == v7) {
          goto LABEL_112;
        }
        continue;
      }
    }
    double v10 = *(double *)v6;
    double v9 = *(double *)(v6 + 8);
    double v11 = *(double *)(v6 + 16);
    uint64_t v12 = *(void *)(v6 + 24);
    char v13 = *(unsigned char *)(v6 + 32);
    char v14 = *(unsigned char *)(v6 + 33);
    double v15 = a2 - v9;
    if (a2 - v9 >= 0.01)
    {
      if (v11 - v9 - v15 < 0.01)
      {
        uint64_t v42 = 0;
        char v43 = 0;
        double v18 = 0.0;
        double v17 = *(double *)(v6 + 16);
        char v16 = *(unsigned char *)(v6 + 32);
        double v19 = 0.0;
        double v11 = 0.0;
        char v13 = 0;
LABEL_123:
        int v101 = *(unsigned __int8 *)(v6 + 42);
        int v102 = *(unsigned __int8 *)(v6 + 41);
        uint64_t v103 = *(void *)(a1 + 96);
        int v104 = *(unsigned __int8 *)(v6 + 40);
        *(double *)&long long v127 = v10;
        *((double *)&v127 + 1) = v9;
        *(double *)&long long v128 = v17;
        *((void *)&v128 + 1) = v12;
        LOBYTE(v129) = v16;
        BYTE1(v129) = v14;
        *(_DWORD *)((char *)&v129 + 2) = *(_DWORD *)(v103 + 34);
        HIWORD(v129) = *(_WORD *)(v103 + 38);
        *(double *)&long long v130 = v18;
        *((double *)&v130 + 1) = v19;
        *(double *)&long long v131 = v11;
        *((void *)&v131 + 1) = v42;
        LOBYTE(v132) = v13;
        HIBYTE(v132) = v43;
        HDRawQuantitySample::applyMask((uint64_t)&v127, v121);
        BOOL v105 = v104 != 0;
        BOOL v106 = v102 != 0;
        BOOL v107 = v101 != 0;
        if ((_BYTE)v129)
        {
          double v108 = *(double *)&v127;
          *(double *)(a1 + 120) = *(double *)&v127 + *(double *)(a1 + 120);
          if (!v101) {
            ++*(void *)(a1 + 128);
          }
          if (*(unsigned char *)(a1 + 25))
          {
            unint64_t v109 = HDStatisticsBucket<HDStatisticsCumulative>::_canonicalSourceIDForSourceID(a1, *((unint64_t *)&v128 + 1));
            long long v110 = HDStatisticsBucket<HDStatisticsCumulative>::_statisticsForSource(a1, v109);
            *(double *)long long v110 = v108 + *(double *)v110;
            if (!v102) {
              v110[1] = (uint64_t *)((char *)v110[1] + 1);
            }
          }
          BOOL v105 = 1;
          BOOL v106 = 1;
          BOOL v107 = 1;
        }
        if ((_BYTE)v132)
        {
          LOWORD(v126) = v132;
          long long v111 = v131;
          long long v112 = (char *)*v125;
          *(_OWORD *)long long v112 = v130;
          *((_OWORD *)v112 + 1) = v111;
          *((void *)v112 + 4) = v126;
          v112[40] = v105;
          v112[41] = v106;
          v112[42] = v107;
        }
        else
        {
          *(void *)(a1 + 104) = *(void *)(a1 + 96);
        }
        goto LABEL_133;
      }
      double v100 = v10 * (v15 / (v11 - v9));
      double v17 = a2;
      char v16 = *(unsigned char *)(v6 + 32);
      double v18 = v10 - v100;
      double v10 = v100;
      double v19 = a2;
    }
    else
    {
      char v16 = 0;
      double v17 = *(double *)(v6 + 16);
      double v18 = *(double *)v6;
      double v19 = *(double *)(v6 + 8);
    }
    uint64_t v42 = *(void *)(v6 + 24);
    char v43 = *(unsigned char *)(v6 + 33);
    goto LABEL_123;
  }
}

void sub_1BD06DE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  _Unwind_Resume(a1);
}

uint64_t **HDStatisticsBucket<HDStatisticsCumulative>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = a2;
  double v5 = *(void **)(a1 + 184);
  unint64_t v3 = (uint64_t **)(a1 + 184);
  double v4 = v5;
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = v3;
  do
  {
    uint64_t v7 = v4[4];
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      double v9 = v4;
    }
    else {
      double v9 = v4 + 1;
    }
    if (!v8) {
      uint64_t v6 = (uint64_t **)v4;
    }
    double v4 = (void *)*v9;
  }
  while (*v9);
  if (v6 == v3 || (uint64_t)v6[4] > a2)
  {
LABEL_11:
    double v10 = v3 - 1;
    std::__tree<std::__value_type<long long,HDStatisticsCumulative>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCumulative>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCumulative>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v3 - 1, a2, &v12);
    uint64_t v6 = std::__tree<std::__value_type<long long,HDStatisticsCumulative>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCumulative>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCumulative>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v10, a2, &v12);
  }
  return v6 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsCumulative>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    double v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((void *)(a1 + 264), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsCumulative>::_bundleIdentifierForSourceID(a1, a2);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      id v10 = v6;
      uint64_t v7 = (void *)(a1 + 304);
      BOOL v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        double v11 = &v10;
        *((void *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        id v6 = v10;
      }
    }
  }
  return a2;
}

void sub_1BD06E008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsCumulative>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  double v4 = (id *)(a1 + 88);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    id v6 = (void *)(a1 + 344);
    uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
    if (v7)
    {
      id v8 = (id)v7[3];
    }
    else
    {
      id v9 = objc_loadWeakRetained(v4);
      id v8 = [v9 bundleIdentifierForSourceID:a2];

      if (v8)
      {
        id v10 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
        objc_storeStrong(v10 + 3, v8);
      }
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1BD06E0EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsCumulative>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCumulative>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCumulative>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, void *a3)
{
  id v6 = a1 + 1;
  double v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        uint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        double v5 = *v7;
        id v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      double v5 = v7[1];
      if (!v5)
      {
        id v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    id v9 = (char *)operator new(0x60uLL);
    *((void *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *((void *)v9 + 11) = 0;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v12 = a2 - 3;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 4);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v103 = *((void *)a2 - 3);
                uint64_t v104 = *(void *)(v13 + 24);
                if (v103 == v104) {
                  return;
                }
                BOOL v105 = *(char **)(*(void *)a3 + 240);
                BOOL v106 = *(char **)(*(void *)a3 + 248);
                BOOL v107 = v105;
                double v108 = v105;
                if (v105 == v106) {
                  goto LABEL_171;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>((long long *)v13, (long long *)(v13 + 48), a2 - 3, a3);
                return;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, (uint64_t)(a2 - 3), a3);
                return;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, v13 + 144, (uint64_t)(a2 - 3), a3);
                return;
              default:
                JUMPOUT(0);
            }
            do
            {
              if (*(void *)v108 == v103) {
                goto LABEL_168;
              }
              v108 += 8;
            }
            while (v108 != v106);
            double v108 = *(char **)(*(void *)a3 + 248);
LABEL_168:
            while (*(void *)v107 != v104)
            {
              v107 += 8;
              if (v107 == v106)
              {
                BOOL v107 = *(char **)(*(void *)a3 + 248);
                break;
              }
            }
LABEL_171:
            if (v108 - v105 < v107 - v105)
            {
              *(_OWORD *)v226 = *(_OWORD *)(v13 + 16);
              *(_OWORD *)&v226[16] = *(_OWORD *)(v13 + 32);
              long long v218 = *(_OWORD *)v13;
              long long v109 = *v12;
              long long v110 = *(a2 - 2);
              *(_OWORD *)(v13 + 27) = *(long long *)((char *)a2 - 21);
              *(_OWORD *)unint64_t v13 = v109;
              *(_OWORD *)(v13 + 16) = v110;
              *(long long *)((char *)a2 - 21) = *(_OWORD *)&v226[11];
              long long *v12 = v218;
              *(a2 - 2) = *(_OWORD *)v226;
            }
            return;
          }
          if (v14 <= 1151)
          {
            long long v111 = (long long *)(v13 + 48);
            BOOL v113 = (long long *)v13 == a2 || v111 == a2;
            if (a5)
            {
              if (!v113)
              {
                unint64_t v114 = v13;
                do
                {
                  unint64_t v115 = v114;
                  unint64_t v114 = (unint64_t)v111;
                  uint64_t v116 = *(void *)(v115 + 72);
                  uint64_t v117 = *(void *)(v115 + 24);
                  if (v116 != v117)
                  {
                    long long v118 = *(char **)(*(void *)a3 + 240);
                    id v119 = *(char **)(*(void *)a3 + 248);
                    uint64_t v120 = v118;
                    long long v121 = v118;
                    if (v118 != v119)
                    {
                      do
                      {
                        if (*(void *)v121 == v116) {
                          goto LABEL_196;
                        }
                        v121 += 8;
                      }
                      while (v121 != v119);
                      long long v121 = *(char **)(*(void *)a3 + 248);
LABEL_196:
                      while (*(void *)v120 != v117)
                      {
                        v120 += 8;
                        if (v120 == v119)
                        {
                          uint64_t v120 = *(char **)(*(void *)a3 + 248);
                          break;
                        }
                      }
                    }
                    if (v121 - v118 < v120 - v118)
                    {
                      uint64_t v227 = *(void *)(v114 + 16);
                      long long v219 = *(_OWORD *)v114;
                      long long v236 = *(_OWORD *)(v115 + 80);
                      unint64_t v122 = v114;
                      while (1)
                      {
                        long long v123 = *(_OWORD *)(v115 + 16);
                        *(_OWORD *)unint64_t v122 = *(_OWORD *)v115;
                        *(_OWORD *)(v122 + 16) = v123;
                        *(_OWORD *)(v122 + 27) = *(_OWORD *)(v115 + 27);
                        if (v115 == v13) {
                          break;
                        }
                        unint64_t v122 = v115;
                        uint64_t v124 = *(void *)(v115 - 24);
                        if (v116 != v124)
                        {
                          uint64_t v125 = *(char **)(*(void *)a3 + 240);
                          uint64_t v126 = *(char **)(*(void *)a3 + 248);
                          long long v127 = v125;
                          long long v128 = v125;
                          if (v125 != v126)
                          {
                            do
                            {
                              if (*(void *)v128 == v116) {
                                goto LABEL_208;
                              }
                              v128 += 8;
                            }
                            while (v128 != v126);
                            long long v128 = *(char **)(*(void *)a3 + 248);
LABEL_208:
                            while (*(void *)v127 != v124)
                            {
                              v127 += 8;
                              if (v127 == v126)
                              {
                                long long v127 = *(char **)(*(void *)a3 + 248);
                                break;
                              }
                            }
                          }
                          unint64_t v115 = v122 - 48;
                          if (v128 - v125 < v127 - v125) {
                            continue;
                          }
                        }
                        goto LABEL_212;
                      }
                      unint64_t v122 = v13;
LABEL_212:
                      *(_OWORD *)unint64_t v122 = v219;
                      *(void *)(v122 + 16) = v227;
                      *(void *)(v122 + 24) = v116;
                      *(void *)(v122 + 32) = v236;
                      *(_DWORD *)(v122 + 39) = *(_DWORD *)((char *)&v236 + 7);
                    }
                  }
                  long long v111 = (long long *)(v114 + 48);
                }
                while ((long long *)(v114 + 48) != a2);
              }
            }
            else if (!v113)
            {
              do
              {
                unint64_t v201 = a1;
                a1 = (unint64_t)v111;
                uint64_t v202 = *(void *)(v201 + 72);
                uint64_t v203 = *(void *)(v201 + 24);
                if (v202 != v203)
                {
                  v204 = *(char **)(*(void *)a3 + 240);
                  v205 = *(char **)(*(void *)a3 + 248);
                  v206 = v204;
                  v207 = v204;
                  if (v204 != v205)
                  {
                    do
                    {
                      if (*(void *)v207 == v202) {
                        goto LABEL_312;
                      }
                      v207 += 8;
                    }
                    while (v207 != v205);
                    v207 = *(char **)(*(void *)a3 + 248);
LABEL_312:
                    while (*(void *)v206 != v203)
                    {
                      v206 += 8;
                      if (v206 == v205)
                      {
                        v206 = *(char **)(*(void *)a3 + 248);
                        break;
                      }
                    }
                  }
                  if (v207 - v204 < v206 - v204)
                  {
                    uint64_t v230 = *(void *)(a1 + 16);
                    long long v222 = *(_OWORD *)a1;
                    long long v239 = *(_OWORD *)(v201 + 80);
                    unint64_t v208 = a1;
                    do
                    {
                      v209 = (_OWORD *)v208;
                      unint64_t v208 = v201;
                      long long v210 = *(_OWORD *)(v201 + 16);
                      _OWORD *v209 = *(_OWORD *)v201;
                      v209[1] = v210;
                      *(_OWORD *)((char *)v209 + 27) = *(_OWORD *)(v201 + 27);
                      uint64_t v211 = *(void *)(v201 - 24);
                      if (v202 == v211) {
                        break;
                      }
                      v212 = *(char **)(*(void *)a3 + 240);
                      v213 = *(char **)(*(void *)a3 + 248);
                      v214 = v212;
                      v215 = v212;
                      if (v212 != v213)
                      {
                        do
                        {
                          if (*(void *)v215 == v202) {
                            goto LABEL_322;
                          }
                          v215 += 8;
                        }
                        while (v215 != v213);
                        v215 = *(char **)(*(void *)a3 + 248);
LABEL_322:
                        while (*(void *)v214 != v211)
                        {
                          v214 += 8;
                          if (v214 == v213)
                          {
                            v214 = *(char **)(*(void *)a3 + 248);
                            break;
                          }
                        }
                      }
                      unint64_t v201 = v208 - 48;
                    }
                    while (v215 - v212 < v214 - v212);
                    *(_OWORD *)unint64_t v208 = v222;
                    *(void *)(v208 + 16) = v230;
                    *(void *)(v208 + 24) = v202;
                    *(void *)(v208 + 32) = v239;
                    *(_DWORD *)(v208 + 39) = *(_DWORD *)((char *)&v239 + 7);
                  }
                }
                long long v111 = (long long *)(a1 + 48);
              }
              while ((long long *)(a1 + 48) != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((long long *)v13 != a2)
            {
              int64_t v129 = (v15 - 2) >> 1;
              int64_t v130 = v129;
              do
              {
                int64_t v131 = v130;
                if (v129 >= v130)
                {
                  uint64_t v132 = (2 * v130) | 1;
                  unint64_t v133 = v13 + 48 * v132;
                  if (2 * v131 + 2 < (uint64_t)v15)
                  {
                    uint64_t v134 = *(void *)(v133 + 24);
                    uint64_t v135 = *(void *)(v133 + 72);
                    if (v134 != v135)
                    {
                      v137 = *(char **)(*(void *)a3 + 240);
                      v136 = *(char **)(*(void *)a3 + 248);
                      v138 = v137;
                      v139 = v137;
                      if (v137 != v136)
                      {
                        do
                        {
                          if (*(void *)v139 == v134) {
                            goto LABEL_224;
                          }
                          v139 += 8;
                        }
                        while (v139 != v136);
                        v139 = *(char **)(*(void *)a3 + 248);
LABEL_224:
                        while (*(void *)v138 != v135)
                        {
                          v138 += 8;
                          if (v138 == v136)
                          {
                            v138 = *(char **)(*(void *)a3 + 248);
                            break;
                          }
                        }
                      }
                      v133 += 48 * (v139 - v137 < v138 - v137);
                      if (v139 - v137 < v138 - v137) {
                        uint64_t v132 = 2 * v131 + 2;
                      }
                    }
                  }
                  unint64_t v140 = v13 + 48 * v131;
                  uint64_t v141 = *(void *)(v133 + 24);
                  uint64_t v142 = *(void *)(v140 + 24);
                  if (v141 == v142) {
                    goto LABEL_238;
                  }
                  v144 = *(char **)(*(void *)a3 + 240);
                  v143 = *(char **)(*(void *)a3 + 248);
                  v145 = v144;
                  v146 = v144;
                  if (v144 != v143)
                  {
                    do
                    {
                      if (*(void *)v146 == v141) {
                        goto LABEL_234;
                      }
                      v146 += 8;
                    }
                    while (v146 != v143);
                    v146 = *(char **)(*(void *)a3 + 248);
LABEL_234:
                    while (*(void *)v145 != v142)
                    {
                      v145 += 8;
                      if (v145 == v143)
                      {
                        v145 = *(char **)(*(void *)a3 + 248);
                        break;
                      }
                    }
                  }
                  if (v146 - v144 >= v145 - v144)
                  {
LABEL_238:
                    uint64_t v228 = *(void *)(v140 + 16);
                    long long v220 = *(_OWORD *)v140;
                    long long v237 = *(_OWORD *)(v140 + 32);
                    long long v147 = *(_OWORD *)v133;
                    long long v148 = *(_OWORD *)(v133 + 16);
                    *(_OWORD *)(v140 + 27) = *(_OWORD *)(v133 + 27);
                    *(_OWORD *)unint64_t v140 = v147;
                    *(_OWORD *)(v140 + 16) = v148;
                    if (v129 >= v132)
                    {
                      while (1)
                      {
                        uint64_t v150 = 2 * v132;
                        uint64_t v132 = (2 * v132) | 1;
                        unint64_t v149 = v13 + 48 * v132;
                        uint64_t v151 = v150 + 2;
                        if (v151 < (uint64_t)v15)
                        {
                          uint64_t v152 = *(void *)(v149 + 24);
                          uint64_t v153 = *(void *)(v149 + 72);
                          if (v152 != v153)
                          {
                            v154 = *(char **)(*(void *)a3 + 240);
                            v155 = *(char **)(*(void *)a3 + 248);
                            v156 = v154;
                            v157 = v154;
                            if (v154 != v155)
                            {
                              do
                              {
                                if (*(void *)v157 == v152) {
                                  goto LABEL_246;
                                }
                                v157 += 8;
                              }
                              while (v157 != v155);
                              v157 = *(char **)(*(void *)a3 + 248);
LABEL_246:
                              while (*(void *)v156 != v153)
                              {
                                v156 += 8;
                                if (v156 == v155)
                                {
                                  v156 = *(char **)(*(void *)a3 + 248);
                                  break;
                                }
                              }
                            }
                            v149 += 48 * (v157 - v154 < v156 - v154);
                            if (v157 - v154 < v156 - v154) {
                              uint64_t v132 = v151;
                            }
                          }
                        }
                        uint64_t v158 = *(void *)(v149 + 24);
                        if (v158 != v142)
                        {
                          v160 = *(char **)(*(void *)a3 + 240);
                          v159 = *(char **)(*(void *)a3 + 248);
                          v161 = v160;
                          v162 = v160;
                          if (v160 != v159)
                          {
                            do
                            {
                              if (*(void *)v162 == v158) {
                                goto LABEL_256;
                              }
                              v162 += 8;
                            }
                            while (v162 != v159);
                            v162 = *(char **)(*(void *)a3 + 248);
LABEL_256:
                            while (*(void *)v161 != v142)
                            {
                              v161 += 8;
                              if (v161 == v159)
                              {
                                v161 = *(char **)(*(void *)a3 + 248);
                                break;
                              }
                            }
                          }
                          if (v162 - v160 < v161 - v160) {
                            break;
                          }
                        }
                        long long v163 = *(_OWORD *)v149;
                        long long v164 = *(_OWORD *)(v149 + 16);
                        *(_OWORD *)(v133 + 27) = *(_OWORD *)(v149 + 27);
                        *(_OWORD *)unint64_t v133 = v163;
                        *(_OWORD *)(v133 + 16) = v164;
                        unint64_t v133 = v149;
                        if (v129 < v132) {
                          goto LABEL_261;
                        }
                      }
                    }
                    unint64_t v149 = v133;
LABEL_261:
                    *(_OWORD *)unint64_t v149 = v220;
                    *(void *)(v149 + 16) = v228;
                    *(void *)(v149 + 24) = v142;
                    *(void *)(v149 + 32) = v237;
                    *(_DWORD *)(v149 + 39) = *(_DWORD *)((char *)&v237 + 7);
                  }
                }
                int64_t v130 = v131 - 1;
              }
              while (v131);
              int64_t v165 = v14 / 0x30uLL;
              do
              {
                uint64_t v166 = 0;
                *(_OWORD *)v229 = *(_OWORD *)(v13 + 16);
                *(_OWORD *)&v229[16] = *(_OWORD *)(v13 + 32);
                long long v221 = *(_OWORD *)v13;
                uint64_t v167 = v165 - 2;
                if (v165 < 2) {
                  uint64_t v167 = v165 - 1;
                }
                uint64_t v168 = v167 >> 1;
                unint64_t v169 = v13;
                do
                {
                  v170 = (_OWORD *)v169;
                  v169 += 48 * v166 + 48;
                  uint64_t v171 = 2 * v166;
                  uint64_t v166 = (2 * v166) | 1;
                  uint64_t v172 = v171 + 2;
                  if (v171 + 2 < v165)
                  {
                    uint64_t v173 = *(void *)(v169 + 24);
                    uint64_t v174 = *(void *)(v169 + 72);
                    if (v173 != v174)
                    {
                      v176 = *(char **)(*(void *)a3 + 240);
                      v175 = *(char **)(*(void *)a3 + 248);
                      v177 = v176;
                      v178 = v176;
                      if (v176 != v175)
                      {
                        do
                        {
                          if (*(void *)v178 == v173) {
                            goto LABEL_273;
                          }
                          v178 += 8;
                        }
                        while (v178 != v175);
                        v178 = *(char **)(*(void *)a3 + 248);
LABEL_273:
                        while (*(void *)v177 != v174)
                        {
                          v177 += 8;
                          if (v177 == v175)
                          {
                            v177 = *(char **)(*(void *)a3 + 248);
                            break;
                          }
                        }
                      }
                      v169 += 48 * (v178 - v176 < v177 - v176);
                      if (v178 - v176 < v177 - v176) {
                        uint64_t v166 = v172;
                      }
                    }
                  }
                  long long v179 = *(_OWORD *)v169;
                  long long v180 = *(_OWORD *)(v169 + 16);
                  *(_OWORD *)((char *)v170 + 27) = *(_OWORD *)(v169 + 27);
                  _OWORD *v170 = v179;
                  v170[1] = v180;
                }
                while (v166 <= v168);
                a2 -= 3;
                if ((long long *)v169 == a2)
                {
                  *(_OWORD *)(v169 + 27) = *(_OWORD *)&v229[11];
                  *(_OWORD *)unint64_t v169 = v221;
                  *(_OWORD *)(v169 + 16) = *(_OWORD *)v229;
                }
                else
                {
                  long long v181 = *a2;
                  long long v182 = a2[1];
                  *(_OWORD *)(v169 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v169 = v181;
                  *(_OWORD *)(v169 + 16) = v182;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v229[11];
                  *a2 = v221;
                  a2[1] = *(_OWORD *)v229;
                  uint64_t v183 = v169 - v13 + 48;
                  if (v183 >= 49)
                  {
                    unint64_t v184 = (v183 / 0x30uLL - 2) >> 1;
                    unint64_t v185 = v13 + 48 * v184;
                    uint64_t v186 = *(void *)(v185 + 24);
                    uint64_t v187 = *(void *)(v169 + 24);
                    if (v186 != v187)
                    {
                      v189 = *(char **)(*(void *)a3 + 240);
                      v188 = *(char **)(*(void *)a3 + 248);
                      v190 = v189;
                      v191 = v189;
                      if (v189 != v188)
                      {
                        do
                        {
                          if (*(void *)v191 == v186) {
                            goto LABEL_286;
                          }
                          v191 += 8;
                        }
                        while (v191 != v188);
                        v191 = *(char **)(*(void *)a3 + 248);
LABEL_286:
                        while (*(void *)v190 != v187)
                        {
                          v190 += 8;
                          if (v190 == v188)
                          {
                            v190 = *(char **)(*(void *)a3 + 248);
                            break;
                          }
                        }
                      }
                      if (v191 - v189 < v190 - v189)
                      {
                        uint64_t v242 = *(void *)(v169 + 16);
                        long long v238 = *(_OWORD *)v169;
                        long long v233 = *(_OWORD *)(v169 + 32);
                        do
                        {
                          v192 = (_OWORD *)v169;
                          unint64_t v169 = v185;
                          long long v193 = *(_OWORD *)v185;
                          long long v194 = *(_OWORD *)(v185 + 16);
                          *(_OWORD *)((char *)v192 + 27) = *(_OWORD *)(v185 + 27);
                          _OWORD *v192 = v193;
                          v192[1] = v194;
                          if (!v184) {
                            break;
                          }
                          unint64_t v184 = (v184 - 1) >> 1;
                          unint64_t v185 = v13 + 48 * v184;
                          uint64_t v195 = *(void *)(v185 + 24);
                          if (v195 == v187) {
                            break;
                          }
                          v197 = *(char **)(*(void *)a3 + 240);
                          v196 = *(char **)(*(void *)a3 + 248);
                          v198 = v197;
                          v199 = v197;
                          if (v197 != v196)
                          {
                            do
                            {
                              if (*(void *)v199 == v195) {
                                goto LABEL_297;
                              }
                              v199 += 8;
                            }
                            while (v199 != v196);
                            v199 = *(char **)(*(void *)a3 + 248);
LABEL_297:
                            while (*(void *)v198 != v187)
                            {
                              v198 += 8;
                              if (v198 == v196)
                              {
                                v198 = *(char **)(*(void *)a3 + 248);
                                break;
                              }
                            }
                          }
                        }
                        while (v199 - v197 < v198 - v197);
                        *(_OWORD *)unint64_t v169 = v238;
                        *(void *)(v169 + 16) = v242;
                        *(void *)(v169 + 24) = v187;
                        *(void *)(v169 + 32) = v233;
                        *(_DWORD *)(v169 + 39) = *(_DWORD *)((char *)&v233 + 7);
                      }
                    }
                  }
                }
              }
              while (v165-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          double v17 = (long long *)(v13 + 48 * (v15 >> 1));
          if ((unint64_t)v14 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v15 >> 1)), a2 - 3, a3);
            uint64_t v18 = 3 * v16;
            double v19 = (long long *)(a1 + 48 * v16 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>((long long *)(a1 + 48), v19, a2 - 6, a3);
            double v20 = (long long *)(a1 + 48 + 16 * v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>((long long *)(a1 + 96), v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>(v19, v17, v20, a3);
            *(_OWORD *)v223 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v223[16] = *(_OWORD *)(a1 + 32);
            long long v216 = *(_OWORD *)a1;
            long long v21 = *(long long *)((char *)v17 + 27);
            long long v22 = v17[1];
            *(_OWORD *)a1 = *v17;
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(a1 + 27) = v21;
            *(long long *)((char *)v17 + 27) = *(_OWORD *)&v223[11];
            long long *v17 = v216;
            v17[1] = *(_OWORD *)v223;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>((long long *)(a1 + 48 * (v15 >> 1)), (long long *)a1, a2 - 3, a3);
          }
          --a4;
          if (a5)
          {
            uint64_t v23 = *(void *)(a1 + 24);
            uint64_t v24 = *(void *)a3;
            break;
          }
          uint64_t v25 = *(void *)(a1 - 24);
          uint64_t v23 = *(void *)(a1 + 24);
          if (v25 != v23)
          {
            uint64_t v24 = *(void *)a3;
            double v26 = *(char **)(*(void *)a3 + 240);
            double v27 = *(char **)(*(void *)a3 + 248);
            double v28 = v26;
            double v29 = v26;
            if (v26 != v27)
            {
              do
              {
                if (*(void *)v29 == v25) {
                  goto LABEL_16;
                }
                v29 += 8;
              }
              while (v29 != v27);
              double v29 = *(char **)(*(void *)a3 + 248);
LABEL_16:
              while (*(void *)v28 != v23)
              {
                v28 += 8;
                if (v28 == v27)
                {
                  double v28 = *(char **)(*(void *)a3 + 248);
                  break;
                }
              }
            }
            if (v29 - v26 < v28 - v26) {
              break;
            }
          }
          uint64_t v241 = *(void *)(a1 + 16);
          long long v232 = *(_OWORD *)(a1 + 32);
          long long v235 = *(_OWORD *)a1;
          uint64_t v67 = *((void *)a2 - 3);
          if (v23 == v67) {
            goto LABEL_107;
          }
          uint64_t v68 = *(char **)(*(void *)a3 + 240);
          uint64_t v69 = *(char **)(*(void *)a3 + 248);
          if (v68 == v69)
          {
            int8x16_t v71 = *(char **)(*(void *)a3 + 240);
            BOOL v70 = v71;
          }
          else
          {
            BOOL v70 = *(char **)(*(void *)a3 + 240);
            while (*(void *)v70 != v23)
            {
              v70 += 8;
              if (v70 == v69)
              {
                BOOL v70 = *(char **)(*(void *)a3 + 248);
                break;
              }
            }
            int8x16_t v71 = *(char **)(*(void *)a3 + 240);
            while (*(void *)v71 != v67)
            {
              v71 += 8;
              if (v71 == v69)
              {
                int8x16_t v71 = *(char **)(*(void *)a3 + 248);
                break;
              }
            }
          }
          if (v70 - v68 >= v71 - v68)
          {
LABEL_107:
            unint64_t v13 = a1 + 48;
            if (a1 + 48 < (unint64_t)a2)
            {
              uint64_t v75 = *(void *)a3;
              unint64_t v76 = a1;
              do
              {
                uint64_t v77 = *(void *)(v76 + 72);
                unint64_t v76 = v13;
                if (v23 != v77)
                {
                  long long v78 = *(char **)(v75 + 240);
                  long long v79 = *(char **)(v75 + 248);
                  int8x16_t v80 = v78;
                  uint64_t v81 = v78;
                  if (v78 != v79)
                  {
                    do
                    {
                      if (*(void *)v81 == v23) {
                        goto LABEL_114;
                      }
                      v81 += 8;
                    }
                    while (v81 != v79);
                    uint64_t v81 = *(char **)(v75 + 248);
LABEL_114:
                    while (*(void *)v80 != v77)
                    {
                      v80 += 8;
                      if (v80 == v79)
                      {
                        int8x16_t v80 = *(char **)(v75 + 248);
                        break;
                      }
                    }
                  }
                  if (v81 - v78 < v80 - v78) {
                    break;
                  }
                }
                v13 += 48;
              }
              while (v76 + 48 < (unint64_t)a2);
            }
          }
          else
          {
            unint64_t v13 = a1;
            do
            {
              do
              {
                uint64_t v72 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v72);
              if (v68 == v69)
              {
                long long v74 = *(char **)(*(void *)a3 + 240);
                long long v73 = v74;
              }
              else
              {
                long long v73 = *(char **)(*(void *)a3 + 240);
                while (*(void *)v73 != v23)
                {
                  v73 += 8;
                  if (v73 == v69)
                  {
                    long long v73 = *(char **)(*(void *)a3 + 248);
                    break;
                  }
                }
                long long v74 = *(char **)(*(void *)a3 + 240);
                while (*(void *)v74 != v72)
                {
                  v74 += 8;
                  if (v74 == v69)
                  {
                    long long v74 = *(char **)(*(void *)a3 + 248);
                    break;
                  }
                }
              }
            }
            while (v73 - v68 >= v74 - v68);
          }
          unint64_t v82 = a2;
          if (v13 < (unint64_t)a2)
          {
            uint64_t v83 = *(void *)a3;
            unint64_t v82 = a2;
            do
            {
              uint64_t v84 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v84) {
                break;
              }
              unint64_t v85 = *(char **)(v83 + 240);
              id v86 = *(char **)(v83 + 248);
              unint64_t v87 = v85;
              unint64_t v88 = v85;
              if (v85 != v86)
              {
                do
                {
                  if (*(void *)v88 == v23) {
                    goto LABEL_126;
                  }
                  v88 += 8;
                }
                while (v88 != v86);
                unint64_t v88 = *(char **)(v83 + 248);
LABEL_126:
                while (*(void *)v87 != v84)
                {
                  v87 += 8;
                  if (v87 == v86)
                  {
                    unint64_t v87 = *(char **)(v83 + 248);
                    break;
                  }
                }
              }
            }
            while (v88 - v85 < v87 - v85);
          }
          while (v13 < (unint64_t)v82)
          {
            *(_OWORD *)v225 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v225[16] = *(_OWORD *)(v13 + 32);
            long long v217 = *(_OWORD *)v13;
            long long v89 = *v82;
            long long v90 = v82[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v82 + 27);
            *(_OWORD *)unint64_t v13 = v89;
            *(_OWORD *)(v13 + 16) = v90;
            *(long long *)((char *)v82 + 27) = *(_OWORD *)&v225[11];
            *unint64_t v82 = v217;
            v82[1] = *(_OWORD *)v225;
            uint64_t v91 = *(void *)a3;
            do
            {
              do
              {
                uint64_t v92 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v92);
              unint64_t v93 = *(char **)(v91 + 240);
              long long v94 = *(char **)(v91 + 248);
              if (v93 == v94)
              {
                uint64_t v96 = *(char **)(v91 + 240);
                long long v95 = v96;
              }
              else
              {
                long long v95 = *(char **)(v91 + 240);
                while (*(void *)v95 != v23)
                {
                  v95 += 8;
                  if (v95 == v94)
                  {
                    long long v95 = *(char **)(v91 + 248);
                    break;
                  }
                }
                uint64_t v96 = *(char **)(v91 + 240);
                while (*(void *)v96 != v92)
                {
                  v96 += 8;
                  if (v96 == v94)
                  {
                    uint64_t v96 = *(char **)(v91 + 248);
                    break;
                  }
                }
              }
            }
            while (v95 - v93 >= v96 - v93);
            do
            {
              uint64_t v97 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v97) {
                break;
              }
              if (v93 == v94)
              {
                BOOL v99 = v93;
                long long v98 = v93;
              }
              else
              {
                long long v98 = v93;
                while (*(void *)v98 != v23)
                {
                  v98 += 8;
                  if (v98 == v94)
                  {
                    long long v98 = v94;
                    break;
                  }
                }
                BOOL v99 = v93;
                while (*(void *)v99 != v97)
                {
                  v99 += 8;
                  if (v99 == v94)
                  {
                    BOOL v99 = v94;
                    break;
                  }
                }
              }
            }
            while (v98 - v93 < v99 - v93);
          }
          double v100 = (long long *)(v13 - 48);
          BOOL v5 = v13 - 48 >= a1;
          BOOL v6 = v13 - 48 == a1;
          if (v13 - 48 != a1)
          {
            long long v101 = *v100;
            long long v102 = *(_OWORD *)(v13 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
            *(_OWORD *)a1 = v101;
            *(_OWORD *)(a1 + 16) = v102;
          }
          a5 = 0;
          *double v100 = v235;
          *(void *)(v13 - 32) = v241;
          *(void *)(v13 - 24) = v23;
          *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v232 + 7);
          *(void *)(v13 - 16) = v232;
        }
        uint64_t v240 = *(void *)(a1 + 16);
        long long v231 = *(_OWORD *)(a1 + 32);
        long long v234 = *(_OWORD *)a1;
        unint64_t v30 = a1;
        do
        {
          unint64_t v31 = v30;
          v30 += 48;
          uint64_t v32 = *(void *)(v31 + 72);
          if (v32 == v23) {
            break;
          }
          uint64_t v33 = *(char **)(v24 + 240);
          unint64_t v34 = *(char **)(v24 + 248);
          unint64_t v35 = v33;
          unint64_t v36 = v33;
          if (v33 != v34)
          {
            do
            {
              if (*(void *)v36 == v32) {
                goto LABEL_26;
              }
              v36 += 8;
            }
            while (v36 != v34);
            unint64_t v36 = *(char **)(v24 + 248);
LABEL_26:
            while (*(void *)v35 != v23)
            {
              v35 += 8;
              if (v35 == v34)
              {
                unint64_t v35 = *(char **)(v24 + 248);
                break;
              }
            }
          }
        }
        while (v36 - v33 < v35 - v33);
        long long v37 = a2;
        if (v31 == a1)
        {
          long long v37 = a2;
          if (v30 < (unint64_t)a2)
          {
            long long v37 = a2;
            do
            {
              uint64_t v43 = *((void *)v37 - 3);
              v37 -= 3;
              if (v43 != v23)
              {
                char v44 = *(char **)(v24 + 240);
                char v45 = *(char **)(v24 + 248);
                long long v46 = v44;
                uint64_t v47 = v44;
                if (v44 != v45)
                {
                  do
                  {
                    if (*(void *)v47 == v43) {
                      goto LABEL_48;
                    }
                    v47 += 8;
                  }
                  while (v47 != v45);
                  uint64_t v47 = *(char **)(v24 + 248);
LABEL_48:
                  while (*(void *)v46 != v23)
                  {
                    v46 += 8;
                    if (v46 == v45)
                    {
                      long long v46 = *(char **)(v24 + 248);
                      break;
                    }
                  }
                }
                if (v47 - v44 < v46 - v44) {
                  break;
                }
              }
            }
            while (v30 < (unint64_t)v37);
          }
        }
        else
        {
          do
          {
            do
            {
              uint64_t v38 = *((void *)v37 - 3);
              v37 -= 3;
            }
            while (v38 == v23);
            uint64_t v39 = *(char **)(v24 + 240);
            unint64_t v40 = *(char **)(v24 + 248);
            uint64_t v41 = v39;
            uint64_t v42 = v39;
            if (v39 != v40)
            {
              do
              {
                if (*(void *)v42 == v38) {
                  goto LABEL_36;
                }
                v42 += 8;
              }
              while (v42 != v40);
              uint64_t v42 = *(char **)(v24 + 248);
LABEL_36:
              while (*(void *)v41 != v23)
              {
                v41 += 8;
                if (v41 == v40)
                {
                  uint64_t v41 = *(char **)(v24 + 248);
                  break;
                }
              }
            }
          }
          while (v42 - v39 >= v41 - v39);
        }
        unint64_t v13 = v30;
        if (v30 < (unint64_t)v37)
        {
          double v48 = v37;
          do
          {
            *(_OWORD *)v224 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v224[16] = *(_OWORD *)(v13 + 32);
            long long v49 = *(_OWORD *)v13;
            long long v51 = *v48;
            long long v50 = v48[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v48 + 27);
            *(_OWORD *)unint64_t v13 = v51;
            *(_OWORD *)(v13 + 16) = v50;
            *(long long *)((char *)v48 + 27) = *(_OWORD *)&v224[11];
            long long *v48 = v49;
            v48[1] = *(_OWORD *)v224;
            uint64_t v52 = *(void *)a3;
            do
            {
              uint64_t v53 = *(void *)(v13 + 72);
              v13 += 48;
              if (v53 == v23) {
                break;
              }
              double v54 = *(char **)(v52 + 240);
              double v55 = *(char **)(v52 + 248);
              int v56 = v54;
              int v57 = v54;
              if (v54 != v55)
              {
                do
                {
                  if (*(void *)v57 == v53) {
                    goto LABEL_61;
                  }
                  v57 += 8;
                }
                while (v57 != v55);
                int v57 = *(char **)(v52 + 248);
LABEL_61:
                while (*(void *)v56 != v23)
                {
                  v56 += 8;
                  if (v56 == v55)
                  {
                    int v56 = *(char **)(v52 + 248);
                    break;
                  }
                }
              }
            }
            while (v57 - v54 < v56 - v54);
            do
            {
              do
              {
                uint64_t v58 = *((void *)v48 - 3);
                v48 -= 3;
              }
              while (v58 == v23);
              uint64_t v59 = *(char **)(v52 + 240);
              unint64_t v60 = *(char **)(v52 + 248);
              long long v61 = v59;
              long long v62 = v59;
              if (v59 != v60)
              {
                do
                {
                  if (*(void *)v62 == v58) {
                    goto LABEL_70;
                  }
                  v62 += 8;
                }
                while (v62 != v60);
                long long v62 = *(char **)(v52 + 248);
LABEL_70:
                while (*(void *)v61 != v23)
                {
                  v61 += 8;
                  if (v61 == v60)
                  {
                    long long v61 = *(char **)(v52 + 248);
                    break;
                  }
                }
              }
            }
            while (v62 - v59 >= v61 - v59);
          }
          while (v13 < (unint64_t)v48);
        }
        unint64_t v63 = (long long *)(v13 - 48);
        if (v13 - 48 != a1)
        {
          long long v64 = *v63;
          long long v65 = *(_OWORD *)(v13 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
          *(_OWORD *)a1 = v64;
          *(_OWORD *)(a1 + 16) = v65;
        }
        long long *v63 = v234;
        *(void *)(v13 - 32) = v240;
        *(void *)(v13 - 24) = v23;
        *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v231 + 7);
        *(void *)(v13 - 16) = v231;
        if (v30 >= (unint64_t)v37) {
          break;
        }
LABEL_80:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*,false>(a1, v13 - 48, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>(a1, v13 - 48, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>(v13, (uint64_t)a2, a3))
      {
        break;
      }
      if (!v66) {
        goto LABEL_80;
      }
    }
    a2 = (long long *)(v13 - 48);
    if (!v66) {
      continue;
    }
    break;
  }
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>(long long *a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = *((void *)a2 + 3);
  uint64_t v5 = *((void *)a1 + 3);
  if (v4 == v5) {
    goto LABEL_23;
  }
  BOOL v6 = *(char **)(*(void *)a4 + 240);
  uint64_t v7 = *(char **)(*(void *)a4 + 248);
  if (v6 == v7)
  {
    id v9 = *(char **)(*(void *)a4 + 240);
    uint64_t v8 = v9;
  }
  else
  {
    uint64_t v8 = *(char **)(*(void *)a4 + 240);
    while (*(void *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        uint64_t v8 = *(char **)(*(void *)a4 + 248);
        break;
      }
    }
    id v9 = *(char **)(*(void *)a4 + 240);
    while (*(void *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        id v9 = *(char **)(*(void *)a4 + 248);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    uint64_t v13 = *((void *)a3 + 3);
    if (v13 != v4)
    {
      uint64_t v14 = *(char **)(*(void *)a4 + 240);
      unint64_t v15 = *(char **)(*(void *)a4 + 248);
      unint64_t v16 = v14;
      double v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(void *)v17 == v13) {
            goto LABEL_28;
          }
          v17 += 8;
        }
        while (v17 != v15);
        double v17 = *(char **)(*(void *)a4 + 248);
LABEL_28:
        while (*(void *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            unint64_t v16 = *(char **)(*(void *)a4 + 248);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        long long v18 = *a2;
        *(_OWORD *)long long v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        long long v19 = *(long long *)((char *)a3 + 27);
        long long v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(long long *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        __n128 result = *(__n128 *)&v46[11];
        *(long long *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        uint64_t v22 = *((void *)a2 + 3);
        uint64_t v23 = *((void *)a1 + 3);
        if (v22 != v23)
        {
          uint64_t v24 = *(char **)(*(void *)a4 + 240);
          uint64_t v25 = *(char **)(*(void *)a4 + 248);
          double v26 = v24;
          double v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(void *)v27 == v22) {
                goto LABEL_37;
              }
              v27 += 8;
            }
            while (v27 != v25);
            double v27 = *(char **)(*(void *)a4 + 248);
LABEL_37:
            while (*(void *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                double v26 = *(char **)(*(void *)a4 + 248);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            long long v28 = *a1;
            *(_OWORD *)uint64_t v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            long long v29 = *(long long *)((char *)a2 + 27);
            long long v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(long long *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            __n128 result = *(__n128 *)&v47[11];
            *(long long *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    uint64_t v10 = *((void *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        unint64_t v12 = *(char **)(*(void *)a4 + 240);
        double v11 = v12;
      }
      else
      {
        double v11 = *(char **)(*(void *)a4 + 240);
        while (*(void *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            double v11 = *(char **)(*(void *)a4 + 248);
            break;
          }
        }
        unint64_t v12 = *(char **)(*(void *)a4 + 240);
        while (*(void *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            unint64_t v12 = *(char **)(*(void *)a4 + 248);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        long long v31 = a1[1];
        long long v32 = *a1;
        *(void *)long long v49 = *((void *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        long long v33 = *(long long *)((char *)a3 + 27);
        long long v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(long long *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        __n128 result = *(__n128 *)&v49[3];
        *(long long *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    long long v35 = *a1;
    *(_OWORD *)double v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    long long v36 = *(long long *)((char *)a2 + 27);
    long long v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(long long *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    __n128 result = *(__n128 *)&v48[11];
    *(long long *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    uint64_t v38 = *((void *)a3 + 3);
    uint64_t v39 = *((void *)a2 + 3);
    if (v38 != v39)
    {
      unint64_t v40 = *(char **)(*(void *)a4 + 240);
      uint64_t v41 = *(char **)(*(void *)a4 + 248);
      uint64_t v42 = v40;
      uint64_t v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(void *)v43 == v38) {
            goto LABEL_50;
          }
          v43 += 8;
        }
        while (v43 != v41);
        uint64_t v43 = *(char **)(*(void *)a4 + 248);
LABEL_50:
        while (*(void *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            uint64_t v42 = *(char **)(*(void *)a4 + 248);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        long long v31 = a2[1];
        long long v32 = *a2;
        *(void *)long long v49 = *((void *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        long long v44 = *(long long *)((char *)a3 + 27);
        long long v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(long long *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 - 24);
      uint64_t v9 = *(void *)(a1 + 24);
      if (v8 == v9) {
        return result;
      }
      uint64_t v10 = *(char **)(*(void *)a3 + 240);
      double v11 = *(char **)(*(void *)a3 + 248);
      unint64_t v12 = v10;
      uint64_t v13 = v10;
      if (v10 == v11) {
        goto LABEL_10;
      }
      do
      {
        if (*(void *)v13 == v8) {
          goto LABEL_7;
        }
        v13 += 8;
      }
      while (v13 != v11);
      uint64_t v13 = *(char **)(*(void *)a3 + 248);
      do
      {
LABEL_7:
        if (*(void *)v12 == v9) {
          goto LABEL_10;
        }
        v12 += 8;
      }
      while (v12 != v11);
      unint64_t v12 = *(char **)(*(void *)a3 + 248);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        uint64_t v14 = (long long *)(a2 - 48);
        long long v15 = *(_OWORD *)a1;
        *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        long long v16 = *(_OWORD *)(a2 - 21);
        long long v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *uint64_t v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(long long *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), a3);
      uint64_t v19 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      int v20 = 0;
      break;
  }
  while (1)
  {
    uint64_t v21 = *(void *)(v19 + 24);
    uint64_t v22 = *(void *)(v18 + 24);
    if (v21 != v22)
    {
      uint64_t v23 = *(char **)(*(void *)a3 + 240);
      uint64_t v24 = *(char **)(*(void *)a3 + 248);
      uint64_t v25 = v23;
      double v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(void *)v26 == v21) {
            goto LABEL_19;
          }
          v26 += 8;
        }
        while (v26 != v24);
        double v26 = *(char **)(*(void *)a3 + 248);
LABEL_19:
        while (*(void *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            uint64_t v25 = *(char **)(*(void *)a3 + 248);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        long long v34 = *(_OWORD *)v19;
        uint64_t v36 = *(void *)(v19 + 16);
        long long v37 = *(_OWORD *)(v19 + 32);
        uint64_t v27 = v19;
        while (1)
        {
          long long v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1) {
            break;
          }
          uint64_t v27 = v18;
          uint64_t v29 = *(void *)(v18 - 24);
          if (v21 != v29)
          {
            long long v30 = *(char **)(*(void *)a3 + 240);
            long long v31 = *(char **)(*(void *)a3 + 248);
            long long v32 = v30;
            long long v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(void *)v33 == v21) {
                  goto LABEL_30;
                }
                v33 += 8;
              }
              while (v33 != v31);
              long long v33 = *(char **)(*(void *)a3 + 248);
LABEL_30:
              while (*(void *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  long long v32 = *(char **)(*(void *)a3 + 248);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30) {
              continue;
            }
          }
          goto LABEL_36;
        }
        uint64_t v27 = a1;
LABEL_36:
        *(_OWORD *)uint64_t v27 = v34;
        *(void *)(v27 + 16) = v36;
        *(void *)(v27 + 24) = v21;
        *(void *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8) {
          return v19 + 48 == a2;
        }
      }
    }
    uint64_t v18 = v19;
    v19 += 48;
    if (v19 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>((long long *)a1, (long long *)a2, (long long *)a3, a5).n128_u64[0];
  uint64_t v11 = *(void *)(a4 + 24);
  uint64_t v12 = *(void *)(a3 + 24);
  if (v11 != v12)
  {
    uint64_t v13 = *(char **)(*(void *)a5 + 240);
    uint64_t v14 = *(char **)(*(void *)a5 + 248);
    long long v15 = v13;
    long long v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(void *)v16 == v11) {
          goto LABEL_6;
        }
        v16 += 8;
      }
      while (v16 != v14);
      long long v16 = *(char **)(*(void *)a5 + 248);
LABEL_6:
      while (*(void *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          long long v15 = *(char **)(*(void *)a5 + 248);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      long long v17 = *(_OWORD *)a3;
      *(_OWORD *)uint64_t v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      long long v18 = *(_OWORD *)(a4 + 27);
      long long v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v38;
      __n128 result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      uint64_t v20 = *(void *)(a3 + 24);
      uint64_t v21 = *(void *)(a2 + 24);
      if (v20 != v21)
      {
        uint64_t v22 = *(char **)(*(void *)a5 + 240);
        uint64_t v23 = *(char **)(*(void *)a5 + 248);
        uint64_t v24 = v22;
        uint64_t v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(void *)v25 == v20) {
              goto LABEL_15;
            }
            v25 += 8;
          }
          while (v25 != v23);
          uint64_t v25 = *(char **)(*(void *)a5 + 248);
LABEL_15:
          while (*(void *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              uint64_t v24 = *(char **)(*(void *)a5 + 248);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          long long v26 = *(_OWORD *)a2;
          *(_OWORD *)uint64_t v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          long long v27 = *(_OWORD *)(a3 + 27);
          long long v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 16) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)v39;
          __n128 result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          uint64_t v29 = *(void *)(a2 + 24);
          uint64_t v30 = *(void *)(a1 + 24);
          if (v29 != v30)
          {
            long long v31 = *(char **)(*(void *)a5 + 240);
            long long v32 = *(char **)(*(void *)a5 + 248);
            long long v33 = v31;
            long long v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(void *)v34 == v29) {
                  goto LABEL_24;
                }
                v34 += 8;
              }
              while (v34 != v32);
              long long v34 = *(char **)(*(void *)a5 + 248);
LABEL_24:
              while (*(void *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  long long v33 = *(char **)(*(void *)a5 + 248);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              long long v35 = *(_OWORD *)a1;
              *(_OWORD *)unint64_t v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              long long v36 = *(_OWORD *)(a2 + 27);
              long long v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 16) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 16) = *(_OWORD *)v40;
              __n128 result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  uint64_t v13 = *(void *)(a5 + 24);
  uint64_t v14 = *(void *)(a4 + 24);
  if (v13 != v14)
  {
    long long v15 = *(char **)(*(void *)a6 + 240);
    long long v16 = *(char **)(*(void *)a6 + 248);
    long long v17 = v15;
    long long v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(void *)v18 == v13) {
          goto LABEL_6;
        }
        v18 += 8;
      }
      while (v18 != v16);
      long long v18 = *(char **)(*(void *)a6 + 248);
LABEL_6:
      while (*(void *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          long long v17 = *(char **)(*(void *)a6 + 248);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      long long v19 = *(_OWORD *)a4;
      *(_OWORD *)long long v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      long long v20 = *(_OWORD *)(a5 + 27);
      long long v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 16) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v49;
      __n128 result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      uint64_t v22 = *(void *)(a4 + 24);
      uint64_t v23 = *(void *)(a3 + 24);
      if (v22 != v23)
      {
        uint64_t v24 = *(char **)(*(void *)a6 + 240);
        uint64_t v25 = *(char **)(*(void *)a6 + 248);
        long long v26 = v24;
        long long v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(void *)v27 == v22) {
              goto LABEL_15;
            }
            v27 += 8;
          }
          while (v27 != v25);
          long long v27 = *(char **)(*(void *)a6 + 248);
LABEL_15:
          while (*(void *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              long long v26 = *(char **)(*(void *)a6 + 248);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          long long v28 = *(_OWORD *)a3;
          *(_OWORD *)long long v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          long long v29 = *(_OWORD *)(a4 + 27);
          long long v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 16) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 16) = *(_OWORD *)v50;
          __n128 result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          uint64_t v31 = *(void *)(a3 + 24);
          uint64_t v32 = *(void *)(a2 + 24);
          if (v31 != v32)
          {
            long long v33 = *(char **)(*(void *)a6 + 240);
            long long v34 = *(char **)(*(void *)a6 + 248);
            long long v35 = v33;
            long long v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(void *)v36 == v31) {
                  goto LABEL_24;
                }
                v36 += 8;
              }
              while (v36 != v34);
              long long v36 = *(char **)(*(void *)a6 + 248);
LABEL_24:
              while (*(void *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  long long v35 = *(char **)(*(void *)a6 + 248);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              long long v37 = *(_OWORD *)a2;
              *(_OWORD *)long long v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              long long v38 = *(_OWORD *)(a3 + 27);
              long long v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 16) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 16) = *(_OWORD *)v51;
              __n128 result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              uint64_t v40 = *(void *)(a2 + 24);
              uint64_t v41 = *(void *)(a1 + 24);
              if (v40 != v41)
              {
                uint64_t v42 = *(char **)(*(void *)a6 + 240);
                uint64_t v43 = *(char **)(*(void *)a6 + 248);
                long long v44 = v42;
                long long v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(void *)v45 == v40) {
                      goto LABEL_33;
                    }
                    v45 += 8;
                  }
                  while (v45 != v43);
                  long long v45 = *(char **)(*(void *)a6 + 248);
LABEL_33:
                  while (*(void *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      long long v44 = *(char **)(*(void *)a6 + 248);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  long long v46 = *(_OWORD *)a1;
                  *(_OWORD *)uint64_t v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  long long v47 = *(_OWORD *)(a2 + 27);
                  long long v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 16) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 16) = *(_OWORD *)v52;
                  __n128 result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsCumulative> const&)::{lambda(HDStatisticsCumulative const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsCumulative> const&)::{lambda(HDStatisticsCumulative const&)#1}>,HDStatisticsCumulative const& ()(HDStatisticsCumulative const&)>::~__func()
{
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsCumulative> const&)::{lambda(HDStatisticsCumulative const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsCumulative> const&)::{lambda(HDStatisticsCumulative const&)#1}>,HDStatisticsCumulative const& ()(HDStatisticsCumulative const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_1F1722CF0;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsCumulative> const&)::{lambda(HDStatisticsCumulative const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsCumulative> const&)::{lambda(HDStatisticsCumulative const&)#1}>,HDStatisticsCumulative const& ()(HDStatisticsCumulative const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1722CF0;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsCumulative> const&)::{lambda(HDStatisticsCumulative const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsCumulative> const&)::{lambda(HDStatisticsCumulative const&)#1}>,HDStatisticsCumulative const& ()(HDStatisticsCumulative const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsCumulative> const&)::{lambda(HDStatisticsCumulative const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsCumulative> const&)::{lambda(HDStatisticsCumulative const&)#1}>,HDStatisticsCumulative const& ()(HDStatisticsCumulative const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsCumulative> const&)::{lambda(HDStatisticsCumulative const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsCumulative> const&)::{lambda(HDStatisticsCumulative const&)#1}>,HDStatisticsCumulative const& ()(HDStatisticsCumulative const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsCumulative const& ()(HDStatisticsCumulative const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 536))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a4, 3, @"Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date");
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_configureForStartTime(a1);
  }
  double v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(void *)(a1 + 40) && a3) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_advanceToTime(a1, v8);
    }
    HDStatisticsCollectionEngine<HDStatisticsCumulative>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    uint64_t v9 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    uint64_t v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v9, a4);
  }
  return v10;
}

void sub_1BD070244(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_earliestStartTimeWithoutInvalidation(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    if (!*(unsigned char *)(a1 + 536))
    {
      double v1 = *(double *)(a1 + 176);
      double result = *(double *)(a1 + 120);
      if (v1 <= result)
      {
        double v1 = -1.79769313e308;
      }
      else if (*(unsigned char *)(a1 + 144))
      {
        double v1 = -1.79769313e308;
      }
      if (v1 >= result) {
        return v1;
      }
      return result;
    }
    return -1.79769313e308;
  }
  double result = *(double *)(a1 + 176);
  if (result <= *(double *)(a1 + 120)) {
    return -1.79769313e308;
  }
  if (*(unsigned char *)(a1 + 144)) {
    return -1.79769313e308;
  }
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_advanceToTime(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 128) <= a2)
  {
    uint64_t v4 = a1 + 112;
    uint64_t v5 = (double *)(a1 + 120);
    do
    {
      uint64_t v6 = *(void *)(a1 + 504);
      uint64_t v7 = *(void *)(a1 + 512);
      if (v7 == v6)
      {
        uint64_t v22 = 0;
        long long v15 = *(void **)(a1 + 40);
        long long v16 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a2];
        double v8 = [v15 dateIntervalContainingDate:v16 index:&v22];

        HDStatisticsBucket<HDStatisticsCumulative>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsCumulative>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v17 = v22;
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v19 = v18;
        long long v20 = [v8 endDate];
        [v20 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsCumulative>::resetToBucket(v4, v17, v19, v21);
      }
      else
      {
        double v8 = [*(id *)(a1 + 40) dateIntervalAtIndex:*(void *)(a1 + 112) + 1];
        HDStatisticsBucket<HDStatisticsCumulative>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsCumulative>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v12 = v11;
        uint64_t v13 = [v8 endDate];
        [v13 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsCumulative>::advanceBucket(v4, v12, v14);
      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_didChangeBucket(a1, v9);
      if (v7 != v6) {
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_notifyForCurrentBucket(a1);
      }
    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1BD0704CC(_Unwind_Exception *exception_object)
{
}

void HDStatisticsCollectionEngine<HDStatisticsCumulative>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a1 + 8;
  double v6 = *(double *)a2;
  double v7 = *(double *)(a2 + 8);
  double v8 = *(double *)(a2 + 16);
  uint64_t v9 = *(uint64_t **)(a2 + 24);
  unsigned __int8 v10 = *(unsigned char *)(a2 + 32);
  char v11 = *(unsigned char *)(a2 + 33);
  double v12 = *(double *)(a1 + 8) - v7;
  int v13 = v10;
  unint64_t v14 = (unint64_t)v9;
  char v15 = v11;
  double v16 = v8;
  double v17 = v7;
  double v18 = *(double *)a2;
  if (v12 >= 0.01)
  {
    if (v8 - v7 - v12 >= 0.01)
    {
      int v13 = *(unsigned __int8 *)(a2 + 32);
      double v18 = v6 - v6 * (v12 / (v8 - v7));
      unint64_t v14 = *(void *)(a2 + 24);
      char v15 = *(unsigned char *)(a2 + 33);
      double v16 = *(double *)(a2 + 16);
      double v17 = *(double *)(a1 + 8);
    }
    else
    {
      int v13 = 0;
      unint64_t v14 = 0;
      char v15 = 0;
      double v16 = 0.0;
      double v17 = 0.0;
      double v18 = 0.0;
    }
  }
  double v19 = *(double *)(a1 + 16);
  double v20 = v19 - v17;
  double v21 = v16 - v17;
  double v22 = v16 - v17 - (v19 - v17);
  if (!*(_DWORD *)(a1 + 36))
  {
    if (v22 < 0.01) {
      goto LABEL_10;
    }
    if (v20 >= 0.01) {
      goto LABEL_24;
    }
LABEL_22:
    int v23 = v13;
    unint64_t v31 = v14;
    double v25 = v16;
    double v19 = v17;
    double v24 = v18;
    if (!v23) {
      return;
    }
    goto LABEL_60;
  }
  if (v20 < 0.01) {
    goto LABEL_22;
  }
  if (v22 >= 0.01)
  {
LABEL_24:
    double v25 = v16;
    unint64_t v69 = v14;
    double v24 = v18 - v18 * (v20 / v21);
    int v23 = v13;
    char v70 = v15;
    double v16 = *(double *)(a1 + 16);
    double v18 = v18 * (v20 / v21);
    if (!v13)
    {
LABEL_25:
      char v15 = v70;
      unint64_t v31 = v69;
      if (!v23) {
        return;
      }
      goto LABEL_60;
    }
    goto LABEL_11;
  }
LABEL_10:
  unint64_t v69 = 0;
  int v23 = 0;
  char v70 = 0;
  double v24 = 0.0;
  double v19 = 0.0;
  double v25 = 0.0;
  if (!v13) {
    goto LABEL_25;
  }
LABEL_11:
  double v67 = v17;
  double v68 = v16;
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 208, v14, v14);
  unint64_t v26 = *(void *)(a1 + 112);
  if (v26 == *(void *)(a1 + 104) && *(uint64_t *)(a1 + 136) <= 0)
  {
    v32.f64[1] = *(float64_t *)(a1 + 16);
    double v28 = v67;
    double v27 = v68;
    v32.f64[0] = v67;
    v33.f64[0] = *(float64_t *)(a1 + 8);
    v33.f64[1] = v68;
    int8x16_t v34 = (int8x16_t)vcgtq_f64(v33, v32);
    v33.f64[0] = v67;
    *(int8x16_t *)(a1 + 48) = vbslq_s8(v34, *(int8x16_t *)(a1 + 8), (int8x16_t)v33);
  }
  else
  {
    double v28 = v67;
    double v27 = v68;
    if (v67 < *(double *)(a1 + 48))
    {
      double v29 = *(double *)(a1 + 8);
      if (v67 >= v29) {
        double v29 = v67;
      }
      *(double *)(a1 + 48) = v29;
    }
    if (v68 > *(double *)(a1 + 56))
    {
      double v30 = *(double *)(a1 + 16);
      if (v30 >= v68) {
        double v30 = v68;
      }
      *(double *)(a1 + 56) = v30;
    }
  }
  if (*(unsigned char *)(a1 + 32))
  {
    double v35 = *(double *)(a1 + 64);
    if (v28 < v35) {
      double v35 = v28;
    }
    *(double *)(a1 + 64) = v35;
  }
  if (a3 && v28 < *(double *)(a1 + 16))
  {
    HDStatisticsBucket<HDStatisticsCumulative>::_mergeThroughTime(v5, v28);
    double v28 = v67;
    double v27 = v68;
    unint64_t v26 = *(void *)(a1 + 112);
  }
  unint64_t v36 = *(void *)(a1 + 120);
  if (v26 >= v36)
  {
    uint64_t v38 = *(void *)(a1 + 104);
    unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - v38) >> 4);
    unint64_t v40 = v39 + 1;
    if (v39 + 1 > 0x555555555555555) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - v38) >> 4);
    if (2 * v41 > v40) {
      unint64_t v40 = 2 * v41;
    }
    if (v41 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v42 = 0x555555555555555;
    }
    else {
      unint64_t v42 = v40;
    }
    if (v42)
    {
      unint64_t v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v42);
      double v28 = v67;
      double v27 = v68;
    }
    else
    {
      uint64_t v43 = 0;
    }
    unint64_t v44 = v42 + 48 * v39;
    unint64_t v45 = v42 + 48 * v43;
    *(double *)unint64_t v44 = v18;
    *(double *)(v44 + 8) = v28;
    *(double *)(v44 + 16) = v27;
    *(void *)(v44 + 24) = v14;
    *(unsigned char *)(v44 + 32) = v13;
    *(unsigned char *)(v44 + 33) = v15;
    *(_WORD *)(v44 + 40) = 0;
    *(unsigned char *)(v44 + 42) = 0;
    unint64_t v37 = v44 + 48;
    long long v47 = *(char **)(a1 + 104);
    long long v46 = *(char **)(a1 + 112);
    if (v46 == v47)
    {
      char v15 = v70;
      unint64_t v31 = v69;
    }
    else
    {
      char v15 = v70;
      unint64_t v31 = v69;
      do
      {
        long long v48 = *((_OWORD *)v46 - 3);
        long long v49 = *((_OWORD *)v46 - 2);
        *(_OWORD *)(v44 - 21) = *(_OWORD *)(v46 - 21);
        *(_OWORD *)(v44 - 48) = v48;
        *(_OWORD *)(v44 - 32) = v49;
        v44 -= 48;
        v46 -= 48;
      }
      while (v46 != v47);
      long long v46 = *(char **)(a1 + 104);
    }
    *(void *)(a1 + 104) = v44;
    *(void *)(a1 + 112) = v37;
    *(void *)(a1 + 120) = v45;
    if (v46) {
      operator delete(v46);
    }
  }
  else
  {
    *(double *)unint64_t v26 = v18;
    *(double *)(v26 + 8) = v28;
    *(double *)(v26 + 16) = v27;
    *(void *)(v26 + 24) = v14;
    *(unsigned char *)(v26 + 32) = v13;
    *(unsigned char *)(v26 + 33) = v15;
    *(_WORD *)(v26 + 40) = 0;
    unint64_t v37 = v26 + 48;
    *(unsigned char *)(v26 + 42) = 0;
    char v15 = v70;
    unint64_t v31 = v69;
  }
  *(void *)(a1 + 112) = v37;
  if (!*(unsigned char *)(a1 + 176) || *(double *)(a1 + 152) <= v7)
  {
    *(double *)(a1 + 144) = v6;
    *(double *)(a1 + 152) = v7;
    *(double *)(a1 + 160) = v8;
    *(void *)(a1 + 168) = v9;
    *(unsigned char *)(a1 + 176) = v10;
    *(unsigned char *)(a1 + 177) = v11;
  }
  if (*(unsigned char *)(a1 + 33)
    && ((unint64_t v50 = HDStatisticsBucket<HDStatisticsCumulative>::_canonicalSourceIDForSourceID(v5, v14),
         long long v51 = HDStatisticsBucket<HDStatisticsCumulative>::_statisticsForSource(v5, v50),
         !*((unsigned char *)v51 + 48))
     || *((double *)v51 + 3) <= v7))
  {
    *((double *)v51 + 2) = v6;
    *((double *)v51 + 3) = v7;
    *((double *)v51 + 4) = v8;
    v51[5] = v9;
    *((unsigned char *)v51 + 48) = v10;
    *((unsigned char *)v51 + 49) = v11;
    if (!v23) {
      return;
    }
  }
  else if (!v23)
  {
    return;
  }
LABEL_60:
  unint64_t v52 = *(void *)(a1 + 400);
  unint64_t v53 = *(void *)(a1 + 408);
  if (v52 >= v53)
  {
    uint64_t v55 = *(void *)(a1 + 392);
    unint64_t v56 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v52 - v55) >> 3);
    unint64_t v57 = v56 + 1;
    if (v56 + 1 > 0x666666666666666) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v58 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v53 - v55) >> 3);
    if (2 * v58 > v57) {
      unint64_t v57 = 2 * v58;
    }
    if (v58 >= 0x333333333333333) {
      unint64_t v59 = 0x666666666666666;
    }
    else {
      unint64_t v59 = v57;
    }
    if (v59) {
      unint64_t v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v59);
    }
    else {
      uint64_t v60 = 0;
    }
    unint64_t v61 = v59 + 40 * v56;
    unint64_t v62 = v59 + 40 * v60;
    *(double *)unint64_t v61 = v24;
    *(double *)(v61 + 8) = v19;
    *(double *)(v61 + 16) = v25;
    *(void *)(v61 + 24) = v31;
    *(unsigned char *)(v61 + 32) = v23;
    *(unsigned char *)(v61 + 33) = v15;
    unint64_t v54 = v61 + 40;
    long long v64 = *(char **)(a1 + 392);
    unint64_t v63 = *(char **)(a1 + 400);
    if (v63 != v64)
    {
      do
      {
        long long v65 = *(_OWORD *)(v63 - 40);
        long long v66 = *(_OWORD *)(v63 - 24);
        *(_WORD *)(v61 - 8) = *((_WORD *)v63 - 4);
        *(_OWORD *)(v61 - 24) = v66;
        *(_OWORD *)(v61 - 40) = v65;
        v61 -= 40;
        v63 -= 40;
      }
      while (v63 != v64);
      unint64_t v63 = *(char **)(a1 + 392);
    }
    *(void *)(a1 + 392) = v61;
    *(void *)(a1 + 400) = v54;
    *(void *)(a1 + 408) = v62;
    if (v63) {
      operator delete(v63);
    }
  }
  else
  {
    *(double *)unint64_t v52 = v24;
    *(double *)(v52 + 8) = v19;
    *(double *)(v52 + 16) = v25;
    *(void *)(v52 + 24) = v31;
    *(unsigned char *)(v52 + 32) = v23;
    unint64_t v54 = v52 + 40;
    *(unsigned char *)(v52 + 33) = v15;
  }
  *(void *)(a1 + 400) = v54;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_notifyForCurrentBucket(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 538))
  {
    *(unsigned char *)(a1 + 540) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 540) = 0;
    unint64_t v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      uint64_t v4 = v2;
      unint64_t v3 = (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      if (v3) {
        v4[2](v4, v3);
      }

      unint64_t v2 = v4;
    }
  }
}

void sub_1BD070B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsCumulative>::advanceBucket(uint64_t a1, double a2, double a3)
{
  uint64_t v9 = 0;
  unsigned __int8 v10 = 0;
  uint64_t v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 392), *(void *)(a1 + 400), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 400) - *(void *)(a1 + 392)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsCumulative>::resetToBucket(a1, *(void *)a1 + 1, a2, a3);
  double v6 = v9;
  double v7 = v10;
  if (v9 != v10)
  {
    uint64_t v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsCumulative>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BD070C08(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsCumulative>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8 = a1 + 40;
  objc_storeStrong((id *)(a1 + 416), *(id *)(a1 + 40));
  *(double *)(v8 - 32) = a3;
  *(double *)(v8 - 24) = a4;
  *(double *)(v8 + 24) = a3;
  *(void *)(v8 + 72) = *(void *)(v8 + 64);
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(void *)(v8 + 136) = 0;
  if (*(void *)(v8 + 160))
  {
    uint64_t v9 = *(void *)(a1 + 192);
    unsigned __int8 v10 = *(void **)(a1 + 184);
    *(void *)(a1 + 184) = a1 + 192;
    *(void *)(v9 + 16) = 0;
    *(void *)(a1 + 192) = 0;
    *(void *)(a1 + 200) = 0;
    if (v10[1]) {
      uint64_t v11 = (void *)v10[1];
    }
    else {
      uint64_t v11 = v10;
    }
    if (v11)
    {
      double v12 = (void *)v11[2];
      if (v12)
      {
        int v13 = (void *)*v12;
        if ((void *)*v12 == v11)
        {
          void *v12 = 0;
          while (1)
          {
            char v15 = (void *)v12[1];
            if (!v15) {
              break;
            }
            do
            {
              double v12 = v15;
              char v15 = (void *)*v15;
            }
            while (v15);
          }
        }
        else
        {
          for (v12[1] = 0; v13; int v13 = (void *)v12[1])
          {
            do
            {
              double v12 = v13;
              int v13 = (void *)*v13;
            }
            while (v13);
          }
        }
        std::__tree<long>::destroy(v11);
        for (uint64_t i = (void *)v12[2]; i; uint64_t i = (void *)i[2])
          double v12 = i;
        uint64_t v11 = v12;
      }
    }
    std::__tree<long>::destroy(v11);
  }
  objc_storeStrong((id *)v8, *(id *)(a1 + 416));
  *(void *)(a1 + 400) = *(void *)(a1 + 392);
  *(void *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 540))
  {
    if (v3)
    {
      id v6 = v3;
      uint64_t v4 = _Block_copy(*(const void **)(a1 + 96));
      uint64_t v5 = v4;
      if (v4) {
        (*((void (**)(void *, id))v4 + 2))(v4, v6);
      }

      id v3 = v6;
    }
    *(unsigned char *)(a1 + 540) = 0;
  }
}

void sub_1BD070DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_currentBucketInterval(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 536))
  {
    double v1 = 0;
  }
  else
  {
    double v1 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", *(double *)(a1 + 120), *(double *)(a1 + 128));
  }

  return v1;
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsCumulativeE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 startDate];
  id v6 = [v4 startDate];
  uint64_t v7 = [v5 compare:v6];

  return v7;
}

void sub_1BD070E94(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_primitiveInvalidateInterval(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 13);
  if (WeakRetained)
  {
    if (v5
      && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_currentBucketInterval((uint64_t)a1),
          (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v8 = [v5 endDate];
      uint64_t v9 = [v7 startDate];
      if (objc_msgSend(v8, "hk_isAfterDate:", v9))
      {
        unsigned __int8 v10 = [v5 startDate];
        uint64_t v11 = [v7 endDate];
        char v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);
      }
      else
      {
        char v12 = 0;
      }

      int v13 = _Block_copy(a1[12]);
      if ((v12 & 1) == 0) {
        operator new();
      }
    }
    else
    {
      int v13 = _Block_copy(a1[12]);
    }
    *((unsigned char *)a1 + 536) = 1;
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsCumulativeE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
    v27[3] = &unk_1E6308FF8;
    id v15 = v5;
    id v28 = v15;
    id v16 = v13;
    id v29 = v16;
    (*((void (**)(id *, void *))*a1 + 9))(a1, v27);
    if (v5)
    {
      double v17 = [v15 startDate];
      [v17 timeIntervalSinceReferenceDate];
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_configureForStartTime((uint64_t)a1);
    }
    else
    {
      (*((void (**)(id *))*a1 + 4))(a1);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsCumulativeE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
    v21[3] = &unk_1E6309060;
    double v24 = a1;
    id v5 = v15;
    char v26 = 1;
    id v22 = v5;
    double v25 = a1;
    id v23 = WeakRetained;
    uint64_t v14 = (*((uint64_t (**)(id *, void *, uint64_t))*a1 + 14))(a1, v21, a3);
    double v18 = _Block_copy(v16);
    id v19 = a1[12];
    a1[12] = v18;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to invalidate interval: no data source available.");
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1BD0712E4(_Unwind_Exception *a1)
{
  MEMORY[0x1C187B8A0](v4, 0x10F1C40C88B5054);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsCumulativeE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_11;
  }
  id v3 = [v10 endDate];
  uint64_t v4 = [*(id *)(a1 + 32) startDate];
  char v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    id v6 = [v10 startDate];
    uint64_t v7 = [*(id *)(a1 + 32) endDate];
    char v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_11:
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9) {
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
      }
    }
  }
}

void sub_1BD0714C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsCumulativeE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = [*(id *)(a1 + 32) startDate];
  [v5 timeIntervalSinceReferenceDate];
  uint64_t v7 = v6;

  char v8 = [*(id *)(a1 + 32) endDate];
  [v8 timeIntervalSinceReferenceDate];
  uint64_t v10 = v9;

  uint64_t v11 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  uint64_t v13 = *(void *)(a1 + 32);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsCumulativeE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  char v32 = *(unsigned char *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  uint64_t v31 = *(void *)(a1 + 56);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsCumulativeE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  uint64_t v14 = [v11 collectionCalculator:WeakRetained queryForInterval:v13 error:a2 sampleHandler:v30 mergeHandler:v29];

  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15 != v4)
    {
      id v16 = [*(id *)(a1 + 32) endDate];
      [v16 timeIntervalSinceReferenceDate];
      if (*(void *)(v15 + 40))
      {
        double v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          id v19 = [*(id *)(v15 + 40) dateIntervalAtIndex:*(void *)(v15 + 112) + 1];
          HDStatisticsBucket<HDStatisticsCumulative>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsCumulative>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          double v20 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_statisticsFromFinishedBucket(v15, (double *)(v15 + 120));
          double v21 = [v19 startDate];
          [v21 timeIntervalSinceReferenceDate];
          double v23 = v22;
          double v24 = [v19 endDate];
          [v24 timeIntervalSinceReferenceDate];
          HDStatisticsCollectionEngine<HDStatisticsCumulative>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            char v26 = _Block_copy(*(const void **)(v15 + 96));
            double v27 = v26;
            if (v26) {
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);
            }
          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_didChangeBucket(v15, 0);
        }
      }
    }
  }
  return v14;
}

void sub_1BD071774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsCumulativeE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7 = *(double *)(a1 + 32) - a6;
  if (v7 >= 0.01)
  {
    double v9 = a7 - a6;
    if (v9 - v7 >= 0.01)
    {
      a5 = a5 - v7 / v9 * a5;
      int v8 = 1;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      int v8 = 0;
      a5 = 0.0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    int v8 = 1;
  }
  *(double *)uint64_t v13 = a5;
  *(double *)&v13[1] = a6;
  double v14 = a7;
  uint64_t v15 = a2;
  char v16 = v8;
  char v17 = 0;
  if (*(unsigned char *)(a1 + 56))
  {
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)v13, a3, a4);
    }
  }
  else
  {
    double v11 = *(double *)(a1 + 40) - a6;
    if (v11 >= 0.01)
    {
      double v12 = a7 - a6;
      if (v12 - v11 >= 0.01)
      {
        a5 = a5 * (v11 / v12);
        a7 = *(double *)(a1 + 40);
      }
    }
    else
    {
      int v8 = 0;
    }
    *(double *)uint64_t v13 = a5;
    double v14 = a7;
    char v16 = v8;
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)v13, a3, a4);
    }
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsCumulativeE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 536)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_configureForStartTime(a1);
  }
  if (*(void *)(a1 + 40)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_advanceToTime(a1, a2);
  }
  if (*(double *)(a1 + 128) > a2)
  {
    HDStatisticsBucket<HDStatisticsCumulative>::_mergeThroughTime(a1 + 120, a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 32) < *(double *)(v10 + 8))
                {
                  uint64_t v129 = *(void *)(v10 + 32);
                  long long v113 = *(_OWORD *)v10;
                  long long v121 = *(_OWORD *)(v10 + 16);
                  long long v52 = *(_OWORD *)(a2 - 40);
                  long long v53 = *(_OWORD *)(a2 - 24);
                  *(_WORD *)(v10 + 32) = *(_WORD *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(_WORD *)(a2 - 8) = v129;
                  *(_OWORD *)(a2 - 24) = v121;
                  *(_OWORD *)(a2 - 40) = v113;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v10, (double *)(v10 + 40), (double *)(a2 - 40));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, v10 + 120, a2 - 40);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            unint64_t v54 = (void *)(v10 + 40);
            BOOL v56 = v10 == a2 || v54 == (void *)a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  unint64_t v59 = v54;
                  double v60 = *(double *)(v58 + 48);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *v54;
                    long long v114 = *(_OWORD *)(v58 + 56);
                    uint64_t v122 = *(void *)(v58 + 72);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      uint64_t v63 = v10 + v62;
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      *(_OWORD *)(v63 + 40) = *(_OWORD *)(v10 + v62);
                      *(_OWORD *)(v63 + 56) = v64;
                      *(_WORD *)(v63 + 72) = *(_WORD *)(v10 + v62 + 32);
                      if (!v62) {
                        break;
                      }
                      v62 -= 40;
                      if (v60 >= *(double *)(v63 - 32))
                      {
                        uint64_t v65 = v10 + v62 + 40;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = v114;
                    *(_WORD *)(v65 + 32) = v122;
                  }
                  unint64_t v54 = v59 + 5;
                  v57 += 40;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 5 != (void *)a2);
              }
            }
            else if (!v56)
            {
              do
              {
                long long v98 = v54;
                double v99 = *(double *)(a1 + 48);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *v54;
                  long long v117 = *(_OWORD *)(a1 + 56);
                  uint64_t v125 = *(void *)(a1 + 72);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(_OWORD *)(v101 - 3);
                    *(_OWORD *)long long v101 = *(_OWORD *)(v101 - 5);
                    *((_OWORD *)v101 + 1) = v102;
                    *((_WORD *)v101 + 16) = *((_WORD *)v101 - 4);
                    double v103 = *((double *)v101 - 9);
                    v101 -= 5;
                  }
                  while (v99 < v103);
                  void *v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *((_WORD *)v101 + 16) = v125;
                  *((_OWORD *)v101 + 1) = v117;
                }
                v54 += 5;
                a1 = (unint64_t)v98;
              }
              while (v98 + 5 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 40 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v10 + 40 * v69 + 8) < *(double *)(v70 + 48))
                  {
                    v70 += 40;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  double v71 = *(double *)(v10 + 40 * v68 + 8);
                  if (*(double *)(v70 + 8) >= v71)
                  {
                    unint64_t v72 = v10 + 40 * v68;
                    uint64_t v73 = *(void *)v72;
                    uint64_t v123 = *(void *)(v72 + 32);
                    long long v115 = *(_OWORD *)(v72 + 16);
                    do
                    {
                      unint64_t v74 = v72;
                      unint64_t v72 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_WORD *)(v74 + 32) = *(_WORD *)(v70 + 32);
                      *(_OWORD *)unint64_t v74 = v75;
                      *(_OWORD *)(v74 + 16) = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 40 * v77;
                      uint64_t v78 = 2 * v69 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v10 + 40 * v77 + 8) < *(double *)(v70 + 48))
                      {
                        v70 += 40;
                        uint64_t v77 = v78;
                      }
                      uint64_t v69 = v77;
                    }
                    while (*(double *)(v70 + 8) >= v71);
                    *(void *)unint64_t v72 = v73;
                    *(double *)(v72 + 8) = v71;
                    *(_OWORD *)(v72 + 16) = v115;
                    *(_WORD *)(v72 + 32) = v123;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x28uLL;
              do
              {
                uint64_t v80 = 0;
                uint64_t v130 = *(void *)(v10 + 32);
                long long v116 = *(_OWORD *)v10;
                long long v124 = *(_OWORD *)(v10 + 16);
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = v81;
                  uint64_t v83 = v80 + 1;
                  v81 += 40 * (v80 + 1);
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v85 = v84 + 2;
                  if (v85 < v79 && *(double *)(v82 + 40 * v83 + 8) < *(double *)(v81 + 48))
                  {
                    v81 += 40;
                    uint64_t v80 = v85;
                  }
                  long long v86 = *(_OWORD *)v81;
                  long long v87 = *(_OWORD *)(v81 + 16);
                  *(_WORD *)(v82 + 32) = *(_WORD *)(v81 + 32);
                  *(_OWORD *)unint64_t v82 = v86;
                  *(_OWORD *)(v82 + 16) = v87;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 40;
                if (v81 == a2)
                {
                  *(_WORD *)(v81 + 32) = v130;
                  *(_OWORD *)unint64_t v81 = v116;
                  *(_OWORD *)(v81 + 16) = v124;
                }
                else
                {
                  long long v88 = *(_OWORD *)a2;
                  long long v89 = *(_OWORD *)(a2 + 16);
                  *(_WORD *)(v81 + 32) = *(_WORD *)(a2 + 32);
                  *(_OWORD *)unint64_t v81 = v88;
                  *(_OWORD *)(v81 + 16) = v89;
                  *(_WORD *)(a2 + 32) = v130;
                  *(_OWORD *)a2 = v116;
                  *(_OWORD *)(a2 + 16) = v124;
                  uint64_t v90 = v81 - v10 + 40;
                  if (v90 >= 41)
                  {
                    unint64_t v91 = (v90 / 0x28uLL - 2) >> 1;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v10 + 40 * v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      uint64_t v109 = *(void *)(v81 + 32);
                      long long v106 = *(_OWORD *)(v81 + 16);
                      do
                      {
                        unint64_t v94 = v81;
                        unint64_t v81 = v10 + 40 * v91;
                        long long v95 = *(_OWORD *)v81;
                        long long v96 = *(_OWORD *)(v81 + 16);
                        *(_WORD *)(v94 + 32) = *(_WORD *)(v81 + 32);
                        *(_OWORD *)unint64_t v94 = v95;
                        *(_OWORD *)(v94 + 16) = v96;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 40 * v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_WORD *)(v81 + 32) = v109;
                      *(_OWORD *)(v81 + 16) = v106;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40 * (v12 >> 1)), (double *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            char v16 = (double *)(a1 + 40 * v13 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40), v16, (double *)(a2 - 80));
            char v17 = (double *)(a1 + 40 + 8 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 80), v17, (double *)(a2 - 120));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v16, (double *)v14, v17);
            uint64_t v126 = *(void *)(a1 + 32);
            long long v110 = *(_OWORD *)a1;
            long long v118 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 16) = v19;
            *(_WORD *)(v14 + 32) = v126;
            *(_OWORD *)unint64_t v14 = v110;
            *(_OWORD *)(v14 + 16) = v118;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40 * (v12 >> 1)), (double *)a1, (double *)(a2 - 40));
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 32) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          long long v105 = *(_OWORD *)(a1 + 16);
          uint64_t v108 = *(void *)(a1 + 32);
          if (v20 >= *(double *)(a2 - 32))
          {
            unint64_t v41 = a1 + 40;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 40;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 40;
              double v40 = *(double *)(v39 + 48);
              v39 += 40;
            }
            while (v20 >= v40);
          }
          unint64_t v43 = a2;
          if (v10 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              unint64_t v43 = v44 - 40;
              double v45 = *(double *)(v44 - 32);
              v44 -= 40;
            }
            while (v20 < v45);
          }
          while (v10 < v43)
          {
            uint64_t v128 = *(void *)(v10 + 32);
            long long v112 = *(_OWORD *)v10;
            long long v120 = *(_OWORD *)(v10 + 16);
            long long v46 = *(_OWORD *)v43;
            long long v47 = *(_OWORD *)(v43 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v43 + 32);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(_WORD *)(v43 + 32) = v128;
            *(_OWORD *)unint64_t v43 = v112;
            *(_OWORD *)(v43 + 16) = v120;
            do
            {
              double v48 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *(double *)(v43 - 32);
              v43 -= 40;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 40);
            long long v51 = *(_OWORD *)(v10 - 24);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 40) = v38;
          *(double *)(v10 - 32) = v20;
          *(_WORD *)(v10 - 8) = v108;
          *(_OWORD *)(v10 - 24) = v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        long long v104 = *(_OWORD *)(a1 + 16);
        uint64_t v107 = *(void *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 48);
          v21 += 40;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        unint64_t v25 = a2;
        if (v21 == 40)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 40;
            double v29 = *(double *)(v28 - 32);
            v28 -= 40;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 40;
            double v27 = *(double *)(v25 - 32);
            v25 -= 40;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v127 = *(void *)(v10 + 32);
            long long v111 = *(_OWORD *)v10;
            long long v119 = *(_OWORD *)(v10 + 16);
            long long v31 = *(_OWORD *)v30;
            long long v32 = *(_OWORD *)(v30 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v30 + 32);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(_WORD *)(v30 + 32) = v127;
            *(_OWORD *)unint64_t v30 = v111;
            *(_OWORD *)(v30 + 16) = v119;
            do
            {
              double v33 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v33 < v20);
            do
            {
              double v34 = *(double *)(v30 - 32);
              v30 -= 40;
            }
            while (v34 >= v20);
          }
          while (v10 < v30);
        }
        if (v10 - 40 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 40);
          long long v36 = *(_OWORD *)(v10 - 24);
          *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 40) = v22;
        *(double *)(v10 - 32) = v20;
        *(_WORD *)(v10 - 8) = v107;
        *(_OWORD *)(v10 - 24) = v104;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 40;
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        __int16 v9 = *(_WORD *)(a2 - 8);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      uint64_t v16 = *(void *)v12;
      long long v21 = *(_OWORD *)(v12 + 16);
      uint64_t v22 = *(void *)(v12 + 32);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(void *)uint64_t v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsCumulativeE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(void *a1, uint64_t a2)
{
  id v3 = (void *)a1[5];
  uint64_t v4 = a1[6];
  BOOL v5 = (void *)a1[4];
  uint64_t v6 = [v5 dateInterval];
  void v9[4] = v4;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsCumulativeE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsCumulativeE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  uint64_t v7 = [v3 collectionCalculator:v5 queryForInterval:v6 error:a2 sampleHandler:v10 mergeHandler:v9];

  return v7;
}

void sub_1BD072514(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsCumulativeE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10 = *(void *)(a1 + 32);
  *(double *)int v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  char v15 = 1;
  uint64_t v11 = [MEMORY[0x1E4F1C9C8] distantFuture];
  [v11 timeIntervalSinceReferenceDate];
  BOOL v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1BD0725B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsCumulativeE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6 = a3;
  uint64_t v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = &unk_1F1722DA0;
  double v9 = 900.0;
  if ((v6 & 0x10) == 0) {
    double v9 = 0.0;
  }
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(void *)(v8 + 104) = 0;
  *(void *)(v8 + 112) = 0;
  *(void *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_WORD *)(a1 + 680) = 1;
  *(unsigned char *)(a1 + 682) = 0;
  *(unsigned char *)(a1 + 684) = 0;
  *(void *)(a1 + 688) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(void *)(a1 + 728) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);

  JUMPOUT(0x1C187B8A0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1F1722DA0;
  unint64_t v2 = *(void **)(a1 + 712);
  if (v2)
  {
    *(void *)(a1 + 720) = v2;
    operator delete(v2);
  }

  id v3 = *(void **)(a1 + 648);
  if (v3)
  {
    *(void *)(a1 + 656) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(unsigned char *)(result + 680) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::setDateInterval(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 copy];
  uint64_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;

  BOOL v5 = [v6 startDate];
  [v5 timeIntervalSinceReferenceDate];
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
}

void sub_1BD072768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(void *)(a1 + 40))
  {
    id v5 = v3;
    [v3 timeIntervalSinceReferenceDate];
    *(void *)(a1 + 688) = v4;
    id v3 = v5;
  }
}

void sub_1BD0727DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::setStatisticsConfiguration(id *a1, void *a2)
{
  objc_storeStrong(a1 + 87, a2);
  id v7 = a2;
  id v4 = a1[87];
  id v5 = a1[84];
  a1[84] = v4;
  id v6 = v4;

  objc_storeStrong(a1 + 19, a1[84]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (*(void *)(a1 + 40)) {
    return 1;
  }
  BOOL v7 = *(void *)(a1 + 224) == *(void *)(a1 + 216) && *(uint64_t *)(a1 + 312) < 1
    || HKIntervalMask<double>::firstDifference(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)a2, *(void *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (v7) {
    return 1;
  }
  double v9 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128);

  return v9(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 copy];
  id v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v3;
}

void sub_1BD0729C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::dataSource(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));

  return WeakRetained;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::currentStatistics(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 680))
  {
    double v1 = 0;
  }
  else
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v4);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v4, v4[1]);
    double v1 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v4);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v4);
  }

  return v1;
}

void sub_1BD072A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(a1 + 64);
  BOOL v7 = v6;
  if (!v6) {
    goto LABEL_4;
  }
  uint64_t v8 = [v6 startDate];
  [v8 timeIntervalSinceReferenceDate];
  if (v9 > *(double *)(a2 + 16))
  {

    goto LABEL_10;
  }
  uint64_t v10 = [v7 endDate];
  [v10 timeIntervalSinceReferenceDate];
  double v12 = v11;
  double v13 = *(double *)(a2 + 8);

  if (v12 >= v13)
  {
LABEL_4:
    if (!*(unsigned char *)(a1 + 682)) {
      goto LABEL_21;
    }
    if (!*(unsigned char *)(a1 + 681))
    {
      if (*(void *)(a1 + 40))
      {
        if (*(unsigned char *)(a1 + 680))
        {
          double v14 = -1.79769313e308;
        }
        else
        {
          double v16 = *(double *)(a1 + 176);
          double v14 = *(double *)(a1 + 120);
          if (v16 <= v14) {
            double v16 = -1.79769313e308;
          }
          if (v16 >= v14) {
            double v14 = v16;
          }
        }
      }
      else
      {
        double v14 = -1.79769313e308;
        if (*(double *)(a1 + 176) > *(double *)(a1 + 120)) {
          double v14 = *(double *)(a1 + 176);
        }
      }
      if (v14 > *(double *)(a2 + 8))
      {
        uint64_t v17 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
        uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v17, a3);

        goto LABEL_22;
      }
      if (*(unsigned char *)(a1 + 683))
      {
LABEL_21:
        uint64_t v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveAddSample(a1, a2, 1, a3);
        goto LABEL_22;
      }
      unint64_t v19 = *(void *)(a1 + 720);
      unint64_t v20 = *(void *)(a1 + 728);
      if (v19 >= v20)
      {
        uint64_t v24 = *(void *)(a1 + 712);
        unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v24) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - v24) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x333333333333333) {
          unint64_t v28 = 0x666666666666666;
        }
        else {
          unint64_t v28 = v26;
        }
        if (v28) {
          unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v28);
        }
        else {
          uint64_t v29 = 0;
        }
        unint64_t v30 = v28 + 40 * v25;
        unint64_t v31 = v28 + 40 * v29;
        long long v32 = *(_OWORD *)a2;
        long long v33 = *(_OWORD *)(a2 + 16);
        *(void *)(v30 + 32) = *(void *)(a2 + 32);
        *(_OWORD *)unint64_t v30 = v32;
        *(_OWORD *)(v30 + 16) = v33;
        unint64_t v23 = v30 + 40;
        double v34 = *(char **)(a1 + 720);
        long long v35 = *(char **)(a1 + 712);
        if (v34 != v35)
        {
          do
          {
            long long v36 = *(_OWORD *)(v34 - 40);
            long long v37 = *(_OWORD *)(v34 - 24);
            *(_WORD *)(v30 - 8) = *((_WORD *)v34 - 4);
            *(_OWORD *)(v30 - 24) = v37;
            *(_OWORD *)(v30 - 40) = v36;
            v30 -= 40;
            v34 -= 40;
          }
          while (v34 != v35);
          double v34 = *(char **)(a1 + 712);
        }
        *(void *)(a1 + 712) = v30;
        *(void *)(a1 + 720) = v23;
        *(void *)(a1 + 728) = v31;
        if (v34) {
          operator delete(v34);
        }
      }
      else
      {
        long long v21 = *(_OWORD *)a2;
        long long v22 = *(_OWORD *)(a2 + 16);
        *(void *)(v19 + 32) = *(void *)(a2 + 32);
        *(_OWORD *)unint64_t v19 = v21;
        *(_OWORD *)(v19 + 16) = v22;
        unint64_t v23 = v19 + 40;
      }
      *(void *)(a1 + 720) = v23;
    }
  }
LABEL_10:
  uint64_t v15 = 1;
LABEL_22:

  return v15;
}

void sub_1BD072D50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = v5;
  if (*(unsigned char *)(a1 + 682))
  {
    uint64_t v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 682) = 1;
  uint64_t v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    uint64_t v7 = 0;
    goto LABEL_82;
  }
  uint64_t v65 = v6;
  if (*(unsigned char *)(a1 + 681)) {
    goto LABEL_5;
  }
  double v9 = *(void **)(a1 + 704);
  if (!v9)
  {
    id v68 = 0;
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 40))
  {
LABEL_5:
    int v8 = 0;
    id v68 = 0;
    goto LABEL_29;
  }
  [v9 sortUsingComparator:&__block_literal_global_657];
  id v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v10 = *(id *)(a1 + 704);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  if (!v11)
  {

    id v12 = 0;
    goto LABEL_27;
  }
  id v12 = 0;
  uint64_t v13 = *(void *)v70;
  do
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (*(void *)v70 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(id *)(*((void *)&v69 + 1) + 8 * i);
      double v16 = v15;
      if (v12)
      {
        uint64_t v17 = [v15 startDate];
        uint64_t v18 = [v12 endDate];
        int v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          unint64_t v20 = [v16 endDate];
          long long v21 = [v12 endDate];
          int v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22) {
            goto LABEL_21;
          }
          id v23 = objc_alloc(MEMORY[0x1E4F28C18]);
          uint64_t v24 = [v12 startDate];
          unint64_t v25 = [v16 endDate];
          id v26 = (id)[v23 initWithStartDate:v24 endDate:v25];
        }
        else
        {
          [v68 addObject:v12];
          id v26 = v16;
        }
        id v12 = v26;
      }
      else
      {
        id v12 = v15;
      }
LABEL_21:
    }
    uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  }
  while (v11);

  if (v12) {
    [v68 addObject:v12];
  }
LABEL_27:

LABEL_28:
  int v8 = 1;
LABEL_29:
  unint64_t v27 = *(void **)(a1 + 704);
  *(void *)(a1 + 704) = 0;

  *(unsigned char *)(a1 + 681) = 0;
  if (!v8)
  {
    unint64_t v38 = *(void *)(a1 + 712);
    *(void *)(a1 + 728) = 0;
    *(void *)(a1 + 720) = 0;
    *(void *)(a1 + 712) = 0;
    unint64_t v39 = v38;
    goto LABEL_47;
  }
  unint64_t v28 = [v68 lastObject];
  if (v28)
  {
    uint64_t v29 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_currentBucketInterval(a1);
    unint64_t v30 = [v29 endDate];
    unint64_t v31 = [v28 endDate];
    int v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      long long v33 = [v28 endDate];
      [v33 timeIntervalSinceReferenceDate];
      double v35 = v34;

      uint64_t v36 = *(void *)(a1 + 712);
      long long v37 = *(long long **)(a1 + 720);
      while ((long long *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((long long *)v36 != v37)
          {
            double v40 = (long long *)(v36 + 40);
            if ((long long *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  long long v41 = *v40;
                  long long v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)uint64_t v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                double v40 = (long long *)((char *)v40 + 40);
              }
              while (v40 != v37);
              long long v37 = *(long long **)(a1 + 720);
            }
          }
          if ((long long *)v36 != v37) {
            *(void *)(a1 + 720) = v36;
          }
          break;
        }
        v36 += 40;
      }
    }
  }
  unint64_t v38 = *(void *)(a1 + 712);
  unint64_t v39 = *(void *)(a1 + 720);
  *(void *)(a1 + 728) = 0;
  *(void *)(a1 + 712) = 0;
  *(void *)(a1 + 720) = 0;
  if (![v68 count]) {
    goto LABEL_60;
  }
LABEL_47:
  id v43 = v68;
  long long __p = (void *)v38;
  if (v43)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v44 = v43;
    uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v70;
      while (2)
      {
        for (uint64_t j = 0; j != v45; ++j)
        {
          if (*(void *)v70 != v46) {
            objc_enumerationMutation(v44);
          }
          id v48 = *(id *)(*((void *)&v69 + 1) + 8 * j);
          int v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval((id *)a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
        if (v45) {
          continue;
        }
        break;
      }
    }

LABEL_59:
    unint64_t v38 = (unint64_t)__p;
LABEL_60:
    unint64_t v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v51;
    }
    int v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    long long __p = (void *)v38;
    if (v39 != v38)
    {
      uint64_t v54 = v38;
      uint64_t v50 = v67;
      do
      {
        int v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveAddSample(a1, v54, 1, v50);
        int v53 = v55;
        v54 += 40;
        if (v54 == v39) {
          char v56 = 0;
        }
        else {
          char v56 = v55;
        }
        uint64_t v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval((id *)a1, 0, v67))goto LABEL_59; {
LABEL_70:
    }
    int v53 = 0;
  }
  if (*(void *)(a1 + 40) && *(void *)(a1 + 656) != *(void *)(a1 + 648))
  {
    do
    {
      uint64_t v57 = objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(void *)(a1 + 112) + 1, v50, v65);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      unint64_t v58 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, (double *)(a1 + 120));
      unint64_t v59 = [v57 startDate];
      [v59 timeIntervalSinceReferenceDate];
      double v61 = v60;
      uint64_t v62 = [v57 endDate];
      [v62 timeIntervalSinceReferenceDate];
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
    }
    while (*(void *)(a1 + 656) != *(void *)(a1 + 648));
  }
  *(unsigned char *)(a1 + 682) = 0;
  if (__p) {
    operator delete(__p);
  }

  if (v53)
  {
    if (*(unsigned char *)(a1 + 684))
    {
      *(unsigned char *)(a1 + 684) = 0;
      id v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
      uint64_t v7 = 1;
      goto LABEL_82;
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v6 = v65;
LABEL_82:
  *(unsigned char *)(a1 + 682) = 0;
LABEL_83:

  return v7;
}

void sub_1BD073454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    *(unsigned char *)(v13 + 682) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(unsigned char *)(result + 683) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(unsigned char *)(a1 + 682)) {
      goto LABEL_12;
    }
    uint64_t v7 = 0;
LABEL_14:
    uint64_t v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval((id *)a1, v7, a3);
    goto LABEL_15;
  }
  uint64_t v7 = [v6 dateIntervalForIntervalsContainingInterval:v5];

  if (!*(unsigned char *)(a1 + 682)) {
    goto LABEL_14;
  }
  if (!v7)
  {
LABEL_12:
    id v12 = *(void **)(a1 + 704);
    *(void *)(a1 + 704) = 0;

    uint64_t v7 = 0;
    uint64_t v11 = 1;
    *(unsigned char *)(a1 + 681) = 1;
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 681))
  {
    int v8 = *(void **)(a1 + 704);
    if (!v8)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      id v10 = *(void **)(a1 + 704);
      *(void *)(a1 + 704) = v9;

      int v8 = *(void **)(a1 + 704);
    }
    [v8 addObject:v7];
  }
  uint64_t v11 = 1;
LABEL_15:

  return v11;
}

void sub_1BD073754(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    *(unsigned char *)(a1 + 680) = 1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v9[3] = &unk_1E63043E8;
    uint64_t v12 = a1;
    id v10 = v5;
    id v11 = WeakRetained;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 112))(a1, v9, a3);
    if (v7 && *(unsigned char *)(a1 + 680) && !*(void *)(a1 + 40)) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to query for initial statistics: no data source available.");
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1BD0738A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::reset(uint64_t result)
{
  *(unsigned char *)(result + 680) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 encodeBool:*(unsigned __int8 *)(a1 + 680) forKey:@"needs_config"];
  id v12 = v3;
  int v32 = &unk_1F1726FA0;
  long long v33 = 0;
  int v38 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
  LOBYTE(v38) = 1;
  uint64_t v34 = v4;
  uint64_t v35 = 0;
  statistics::StatisticsEngine::makeCurrentBucket((uint64_t)&v32);
  uint64_t v13 = &unk_1F171B9C8;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  int v31 = 511;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 0;
  int8x16_t v14 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  uint64_t v5 = *(void *)(a1 + 136);
  char v29 = *(unsigned char *)(a1 + 144);
  char v30 = *(unsigned char *)(a1 + 145);
  BOOL v28 = *(_DWORD *)(a1 + 148) == 0;
  int8x16_t v15 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  uint64_t v7 = *(int8x16_t **)(a1 + 216);
  if (v7 != *(int8x16_t **)(a1 + 224))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v7, *v7, 8uLL);
    int8x16_t v40 = v7[1];
    char v43 = 0;
    HIBYTE(v42) = v7[2].i8[9];
    LOBYTE(v42) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>();
  }
  statistics::StatisticsBucket::makeStatistics((uint64_t)&v13);
  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::archive((uint64_t)&v39, (int8x16_t *)(a1 + 240));
  statistics::Statistics::operator=(*((statistics **)&v22 + 1), (uint64_t)&v39);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v39);
  uint64_t v8 = *(void *)(a1 + 440);
  if (v8 != a1 + 448)
  {
    HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::archive((uint64_t)&v39, (int8x16_t *)(v8 + 40));
    uint64_t v9 = *(void *)(v8 + 32);
    v46 |= 0x200u;
    uint64_t v45 = v9;
    PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>();
  }
  id v10 = *(int8x16_t **)(a1 + 184);
  if (v10 != *(int8x16_t **)(a1 + 192))
  {
    unint64_t v39 = (char *)&unk_1F1727540;
    v41.i32[0] = 3;
    int8x16_t v40 = vextq_s8(*v10, *v10, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>();
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v13);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v13);
  id v11 = *(int8x16_t **)(a1 + 648);
  if (v11 != *(int8x16_t **)(a1 + 656))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v11, *v11, 8uLL);
    int8x16_t v40 = v11[1];
    __int16 v42 = 0;
    char v43 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>();
  }
  PB::Writer::Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v39);
  [v12 encodeBytes:v40.i64[0] length:&v39[-v40.i64[0]] forKey:@"hdsce_archived_representation"];
  PB::Writer::~Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);
}

void sub_1BD073CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v62 = a2;
  *(unsigned char *)(a1 + 680) = [v62 decodeBoolForKey:@"needs_config"];
  id v3 = v62;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v67, 0, -1.79769313e308, 1.79769313e308);
  long long v68 = 0u;
  long long v69 = 0u;
  unint64_t v114 = 0;
  id v65 = v3;
  PB::Reader::Reader((PB::Reader *)v113, (const unsigned __int8 *)[v65 decodeBytesForKey:@"hdsce_archived_representation" returnedLength:&v114]);
  uint64_t v64 = a1;
  long long v106 = &unk_1F1726FA0;
  uint64_t v107 = 0;
  uint64_t v111 = 0;
  uint64_t v109 = 0;
  uint64_t v110 = 0;
  int v112 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v106, (PB::Reader *)v113);
  uint64_t v66 = v108;
  if (v107)
  {
    uint64_t v74 = 0;
    memset(v77, 0, sizeof(v77));
    long long __p = 0;
    unint64_t v80 = 0;
    int64_t v79 = 0;
    int v81 = 0;
    long long v82 = xmmword_1BD3301F0;
    long long v83 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    memset(v87, 0, 26);
    memset(&v87[2], 0, 32);
    memset(v88, 0, 42);
    uint64_t v91 = 0;
    uint64_t v90 = 0;
    long long v89 = &v90;
    long long v92 = 0u;
    long long v93 = 0u;
    int v94 = 1065353216;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v97 = 0u;
    uint64_t v98 = 0;
    int v99 = 1065353216;
    long long v100 = 0u;
    long long v101 = 0u;
    int v102 = 1065353216;
    long long v103 = 0u;
    long long v104 = 0u;
    int v105 = 1065353216;
    int8x16_t v70 = vextq_s8(*(int8x16_t *)(v107 + 8), *(int8x16_t *)(v107 + 8), 8uLL);
    uint64_t v4 = *(void *)(v107 + 72);
    uint64_t v71 = *(void *)(v107 + 64);
    char v72 = *(unsigned char *)(v107 + 185);
    char v73 = *(unsigned char *)(v107 + 186);
    int8x16_t v75 = vextq_s8(*(int8x16_t *)(v107 + 24), *(int8x16_t *)(v107 + 24), 8uLL);
    uint64_t v76 = v4;
    uint64_t v5 = *(void *)(v107 + 80);
    uint64_t v6 = *(void *)(v107 + 88);
    double v63 = (void *)v107;
    if (v5 != v6)
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(*(void *)v5 + 24);
        uint64_t v9 = *(void *)(*(void *)v5 + 32);
        uint64_t v10 = *(void *)(*(void *)v5 + 8);
        uint64_t v11 = *(void *)(*(void *)v5 + 16);
        char v12 = *(unsigned char *)(*(void *)v5 + 41);
        char v13 = *(unsigned char *)(*(void *)v5 + 40);
        if ((unint64_t)v7 >= v80)
        {
          int8x16_t v14 = (char *)__p;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)__p) >> 4);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v80 - (void)__p) >> 4) > v16) {
            unint64_t v16 = 0x5555555555555556 * ((uint64_t)(v80 - (void)__p) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80 - (void)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v17 = 0x555555555555555;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17)
          {
            unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            uint64_t v7 = v79;
            int8x16_t v14 = (char *)__p;
          }
          else
          {
            uint64_t v18 = 0;
          }
          uint64_t v19 = (void *)(v17 + 48 * v15);
          void *v19 = v9;
          v19[1] = v8;
          v19[2] = v10;
          v19[3] = v11;
          *((_WORD *)v19 + 16) = 1;
          *((unsigned char *)v19 + 40) = 0;
          *((unsigned char *)v19 + 41) = v12;
          *((unsigned char *)v19 + 42) = v13;
          uint64_t v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              long long v21 = *((_OWORD *)v7 - 3);
              long long v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            int8x16_t v14 = (char *)__p;
          }
          uint64_t v7 = (char *)(v19 + 6);
          long long __p = v20;
          int64_t v79 = (char *)(v19 + 6);
          unint64_t v80 = v17 + 48 * v18;
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)uint64_t v7 = v9;
          *((void *)v7 + 1) = v8;
          *((void *)v7 + 2) = v10;
          *((void *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        int64_t v79 = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    long long v23 = (void *)v63[13];
    if (v23)
    {
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::unarchive((uint64_t)&v115, v23);
      int v81 = v115;
      long long v86 = v120;
      v87[0] = v121;
      v87[1] = v122;
      long long v82 = v116;
      long long v83 = v117;
      long long v84 = v118;
      long long v85 = v119;
      *(void *)&v87[2] = v123;
      if (*((void *)&v87[2] + 1))
      {
        *(void *)&v87[3] = *((void *)&v87[2] + 1);
        operator delete(*((void **)&v87[2] + 1));
      }
      *(_OWORD *)((char *)&v87[2] + 8) = v124;
      *((void *)&v87[3] + 1) = v125;
      uint64_t v125 = 0;
      long long v124 = 0uLL;
      v88[0] = v126;
      *(_OWORD *)&v88[1] = v127;
      *(_OWORD *)&v88[3] = v128;
      LOWORD(v88[5]) = v129;
    }
    long long v24 = (void **)v63[17];
    for (uint64_t i = (void **)v63[18]; v24 != i; ++v24)
    {
      uint64_t v26 = (uint64_t)*v24;
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::unarchive((uint64_t)&v115, *v24);
      uint64_t v27 = *(void *)(v26 + 144);
      BOOL v28 = v90;
      char v29 = &v90;
      char v30 = &v90;
      if (v90)
      {
        do
        {
          while (1)
          {
            char v30 = (uint64_t **)v28;
            uint64_t v31 = v28[4];
            if (v31 <= v27) {
              break;
            }
            BOOL v28 = *v30;
            char v29 = v30;
            if (!*v30) {
              goto LABEL_34;
            }
          }
          if (v31 >= v27)
          {
            long long v33 = (char *)v30;
            goto LABEL_37;
          }
          BOOL v28 = v30[1];
        }
        while (v28);
        char v29 = v30 + 1;
      }
LABEL_34:
      long long v33 = (char *)operator new(0xF0uLL);
      *((void *)v33 + 4) = v27;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *(_OWORD *)(v33 + 120) = 0u;
      *(_OWORD *)(v33 + 136) = 0u;
      *(_OWORD *)(v33 + 152) = 0u;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 168) = 0u;
      *(_OWORD *)(v33 + 184) = 0u;
      *(_OWORD *)(v33 + 200) = 0u;
      *(_OWORD *)(v33 + 216) = 0u;
      *((void *)v33 + 29) = 0;
      *((void *)v33 + 7) = 0xFFEFFFFFFFFFFFFFLL;
      *((_OWORD *)v33 + 4) = 0u;
      *((_OWORD *)v33 + 5) = 0u;
      *((_OWORD *)v33 + 6) = 0u;
      *((_OWORD *)v33 + 7) = 0u;
      *((_OWORD *)v33 + 8) = 0u;
      *(_OWORD *)(v33 + 138) = 0u;
      *(_OWORD *)(v33 + 218) = 0u;
      *((_OWORD *)v33 + 12) = 0u;
      *((_OWORD *)v33 + 13) = 0u;
      *((_OWORD *)v33 + 10) = 0u;
      *((_OWORD *)v33 + 11) = 0u;
      *(void *)long long v33 = 0;
      *((void *)v33 + 1) = 0;
      *((void *)v33 + 2) = v30;
      void *v29 = (uint64_t *)v33;
      int v32 = (uint64_t *)v33;
      if (*v89)
      {
        long long v89 = (uint64_t **)*v89;
        int v32 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v90, v32);
      ++v91;
LABEL_37:
      *((_DWORD *)v33 + 10) = v115;
      long long v35 = v117;
      long long v34 = v118;
      *((_OWORD *)v33 + 3) = v116;
      *((_OWORD *)v33 + 4) = v35;
      long long v37 = v121;
      long long v36 = v122;
      long long v38 = v119;
      *((_OWORD *)v33 + 7) = v120;
      *((_OWORD *)v33 + 8) = v37;
      *((_OWORD *)v33 + 9) = v36;
      *((_OWORD *)v33 + 5) = v34;
      *((_OWORD *)v33 + 6) = v38;
      *((void *)v33 + 20) = v123;
      unint64_t v39 = (void *)*((void *)v33 + 21);
      if (v39)
      {
        *((void *)v33 + 22) = v39;
        operator delete(v39);
        *((void *)v33 + 21) = 0;
        *((void *)v33 + 22) = 0;
        *((void *)v33 + 23) = 0;
      }
      *(_OWORD *)(v33 + 168) = v124;
      *((void *)v33 + 23) = v125;
      *((void *)v33 + 24) = v126;
      long long v40 = v128;
      *(_OWORD *)(v33 + 200) = v127;
      uint64_t v125 = 0;
      long long v124 = 0uLL;
      *(_OWORD *)(v33 + 216) = v40;
      *((_WORD *)v33 + 116) = v129;
    }
    uint64_t v41 = v63[5];
    for (uint64_t j = v63[6]; v41 != j; v41 += 8)
    {
      double v44 = *(double *)(*(void *)v41 + 8);
      double v43 = *(double *)(*(void *)v41 + 16);
      if (v44 >= v43) {
        double v45 = *(double *)(*(void *)v41 + 16);
      }
      else {
        double v45 = *(double *)(*(void *)v41 + 8);
      }
      if (v43 < v44) {
        double v43 = *(double *)(*(void *)v41 + 8);
      }
      HKIntervalMask<double>::_insertInterval(v77, v45, v43);
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::operator=((uint64_t)v67, (uint64_t)&v70);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v70);
  }
  uint64_t v46 = v109;
  uint64_t v47 = v110;
  if (v109 != v110)
  {
    unint64_t v48 = *((void *)&v68 + 1);
    do
    {
      uint64_t v49 = *(void *)(*(void *)v46 + 24);
      uint64_t v50 = *(void *)(*(void *)v46 + 32);
      uint64_t v51 = *(void *)(*(void *)v46 + 8);
      uint64_t v52 = *(void *)(*(void *)v46 + 16);
      if (v48 >= (unint64_t)v69)
      {
        int v53 = (void *)v68;
        unint64_t v54 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v48 - v68) >> 3);
        unint64_t v55 = v54 + 1;
        if (v54 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(v69 - v68) >> 3) > v55) {
          unint64_t v55 = 0x999999999999999ALL * ((uint64_t)(v69 - v68) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v69 - v68) >> 3) >= 0x333333333333333) {
          unint64_t v56 = 0x666666666666666;
        }
        else {
          unint64_t v56 = v55;
        }
        if (v56)
        {
          unint64_t v56 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v56);
          unint64_t v48 = *((void *)&v68 + 1);
          int v53 = (void *)v68;
        }
        else
        {
          uint64_t v57 = 0;
        }
        unint64_t v58 = v56 + 40 * v54;
        *(void *)unint64_t v58 = v50;
        *(void *)(v58 + 8) = v49;
        *(void *)(v58 + 16) = v51;
        *(void *)(v58 + 24) = v52;
        *(_WORD *)(v58 + 32) = 1;
        unint64_t v59 = v58;
        if ((void *)v48 != v53)
        {
          do
          {
            long long v60 = *(_OWORD *)(v48 - 40);
            long long v61 = *(_OWORD *)(v48 - 24);
            *(_WORD *)(v59 - 8) = *(_WORD *)(v48 - 8);
            *(_OWORD *)(v59 - 24) = v61;
            *(_OWORD *)(v59 - 40) = v60;
            v59 -= 40;
            v48 -= 40;
          }
          while ((void *)v48 != v53);
          int v53 = (void *)v68;
        }
        *(void *)&long long v68 = v59;
        unint64_t v48 = v58 + 40;
        *((void *)&v68 + 1) = v58 + 40;
        *(void *)&long long v69 = v56 + 40 * v57;
        if (v53) {
          operator delete(v53);
        }
      }
      else
      {
        *(void *)unint64_t v48 = v50;
        *(void *)(v48 + 8) = v49;
        *(void *)(v48 + 16) = v51;
        *(void *)(v48 + 24) = v52;
        *(_WORD *)(v48 + 32) = 1;
        v48 += 40;
      }
      *((void *)&v68 + 1) = v48;
      v46 += 8;
    }
    while (v46 != v47);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v106);

  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::operator=((void *)(v64 + 112), (uint64_t)&v66);
  if ((void)v68)
  {
    *((void *)&v68 + 1) = v68;
    operator delete((void *)v68);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v67);
}

void sub_1BD0744EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a2);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table((uint64_t)&STACK[0x430]);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x408]);
  uint64_t v9 = (void *)STACK[0x3F0];
  if (STACK[0x3F0])
  {
    STACK[0x3F8] = (unint64_t)v9;
    operator delete(v9);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a3);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::destroy((void *)STACK[0x3B8]);
  uint64_t v10 = (void *)STACK[0x368];
  if (STACK[0x368])
  {
    STACK[0x370] = (unint64_t)v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)STACK[0x2D0];
  if (STACK[0x2D0])
  {
    STACK[0x2D8] = (unint64_t)v11;
    operator delete(v11);
  }
  objc_destroyWeak((id *)&STACK[0x2C8]);
  char v12 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v12;
    operator delete(v12);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x488]);
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = xmmword_1BD3301F0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 218) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 298) = 0u;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 320) = a1 + 328;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 376) = 1065353216;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(void *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 440) = 1065353216;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_DWORD *)(a1 + 480) = 1065353216;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_DWORD *)(a1 + 520) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 536);
  if (v2)
  {
    *(void *)(a1 + 544) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 488);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 448);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 408);
  unint64_t v2 = *(void **)(a1 + 384);
  if (v2)
  {
    *(void *)(a1 + 392) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 344);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::destroy(*(void **)(a1 + 328));
  id v3 = *(void **)(a1 + 248);
  if (v3)
  {
    *(void *)(a1 + 256) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(void *)(a1 + 104) = v4;
    operator delete(v4);
  }
  objc_destroyWeak((id *)(a1 + 88));
  uint64_t v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(void *)(a1 + 72) = v5;
    operator delete(v5);
  }

  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::destroy(a1[1]);
    unint64_t v2 = (void *)a1[21];
    if (v2)
    {
      a1[22] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_configureForStartTime(uint64_t a1)
{
  uint64_t v29 = 0;
  unint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
    uint64_t v4 = [v2 dateIntervalContainingDate:v3 index:&v29];

    uint64_t v5 = [v4 startDate];
    [v5 timeIntervalSinceReferenceDate];
    double v7 = v6;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
LABEL_5:
    double v13 = v9;

    goto LABEL_6;
  }
  id v10 = *(id *)(a1 + 64);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v11 = [v10 startDate];
    [v11 timeIntervalSinceReferenceDate];
    double v7 = v12;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
    goto LABEL_5;
  }
  double v7 = -1.79769313e308;
  double v13 = 1.79769313e308;
LABEL_6:

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v22, WeakRetained, v7, v13);

  if (*(void *)(a1 + 32) == 1) {
    char v24 = 1;
  }
  uint64_t v23 = *(void *)(a1 + 56);
  char v25 = *(unsigned char *)(a1 + 24) & 1;
  if (v28 != (char *)(a1 + 72)) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v28, *(char **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4);
  }
  objc_storeStrong(&v27, *(id *)(a1 + 696));
  if (!*(void *)(a1 + 40)) {
    int v26 = 0;
  }
  uint64_t v15 = v29;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v22);
  uint64_t v18 = v15;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v19, (uint64_t)v17);
  long long __p = 0u;
  long long v21 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::operator=((void *)(a1 + 112), (uint64_t)&v18);

  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v19);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v17);
  *(unsigned char *)(a1 + 680) = 0;
  return HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v22);
}

void sub_1BD074AB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::operator=(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::operator=((uint64_t)(a1 + 1), a2 + 8);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 67), (__n128 *)(a2 + 536));
  uint64_t v4 = *(void *)(a2 + 560);
  *(void *)(a2 + 560) = 0;
  uint64_t v5 = (void *)a1[70];
  a1[70] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 96);
  double v7 = *(unsigned char **)(a2 + 104);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(void *)(a1 + 96) = v10;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(void *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  long long v12 = *(_OWORD *)(a2 + 128);
  long long v13 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v13;
  *(_OWORD *)(a1 + 128) = v12;
  long long v14 = *(_OWORD *)(a2 + 176);
  long long v15 = *(_OWORD *)(a2 + 192);
  long long v16 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v16;
  *(_OWORD *)(a1 + 176) = v14;
  *(_OWORD *)(a1 + 192) = v15;
  uint64_t v17 = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 240) = v17;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 248), *(const void **)(a2 + 248), *(void *)(a2 + 256), (uint64_t)(*(void *)(a2 + 256) - *(void *)(a2 + 248)) >> 4);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  long long v18 = *(_OWORD *)(a2 + 296);
  uint64_t v19 = *(void *)(a2 + 312);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 296) = v18;
  uint64_t v20 = (void *)(a1 + 328);
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 312) = v19;
  *(void *)(a1 + 320) = a1 + 328;
  long long v21 = *(void **)(a2 + 320);
  if (v21 != (void *)(a2 + 328))
  {
    long long v22 = 0;
    uint64_t v23 = (void *)(a1 + 328);
    while (1)
    {
      char v24 = (void *)(a1 + 328);
      if (v23 == v20) {
        goto LABEL_12;
      }
      char v25 = v22;
      int v26 = (void *)(a1 + 328);
      if (v22)
      {
        do
        {
          char v24 = v25;
          char v25 = (void *)v25[1];
        }
        while (v25);
      }
      else
      {
        do
        {
          char v24 = (void *)v26[2];
          BOOL v27 = *v24 == (void)v26;
          int v26 = v24;
        }
        while (v27);
      }
      uint64_t v28 = v21[4];
      if (v24[4] < v28)
      {
LABEL_12:
        if (v22) {
          uint64_t v29 = (uint64_t **)v24;
        }
        else {
          uint64_t v29 = (uint64_t **)(a1 + 328);
        }
        if (v22) {
          char v30 = (uint64_t **)(v24 + 1);
        }
        else {
          char v30 = (uint64_t **)(a1 + 328);
        }
        if (!*v30)
        {
LABEL_28:
          long long v33 = (char *)operator new(0xF0uLL);
          *((void *)v33 + 4) = v21[4];
          *((_DWORD *)v33 + 10) = *((_DWORD *)v21 + 10);
          long long v34 = *((_OWORD *)v21 + 3);
          long long v35 = *((_OWORD *)v21 + 5);
          *((_OWORD *)v33 + 4) = *((_OWORD *)v21 + 4);
          *((_OWORD *)v33 + 5) = v35;
          *((_OWORD *)v33 + 3) = v34;
          long long v36 = *((_OWORD *)v21 + 6);
          long long v37 = *((_OWORD *)v21 + 7);
          long long v38 = *((_OWORD *)v21 + 9);
          *((_OWORD *)v33 + 8) = *((_OWORD *)v21 + 8);
          *((_OWORD *)v33 + 9) = v38;
          *((_OWORD *)v33 + 6) = v36;
          *((_OWORD *)v33 + 7) = v37;
          uint64_t v39 = v21[20];
          *((void *)v33 + 21) = 0;
          *((void *)v33 + 20) = v39;
          *((void *)v33 + 22) = 0;
          *((void *)v33 + 23) = 0;
          std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)v33 + 21, (const void *)v21[21], v21[22], (uint64_t)(v21[22] - v21[21]) >> 4);
          *((void *)v33 + 24) = v21[24];
          long long v40 = *(_OWORD *)(v21 + 25);
          long long v41 = *(_OWORD *)(v21 + 27);
          *((void *)v33 + 29) = v21[29];
          *(_OWORD *)(v33 + 216) = v41;
          *(_OWORD *)(v33 + 200) = v40;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 320), (uint64_t)v29, v30, (uint64_t *)v33);
        }
      }
      else
      {
        char v30 = (uint64_t **)(a1 + 328);
        uint64_t v29 = (uint64_t **)(a1 + 328);
        if (!v22) {
          goto LABEL_28;
        }
        uint64_t v31 = v22;
        while (1)
        {
          while (1)
          {
            uint64_t v29 = (uint64_t **)v31;
            uint64_t v32 = v31[4];
            if (v32 <= v28) {
              break;
            }
            uint64_t v31 = *v29;
            char v30 = v29;
            if (!*v29) {
              goto LABEL_28;
            }
          }
          if (v32 >= v28) {
            break;
          }
          uint64_t v31 = v29[1];
          if (!v31)
          {
            char v30 = v29 + 1;
            goto LABEL_28;
          }
        }
      }
      __int16 v42 = (void *)v21[1];
      if (v42)
      {
        do
        {
          double v43 = v42;
          __int16 v42 = (void *)*v42;
        }
        while (v42);
      }
      else
      {
        do
        {
          double v43 = (void *)v21[2];
          BOOL v27 = *v43 == (void)v21;
          long long v21 = v43;
        }
        while (!v27);
      }
      if (v43 == (void *)(a2 + 328)) {
        break;
      }
      long long v22 = (void *)*v20;
      uint64_t v23 = *(void **)(a1 + 320);
      long long v21 = v43;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 344, a2 + 344);
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 384), *(const void **)(a2 + 384), *(void *)(a2 + 392), (uint64_t)(*(void *)(a2 + 392) - *(void *)(a2 + 384)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 408, a2 + 408);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 448, a2 + 448);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 488, a2 + 488);
  return a1;
}

void sub_1BD074EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, id *location, void **a12)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v17);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  uint64_t v19 = *v15;
  if (*v15)
  {
    *(void *)(v12 + 392) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::destroy(*v13);
  uint64_t v20 = *a9;
  if (*a9)
  {
    *(void *)(v12 + 256) = v20;
    operator delete(v20);
  }
  long long v21 = *a10;
  if (*a10)
  {
    *(void *)(v12 + 104) = v21;
    operator delete(v21);
  }
  objc_destroyWeak(location);
  long long v22 = *a12;
  if (*a12)
  {
    *(void *)(v12 + 72) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::operator=(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  long long v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v5;

  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  id WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  uint64_t v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(void *)(a1 + 104) = v9;
    operator delete(v9);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  int v10 = *(_DWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(_DWORD *)(a1 + 120) = v10;
  long long v11 = *(_OWORD *)(a2 + 128);
  long long v12 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v12;
  *(_OWORD *)(a1 + 128) = v11;
  long long v13 = *(_OWORD *)(a2 + 176);
  long long v14 = *(_OWORD *)(a2 + 192);
  long long v15 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = v15;
  *(_OWORD *)(a1 + 192) = v14;
  *(_OWORD *)(a1 + 176) = v13;
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 248, (__n128 *)(a2 + 248));
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  long long v16 = *(_OWORD *)(a2 + 280);
  long long v17 = *(_OWORD *)(a2 + 296);
  *(_WORD *)(a1 + 312) = *(_WORD *)(a2 + 312);
  *(_OWORD *)(a1 + 280) = v16;
  *(_OWORD *)(a1 + 296) = v17;
  uint64_t v18 = a1 + 328;
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::destroy(*(void **)(a1 + 328));
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  uint64_t v19 = *(void *)(a2 + 328);
  *(void *)(a1 + 328) = v19;
  uint64_t v20 = *(void *)(a2 + 336);
  *(void *)(a1 + 336) = v20;
  if (v20)
  {
    *(void *)(v19 + 16) = v18;
    *(void *)(a2 + 320) = a2 + 328;
    *(void *)(a2 + 328) = 0;
    *(void *)(a2 + 336) = 0;
  }
  else
  {
    *(void *)(a1 + 320) = v18;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 344, (uint64_t *)(a2 + 344));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 384, (__n128 *)(a2 + 384));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 408, (uint64_t *)(a2 + 408));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 448, (uint64_t *)(a2 + 448));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 488, (uint64_t *)(a2 + 488));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(uint64_t a1, double *a2)
{
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  double v3 = *a2;
  id v4 = objc_alloc(MEMORY[0x1E4F1C9C8]);
  uint64_t v5 = a2 + 5;
  if (v3 != -1.79769313e308) {
    uint64_t v5 = a2;
  }
  long long v6 = (void *)[v4 initWithTimeIntervalSinceReferenceDate:*v5];
  uint64_t v90 = (uint64_t)a2;
  if (a2[1] == 1.79769313e308) {
    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:a2[6]];
  }
  else {
    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:a2[1]];
  }
  uint64_t v8 = (void *)v7;
  id v9 = *(id *)(a1 + 16);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v10 = *(id *)(a1 + 16);
    if ([v10 shouldUseUnderlyingTypeForStatistics])
    {
      uint64_t v11 = [v10 underlyingSampleType];

      id v9 = (id)v11;
    }
  }
  long long v12 = (void *)[objc_alloc(MEMORY[0x1E4F2B5B0]) initWithDataType:v9 startDate:v6 endDate:v8];
  if (*(unsigned char *)(a1 + 24))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      id v14 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      long long v15 = *(uint64_t **)(v90 + 384);
      long long v16 = *(uint64_t **)(v90 + 392);
      while (v15 != v16)
      {
        uint64_t v17 = *v15;
        id v18 = objc_loadWeakRetained((id *)(a1 + 48));
        uint64_t v19 = [v18 sourceForSourceID:v17];

        if (v19)
        {
          if (([v14 containsObject:v19] & 1) == 0) {
            [v14 addObject:v19];
          }
        }

        ++v15;
      }
      uint64_t v20 = (void *)[v14 copy];
      [v12 _setSources:v20];
    }
  }

  v98[0] = &unk_1F1722F90;
  v98[3] = v98;
  id v87 = v12;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)v100, (uint64_t)v98);
  int v102 = 0;
  long long v21 = operator new(0x28uLL);
  *long long v21 = &unk_1F1722E70;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(v21 + 1), (uint64_t)v100);
  int v102 = v21;
  id v92 = v87;
  long long v22 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v23 = [MEMORY[0x1E4F2B618] secondUnit];
  __n128 v24 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v94, v90);
  if (!v102) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v25 = (*(uint64_t (**)(void *, unsigned char *, __n128))(*v102 + 48))(v102, v94, v24);
  int v26 = *(double **)(v25 + 8);
  double v27 = 0.0;
  while (v26 != *(double **)(v25 + 16))
  {
    double v29 = *v26;
    double v28 = v26[1];
    v26 += 2;
    double v27 = v27 + v28 - v29;
  }
  char v30 = [v22 quantityWithUnit:v23 doubleValue:v27 + *(double *)(v25 + 32)];
  [v92 setDuration:v30];

  if (__p)
  {
    long long v97 = __p;
    operator delete(__p);
  }

  __n128 v31 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v94, v90);
  if (!v102) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  objc_msgSend(v92, "setDataCount:", *(void *)(*(uint64_t (**)(void *, unsigned char *, __n128))(*v102 + 48))(v102, v94, v31));
  if (__p)
  {
    long long v97 = __p;
    operator delete(__p);
  }
  if (*(unsigned char *)(a1 + 24))
  {
    id v32 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v33 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier((uint64_t)v94, v90);
    long long v34 = v95;
    if (v95)
    {
      id v9 = (id)0x1E4F28000;
      do
      {
        long long v35 = v34[2];
        long long v36 = (void *)MEMORY[0x1E4F2B370];
        long long v37 = [MEMORY[0x1E4F2B618] secondUnit];
        if (!v102) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        uint64_t v38 = (*(uint64_t (**)(void *, uint64_t *))(*v102 + 48))(v102, (uint64_t *)v34 + 3);
        uint64_t v39 = *(double **)(v38 + 8);
        double v40 = 0.0;
        while (v39 != *(double **)(v38 + 16))
        {
          double v42 = *v39;
          double v41 = v39[1];
          v39 += 2;
          double v40 = v40 + v41 - v42;
        }
        double v43 = [v36 quantityWithUnit:v37 doubleValue:v40 + *(double *)(v38 + 32)];
        [v32 setObject:v43 forKeyedSubscript:v35];

        if (!v102) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        double v44 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)(*(uint64_t (**)(void *, uint64_t *))(*v102 + 48))(v102, (uint64_t *)v34 + 3));
        [v33 setObject:v44 forKeyedSubscript:v35];

        long long v34 = (uint64_t **)*v34;
      }
      while (v34);
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::~__hash_table((uint64_t)v94);
    [v92 setDurationBySource:v32];
    [v92 setDataCountBySource:v33];
  }
  std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v101);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v100);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)v99, (uint64_t)v98);
  int v102 = 0;
  double v45 = operator new(0x28uLL);
  void *v45 = &unk_1F1722F00;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(v45 + 1), (uint64_t)v99);
  int v102 = v45;
  id v93 = v92;
  uint64_t v46 = *(void *)(a1 + 24);
  __n128 v47 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v94, v90);
  if (!v102) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  unint64_t v48 = (double *)(*(uint64_t (**)(void *, unsigned char *, __n128))(*v102 + 48))(v102, v94, v47);
  double v50 = v48[5];
  double v49 = v48[6];
  double v51 = v48[7];
  uint64_t v52 = *((void *)v48 + 8);
  double v54 = v48[9];
  double v53 = v48[10];
  double v55 = v48[11];
  if (__p)
  {
    long long v97 = __p;
    operator delete(__p);
  }
  uint64_t v56 = *(void *)(a1 + 24);
  uint64_t v57 = _HKStatisticsOptionBaselineRelativeQuantities();
  unint64_t v58 = *(void **)(a1 + 16);
  if ((v57 & v56) != 0) {
    [v58 _unitForChangeInCanonicalUnit];
  }
  else {
  unint64_t v59 = [v58 canonicalUnit];
  }
  if ((v46 & 2) != 0)
  {
    long long v60 = [MEMORY[0x1E4F2B370] quantityWithUnit:v59 doubleValue:v50];
    [v93 setAverageQuantity:v60];
  }
  if ((v46 & 4) != 0)
  {
    long long v61 = [MEMORY[0x1E4F2B370] quantityWithUnit:v59 doubleValue:v51];
    [v93 setMinimumQuantity:v61];
  }
  if ((v46 & 8) != 0)
  {
    id v62 = [MEMORY[0x1E4F2B370] quantityWithUnit:v59 doubleValue:v49];
    [v93 setMaximumQuantity:v62];
  }
  if ((v46 & 0x20) != 0)
  {
    double v63 = [MEMORY[0x1E4F2B370] quantityWithUnit:v59 doubleValue:v54];
    [v93 setMostRecentQuantity:v63];

    uint64_t v64 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v53, v55);
    [v93 setMostRecentQuantityDateInterval:v64];
  }
  [v93 setDataCount:v52];
  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    goto LABEL_88;
  }
  if ((v46 & 2) != 0)
  {
    id v9 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    if ((v46 & 4) == 0) {
      goto LABEL_55;
    }
LABEL_57:
    id v89 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    goto LABEL_58;
  }
  id v9 = 0;
  if ((v46 & 4) != 0) {
    goto LABEL_57;
  }
LABEL_55:
  id v89 = 0;
LABEL_58:
  if ((v46 & 8) != 0) {
    id v88 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else {
    id v88 = 0;
  }
  if ((v46 & 0x20) != 0)
  {
    id v66 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v65 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else
  {
    id v65 = 0;
    id v66 = 0;
  }
  id v67 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier((uint64_t)v94, v90);
  for (uint64_t i = v95; i; uint64_t i = (uint64_t **)*i)
  {
    long long v69 = i[2];
    if ((v46 & 2) != 0)
    {
      if (!v102) {
        goto LABEL_106;
      }
      int8x16_t v70 = objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v59, *(double *)((*(uint64_t (**)(void *, uint64_t *))(*v102 + 48))(v102, (uint64_t *)i + 3) + 40));
      [v9 setObject:v70 forKeyedSubscript:v69];
    }
    if ((v46 & 4) != 0)
    {
      if (!v102) {
        goto LABEL_106;
      }
      uint64_t v71 = objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v59, *(double *)((*(uint64_t (**)(void *, uint64_t *))(*v102 + 48))(v102, (uint64_t *)i + 3) + 56));
      [v89 setObject:v71 forKeyedSubscript:v69];
    }
    if ((v46 & 8) != 0)
    {
      if (!v102) {
        goto LABEL_106;
      }
      char v72 = objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v59, *(double *)((*(uint64_t (**)(void *, uint64_t *))(*v102 + 48))(v102, (uint64_t *)i + 3) + 48));
      [v88 setObject:v72 forKeyedSubscript:v69];
    }
    if ((v46 & 0x20) != 0)
    {
      if (!v102) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v73 = (*(uint64_t (**)(void *, uint64_t *))(*v102 + 48))(v102, (uint64_t *)i + 3);
      double v74 = *(double *)(v73 + 80);
      double v75 = *(double *)(v73 + 88);
      uint64_t v76 = [MEMORY[0x1E4F2B370] quantityWithUnit:v59 doubleValue:*(double *)(v73 + 72)];
      [v66 setObject:v76 forKeyedSubscript:v69];

      uint64_t v77 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v74, v75);
      [v65 setObject:v77 forKeyedSubscript:v69];
    }
    if (!v102) {
LABEL_106:
    }
      std::__throw_bad_function_call[abi:ne180100]();
    uint64_t v78 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)((*(uint64_t (**)(void *, uint64_t *))(*v102 + 48))(v102, (uint64_t *)i + 3) + 64));
    [v67 setObject:v78 forKeyedSubscript:v69];
  }
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::~__hash_table((uint64_t)v94);
  if ((v46 & 2) != 0) {
    [v93 setAverageQuantityBySource:v9];
  }
  if ((v46 & 4) != 0) {
    [v93 setMinimumQuantityBySource:v89];
  }
  if ((v46 & 8) != 0) {
    [v93 setMaximumQuantityBySource:v88];
  }
  if ((v46 & 0x20) != 0)
  {
    [v93 setMostRecentQuantityBySource:v66];
    [v93 setMostRecentQuantityDateIntervalBySource:v65];
  }
  [v93 setDataCountBySource:v67];

LABEL_88:
  std::__function::__value_func<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v101);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v99);

  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v98);
  int64_t v79 = [*(id *)(a1 + 16) _unitForChangeInCanonicalUnit];
  unint64_t v80 = [v93 averageQuantity];
  if (v80)
  {
    unint64_t v59 = [v93 averageQuantity];
    if (([v59 isCompatibleWithUnit:v79] & 1) == 0)
    {

LABEL_102:
      [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8], @"Expected compatibility with %@", v79, v87 format];
      goto LABEL_103;
    }
  }
  int v81 = [v93 minimumQuantity];
  if (v81)
  {
    id v9 = [v93 minimumQuantity];
    if (![v9 isCompatibleWithUnit:v79])
    {
      int v82 = 1;
      goto LABEL_96;
    }
  }
  long long v83 = [v93 maximumQuantity];
  if (v83)
  {
    long long v84 = [v93 maximumQuantity];
    int v85 = [v84 isCompatibleWithUnit:v79];

    int v82 = v85 ^ 1;
    if (v81) {
      goto LABEL_96;
    }
  }
  else
  {
    int v82 = 0;
    if (v81)
    {
LABEL_96:

      if (v80) {
        goto LABEL_97;
      }
LABEL_101:

      if (!v82) {
        goto LABEL_103;
      }
      goto LABEL_102;
    }
  }
  if (!v80) {
    goto LABEL_101;
  }
LABEL_97:

  if (v82) {
    goto LABEL_102;
  }
LABEL_103:

  return v93;
}

void sub_1BD075DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, _Unwind_Exception *exception_object, void *a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  std::__function::__value_func<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100]((void *)(v44 - 176));
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100]((void *)(v44 - 240));

  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](&a41);
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 368);
  uint64_t v2 = *(void *)(a1 + 384);
  if (v1 != (*(void *)(a1 + 392) - v2) >> 3)
  {
    id v4 = (void **)(a1 + 384);
    *(void *)(a1 + 392) = v2;
    std::vector<long long>::reserve((void **)(a1 + 384), v1);
    uint64_t v5 = *(void **)(a1 + 360);
    if (v5)
    {
      long long v6 = *(char **)(a1 + 392);
      do
      {
        uint64_t v7 = v5[2];
        unint64_t v8 = *(void *)(a1 + 400);
        if ((unint64_t)v6 >= v8)
        {
          id v10 = (char *)*v4;
          uint64_t v11 = (v6 - (unsigned char *)*v4) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            id v10 = *(char **)(a1 + 384);
            long long v6 = *(char **)(a1 + 392);
          }
          else
          {
            uint64_t v15 = 0;
          }
          long long v16 = (void *)(v14 + 8 * v11);
          *long long v16 = v7;
          id v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            uint64_t v17 = *((void *)v6 - 1);
            v6 -= 8;
            *--long long v16 = v17;
          }
          *(void *)(a1 + 384) = v16;
          *(void *)(a1 + 392) = v9;
          *(void *)(a1 + 400) = v14 + 8 * v15;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)long long v6 = v7;
          id v9 = v6 + 8;
        }
        *(void *)(a1 + 392) = v9;
        uint64_t v5 = (void *)*v5;
        long long v6 = v9;
      }
      while (v5);
    }
    id v18 = (id *)(a1 + 88);
    id WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      id v20 = objc_loadWeakRetained(v18);
      [v20 orderSourceIDs:v4];
    }
  }
}

void sub_1BD0762F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2) {
    a2 = v4 * floor(a2 / v4);
  }
  double v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    int v105 = (char **)(a1 + 96);
    uint64_t v103 = (uint64_t *)(a1 + 120);
    location = (id *)(a1 + 88);
    long long v100 = (double **)(a1 + 248);
    long long v6 = (void *)(a1 + 328);
    do
    {
      uint64_t v7 = *(double **)(a1 + 96);
      unint64_t v8 = *(long long **)(a1 + 104);
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v7) >> 4);
      if (v9)
      {
        if (v9 != 1)
        {
          double v30 = a2;
          double v31 = a2;
          double v32 = v5;
          uint64_t v33 = *(void *)(a1 + 96);
          if (v7 != (double *)v8)
          {
            do
            {
              double v34 = *(double *)(v33 + 8);
              double v35 = *(double *)(v33 + 16);
              if (v34 > v32 && v34 < v31) {
                double v31 = *(double *)(v33 + 8);
              }
              if (v35 > v5) {
                double v37 = *(double *)(v33 + 16);
              }
              else {
                double v37 = v30;
              }
              if (v35 < v30)
              {
                double v32 = v5;
                double v30 = v37;
              }
              v33 += 48;
            }
            while ((long long *)v33 != v8);
          }
          if (v30 >= v31) {
            double v38 = v31;
          }
          else {
            double v38 = v30;
          }
          double v39 = *(double *)(a1 + 16);
          if (v39 > 0.0)
          {
            double v40 = v39 * floor(v38 / v39);
            double v41 = v39 * floor((v39 + v5) / v39);
            if (v40 >= v41) {
              double v38 = v40;
            }
            else {
              double v38 = v41;
            }
          }
          *int v105 = 0;
          v105[1] = 0;
          v105[2] = 0;
          if (v7 != (double *)v8)
          {
            if (v9 > 0x555555555555555) {
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            }
            double v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v9);
            double v45 = *(char **)(a1 + 96);
            uint64_t v44 = *(char **)(a1 + 104);
            uint64_t v46 = v42;
            if (v44 != v45)
            {
              do
              {
                long long v47 = *((_OWORD *)v44 - 3);
                long long v48 = *((_OWORD *)v44 - 2);
                *(_OWORD *)(v46 - 21) = *(_OWORD *)(v44 - 21);
                *((_OWORD *)v46 - 3) = v47;
                *((_OWORD *)v46 - 2) = v48;
                v46 -= 48;
                v44 -= 48;
              }
              while (v44 != v45);
              uint64_t v44 = *v105;
            }
            *(void *)(a1 + 96) = v46;
            *(void *)(a1 + 104) = v42;
            *(void *)(a1 + 112) = &v42[48 * v43];
            if (v44) {
              operator delete(v44);
            }
          }
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_updateSourceOrder(a1);
          id WeakRetained = objc_loadWeakRetained(location);

          if (WeakRetained)
          {
            *(void *)&long long v107 = a1;
            unint64_t v50 = 126 - 2 * __clz(v9);
            if (v7 == (double *)v8) {
              uint64_t v51 = 0;
            }
            else {
              uint64_t v51 = v50;
            }
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>((unint64_t)v7, v8, (uint64_t)&v107, v51, 1);
          }
          else
          {
            unint64_t v61 = 126 - 2 * __clz(v9);
            if (v7 == (double *)v8) {
              uint64_t v51 = 0;
            }
            else {
              uint64_t v51 = v61;
            }
          }
          std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>((unint64_t)v7, v8, v51, 1);
          if (*(unsigned char *)(a1 + 25)) {
            id v102 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
          }
          else {
            id v102 = 0;
          }
          if (v7 == (double *)v8)
          {
LABEL_143:
            *(double *)(a1 + 272) = HKIntervalMask<double>::removeIntervalsBefore(v100, v38) + *(double *)(a1 + 272);
            int v94 = *(void **)(a1 + 320);
            if (v94 != v6)
            {
              do
              {
                *((double *)v94 + 24) = HKIntervalMask<double>::removeIntervalsBefore((double **)v94 + 21, v38)
                                      + *((double *)v94 + 24);
                long long v95 = (void *)v94[1];
                if (v95)
                {
                  do
                  {
                    long long v96 = v95;
                    long long v95 = (void *)*v95;
                  }
                  while (v95);
                }
                else
                {
                  do
                  {
                    long long v96 = (void *)v94[2];
                    BOOL v54 = *v96 == (void)v94;
                    int v94 = v96;
                  }
                  while (!v54);
                }
                int v94 = v96;
              }
              while (v96 != v6);
            }
            *(double *)(a1 + 56) = v38;

            if (v7) {
              operator delete(v7);
            }
            goto LABEL_155;
          }
          uint64_t v104 = 0;
          char v62 = 0;
          double v63 = v7;
          while (2)
          {
            long long v64 = *((_OWORD *)v63 + 1);
            long long v107 = *(_OWORD *)v63;
            long long v108 = v64;
            uint64_t v109 = *((void *)v63 + 4);
            if (!(_BYTE)v109 || *((double *)&v107 + 1) > v38)
            {
              id v65 = *(long long **)(a1 + 104);
              unint64_t v66 = *(void *)(a1 + 112);
              if ((unint64_t)v65 >= v66)
              {
                unint64_t v70 = 0xAAAAAAAAAAAAAAABLL * (((char *)v65 - *v105) >> 4);
                unint64_t v71 = v70 + 1;
                if (v70 + 1 > 0x555555555555555) {
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v72 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - (void)*v105) >> 4);
                if (2 * v72 > v71) {
                  unint64_t v71 = 2 * v72;
                }
                if (v72 >= 0x2AAAAAAAAAAAAAALL) {
                  unint64_t v73 = 0x555555555555555;
                }
                else {
                  unint64_t v73 = v71;
                }
                if (v73) {
                  unint64_t v73 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v73);
                }
                else {
                  uint64_t v74 = 0;
                }
                unint64_t v80 = (long long *)(v73 + 48 * v70);
                long long v81 = *(_OWORD *)v63;
                long long v82 = *((_OWORD *)v63 + 2);
                v80[1] = *((_OWORD *)v63 + 1);
                v80[2] = v82;
                *unint64_t v80 = v81;
                long long v84 = *(char **)(a1 + 96);
                long long v83 = *(char **)(a1 + 104);
                int v85 = v80;
                if (v83 != v84)
                {
                  do
                  {
                    long long v86 = *((_OWORD *)v83 - 3);
                    long long v87 = *((_OWORD *)v83 - 2);
                    *(long long *)((char *)v85 - 21) = *(_OWORD *)(v83 - 21);
                    *(v85 - 3) = v86;
                    *(v85 - 2) = v87;
                    v85 -= 3;
                    v83 -= 48;
                  }
                  while (v83 != v84);
                  long long v83 = *v105;
                }
                long long v69 = v80 + 3;
                *(void *)(a1 + 96) = v85;
                *(void *)(a1 + 104) = v80 + 3;
                *(void *)(a1 + 112) = v73 + 48 * v74;
                if (v83) {
                  operator delete(v83);
                }
              }
              else
              {
                long long v67 = *(_OWORD *)v63;
                long long v68 = *((_OWORD *)v63 + 2);
                v65[1] = *((_OWORD *)v63 + 1);
                v65[2] = v68;
                *id v65 = v67;
                long long v69 = v65 + 3;
              }
              *(void *)(a1 + 104) = v69;
LABEL_142:
              v63 += 6;
              if (v63 == (double *)v8) {
                goto LABEL_143;
              }
              continue;
            }
            break;
          }
          double v75 = *(double *)&v108;
          if (*(double *)&v108 > v38) {
            double v75 = v38;
          }
          *(double *)&long long v108 = v75;
          for (uint64_t i = *(double **)(a1 + 64); i != *(double **)(a1 + 72) && *((double *)&v107 + 1) >= *i; i += 2)
          {
            if (*((double *)&v107 + 1) < i[1]) {
              goto LABEL_142;
            }
          }
          int v77 = *((unsigned __int8 *)v63 + 42);
          int v78 = *((unsigned __int8 *)v63 + 41);
          if (v62)
          {
            unint64_t v79 = *((void *)&v108 + 1);
            if (v104 == *((void *)&v108 + 1) || *(unsigned char *)(a1 + 24)) {
              HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(v103, (double *)&v107, v77 == 0);
            }
          }
          else
          {
            HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(v103, (double *)&v107, v77 == 0);
            unint64_t v79 = *((void *)&v108 + 1);
            uint64_t v104 = *((void *)&v108 + 1);
          }
          if (!*(unsigned char *)(a1 + 25)) {
            goto LABEL_141;
          }
          id v88 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a1, v79);
          if (!v88) {
            goto LABEL_140;
          }
          id v89 = [v102 objectForKeyedSubscript:v88];
          uint64_t v90 = v89;
          if (v89)
          {
            if ([v89 longLongValue] != v79 && !*(unsigned char *)(a1 + 24))
            {
LABEL_139:

LABEL_140:
LABEL_141:
              char v62 = 1;
              goto LABEL_142;
            }
          }
          else
          {
            uint64_t v91 = [NSNumber numberWithLongLong:v79];
            [v102 setObject:v91 forKeyedSubscript:v88];
          }
          unint64_t v92 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(a1, v79);
          id v93 = (uint64_t *)HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsForSource(a1, v92);
          HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(v93, (double *)&v107, v78 == 0);
          goto LABEL_139;
        }
        int v10 = *((unsigned __int8 *)v7 + 42);
        int v11 = *((unsigned __int8 *)v7 + 41);
        int v12 = *((unsigned __int8 *)v7 + 40);
        double v13 = v7[1];
        double v14 = v7[2];
        unint64_t v15 = *((void *)v7 + 3);
        char v16 = *((unsigned char *)v7 + 33);
        if (v14 <= a2) {
          double v17 = v7[2];
        }
        else {
          double v17 = a2;
        }
        if (v13 < a2) {
          int v18 = *((unsigned __int8 *)v7 + 32);
        }
        else {
          int v18 = 0;
        }
        if (v13 < a2) {
          char v19 = 0;
        }
        else {
          char v19 = *((unsigned char *)v7 + 33);
        }
        if (v13 < a2)
        {
          uint64_t v20 = 0;
        }
        else
        {
          double v17 = v7[2];
          uint64_t v20 = *((void *)v7 + 3);
        }
        if (v13 < a2) {
          double v21 = 0.0;
        }
        else {
          double v21 = v7[2];
        }
        if (v13 < a2) {
          double v22 = 0.0;
        }
        else {
          double v22 = *v7;
        }
        if (v13 < a2) {
          double v23 = 0.0;
        }
        else {
          double v23 = v7[1];
        }
        if (v13 < a2) {
          int v24 = 0;
        }
        else {
          int v24 = *((unsigned __int8 *)v7 + 32);
        }
        if (*((unsigned char *)v7 + 32))
        {
          double v14 = v17;
        }
        else
        {
          int v18 = 0;
          char v19 = 0;
          uint64_t v20 = 0;
        }
        if (*((unsigned char *)v7 + 32)) {
          double v25 = v21;
        }
        else {
          double v25 = 0.0;
        }
        if (*((unsigned char *)v7 + 32)) {
          double v26 = v22;
        }
        else {
          double v26 = 0.0;
        }
        if (*((unsigned char *)v7 + 32)) {
          double v27 = v23;
        }
        else {
          double v27 = 0.0;
        }
        if (*((unsigned char *)v7 + 32)) {
          int v28 = v24;
        }
        else {
          int v28 = 0;
        }
        *(double *)&long long v107 = *v7;
        *((double *)&v107 + 1) = v13;
        *(double *)&long long v108 = v14;
        *((void *)&v108 + 1) = v15;
        LOBYTE(v109) = v18;
        BYTE1(v109) = v16;
        *(_DWORD *)((char *)&v109 + 2) = *(_DWORD *)((char *)v7 + 34);
        HIWORD(v109) = *((_WORD *)v7 + 19);
        *(double *)&long long v110 = v26;
        *((double *)&v110 + 1) = v27;
        *(double *)&long long v111 = v25;
        *((void *)&v111 + 1) = v20;
        LOBYTE(v112) = v28;
        HIBYTE(v112) = v19;
        for (uint64_t j = *(double **)(a1 + 64); j != *(double **)(a1 + 72) && v13 >= *j; j += 2)
        {
          if (v13 < j[1])
          {
            BOOL v52 = v12 != 0;
            BOOL v53 = v11 != 0;
            BOOL v55 = v10 != 0;
            if (!v28) {
              goto LABEL_153;
            }
LABEL_91:
            LOWORD(v106) = v112;
            long long v59 = v111;
            long long v60 = *v105;
            *(_OWORD *)long long v60 = v110;
            *((_OWORD *)v60 + 1) = v59;
            *((void *)v60 + 4) = v106;
            v60[40] = v52;
            v60[41] = v53;
            v60[42] = v55;
            goto LABEL_154;
          }
        }
        BOOL v52 = v12 != 0;
        BOOL v53 = v11 != 0;
        BOOL v54 = v10 == 0;
        BOOL v55 = v10 != 0;
        if (v18)
        {
          int v56 = v54;
          HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(v103, (double *)&v107, v56);
          if (*(unsigned char *)(a1 + 25))
          {
            unint64_t v57 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(a1, v15);
            unint64_t v58 = (uint64_t *)HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsForSource(a1, v57);
            HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(v58, (double *)&v107, v11 == 0);
          }
          BOOL v52 = 1;
          BOOL v53 = 1;
          BOOL v55 = 1;
        }
        if (v28) {
          goto LABEL_91;
        }
LABEL_153:
        *(void *)(a1 + 104) = *(void *)(a1 + 96);
      }
LABEL_154:
      *(double *)(a1 + 56) = a2;
LABEL_155:
      double v97 = *(double *)(a1 + 56);
      if (v97 == v5)
      {
        uint64_t v98 = [MEMORY[0x1E4F28B00] currentHandler];
        int v99 = objc_msgSend(NSString, "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>, HDStatisticsTimeInterval>>>::_mergeThroughTime(double) [Statistics = HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>, HDStatisticsTimeInterval>>]");
        [v98 handleFailureInFunction:v99 file:@"HDStatisticsBucket.hpp" lineNumber:234 description:@"Failed to make forward progress during statistics merge."];

        double v97 = *(double *)(a1 + 56);
      }
      double v5 = v97;
    }
    while (v97 < a2);
  }
}

void sub_1BD076AE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(uint64_t *result, double *a2, int a3)
{
  double v5 = result;
  int v6 = 2 * (*a2 != -1.79769313e308);
  if (*a2 == 1.79769313e308) {
    int v6 = 1;
  }
  if (!v6)
  {
    if (*(_DWORD *)result || result[9]) {
      return result;
    }
    HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::addSample((uint64_t)(result + 1), a2);
    uint64_t v7 = v5 + 15;
    goto LABEL_22;
  }
  if (v6 == 1)
  {
    if (*(_DWORD *)result) {
      return result;
    }
    int v10 = 1;
LABEL_15:
    *(_DWORD *)BOOL result = v10;
    *(_OWORD *)(result + 1) = xmmword_1BD3301F0;
    result[15] = 0;
    int v12 = result + 16;
    int v11 = (void *)result[16];
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 5) = 0u;
    *(_OWORD *)(v5 + 7) = 0u;
    *(_OWORD *)(v5 + 9) = 0u;
    *(_OWORD *)(v5 + 11) = 0u;
    *(_OWORD *)(v5 + 13) = 0u;
    if (v11)
    {
      v5[17] = (uint64_t)v11;
      operator delete(v11);
      int v13 = *((unsigned __int8 *)v5 + 112);
      _OWORD *v12 = 0u;
      *((_OWORD *)v5 + 9) = 0u;
      if (v13 && *((double *)v5 + 11) > *((double *)v5 + 21)) {
        goto LABEL_21;
      }
    }
    else
    {
      _OWORD *v12 = 0uLL;
      *((_OWORD *)v5 + 9) = 0uLL;
    }
    long long v14 = *((_OWORD *)v5 + 11);
    *((_OWORD *)v5 + 5) = *((_OWORD *)v5 + 10);
    *((_OWORD *)v5 + 6) = v14;
    *((_WORD *)v5 + 56) = *((_WORD *)v5 + 96);
LABEL_21:
    HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::addSample((uint64_t)(v5 + 1), a2);
    uint64_t v7 = v5 + 15;
LABEL_22:
    unint64_t v8 = (const HDRawQuantitySample *)a2;
    int v9 = a3;
    goto LABEL_23;
  }
  if (v6 != 2) {
    return result;
  }
  if (*(_DWORD *)result != 2)
  {
    int v10 = 2;
    goto LABEL_15;
  }
  HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::addSample((uint64_t)(result + 1), a2);
  uint64_t v7 = v5 + 15;
  unint64_t v8 = (const HDRawQuantitySample *)a2;
  int v9 = 1;
LABEL_23:

  return HDStatisticsTimeInterval::addSample(v7, v8, v9);
}

uint64_t **HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = a2;
  double v3 = *(void **)(a1 + 328);
  if (!v3) {
    goto LABEL_11;
  }
  double v4 = (uint64_t **)(a1 + 328);
  do
  {
    uint64_t v5 = v3[4];
    BOOL v6 = v5 < a2;
    if (v5 >= a2) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = v3 + 1;
    }
    if (!v6) {
      double v4 = (uint64_t **)v3;
    }
    double v3 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t **)(a1 + 328) || (uint64_t)v4[4] > a2)
  {
LABEL_11:
    unint64_t v8 = (uint64_t **)(a1 + 320);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 320), a2, &v10);
    double v4 = std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v8, a2, &v10);
  }
  return v4 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    uint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((void *)(a1 + 408), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a1, a2);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      id v10 = v6;
      uint64_t v7 = (void *)(a1 + 448);
      unint64_t v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        int v11 = &v10;
        *((void *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        id v6 = v10;
      }
    }
  }
  return a2;
}

void sub_1BD076E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  double v4 = (id *)(a1 + 88);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    id v6 = (void *)(a1 + 488);
    uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
    if (v7)
    {
      id v8 = (id)v7[3];
    }
    else
    {
      id v9 = objc_loadWeakRetained(v4);
      id v8 = [v9 bundleIdentifierForSourceID:a2];

      if (v8)
      {
        id v10 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
        objc_storeStrong(v10 + 3, v8);
      }
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1BD076F30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::addSample(uint64_t a1, double *a2)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2)
  {
    double v3 = *(double *)(a1 + 8);
    double v4 = v3 + floor((a2[1] - v3) / 60.0) * 60.0;
    if (v4 == v3)
    {
      double v10 = *(double *)(a1 + 32);
      double v7 = *(double *)a1;
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 24) + 1;
    }
    else
    {
      uint64_t v5 = *(void *)(a1 + 16);
      if (v5)
      {
        uint64_t v6 = v5 + 1;
        double v7 = *(double *)a1 + (*(double *)(a1 + 32) - *(double *)a1) / (double)v6;
      }
      else
      {
        double v7 = *(double *)(a1 + 32);
        uint64_t v6 = 1;
      }
      *(double *)a1 = v7;
      *(double *)(a1 + 8) = v4;
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0;
      double v10 = 0.0;
      uint64_t v11 = 1;
      *(void *)(a1 + 16) = v6;
    }
    double v12 = *a2;
    double v13 = *(double *)(a1 + 48);
    if (*(double *)(a1 + 56) < *a2) {
      double v12 = *(double *)(a1 + 56);
    }
    *(double *)(a1 + 56) = v12;
    double v14 = *a2;
    if (*a2 >= v13) {
      double v15 = *a2;
    }
    else {
      double v15 = v13;
    }
    *(void *)(a1 + 64) = v2 + 1;
    double v16 = v10 + (v14 - v10) / (double)v11;
    *(void *)(a1 + 24) = v11;
    double result = v7 + (v16 - v7) / (double)(v6 + 1);
    *(double *)(a1 + 32) = v16;
    *(double *)(a1 + 40) = result;
    *(double *)(a1 + 48) = v15;
  }
  else
  {
    double v8 = *a2;
    *(double *)(a1 + 32) = *a2;
    *(double *)(a1 + 40) = v8;
    *(double *)(a1 + 48) = v8;
    *(double *)(a1 + 56) = v8;
    *(void *)(a1 + 64) = 1;
    *(void *)a1 = 0;
    *(_OWORD *)(a1 + 16) = xmmword_1BD330200;
    double result = *(double *)(a1 + 8);
    if (result == -1.79769313e308)
    {
      double result = a2[1];
      *(double *)(a1 + 8) = result;
    }
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, void *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        double v7 = (uint64_t **)v5;
        uint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    double v7 = a1 + 1;
LABEL_9:
    id v9 = (char *)operator new(0xF0uLL);
    *((void *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    *(_OWORD *)(v9 + 136) = 0u;
    *(_OWORD *)(v9 + 152) = 0u;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 168) = 0u;
    *(_OWORD *)(v9 + 184) = 0u;
    *(_OWORD *)(v9 + 200) = 0u;
    *(_OWORD *)(v9 + 216) = 0u;
    *((void *)v9 + 29) = 0;
    *((void *)v9 + 7) = 0xFFEFFFFFFFFFFFFFLL;
    *((_OWORD *)v9 + 4) = 0u;
    *((_OWORD *)v9 + 5) = 0u;
    *((_OWORD *)v9 + 6) = 0u;
    *((_OWORD *)v9 + 7) = 0u;
    *((_OWORD *)v9 + 8) = 0u;
    *(_OWORD *)(v9 + 138) = 0u;
    *(_OWORD *)(v9 + 218) = 0u;
    *((_OWORD *)v9 + 12) = 0u;
    *((_OWORD *)v9 + 13) = 0u;
    *((_OWORD *)v9 + 10) = 0u;
    *((_OWORD *)v9 + 11) = 0u;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    double v12 = a2 - 3;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 4);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v103 = *((void *)a2 - 3);
                uint64_t v104 = *(void *)(v13 + 24);
                if (v103 == v104) {
                  return;
                }
                int v105 = *(char **)(*(void *)a3 + 384);
                uint64_t v106 = *(char **)(*(void *)a3 + 392);
                long long v107 = v105;
                long long v108 = v105;
                if (v105 == v106) {
                  goto LABEL_171;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)v13, (long long *)(v13 + 48), a2 - 3, a3);
                return;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, (uint64_t)(a2 - 3), a3);
                return;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, v13 + 144, (uint64_t)(a2 - 3), a3);
                return;
              default:
                JUMPOUT(0);
            }
            do
            {
              if (*(void *)v108 == v103) {
                goto LABEL_168;
              }
              v108 += 8;
            }
            while (v108 != v106);
            long long v108 = *(char **)(*(void *)a3 + 392);
LABEL_168:
            while (*(void *)v107 != v104)
            {
              v107 += 8;
              if (v107 == v106)
              {
                long long v107 = *(char **)(*(void *)a3 + 392);
                break;
              }
            }
LABEL_171:
            if (v108 - v105 < v107 - v105)
            {
              *(_OWORD *)v226 = *(_OWORD *)(v13 + 16);
              *(_OWORD *)&v226[16] = *(_OWORD *)(v13 + 32);
              long long v218 = *(_OWORD *)v13;
              long long v109 = *v12;
              long long v110 = *(a2 - 2);
              *(_OWORD *)(v13 + 27) = *(long long *)((char *)a2 - 21);
              *(_OWORD *)unint64_t v13 = v109;
              *(_OWORD *)(v13 + 16) = v110;
              *(long long *)((char *)a2 - 21) = *(_OWORD *)&v226[11];
              long long *v12 = v218;
              *(a2 - 2) = *(_OWORD *)v226;
            }
            return;
          }
          if (v14 <= 1151)
          {
            long long v111 = (long long *)(v13 + 48);
            BOOL v113 = (long long *)v13 == a2 || v111 == a2;
            if (a5)
            {
              if (!v113)
              {
                unint64_t v114 = v13;
                do
                {
                  unint64_t v115 = v114;
                  unint64_t v114 = (unint64_t)v111;
                  uint64_t v116 = *(void *)(v115 + 72);
                  uint64_t v117 = *(void *)(v115 + 24);
                  if (v116 != v117)
                  {
                    long long v118 = *(char **)(*(void *)a3 + 384);
                    long long v119 = *(char **)(*(void *)a3 + 392);
                    long long v120 = v118;
                    long long v121 = v118;
                    if (v118 != v119)
                    {
                      do
                      {
                        if (*(void *)v121 == v116) {
                          goto LABEL_196;
                        }
                        v121 += 8;
                      }
                      while (v121 != v119);
                      long long v121 = *(char **)(*(void *)a3 + 392);
LABEL_196:
                      while (*(void *)v120 != v117)
                      {
                        v120 += 8;
                        if (v120 == v119)
                        {
                          long long v120 = *(char **)(*(void *)a3 + 392);
                          break;
                        }
                      }
                    }
                    if (v121 - v118 < v120 - v118)
                    {
                      uint64_t v227 = *(void *)(v114 + 16);
                      long long v219 = *(_OWORD *)v114;
                      long long v236 = *(_OWORD *)(v115 + 80);
                      unint64_t v122 = v114;
                      while (1)
                      {
                        long long v123 = *(_OWORD *)(v115 + 16);
                        *(_OWORD *)unint64_t v122 = *(_OWORD *)v115;
                        *(_OWORD *)(v122 + 16) = v123;
                        *(_OWORD *)(v122 + 27) = *(_OWORD *)(v115 + 27);
                        if (v115 == v13) {
                          break;
                        }
                        unint64_t v122 = v115;
                        uint64_t v124 = *(void *)(v115 - 24);
                        if (v116 != v124)
                        {
                          uint64_t v125 = *(char **)(*(void *)a3 + 384);
                          uint64_t v126 = *(char **)(*(void *)a3 + 392);
                          long long v127 = v125;
                          long long v128 = v125;
                          if (v125 != v126)
                          {
                            do
                            {
                              if (*(void *)v128 == v116) {
                                goto LABEL_208;
                              }
                              v128 += 8;
                            }
                            while (v128 != v126);
                            long long v128 = *(char **)(*(void *)a3 + 392);
LABEL_208:
                            while (*(void *)v127 != v124)
                            {
                              v127 += 8;
                              if (v127 == v126)
                              {
                                long long v127 = *(char **)(*(void *)a3 + 392);
                                break;
                              }
                            }
                          }
                          unint64_t v115 = v122 - 48;
                          if (v128 - v125 < v127 - v125) {
                            continue;
                          }
                        }
                        goto LABEL_212;
                      }
                      unint64_t v122 = v13;
LABEL_212:
                      *(_OWORD *)unint64_t v122 = v219;
                      *(void *)(v122 + 16) = v227;
                      *(void *)(v122 + 24) = v116;
                      *(void *)(v122 + 32) = v236;
                      *(_DWORD *)(v122 + 39) = *(_DWORD *)((char *)&v236 + 7);
                    }
                  }
                  long long v111 = (long long *)(v114 + 48);
                }
                while ((long long *)(v114 + 48) != a2);
              }
            }
            else if (!v113)
            {
              do
              {
                unint64_t v201 = a1;
                a1 = (unint64_t)v111;
                uint64_t v202 = *(void *)(v201 + 72);
                uint64_t v203 = *(void *)(v201 + 24);
                if (v202 != v203)
                {
                  v204 = *(char **)(*(void *)a3 + 384);
                  v205 = *(char **)(*(void *)a3 + 392);
                  v206 = v204;
                  v207 = v204;
                  if (v204 != v205)
                  {
                    do
                    {
                      if (*(void *)v207 == v202) {
                        goto LABEL_312;
                      }
                      v207 += 8;
                    }
                    while (v207 != v205);
                    v207 = *(char **)(*(void *)a3 + 392);
LABEL_312:
                    while (*(void *)v206 != v203)
                    {
                      v206 += 8;
                      if (v206 == v205)
                      {
                        v206 = *(char **)(*(void *)a3 + 392);
                        break;
                      }
                    }
                  }
                  if (v207 - v204 < v206 - v204)
                  {
                    uint64_t v230 = *(void *)(a1 + 16);
                    long long v222 = *(_OWORD *)a1;
                    long long v239 = *(_OWORD *)(v201 + 80);
                    unint64_t v208 = a1;
                    do
                    {
                      v209 = (_OWORD *)v208;
                      unint64_t v208 = v201;
                      long long v210 = *(_OWORD *)(v201 + 16);
                      _OWORD *v209 = *(_OWORD *)v201;
                      v209[1] = v210;
                      *(_OWORD *)((char *)v209 + 27) = *(_OWORD *)(v201 + 27);
                      uint64_t v211 = *(void *)(v201 - 24);
                      if (v202 == v211) {
                        break;
                      }
                      v212 = *(char **)(*(void *)a3 + 384);
                      v213 = *(char **)(*(void *)a3 + 392);
                      v214 = v212;
                      v215 = v212;
                      if (v212 != v213)
                      {
                        do
                        {
                          if (*(void *)v215 == v202) {
                            goto LABEL_322;
                          }
                          v215 += 8;
                        }
                        while (v215 != v213);
                        v215 = *(char **)(*(void *)a3 + 392);
LABEL_322:
                        while (*(void *)v214 != v211)
                        {
                          v214 += 8;
                          if (v214 == v213)
                          {
                            v214 = *(char **)(*(void *)a3 + 392);
                            break;
                          }
                        }
                      }
                      unint64_t v201 = v208 - 48;
                    }
                    while (v215 - v212 < v214 - v212);
                    *(_OWORD *)unint64_t v208 = v222;
                    *(void *)(v208 + 16) = v230;
                    *(void *)(v208 + 24) = v202;
                    *(void *)(v208 + 32) = v239;
                    *(_DWORD *)(v208 + 39) = *(_DWORD *)((char *)&v239 + 7);
                  }
                }
                long long v111 = (long long *)(a1 + 48);
              }
              while ((long long *)(a1 + 48) != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((long long *)v13 != a2)
            {
              int64_t v129 = (v15 - 2) >> 1;
              int64_t v130 = v129;
              do
              {
                int64_t v131 = v130;
                if (v129 >= v130)
                {
                  uint64_t v132 = (2 * v130) | 1;
                  unint64_t v133 = v13 + 48 * v132;
                  if (2 * v131 + 2 < (uint64_t)v15)
                  {
                    uint64_t v134 = *(void *)(v133 + 24);
                    uint64_t v135 = *(void *)(v133 + 72);
                    if (v134 != v135)
                    {
                      v137 = *(char **)(*(void *)a3 + 384);
                      v136 = *(char **)(*(void *)a3 + 392);
                      v138 = v137;
                      v139 = v137;
                      if (v137 != v136)
                      {
                        do
                        {
                          if (*(void *)v139 == v134) {
                            goto LABEL_224;
                          }
                          v139 += 8;
                        }
                        while (v139 != v136);
                        v139 = *(char **)(*(void *)a3 + 392);
LABEL_224:
                        while (*(void *)v138 != v135)
                        {
                          v138 += 8;
                          if (v138 == v136)
                          {
                            v138 = *(char **)(*(void *)a3 + 392);
                            break;
                          }
                        }
                      }
                      v133 += 48 * (v139 - v137 < v138 - v137);
                      if (v139 - v137 < v138 - v137) {
                        uint64_t v132 = 2 * v131 + 2;
                      }
                    }
                  }
                  unint64_t v140 = v13 + 48 * v131;
                  uint64_t v141 = *(void *)(v133 + 24);
                  uint64_t v142 = *(void *)(v140 + 24);
                  if (v141 == v142) {
                    goto LABEL_238;
                  }
                  v144 = *(char **)(*(void *)a3 + 384);
                  v143 = *(char **)(*(void *)a3 + 392);
                  v145 = v144;
                  v146 = v144;
                  if (v144 != v143)
                  {
                    do
                    {
                      if (*(void *)v146 == v141) {
                        goto LABEL_234;
                      }
                      v146 += 8;
                    }
                    while (v146 != v143);
                    v146 = *(char **)(*(void *)a3 + 392);
LABEL_234:
                    while (*(void *)v145 != v142)
                    {
                      v145 += 8;
                      if (v145 == v143)
                      {
                        v145 = *(char **)(*(void *)a3 + 392);
                        break;
                      }
                    }
                  }
                  if (v146 - v144 >= v145 - v144)
                  {
LABEL_238:
                    uint64_t v228 = *(void *)(v140 + 16);
                    long long v220 = *(_OWORD *)v140;
                    long long v237 = *(_OWORD *)(v140 + 32);
                    long long v147 = *(_OWORD *)v133;
                    long long v148 = *(_OWORD *)(v133 + 16);
                    *(_OWORD *)(v140 + 27) = *(_OWORD *)(v133 + 27);
                    *(_OWORD *)unint64_t v140 = v147;
                    *(_OWORD *)(v140 + 16) = v148;
                    if (v129 >= v132)
                    {
                      while (1)
                      {
                        uint64_t v150 = 2 * v132;
                        uint64_t v132 = (2 * v132) | 1;
                        unint64_t v149 = v13 + 48 * v132;
                        uint64_t v151 = v150 + 2;
                        if (v151 < (uint64_t)v15)
                        {
                          uint64_t v152 = *(void *)(v149 + 24);
                          uint64_t v153 = *(void *)(v149 + 72);
                          if (v152 != v153)
                          {
                            v154 = *(char **)(*(void *)a3 + 384);
                            v155 = *(char **)(*(void *)a3 + 392);
                            v156 = v154;
                            v157 = v154;
                            if (v154 != v155)
                            {
                              do
                              {
                                if (*(void *)v157 == v152) {
                                  goto LABEL_246;
                                }
                                v157 += 8;
                              }
                              while (v157 != v155);
                              v157 = *(char **)(*(void *)a3 + 392);
LABEL_246:
                              while (*(void *)v156 != v153)
                              {
                                v156 += 8;
                                if (v156 == v155)
                                {
                                  v156 = *(char **)(*(void *)a3 + 392);
                                  break;
                                }
                              }
                            }
                            v149 += 48 * (v157 - v154 < v156 - v154);
                            if (v157 - v154 < v156 - v154) {
                              uint64_t v132 = v151;
                            }
                          }
                        }
                        uint64_t v158 = *(void *)(v149 + 24);
                        if (v158 != v142)
                        {
                          v160 = *(char **)(*(void *)a3 + 384);
                          v159 = *(char **)(*(void *)a3 + 392);
                          v161 = v160;
                          v162 = v160;
                          if (v160 != v159)
                          {
                            do
                            {
                              if (*(void *)v162 == v158) {
                                goto LABEL_256;
                              }
                              v162 += 8;
                            }
                            while (v162 != v159);
                            v162 = *(char **)(*(void *)a3 + 392);
LABEL_256:
                            while (*(void *)v161 != v142)
                            {
                              v161 += 8;
                              if (v161 == v159)
                              {
                                v161 = *(char **)(*(void *)a3 + 392);
                                break;
                              }
                            }
                          }
                          if (v162 - v160 < v161 - v160) {
                            break;
                          }
                        }
                        long long v163 = *(_OWORD *)v149;
                        long long v164 = *(_OWORD *)(v149 + 16);
                        *(_OWORD *)(v133 + 27) = *(_OWORD *)(v149 + 27);
                        *(_OWORD *)unint64_t v133 = v163;
                        *(_OWORD *)(v133 + 16) = v164;
                        unint64_t v133 = v149;
                        if (v129 < v132) {
                          goto LABEL_261;
                        }
                      }
                    }
                    unint64_t v149 = v133;
LABEL_261:
                    *(_OWORD *)unint64_t v149 = v220;
                    *(void *)(v149 + 16) = v228;
                    *(void *)(v149 + 24) = v142;
                    *(void *)(v149 + 32) = v237;
                    *(_DWORD *)(v149 + 39) = *(_DWORD *)((char *)&v237 + 7);
                  }
                }
                int64_t v130 = v131 - 1;
              }
              while (v131);
              int64_t v165 = v14 / 0x30uLL;
              do
              {
                uint64_t v166 = 0;
                *(_OWORD *)v229 = *(_OWORD *)(v13 + 16);
                *(_OWORD *)&v229[16] = *(_OWORD *)(v13 + 32);
                long long v221 = *(_OWORD *)v13;
                uint64_t v167 = v165 - 2;
                if (v165 < 2) {
                  uint64_t v167 = v165 - 1;
                }
                uint64_t v168 = v167 >> 1;
                unint64_t v169 = v13;
                do
                {
                  v170 = (_OWORD *)v169;
                  v169 += 48 * v166 + 48;
                  uint64_t v171 = 2 * v166;
                  uint64_t v166 = (2 * v166) | 1;
                  uint64_t v172 = v171 + 2;
                  if (v171 + 2 < v165)
                  {
                    uint64_t v173 = *(void *)(v169 + 24);
                    uint64_t v174 = *(void *)(v169 + 72);
                    if (v173 != v174)
                    {
                      v176 = *(char **)(*(void *)a3 + 384);
                      v175 = *(char **)(*(void *)a3 + 392);
                      v177 = v176;
                      v178 = v176;
                      if (v176 != v175)
                      {
                        do
                        {
                          if (*(void *)v178 == v173) {
                            goto LABEL_273;
                          }
                          v178 += 8;
                        }
                        while (v178 != v175);
                        v178 = *(char **)(*(void *)a3 + 392);
LABEL_273:
                        while (*(void *)v177 != v174)
                        {
                          v177 += 8;
                          if (v177 == v175)
                          {
                            v177 = *(char **)(*(void *)a3 + 392);
                            break;
                          }
                        }
                      }
                      v169 += 48 * (v178 - v176 < v177 - v176);
                      if (v178 - v176 < v177 - v176) {
                        uint64_t v166 = v172;
                      }
                    }
                  }
                  long long v179 = *(_OWORD *)v169;
                  long long v180 = *(_OWORD *)(v169 + 16);
                  *(_OWORD *)((char *)v170 + 27) = *(_OWORD *)(v169 + 27);
                  _OWORD *v170 = v179;
                  v170[1] = v180;
                }
                while (v166 <= v168);
                a2 -= 3;
                if ((long long *)v169 == a2)
                {
                  *(_OWORD *)(v169 + 27) = *(_OWORD *)&v229[11];
                  *(_OWORD *)unint64_t v169 = v221;
                  *(_OWORD *)(v169 + 16) = *(_OWORD *)v229;
                }
                else
                {
                  long long v181 = *a2;
                  long long v182 = a2[1];
                  *(_OWORD *)(v169 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v169 = v181;
                  *(_OWORD *)(v169 + 16) = v182;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v229[11];
                  *a2 = v221;
                  a2[1] = *(_OWORD *)v229;
                  uint64_t v183 = v169 - v13 + 48;
                  if (v183 >= 49)
                  {
                    unint64_t v184 = (v183 / 0x30uLL - 2) >> 1;
                    unint64_t v185 = v13 + 48 * v184;
                    uint64_t v186 = *(void *)(v185 + 24);
                    uint64_t v187 = *(void *)(v169 + 24);
                    if (v186 != v187)
                    {
                      v189 = *(char **)(*(void *)a3 + 384);
                      v188 = *(char **)(*(void *)a3 + 392);
                      v190 = v189;
                      v191 = v189;
                      if (v189 != v188)
                      {
                        do
                        {
                          if (*(void *)v191 == v186) {
                            goto LABEL_286;
                          }
                          v191 += 8;
                        }
                        while (v191 != v188);
                        v191 = *(char **)(*(void *)a3 + 392);
LABEL_286:
                        while (*(void *)v190 != v187)
                        {
                          v190 += 8;
                          if (v190 == v188)
                          {
                            v190 = *(char **)(*(void *)a3 + 392);
                            break;
                          }
                        }
                      }
                      if (v191 - v189 < v190 - v189)
                      {
                        uint64_t v242 = *(void *)(v169 + 16);
                        long long v238 = *(_OWORD *)v169;
                        long long v233 = *(_OWORD *)(v169 + 32);
                        do
                        {
                          v192 = (_OWORD *)v169;
                          unint64_t v169 = v185;
                          long long v193 = *(_OWORD *)v185;
                          long long v194 = *(_OWORD *)(v185 + 16);
                          *(_OWORD *)((char *)v192 + 27) = *(_OWORD *)(v185 + 27);
                          _OWORD *v192 = v193;
                          v192[1] = v194;
                          if (!v184) {
                            break;
                          }
                          unint64_t v184 = (v184 - 1) >> 1;
                          unint64_t v185 = v13 + 48 * v184;
                          uint64_t v195 = *(void *)(v185 + 24);
                          if (v195 == v187) {
                            break;
                          }
                          v197 = *(char **)(*(void *)a3 + 384);
                          v196 = *(char **)(*(void *)a3 + 392);
                          v198 = v197;
                          v199 = v197;
                          if (v197 != v196)
                          {
                            do
                            {
                              if (*(void *)v199 == v195) {
                                goto LABEL_297;
                              }
                              v199 += 8;
                            }
                            while (v199 != v196);
                            v199 = *(char **)(*(void *)a3 + 392);
LABEL_297:
                            while (*(void *)v198 != v187)
                            {
                              v198 += 8;
                              if (v198 == v196)
                              {
                                v198 = *(char **)(*(void *)a3 + 392);
                                break;
                              }
                            }
                          }
                        }
                        while (v199 - v197 < v198 - v197);
                        *(_OWORD *)unint64_t v169 = v238;
                        *(void *)(v169 + 16) = v242;
                        *(void *)(v169 + 24) = v187;
                        *(void *)(v169 + 32) = v233;
                        *(_DWORD *)(v169 + 39) = *(_DWORD *)((char *)&v233 + 7);
                      }
                    }
                  }
                }
              }
              while (v165-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          double v17 = (long long *)(v13 + 48 * (v15 >> 1));
          if ((unint64_t)v14 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v15 >> 1)), a2 - 3, a3);
            uint64_t v18 = 3 * v16;
            char v19 = (long long *)(a1 + 48 * v16 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48), v19, a2 - 6, a3);
            uint64_t v20 = (long long *)(a1 + 48 + 16 * v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 96), v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v19, v17, v20, a3);
            *(_OWORD *)v223 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v223[16] = *(_OWORD *)(a1 + 32);
            long long v216 = *(_OWORD *)a1;
            long long v21 = *(long long *)((char *)v17 + 27);
            long long v22 = v17[1];
            *(_OWORD *)a1 = *v17;
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(a1 + 27) = v21;
            *(long long *)((char *)v17 + 27) = *(_OWORD *)&v223[11];
            long long *v17 = v216;
            v17[1] = *(_OWORD *)v223;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48 * (v15 >> 1)), (long long *)a1, a2 - 3, a3);
          }
          --a4;
          if (a5)
          {
            uint64_t v23 = *(void *)(a1 + 24);
            uint64_t v24 = *(void *)a3;
            break;
          }
          uint64_t v25 = *(void *)(a1 - 24);
          uint64_t v23 = *(void *)(a1 + 24);
          if (v25 != v23)
          {
            uint64_t v24 = *(void *)a3;
            double v26 = *(char **)(*(void *)a3 + 384);
            double v27 = *(char **)(*(void *)a3 + 392);
            int v28 = v26;
            double v29 = v26;
            if (v26 != v27)
            {
              do
              {
                if (*(void *)v29 == v25) {
                  goto LABEL_16;
                }
                v29 += 8;
              }
              while (v29 != v27);
              double v29 = *(char **)(*(void *)a3 + 392);
LABEL_16:
              while (*(void *)v28 != v23)
              {
                v28 += 8;
                if (v28 == v27)
                {
                  int v28 = *(char **)(*(void *)a3 + 392);
                  break;
                }
              }
            }
            if (v29 - v26 < v28 - v26) {
              break;
            }
          }
          uint64_t v241 = *(void *)(a1 + 16);
          long long v232 = *(_OWORD *)(a1 + 32);
          long long v235 = *(_OWORD *)a1;
          uint64_t v67 = *((void *)a2 - 3);
          if (v23 == v67) {
            goto LABEL_107;
          }
          long long v68 = *(char **)(*(void *)a3 + 384);
          long long v69 = *(char **)(*(void *)a3 + 392);
          if (v68 == v69)
          {
            unint64_t v71 = *(char **)(*(void *)a3 + 384);
            unint64_t v70 = v71;
          }
          else
          {
            unint64_t v70 = *(char **)(*(void *)a3 + 384);
            while (*(void *)v70 != v23)
            {
              v70 += 8;
              if (v70 == v69)
              {
                unint64_t v70 = *(char **)(*(void *)a3 + 392);
                break;
              }
            }
            unint64_t v71 = *(char **)(*(void *)a3 + 384);
            while (*(void *)v71 != v67)
            {
              v71 += 8;
              if (v71 == v69)
              {
                unint64_t v71 = *(char **)(*(void *)a3 + 392);
                break;
              }
            }
          }
          if (v70 - v68 >= v71 - v68)
          {
LABEL_107:
            unint64_t v13 = a1 + 48;
            if (a1 + 48 < (unint64_t)a2)
            {
              uint64_t v75 = *(void *)a3;
              unint64_t v76 = a1;
              do
              {
                uint64_t v77 = *(void *)(v76 + 72);
                unint64_t v76 = v13;
                if (v23 != v77)
                {
                  int v78 = *(char **)(v75 + 384);
                  unint64_t v79 = *(char **)(v75 + 392);
                  unint64_t v80 = v78;
                  long long v81 = v78;
                  if (v78 != v79)
                  {
                    do
                    {
                      if (*(void *)v81 == v23) {
                        goto LABEL_114;
                      }
                      v81 += 8;
                    }
                    while (v81 != v79);
                    long long v81 = *(char **)(v75 + 392);
LABEL_114:
                    while (*(void *)v80 != v77)
                    {
                      v80 += 8;
                      if (v80 == v79)
                      {
                        unint64_t v80 = *(char **)(v75 + 392);
                        break;
                      }
                    }
                  }
                  if (v81 - v78 < v80 - v78) {
                    break;
                  }
                }
                v13 += 48;
              }
              while (v76 + 48 < (unint64_t)a2);
            }
          }
          else
          {
            unint64_t v13 = a1;
            do
            {
              do
              {
                uint64_t v72 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v72);
              if (v68 == v69)
              {
                uint64_t v74 = *(char **)(*(void *)a3 + 384);
                unint64_t v73 = v74;
              }
              else
              {
                unint64_t v73 = *(char **)(*(void *)a3 + 384);
                while (*(void *)v73 != v23)
                {
                  v73 += 8;
                  if (v73 == v69)
                  {
                    unint64_t v73 = *(char **)(*(void *)a3 + 392);
                    break;
                  }
                }
                uint64_t v74 = *(char **)(*(void *)a3 + 384);
                while (*(void *)v74 != v72)
                {
                  v74 += 8;
                  if (v74 == v69)
                  {
                    uint64_t v74 = *(char **)(*(void *)a3 + 392);
                    break;
                  }
                }
              }
            }
            while (v73 - v68 >= v74 - v68);
          }
          long long v82 = a2;
          if (v13 < (unint64_t)a2)
          {
            uint64_t v83 = *(void *)a3;
            long long v82 = a2;
            do
            {
              uint64_t v84 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v84) {
                break;
              }
              int v85 = *(char **)(v83 + 384);
              long long v86 = *(char **)(v83 + 392);
              long long v87 = v85;
              id v88 = v85;
              if (v85 != v86)
              {
                do
                {
                  if (*(void *)v88 == v23) {
                    goto LABEL_126;
                  }
                  v88 += 8;
                }
                while (v88 != v86);
                id v88 = *(char **)(v83 + 392);
LABEL_126:
                while (*(void *)v87 != v84)
                {
                  v87 += 8;
                  if (v87 == v86)
                  {
                    long long v87 = *(char **)(v83 + 392);
                    break;
                  }
                }
              }
            }
            while (v88 - v85 < v87 - v85);
          }
          while (v13 < (unint64_t)v82)
          {
            *(_OWORD *)v225 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v225[16] = *(_OWORD *)(v13 + 32);
            long long v217 = *(_OWORD *)v13;
            long long v89 = *v82;
            long long v90 = v82[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v82 + 27);
            *(_OWORD *)unint64_t v13 = v89;
            *(_OWORD *)(v13 + 16) = v90;
            *(long long *)((char *)v82 + 27) = *(_OWORD *)&v225[11];
            *long long v82 = v217;
            v82[1] = *(_OWORD *)v225;
            uint64_t v91 = *(void *)a3;
            do
            {
              do
              {
                uint64_t v92 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v92);
              id v93 = *(char **)(v91 + 384);
              int v94 = *(char **)(v91 + 392);
              if (v93 == v94)
              {
                long long v96 = *(char **)(v91 + 384);
                long long v95 = v96;
              }
              else
              {
                long long v95 = *(char **)(v91 + 384);
                while (*(void *)v95 != v23)
                {
                  v95 += 8;
                  if (v95 == v94)
                  {
                    long long v95 = *(char **)(v91 + 392);
                    break;
                  }
                }
                long long v96 = *(char **)(v91 + 384);
                while (*(void *)v96 != v92)
                {
                  v96 += 8;
                  if (v96 == v94)
                  {
                    long long v96 = *(char **)(v91 + 392);
                    break;
                  }
                }
              }
            }
            while (v95 - v93 >= v96 - v93);
            do
            {
              uint64_t v97 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v97) {
                break;
              }
              if (v93 == v94)
              {
                int v99 = v93;
                uint64_t v98 = v93;
              }
              else
              {
                uint64_t v98 = v93;
                while (*(void *)v98 != v23)
                {
                  v98 += 8;
                  if (v98 == v94)
                  {
                    uint64_t v98 = v94;
                    break;
                  }
                }
                int v99 = v93;
                while (*(void *)v99 != v97)
                {
                  v99 += 8;
                  if (v99 == v94)
                  {
                    int v99 = v94;
                    break;
                  }
                }
              }
            }
            while (v98 - v93 < v99 - v93);
          }
          long long v100 = (long long *)(v13 - 48);
          BOOL v5 = v13 - 48 >= a1;
          BOOL v6 = v13 - 48 == a1;
          if (v13 - 48 != a1)
          {
            long long v101 = *v100;
            long long v102 = *(_OWORD *)(v13 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
            *(_OWORD *)a1 = v101;
            *(_OWORD *)(a1 + 16) = v102;
          }
          a5 = 0;
          *long long v100 = v235;
          *(void *)(v13 - 32) = v241;
          *(void *)(v13 - 24) = v23;
          *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v232 + 7);
          *(void *)(v13 - 16) = v232;
        }
        uint64_t v240 = *(void *)(a1 + 16);
        long long v231 = *(_OWORD *)(a1 + 32);
        long long v234 = *(_OWORD *)a1;
        unint64_t v30 = a1;
        do
        {
          unint64_t v31 = v30;
          v30 += 48;
          uint64_t v32 = *(void *)(v31 + 72);
          if (v32 == v23) {
            break;
          }
          uint64_t v33 = *(char **)(v24 + 384);
          double v34 = *(char **)(v24 + 392);
          double v35 = v33;
          long long v36 = v33;
          if (v33 != v34)
          {
            do
            {
              if (*(void *)v36 == v32) {
                goto LABEL_26;
              }
              v36 += 8;
            }
            while (v36 != v34);
            long long v36 = *(char **)(v24 + 392);
LABEL_26:
            while (*(void *)v35 != v23)
            {
              v35 += 8;
              if (v35 == v34)
              {
                double v35 = *(char **)(v24 + 392);
                break;
              }
            }
          }
        }
        while (v36 - v33 < v35 - v33);
        double v37 = a2;
        if (v31 == a1)
        {
          double v37 = a2;
          if (v30 < (unint64_t)a2)
          {
            double v37 = a2;
            do
            {
              uint64_t v43 = *((void *)v37 - 3);
              v37 -= 3;
              if (v43 != v23)
              {
                uint64_t v44 = *(char **)(v24 + 384);
                double v45 = *(char **)(v24 + 392);
                uint64_t v46 = v44;
                long long v47 = v44;
                if (v44 != v45)
                {
                  do
                  {
                    if (*(void *)v47 == v43) {
                      goto LABEL_48;
                    }
                    v47 += 8;
                  }
                  while (v47 != v45);
                  long long v47 = *(char **)(v24 + 392);
LABEL_48:
                  while (*(void *)v46 != v23)
                  {
                    v46 += 8;
                    if (v46 == v45)
                    {
                      uint64_t v46 = *(char **)(v24 + 392);
                      break;
                    }
                  }
                }
                if (v47 - v44 < v46 - v44) {
                  break;
                }
              }
            }
            while (v30 < (unint64_t)v37);
          }
        }
        else
        {
          do
          {
            do
            {
              uint64_t v38 = *((void *)v37 - 3);
              v37 -= 3;
            }
            while (v38 == v23);
            double v39 = *(char **)(v24 + 384);
            double v40 = *(char **)(v24 + 392);
            double v41 = v39;
            double v42 = v39;
            if (v39 != v40)
            {
              do
              {
                if (*(void *)v42 == v38) {
                  goto LABEL_36;
                }
                v42 += 8;
              }
              while (v42 != v40);
              double v42 = *(char **)(v24 + 392);
LABEL_36:
              while (*(void *)v41 != v23)
              {
                v41 += 8;
                if (v41 == v40)
                {
                  double v41 = *(char **)(v24 + 392);
                  break;
                }
              }
            }
          }
          while (v42 - v39 >= v41 - v39);
        }
        unint64_t v13 = v30;
        if (v30 < (unint64_t)v37)
        {
          long long v48 = v37;
          do
          {
            *(_OWORD *)v224 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v224[16] = *(_OWORD *)(v13 + 32);
            long long v49 = *(_OWORD *)v13;
            long long v51 = *v48;
            long long v50 = v48[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v48 + 27);
            *(_OWORD *)unint64_t v13 = v51;
            *(_OWORD *)(v13 + 16) = v50;
            *(long long *)((char *)v48 + 27) = *(_OWORD *)&v224[11];
            long long *v48 = v49;
            v48[1] = *(_OWORD *)v224;
            uint64_t v52 = *(void *)a3;
            do
            {
              uint64_t v53 = *(void *)(v13 + 72);
              v13 += 48;
              if (v53 == v23) {
                break;
              }
              BOOL v54 = *(char **)(v52 + 384);
              BOOL v55 = *(char **)(v52 + 392);
              int v56 = v54;
              unint64_t v57 = v54;
              if (v54 != v55)
              {
                do
                {
                  if (*(void *)v57 == v53) {
                    goto LABEL_61;
                  }
                  v57 += 8;
                }
                while (v57 != v55);
                unint64_t v57 = *(char **)(v52 + 392);
LABEL_61:
                while (*(void *)v56 != v23)
                {
                  v56 += 8;
                  if (v56 == v55)
                  {
                    int v56 = *(char **)(v52 + 392);
                    break;
                  }
                }
              }
            }
            while (v57 - v54 < v56 - v54);
            do
            {
              do
              {
                uint64_t v58 = *((void *)v48 - 3);
                v48 -= 3;
              }
              while (v58 == v23);
              long long v59 = *(char **)(v52 + 384);
              long long v60 = *(char **)(v52 + 392);
              unint64_t v61 = v59;
              char v62 = v59;
              if (v59 != v60)
              {
                do
                {
                  if (*(void *)v62 == v58) {
                    goto LABEL_70;
                  }
                  v62 += 8;
                }
                while (v62 != v60);
                char v62 = *(char **)(v52 + 392);
LABEL_70:
                while (*(void *)v61 != v23)
                {
                  v61 += 8;
                  if (v61 == v60)
                  {
                    unint64_t v61 = *(char **)(v52 + 392);
                    break;
                  }
                }
              }
            }
            while (v62 - v59 >= v61 - v59);
          }
          while (v13 < (unint64_t)v48);
        }
        double v63 = (long long *)(v13 - 48);
        if (v13 - 48 != a1)
        {
          long long v64 = *v63;
          long long v65 = *(_OWORD *)(v13 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
          *(_OWORD *)a1 = v64;
          *(_OWORD *)(a1 + 16) = v65;
        }
        long long *v63 = v234;
        *(void *)(v13 - 32) = v240;
        *(void *)(v13 - 24) = v23;
        *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v231 + 7);
        *(void *)(v13 - 16) = v231;
        if (v30 >= (unint64_t)v37) {
          break;
        }
LABEL_80:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(a1, v13 - 48, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, v13 - 48, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v13, (uint64_t)a2, a3))
      {
        break;
      }
      if (!v66) {
        goto LABEL_80;
      }
    }
    a2 = (long long *)(v13 - 48);
    if (!v66) {
      continue;
    }
    break;
  }
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(long long *a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = *((void *)a2 + 3);
  uint64_t v5 = *((void *)a1 + 3);
  if (v4 == v5) {
    goto LABEL_23;
  }
  BOOL v6 = *(char **)(*(void *)a4 + 384);
  double v7 = *(char **)(*(void *)a4 + 392);
  if (v6 == v7)
  {
    id v9 = *(char **)(*(void *)a4 + 384);
    uint64_t v8 = v9;
  }
  else
  {
    uint64_t v8 = *(char **)(*(void *)a4 + 384);
    while (*(void *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        uint64_t v8 = *(char **)(*(void *)a4 + 392);
        break;
      }
    }
    id v9 = *(char **)(*(void *)a4 + 384);
    while (*(void *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        id v9 = *(char **)(*(void *)a4 + 392);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    uint64_t v13 = *((void *)a3 + 3);
    if (v13 != v4)
    {
      uint64_t v14 = *(char **)(*(void *)a4 + 384);
      unint64_t v15 = *(char **)(*(void *)a4 + 392);
      unint64_t v16 = v14;
      double v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(void *)v17 == v13) {
            goto LABEL_28;
          }
          v17 += 8;
        }
        while (v17 != v15);
        double v17 = *(char **)(*(void *)a4 + 392);
LABEL_28:
        while (*(void *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            unint64_t v16 = *(char **)(*(void *)a4 + 392);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        long long v18 = *a2;
        *(_OWORD *)uint64_t v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        long long v19 = *(long long *)((char *)a3 + 27);
        long long v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(long long *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        __n128 result = *(__n128 *)&v46[11];
        *(long long *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        uint64_t v22 = *((void *)a2 + 3);
        uint64_t v23 = *((void *)a1 + 3);
        if (v22 != v23)
        {
          uint64_t v24 = *(char **)(*(void *)a4 + 384);
          uint64_t v25 = *(char **)(*(void *)a4 + 392);
          double v26 = v24;
          double v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(void *)v27 == v22) {
                goto LABEL_37;
              }
              v27 += 8;
            }
            while (v27 != v25);
            double v27 = *(char **)(*(void *)a4 + 392);
LABEL_37:
            while (*(void *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                double v26 = *(char **)(*(void *)a4 + 392);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            long long v28 = *a1;
            *(_OWORD *)long long v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            long long v29 = *(long long *)((char *)a2 + 27);
            long long v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(long long *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            __n128 result = *(__n128 *)&v47[11];
            *(long long *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    uint64_t v10 = *((void *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        double v12 = *(char **)(*(void *)a4 + 384);
        uint64_t v11 = v12;
      }
      else
      {
        uint64_t v11 = *(char **)(*(void *)a4 + 384);
        while (*(void *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            uint64_t v11 = *(char **)(*(void *)a4 + 392);
            break;
          }
        }
        double v12 = *(char **)(*(void *)a4 + 384);
        while (*(void *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            double v12 = *(char **)(*(void *)a4 + 392);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        long long v31 = a1[1];
        long long v32 = *a1;
        *(void *)long long v49 = *((void *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        long long v33 = *(long long *)((char *)a3 + 27);
        long long v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(long long *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        __n128 result = *(__n128 *)&v49[3];
        *(long long *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    long long v35 = *a1;
    *(_OWORD *)long long v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    long long v36 = *(long long *)((char *)a2 + 27);
    long long v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(long long *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    __n128 result = *(__n128 *)&v48[11];
    *(long long *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    uint64_t v38 = *((void *)a3 + 3);
    uint64_t v39 = *((void *)a2 + 3);
    if (v38 != v39)
    {
      double v40 = *(char **)(*(void *)a4 + 384);
      double v41 = *(char **)(*(void *)a4 + 392);
      double v42 = v40;
      uint64_t v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(void *)v43 == v38) {
            goto LABEL_50;
          }
          v43 += 8;
        }
        while (v43 != v41);
        uint64_t v43 = *(char **)(*(void *)a4 + 392);
LABEL_50:
        while (*(void *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            double v42 = *(char **)(*(void *)a4 + 392);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        long long v31 = a2[1];
        long long v32 = *a2;
        *(void *)long long v49 = *((void *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        long long v44 = *(long long *)((char *)a3 + 27);
        long long v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(long long *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 - 24);
      uint64_t v9 = *(void *)(a1 + 24);
      if (v8 == v9) {
        return result;
      }
      uint64_t v10 = *(char **)(*(void *)a3 + 384);
      uint64_t v11 = *(char **)(*(void *)a3 + 392);
      double v12 = v10;
      uint64_t v13 = v10;
      if (v10 == v11) {
        goto LABEL_10;
      }
      do
      {
        if (*(void *)v13 == v8) {
          goto LABEL_7;
        }
        v13 += 8;
      }
      while (v13 != v11);
      uint64_t v13 = *(char **)(*(void *)a3 + 392);
      do
      {
LABEL_7:
        if (*(void *)v12 == v9) {
          goto LABEL_10;
        }
        v12 += 8;
      }
      while (v12 != v11);
      double v12 = *(char **)(*(void *)a3 + 392);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        uint64_t v14 = (long long *)(a2 - 48);
        long long v15 = *(_OWORD *)a1;
        *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        long long v16 = *(_OWORD *)(a2 - 21);
        long long v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *uint64_t v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(long long *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), a3);
      uint64_t v19 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      int v20 = 0;
      break;
  }
  while (1)
  {
    uint64_t v21 = *(void *)(v19 + 24);
    uint64_t v22 = *(void *)(v18 + 24);
    if (v21 != v22)
    {
      uint64_t v23 = *(char **)(*(void *)a3 + 384);
      uint64_t v24 = *(char **)(*(void *)a3 + 392);
      uint64_t v25 = v23;
      double v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(void *)v26 == v21) {
            goto LABEL_19;
          }
          v26 += 8;
        }
        while (v26 != v24);
        double v26 = *(char **)(*(void *)a3 + 392);
LABEL_19:
        while (*(void *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            uint64_t v25 = *(char **)(*(void *)a3 + 392);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        long long v34 = *(_OWORD *)v19;
        uint64_t v36 = *(void *)(v19 + 16);
        long long v37 = *(_OWORD *)(v19 + 32);
        uint64_t v27 = v19;
        while (1)
        {
          long long v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1) {
            break;
          }
          uint64_t v27 = v18;
          uint64_t v29 = *(void *)(v18 - 24);
          if (v21 != v29)
          {
            long long v30 = *(char **)(*(void *)a3 + 384);
            long long v31 = *(char **)(*(void *)a3 + 392);
            long long v32 = v30;
            long long v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(void *)v33 == v21) {
                  goto LABEL_30;
                }
                v33 += 8;
              }
              while (v33 != v31);
              long long v33 = *(char **)(*(void *)a3 + 392);
LABEL_30:
              while (*(void *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  long long v32 = *(char **)(*(void *)a3 + 392);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30) {
              continue;
            }
          }
          goto LABEL_36;
        }
        uint64_t v27 = a1;
LABEL_36:
        *(_OWORD *)uint64_t v27 = v34;
        *(void *)(v27 + 16) = v36;
        *(void *)(v27 + 24) = v21;
        *(void *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8) {
          return v19 + 48 == a2;
        }
      }
    }
    uint64_t v18 = v19;
    v19 += 48;
    if (v19 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)a2, (long long *)a3, a5).n128_u64[0];
  uint64_t v11 = *(void *)(a4 + 24);
  uint64_t v12 = *(void *)(a3 + 24);
  if (v11 != v12)
  {
    uint64_t v13 = *(char **)(*(void *)a5 + 384);
    uint64_t v14 = *(char **)(*(void *)a5 + 392);
    long long v15 = v13;
    long long v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(void *)v16 == v11) {
          goto LABEL_6;
        }
        v16 += 8;
      }
      while (v16 != v14);
      long long v16 = *(char **)(*(void *)a5 + 392);
LABEL_6:
      while (*(void *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          long long v15 = *(char **)(*(void *)a5 + 392);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      long long v17 = *(_OWORD *)a3;
      *(_OWORD *)uint64_t v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      long long v18 = *(_OWORD *)(a4 + 27);
      long long v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v38;
      __n128 result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      uint64_t v20 = *(void *)(a3 + 24);
      uint64_t v21 = *(void *)(a2 + 24);
      if (v20 != v21)
      {
        uint64_t v22 = *(char **)(*(void *)a5 + 384);
        uint64_t v23 = *(char **)(*(void *)a5 + 392);
        uint64_t v24 = v22;
        uint64_t v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(void *)v25 == v20) {
              goto LABEL_15;
            }
            v25 += 8;
          }
          while (v25 != v23);
          uint64_t v25 = *(char **)(*(void *)a5 + 392);
LABEL_15:
          while (*(void *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              uint64_t v24 = *(char **)(*(void *)a5 + 392);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          long long v26 = *(_OWORD *)a2;
          *(_OWORD *)uint64_t v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          long long v27 = *(_OWORD *)(a3 + 27);
          long long v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 16) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)v39;
          __n128 result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          uint64_t v29 = *(void *)(a2 + 24);
          uint64_t v30 = *(void *)(a1 + 24);
          if (v29 != v30)
          {
            long long v31 = *(char **)(*(void *)a5 + 384);
            long long v32 = *(char **)(*(void *)a5 + 392);
            long long v33 = v31;
            long long v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(void *)v34 == v29) {
                  goto LABEL_24;
                }
                v34 += 8;
              }
              while (v34 != v32);
              long long v34 = *(char **)(*(void *)a5 + 392);
LABEL_24:
              while (*(void *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  long long v33 = *(char **)(*(void *)a5 + 392);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              long long v35 = *(_OWORD *)a1;
              *(_OWORD *)double v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              long long v36 = *(_OWORD *)(a2 + 27);
              long long v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 16) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 16) = *(_OWORD *)v40;
              __n128 result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  uint64_t v13 = *(void *)(a5 + 24);
  uint64_t v14 = *(void *)(a4 + 24);
  if (v13 != v14)
  {
    long long v15 = *(char **)(*(void *)a6 + 384);
    long long v16 = *(char **)(*(void *)a6 + 392);
    long long v17 = v15;
    long long v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(void *)v18 == v13) {
          goto LABEL_6;
        }
        v18 += 8;
      }
      while (v18 != v16);
      long long v18 = *(char **)(*(void *)a6 + 392);
LABEL_6:
      while (*(void *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          long long v17 = *(char **)(*(void *)a6 + 392);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      long long v19 = *(_OWORD *)a4;
      *(_OWORD *)long long v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      long long v20 = *(_OWORD *)(a5 + 27);
      long long v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 16) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v49;
      __n128 result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      uint64_t v22 = *(void *)(a4 + 24);
      uint64_t v23 = *(void *)(a3 + 24);
      if (v22 != v23)
      {
        uint64_t v24 = *(char **)(*(void *)a6 + 384);
        uint64_t v25 = *(char **)(*(void *)a6 + 392);
        long long v26 = v24;
        long long v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(void *)v27 == v22) {
              goto LABEL_15;
            }
            v27 += 8;
          }
          while (v27 != v25);
          long long v27 = *(char **)(*(void *)a6 + 392);
LABEL_15:
          while (*(void *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              long long v26 = *(char **)(*(void *)a6 + 392);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          long long v28 = *(_OWORD *)a3;
          *(_OWORD *)long long v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          long long v29 = *(_OWORD *)(a4 + 27);
          long long v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 16) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 16) = *(_OWORD *)v50;
          __n128 result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          uint64_t v31 = *(void *)(a3 + 24);
          uint64_t v32 = *(void *)(a2 + 24);
          if (v31 != v32)
          {
            long long v33 = *(char **)(*(void *)a6 + 384);
            long long v34 = *(char **)(*(void *)a6 + 392);
            long long v35 = v33;
            long long v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(void *)v36 == v31) {
                  goto LABEL_24;
                }
                v36 += 8;
              }
              while (v36 != v34);
              long long v36 = *(char **)(*(void *)a6 + 392);
LABEL_24:
              while (*(void *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  long long v35 = *(char **)(*(void *)a6 + 392);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              long long v37 = *(_OWORD *)a2;
              *(_OWORD *)long long v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              long long v38 = *(_OWORD *)(a3 + 27);
              long long v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 16) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 16) = *(_OWORD *)v51;
              __n128 result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              uint64_t v40 = *(void *)(a2 + 24);
              uint64_t v41 = *(void *)(a1 + 24);
              if (v40 != v41)
              {
                double v42 = *(char **)(*(void *)a6 + 384);
                uint64_t v43 = *(char **)(*(void *)a6 + 392);
                long long v44 = v42;
                long long v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(void *)v45 == v40) {
                      goto LABEL_33;
                    }
                    v45 += 8;
                  }
                  while (v45 != v43);
                  long long v45 = *(char **)(*(void *)a6 + 392);
LABEL_33:
                  while (*(void *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      long long v44 = *(char **)(*(void *)a6 + 392);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  long long v46 = *(_OWORD *)a1;
                  *(_OWORD *)uint64_t v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  long long v47 = *(_OWORD *)(a2 + 27);
                  long long v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 16) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 16) = *(_OWORD *)v52;
                  __n128 result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v10) >> 4);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*((double *)a2 - 5) < *(double *)(v10 + 8))
                {
                  *(_OWORD *)long long v118 = *(_OWORD *)(v10 + 16);
                  *(_OWORD *)&v118[16] = *(_OWORD *)(v10 + 32);
                  long long v110 = *(_OWORD *)v10;
                  long long v52 = *(a2 - 3);
                  long long v53 = *(a2 - 2);
                  *(_OWORD *)(v10 + 27) = *(long long *)((char *)a2 - 21);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(long long *)((char *)a2 - 21) = *(_OWORD *)&v118[11];
                  *(a2 - 3) = v110;
                  *(a2 - 2) = *(_OWORD *)v118;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)v10, (long long *)(v10 + 48), a2 - 3);
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v10, v10 + 48, v10 + 96, (uint64_t)(a2 - 3));
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v10, v10 + 48, v10 + 96, v10 + 144, (uint64_t)(a2 - 3));
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 1151)
          {
            BOOL v54 = (long long *)(v10 + 48);
            BOOL v56 = (long long *)v10 == a2 || v54 == a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  long long v59 = v54;
                  double v60 = *(double *)(v58 + 56);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *(void *)v54;
                    *(_OWORD *)long long v111 = *(_OWORD *)(v58 + 64);
                    *(_OWORD *)&v111[16] = *(_OWORD *)(v58 + 80);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      double v63 = (_OWORD *)(v10 + v62);
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      v63[3] = *(_OWORD *)(v10 + v62);
                      v63[4] = v64;
                      *(_OWORD *)((char *)v63 + 75) = *(_OWORD *)(v10 + v62 + 27);
                      if (!v62) {
                        break;
                      }
                      v62 -= 48;
                      if (v60 >= *((double *)v63 - 5))
                      {
                        uint64_t v65 = v10 + v62 + 48;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = *(_OWORD *)v111;
                    *(_OWORD *)(v65 + 27) = *(_OWORD *)&v111[11];
                  }
                  BOOL v54 = v59 + 3;
                  v57 += 48;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 3 != a2);
              }
            }
            else if (!v56)
            {
              do
              {
                uint64_t v98 = v54;
                double v99 = *(double *)(a1 + 56);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *(void *)v54;
                  *(_OWORD *)unint64_t v114 = *(_OWORD *)(a1 + 64);
                  *(_OWORD *)&v114[16] = *(_OWORD *)(a1 + 80);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(v101 - 2);
                    long long *v101 = *(v101 - 3);
                    v101[1] = v102;
                    *(long long *)((char *)v101 + 27) = *(long long *)((char *)v101 - 21);
                    double v103 = *((double *)v101 - 11);
                    v101 -= 3;
                  }
                  while (v99 < v103);
                  *(void *)long long v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *(long long *)((char *)v101 + 27) = *(_OWORD *)&v114[11];
                  v101[1] = *(_OWORD *)v114;
                }
                v54 += 3;
                a1 = (unint64_t)v98;
              }
              while (v98 + 3 != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((long long *)v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 48 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v70 + 8) < *(double *)(v70 + 56))
                  {
                    v70 += 48;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  unint64_t v71 = v10 + 48 * v68;
                  double v72 = *(double *)(v71 + 8);
                  if (*(double *)(v70 + 8) >= v72)
                  {
                    uint64_t v73 = *(void *)v71;
                    *(_OWORD *)__int16 v112 = *(_OWORD *)(v71 + 16);
                    *(_OWORD *)&v112[16] = *(_OWORD *)(v71 + 32);
                    do
                    {
                      uint64_t v74 = (_OWORD *)v71;
                      unint64_t v71 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_OWORD *)((char *)v74 + 27) = *(_OWORD *)(v70 + 27);
                      *uint64_t v74 = v75;
                      v74[1] = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = 2 * v69;
                      uint64_t v69 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 48 * v69;
                      uint64_t v78 = v77 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v70 + 8) < *(double *)(v70 + 56))
                      {
                        v70 += 48;
                        uint64_t v69 = v78;
                      }
                    }
                    while (*(double *)(v70 + 8) >= v72);
                    *(void *)unint64_t v71 = v73;
                    *(double *)(v71 + 8) = v72;
                    *(_OWORD *)(v71 + 16) = *(_OWORD *)v112;
                    *(_OWORD *)(v71 + 27) = *(_OWORD *)&v112[11];
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x30uLL;
              do
              {
                uint64_t v80 = 0;
                *(_OWORD *)long long v119 = *(_OWORD *)(v10 + 16);
                *(_OWORD *)&v119[16] = *(_OWORD *)(v10 + 32);
                long long v113 = *(_OWORD *)v10;
                unint64_t v81 = v10;
                do
                {
                  long long v82 = (_OWORD *)v81;
                  v81 += 48 * v80 + 48;
                  uint64_t v83 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v84 = v83 + 2;
                  if (v84 < v79 && *(double *)(v81 + 8) < *(double *)(v81 + 56))
                  {
                    v81 += 48;
                    uint64_t v80 = v84;
                  }
                  long long v85 = *(_OWORD *)v81;
                  long long v86 = *(_OWORD *)(v81 + 16);
                  *(_OWORD *)((char *)v82 + 27) = *(_OWORD *)(v81 + 27);
                  *long long v82 = v85;
                  v82[1] = v86;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 3;
                if ((long long *)v81 == a2)
                {
                  *(_OWORD *)(v81 + 27) = *(_OWORD *)&v119[11];
                  *(_OWORD *)unint64_t v81 = v113;
                  *(_OWORD *)(v81 + 16) = *(_OWORD *)v119;
                }
                else
                {
                  long long v87 = *a2;
                  long long v88 = a2[1];
                  *(_OWORD *)(v81 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v81 = v87;
                  *(_OWORD *)(v81 + 16) = v88;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v119[11];
                  *a2 = v113;
                  a2[1] = *(_OWORD *)v119;
                  uint64_t v89 = v81 - v10 + 48;
                  if (v89 >= 49)
                  {
                    unint64_t v90 = (v89 / 0x30uLL - 2) >> 1;
                    unint64_t v91 = v10 + 48 * v90;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      *(_OWORD *)uint64_t v106 = *(_OWORD *)(v81 + 16);
                      *(_OWORD *)&v106[16] = *(_OWORD *)(v81 + 32);
                      do
                      {
                        int v94 = (_OWORD *)v81;
                        unint64_t v81 = v91;
                        long long v95 = *(_OWORD *)v91;
                        long long v96 = *(_OWORD *)(v91 + 16);
                        *(_OWORD *)((char *)v94 + 27) = *(_OWORD *)(v91 + 27);
                        *int v94 = v95;
                        v94[1] = v96;
                        if (!v90) {
                          break;
                        }
                        unint64_t v90 = (v90 - 1) >> 1;
                        unint64_t v91 = v10 + 48 * v90;
                      }
                      while (*(double *)(v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_OWORD *)(v81 + 16) = *(_OWORD *)v106;
                      *(_OWORD *)(v81 + 27) = *(_OWORD *)&v106[11];
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (long long *)(v10 + 48 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v12 >> 1)), a2 - 3);
            uint64_t v15 = 3 * v13;
            long long v16 = (long long *)(a1 + 48 * v13 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48), v16, a2 - 6);
            long long v17 = (long long *)(a1 + 48 + 16 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 96), v17, a2 - 9);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v16, v14, v17);
            *(_OWORD *)unint64_t v115 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v115[16] = *(_OWORD *)(a1 + 32);
            long long v107 = *(_OWORD *)a1;
            long long v18 = *(long long *)((char *)v14 + 27);
            long long v19 = v14[1];
            *(_OWORD *)a1 = *v14;
            *(_OWORD *)(a1 + 16) = v19;
            *(_OWORD *)(a1 + 27) = v18;
            *(long long *)((char *)v14 + 27) = *(_OWORD *)&v115[11];
            *uint64_t v14 = v107;
            v14[1] = *(_OWORD *)v115;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48 * (v12 >> 1)), (long long *)a1, a2 - 3);
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 40) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          *(_OWORD *)int v105 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)&v105[16] = *(_OWORD *)(a1 + 32);
          if (v20 >= *((double *)a2 - 5))
          {
            unint64_t v41 = a1 + 48;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= (unint64_t)a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 48;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 48;
              double v40 = *(double *)(v39 + 56);
              v39 += 48;
            }
            while (v20 >= v40);
          }
          uint64_t v43 = a2;
          if (v10 < (unint64_t)a2)
          {
            long long v44 = a2;
            do
            {
              uint64_t v43 = v44 - 3;
              double v45 = *((double *)v44 - 5);
              v44 -= 3;
            }
            while (v20 < v45);
          }
          while (v10 < (unint64_t)v43)
          {
            *(_OWORD *)uint64_t v117 = *(_OWORD *)(v10 + 16);
            *(_OWORD *)&v117[16] = *(_OWORD *)(v10 + 32);
            long long v109 = *(_OWORD *)v10;
            long long v46 = *v43;
            long long v47 = v43[1];
            *(_OWORD *)(v10 + 27) = *(long long *)((char *)v43 + 27);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(long long *)((char *)v43 + 27) = *(_OWORD *)&v117[11];
            *uint64_t v43 = v109;
            v43[1] = *(_OWORD *)v117;
            do
            {
              double v48 = *(double *)(v10 + 56);
              v10 += 48;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *((double *)v43 - 5);
              v43 -= 3;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 48 >= a1;
          BOOL v5 = v10 - 48 == a1;
          if (v10 - 48 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 48);
            long long v51 = *(_OWORD *)(v10 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v10 - 21);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 48) = v38;
          *(double *)(v10 - 40) = v20;
          *(_OWORD *)(v10 - 21) = *(_OWORD *)&v105[11];
          *(_OWORD *)(v10 - 32) = *(_OWORD *)v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        *(_OWORD *)uint64_t v104 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v104[16] = *(_OWORD *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 56);
          v21 += 48;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        uint64_t v25 = a2;
        if (v21 == 48)
        {
          long long v28 = a2;
          while (v24 < (unint64_t)v28)
          {
            long long v26 = v28 - 3;
            double v29 = *((double *)v28 - 5);
            v28 -= 3;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          long long v26 = v28;
        }
        else
        {
          do
          {
            long long v26 = v25 - 3;
            double v27 = *((double *)v25 - 5);
            v25 -= 3;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < (unint64_t)v26)
        {
          long long v30 = v26;
          do
          {
            *(_OWORD *)uint64_t v116 = *(_OWORD *)(v10 + 16);
            *(_OWORD *)&v116[16] = *(_OWORD *)(v10 + 32);
            long long v108 = *(_OWORD *)v10;
            long long v31 = *v30;
            long long v32 = v30[1];
            *(_OWORD *)(v10 + 27) = *(long long *)((char *)v30 + 27);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(long long *)((char *)v30 + 27) = *(_OWORD *)&v116[11];
            *long long v30 = v108;
            v30[1] = *(_OWORD *)v116;
            do
            {
              double v33 = *(double *)(v10 + 56);
              v10 += 48;
            }
            while (v33 < v20);
            do
            {
              double v34 = *((double *)v30 - 5);
              v30 -= 3;
            }
            while (v34 >= v20);
          }
          while (v10 < (unint64_t)v30);
        }
        if (v10 - 48 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 48);
          long long v36 = *(_OWORD *)(v10 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v10 - 21);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 48) = v22;
        *(double *)(v10 - 40) = v20;
        *(_OWORD *)(v10 - 21) = *(_OWORD *)&v104[11];
        *(_OWORD *)(v10 - 32) = *(_OWORD *)v104;
        if (v24 >= (unint64_t)v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(a1, v10 - 48, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, v10 - 48);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v10, (uint64_t)a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = (long long *)(v10 - 48);
    if (!v37) {
      continue;
    }
    break;
  }
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(long long *a1, long long *a2, long long *a3)
{
  result.n128_u64[0] = *((void *)a2 + 1);
  double v4 = *((double *)a3 + 1);
  if (result.n128_f64[0] >= *((double *)a1 + 1))
  {
    if (v4 < result.n128_f64[0])
    {
      long long v9 = *a2;
      *(_OWORD *)double v20 = a2[1];
      *(_OWORD *)&v20[16] = a2[2];
      long long v10 = *(long long *)((char *)a3 + 27);
      long long v11 = a3[1];
      *a2 = *a3;
      a2[1] = v11;
      *(long long *)((char *)a2 + 27) = v10;
      *a3 = v9;
      a3[1] = *(_OWORD *)v20;
      result.n128_u64[1] = *(void *)&v20[19];
      *(long long *)((char *)a3 + 27) = *(_OWORD *)&v20[11];
      result.n128_u64[0] = *((void *)a2 + 1);
      if (result.n128_f64[0] < *((double *)a1 + 1))
      {
        long long v12 = *a1;
        *(_OWORD *)uint64_t v21 = a1[1];
        *(_OWORD *)&unsigned char v21[16] = a1[2];
        long long v13 = *(long long *)((char *)a2 + 27);
        long long v14 = a2[1];
        *a1 = *a2;
        a1[1] = v14;
        *(long long *)((char *)a1 + 27) = v13;
        *a2 = v12;
        a2[1] = *(_OWORD *)v21;
        __n128 result = *(__n128 *)&v21[11];
        *(long long *)((char *)a2 + 27) = *(_OWORD *)&v21[11];
      }
    }
  }
  else
  {
    if (v4 >= result.n128_f64[0])
    {
      long long v15 = *a1;
      *(_OWORD *)uint64_t v22 = a1[1];
      *(_OWORD *)&unsigned char v22[16] = a1[2];
      long long v16 = *(long long *)((char *)a2 + 27);
      long long v17 = a2[1];
      *a1 = *a2;
      a1[1] = v17;
      *(long long *)((char *)a1 + 27) = v16;
      *a2 = v15;
      a2[1] = *(_OWORD *)v22;
      result.n128_u64[1] = *(void *)&v22[19];
      *(long long *)((char *)a2 + 27) = *(_OWORD *)&v22[11];
      result.n128_u64[0] = *((void *)a3 + 1);
      if (result.n128_f64[0] >= *((double *)a2 + 1)) {
        return result;
      }
      long long v5 = a2[1];
      long long v6 = *a2;
      *(void *)double v23 = *((void *)&v5 + 1);
      *(_OWORD *)&v23[8] = a2[2];
      long long v18 = *(long long *)((char *)a3 + 27);
      long long v19 = a3[1];
      *a2 = *a3;
      a2[1] = v19;
      *(long long *)((char *)a2 + 27) = v18;
    }
    else
    {
      long long v5 = a1[1];
      long long v6 = *a1;
      *(void *)double v23 = *((void *)&v5 + 1);
      *(_OWORD *)&v23[8] = a1[2];
      long long v7 = *(long long *)((char *)a3 + 27);
      long long v8 = a3[1];
      *a1 = *a3;
      a1[1] = v8;
      *(long long *)((char *)a1 + 27) = v7;
    }
    *a3 = v6;
    a3[1] = v5;
    __n128 result = *(__n128 *)&v23[3];
    *(long long *)((char *)a3 + 27) = *(_OWORD *)&v23[3];
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 40) < *(double *)(a1 + 8))
      {
        long long v6 = *(_OWORD *)a1;
        *(_OWORD *)double v20 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v20[16] = *(_OWORD *)(a1 + 32);
        long long v7 = *(_OWORD *)(a2 - 21);
        long long v8 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 27) = v7;
        *(_OWORD *)(a2 - 48) = v6;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v20;
        *(_OWORD *)(a2 - 21) = *(_OWORD *)&v20[11];
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48);
      return 1;
    default:
      uint64_t v9 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96));
      uint64_t v10 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    double v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      uint64_t v14 = *(void *)v10;
      *(_OWORD *)long long v19 = *(_OWORD *)(v10 + 16);
      *(_OWORD *)&v19[16] = *(_OWORD *)(v10 + 32);
      uint64_t v15 = v11;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        long long v17 = *(_OWORD *)(a1 + v15 + 112);
        *(_OWORD *)(v16 + 144) = *(_OWORD *)(a1 + v15 + 96);
        *(_OWORD *)(v16 + 160) = v17;
        *(_OWORD *)(v16 + 171) = *(_OWORD *)(a1 + v15 + 123);
        if (v15 == -96) {
          break;
        }
        v15 -= 48;
        if (v13 >= *(double *)(v16 + 56))
        {
          uint64_t v18 = a1 + v15 + 144;
          goto LABEL_12;
        }
      }
      uint64_t v18 = a1;
LABEL_12:
      *(void *)uint64_t v18 = v14;
      *(double *)(v18 + 8) = v13;
      *(_OWORD *)(v18 + 16) = *(_OWORD *)v19;
      *(_OWORD *)(v18 + 27) = *(_OWORD *)&v19[11];
      if (++v12 == 8) {
        return v10 + 48 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 48;
    v10 += 48;
    if (v10 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)a2, (long long *)a3);
  result.n128_u64[0] = *(void *)(a4 + 8);
  if (result.n128_f64[0] < *(double *)(a3 + 8))
  {
    long long v9 = *(_OWORD *)a3;
    *(_OWORD *)uint64_t v18 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)&v18[16] = *(_OWORD *)(a3 + 32);
    long long v10 = *(_OWORD *)(a4 + 27);
    long long v11 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v11;
    *(_OWORD *)(a3 + 27) = v10;
    *(_OWORD *)a4 = v9;
    *(_OWORD *)(a4 + 16) = *(_OWORD *)v18;
    result.n128_u64[1] = *(void *)&v18[19];
    *(_OWORD *)(a4 + 27) = *(_OWORD *)&v18[11];
    result.n128_u64[0] = *(void *)(a3 + 8);
    if (result.n128_f64[0] < *(double *)(a2 + 8))
    {
      long long v12 = *(_OWORD *)a2;
      *(_OWORD *)long long v19 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)&v19[16] = *(_OWORD *)(a2 + 32);
      long long v13 = *(_OWORD *)(a3 + 27);
      long long v14 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v14;
      *(_OWORD *)(a2 + 27) = v13;
      *(_OWORD *)a3 = v12;
      *(_OWORD *)(a3 + 16) = *(_OWORD *)v19;
      result.n128_u64[1] = *(void *)&v19[19];
      *(_OWORD *)(a3 + 27) = *(_OWORD *)&v19[11];
      result.n128_u64[0] = *(void *)(a2 + 8);
      if (result.n128_f64[0] < *(double *)(a1 + 8))
      {
        long long v15 = *(_OWORD *)a1;
        *(_OWORD *)double v20 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v20[16] = *(_OWORD *)(a1 + 32);
        long long v16 = *(_OWORD *)(a2 + 27);
        long long v17 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *(_OWORD *)a2 = v15;
        *(_OWORD *)(a2 + 16) = *(_OWORD *)v20;
        __n128 result = *(__n128 *)&v20[11];
        *(_OWORD *)(a2 + 27) = *(_OWORD *)&v20[11];
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a2, a3, a4);
  result.n128_u64[0] = *(void *)(a5 + 8);
  if (result.n128_f64[0] < *(double *)(a4 + 8))
  {
    long long v11 = *(_OWORD *)a4;
    *(_OWORD *)double v23 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)&v23[16] = *(_OWORD *)(a4 + 32);
    long long v12 = *(_OWORD *)(a5 + 27);
    long long v13 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v13;
    *(_OWORD *)(a4 + 27) = v12;
    *(_OWORD *)a5 = v11;
    *(_OWORD *)(a5 + 16) = *(_OWORD *)v23;
    result.n128_u64[1] = *(void *)&v23[19];
    *(_OWORD *)(a5 + 27) = *(_OWORD *)&v23[11];
    result.n128_u64[0] = *(void *)(a4 + 8);
    if (result.n128_f64[0] < *(double *)(a3 + 8))
    {
      long long v14 = *(_OWORD *)a3;
      *(_OWORD *)unint64_t v24 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v24[16] = *(_OWORD *)(a3 + 32);
      long long v15 = *(_OWORD *)(a4 + 27);
      long long v16 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v16;
      *(_OWORD *)(a3 + 27) = v15;
      *(_OWORD *)a4 = v14;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v24;
      result.n128_u64[1] = *(void *)&v24[19];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v24[11];
      result.n128_u64[0] = *(void *)(a3 + 8);
      if (result.n128_f64[0] < *(double *)(a2 + 8))
      {
        long long v17 = *(_OWORD *)a2;
        *(_OWORD *)uint64_t v25 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
        long long v18 = *(_OWORD *)(a3 + 27);
        long long v19 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v19;
        *(_OWORD *)(a2 + 27) = v18;
        *(_OWORD *)a3 = v17;
        *(_OWORD *)(a3 + 16) = *(_OWORD *)v25;
        result.n128_u64[1] = *(void *)&v25[19];
        *(_OWORD *)(a3 + 27) = *(_OWORD *)&v25[11];
        result.n128_u64[0] = *(void *)(a2 + 8);
        if (result.n128_f64[0] < *(double *)(a1 + 8))
        {
          long long v20 = *(_OWORD *)a1;
          *(_OWORD *)long long v26 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)&v26[16] = *(_OWORD *)(a1 + 32);
          long long v21 = *(_OWORD *)(a2 + 27);
          long long v22 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v22;
          *(_OWORD *)(a1 + 27) = v21;
          *(_OWORD *)a2 = v20;
          *(_OWORD *)(a2 + 16) = *(_OWORD *)v26;
          __n128 result = *(__n128 *)&v26[11];
          *(_OWORD *)(a2 + 27) = *(_OWORD *)&v26[11];
        }
      }
    }
  }
  return result;
}

__n128 HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::overallStatistics(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 120;
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 160);
  uint64_t v4 = *(void *)(a2 + 240);
  double v3 = *(const void **)(a2 + 248);
  *(void *)(a1 + 120) = v4;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  uint64_t v5 = a1 + 128;
  uint64_t v6 = *(void *)(v2 + 136);
  *(void *)(a1 + 144) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 128), v3, v6, (v6 - (uint64_t)v3) >> 4);
  *(void *)(v5 + 24) = *(void *)(v2 + 152);
  __n128 result = *(__n128 *)(v2 + 160);
  long long v8 = *(_OWORD *)(v2 + 176);
  *(__n128 *)(v5 + 32) = result;
  *(_OWORD *)(v5 + 48) = v8;
  *(void *)(v5 + 64) = *(void *)(v2 + 192);
  return result;
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  double v3 = *(void **)(a2 + 320);
  long long v50 = (void *)(a2 + 328);
  if (v3 == (void *)(a2 + 328)) {
    return;
  }
  long long v52 = (void *)(a1 + 16);
  do
  {
    uint64_t v5 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a2, v3[4]);
    uint64_t v6 = v5;
    if (!v5) {
      goto LABEL_81;
    }
    unint64_t v7 = [v5 hash];
    unint64_t v8 = v7;
    unint64_t v9 = *(void *)(a1 + 8);
    if (!v9) {
      goto LABEL_21;
    }
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v53 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v2 = v7;
      if (v7 >= v9) {
        unint64_t v2 = v7 % v9;
      }
    }
    else
    {
      unint64_t v2 = (v9 - 1) & v7;
    }
    long long v11 = *(uint64_t ***)(*(void *)a1 + 8 * v2);
    if (!v11 || (long long v12 = *v11) == 0)
    {
LABEL_21:
      long long v19 = (char *)operator new(0xE0uLL);
      v54[0] = v19;
      v54[1] = v52;
      *(void *)long long v19 = 0;
      *((void *)v19 + 1) = v8;
      *((void *)v19 + 2) = v6;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      *(_OWORD *)(v19 + 104) = 0u;
      *(_OWORD *)(v19 + 120) = 0u;
      *(_OWORD *)(v19 + 136) = 0u;
      *(_OWORD *)(v19 + 24) = 0u;
      *(_OWORD *)(v19 + 152) = 0u;
      *(_OWORD *)(v19 + 168) = 0u;
      *(_OWORD *)(v19 + 184) = 0u;
      *(_OWORD *)(v19 + 200) = 0u;
      *((void *)v19 + 27) = 0;
      *((void *)v19 + 5) = 0xFFEFFFFFFFFFFFFFLL;
      *((_OWORD *)v19 + 3) = 0u;
      *((_OWORD *)v19 + 4) = 0u;
      *((_OWORD *)v19 + 5) = 0u;
      *((_OWORD *)v19 + 6) = 0u;
      *((_OWORD *)v19 + 7) = 0u;
      *(_OWORD *)(v19 + 122) = 0u;
      *(_OWORD *)(v19 + 202) = 0u;
      *((_OWORD *)v19 + 11) = 0u;
      *((_OWORD *)v19 + 12) = 0u;
      *((_OWORD *)v19 + 9) = 0u;
      *((_OWORD *)v19 + 10) = 0u;
      char v55 = 1;
      float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v21 = *(float *)(a1 + 32);
      if (v9 && (float)(v21 * (float)v9) >= v20)
      {
LABEL_68:
        BOOL v37 = *(void **)(*(void *)a1 + 8 * v2);
        long long v12 = (uint64_t *)v54[0];
        if (v37)
        {
          *(void *)v54[0] = *v37;
        }
        else
        {
          *(void *)v54[0] = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = v12;
          *(void *)(*(void *)a1 + 8 * v2) = v52;
          if (!*v12)
          {
LABEL_77:
            v54[0] = 0;
            ++*(void *)(a1 + 24);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v54);
            goto LABEL_78;
          }
          unint64_t v38 = *(void *)(*v12 + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v38 >= v9) {
              v38 %= v9;
            }
          }
          else
          {
            v38 &= v9 - 1;
          }
          BOOL v37 = (void *)(*(void *)a1 + 8 * v38);
        }
        void *v37 = v12;
        goto LABEL_77;
      }
      BOOL v22 = v9 < 3 || (v9 & (v9 - 1)) != 0;
      unint64_t v23 = v22 | (2 * v9);
      unint64_t v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      else {
        int8x8_t prime = (int8x8_t)v23;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v9 = *(void *)(a1 + 8);
      if (*(void *)&prime > v9) {
        goto LABEL_34;
      }
      if (*(void *)&prime < v9)
      {
        unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          unint64_t v32 = std::__next_prime(v32);
        }
        else
        {
          uint64_t v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2) {
            unint64_t v32 = v34;
          }
        }
        if (*(void *)&prime <= v32) {
          int8x8_t prime = (int8x8_t)v32;
        }
        if (*(void *)&prime >= v9)
        {
          unint64_t v9 = *(void *)(a1 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_34:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            long long v26 = operator new(8 * *(void *)&prime);
            double v27 = *(void **)a1;
            *(void *)a1 = v26;
            if (v27) {
              operator delete(v27);
            }
            uint64_t v28 = 0;
            *(int8x8_t *)(a1 + 8) = prime;
            do
              *(void *)(*(void *)a1 + 8 * v28++) = 0;
            while (*(void *)&prime != v28);
            double v29 = (void *)*v52;
            if (*v52)
            {
              unint64_t v30 = v29[1];
              uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(void *)&prime) {
                  v30 %= *(void *)&prime;
                }
              }
              else
              {
                v30 &= *(void *)&prime - 1;
              }
              *(void *)(*(void *)a1 + 8 * v30) = v52;
              long long v35 = (void *)*v29;
              if (*v29)
              {
                do
                {
                  unint64_t v36 = v35[1];
                  if (v31.u32[0] > 1uLL)
                  {
                    if (v36 >= *(void *)&prime) {
                      v36 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v36 &= *(void *)&prime - 1;
                  }
                  if (v36 != v30)
                  {
                    if (!*(void *)(*(void *)a1 + 8 * v36))
                    {
                      *(void *)(*(void *)a1 + 8 * v36) = v29;
                      goto LABEL_59;
                    }
                    void *v29 = *v35;
                    void *v35 = **(void **)(*(void *)a1 + 8 * v36);
                    **(void **)(*(void *)a1 + 8 * v36) = v35;
                    long long v35 = v29;
                  }
                  unint64_t v36 = v30;
LABEL_59:
                  double v29 = v35;
                  long long v35 = (void *)*v35;
                  unint64_t v30 = v36;
                }
                while (v35);
              }
            }
            unint64_t v9 = (unint64_t)prime;
            goto LABEL_63;
          }
          double v49 = *(void **)a1;
          *(void *)a1 = 0;
          if (v49) {
            operator delete(v49);
          }
          unint64_t v9 = 0;
          *(void *)(a1 + 8) = 0;
        }
      }
LABEL_63:
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v8 >= v9) {
          unint64_t v2 = v8 % v9;
        }
        else {
          unint64_t v2 = v8;
        }
      }
      else
      {
        unint64_t v2 = (v9 - 1) & v8;
      }
      goto LABEL_68;
    }
    while (1)
    {
      unint64_t v13 = v12[1];
      if (v13 == v8) {
        break;
      }
      if (v53 > 1)
      {
        if (v13 >= v9) {
          v13 %= v9;
        }
      }
      else
      {
        v13 &= v9 - 1;
      }
      if (v13 != v2) {
        goto LABEL_21;
      }
LABEL_20:
      long long v12 = (uint64_t *)*v12;
      if (!v12) {
        goto LABEL_21;
      }
    }
    id v14 = (id)v12[2];
    long long v15 = v6;
    id v16 = v6;
    long long v17 = v16;
    if (v14 != v16)
    {
      char v18 = [v14 isEqualToString:v16];

      uint64_t v6 = v15;
      if (v18) {
        goto LABEL_78;
      }
      goto LABEL_20;
    }

    uint64_t v6 = v15;
LABEL_78:
    *((_DWORD *)v12 + 6) = *((_DWORD *)v3 + 10);
    long long v39 = *((_OWORD *)v3 + 3);
    long long v40 = *((_OWORD *)v3 + 5);
    *((_OWORD *)v12 + 3) = *((_OWORD *)v3 + 4);
    *((_OWORD *)v12 + 4) = v40;
    *((_OWORD *)v12 + 2) = v39;
    long long v41 = *((_OWORD *)v3 + 6);
    long long v42 = *((_OWORD *)v3 + 7);
    long long v43 = *((_OWORD *)v3 + 9);
    *((_OWORD *)v12 + 7) = *((_OWORD *)v3 + 8);
    *((_OWORD *)v12 + 8) = v43;
    *((_OWORD *)v12 + 5) = v41;
    *((_OWORD *)v12 + 6) = v42;
    v12[18] = v3[20];
    if (v12 + 2 != v3 + 4) {
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)v12 + 152, (char *)v3[21], v3[22], (uint64_t)(v3[22] - v3[21]) >> 4);
    }
    v12[22] = v3[24];
    long long v44 = *(_OWORD *)(v3 + 25);
    long long v45 = *(_OWORD *)(v3 + 27);
    *((_WORD *)v12 + 108) = *((_WORD *)v3 + 116);
    *(_OWORD *)(v12 + 25) = v45;
    *(_OWORD *)(v12 + 23) = v44;

LABEL_81:
    long long v46 = (void *)v3[1];
    if (v46)
    {
      do
      {
        long long v47 = v46;
        long long v46 = (void *)*v46;
      }
      while (v46);
    }
    else
    {
      do
      {
        long long v47 = (void *)v3[2];
        BOOL v48 = *v47 == (void)v3;
        double v3 = v47;
      }
      while (!v48);
    }
    double v3 = v47;
  }
  while (v47 != v50);
}

void sub_1BD07A424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);

  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::~__hash_table(v6);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  unint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,0>(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(void *)(a1 + 144) = v2;
    operator delete(v2);
  }
  double v3 = *(void **)a1;
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      double v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1722E70;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1722E70;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C187B8A0);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0x28uLL);
  *unint64_t v2 = &unk_1F1722E70;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BD07A700(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1722E70;
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48))(v1) + 112;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1722F00;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1722F00;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C187B8A0);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0x28uLL);
  *unint64_t v2 = &unk_1F1722F00;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BD07A998(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1722F00;
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  unint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__func()
{
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_1F1722F90;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1722F90;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 680))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a4, 3, @"Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date");
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
  }
  double v8 = *(double *)(a2 + 8);
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9)
  {
    if (*(unsigned char *)(a1 + 680))
    {
      double v10 = -1.79769313e308;
    }
    else
    {
      double v10 = *(double *)(a1 + 176);
      double v12 = *(double *)(a1 + 120);
      if (v10 <= v12) {
        double v10 = -1.79769313e308;
      }
      if (v10 < v12) {
        double v10 = *(double *)(a1 + 120);
      }
    }
  }
  else
  {
    double v10 = *(double *)(a1 + 176);
    if (v10 <= *(double *)(a1 + 120)) {
      double v10 = -1.79769313e308;
    }
  }
  if (v10 <= v8)
  {
    if (v9 && a3) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_advanceToTime(a1, v8);
    }
    HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    unint64_t v13 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
    uint64_t v11 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v13, a4);
  }
  return v11;
}

void sub_1BD07ADE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_advanceToTime(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 128) <= a2)
  {
    uint64_t v4 = a1 + 112;
    uint64_t v5 = (double *)(a1 + 120);
    do
    {
      uint64_t v6 = *(void *)(a1 + 656);
      uint64_t v7 = *(void *)(a1 + 648);
      if (v6 == v7)
      {
        uint64_t v22 = 0;
        long long v15 = *(void **)(a1 + 40);
        id v16 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a2];
        double v8 = [v15 dateIntervalContainingDate:v16 index:&v22];

        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v17 = v22;
        double v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v19 = v18;
        float v20 = [v8 endDate];
        [v20 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::resetToBucket(v4, v17, v19, v21);
      }
      else
      {
        double v8 = [*(id *)(a1 + 40) dateIntervalAtIndex:*(void *)(a1 + 112) + 1];
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v5);
        double v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v12 = v11;
        unint64_t v13 = [v8 endDate];
        [v13 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::advanceBucket(v4, v12, v14);
      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_didChangeBucket(a1, v9);
      if (v6 != v7) {
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
      }
    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1BD07AFF0(_Unwind_Exception *exception_object)
{
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  char v3 = *(unsigned char *)(a2 + 32);
  if (!v3) {
    return;
  }
  uint64_t v5 = a1 + 8;
  double v6 = *(double *)(a2 + 8);
  if (v6 < *(double *)(a1 + 8)) {
    return;
  }
  uint64_t v7 = *(uint64_t **)a2;
  double v8 = *(double *)(a2 + 16);
  unint64_t v9 = *(void *)(a2 + 24);
  char v10 = *(unsigned char *)(a2 + 33);
  double v11 = *(double *)(a1 + 16);
  if (*(_DWORD *)(a1 + 36)) {
    BOOL v12 = v6 < v11;
  }
  else {
    BOOL v12 = v6 <= v11;
  }
  if (v12)
  {
    if (v8 <= v11) {
      double v14 = *(double *)(a2 + 16);
    }
    else {
      double v14 = *(double *)(a1 + 16);
    }
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 352, *(void *)(a2 + 24), v9);
    long long v15 = *(char **)(a1 + 112);
    if (v15 == *(char **)(a1 + 104) && *(uint64_t *)(a1 + 200) <= 0)
    {
      double v33 = *(double *)(a1 + 8);
      double v34 = *(double *)(a1 + 16);
      if (v6 >= v33) {
        double v33 = v6;
      }
      if (v34 >= v14) {
        double v34 = v14;
      }
      *(double *)(a1 + 48) = v33;
      *(double *)(a1 + 56) = v34;
      if (!a3) {
        goto LABEL_47;
      }
    }
    else
    {
      if (v6 < *(double *)(a1 + 48))
      {
        double v16 = *(double *)(a1 + 8);
        if (v6 >= v16) {
          double v16 = v6;
        }
        *(double *)(a1 + 48) = v16;
      }
      if (v14 > *(double *)(a1 + 56))
      {
        double v17 = *(double *)(a1 + 16);
        if (v17 >= v14) {
          double v17 = v14;
        }
        *(double *)(a1 + 56) = v17;
      }
      if (!a3) {
        goto LABEL_47;
      }
    }
    if (v6 < *(double *)(a1 + 16))
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeThroughTime(v5, v6);
      long long v15 = *(char **)(a1 + 112);
    }
LABEL_47:
    unint64_t v35 = *(void *)(a1 + 120);
    if ((unint64_t)v15 >= v35)
    {
      unint64_t v37 = 0x555555555555555;
      unint64_t v38 = *(char **)(a1 + 104);
      unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v38) >> 4);
      unint64_t v40 = v39 + 1;
      if (v39 + 1 > 0x555555555555555) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (void)v38) >> 4);
      if (2 * v41 > v40) {
        unint64_t v40 = 2 * v41;
      }
      if (v41 < 0x2AAAAAAAAAAAAAALL) {
        unint64_t v37 = v40;
      }
      if (v37)
      {
        unint64_t v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v37);
        unint64_t v38 = *(char **)(a1 + 104);
        long long v15 = *(char **)(a1 + 112);
      }
      else
      {
        uint64_t v42 = 0;
      }
      unint64_t v43 = v37 + 48 * v39;
      *(void *)unint64_t v43 = v7;
      *(double *)(v43 + 8) = v6;
      *(double *)(v43 + 16) = v14;
      *(void *)(v43 + 24) = v9;
      unint64_t v44 = v37 + 48 * v42;
      *(unsigned char *)(v43 + 32) = v3;
      *(unsigned char *)(v43 + 33) = v10;
      *(_WORD *)(v43 + 40) = 0;
      *(unsigned char *)(v43 + 42) = 0;
      unint64_t v36 = (void *)(v43 + 48);
      if (v15 != v38)
      {
        do
        {
          long long v45 = *((_OWORD *)v15 - 3);
          long long v46 = *((_OWORD *)v15 - 2);
          *(_OWORD *)(v43 - 21) = *(_OWORD *)(v15 - 21);
          *(_OWORD *)(v43 - 48) = v45;
          *(_OWORD *)(v43 - 32) = v46;
          v43 -= 48;
          v15 -= 48;
        }
        while (v15 != v38);
        unint64_t v38 = *(char **)(a1 + 104);
      }
      *(void *)(a1 + 104) = v43;
      *(void *)(a1 + 112) = v36;
      *(void *)(a1 + 120) = v44;
      if (v38) {
        operator delete(v38);
      }
    }
    else
    {
      *(void *)long long v15 = v7;
      *((double *)v15 + 1) = v6;
      *((double *)v15 + 2) = v14;
      *((void *)v15 + 3) = v9;
      v15[32] = v3;
      v15[33] = v10;
      *((_WORD *)v15 + 20) = 0;
      unint64_t v36 = v15 + 48;
      v15[42] = 0;
    }
    *(void *)(a1 + 112) = v36;
    if (!*(unsigned char *)(a1 + 320) || *(double *)(a1 + 296) <= v6)
    {
      *(void *)(a1 + 288) = v7;
      *(double *)(a1 + 296) = v6;
      *(double *)(a1 + 304) = v8;
      *(void *)(a1 + 312) = v9;
      *(unsigned char *)(a1 + 320) = v3;
      *(unsigned char *)(a1 + 321) = v10;
      if (!*(unsigned char *)(a1 + 240) || *(double *)(a1 + 216) <= v6)
      {
        *(void *)(a1 + 208) = v7;
        *(double *)(a1 + 216) = v6;
        *(double *)(a1 + 224) = v8;
        *(void *)(a1 + 232) = v9;
        *(unsigned char *)(a1 + 240) = v3;
        *(unsigned char *)(a1 + 241) = v10;
      }
    }
    if (*(unsigned char *)(a1 + 33))
    {
      unint64_t v47 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(v5, v9);
      BOOL v48 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsForSource(v5, v47);
      if (!*((unsigned char *)v48 + 192) || *((double *)v48 + 21) <= v6)
      {
        v48[20] = v7;
        *((double *)v48 + 21) = v6;
        *((double *)v48 + 22) = v8;
        v48[23] = (uint64_t *)v9;
        *((unsigned char *)v48 + 192) = v3;
        *((unsigned char *)v48 + 193) = v10;
        if (!*((unsigned char *)v48 + 112) || *((double *)v48 + 11) <= v6)
        {
          v48[10] = v7;
          *((double *)v48 + 11) = v6;
          *((double *)v48 + 12) = v8;
          v48[13] = (uint64_t *)v9;
          *((unsigned char *)v48 + 112) = v3;
          *((unsigned char *)v48 + 113) = v10;
        }
      }
    }
    return;
  }
  if (v6 < v11) {
    double v6 = *(double *)(a1 + 16);
  }
  unint64_t v18 = *(void *)(a1 + 544);
  unint64_t v19 = *(void *)(a1 + 552);
  if (v18 >= v19)
  {
    uint64_t v21 = *(void *)(a1 + 536);
    unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v21) >> 3);
    unint64_t v23 = v22 + 1;
    if (v22 + 1 > 0x666666666666666) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v21) >> 3);
    if (2 * v24 > v23) {
      unint64_t v23 = 2 * v24;
    }
    if (v24 >= 0x333333333333333) {
      unint64_t v25 = 0x666666666666666;
    }
    else {
      unint64_t v25 = v23;
    }
    if (v25) {
      unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v25);
    }
    else {
      uint64_t v26 = 0;
    }
    unint64_t v27 = v25 + 40 * v22;
    unint64_t v28 = v25 + 40 * v26;
    *(void *)unint64_t v27 = v7;
    *(double *)(v27 + 8) = v6;
    *(double *)(v27 + 16) = v8;
    *(void *)(v27 + 24) = v9;
    *(unsigned char *)(v27 + 32) = v3;
    *(unsigned char *)(v27 + 33) = v10;
    unint64_t v20 = v27 + 40;
    double v29 = *(char **)(a1 + 544);
    unint64_t v30 = *(char **)(a1 + 536);
    if (v29 != v30)
    {
      do
      {
        long long v31 = *(_OWORD *)(v29 - 40);
        long long v32 = *(_OWORD *)(v29 - 24);
        *(_WORD *)(v27 - 8) = *((_WORD *)v29 - 4);
        *(_OWORD *)(v27 - 24) = v32;
        *(_OWORD *)(v27 - 40) = v31;
        v27 -= 40;
        v29 -= 40;
      }
      while (v29 != v30);
      double v29 = *(char **)(a1 + 536);
    }
    *(void *)(a1 + 536) = v27;
    *(void *)(a1 + 544) = v20;
    *(void *)(a1 + 552) = v28;
    if (v29) {
      operator delete(v29);
    }
  }
  else
  {
    *(void *)unint64_t v18 = v7;
    *(double *)(v18 + 8) = v6;
    *(double *)(v18 + 16) = v8;
    *(void *)(v18 + 24) = v9;
    *(unsigned char *)(v18 + 32) = v3;
    unint64_t v20 = v18 + 40;
    *(unsigned char *)(v18 + 33) = v10;
  }
  *(void *)(a1 + 544) = v20;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 682))
  {
    *(unsigned char *)(a1 + 684) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 684) = 0;
    unint64_t v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      uint64_t v4 = v2;
      char v3 = (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      if (v3) {
        v4[2](v4, v3);
      }

      unint64_t v2 = v4;
    }
  }
}

void sub_1BD07B534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  unint64_t v9 = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 536), *(void *)(a1 + 544), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 544) - *(void *)(a1 + 536)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::resetToBucket(a1, *(void *)a1 + 1, a2, a3);
  double v6 = v9;
  uint64_t v7 = v10;
  if (v9 != v10)
  {
    uint64_t v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BD07B634(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8 = a1 + 40;
  objc_storeStrong((id *)(a1 + 560), *(id *)(a1 + 40));
  *(double *)(v8 - 32) = a3;
  *(double *)(v8 - 24) = a4;
  *(double *)(v8 + 24) = a3;
  *(void *)(v8 + 72) = *(void *)(v8 + 64);
  *(_DWORD *)(v8 + 88) = 0;
  long long v9 = 0uLL;
  *(_OWORD *)(v8 + 96) = xmmword_1BD3301F0;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 160) = 0u;
  *(_OWORD *)(v8 + 176) = 0u;
  *(_OWORD *)(v8 + 192) = 0u;
  *(void *)(v8 + 208) = 0;
  char v10 = *(void **)(v8 + 216);
  if (v10)
  {
    *(void *)(a1 + 264) = v10;
    operator delete(v10);
    long long v9 = 0uLL;
  }
  *(_WORD *)(v8 + 280) = 0;
  *(_OWORD *)(v8 + 248) = v9;
  *(_OWORD *)(v8 + 264) = v9;
  *(_OWORD *)(v8 + 216) = v9;
  *(_OWORD *)(v8 + 232) = v9;
  if (*(void *)(a1 + 344))
  {
    uint64_t v11 = *(void **)(a1 + 328);
    uint64_t v12 = *(void *)(a1 + 336);
    *(void *)(a1 + 328) = a1 + 336;
    *(void *)(v12 + 16) = 0;
    *(void *)(a1 + 336) = 0;
    *(void *)(a1 + 344) = 0;
    if (v11[1]) {
      unint64_t v13 = (void *)v11[1];
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      double v14 = (void *)v13[2];
      if (v14)
      {
        long long v15 = (void *)*v14;
        if ((void *)*v14 == v13)
        {
          *double v14 = 0;
          while (1)
          {
            double v17 = (void *)v14[1];
            if (!v17) {
              break;
            }
            do
            {
              double v14 = v17;
              double v17 = (void *)*v17;
            }
            while (v17);
          }
        }
        else
        {
          for (v14[1] = 0; v15; long long v15 = (void *)v14[1])
          {
            do
            {
              double v14 = v15;
              long long v15 = (void *)*v15;
            }
            while (v15);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::destroy(v13);
        for (uint64_t i = (void *)v14[2]; i; uint64_t i = (void *)i[2])
          double v14 = i;
        unint64_t v13 = v14;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::destroy(v13);
  }
  objc_storeStrong((id *)v8, *(id *)(a1 + 560));
  *(void *)(a1 + 544) = *(void *)(a1 + 536);
  *(void *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 684))
  {
    if (v3)
    {
      id v6 = v3;
      uint64_t v4 = _Block_copy(*(const void **)(a1 + 96));
      uint64_t v5 = v4;
      if (v4) {
        (*((void (**)(void *, id))v4 + 2))(v4, v6);
      }

      id v3 = v6;
    }
    *(unsigned char *)(a1 + 684) = 0;
  }
}

void sub_1BD07B81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_currentBucketInterval(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 680))
  {
    uint64_t v1 = 0;
  }
  else
  {
    uint64_t v1 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", *(double *)(a1 + 120), *(double *)(a1 + 128));
  }

  return v1;
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 startDate];
  id v6 = [v4 startDate];
  uint64_t v7 = [v5 compare:v6];

  return v7;
}

void sub_1BD07B8F0(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 13);
  if (WeakRetained)
  {
    if (v5
      && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_currentBucketInterval((uint64_t)a1),
          (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v8 = [v5 endDate];
      long long v9 = [v7 startDate];
      if (objc_msgSend(v8, "hk_isAfterDate:", v9))
      {
        char v10 = [v5 startDate];
        uint64_t v11 = [v7 endDate];
        char v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);
      }
      else
      {
        char v12 = 0;
      }

      unint64_t v13 = _Block_copy(a1[12]);
      if ((v12 & 1) == 0) {
        operator new();
      }
    }
    else
    {
      unint64_t v13 = _Block_copy(a1[12]);
    }
    *((unsigned char *)a1 + 680) = 1;
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
    v27[3] = &unk_1E6308FF8;
    id v15 = v5;
    id v28 = v15;
    id v16 = v13;
    id v29 = v16;
    (*((void (**)(id *, void *))*a1 + 9))(a1, v27);
    if (v5)
    {
      double v17 = [v15 startDate];
      [v17 timeIntervalSinceReferenceDate];
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_configureForStartTime((uint64_t)a1);
    }
    else
    {
      (*((void (**)(id *))*a1 + 4))(a1);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
    v21[3] = &unk_1E6309060;
    unint64_t v24 = a1;
    id v5 = v15;
    char v26 = 1;
    id v22 = v5;
    unint64_t v25 = a1;
    id v23 = WeakRetained;
    uint64_t v14 = (*((uint64_t (**)(id *, void *, uint64_t))*a1 + 14))(a1, v21, a3);
    unint64_t v18 = _Block_copy(v16);
    id v19 = a1[12];
    a1[12] = v18;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to invalidate interval: no data source available.");
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1BD07BD40(_Unwind_Exception *a1)
{
  MEMORY[0x1C187B8A0](v4, 0x10F1C4016FCC05CLL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_11;
  }
  id v3 = [v10 endDate];
  uint64_t v4 = [*(id *)(a1 + 32) startDate];
  char v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    id v6 = [v10 startDate];
    uint64_t v7 = [*(id *)(a1 + 32) endDate];
    char v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_11:
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9) {
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
      }
    }
  }
}

void sub_1BD07BF24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = [*(id *)(a1 + 32) startDate];
  [v5 timeIntervalSinceReferenceDate];
  uint64_t v7 = v6;

  char v8 = [*(id *)(a1 + 32) endDate];
  [v8 timeIntervalSinceReferenceDate];
  uint64_t v10 = v9;

  uint64_t v11 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  uint64_t v13 = *(void *)(a1 + 32);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  char v32 = *(unsigned char *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  uint64_t v31 = *(void *)(a1 + 56);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  uint64_t v14 = [v11 collectionCalculator:WeakRetained queryForInterval:v13 error:a2 sampleHandler:v30 mergeHandler:v29];

  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15 != v4)
    {
      id v16 = [*(id *)(a1 + 32) endDate];
      [v16 timeIntervalSinceReferenceDate];
      if (*(void *)(v15 + 40))
      {
        double v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          id v19 = [*(id *)(v15 + 40) dateIntervalAtIndex:*(void *)(v15 + 112) + 1];
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          unint64_t v20 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(v15, (double *)(v15 + 120));
          uint64_t v21 = [v19 startDate];
          [v21 timeIntervalSinceReferenceDate];
          double v23 = v22;
          unint64_t v24 = [v19 endDate];
          [v24 timeIntervalSinceReferenceDate];
          HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            char v26 = _Block_copy(*(const void **)(v15 + 96));
            unint64_t v27 = v26;
            if (v26) {
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);
            }
          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_didChangeBucket(v15, 0);
        }
      }
    }
  }
  return v14;
}

void sub_1BD07C1D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7 = *(double *)(a1 + 32);
  if (v7 > a6)
  {
    a2 = 0;
    int v8 = 0;
    a7 = 0.0;
    a5 = 0.0;
    double v9 = 0.0;
  }
  else
  {
    int v8 = 1;
    double v9 = a6;
  }
  double v13 = a5;
  double v14 = v9;
  double v15 = a7;
  uint64_t v16 = a2;
  char v17 = v8;
  char v18 = 0;
  if (*(unsigned char *)(a1 + 56))
  {
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v13, a3, a4);
    }
  }
  else
  {
    BOOL v11 = v7 <= a6;
    double v12 = *(double *)(a1 + 40);
    if (v9 >= v12) {
      BOOL v11 = 0;
    }
    if (!v11 || a7 <= v12) {
      double v12 = a7;
    }
    double v14 = v9;
    double v15 = v12;
    char v17 = v11;
    if (v11) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v13, a3, a4);
    }
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 680)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
  }
  if (*(void *)(a1 + 40)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_advanceToTime(a1, a2);
  }
  if (*(double *)(a1 + 128) > a2)
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeThroughTime(a1 + 120, a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 32) < *(double *)(v10 + 8))
                {
                  uint64_t v129 = *(void *)(v10 + 32);
                  long long v113 = *(_OWORD *)v10;
                  long long v121 = *(_OWORD *)(v10 + 16);
                  long long v52 = *(_OWORD *)(a2 - 40);
                  long long v53 = *(_OWORD *)(a2 - 24);
                  *(_WORD *)(v10 + 32) = *(_WORD *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(_WORD *)(a2 - 8) = v129;
                  *(_OWORD *)(a2 - 24) = v121;
                  *(_OWORD *)(a2 - 40) = v113;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v10, (double *)(v10 + 40), (double *)(a2 - 40));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, v10 + 120, a2 - 40);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            BOOL v54 = (void *)(v10 + 40);
            BOOL v56 = v10 == a2 || v54 == (void *)a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  long long v59 = v54;
                  double v60 = *(double *)(v58 + 48);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *v54;
                    long long v114 = *(_OWORD *)(v58 + 56);
                    uint64_t v122 = *(void *)(v58 + 72);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      uint64_t v63 = v10 + v62;
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      *(_OWORD *)(v63 + 40) = *(_OWORD *)(v10 + v62);
                      *(_OWORD *)(v63 + 56) = v64;
                      *(_WORD *)(v63 + 72) = *(_WORD *)(v10 + v62 + 32);
                      if (!v62) {
                        break;
                      }
                      v62 -= 40;
                      if (v60 >= *(double *)(v63 - 32))
                      {
                        uint64_t v65 = v10 + v62 + 40;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = v114;
                    *(_WORD *)(v65 + 32) = v122;
                  }
                  BOOL v54 = v59 + 5;
                  v57 += 40;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 5 != (void *)a2);
              }
            }
            else if (!v56)
            {
              do
              {
                uint64_t v98 = v54;
                double v99 = *(double *)(a1 + 48);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *v54;
                  long long v117 = *(_OWORD *)(a1 + 56);
                  uint64_t v125 = *(void *)(a1 + 72);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(_OWORD *)(v101 - 3);
                    *(_OWORD *)long long v101 = *(_OWORD *)(v101 - 5);
                    *((_OWORD *)v101 + 1) = v102;
                    *((_WORD *)v101 + 16) = *((_WORD *)v101 - 4);
                    double v103 = *((double *)v101 - 9);
                    v101 -= 5;
                  }
                  while (v99 < v103);
                  void *v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *((_WORD *)v101 + 16) = v125;
                  *((_OWORD *)v101 + 1) = v117;
                }
                v54 += 5;
                a1 = (unint64_t)v98;
              }
              while (v98 + 5 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 40 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v10 + 40 * v69 + 8) < *(double *)(v70 + 48))
                  {
                    v70 += 40;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  double v71 = *(double *)(v10 + 40 * v68 + 8);
                  if (*(double *)(v70 + 8) >= v71)
                  {
                    unint64_t v72 = v10 + 40 * v68;
                    uint64_t v73 = *(void *)v72;
                    uint64_t v123 = *(void *)(v72 + 32);
                    long long v115 = *(_OWORD *)(v72 + 16);
                    do
                    {
                      unint64_t v74 = v72;
                      unint64_t v72 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_WORD *)(v74 + 32) = *(_WORD *)(v70 + 32);
                      *(_OWORD *)unint64_t v74 = v75;
                      *(_OWORD *)(v74 + 16) = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 40 * v77;
                      uint64_t v78 = 2 * v69 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v10 + 40 * v77 + 8) < *(double *)(v70 + 48))
                      {
                        v70 += 40;
                        uint64_t v77 = v78;
                      }
                      uint64_t v69 = v77;
                    }
                    while (*(double *)(v70 + 8) >= v71);
                    *(void *)unint64_t v72 = v73;
                    *(double *)(v72 + 8) = v71;
                    *(_OWORD *)(v72 + 16) = v115;
                    *(_WORD *)(v72 + 32) = v123;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x28uLL;
              do
              {
                uint64_t v80 = 0;
                uint64_t v130 = *(void *)(v10 + 32);
                long long v116 = *(_OWORD *)v10;
                long long v124 = *(_OWORD *)(v10 + 16);
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = v81;
                  uint64_t v83 = v80 + 1;
                  v81 += 40 * (v80 + 1);
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v85 = v84 + 2;
                  if (v85 < v79 && *(double *)(v82 + 40 * v83 + 8) < *(double *)(v81 + 48))
                  {
                    v81 += 40;
                    uint64_t v80 = v85;
                  }
                  long long v86 = *(_OWORD *)v81;
                  long long v87 = *(_OWORD *)(v81 + 16);
                  *(_WORD *)(v82 + 32) = *(_WORD *)(v81 + 32);
                  *(_OWORD *)unint64_t v82 = v86;
                  *(_OWORD *)(v82 + 16) = v87;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 40;
                if (v81 == a2)
                {
                  *(_WORD *)(v81 + 32) = v130;
                  *(_OWORD *)unint64_t v81 = v116;
                  *(_OWORD *)(v81 + 16) = v124;
                }
                else
                {
                  long long v88 = *(_OWORD *)a2;
                  long long v89 = *(_OWORD *)(a2 + 16);
                  *(_WORD *)(v81 + 32) = *(_WORD *)(a2 + 32);
                  *(_OWORD *)unint64_t v81 = v88;
                  *(_OWORD *)(v81 + 16) = v89;
                  *(_WORD *)(a2 + 32) = v130;
                  *(_OWORD *)a2 = v116;
                  *(_OWORD *)(a2 + 16) = v124;
                  uint64_t v90 = v81 - v10 + 40;
                  if (v90 >= 41)
                  {
                    unint64_t v91 = (v90 / 0x28uLL - 2) >> 1;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v10 + 40 * v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      uint64_t v109 = *(void *)(v81 + 32);
                      long long v106 = *(_OWORD *)(v81 + 16);
                      do
                      {
                        unint64_t v94 = v81;
                        unint64_t v81 = v10 + 40 * v91;
                        long long v95 = *(_OWORD *)v81;
                        long long v96 = *(_OWORD *)(v81 + 16);
                        *(_WORD *)(v94 + 32) = *(_WORD *)(v81 + 32);
                        *(_OWORD *)unint64_t v94 = v95;
                        *(_OWORD *)(v94 + 16) = v96;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 40 * v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_WORD *)(v81 + 32) = v109;
                      *(_OWORD *)(v81 + 16) = v106;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40 * (v12 >> 1)), (double *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            uint64_t v16 = (double *)(a1 + 40 * v13 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40), v16, (double *)(a2 - 80));
            char v17 = (double *)(a1 + 40 + 8 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 80), v17, (double *)(a2 - 120));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v16, (double *)v14, v17);
            uint64_t v126 = *(void *)(a1 + 32);
            long long v110 = *(_OWORD *)a1;
            long long v118 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 16) = v19;
            *(_WORD *)(v14 + 32) = v126;
            *(_OWORD *)unint64_t v14 = v110;
            *(_OWORD *)(v14 + 16) = v118;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40 * (v12 >> 1)), (double *)a1, (double *)(a2 - 40));
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 32) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          long long v105 = *(_OWORD *)(a1 + 16);
          uint64_t v108 = *(void *)(a1 + 32);
          if (v20 >= *(double *)(a2 - 32))
          {
            unint64_t v41 = a1 + 40;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 40;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 40;
              double v40 = *(double *)(v39 + 48);
              v39 += 40;
            }
            while (v20 >= v40);
          }
          unint64_t v43 = a2;
          if (v10 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              unint64_t v43 = v44 - 40;
              double v45 = *(double *)(v44 - 32);
              v44 -= 40;
            }
            while (v20 < v45);
          }
          while (v10 < v43)
          {
            uint64_t v128 = *(void *)(v10 + 32);
            long long v112 = *(_OWORD *)v10;
            long long v120 = *(_OWORD *)(v10 + 16);
            long long v46 = *(_OWORD *)v43;
            long long v47 = *(_OWORD *)(v43 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v43 + 32);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(_WORD *)(v43 + 32) = v128;
            *(_OWORD *)unint64_t v43 = v112;
            *(_OWORD *)(v43 + 16) = v120;
            do
            {
              double v48 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *(double *)(v43 - 32);
              v43 -= 40;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 40);
            long long v51 = *(_OWORD *)(v10 - 24);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 40) = v38;
          *(double *)(v10 - 32) = v20;
          *(_WORD *)(v10 - 8) = v108;
          *(_OWORD *)(v10 - 24) = v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        long long v104 = *(_OWORD *)(a1 + 16);
        uint64_t v107 = *(void *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 48);
          v21 += 40;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        unint64_t v25 = a2;
        if (v21 == 40)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 40;
            double v29 = *(double *)(v28 - 32);
            v28 -= 40;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 40;
            double v27 = *(double *)(v25 - 32);
            v25 -= 40;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v127 = *(void *)(v10 + 32);
            long long v111 = *(_OWORD *)v10;
            long long v119 = *(_OWORD *)(v10 + 16);
            long long v31 = *(_OWORD *)v30;
            long long v32 = *(_OWORD *)(v30 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v30 + 32);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(_WORD *)(v30 + 32) = v127;
            *(_OWORD *)unint64_t v30 = v111;
            *(_OWORD *)(v30 + 16) = v119;
            do
            {
              double v33 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v33 < v20);
            do
            {
              double v34 = *(double *)(v30 - 32);
              v30 -= 40;
            }
            while (v34 >= v20);
          }
          while (v10 < v30);
        }
        if (v10 - 40 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 40);
          long long v36 = *(_OWORD *)(v10 - 24);
          *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 40) = v22;
        *(double *)(v10 - 32) = v20;
        *(_WORD *)(v10 - 8) = v107;
        *(_OWORD *)(v10 - 24) = v104;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 40;
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        __int16 v9 = *(_WORD *)(a2 - 8);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      uint64_t v16 = *(void *)v12;
      long long v21 = *(_OWORD *)(v12 + 16);
      uint64_t v22 = *(void *)(v12 + 32);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(void *)uint64_t v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(void *a1, uint64_t a2)
{
  id v3 = (void *)a1[5];
  uint64_t v4 = a1[6];
  BOOL v5 = (void *)a1[4];
  uint64_t v6 = [v5 dateInterval];
  void v9[4] = v4;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  uint64_t v7 = [v3 collectionCalculator:v5 queryForInterval:v6 error:a2 sampleHandler:v10 mergeHandler:v9];

  return v7;
}

void sub_1BD07CF2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10 = *(void *)(a1 + 32);
  *(double *)int v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  char v15 = 1;
  uint64_t v11 = [MEMORY[0x1E4F1C9C8] distantFuture];
  [v11 timeIntervalSinceReferenceDate];
  BOOL v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1BD07CFD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
}

void HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::archive(uint64_t a1, int8x16_t *a2)
{
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 112);
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F171B978;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  statistics::Statistics::makePrimaryStatistics(a1);
  HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>::archive((uint64_t)v6, (uint64_t)&a2->i64[1]);
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v6);
  statistics::Statistics::~Statistics((statistics::Statistics *)v6);
  uint64_t v5 = a2->i32[0];
  *(_DWORD *)(a1 + 204) |= 0x100u;
  *(void *)(a1 + 136) = v5;
  statistics::Statistics::makeMostRecentDatum(a1);
  v6[0] = &unk_1F17206F8;
  int v10 = 127;
  int8x16_t v7 = vextq_s8(a2[10], a2[10], 8uLL);
  v6[1] = a2[11].i64[0];
  v6[2] = a2[11].i64[1];
  __int16 v8 = 0;
  char v9 = 0;
  statistics::RawQuantitySample::operator=(*v4, (uint64_t)v6);
  PB::Base::~Base((PB::Base *)v6);
}

void sub_1BD07D100(_Unwind_Exception *a1)
{
  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

void HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>::archive(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F171B978;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (statistics **)(a1 + 8);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = 0;
  statistics::Statistics::makePrimaryStatistics(a1);
  HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::archive((uint64_t)v5, a2);
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v5);
  statistics::Statistics::~Statistics((statistics::Statistics *)v5);
  statistics::Statistics::makeAuxiliaryStatistics(a1);
  HDStatisticsTimeInterval::archive((HDStatisticsTimeInterval *)(a2 + 112), (uint64_t)v5);
  statistics::Statistics::operator=(*v4, (uint64_t)v5);
  statistics::Statistics::~Statistics((statistics::Statistics *)v5);
}

void sub_1BD07D1D8(_Unwind_Exception *a1)
{
  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

void HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::archive(uint64_t a1, uint64_t a2)
{
  *(int8x16_t *)(a1 + 88) = vextq_s8(*(int8x16_t *)(a2 + 40), *(int8x16_t *)(a2 + 40), 8uLL);
  *(void *)(a1 + 104) = *(void *)(a2 + 56);
  *(void *)(a1 + 176) = *(void *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a1 + 56) = *(void *)a2;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v4;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = v5;
  *(void *)(a1 + 112) = 0;
  int8x16_t v7 = (uint64_t *)(a1 + 112);
  *(void *)a1 = &unk_1F171B978;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 48) = v6;
  *(_DWORD *)(a1 + 204) = 6397;
  *(void *)(a1 + 40) = v3;
  statistics::Statistics::makeMostRecentDatum(a1);
  v8[0] = &unk_1F17206F8;
  int v12 = 127;
  int8x16_t v9 = vextq_s8(*(int8x16_t *)(a2 + 72), *(int8x16_t *)(a2 + 72), 8uLL);
  v8[1] = *(void *)(a2 + 88);
  v8[2] = *(void *)(a2 + 96);
  __int16 v10 = 0;
  char v11 = 0;
  statistics::RawQuantitySample::operator=(*v7, (uint64_t)v8);
  PB::Base::~Base((PB::Base *)v8);
}

void sub_1BD07D300(_Unwind_Exception *a1)
{
  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::unarchive(uint64_t a1, void *a2)
{
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_1BD3301F0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 98) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 178) = 0u;
  uint64_t v6 = a2[16];
  if (v6)
  {
    HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>::unarchive((uint64_t)v13, *(HDStatisticsTimeInterval **)(v6 + 8), *(void *)(v6 + 128));
    long long v7 = v13[5];
    v4[4] = v13[4];
    v4[5] = v7;
    v4[6] = v13[6];
    long long v8 = v13[1];
    _OWORD *v4 = v13[0];
    v4[1] = v8;
    long long v9 = v13[3];
    v4[2] = v13[2];
    v4[3] = v9;
    *(void *)(a1 + 120) = v14;
    double result = v17;
    uint64_t v10 = v16;
    *(_OWORD *)(a1 + 128) = v15;
    *(void *)(a1 + 144) = v10;
    *(double *)(a1 + 152) = result;
  }
  *(_DWORD *)a1 = a2[17];
  uint64_t v11 = a2[14];
  if (v11)
  {
    double result = *(double *)(v11 + 8);
    uint64_t v12 = *(void *)(v11 + 16);
    *(int8x16_t *)(a1 + 160) = vextq_s8(*(int8x16_t *)(v11 + 24), *(int8x16_t *)(v11 + 24), 8uLL);
    *(double *)(a1 + 176) = result;
    *(void *)(a1 + 184) = v12;
    *(_WORD *)(a1 + 192) = 1;
  }
  return result;
}

double HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>::unarchive(uint64_t a1, HDStatisticsTimeInterval *this, uint64_t a3)
{
  int8x16_t v4 = 0uLL;
  *(_OWORD *)a1 = xmmword_1BD3301F0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 90) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 144) = 0;
  if (a3)
  {
    uint64_t v5 = *(void *)(a3 + 24);
    int8x16_t v6 = *(int8x16_t *)(a3 + 88);
    uint64_t v7 = *(void *)(a3 + 104);
    uint64_t v8 = *(void *)(a3 + 176);
    uint64_t v9 = *(void *)(a3 + 168);
    uint64_t v10 = *(void *)(a3 + 48);
    uint64_t v11 = *(void *)(a3 + 40);
    uint64_t v12 = *(void *)(a3 + 112);
    if (v12)
    {
      int8x16_t v4 = *(int8x16_t *)(v12 + 24);
      uint64_t v13 = *(void *)(v12 + 8);
      char v14 = 1;
      uint64_t v12 = *(void *)(v12 + 16);
    }
    else
    {
      char v14 = 0;
      uint64_t v13 = 0;
    }
    *(void *)a1 = *(void *)(a3 + 56);
    *(void *)(a1 + 8) = v11;
    *(void *)(a1 + 16) = v10;
    *(void *)(a1 + 24) = v9;
    *(void *)(a1 + 32) = v8;
    *(int8x16_t *)(a1 + 40) = vextq_s8(v6, v6, 8uLL);
    *(void *)(a1 + 56) = v7;
    *(void *)(a1 + 64) = v5;
    int8x16_t v4 = vextq_s8(v4, v4, 8uLL);
    *(int8x16_t *)(a1 + 72) = v4;
    *(void *)(a1 + 88) = v13;
    *(void *)(a1 + 96) = v12;
    *(unsigned char *)(a1 + 104) = v14;
  }
  if (this)
  {
    HDStatisticsTimeInterval::unarchive(this, (uint64_t)&v17);
    *(void *)(a1 + 112) = v17;
    v4.i64[0] = v20;
    uint64_t v15 = v19;
    *(_OWORD *)(a1 + 120) = v18;
    *(void *)(a1 + 136) = v15;
    *(void *)(a1 + 144) = v4.i64[0];
  }
  return *(double *)v4.i64;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6 = a3;
  uint64_t v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = &unk_1F1723040;
  double v9 = 900.0;
  if ((v6 & 0x10) == 0) {
    double v9 = 0.0;
  }
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(void *)(v8 + 104) = 0;
  *(void *)(v8 + 112) = 0;
  *(void *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_WORD *)(a1 + 632) = 1;
  *(unsigned char *)(a1 + 634) = 0;
  *(unsigned char *)(a1 + 636) = 0;
  *(void *)(a1 + 640) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(void *)(a1 + 680) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);

  JUMPOUT(0x1C187B8A0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1F1723040;
  unint64_t v2 = *(void **)(a1 + 664);
  if (v2)
  {
    *(void *)(a1 + 672) = v2;
    operator delete(v2);
  }

  uint64_t v3 = *(void **)(a1 + 600);
  if (v3)
  {
    *(void *)(a1 + 608) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  int8x16_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(unsigned char *)(result + 632) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::setDateInterval(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 copy];
  int8x16_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;

  uint64_t v5 = [v6 startDate];
  [v5 timeIntervalSinceReferenceDate];
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
}

void sub_1BD07D6B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::configureMergeAnchor(double *a1, void *a2)
{
  id v3 = a2;
  if (!*((void *)a1 + 5))
  {
    id v5 = v3;
    [v3 timeIntervalSinceReferenceDate];
    *((void *)a1 + 80) = v4;
    id v3 = v5;
    if (a1[31] == -1.79769313e308) {
      *((void *)a1 + 31) = v4;
    }
  }
}

void sub_1BD07D73C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::setStatisticsConfiguration(id *a1, void *a2)
{
  objc_storeStrong(a1 + 81, a2);
  id v7 = a2;
  id v4 = a1[81];
  id v5 = a1[78];
  a1[78] = v4;
  id v6 = v4;

  objc_storeStrong(a1 + 19, a1[78]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (*(void *)(a1 + 40)) {
    return 1;
  }
  BOOL v7 = *(void *)(a1 + 224) == *(void *)(a1 + 216) && *(uint64_t *)(a1 + 304) < 1
    || HKIntervalMask<double>::firstDifference(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)a2, *(void *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (v7) {
    return 1;
  }
  double v9 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128);

  return v9(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 copy];
  id v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v3;
}

void sub_1BD07D924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::dataSource(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));

  return WeakRetained;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::currentStatistics(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 632))
  {
    uint64_t v1 = 0;
  }
  else
  {
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_updateSourceOrder((uint64_t)v4);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeThroughTime((uint64_t)v4, v4[1]);
    uint64_t v1 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v4);
  }

  return v1;
}

void sub_1BD07D9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(a1 + 64);
  BOOL v7 = v6;
  if (!v6) {
    goto LABEL_4;
  }
  uint64_t v8 = [v6 startDate];
  [v8 timeIntervalSinceReferenceDate];
  if (v9 > *(double *)(a2 + 16))
  {

    goto LABEL_10;
  }
  uint64_t v10 = [v7 endDate];
  [v10 timeIntervalSinceReferenceDate];
  double v12 = v11;
  double v13 = *(double *)(a2 + 8);

  if (v12 >= v13)
  {
LABEL_4:
    if (!*(unsigned char *)(a1 + 634)) {
      goto LABEL_21;
    }
    if (!*(unsigned char *)(a1 + 633))
    {
      if (*(void *)(a1 + 40))
      {
        if (*(unsigned char *)(a1 + 632))
        {
          double v14 = -1.79769313e308;
        }
        else
        {
          double v16 = *(double *)(a1 + 176);
          double v14 = *(double *)(a1 + 120);
          if (v16 <= v14) {
            double v16 = -1.79769313e308;
          }
          if (v16 >= v14) {
            double v14 = v16;
          }
        }
      }
      else
      {
        double v14 = -1.79769313e308;
        if (*(double *)(a1 + 176) > *(double *)(a1 + 120)) {
          double v14 = *(double *)(a1 + 176);
        }
      }
      if (v14 > *(double *)(a2 + 8))
      {
        uint64_t v17 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
        uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v17, a3);

        goto LABEL_22;
      }
      if (*(unsigned char *)(a1 + 635))
      {
LABEL_21:
        uint64_t v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveAddSample(a1, a2, 1, a3);
        goto LABEL_22;
      }
      unint64_t v19 = *(void *)(a1 + 672);
      unint64_t v20 = *(void *)(a1 + 680);
      if (v19 >= v20)
      {
        uint64_t v24 = *(void *)(a1 + 664);
        unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v24) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - v24) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x333333333333333) {
          unint64_t v28 = 0x666666666666666;
        }
        else {
          unint64_t v28 = v26;
        }
        if (v28) {
          unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v28);
        }
        else {
          uint64_t v29 = 0;
        }
        unint64_t v30 = v28 + 40 * v25;
        unint64_t v31 = v28 + 40 * v29;
        long long v32 = *(_OWORD *)a2;
        long long v33 = *(_OWORD *)(a2 + 16);
        *(void *)(v30 + 32) = *(void *)(a2 + 32);
        *(_OWORD *)unint64_t v30 = v32;
        *(_OWORD *)(v30 + 16) = v33;
        unint64_t v23 = v30 + 40;
        double v34 = *(char **)(a1 + 672);
        long long v35 = *(char **)(a1 + 664);
        if (v34 != v35)
        {
          do
          {
            long long v36 = *(_OWORD *)(v34 - 40);
            long long v37 = *(_OWORD *)(v34 - 24);
            *(_WORD *)(v30 - 8) = *((_WORD *)v34 - 4);
            *(_OWORD *)(v30 - 24) = v37;
            *(_OWORD *)(v30 - 40) = v36;
            v30 -= 40;
            v34 -= 40;
          }
          while (v34 != v35);
          double v34 = *(char **)(a1 + 664);
        }
        *(void *)(a1 + 664) = v30;
        *(void *)(a1 + 672) = v23;
        *(void *)(a1 + 680) = v31;
        if (v34) {
          operator delete(v34);
        }
      }
      else
      {
        long long v21 = *(_OWORD *)a2;
        long long v22 = *(_OWORD *)(a2 + 16);
        *(void *)(v19 + 32) = *(void *)(a2 + 32);
        *(_OWORD *)unint64_t v19 = v21;
        *(_OWORD *)(v19 + 16) = v22;
        unint64_t v23 = v19 + 40;
      }
      *(void *)(a1 + 672) = v23;
    }
  }
LABEL_10:
  uint64_t v15 = 1;
LABEL_22:

  return v15;
}

void sub_1BD07DCB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = v5;
  if (*(unsigned char *)(a1 + 634))
  {
    uint64_t v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 634) = 1;
  uint64_t v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    uint64_t v7 = 0;
    goto LABEL_82;
  }
  uint64_t v65 = v6;
  if (*(unsigned char *)(a1 + 633)) {
    goto LABEL_5;
  }
  double v9 = *(void **)(a1 + 656);
  if (!v9)
  {
    id v68 = 0;
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 40))
  {
LABEL_5:
    int v8 = 0;
    id v68 = 0;
    goto LABEL_29;
  }
  [v9 sortUsingComparator:&__block_literal_global_680];
  id v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v10 = *(id *)(a1 + 656);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  if (!v11)
  {

    id v12 = 0;
    goto LABEL_27;
  }
  id v12 = 0;
  uint64_t v13 = *(void *)v70;
  do
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (*(void *)v70 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(id *)(*((void *)&v69 + 1) + 8 * i);
      double v16 = v15;
      if (v12)
      {
        uint64_t v17 = [v15 startDate];
        long long v18 = [v12 endDate];
        int v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          unint64_t v20 = [v16 endDate];
          long long v21 = [v12 endDate];
          int v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22) {
            goto LABEL_21;
          }
          id v23 = objc_alloc(MEMORY[0x1E4F28C18]);
          uint64_t v24 = [v12 startDate];
          unint64_t v25 = [v16 endDate];
          id v26 = (id)[v23 initWithStartDate:v24 endDate:v25];
        }
        else
        {
          [v68 addObject:v12];
          id v26 = v16;
        }
        id v12 = v26;
      }
      else
      {
        id v12 = v15;
      }
LABEL_21:
    }
    uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  }
  while (v11);

  if (v12) {
    [v68 addObject:v12];
  }
LABEL_27:

LABEL_28:
  int v8 = 1;
LABEL_29:
  unint64_t v27 = *(void **)(a1 + 656);
  *(void *)(a1 + 656) = 0;

  *(unsigned char *)(a1 + 633) = 0;
  if (!v8)
  {
    unint64_t v38 = *(void *)(a1 + 664);
    *(void *)(a1 + 680) = 0;
    *(void *)(a1 + 672) = 0;
    *(void *)(a1 + 664) = 0;
    unint64_t v39 = v38;
    goto LABEL_47;
  }
  unint64_t v28 = [v68 lastObject];
  if (v28)
  {
    uint64_t v29 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_currentBucketInterval(a1);
    unint64_t v30 = [v29 endDate];
    unint64_t v31 = [v28 endDate];
    int v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      long long v33 = [v28 endDate];
      [v33 timeIntervalSinceReferenceDate];
      double v35 = v34;

      uint64_t v36 = *(void *)(a1 + 664);
      long long v37 = *(long long **)(a1 + 672);
      while ((long long *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((long long *)v36 != v37)
          {
            double v40 = (long long *)(v36 + 40);
            if ((long long *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  long long v41 = *v40;
                  long long v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)uint64_t v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                double v40 = (long long *)((char *)v40 + 40);
              }
              while (v40 != v37);
              long long v37 = *(long long **)(a1 + 672);
            }
          }
          if ((long long *)v36 != v37) {
            *(void *)(a1 + 672) = v36;
          }
          break;
        }
        v36 += 40;
      }
    }
  }
  unint64_t v38 = *(void *)(a1 + 664);
  unint64_t v39 = *(void *)(a1 + 672);
  *(void *)(a1 + 680) = 0;
  *(void *)(a1 + 664) = 0;
  *(void *)(a1 + 672) = 0;
  if (![v68 count]) {
    goto LABEL_60;
  }
LABEL_47:
  id v43 = v68;
  long long __p = (void *)v38;
  if (v43)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v44 = v43;
    uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v70;
      while (2)
      {
        for (uint64_t j = 0; j != v45; ++j)
        {
          if (*(void *)v70 != v46) {
            objc_enumerationMutation(v44);
          }
          id v48 = *(id *)(*((void *)&v69 + 1) + 8 * j);
          int v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval((id *)a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
        if (v45) {
          continue;
        }
        break;
      }
    }

LABEL_59:
    unint64_t v38 = (unint64_t)__p;
LABEL_60:
    unint64_t v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v51;
    }
    int v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    long long __p = (void *)v38;
    if (v39 != v38)
    {
      uint64_t v54 = v38;
      uint64_t v50 = v67;
      do
      {
        int v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveAddSample(a1, v54, 1, v50);
        int v53 = v55;
        v54 += 40;
        if (v54 == v39) {
          char v56 = 0;
        }
        else {
          char v56 = v55;
        }
        uint64_t v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval((id *)a1, 0, v67))goto LABEL_59; {
LABEL_70:
    }
    int v53 = 0;
  }
  if (*(void *)(a1 + 40) && *(void *)(a1 + 608) != *(void *)(a1 + 600))
  {
    do
    {
      uint64_t v57 = objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(void *)(a1 + 112) + 1, v50, v65);
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      unint64_t v58 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, a1 + 120);
      long long v59 = [v57 startDate];
      [v59 timeIntervalSinceReferenceDate];
      double v61 = v60;
      uint64_t v62 = [v57 endDate];
      [v62 timeIntervalSinceReferenceDate];
      HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
    }
    while (*(void *)(a1 + 608) != *(void *)(a1 + 600));
  }
  *(unsigned char *)(a1 + 634) = 0;
  if (__p) {
    operator delete(__p);
  }

  if (v53)
  {
    if (*(unsigned char *)(a1 + 636))
    {
      *(unsigned char *)(a1 + 636) = 0;
      id v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
      uint64_t v7 = 1;
      goto LABEL_82;
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v6 = v65;
LABEL_82:
  *(unsigned char *)(a1 + 634) = 0;
LABEL_83:

  return v7;
}

void sub_1BD07E3B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    *(unsigned char *)(v13 + 634) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(unsigned char *)(result + 635) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(unsigned char *)(a1 + 634)) {
      goto LABEL_12;
    }
    uint64_t v7 = 0;
LABEL_14:
    uint64_t v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval((id *)a1, v7, a3);
    goto LABEL_15;
  }
  uint64_t v7 = [v6 dateIntervalForIntervalsContainingInterval:v5];

  if (!*(unsigned char *)(a1 + 634)) {
    goto LABEL_14;
  }
  if (!v7)
  {
LABEL_12:
    id v12 = *(void **)(a1 + 656);
    *(void *)(a1 + 656) = 0;

    uint64_t v7 = 0;
    uint64_t v11 = 1;
    *(unsigned char *)(a1 + 633) = 1;
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 633))
  {
    int v8 = *(void **)(a1 + 656);
    if (!v8)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      id v10 = *(void **)(a1 + 656);
      *(void *)(a1 + 656) = v9;

      int v8 = *(void **)(a1 + 656);
    }
    [v8 addObject:v7];
  }
  uint64_t v11 = 1;
LABEL_15:

  return v11;
}

void sub_1BD07E6B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    *(unsigned char *)(a1 + 632) = 1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v9[3] = &unk_1E63043E8;
    uint64_t v12 = a1;
    id v10 = v5;
    id v11 = WeakRetained;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 112))(a1, v9, a3);
    if (v7 && *(unsigned char *)(a1 + 632) && !*(void *)(a1 + 40)) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to query for initial statistics: no data source available.");
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1BD07E808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::reset(uint64_t result)
{
  *(unsigned char *)(result + 632) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 encodeBool:*(unsigned __int8 *)(a1 + 632) forKey:@"needs_config"];
  id v12 = v3;
  int v32 = &unk_1F1726FA0;
  long long v33 = 0;
  int v38 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
  LOBYTE(v38) = 1;
  uint64_t v34 = v4;
  uint64_t v35 = 0;
  statistics::StatisticsEngine::makeCurrentBucket((uint64_t)&v32);
  uint64_t v13 = &unk_1F171B9C8;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  int v31 = 511;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 0;
  int8x16_t v14 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  uint64_t v5 = *(void *)(a1 + 136);
  char v29 = *(unsigned char *)(a1 + 144);
  char v30 = *(unsigned char *)(a1 + 145);
  BOOL v28 = *(_DWORD *)(a1 + 148) == 0;
  int8x16_t v15 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  uint64_t v7 = *(int8x16_t **)(a1 + 216);
  if (v7 != *(int8x16_t **)(a1 + 224))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v7, *v7, 8uLL);
    int8x16_t v40 = v7[1];
    char v43 = 0;
    HIBYTE(v42) = v7[2].i8[9];
    LOBYTE(v42) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>();
  }
  statistics::StatisticsBucket::makeStatistics((uint64_t)&v13);
  HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>::archive((uint64_t)&v39, a1 + 240);
  statistics::Statistics::operator=(*((statistics **)&v22 + 1), (uint64_t)&v39);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v39);
  uint64_t v8 = *(void *)(a1 + 392);
  if (v8 != a1 + 400)
  {
    HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>::archive((uint64_t)&v39, v8 + 40);
    uint64_t v9 = *(void *)(v8 + 32);
    v46 |= 0x200u;
    uint64_t v45 = v9;
    PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>();
  }
  id v10 = *(int8x16_t **)(a1 + 184);
  if (v10 != *(int8x16_t **)(a1 + 192))
  {
    unint64_t v39 = (char *)&unk_1F1727540;
    v41.i32[0] = 3;
    int8x16_t v40 = vextq_s8(*v10, *v10, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>();
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v13);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v13);
  id v11 = *(int8x16_t **)(a1 + 600);
  if (v11 != *(int8x16_t **)(a1 + 608))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v11, *v11, 8uLL);
    int8x16_t v40 = v11[1];
    __int16 v42 = 0;
    char v43 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>();
  }
  PB::Writer::Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v39);
  [v12 encodeBytes:v40.i64[0] length:&v39[-v40.i64[0]] forKey:@"hdsce_archived_representation"];
  PB::Writer::~Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);
}

void sub_1BD07EC08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v61 = a2;
  *(unsigned char *)(a1 + 632) = [v61 decodeBoolForKey:@"needs_config"];
  id v3 = v61;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v66, 0, -1.79769313e308, 1.79769313e308);
  long long v67 = 0u;
  long long v68 = 0u;
  unint64_t v110 = 0;
  id v64 = v3;
  PB::Reader::Reader((PB::Reader *)v109, (const unsigned __int8 *)[v64 decodeBytesForKey:@"hdsce_archived_representation" returnedLength:&v110]);
  uint64_t v63 = a1;
  long long v102 = &unk_1F1726FA0;
  uint64_t v103 = 0;
  uint64_t v107 = 0;
  uint64_t v105 = 0;
  uint64_t v106 = 0;
  int v108 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v102, (PB::Reader *)v109);
  uint64_t v65 = v104;
  if (v103)
  {
    uint64_t v73 = 0;
    memset(v76, 0, sizeof(v76));
    long long __p = 0u;
    *(_OWORD *)uint64_t v78 = 0u;
    *(void *)&v78[16] = 0xFFEFFFFFFFFFFFFFLL;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v82 = 0u;
    memset(v83, 0, 26);
    memset(&v83[2], 0, 32);
    long long v86 = 0;
    uint64_t v87 = 0;
    uint64_t v84 = 0;
    int64_t v85 = &v86;
    long long v88 = 0u;
    long long v89 = 0u;
    int v90 = 1065353216;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v93 = 0u;
    uint64_t v94 = 0;
    int v95 = 1065353216;
    long long v96 = 0u;
    long long v97 = 0u;
    int v98 = 1065353216;
    long long v99 = 0u;
    long long v100 = 0u;
    int v101 = 1065353216;
    int8x16_t v69 = vextq_s8(*(int8x16_t *)(v103 + 8), *(int8x16_t *)(v103 + 8), 8uLL);
    uint64_t v4 = *(void *)(v103 + 72);
    uint64_t v70 = *(void *)(v103 + 64);
    char v71 = *(unsigned char *)(v103 + 185);
    char v72 = *(unsigned char *)(v103 + 186);
    int8x16_t v74 = vextq_s8(*(int8x16_t *)(v103 + 24), *(int8x16_t *)(v103 + 24), 8uLL);
    uint64_t v75 = v4;
    uint64_t v5 = *(void *)(v103 + 80);
    uint64_t v6 = *(void *)(v103 + 88);
    uint64_t v62 = (void *)v103;
    if (v5 != v6)
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(*(void *)v5 + 24);
        uint64_t v9 = *(void *)(*(void *)v5 + 32);
        uint64_t v10 = *(void *)(*(void *)v5 + 8);
        uint64_t v11 = *(void *)(*(void *)v5 + 16);
        char v12 = *(unsigned char *)(*(void *)v5 + 41);
        char v13 = *(unsigned char *)(*(void *)v5 + 40);
        if ((unint64_t)v7 >= *(void *)v78)
        {
          int8x16_t v14 = (void *)__p;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v7 - __p) >> 4);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(*(void *)v78 - __p) >> 4) > v16) {
            unint64_t v16 = 0x5555555555555556 * ((uint64_t)(*(void *)v78 - __p) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v78 - __p) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v17 = 0x555555555555555;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17)
          {
            unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            uint64_t v7 = (void *)*((void *)&__p + 1);
            int8x16_t v14 = (void *)__p;
          }
          else
          {
            uint64_t v18 = 0;
          }
          unint64_t v19 = v17 + 48 * v15;
          *(void *)unint64_t v19 = v9;
          *(void *)(v19 + 8) = v8;
          *(void *)(v19 + 16) = v10;
          *(void *)(v19 + 24) = v11;
          *(_WORD *)(v19 + 32) = 1;
          *(unsigned char *)(v19 + 40) = 0;
          *(unsigned char *)(v19 + 41) = v12;
          *(unsigned char *)(v19 + 42) = v13;
          unint64_t v20 = v19;
          if (v7 != v14)
          {
            do
            {
              long long v21 = *((_OWORD *)v7 - 3);
              long long v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)((char *)v7 - 21);
              *(_OWORD *)(v20 - 48) = v21;
              *(_OWORD *)(v20 - 32) = v22;
              v20 -= 48;
              v7 -= 6;
            }
            while (v7 != v14);
            int8x16_t v14 = (void *)__p;
          }
          uint64_t v7 = (void *)(v19 + 48);
          *(void *)&long long __p = v20;
          *((void *)&__p + 1) = v19 + 48;
          *(void *)uint64_t v78 = v17 + 48 * v18;
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *uint64_t v7 = v9;
          v7[1] = v8;
          v7[2] = v10;
          v7[3] = v11;
          *((_WORD *)v7 + 16) = 1;
          *((unsigned char *)v7 + 40) = 0;
          *((unsigned char *)v7 + 41) = v12;
          *((unsigned char *)v7 + 42) = v13;
          v7 += 6;
        }
        *((void *)&__p + 1) = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    uint64_t v23 = v62[13];
    if (v23)
    {
      HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>::unarchive((uint64_t)&v111, *(HDStatisticsTimeInterval **)(v23 + 8), *(void *)(v23 + 128));
      long long v82 = v115;
      v83[0] = v116;
      v83[1] = v117;
      *(_OWORD *)&v78[8] = v111;
      long long v79 = v112;
      long long v80 = v113;
      long long v81 = v114;
      *(void *)&v83[2] = v118;
      if (*((void *)&v83[2] + 1))
      {
        *(void *)&v83[3] = *((void *)&v83[2] + 1);
        operator delete(*((void **)&v83[2] + 1));
      }
      *(_OWORD *)((char *)&v83[2] + 8) = v119;
      *((void *)&v83[3] + 1) = v120;
      uint64_t v120 = 0;
      long long v119 = 0uLL;
      uint64_t v84 = v121;
    }
    long long v24 = (uint64_t *)v62[17];
    for (uint64_t i = (uint64_t *)v62[18]; v24 != i; ++v24)
    {
      uint64_t v26 = *v24;
      HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>::unarchive((uint64_t)&v111, *(HDStatisticsTimeInterval **)(*v24 + 8), *(void *)(*v24 + 128));
      uint64_t v27 = *(void *)(v26 + 144);
      BOOL v28 = v86;
      char v29 = &v86;
      char v30 = &v86;
      if (v86)
      {
        do
        {
          while (1)
          {
            char v30 = (uint64_t **)v28;
            uint64_t v31 = v28[4];
            if (v31 <= v27) {
              break;
            }
            BOOL v28 = *v30;
            char v29 = v30;
            if (!*v30) {
              goto LABEL_34;
            }
          }
          if (v31 >= v27)
          {
            long long v33 = (char *)v30;
            goto LABEL_37;
          }
          BOOL v28 = v30[1];
        }
        while (v28);
        char v29 = v30 + 1;
      }
LABEL_34:
      long long v33 = (char *)operator new(0xC0uLL);
      *((void *)v33 + 4) = v27;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 120) = 0u;
      *(_OWORD *)(v33 + 136) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *((void *)v33 + 6) = 0xFFEFFFFFFFFFFFFFLL;
      *(_OWORD *)(v33 + 130) = 0u;
      *(_OWORD *)(v33 + 152) = 0u;
      *(_OWORD *)(v33 + 168) = 0u;
      *((void *)v33 + 23) = 0;
      *(void *)long long v33 = 0;
      *((void *)v33 + 1) = 0;
      *((void *)v33 + 2) = v30;
      void *v29 = (uint64_t *)v33;
      int v32 = (uint64_t *)v33;
      if (*v85)
      {
        int64_t v85 = (uint64_t **)*v85;
        int v32 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v86, v32);
      ++v87;
LABEL_37:
      long long v34 = v117;
      long long v35 = v116;
      long long v36 = v115;
      long long v37 = v113;
      *(_OWORD *)(v33 + 88) = v114;
      *(_OWORD *)(v33 + 104) = v36;
      *(_OWORD *)(v33 + 120) = v35;
      *(_OWORD *)(v33 + 136) = v34;
      long long v38 = v112;
      *(_OWORD *)(v33 + 40) = v111;
      *(_OWORD *)(v33 + 56) = v38;
      *(_OWORD *)(v33 + 72) = v37;
      *((void *)v33 + 19) = v118;
      unint64_t v39 = (void *)*((void *)v33 + 20);
      if (v39)
      {
        *((void *)v33 + 21) = v39;
        operator delete(v39);
        *((void *)v33 + 20) = 0;
        *((void *)v33 + 21) = 0;
        *((void *)v33 + 22) = 0;
      }
      *((_OWORD *)v33 + 10) = v119;
      *((void *)v33 + 22) = v120;
      uint64_t v120 = 0;
      long long v119 = 0uLL;
      *((void *)v33 + 23) = v121;
    }
    uint64_t v40 = v62[5];
    for (uint64_t j = v62[6]; v40 != j; v40 += 8)
    {
      double v43 = *(double *)(*(void *)v40 + 8);
      double v42 = *(double *)(*(void *)v40 + 16);
      if (v43 >= v42) {
        double v44 = *(double *)(*(void *)v40 + 16);
      }
      else {
        double v44 = *(double *)(*(void *)v40 + 8);
      }
      if (v42 < v43) {
        double v42 = *(double *)(*(void *)v40 + 8);
      }
      HKIntervalMask<double>::_insertInterval(v76, v44, v42);
    }
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::operator=((uint64_t)v66, (uint64_t)&v69);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v69);
  }
  uint64_t v45 = v105;
  uint64_t v46 = v106;
  if (v105 != v106)
  {
    unint64_t v47 = *((void *)&v67 + 1);
    do
    {
      uint64_t v48 = *(void *)(*(void *)v45 + 24);
      uint64_t v49 = *(void *)(*(void *)v45 + 32);
      uint64_t v50 = *(void *)(*(void *)v45 + 8);
      uint64_t v51 = *(void *)(*(void *)v45 + 16);
      if (v47 >= (unint64_t)v68)
      {
        uint64_t v52 = (void *)v67;
        unint64_t v53 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v47 - v67) >> 3);
        unint64_t v54 = v53 + 1;
        if (v53 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(v68 - v67) >> 3) > v54) {
          unint64_t v54 = 0x999999999999999ALL * ((uint64_t)(v68 - v67) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v68 - v67) >> 3) >= 0x333333333333333) {
          unint64_t v55 = 0x666666666666666;
        }
        else {
          unint64_t v55 = v54;
        }
        if (v55)
        {
          unint64_t v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v55);
          unint64_t v47 = *((void *)&v67 + 1);
          uint64_t v52 = (void *)v67;
        }
        else
        {
          uint64_t v56 = 0;
        }
        unint64_t v57 = v55 + 40 * v53;
        *(void *)unint64_t v57 = v49;
        *(void *)(v57 + 8) = v48;
        *(void *)(v57 + 16) = v50;
        *(void *)(v57 + 24) = v51;
        *(_WORD *)(v57 + 32) = 1;
        unint64_t v58 = v57;
        if ((void *)v47 != v52)
        {
          do
          {
            long long v59 = *(_OWORD *)(v47 - 40);
            long long v60 = *(_OWORD *)(v47 - 24);
            *(_WORD *)(v58 - 8) = *(_WORD *)(v47 - 8);
            *(_OWORD *)(v58 - 24) = v60;
            *(_OWORD *)(v58 - 40) = v59;
            v58 -= 40;
            v47 -= 40;
          }
          while ((void *)v47 != v52);
          uint64_t v52 = (void *)v67;
        }
        unint64_t v47 = v57 + 40;
        *(void *)&long long v67 = v58;
        *((void *)&v67 + 1) = v57 + 40;
        *(void *)&long long v68 = v55 + 40 * v56;
        if (v52) {
          operator delete(v52);
        }
      }
      else
      {
        *(void *)unint64_t v47 = v49;
        *(void *)(v47 + 8) = v48;
        *(void *)(v47 + 16) = v50;
        *(void *)(v47 + 24) = v51;
        *(_WORD *)(v47 + 32) = 1;
        v47 += 40;
      }
      *((void *)&v67 + 1) = v47;
      v45 += 8;
    }
    while (v45 != v46);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v102);

  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::operator=((void *)(v63 + 112), (uint64_t)&v65);
  if ((void)v67)
  {
    *((void *)&v67 + 1) = v67;
    operator delete((void *)v67);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v66);
}

void sub_1BD07F424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a2);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table((uint64_t)&STACK[0x3D0]);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x3A8]);
  uint64_t v9 = (void *)STACK[0x390];
  if (STACK[0x390])
  {
    STACK[0x398] = (unint64_t)v9;
    operator delete(v9);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a3);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::destroy((void *)STACK[0x358]);
  uint64_t v10 = (void *)STACK[0x330];
  if (STACK[0x330])
  {
    STACK[0x338] = (unint64_t)v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)STACK[0x2A0];
  if (STACK[0x2A0])
  {
    STACK[0x2A8] = (unint64_t)v11;
    operator delete(v11);
  }
  objc_destroyWeak((id *)&STACK[0x298]);
  char v12 = (void *)STACK[0x280];
  if (STACK[0x280])
  {
    STACK[0x288] = (unint64_t)v12;
    operator delete(v12);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x428]);
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 128) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 210) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = a1 + 280;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_DWORD *)(a1 + 328) = 1065353216;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(void *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 1065353216;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_DWORD *)(a1 + 432) = 1065353216;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_DWORD *)(a1 + 472) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 488);
  if (v2)
  {
    *(void *)(a1 + 496) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 440);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 400);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 360);
  unint64_t v2 = *(void **)(a1 + 336);
  if (v2)
  {
    *(void *)(a1 + 344) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 296);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::destroy(*(void **)(a1 + 280));
  id v3 = *(void **)(a1 + 240);
  if (v3)
  {
    *(void *)(a1 + 248) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(void *)(a1 + 104) = v4;
    operator delete(v4);
  }
  objc_destroyWeak((id *)(a1 + 88));
  uint64_t v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(void *)(a1 + 72) = v5;
    operator delete(v5);
  }

  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::destroy(a1[1]);
    unint64_t v2 = (void *)a1[20];
    if (v2)
    {
      a1[21] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_configureForStartTime(uint64_t a1)
{
  uint64_t v30 = 0;
  unint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
    uint64_t v4 = [v2 dateIntervalContainingDate:v3 index:&v30];

    uint64_t v5 = [v4 startDate];
    [v5 timeIntervalSinceReferenceDate];
    double v7 = v6;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
LABEL_5:
    double v13 = v9;

    goto LABEL_6;
  }
  id v10 = *(id *)(a1 + 64);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v11 = [v10 startDate];
    [v11 timeIntervalSinceReferenceDate];
    double v7 = v12;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
    goto LABEL_5;
  }
  double v7 = -1.79769313e308;
  double v13 = 1.79769313e308;
LABEL_6:

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v22, WeakRetained, v7, v13);

  if (*(void *)(a1 + 32) == 1) {
    char v24 = 1;
  }
  uint64_t v23 = *(void *)(a1 + 56);
  char v25 = *(unsigned char *)(a1 + 24) & 1;
  if (v28 != (char *)(a1 + 72)) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v28, *(char **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4);
  }
  objc_storeStrong(&v27, *(id *)(a1 + 648));
  if (!*(void *)(a1 + 40))
  {
    int v26 = 0;
    if (v29 == -1.79769313e308) {
      double v29 = *(double *)(a1 + 640);
    }
  }
  uint64_t v15 = v30;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v22);
  uint64_t v18 = v15;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v19, (uint64_t)v17);
  long long __p = 0u;
  long long v21 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::operator=((void *)(a1 + 112), (uint64_t)&v18);

  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v19);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v17);
  *(unsigned char *)(a1 + 632) = 0;
  return HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v22);
}

void sub_1BD07FA00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::operator=(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::operator=((uint64_t)(a1 + 1), a2 + 8);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 61), (__n128 *)(a2 + 488));
  uint64_t v4 = *(void *)(a2 + 512);
  *(void *)(a2 + 512) = 0;
  uint64_t v5 = (void *)a1[64];
  a1[64] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 96);
  double v7 = *(unsigned char **)(a2 + 104);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(void *)(a1 + 96) = v10;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(void *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  long long v12 = *(_OWORD *)(a2 + 120);
  long long v13 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v13;
  *(_OWORD *)(a1 + 120) = v12;
  long long v14 = *(_OWORD *)(a2 + 168);
  long long v15 = *(_OWORD *)(a2 + 184);
  long long v16 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = v16;
  *(_OWORD *)(a1 + 184) = v15;
  *(_OWORD *)(a1 + 168) = v14;
  uint64_t v17 = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 232) = v17;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 240), *(const void **)(a2 + 240), *(void *)(a2 + 248), (uint64_t)(*(void *)(a2 + 248) - *(void *)(a2 + 240)) >> 4);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  uint64_t v18 = (void *)(a1 + 280);
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 272) = a1 + 280;
  unint64_t v19 = *(void **)(a2 + 272);
  if (v19 != (void *)(a2 + 280))
  {
    unint64_t v20 = 0;
    long long v21 = (void *)(a1 + 280);
    while (1)
    {
      long long v22 = (void *)(a1 + 280);
      if (v21 == v18) {
        goto LABEL_12;
      }
      uint64_t v23 = v20;
      char v24 = (void *)(a1 + 280);
      if (v20)
      {
        do
        {
          long long v22 = v23;
          uint64_t v23 = (void *)v23[1];
        }
        while (v23);
      }
      else
      {
        do
        {
          long long v22 = (void *)v24[2];
          BOOL v25 = *v22 == (void)v24;
          char v24 = v22;
        }
        while (v25);
      }
      uint64_t v26 = v19[4];
      if (v22[4] < v26)
      {
LABEL_12:
        if (v20) {
          id v27 = (uint64_t **)v22;
        }
        else {
          id v27 = (uint64_t **)(a1 + 280);
        }
        if (v20) {
          BOOL v28 = (uint64_t **)(v22 + 1);
        }
        else {
          BOOL v28 = (uint64_t **)(a1 + 280);
        }
        if (!*v28)
        {
LABEL_28:
          uint64_t v31 = (char *)operator new(0xC0uLL);
          *((void *)v31 + 4) = v19[4];
          long long v32 = *(_OWORD *)(v19 + 5);
          long long v33 = *(_OWORD *)(v19 + 7);
          *(_OWORD *)(v31 + 72) = *(_OWORD *)(v19 + 9);
          *(_OWORD *)(v31 + 56) = v33;
          *(_OWORD *)(v31 + 40) = v32;
          long long v34 = *(_OWORD *)(v19 + 11);
          long long v35 = *(_OWORD *)(v19 + 13);
          long long v36 = *(_OWORD *)(v19 + 15);
          *(_OWORD *)(v31 + 136) = *(_OWORD *)(v19 + 17);
          *(_OWORD *)(v31 + 120) = v36;
          *(_OWORD *)(v31 + 104) = v35;
          *(_OWORD *)(v31 + 88) = v34;
          uint64_t v37 = v19[19];
          *((void *)v31 + 20) = 0;
          *((void *)v31 + 19) = v37;
          *((void *)v31 + 21) = 0;
          *((void *)v31 + 22) = 0;
          std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)v31 + 20, (const void *)v19[20], v19[21], (uint64_t)(v19[21] - v19[20]) >> 4);
          *((void *)v31 + 23) = v19[23];
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 272), (uint64_t)v27, v28, (uint64_t *)v31);
        }
      }
      else
      {
        BOOL v28 = (uint64_t **)(a1 + 280);
        id v27 = (uint64_t **)(a1 + 280);
        if (!v20) {
          goto LABEL_28;
        }
        double v29 = v20;
        while (1)
        {
          while (1)
          {
            id v27 = (uint64_t **)v29;
            uint64_t v30 = v29[4];
            if (v30 <= v26) {
              break;
            }
            double v29 = *v27;
            BOOL v28 = v27;
            if (!*v27) {
              goto LABEL_28;
            }
          }
          if (v30 >= v26) {
            break;
          }
          double v29 = v27[1];
          if (!v29)
          {
            BOOL v28 = v27 + 1;
            goto LABEL_28;
          }
        }
      }
      long long v38 = (void *)v19[1];
      if (v38)
      {
        do
        {
          unint64_t v39 = v38;
          long long v38 = (void *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          unint64_t v39 = (void *)v19[2];
          BOOL v25 = *v39 == (void)v19;
          unint64_t v19 = v39;
        }
        while (!v25);
      }
      if (v39 == (void *)(a2 + 280)) {
        break;
      }
      unint64_t v20 = (void *)*v18;
      long long v21 = *(void **)(a1 + 272);
      unint64_t v19 = v39;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 296, a2 + 296);
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 336), *(const void **)(a2 + 336), *(void *)(a2 + 344), (uint64_t)(*(void *)(a2 + 344) - *(void *)(a2 + 336)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 360, a2 + 360);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 400, a2 + 400);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 440, a2 + 440);
  return a1;
}

void sub_1BD07FE2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, id *location, void **a12)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v17);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  unint64_t v19 = *v15;
  if (*v15)
  {
    *(void *)(v12 + 344) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::destroy(*v13);
  unint64_t v20 = *a9;
  if (*a9)
  {
    *(void *)(v12 + 248) = v20;
    operator delete(v20);
  }
  long long v21 = *a10;
  if (*a10)
  {
    *(void *)(v12 + 104) = v21;
    operator delete(v21);
  }
  objc_destroyWeak(location);
  long long v22 = *a12;
  if (*a12)
  {
    *(void *)(v12 + 72) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::operator=(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  long long v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v5;

  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  id WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  uint64_t v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(void *)(a1 + 104) = v9;
    operator delete(v9);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 96) = 0;
  long long v10 = *(_OWORD *)(a2 + 184);
  long long v11 = *(_OWORD *)(a2 + 200);
  long long v12 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 216) = v12;
  *(_OWORD *)(a1 + 200) = v11;
  *(_OWORD *)(a1 + 184) = v10;
  long long v13 = *(_OWORD *)(a2 + 136);
  long long v14 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 152) = v14;
  *(_OWORD *)(a1 + 136) = v13;
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 240, (__n128 *)(a2 + 240));
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  uint64_t v15 = a1 + 280;
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::destroy(*(void **)(a1 + 280));
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  uint64_t v16 = *(void *)(a2 + 280);
  *(void *)(a1 + 280) = v16;
  uint64_t v17 = *(void *)(a2 + 288);
  *(void *)(a1 + 288) = v17;
  if (v17)
  {
    *(void *)(v16 + 16) = v15;
    *(void *)(a2 + 272) = a2 + 280;
    *(void *)(a2 + 280) = 0;
    *(void *)(a2 + 288) = 0;
  }
  else
  {
    *(void *)(a1 + 272) = v15;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 296, (uint64_t *)(a2 + 296));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 336, (__n128 *)(a2 + 336));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 360, (uint64_t *)(a2 + 360));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 400, (uint64_t *)(a2 + 400));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 440, (uint64_t *)(a2 + 440));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  uint64_t v117 = *MEMORY[0x1E4F143B8];
  double v3 = *(double *)a2;
  id v4 = objc_alloc(MEMORY[0x1E4F1C9C8]);
  uint64_t v5 = (double *)(a2 + 40);
  if (v3 != -1.79769313e308) {
    uint64_t v5 = (double *)a2;
  }
  long long v93 = (void *)[v4 initWithTimeIntervalSinceReferenceDate:*v5];
  uint64_t v96 = a2;
  if (*(double *)(a2 + 8) == 1.79769313e308) {
    uint64_t v6 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 48)];
  }
  else {
    uint64_t v6 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 8)];
  }
  long long v7 = (void *)v6;
  id v8 = *(id *)(a1 + 16);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v9 = *(id *)(a1 + 16);
    if ([v9 shouldUseUnderlyingTypeForStatistics])
    {
      uint64_t v10 = [v9 underlyingSampleType];

      id v8 = (id)v10;
    }
  }
  long long v11 = (void *)[objc_alloc(MEMORY[0x1E4F2B5B0]) initWithDataType:v8 startDate:v93 endDate:v7];
  if (*(unsigned char *)(a1 + 24))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      id v13 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      long long v14 = *(uint64_t **)(a2 + 336);
      uint64_t v15 = *(uint64_t **)(v96 + 344);
      while (v14 != v15)
      {
        uint64_t v16 = *v14;
        id v17 = objc_loadWeakRetained((id *)(a1 + 48));
        uint64_t v18 = [v17 sourceForSourceID:v16];

        if (v18)
        {
          if (([v13 containsObject:v18] & 1) == 0) {
            [v13 addObject:v18];
          }
        }

        ++v14;
      }
      unint64_t v19 = (void *)[v13 copy];
      [v11 _setSources:v19];
    }
  }

  v112[0] = &unk_1F1723230;
  v112[3] = v112;
  id v94 = v11;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)v114, (uint64_t)v112);
  long long v116 = 0;
  unint64_t v20 = operator new(0x28uLL);
  *unint64_t v20 = &unk_1F1723110;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(v20 + 1), (uint64_t)v114);
  long long v116 = v20;
  id v21 = v94;
  long long v22 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v23 = [MEMORY[0x1E4F2B618] secondUnit];
  long long v24 = *(_OWORD *)(v96 + 168);
  long long v25 = *(_OWORD *)(v96 + 200);
  long long v104 = *(_OWORD *)(v96 + 184);
  long long v105 = v25;
  long long v106 = *(_OWORD *)(v96 + 216);
  long long v26 = *(_OWORD *)(v96 + 136);
  long long v100 = *(_OWORD *)(v96 + 120);
  long long v101 = v26;
  long long v102 = *(_OWORD *)(v96 + 152);
  long long v103 = v24;
  id v27 = *(const void **)(v96 + 240);
  uint64_t v107 = *(void *)(v96 + 232);
  long long __p = 0;
  uint64_t v28 = *(void *)(v96 + 248);
  uint64_t v109 = 0;
  uint64_t v110 = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v27, v28, (v28 - (uint64_t)v27) >> 4);
  uint64_t v111 = *(void *)(v96 + 264);
  if (!v116) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v29 = (*(uint64_t (**)(void *, long long *))(*v116 + 48))(v116, &v100);
  uint64_t v30 = *(double **)(v29 + 8);
  double v31 = 0.0;
  while (v30 != *(double **)(v29 + 16))
  {
    double v33 = *v30;
    double v32 = v30[1];
    v30 += 2;
    double v31 = v31 + v32 - v33;
  }
  long long v34 = [v22 quantityWithUnit:v23 doubleValue:v31 + *(double *)(v29 + 32)];
  [v21 setDuration:v34];

  if (__p)
  {
    uint64_t v109 = __p;
    operator delete(__p);
  }

  long long v35 = *(_OWORD *)(v96 + 200);
  long long v104 = *(_OWORD *)(v96 + 184);
  long long v105 = v35;
  long long v106 = *(_OWORD *)(v96 + 216);
  long long v36 = *(_OWORD *)(v96 + 136);
  long long v100 = *(_OWORD *)(v96 + 120);
  long long v101 = v36;
  long long v37 = *(_OWORD *)(v96 + 168);
  long long v102 = *(_OWORD *)(v96 + 152);
  long long v103 = v37;
  long long v38 = *(const void **)(v96 + 240);
  uint64_t v107 = *(void *)(v96 + 232);
  long long __p = 0;
  uint64_t v39 = *(void *)(v96 + 248);
  uint64_t v109 = 0;
  uint64_t v110 = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v38, v39, (v39 - (uint64_t)v38) >> 4);
  uint64_t v111 = *(void *)(v96 + 264);
  if (!v116) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  objc_msgSend(v21, "setDataCount:", *(void *)(*(uint64_t (**)(void *, long long *))(*v116 + 48))(v116, &v100));
  if (__p)
  {
    uint64_t v109 = __p;
    operator delete(__p);
  }
  if (*(unsigned char *)(a1 + 24))
  {
    id v40 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v41 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier((uint64_t)&v100, v96);
    for (uint64_t i = (uint64_t **)v101; i; uint64_t i = (uint64_t **)*i)
    {
      double v43 = i[2];
      double v44 = (void *)MEMORY[0x1E4F2B370];
      uint64_t v45 = [MEMORY[0x1E4F2B618] secondUnit];
      if (!v116) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v46 = (*(uint64_t (**)(void *, uint64_t *))(*v116 + 48))(v116, (uint64_t *)i + 3);
      unint64_t v47 = *(double **)(v46 + 8);
      double v48 = 0.0;
      while (v47 != *(double **)(v46 + 16))
      {
        double v50 = *v47;
        double v49 = v47[1];
        v47 += 2;
        double v48 = v48 + v49 - v50;
      }
      uint64_t v51 = [v44 quantityWithUnit:v45 doubleValue:v48 + *(double *)(v46 + 32)];
      [v40 setObject:v51 forKeyedSubscript:v43];

      if (!v116) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v52 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)(*(uint64_t (**)(void *, uint64_t *))(*v116 + 48))(v116, (uint64_t *)i + 3));
      [v41 setObject:v52 forKeyedSubscript:v43];
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)&v100);
    [v21 setDurationBySource:v40];
    [v21 setDataCountBySource:v41];
  }
  std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v115);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v114);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)v113, (uint64_t)v112);
  long long v116 = 0;
  unint64_t v53 = operator new(0x28uLL);
  *unint64_t v53 = &unk_1F17231A0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(v53 + 1), (uint64_t)v113);
  long long v116 = v53;
  id v99 = v21;
  uint64_t v54 = *(void *)(a1 + 24);
  long long v55 = *(_OWORD *)(v96 + 200);
  long long v104 = *(_OWORD *)(v96 + 184);
  long long v105 = v55;
  long long v106 = *(_OWORD *)(v96 + 216);
  long long v56 = *(_OWORD *)(v96 + 136);
  long long v100 = *(_OWORD *)(v96 + 120);
  long long v101 = v56;
  long long v57 = *(_OWORD *)(v96 + 168);
  long long v102 = *(_OWORD *)(v96 + 152);
  long long v103 = v57;
  unint64_t v58 = *(const void **)(v96 + 240);
  uint64_t v107 = *(void *)(v96 + 232);
  long long __p = 0;
  uint64_t v59 = *(void *)(v96 + 248);
  uint64_t v109 = 0;
  uint64_t v110 = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v58, v59, (v59 - (uint64_t)v58) >> 4);
  uint64_t v111 = *(void *)(v96 + 264);
  if (!v116) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  long long v60 = (double *)(*(uint64_t (**)(void *, long long *))(*v116 + 48))(v116, &v100);
  double v62 = v60[5];
  double v61 = v60[6];
  double v63 = v60[7];
  uint64_t v64 = *((void *)v60 + 8);
  double v66 = v60[9];
  double v65 = v60[10];
  double v67 = v60[11];
  if (__p)
  {
    uint64_t v109 = __p;
    operator delete(__p);
  }
  uint64_t v68 = *(void *)(a1 + 24);
  uint64_t v69 = _HKStatisticsOptionBaselineRelativeQuantities();
  uint64_t v70 = *(void **)(a1 + 16);
  if ((v69 & v68) != 0) {
    [v70 _unitForChangeInCanonicalUnit];
  }
  else {
  char v71 = [v70 canonicalUnit];
  }
  if ((v54 & 2) != 0)
  {
    char v72 = [MEMORY[0x1E4F2B370] quantityWithUnit:v71 doubleValue:v62];
    [v99 setAverageQuantity:v72];
  }
  if ((v54 & 4) != 0)
  {
    uint64_t v73 = [MEMORY[0x1E4F2B370] quantityWithUnit:v71 doubleValue:v63];
    [v99 setMinimumQuantity:v73];
  }
  if ((v54 & 8) != 0)
  {
    int8x16_t v74 = [MEMORY[0x1E4F2B370] quantityWithUnit:v71 doubleValue:v61];
    [v99 setMaximumQuantity:v74];
  }
  if ((v54 & 0x20) != 0)
  {
    uint64_t v75 = [MEMORY[0x1E4F2B370] quantityWithUnit:v71 doubleValue:v66];
    [v99 setMostRecentQuantity:v75];

    long long v76 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v65, v67);
    [v99 setMostRecentQuantityDateInterval:v76];
  }
  [v99 setDataCount:v64];
  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    goto LABEL_87;
  }
  if ((v54 & 2) != 0) {
    id v98 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else {
    id v98 = 0;
  }
  if ((v54 & 4) != 0) {
    id v95 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else {
    id v95 = 0;
  }
  if ((v54 & 8) != 0)
  {
    id v77 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    if ((v54 & 0x20) == 0) {
      goto LABEL_60;
    }
LABEL_62:
    id v79 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v78 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    goto LABEL_63;
  }
  id v77 = 0;
  if ((v54 & 0x20) != 0) {
    goto LABEL_62;
  }
LABEL_60:
  id v78 = 0;
  id v79 = 0;
LABEL_63:
  id v80 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier((uint64_t)&v100, v96);
  for (uint64_t j = (uint64_t **)v101; j; uint64_t j = (uint64_t **)*j)
  {
    long long v82 = j[2];
    if ((v54 & 2) != 0)
    {
      if (!v116) {
        goto LABEL_90;
      }
      uint64_t v83 = objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v71, *(double *)((*(uint64_t (**)(void *, uint64_t *))(*v116 + 48))(v116, (uint64_t *)j + 3) + 40));
      [v98 setObject:v83 forKeyedSubscript:v82];
    }
    if ((v54 & 4) != 0)
    {
      if (!v116) {
        goto LABEL_90;
      }
      uint64_t v84 = objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v71, *(double *)((*(uint64_t (**)(void *, uint64_t *))(*v116 + 48))(v116, (uint64_t *)j + 3) + 56));
      [v95 setObject:v84 forKeyedSubscript:v82];
    }
    if ((v54 & 8) != 0)
    {
      if (!v116) {
        goto LABEL_90;
      }
      int64_t v85 = objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v71, *(double *)((*(uint64_t (**)(void *, uint64_t *))(*v116 + 48))(v116, (uint64_t *)j + 3) + 48));
      [v77 setObject:v85 forKeyedSubscript:v82];
    }
    if ((v54 & 0x20) != 0)
    {
      if (!v116) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v86 = (*(uint64_t (**)(void *, uint64_t *))(*v116 + 48))(v116, (uint64_t *)j + 3);
      double v87 = *(double *)(v86 + 80);
      double v88 = *(double *)(v86 + 88);
      long long v89 = [MEMORY[0x1E4F2B370] quantityWithUnit:v71 doubleValue:*(double *)(v86 + 72)];
      [v79 setObject:v89 forKeyedSubscript:v82];

      int v90 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v87, v88);
      [v78 setObject:v90 forKeyedSubscript:v82];
    }
    if (!v116) {
LABEL_90:
    }
      std::__throw_bad_function_call[abi:ne180100]();
    long long v91 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)((*(uint64_t (**)(void *, uint64_t *))(*v116 + 48))(v116, (uint64_t *)j + 3) + 64));
    [v80 setObject:v91 forKeyedSubscript:v82];
  }
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)&v100);
  if ((v54 & 2) != 0) {
    [v99 setAverageQuantityBySource:v98];
  }
  if ((v54 & 4) != 0) {
    [v99 setMinimumQuantityBySource:v95];
  }
  if ((v54 & 8) != 0) {
    [v99 setMaximumQuantityBySource:v77];
  }
  if ((v54 & 0x20) != 0)
  {
    [v99 setMostRecentQuantityBySource:v79];
    [v99 setMostRecentQuantityDateIntervalBySource:v78];
  }
  [v99 setDataCountBySource:v80];

LABEL_87:
  std::__function::__value_func<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v115);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v113);

  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v112);

  return v99;
}

void sub_1BD080CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  std::__function::__value_func<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100]((void *)(v42 - 176));
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](&a39);

  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](&a35);
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 320);
  uint64_t v2 = *(void *)(a1 + 336);
  if (v1 != (*(void *)(a1 + 344) - v2) >> 3)
  {
    id v4 = (void **)(a1 + 336);
    *(void *)(a1 + 344) = v2;
    std::vector<long long>::reserve((void **)(a1 + 336), v1);
    uint64_t v5 = *(void **)(a1 + 312);
    if (v5)
    {
      uint64_t v6 = *(char **)(a1 + 344);
      do
      {
        uint64_t v7 = v5[2];
        unint64_t v8 = *(void *)(a1 + 352);
        if ((unint64_t)v6 >= v8)
        {
          uint64_t v10 = (char *)*v4;
          uint64_t v11 = (v6 - (unsigned char *)*v4) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            uint64_t v10 = *(char **)(a1 + 336);
            uint64_t v6 = *(char **)(a1 + 344);
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v16 = (void *)(v14 + 8 * v11);
          *uint64_t v16 = v7;
          id v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            uint64_t v17 = *((void *)v6 - 1);
            v6 -= 8;
            *--uint64_t v16 = v17;
          }
          *(void *)(a1 + 336) = v16;
          *(void *)(a1 + 344) = v9;
          *(void *)(a1 + 352) = v14 + 8 * v15;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)uint64_t v6 = v7;
          id v9 = v6 + 8;
        }
        *(void *)(a1 + 344) = v9;
        uint64_t v5 = (void *)*v5;
        uint64_t v6 = v9;
      }
      while (v5);
    }
    uint64_t v18 = (id *)(a1 + 88);
    id WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      id v20 = objc_loadWeakRetained(v18);
      [v20 orderSourceIDs:v4];
    }
  }
}

void sub_1BD081108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2) {
    a2 = v4 * floor(a2 / v4);
  }
  double v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    int v108 = (char **)(a1 + 96);
    long long v105 = (uint64_t *)(a1 + 232);
    uint64_t v106 = a1 + 120;
    location = (id *)(a1 + 88);
    long long v102 = (double **)(a1 + 240);
    uint64_t v6 = (void *)(a1 + 280);
    do
    {
      uint64_t v7 = *(double **)(a1 + 96);
      unint64_t v8 = *(long long **)(a1 + 104);
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v7) >> 4);
      if (v9)
      {
        if (v9 != 1)
        {
          double v30 = a2;
          double v31 = a2;
          double v32 = v5;
          uint64_t v33 = *(void *)(a1 + 96);
          if (v7 != (double *)v8)
          {
            do
            {
              double v34 = *(double *)(v33 + 8);
              double v35 = *(double *)(v33 + 16);
              if (v34 > v32 && v34 < v31) {
                double v31 = *(double *)(v33 + 8);
              }
              if (v35 > v5) {
                double v37 = *(double *)(v33 + 16);
              }
              else {
                double v37 = v30;
              }
              if (v35 < v30)
              {
                double v32 = v5;
                double v30 = v37;
              }
              v33 += 48;
            }
            while ((long long *)v33 != v8);
          }
          if (v30 >= v31) {
            double v38 = v31;
          }
          else {
            double v38 = v30;
          }
          double v39 = *(double *)(a1 + 16);
          if (v39 > 0.0)
          {
            double v40 = v39 * floor(v38 / v39);
            double v41 = v39 * floor((v39 + v5) / v39);
            if (v40 >= v41) {
              double v38 = v40;
            }
            else {
              double v38 = v41;
            }
          }
          *int v108 = 0;
          v108[1] = 0;
          v108[2] = 0;
          if (v7 != (double *)v8)
          {
            if (v9 > 0x555555555555555) {
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v9);
            uint64_t v45 = *(char **)(a1 + 96);
            double v44 = *(char **)(a1 + 104);
            uint64_t v46 = v42;
            if (v44 != v45)
            {
              do
              {
                long long v47 = *((_OWORD *)v44 - 3);
                long long v48 = *((_OWORD *)v44 - 2);
                *(_OWORD *)(v46 - 21) = *(_OWORD *)(v44 - 21);
                *((_OWORD *)v46 - 3) = v47;
                *((_OWORD *)v46 - 2) = v48;
                v46 -= 48;
                v44 -= 48;
              }
              while (v44 != v45);
              double v44 = *v108;
            }
            *(void *)(a1 + 96) = v46;
            *(void *)(a1 + 104) = v42;
            *(void *)(a1 + 112) = &v42[48 * v43];
            if (v44) {
              operator delete(v44);
            }
          }
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_updateSourceOrder(a1);
          id WeakRetained = objc_loadWeakRetained(location);

          if (WeakRetained)
          {
            *(void *)&v110.double var0 = a1;
            unint64_t v50 = 126 - 2 * __clz(v9);
            if (v7 == (double *)v8) {
              uint64_t v51 = 0;
            }
            else {
              uint64_t v51 = v50;
            }
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*,false>((unint64_t)v7, v8, (uint64_t)&v110, v51, 1);
          }
          else
          {
            unint64_t v61 = 126 - 2 * __clz(v9);
            if (v7 == (double *)v8) {
              uint64_t v51 = 0;
            }
            else {
              uint64_t v51 = v61;
            }
          }
          std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*,false>((unint64_t)v7, v8, v51, 1);
          if (*(unsigned char *)(a1 + 25)) {
            id v104 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
          }
          else {
            id v104 = 0;
          }
          if (v7 == (double *)v8)
          {
LABEL_143:
            *(double *)(a1 + 264) = HKIntervalMask<double>::removeIntervalsBefore(v102, v38) + *(double *)(a1 + 264);
            uint64_t v96 = *(void **)(a1 + 272);
            if (v96 != v6)
            {
              do
              {
                *((double *)v96 + 23) = HKIntervalMask<double>::removeIntervalsBefore((double **)v96 + 20, v38)
                                      + *((double *)v96 + 23);
                long long v97 = (void *)v96[1];
                if (v97)
                {
                  do
                  {
                    id v98 = v97;
                    long long v97 = (void *)*v97;
                  }
                  while (v97);
                }
                else
                {
                  do
                  {
                    id v98 = (void *)v96[2];
                    BOOL v54 = *v98 == (void)v96;
                    uint64_t v96 = v98;
                  }
                  while (!v54);
                }
                uint64_t v96 = v98;
              }
              while (v98 != v6);
            }
            *(double *)(a1 + 56) = v38;

            if (v7) {
              operator delete(v7);
            }
            goto LABEL_155;
          }
          int64_t v107 = 0;
          char v62 = 0;
          double v63 = v7;
          while (2)
          {
            long long v64 = *((_OWORD *)v63 + 1);
            *(_OWORD *)&v110.double var0 = *(_OWORD *)v63;
            *(_OWORD *)&v110.double var2 = v64;
            *(double *)&v110.BOOL var4 = v63[4];
            if (!v110.var4 || v110.var1 > v38)
            {
              double v65 = *(_OWORD **)(a1 + 104);
              unint64_t v66 = *(void *)(a1 + 112);
              if ((unint64_t)v65 >= v66)
              {
                unint64_t v70 = 0xAAAAAAAAAAAAAAABLL * (((char *)v65 - *v108) >> 4);
                unint64_t v71 = v70 + 1;
                if (v70 + 1 > 0x555555555555555) {
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v72 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - (void)*v108) >> 4);
                if (2 * v72 > v71) {
                  unint64_t v71 = 2 * v72;
                }
                if (v72 >= 0x2AAAAAAAAAAAAAALL) {
                  unint64_t v73 = 0x555555555555555;
                }
                else {
                  unint64_t v73 = v71;
                }
                if (v73) {
                  unint64_t v73 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v73);
                }
                else {
                  uint64_t v74 = 0;
                }
                long long v81 = (_OWORD *)(v73 + 48 * v70);
                long long v82 = *(_OWORD *)v63;
                long long v83 = *((_OWORD *)v63 + 2);
                v81[1] = *((_OWORD *)v63 + 1);
                v81[2] = v83;
                *long long v81 = v82;
                int64_t v85 = *(char **)(a1 + 96);
                uint64_t v84 = *(char **)(a1 + 104);
                uint64_t v86 = v81;
                if (v84 != v85)
                {
                  do
                  {
                    long long v87 = *((_OWORD *)v84 - 3);
                    long long v88 = *((_OWORD *)v84 - 2);
                    *(_OWORD *)((char *)v86 - 21) = *(_OWORD *)(v84 - 21);
                    *(v86 - 3) = v87;
                    *(v86 - 2) = v88;
                    v86 -= 3;
                    v84 -= 48;
                  }
                  while (v84 != v85);
                  uint64_t v84 = *v108;
                }
                uint64_t v69 = v81 + 3;
                *(void *)(a1 + 96) = v86;
                *(void *)(a1 + 104) = v81 + 3;
                *(void *)(a1 + 112) = v73 + 48 * v74;
                if (v84) {
                  operator delete(v84);
                }
              }
              else
              {
                long long v67 = *(_OWORD *)v63;
                long long v68 = *((_OWORD *)v63 + 2);
                v65[1] = *((_OWORD *)v63 + 1);
                v65[2] = v68;
                *double v65 = v67;
                uint64_t v69 = v65 + 3;
              }
              *(void *)(a1 + 104) = v69;
LABEL_142:
              v63 += 6;
              if (v63 == (double *)v8) {
                goto LABEL_143;
              }
              continue;
            }
            break;
          }
          double var2 = v110.var2;
          if (v110.var2 > v38) {
            double var2 = v38;
          }
          v110.double var2 = var2;
          for (uint64_t i = *(double **)(a1 + 64); i != *(double **)(a1 + 72) && v110.var1 >= *i; i += 2)
          {
            if (v110.var1 < i[1]) {
              goto LABEL_142;
            }
          }
          int v77 = *((unsigned __int8 *)v63 + 42);
          int v78 = *((unsigned __int8 *)v63 + 41);
          if (v62)
          {
            unint64_t var3 = v110.var3;
            if (v107 == v110.var3 || *(unsigned char *)(a1 + 24))
            {
              BOOL v80 = v77 == 0;
              HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::addSample(v106, &v110.var0);
              HDStatisticsTimeInterval::addSample(v105, &v110, v80);
            }
          }
          else
          {
            BOOL v89 = v77 == 0;
            HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::addSample(v106, &v110.var0);
            HDStatisticsTimeInterval::addSample(v105, &v110, v89);
            unint64_t var3 = v110.var3;
            int64_t v107 = v110.var3;
          }
          if (!*(unsigned char *)(a1 + 25)) {
            goto LABEL_141;
          }
          int v90 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, var3);
          if (!v90) {
            goto LABEL_140;
          }
          long long v91 = [v104 objectForKeyedSubscript:v90];
          long long v92 = v91;
          if (v91)
          {
            if ([v91 longLongValue] != var3 && !*(unsigned char *)(a1 + 24))
            {
LABEL_139:

LABEL_140:
LABEL_141:
              char v62 = 1;
              goto LABEL_142;
            }
          }
          else
          {
            long long v93 = [NSNumber numberWithLongLong:var3];
            [v104 setObject:v93 forKeyedSubscript:v90];
          }
          unint64_t v94 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, var3);
          id v95 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v94);
          HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::addSample((uint64_t)v95, &v110.var0);
          HDStatisticsTimeInterval::addSample((uint64_t *)v95 + 14, &v110, v78 == 0);
          goto LABEL_139;
        }
        int v10 = *((unsigned __int8 *)v7 + 42);
        int v11 = *((unsigned __int8 *)v7 + 41);
        int v12 = *((unsigned __int8 *)v7 + 40);
        double v13 = v7[1];
        double v14 = v7[2];
        unint64_t v15 = *((void *)v7 + 3);
        char v16 = *((unsigned char *)v7 + 33);
        if (v14 <= a2) {
          double v17 = v7[2];
        }
        else {
          double v17 = a2;
        }
        if (v13 < a2) {
          int v18 = *((unsigned __int8 *)v7 + 32);
        }
        else {
          int v18 = 0;
        }
        if (v13 < a2) {
          char v19 = 0;
        }
        else {
          char v19 = *((unsigned char *)v7 + 33);
        }
        if (v13 < a2)
        {
          uint64_t v20 = 0;
        }
        else
        {
          double v17 = v7[2];
          uint64_t v20 = *((void *)v7 + 3);
        }
        if (v13 < a2) {
          double v21 = 0.0;
        }
        else {
          double v21 = v7[2];
        }
        if (v13 < a2) {
          double v22 = 0.0;
        }
        else {
          double v22 = *v7;
        }
        if (v13 < a2) {
          double v23 = 0.0;
        }
        else {
          double v23 = v7[1];
        }
        if (v13 < a2) {
          int v24 = 0;
        }
        else {
          int v24 = *((unsigned __int8 *)v7 + 32);
        }
        if (*((unsigned char *)v7 + 32))
        {
          double v14 = v17;
        }
        else
        {
          int v18 = 0;
          char v19 = 0;
          uint64_t v20 = 0;
        }
        if (*((unsigned char *)v7 + 32)) {
          double v25 = v21;
        }
        else {
          double v25 = 0.0;
        }
        if (*((unsigned char *)v7 + 32)) {
          double v26 = v22;
        }
        else {
          double v26 = 0.0;
        }
        if (*((unsigned char *)v7 + 32)) {
          double v27 = v23;
        }
        else {
          double v27 = 0.0;
        }
        if (*((unsigned char *)v7 + 32)) {
          int v28 = v24;
        }
        else {
          int v28 = 0;
        }
        v110.double var0 = *v7;
        v110.var1 = v13;
        v110.double var2 = v14;
        v110.unint64_t var3 = v15;
        v110.BOOL var4 = v18;
        v110.BOOL var5 = v16;
        *(_DWORD *)(&v110.var5 + 1) = *(_DWORD *)((char *)v7 + 34);
        *(_WORD *)(&v110.var5 + 5) = *((_WORD *)v7 + 19);
        *(double *)&long long v111 = v26;
        *((double *)&v111 + 1) = v27;
        *(double *)&long long v112 = v25;
        *((void *)&v112 + 1) = v20;
        LOBYTE(v113) = v28;
        HIBYTE(v113) = v19;
        for (uint64_t j = *(double **)(a1 + 64); j != *(double **)(a1 + 72) && v13 >= *j; j += 2)
        {
          if (v13 < j[1])
          {
            BOOL v52 = v12 != 0;
            BOOL v53 = v11 != 0;
            BOOL v55 = v10 != 0;
            if (!v28) {
              goto LABEL_153;
            }
LABEL_91:
            LOWORD(v109) = v113;
            long long v59 = v112;
            long long v60 = *v108;
            *(_OWORD *)long long v60 = v111;
            *((_OWORD *)v60 + 1) = v59;
            *((void *)v60 + 4) = v109;
            v60[40] = v52;
            v60[41] = v53;
            v60[42] = v55;
            goto LABEL_154;
          }
        }
        BOOL v52 = v12 != 0;
        BOOL v53 = v11 != 0;
        BOOL v54 = v10 == 0;
        BOOL v55 = v10 != 0;
        if (v18)
        {
          int v56 = v54;
          HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::addSample(v106, &v110.var0);
          HDStatisticsTimeInterval::addSample(v105, &v110, v56);
          if (*(unsigned char *)(a1 + 25))
          {
            unint64_t v57 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v15);
            unint64_t v58 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v57);
            HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::addSample((uint64_t)v58, &v110.var0);
            HDStatisticsTimeInterval::addSample((uint64_t *)v58 + 14, &v110, v11 == 0);
          }
          BOOL v52 = 1;
          BOOL v53 = 1;
          BOOL v55 = 1;
        }
        if (v28) {
          goto LABEL_91;
        }
LABEL_153:
        *(void *)(a1 + 104) = *(void *)(a1 + 96);
      }
LABEL_154:
      *(double *)(a1 + 56) = a2;
LABEL_155:
      double v99 = *(double *)(a1 + 56);
      if (v99 == v5)
      {
        long long v100 = [MEMORY[0x1E4F28B00] currentHandler];
        long long v101 = objc_msgSend(NSString, "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>, HDStatisticsTimeInterval>>::_mergeThroughTime(double) [Statistics = HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>, HDStatisticsTimeInterval>]");
        [v100 handleFailureInFunction:v101 file:@"HDStatisticsBucket.hpp" lineNumber:234 description:@"Failed to make forward progress during statistics merge."];

        double v99 = *(double *)(a1 + 56);
      }
      double v5 = v99;
    }
    while (v99 < a2);
  }
}

void sub_1BD081954(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = a2;
  double v3 = *(void **)(a1 + 280);
  if (!v3) {
    goto LABEL_11;
  }
  double v4 = (uint64_t **)(a1 + 280);
  do
  {
    uint64_t v5 = v3[4];
    BOOL v6 = v5 < a2;
    if (v5 >= a2) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = v3 + 1;
    }
    if (!v6) {
      double v4 = (uint64_t **)v3;
    }
    double v3 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t **)(a1 + 280) || (uint64_t)v4[4] > a2)
  {
LABEL_11:
    unint64_t v8 = (uint64_t **)(a1 + 272);
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 272), a2, &v10);
    double v4 = std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v8, a2, &v10);
  }
  return v4 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    uint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((void *)(a1 + 360), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, a2);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      id v10 = v6;
      uint64_t v7 = (void *)(a1 + 400);
      unint64_t v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        int v11 = &v10;
        *((void *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        id v6 = v10;
      }
    }
  }
  return a2;
}

void sub_1BD081B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  double v4 = (id *)(a1 + 88);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    id v6 = (void *)(a1 + 440);
    uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
    if (v7)
    {
      id v8 = (id)v7[3];
    }
    else
    {
      id v9 = objc_loadWeakRetained(v4);
      id v8 = [v9 bundleIdentifierForSourceID:a2];

      if (v8)
      {
        id v10 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
        objc_storeStrong(v10 + 3, v8);
      }
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1BD081C0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, void *a3)
{
  id v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        uint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        id v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        id v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    id v9 = (char *)operator new(0xC0uLL);
    *((void *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 136) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *((void *)v9 + 6) = 0xFFEFFFFFFFFFFFFFLL;
    *(_OWORD *)(v9 + 130) = 0u;
    *(_OWORD *)(v9 + 152) = 0u;
    *(_OWORD *)(v9 + 168) = 0u;
    *((void *)v9 + 23) = 0;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v12 = a2 - 3;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 4);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v103 = *((void *)a2 - 3);
                uint64_t v104 = *(void *)(v13 + 24);
                if (v103 == v104) {
                  return;
                }
                long long v105 = *(char **)(*(void *)a3 + 336);
                uint64_t v106 = *(char **)(*(void *)a3 + 344);
                int64_t v107 = v105;
                int v108 = v105;
                if (v105 == v106) {
                  goto LABEL_171;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)v13, (long long *)(v13 + 48), a2 - 3, a3);
                return;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, (uint64_t)(a2 - 3), a3);
                return;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, v13 + 144, (uint64_t)(a2 - 3), a3);
                return;
              default:
                JUMPOUT(0);
            }
            do
            {
              if (*(void *)v108 == v103) {
                goto LABEL_168;
              }
              v108 += 8;
            }
            while (v108 != v106);
            int v108 = *(char **)(*(void *)a3 + 344);
LABEL_168:
            while (*(void *)v107 != v104)
            {
              v107 += 8;
              if (v107 == v106)
              {
                int64_t v107 = *(char **)(*(void *)a3 + 344);
                break;
              }
            }
LABEL_171:
            if (v108 - v105 < v107 - v105)
            {
              *(_OWORD *)v226 = *(_OWORD *)(v13 + 16);
              *(_OWORD *)&v226[16] = *(_OWORD *)(v13 + 32);
              long long v218 = *(_OWORD *)v13;
              long long v109 = *v12;
              long long v110 = *(a2 - 2);
              *(_OWORD *)(v13 + 27) = *(long long *)((char *)a2 - 21);
              *(_OWORD *)unint64_t v13 = v109;
              *(_OWORD *)(v13 + 16) = v110;
              *(long long *)((char *)a2 - 21) = *(_OWORD *)&v226[11];
              long long *v12 = v218;
              *(a2 - 2) = *(_OWORD *)v226;
            }
            return;
          }
          if (v14 <= 1151)
          {
            long long v111 = (long long *)(v13 + 48);
            BOOL v113 = (long long *)v13 == a2 || v111 == a2;
            if (a5)
            {
              if (!v113)
              {
                unint64_t v114 = v13;
                do
                {
                  unint64_t v115 = v114;
                  unint64_t v114 = (unint64_t)v111;
                  uint64_t v116 = *(void *)(v115 + 72);
                  uint64_t v117 = *(void *)(v115 + 24);
                  if (v116 != v117)
                  {
                    uint64_t v118 = *(char **)(*(void *)a3 + 336);
                    long long v119 = *(char **)(*(void *)a3 + 344);
                    uint64_t v120 = v118;
                    uint64_t v121 = v118;
                    if (v118 != v119)
                    {
                      do
                      {
                        if (*(void *)v121 == v116) {
                          goto LABEL_196;
                        }
                        v121 += 8;
                      }
                      while (v121 != v119);
                      uint64_t v121 = *(char **)(*(void *)a3 + 344);
LABEL_196:
                      while (*(void *)v120 != v117)
                      {
                        v120 += 8;
                        if (v120 == v119)
                        {
                          uint64_t v120 = *(char **)(*(void *)a3 + 344);
                          break;
                        }
                      }
                    }
                    if (v121 - v118 < v120 - v118)
                    {
                      uint64_t v227 = *(void *)(v114 + 16);
                      long long v219 = *(_OWORD *)v114;
                      long long v236 = *(_OWORD *)(v115 + 80);
                      unint64_t v122 = v114;
                      while (1)
                      {
                        long long v123 = *(_OWORD *)(v115 + 16);
                        *(_OWORD *)unint64_t v122 = *(_OWORD *)v115;
                        *(_OWORD *)(v122 + 16) = v123;
                        *(_OWORD *)(v122 + 27) = *(_OWORD *)(v115 + 27);
                        if (v115 == v13) {
                          break;
                        }
                        unint64_t v122 = v115;
                        uint64_t v124 = *(void *)(v115 - 24);
                        if (v116 != v124)
                        {
                          uint64_t v125 = *(char **)(*(void *)a3 + 336);
                          uint64_t v126 = *(char **)(*(void *)a3 + 344);
                          uint64_t v127 = v125;
                          uint64_t v128 = v125;
                          if (v125 != v126)
                          {
                            do
                            {
                              if (*(void *)v128 == v116) {
                                goto LABEL_208;
                              }
                              v128 += 8;
                            }
                            while (v128 != v126);
                            uint64_t v128 = *(char **)(*(void *)a3 + 344);
LABEL_208:
                            while (*(void *)v127 != v124)
                            {
                              v127 += 8;
                              if (v127 == v126)
                              {
                                uint64_t v127 = *(char **)(*(void *)a3 + 344);
                                break;
                              }
                            }
                          }
                          unint64_t v115 = v122 - 48;
                          if (v128 - v125 < v127 - v125) {
                            continue;
                          }
                        }
                        goto LABEL_212;
                      }
                      unint64_t v122 = v13;
LABEL_212:
                      *(_OWORD *)unint64_t v122 = v219;
                      *(void *)(v122 + 16) = v227;
                      *(void *)(v122 + 24) = v116;
                      *(void *)(v122 + 32) = v236;
                      *(_DWORD *)(v122 + 39) = *(_DWORD *)((char *)&v236 + 7);
                    }
                  }
                  long long v111 = (long long *)(v114 + 48);
                }
                while ((long long *)(v114 + 48) != a2);
              }
            }
            else if (!v113)
            {
              do
              {
                unint64_t v201 = a1;
                a1 = (unint64_t)v111;
                uint64_t v202 = *(void *)(v201 + 72);
                uint64_t v203 = *(void *)(v201 + 24);
                if (v202 != v203)
                {
                  v204 = *(char **)(*(void *)a3 + 336);
                  v205 = *(char **)(*(void *)a3 + 344);
                  v206 = v204;
                  v207 = v204;
                  if (v204 != v205)
                  {
                    do
                    {
                      if (*(void *)v207 == v202) {
                        goto LABEL_312;
                      }
                      v207 += 8;
                    }
                    while (v207 != v205);
                    v207 = *(char **)(*(void *)a3 + 344);
LABEL_312:
                    while (*(void *)v206 != v203)
                    {
                      v206 += 8;
                      if (v206 == v205)
                      {
                        v206 = *(char **)(*(void *)a3 + 344);
                        break;
                      }
                    }
                  }
                  if (v207 - v204 < v206 - v204)
                  {
                    uint64_t v230 = *(void *)(a1 + 16);
                    long long v222 = *(_OWORD *)a1;
                    long long v239 = *(_OWORD *)(v201 + 80);
                    unint64_t v208 = a1;
                    do
                    {
                      v209 = (_OWORD *)v208;
                      unint64_t v208 = v201;
                      long long v210 = *(_OWORD *)(v201 + 16);
                      _OWORD *v209 = *(_OWORD *)v201;
                      v209[1] = v210;
                      *(_OWORD *)((char *)v209 + 27) = *(_OWORD *)(v201 + 27);
                      uint64_t v211 = *(void *)(v201 - 24);
                      if (v202 == v211) {
                        break;
                      }
                      v212 = *(char **)(*(void *)a3 + 336);
                      v213 = *(char **)(*(void *)a3 + 344);
                      v214 = v212;
                      v215 = v212;
                      if (v212 != v213)
                      {
                        do
                        {
                          if (*(void *)v215 == v202) {
                            goto LABEL_322;
                          }
                          v215 += 8;
                        }
                        while (v215 != v213);
                        v215 = *(char **)(*(void *)a3 + 344);
LABEL_322:
                        while (*(void *)v214 != v211)
                        {
                          v214 += 8;
                          if (v214 == v213)
                          {
                            v214 = *(char **)(*(void *)a3 + 344);
                            break;
                          }
                        }
                      }
                      unint64_t v201 = v208 - 48;
                    }
                    while (v215 - v212 < v214 - v212);
                    *(_OWORD *)unint64_t v208 = v222;
                    *(void *)(v208 + 16) = v230;
                    *(void *)(v208 + 24) = v202;
                    *(void *)(v208 + 32) = v239;
                    *(_DWORD *)(v208 + 39) = *(_DWORD *)((char *)&v239 + 7);
                  }
                }
                long long v111 = (long long *)(a1 + 48);
              }
              while ((long long *)(a1 + 48) != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((long long *)v13 != a2)
            {
              int64_t v129 = (v15 - 2) >> 1;
              int64_t v130 = v129;
              do
              {
                int64_t v131 = v130;
                if (v129 >= v130)
                {
                  uint64_t v132 = (2 * v130) | 1;
                  unint64_t v133 = v13 + 48 * v132;
                  if (2 * v131 + 2 < (uint64_t)v15)
                  {
                    uint64_t v134 = *(void *)(v133 + 24);
                    uint64_t v135 = *(void *)(v133 + 72);
                    if (v134 != v135)
                    {
                      v137 = *(char **)(*(void *)a3 + 336);
                      v136 = *(char **)(*(void *)a3 + 344);
                      v138 = v137;
                      v139 = v137;
                      if (v137 != v136)
                      {
                        do
                        {
                          if (*(void *)v139 == v134) {
                            goto LABEL_224;
                          }
                          v139 += 8;
                        }
                        while (v139 != v136);
                        v139 = *(char **)(*(void *)a3 + 344);
LABEL_224:
                        while (*(void *)v138 != v135)
                        {
                          v138 += 8;
                          if (v138 == v136)
                          {
                            v138 = *(char **)(*(void *)a3 + 344);
                            break;
                          }
                        }
                      }
                      v133 += 48 * (v139 - v137 < v138 - v137);
                      if (v139 - v137 < v138 - v137) {
                        uint64_t v132 = 2 * v131 + 2;
                      }
                    }
                  }
                  unint64_t v140 = v13 + 48 * v131;
                  uint64_t v141 = *(void *)(v133 + 24);
                  uint64_t v142 = *(void *)(v140 + 24);
                  if (v141 == v142) {
                    goto LABEL_238;
                  }
                  v144 = *(char **)(*(void *)a3 + 336);
                  v143 = *(char **)(*(void *)a3 + 344);
                  v145 = v144;
                  v146 = v144;
                  if (v144 != v143)
                  {
                    do
                    {
                      if (*(void *)v146 == v141) {
                        goto LABEL_234;
                      }
                      v146 += 8;
                    }
                    while (v146 != v143);
                    v146 = *(char **)(*(void *)a3 + 344);
LABEL_234:
                    while (*(void *)v145 != v142)
                    {
                      v145 += 8;
                      if (v145 == v143)
                      {
                        v145 = *(char **)(*(void *)a3 + 344);
                        break;
                      }
                    }
                  }
                  if (v146 - v144 >= v145 - v144)
                  {
LABEL_238:
                    uint64_t v228 = *(void *)(v140 + 16);
                    long long v220 = *(_OWORD *)v140;
                    long long v237 = *(_OWORD *)(v140 + 32);
                    long long v147 = *(_OWORD *)v133;
                    long long v148 = *(_OWORD *)(v133 + 16);
                    *(_OWORD *)(v140 + 27) = *(_OWORD *)(v133 + 27);
                    *(_OWORD *)unint64_t v140 = v147;
                    *(_OWORD *)(v140 + 16) = v148;
                    if (v129 >= v132)
                    {
                      while (1)
                      {
                        uint64_t v150 = 2 * v132;
                        uint64_t v132 = (2 * v132) | 1;
                        unint64_t v149 = v13 + 48 * v132;
                        uint64_t v151 = v150 + 2;
                        if (v151 < (uint64_t)v15)
                        {
                          uint64_t v152 = *(void *)(v149 + 24);
                          uint64_t v153 = *(void *)(v149 + 72);
                          if (v152 != v153)
                          {
                            v154 = *(char **)(*(void *)a3 + 336);
                            v155 = *(char **)(*(void *)a3 + 344);
                            v156 = v154;
                            v157 = v154;
                            if (v154 != v155)
                            {
                              do
                              {
                                if (*(void *)v157 == v152) {
                                  goto LABEL_246;
                                }
                                v157 += 8;
                              }
                              while (v157 != v155);
                              v157 = *(char **)(*(void *)a3 + 344);
LABEL_246:
                              while (*(void *)v156 != v153)
                              {
                                v156 += 8;
                                if (v156 == v155)
                                {
                                  v156 = *(char **)(*(void *)a3 + 344);
                                  break;
                                }
                              }
                            }
                            v149 += 48 * (v157 - v154 < v156 - v154);
                            if (v157 - v154 < v156 - v154) {
                              uint64_t v132 = v151;
                            }
                          }
                        }
                        uint64_t v158 = *(void *)(v149 + 24);
                        if (v158 != v142)
                        {
                          v160 = *(char **)(*(void *)a3 + 336);
                          v159 = *(char **)(*(void *)a3 + 344);
                          v161 = v160;
                          v162 = v160;
                          if (v160 != v159)
                          {
                            do
                            {
                              if (*(void *)v162 == v158) {
                                goto LABEL_256;
                              }
                              v162 += 8;
                            }
                            while (v162 != v159);
                            v162 = *(char **)(*(void *)a3 + 344);
LABEL_256:
                            while (*(void *)v161 != v142)
                            {
                              v161 += 8;
                              if (v161 == v159)
                              {
                                v161 = *(char **)(*(void *)a3 + 344);
                                break;
                              }
                            }
                          }
                          if (v162 - v160 < v161 - v160) {
                            break;
                          }
                        }
                        long long v163 = *(_OWORD *)v149;
                        long long v164 = *(_OWORD *)(v149 + 16);
                        *(_OWORD *)(v133 + 27) = *(_OWORD *)(v149 + 27);
                        *(_OWORD *)unint64_t v133 = v163;
                        *(_OWORD *)(v133 + 16) = v164;
                        unint64_t v133 = v149;
                        if (v129 < v132) {
                          goto LABEL_261;
                        }
                      }
                    }
                    unint64_t v149 = v133;
LABEL_261:
                    *(_OWORD *)unint64_t v149 = v220;
                    *(void *)(v149 + 16) = v228;
                    *(void *)(v149 + 24) = v142;
                    *(void *)(v149 + 32) = v237;
                    *(_DWORD *)(v149 + 39) = *(_DWORD *)((char *)&v237 + 7);
                  }
                }
                int64_t v130 = v131 - 1;
              }
              while (v131);
              int64_t v165 = v14 / 0x30uLL;
              do
              {
                uint64_t v166 = 0;
                *(_OWORD *)v229 = *(_OWORD *)(v13 + 16);
                *(_OWORD *)&v229[16] = *(_OWORD *)(v13 + 32);
                long long v221 = *(_OWORD *)v13;
                uint64_t v167 = v165 - 2;
                if (v165 < 2) {
                  uint64_t v167 = v165 - 1;
                }
                uint64_t v168 = v167 >> 1;
                unint64_t v169 = v13;
                do
                {
                  v170 = (_OWORD *)v169;
                  v169 += 48 * v166 + 48;
                  uint64_t v171 = 2 * v166;
                  uint64_t v166 = (2 * v166) | 1;
                  uint64_t v172 = v171 + 2;
                  if (v171 + 2 < v165)
                  {
                    uint64_t v173 = *(void *)(v169 + 24);
                    uint64_t v174 = *(void *)(v169 + 72);
                    if (v173 != v174)
                    {
                      v176 = *(char **)(*(void *)a3 + 336);
                      v175 = *(char **)(*(void *)a3 + 344);
                      v177 = v176;
                      v178 = v176;
                      if (v176 != v175)
                      {
                        do
                        {
                          if (*(void *)v178 == v173) {
                            goto LABEL_273;
                          }
                          v178 += 8;
                        }
                        while (v178 != v175);
                        v178 = *(char **)(*(void *)a3 + 344);
LABEL_273:
                        while (*(void *)v177 != v174)
                        {
                          v177 += 8;
                          if (v177 == v175)
                          {
                            v177 = *(char **)(*(void *)a3 + 344);
                            break;
                          }
                        }
                      }
                      v169 += 48 * (v178 - v176 < v177 - v176);
                      if (v178 - v176 < v177 - v176) {
                        uint64_t v166 = v172;
                      }
                    }
                  }
                  long long v179 = *(_OWORD *)v169;
                  long long v180 = *(_OWORD *)(v169 + 16);
                  *(_OWORD *)((char *)v170 + 27) = *(_OWORD *)(v169 + 27);
                  _OWORD *v170 = v179;
                  v170[1] = v180;
                }
                while (v166 <= v168);
                a2 -= 3;
                if ((long long *)v169 == a2)
                {
                  *(_OWORD *)(v169 + 27) = *(_OWORD *)&v229[11];
                  *(_OWORD *)unint64_t v169 = v221;
                  *(_OWORD *)(v169 + 16) = *(_OWORD *)v229;
                }
                else
                {
                  long long v181 = *a2;
                  long long v182 = a2[1];
                  *(_OWORD *)(v169 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v169 = v181;
                  *(_OWORD *)(v169 + 16) = v182;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v229[11];
                  *a2 = v221;
                  a2[1] = *(_OWORD *)v229;
                  uint64_t v183 = v169 - v13 + 48;
                  if (v183 >= 49)
                  {
                    unint64_t v184 = (v183 / 0x30uLL - 2) >> 1;
                    unint64_t v185 = v13 + 48 * v184;
                    uint64_t v186 = *(void *)(v185 + 24);
                    uint64_t v187 = *(void *)(v169 + 24);
                    if (v186 != v187)
                    {
                      v189 = *(char **)(*(void *)a3 + 336);
                      v188 = *(char **)(*(void *)a3 + 344);
                      v190 = v189;
                      v191 = v189;
                      if (v189 != v188)
                      {
                        do
                        {
                          if (*(void *)v191 == v186) {
                            goto LABEL_286;
                          }
                          v191 += 8;
                        }
                        while (v191 != v188);
                        v191 = *(char **)(*(void *)a3 + 344);
LABEL_286:
                        while (*(void *)v190 != v187)
                        {
                          v190 += 8;
                          if (v190 == v188)
                          {
                            v190 = *(char **)(*(void *)a3 + 344);
                            break;
                          }
                        }
                      }
                      if (v191 - v189 < v190 - v189)
                      {
                        uint64_t v242 = *(void *)(v169 + 16);
                        long long v238 = *(_OWORD *)v169;
                        long long v233 = *(_OWORD *)(v169 + 32);
                        do
                        {
                          v192 = (_OWORD *)v169;
                          unint64_t v169 = v185;
                          long long v193 = *(_OWORD *)v185;
                          long long v194 = *(_OWORD *)(v185 + 16);
                          *(_OWORD *)((char *)v192 + 27) = *(_OWORD *)(v185 + 27);
                          _OWORD *v192 = v193;
                          v192[1] = v194;
                          if (!v184) {
                            break;
                          }
                          unint64_t v184 = (v184 - 1) >> 1;
                          unint64_t v185 = v13 + 48 * v184;
                          uint64_t v195 = *(void *)(v185 + 24);
                          if (v195 == v187) {
                            break;
                          }
                          v197 = *(char **)(*(void *)a3 + 336);
                          v196 = *(char **)(*(void *)a3 + 344);
                          v198 = v197;
                          v199 = v197;
                          if (v197 != v196)
                          {
                            do
                            {
                              if (*(void *)v199 == v195) {
                                goto LABEL_297;
                              }
                              v199 += 8;
                            }
                            while (v199 != v196);
                            v199 = *(char **)(*(void *)a3 + 344);
LABEL_297:
                            while (*(void *)v198 != v187)
                            {
                              v198 += 8;
                              if (v198 == v196)
                              {
                                v198 = *(char **)(*(void *)a3 + 344);
                                break;
                              }
                            }
                          }
                        }
                        while (v199 - v197 < v198 - v197);
                        *(_OWORD *)unint64_t v169 = v238;
                        *(void *)(v169 + 16) = v242;
                        *(void *)(v169 + 24) = v187;
                        *(void *)(v169 + 32) = v233;
                        *(_DWORD *)(v169 + 39) = *(_DWORD *)((char *)&v233 + 7);
                      }
                    }
                  }
                }
              }
              while (v165-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          double v17 = (long long *)(v13 + 48 * (v15 >> 1));
          if ((unint64_t)v14 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v15 >> 1)), a2 - 3, a3);
            uint64_t v18 = 3 * v16;
            char v19 = (long long *)(a1 + 48 * v16 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)(a1 + 48), v19, a2 - 6, a3);
            uint64_t v20 = (long long *)(a1 + 48 + 16 * v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)(a1 + 96), v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(v19, v17, v20, a3);
            *(_OWORD *)v223 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v223[16] = *(_OWORD *)(a1 + 32);
            long long v216 = *(_OWORD *)a1;
            long long v21 = *(long long *)((char *)v17 + 27);
            long long v22 = v17[1];
            *(_OWORD *)a1 = *v17;
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(a1 + 27) = v21;
            *(long long *)((char *)v17 + 27) = *(_OWORD *)&v223[11];
            long long *v17 = v216;
            v17[1] = *(_OWORD *)v223;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)(a1 + 48 * (v15 >> 1)), (long long *)a1, a2 - 3, a3);
          }
          --a4;
          if (a5)
          {
            uint64_t v23 = *(void *)(a1 + 24);
            uint64_t v24 = *(void *)a3;
            break;
          }
          uint64_t v25 = *(void *)(a1 - 24);
          uint64_t v23 = *(void *)(a1 + 24);
          if (v25 != v23)
          {
            uint64_t v24 = *(void *)a3;
            double v26 = *(char **)(*(void *)a3 + 336);
            double v27 = *(char **)(*(void *)a3 + 344);
            int v28 = v26;
            uint64_t v29 = v26;
            if (v26 != v27)
            {
              do
              {
                if (*(void *)v29 == v25) {
                  goto LABEL_16;
                }
                v29 += 8;
              }
              while (v29 != v27);
              uint64_t v29 = *(char **)(*(void *)a3 + 344);
LABEL_16:
              while (*(void *)v28 != v23)
              {
                v28 += 8;
                if (v28 == v27)
                {
                  int v28 = *(char **)(*(void *)a3 + 344);
                  break;
                }
              }
            }
            if (v29 - v26 < v28 - v26) {
              break;
            }
          }
          uint64_t v241 = *(void *)(a1 + 16);
          long long v232 = *(_OWORD *)(a1 + 32);
          long long v235 = *(_OWORD *)a1;
          uint64_t v67 = *((void *)a2 - 3);
          if (v23 == v67) {
            goto LABEL_107;
          }
          long long v68 = *(char **)(*(void *)a3 + 336);
          uint64_t v69 = *(char **)(*(void *)a3 + 344);
          if (v68 == v69)
          {
            unint64_t v71 = *(char **)(*(void *)a3 + 336);
            unint64_t v70 = v71;
          }
          else
          {
            unint64_t v70 = *(char **)(*(void *)a3 + 336);
            while (*(void *)v70 != v23)
            {
              v70 += 8;
              if (v70 == v69)
              {
                unint64_t v70 = *(char **)(*(void *)a3 + 344);
                break;
              }
            }
            unint64_t v71 = *(char **)(*(void *)a3 + 336);
            while (*(void *)v71 != v67)
            {
              v71 += 8;
              if (v71 == v69)
              {
                unint64_t v71 = *(char **)(*(void *)a3 + 344);
                break;
              }
            }
          }
          if (v70 - v68 >= v71 - v68)
          {
LABEL_107:
            unint64_t v13 = a1 + 48;
            if (a1 + 48 < (unint64_t)a2)
            {
              uint64_t v75 = *(void *)a3;
              unint64_t v76 = a1;
              do
              {
                uint64_t v77 = *(void *)(v76 + 72);
                unint64_t v76 = v13;
                if (v23 != v77)
                {
                  int v78 = *(char **)(v75 + 336);
                  id v79 = *(char **)(v75 + 344);
                  BOOL v80 = v78;
                  long long v81 = v78;
                  if (v78 != v79)
                  {
                    do
                    {
                      if (*(void *)v81 == v23) {
                        goto LABEL_114;
                      }
                      v81 += 8;
                    }
                    while (v81 != v79);
                    long long v81 = *(char **)(v75 + 344);
LABEL_114:
                    while (*(void *)v80 != v77)
                    {
                      v80 += 8;
                      if (v80 == v79)
                      {
                        BOOL v80 = *(char **)(v75 + 344);
                        break;
                      }
                    }
                  }
                  if (v81 - v78 < v80 - v78) {
                    break;
                  }
                }
                v13 += 48;
              }
              while (v76 + 48 < (unint64_t)a2);
            }
          }
          else
          {
            unint64_t v13 = a1;
            do
            {
              do
              {
                uint64_t v72 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v72);
              if (v68 == v69)
              {
                uint64_t v74 = *(char **)(*(void *)a3 + 336);
                unint64_t v73 = v74;
              }
              else
              {
                unint64_t v73 = *(char **)(*(void *)a3 + 336);
                while (*(void *)v73 != v23)
                {
                  v73 += 8;
                  if (v73 == v69)
                  {
                    unint64_t v73 = *(char **)(*(void *)a3 + 344);
                    break;
                  }
                }
                uint64_t v74 = *(char **)(*(void *)a3 + 336);
                while (*(void *)v74 != v72)
                {
                  v74 += 8;
                  if (v74 == v69)
                  {
                    uint64_t v74 = *(char **)(*(void *)a3 + 344);
                    break;
                  }
                }
              }
            }
            while (v73 - v68 >= v74 - v68);
          }
          long long v82 = a2;
          if (v13 < (unint64_t)a2)
          {
            uint64_t v83 = *(void *)a3;
            long long v82 = a2;
            do
            {
              uint64_t v84 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v84) {
                break;
              }
              int64_t v85 = *(char **)(v83 + 336);
              uint64_t v86 = *(char **)(v83 + 344);
              long long v87 = v85;
              long long v88 = v85;
              if (v85 != v86)
              {
                do
                {
                  if (*(void *)v88 == v23) {
                    goto LABEL_126;
                  }
                  v88 += 8;
                }
                while (v88 != v86);
                long long v88 = *(char **)(v83 + 344);
LABEL_126:
                while (*(void *)v87 != v84)
                {
                  v87 += 8;
                  if (v87 == v86)
                  {
                    long long v87 = *(char **)(v83 + 344);
                    break;
                  }
                }
              }
            }
            while (v88 - v85 < v87 - v85);
          }
          while (v13 < (unint64_t)v82)
          {
            *(_OWORD *)v225 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v225[16] = *(_OWORD *)(v13 + 32);
            long long v217 = *(_OWORD *)v13;
            long long v89 = *v82;
            long long v90 = v82[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v82 + 27);
            *(_OWORD *)unint64_t v13 = v89;
            *(_OWORD *)(v13 + 16) = v90;
            *(long long *)((char *)v82 + 27) = *(_OWORD *)&v225[11];
            *long long v82 = v217;
            v82[1] = *(_OWORD *)v225;
            uint64_t v91 = *(void *)a3;
            do
            {
              do
              {
                uint64_t v92 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v92);
              long long v93 = *(char **)(v91 + 336);
              unint64_t v94 = *(char **)(v91 + 344);
              if (v93 == v94)
              {
                uint64_t v96 = *(char **)(v91 + 336);
                id v95 = v96;
              }
              else
              {
                id v95 = *(char **)(v91 + 336);
                while (*(void *)v95 != v23)
                {
                  v95 += 8;
                  if (v95 == v94)
                  {
                    id v95 = *(char **)(v91 + 344);
                    break;
                  }
                }
                uint64_t v96 = *(char **)(v91 + 336);
                while (*(void *)v96 != v92)
                {
                  v96 += 8;
                  if (v96 == v94)
                  {
                    uint64_t v96 = *(char **)(v91 + 344);
                    break;
                  }
                }
              }
            }
            while (v95 - v93 >= v96 - v93);
            do
            {
              uint64_t v97 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v97) {
                break;
              }
              if (v93 == v94)
              {
                double v99 = v93;
                id v98 = v93;
              }
              else
              {
                id v98 = v93;
                while (*(void *)v98 != v23)
                {
                  v98 += 8;
                  if (v98 == v94)
                  {
                    id v98 = v94;
                    break;
                  }
                }
                double v99 = v93;
                while (*(void *)v99 != v97)
                {
                  v99 += 8;
                  if (v99 == v94)
                  {
                    double v99 = v94;
                    break;
                  }
                }
              }
            }
            while (v98 - v93 < v99 - v93);
          }
          long long v100 = (long long *)(v13 - 48);
          BOOL v5 = v13 - 48 >= a1;
          BOOL v6 = v13 - 48 == a1;
          if (v13 - 48 != a1)
          {
            long long v101 = *v100;
            long long v102 = *(_OWORD *)(v13 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
            *(_OWORD *)a1 = v101;
            *(_OWORD *)(a1 + 16) = v102;
          }
          a5 = 0;
          *long long v100 = v235;
          *(void *)(v13 - 32) = v241;
          *(void *)(v13 - 24) = v23;
          *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v232 + 7);
          *(void *)(v13 - 16) = v232;
        }
        uint64_t v240 = *(void *)(a1 + 16);
        long long v231 = *(_OWORD *)(a1 + 32);
        long long v234 = *(_OWORD *)a1;
        unint64_t v30 = a1;
        do
        {
          unint64_t v31 = v30;
          v30 += 48;
          uint64_t v32 = *(void *)(v31 + 72);
          if (v32 == v23) {
            break;
          }
          uint64_t v33 = *(char **)(v24 + 336);
          double v34 = *(char **)(v24 + 344);
          double v35 = v33;
          long long v36 = v33;
          if (v33 != v34)
          {
            do
            {
              if (*(void *)v36 == v32) {
                goto LABEL_26;
              }
              v36 += 8;
            }
            while (v36 != v34);
            long long v36 = *(char **)(v24 + 344);
LABEL_26:
            while (*(void *)v35 != v23)
            {
              v35 += 8;
              if (v35 == v34)
              {
                double v35 = *(char **)(v24 + 344);
                break;
              }
            }
          }
        }
        while (v36 - v33 < v35 - v33);
        double v37 = a2;
        if (v31 == a1)
        {
          double v37 = a2;
          if (v30 < (unint64_t)a2)
          {
            double v37 = a2;
            do
            {
              uint64_t v43 = *((void *)v37 - 3);
              v37 -= 3;
              if (v43 != v23)
              {
                double v44 = *(char **)(v24 + 336);
                uint64_t v45 = *(char **)(v24 + 344);
                uint64_t v46 = v44;
                long long v47 = v44;
                if (v44 != v45)
                {
                  do
                  {
                    if (*(void *)v47 == v43) {
                      goto LABEL_48;
                    }
                    v47 += 8;
                  }
                  while (v47 != v45);
                  long long v47 = *(char **)(v24 + 344);
LABEL_48:
                  while (*(void *)v46 != v23)
                  {
                    v46 += 8;
                    if (v46 == v45)
                    {
                      uint64_t v46 = *(char **)(v24 + 344);
                      break;
                    }
                  }
                }
                if (v47 - v44 < v46 - v44) {
                  break;
                }
              }
            }
            while (v30 < (unint64_t)v37);
          }
        }
        else
        {
          do
          {
            do
            {
              uint64_t v38 = *((void *)v37 - 3);
              v37 -= 3;
            }
            while (v38 == v23);
            double v39 = *(char **)(v24 + 336);
            double v40 = *(char **)(v24 + 344);
            double v41 = v39;
            uint64_t v42 = v39;
            if (v39 != v40)
            {
              do
              {
                if (*(void *)v42 == v38) {
                  goto LABEL_36;
                }
                v42 += 8;
              }
              while (v42 != v40);
              uint64_t v42 = *(char **)(v24 + 344);
LABEL_36:
              while (*(void *)v41 != v23)
              {
                v41 += 8;
                if (v41 == v40)
                {
                  double v41 = *(char **)(v24 + 344);
                  break;
                }
              }
            }
          }
          while (v42 - v39 >= v41 - v39);
        }
        unint64_t v13 = v30;
        if (v30 < (unint64_t)v37)
        {
          long long v48 = v37;
          do
          {
            *(_OWORD *)v224 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v224[16] = *(_OWORD *)(v13 + 32);
            long long v49 = *(_OWORD *)v13;
            long long v51 = *v48;
            long long v50 = v48[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v48 + 27);
            *(_OWORD *)unint64_t v13 = v51;
            *(_OWORD *)(v13 + 16) = v50;
            *(long long *)((char *)v48 + 27) = *(_OWORD *)&v224[11];
            long long *v48 = v49;
            v48[1] = *(_OWORD *)v224;
            uint64_t v52 = *(void *)a3;
            do
            {
              uint64_t v53 = *(void *)(v13 + 72);
              v13 += 48;
              if (v53 == v23) {
                break;
              }
              BOOL v54 = *(char **)(v52 + 336);
              BOOL v55 = *(char **)(v52 + 344);
              int v56 = v54;
              unint64_t v57 = v54;
              if (v54 != v55)
              {
                do
                {
                  if (*(void *)v57 == v53) {
                    goto LABEL_61;
                  }
                  v57 += 8;
                }
                while (v57 != v55);
                unint64_t v57 = *(char **)(v52 + 344);
LABEL_61:
                while (*(void *)v56 != v23)
                {
                  v56 += 8;
                  if (v56 == v55)
                  {
                    int v56 = *(char **)(v52 + 344);
                    break;
                  }
                }
              }
            }
            while (v57 - v54 < v56 - v54);
            do
            {
              do
              {
                uint64_t v58 = *((void *)v48 - 3);
                v48 -= 3;
              }
              while (v58 == v23);
              long long v59 = *(char **)(v52 + 336);
              long long v60 = *(char **)(v52 + 344);
              unint64_t v61 = v59;
              char v62 = v59;
              if (v59 != v60)
              {
                do
                {
                  if (*(void *)v62 == v58) {
                    goto LABEL_70;
                  }
                  v62 += 8;
                }
                while (v62 != v60);
                char v62 = *(char **)(v52 + 344);
LABEL_70:
                while (*(void *)v61 != v23)
                {
                  v61 += 8;
                  if (v61 == v60)
                  {
                    unint64_t v61 = *(char **)(v52 + 344);
                    break;
                  }
                }
              }
            }
            while (v62 - v59 >= v61 - v59);
          }
          while (v13 < (unint64_t)v48);
        }
        double v63 = (long long *)(v13 - 48);
        if (v13 - 48 != a1)
        {
          long long v64 = *v63;
          long long v65 = *(_OWORD *)(v13 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
          *(_OWORD *)a1 = v64;
          *(_OWORD *)(a1 + 16) = v65;
        }
        long long *v63 = v234;
        *(void *)(v13 - 32) = v240;
        *(void *)(v13 - 24) = v23;
        *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v231 + 7);
        *(void *)(v13 - 16) = v231;
        if (v30 >= (unint64_t)v37) {
          break;
        }
LABEL_80:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(a1, v13 - 48, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, v13 - 48, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(v13, (uint64_t)a2, a3))
      {
        break;
      }
      if (!v66) {
        goto LABEL_80;
      }
    }
    a2 = (long long *)(v13 - 48);
    if (!v66) {
      continue;
    }
    break;
  }
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(long long *a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = *((void *)a2 + 3);
  uint64_t v5 = *((void *)a1 + 3);
  if (v4 == v5) {
    goto LABEL_23;
  }
  BOOL v6 = *(char **)(*(void *)a4 + 336);
  uint64_t v7 = *(char **)(*(void *)a4 + 344);
  if (v6 == v7)
  {
    id v9 = *(char **)(*(void *)a4 + 336);
    uint64_t v8 = v9;
  }
  else
  {
    uint64_t v8 = *(char **)(*(void *)a4 + 336);
    while (*(void *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        uint64_t v8 = *(char **)(*(void *)a4 + 344);
        break;
      }
    }
    id v9 = *(char **)(*(void *)a4 + 336);
    while (*(void *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        id v9 = *(char **)(*(void *)a4 + 344);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    uint64_t v13 = *((void *)a3 + 3);
    if (v13 != v4)
    {
      uint64_t v14 = *(char **)(*(void *)a4 + 336);
      unint64_t v15 = *(char **)(*(void *)a4 + 344);
      unint64_t v16 = v14;
      double v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(void *)v17 == v13) {
            goto LABEL_28;
          }
          v17 += 8;
        }
        while (v17 != v15);
        double v17 = *(char **)(*(void *)a4 + 344);
LABEL_28:
        while (*(void *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            unint64_t v16 = *(char **)(*(void *)a4 + 344);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        long long v18 = *a2;
        *(_OWORD *)uint64_t v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        long long v19 = *(long long *)((char *)a3 + 27);
        long long v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(long long *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        __n128 result = *(__n128 *)&v46[11];
        *(long long *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        uint64_t v22 = *((void *)a2 + 3);
        uint64_t v23 = *((void *)a1 + 3);
        if (v22 != v23)
        {
          uint64_t v24 = *(char **)(*(void *)a4 + 336);
          uint64_t v25 = *(char **)(*(void *)a4 + 344);
          double v26 = v24;
          double v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(void *)v27 == v22) {
                goto LABEL_37;
              }
              v27 += 8;
            }
            while (v27 != v25);
            double v27 = *(char **)(*(void *)a4 + 344);
LABEL_37:
            while (*(void *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                double v26 = *(char **)(*(void *)a4 + 344);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            long long v28 = *a1;
            *(_OWORD *)long long v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            long long v29 = *(long long *)((char *)a2 + 27);
            long long v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(long long *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            __n128 result = *(__n128 *)&v47[11];
            *(long long *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    uint64_t v10 = *((void *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        unint64_t v12 = *(char **)(*(void *)a4 + 336);
        int v11 = v12;
      }
      else
      {
        int v11 = *(char **)(*(void *)a4 + 336);
        while (*(void *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            int v11 = *(char **)(*(void *)a4 + 344);
            break;
          }
        }
        unint64_t v12 = *(char **)(*(void *)a4 + 336);
        while (*(void *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            unint64_t v12 = *(char **)(*(void *)a4 + 344);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        long long v31 = a1[1];
        long long v32 = *a1;
        *(void *)long long v49 = *((void *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        long long v33 = *(long long *)((char *)a3 + 27);
        long long v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(long long *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        __n128 result = *(__n128 *)&v49[3];
        *(long long *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    long long v35 = *a1;
    *(_OWORD *)long long v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    long long v36 = *(long long *)((char *)a2 + 27);
    long long v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(long long *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    __n128 result = *(__n128 *)&v48[11];
    *(long long *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    uint64_t v38 = *((void *)a3 + 3);
    uint64_t v39 = *((void *)a2 + 3);
    if (v38 != v39)
    {
      double v40 = *(char **)(*(void *)a4 + 336);
      double v41 = *(char **)(*(void *)a4 + 344);
      uint64_t v42 = v40;
      uint64_t v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(void *)v43 == v38) {
            goto LABEL_50;
          }
          v43 += 8;
        }
        while (v43 != v41);
        uint64_t v43 = *(char **)(*(void *)a4 + 344);
LABEL_50:
        while (*(void *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            uint64_t v42 = *(char **)(*(void *)a4 + 344);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        long long v31 = a2[1];
        long long v32 = *a2;
        *(void *)long long v49 = *((void *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        long long v44 = *(long long *)((char *)a3 + 27);
        long long v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(long long *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 - 24);
      uint64_t v9 = *(void *)(a1 + 24);
      if (v8 == v9) {
        return result;
      }
      uint64_t v10 = *(char **)(*(void *)a3 + 336);
      int v11 = *(char **)(*(void *)a3 + 344);
      unint64_t v12 = v10;
      uint64_t v13 = v10;
      if (v10 == v11) {
        goto LABEL_10;
      }
      do
      {
        if (*(void *)v13 == v8) {
          goto LABEL_7;
        }
        v13 += 8;
      }
      while (v13 != v11);
      uint64_t v13 = *(char **)(*(void *)a3 + 344);
      do
      {
LABEL_7:
        if (*(void *)v12 == v9) {
          goto LABEL_10;
        }
        v12 += 8;
      }
      while (v12 != v11);
      unint64_t v12 = *(char **)(*(void *)a3 + 344);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        uint64_t v14 = (long long *)(a2 - 48);
        long long v15 = *(_OWORD *)a1;
        *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        long long v16 = *(_OWORD *)(a2 - 21);
        long long v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *uint64_t v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(long long *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), a3);
      uint64_t v19 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      int v20 = 0;
      break;
  }
  while (1)
  {
    uint64_t v21 = *(void *)(v19 + 24);
    uint64_t v22 = *(void *)(v18 + 24);
    if (v21 != v22)
    {
      uint64_t v23 = *(char **)(*(void *)a3 + 336);
      uint64_t v24 = *(char **)(*(void *)a3 + 344);
      uint64_t v25 = v23;
      double v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(void *)v26 == v21) {
            goto LABEL_19;
          }
          v26 += 8;
        }
        while (v26 != v24);
        double v26 = *(char **)(*(void *)a3 + 344);
LABEL_19:
        while (*(void *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            uint64_t v25 = *(char **)(*(void *)a3 + 344);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        long long v34 = *(_OWORD *)v19;
        uint64_t v36 = *(void *)(v19 + 16);
        long long v37 = *(_OWORD *)(v19 + 32);
        uint64_t v27 = v19;
        while (1)
        {
          long long v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1) {
            break;
          }
          uint64_t v27 = v18;
          uint64_t v29 = *(void *)(v18 - 24);
          if (v21 != v29)
          {
            long long v30 = *(char **)(*(void *)a3 + 336);
            long long v31 = *(char **)(*(void *)a3 + 344);
            long long v32 = v30;
            long long v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(void *)v33 == v21) {
                  goto LABEL_30;
                }
                v33 += 8;
              }
              while (v33 != v31);
              long long v33 = *(char **)(*(void *)a3 + 344);
LABEL_30:
              while (*(void *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  long long v32 = *(char **)(*(void *)a3 + 344);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30) {
              continue;
            }
          }
          goto LABEL_36;
        }
        uint64_t v27 = a1;
LABEL_36:
        *(_OWORD *)uint64_t v27 = v34;
        *(void *)(v27 + 16) = v36;
        *(void *)(v27 + 24) = v21;
        *(void *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8) {
          return v19 + 48 == a2;
        }
      }
    }
    uint64_t v18 = v19;
    v19 += 48;
    if (v19 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)a2, (long long *)a3, a5).n128_u64[0];
  uint64_t v11 = *(void *)(a4 + 24);
  uint64_t v12 = *(void *)(a3 + 24);
  if (v11 != v12)
  {
    uint64_t v13 = *(char **)(*(void *)a5 + 336);
    uint64_t v14 = *(char **)(*(void *)a5 + 344);
    long long v15 = v13;
    long long v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(void *)v16 == v11) {
          goto LABEL_6;
        }
        v16 += 8;
      }
      while (v16 != v14);
      long long v16 = *(char **)(*(void *)a5 + 344);
LABEL_6:
      while (*(void *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          long long v15 = *(char **)(*(void *)a5 + 344);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      long long v17 = *(_OWORD *)a3;
      *(_OWORD *)uint64_t v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      long long v18 = *(_OWORD *)(a4 + 27);
      long long v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v38;
      __n128 result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      uint64_t v20 = *(void *)(a3 + 24);
      uint64_t v21 = *(void *)(a2 + 24);
      if (v20 != v21)
      {
        uint64_t v22 = *(char **)(*(void *)a5 + 336);
        uint64_t v23 = *(char **)(*(void *)a5 + 344);
        uint64_t v24 = v22;
        uint64_t v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(void *)v25 == v20) {
              goto LABEL_15;
            }
            v25 += 8;
          }
          while (v25 != v23);
          uint64_t v25 = *(char **)(*(void *)a5 + 344);
LABEL_15:
          while (*(void *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              uint64_t v24 = *(char **)(*(void *)a5 + 344);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          long long v26 = *(_OWORD *)a2;
          *(_OWORD *)uint64_t v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          long long v27 = *(_OWORD *)(a3 + 27);
          long long v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 16) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)v39;
          __n128 result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          uint64_t v29 = *(void *)(a2 + 24);
          uint64_t v30 = *(void *)(a1 + 24);
          if (v29 != v30)
          {
            long long v31 = *(char **)(*(void *)a5 + 336);
            long long v32 = *(char **)(*(void *)a5 + 344);
            long long v33 = v31;
            long long v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(void *)v34 == v29) {
                  goto LABEL_24;
                }
                v34 += 8;
              }
              while (v34 != v32);
              long long v34 = *(char **)(*(void *)a5 + 344);
LABEL_24:
              while (*(void *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  long long v33 = *(char **)(*(void *)a5 + 344);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              long long v35 = *(_OWORD *)a1;
              *(_OWORD *)double v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              long long v36 = *(_OWORD *)(a2 + 27);
              long long v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 16) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 16) = *(_OWORD *)v40;
              __n128 result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  uint64_t v13 = *(void *)(a5 + 24);
  uint64_t v14 = *(void *)(a4 + 24);
  if (v13 != v14)
  {
    long long v15 = *(char **)(*(void *)a6 + 336);
    long long v16 = *(char **)(*(void *)a6 + 344);
    long long v17 = v15;
    long long v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(void *)v18 == v13) {
          goto LABEL_6;
        }
        v18 += 8;
      }
      while (v18 != v16);
      long long v18 = *(char **)(*(void *)a6 + 344);
LABEL_6:
      while (*(void *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          long long v17 = *(char **)(*(void *)a6 + 344);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      long long v19 = *(_OWORD *)a4;
      *(_OWORD *)long long v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      long long v20 = *(_OWORD *)(a5 + 27);
      long long v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 16) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v49;
      __n128 result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      uint64_t v22 = *(void *)(a4 + 24);
      uint64_t v23 = *(void *)(a3 + 24);
      if (v22 != v23)
      {
        uint64_t v24 = *(char **)(*(void *)a6 + 336);
        uint64_t v25 = *(char **)(*(void *)a6 + 344);
        long long v26 = v24;
        long long v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(void *)v27 == v22) {
              goto LABEL_15;
            }
            v27 += 8;
          }
          while (v27 != v25);
          long long v27 = *(char **)(*(void *)a6 + 344);
LABEL_15:
          while (*(void *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              long long v26 = *(char **)(*(void *)a6 + 344);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          long long v28 = *(_OWORD *)a3;
          *(_OWORD *)long long v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          long long v29 = *(_OWORD *)(a4 + 27);
          long long v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 16) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 16) = *(_OWORD *)v50;
          __n128 result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          uint64_t v31 = *(void *)(a3 + 24);
          uint64_t v32 = *(void *)(a2 + 24);
          if (v31 != v32)
          {
            long long v33 = *(char **)(*(void *)a6 + 336);
            long long v34 = *(char **)(*(void *)a6 + 344);
            long long v35 = v33;
            long long v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(void *)v36 == v31) {
                  goto LABEL_24;
                }
                v36 += 8;
              }
              while (v36 != v34);
              long long v36 = *(char **)(*(void *)a6 + 344);
LABEL_24:
              while (*(void *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  long long v35 = *(char **)(*(void *)a6 + 344);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              long long v37 = *(_OWORD *)a2;
              *(_OWORD *)long long v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              long long v38 = *(_OWORD *)(a3 + 27);
              long long v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 16) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 16) = *(_OWORD *)v51;
              __n128 result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              uint64_t v40 = *(void *)(a2 + 24);
              uint64_t v41 = *(void *)(a1 + 24);
              if (v40 != v41)
              {
                uint64_t v42 = *(char **)(*(void *)a6 + 336);
                uint64_t v43 = *(char **)(*(void *)a6 + 344);
                long long v44 = v42;
                long long v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(void *)v45 == v40) {
                      goto LABEL_33;
                    }
                    v45 += 8;
                  }
                  while (v45 != v43);
                  long long v45 = *(char **)(*(void *)a6 + 344);
LABEL_33:
                  while (*(void *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      long long v44 = *(char **)(*(void *)a6 + 344);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  long long v46 = *(_OWORD *)a1;
                  *(_OWORD *)uint64_t v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  long long v47 = *(_OWORD *)(a2 + 27);
                  long long v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 16) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 16) = *(_OWORD *)v52;
                  __n128 result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v10) >> 4);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*((double *)a2 - 5) < *(double *)(v10 + 8))
                {
                  *(_OWORD *)uint64_t v118 = *(_OWORD *)(v10 + 16);
                  *(_OWORD *)&v118[16] = *(_OWORD *)(v10 + 32);
                  long long v110 = *(_OWORD *)v10;
                  long long v52 = *(a2 - 3);
                  long long v53 = *(a2 - 2);
                  *(_OWORD *)(v10 + 27) = *(long long *)((char *)a2 - 21);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(long long *)((char *)a2 - 21) = *(_OWORD *)&v118[11];
                  *(a2 - 3) = v110;
                  *(a2 - 2) = *(_OWORD *)v118;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)v10, (long long *)(v10 + 48), a2 - 3);
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v10, v10 + 48, v10 + 96, (uint64_t)(a2 - 3));
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v10, v10 + 48, v10 + 96, v10 + 144, (uint64_t)(a2 - 3));
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 1151)
          {
            BOOL v54 = (long long *)(v10 + 48);
            BOOL v56 = (long long *)v10 == a2 || v54 == a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  long long v59 = v54;
                  double v60 = *(double *)(v58 + 56);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *(void *)v54;
                    *(_OWORD *)long long v111 = *(_OWORD *)(v58 + 64);
                    *(_OWORD *)&v111[16] = *(_OWORD *)(v58 + 80);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      double v63 = (_OWORD *)(v10 + v62);
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      v63[3] = *(_OWORD *)(v10 + v62);
                      v63[4] = v64;
                      *(_OWORD *)((char *)v63 + 75) = *(_OWORD *)(v10 + v62 + 27);
                      if (!v62) {
                        break;
                      }
                      v62 -= 48;
                      if (v60 >= *((double *)v63 - 5))
                      {
                        uint64_t v65 = v10 + v62 + 48;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = *(_OWORD *)v111;
                    *(_OWORD *)(v65 + 27) = *(_OWORD *)&v111[11];
                  }
                  BOOL v54 = v59 + 3;
                  v57 += 48;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 3 != a2);
              }
            }
            else if (!v56)
            {
              do
              {
                id v98 = v54;
                double v99 = *(double *)(a1 + 56);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *(void *)v54;
                  *(_OWORD *)unint64_t v114 = *(_OWORD *)(a1 + 64);
                  *(_OWORD *)&v114[16] = *(_OWORD *)(a1 + 80);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(v101 - 2);
                    long long *v101 = *(v101 - 3);
                    v101[1] = v102;
                    *(long long *)((char *)v101 + 27) = *(long long *)((char *)v101 - 21);
                    double v103 = *((double *)v101 - 11);
                    v101 -= 3;
                  }
                  while (v99 < v103);
                  *(void *)long long v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *(long long *)((char *)v101 + 27) = *(_OWORD *)&v114[11];
                  v101[1] = *(_OWORD *)v114;
                }
                v54 += 3;
                a1 = (unint64_t)v98;
              }
              while (v98 + 3 != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((long long *)v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 48 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v70 + 8) < *(double *)(v70 + 56))
                  {
                    v70 += 48;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  unint64_t v71 = v10 + 48 * v68;
                  double v72 = *(double *)(v71 + 8);
                  if (*(double *)(v70 + 8) >= v72)
                  {
                    uint64_t v73 = *(void *)v71;
                    *(_OWORD *)long long v112 = *(_OWORD *)(v71 + 16);
                    *(_OWORD *)&v112[16] = *(_OWORD *)(v71 + 32);
                    do
                    {
                      uint64_t v74 = (_OWORD *)v71;
                      unint64_t v71 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_OWORD *)((char *)v74 + 27) = *(_OWORD *)(v70 + 27);
                      *uint64_t v74 = v75;
                      v74[1] = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = 2 * v69;
                      uint64_t v69 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 48 * v69;
                      uint64_t v78 = v77 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v70 + 8) < *(double *)(v70 + 56))
                      {
                        v70 += 48;
                        uint64_t v69 = v78;
                      }
                    }
                    while (*(double *)(v70 + 8) >= v72);
                    *(void *)unint64_t v71 = v73;
                    *(double *)(v71 + 8) = v72;
                    *(_OWORD *)(v71 + 16) = *(_OWORD *)v112;
                    *(_OWORD *)(v71 + 27) = *(_OWORD *)&v112[11];
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x30uLL;
              do
              {
                uint64_t v80 = 0;
                *(_OWORD *)long long v119 = *(_OWORD *)(v10 + 16);
                *(_OWORD *)&v119[16] = *(_OWORD *)(v10 + 32);
                long long v113 = *(_OWORD *)v10;
                unint64_t v81 = v10;
                do
                {
                  long long v82 = (_OWORD *)v81;
                  v81 += 48 * v80 + 48;
                  uint64_t v83 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v84 = v83 + 2;
                  if (v84 < v79 && *(double *)(v81 + 8) < *(double *)(v81 + 56))
                  {
                    v81 += 48;
                    uint64_t v80 = v84;
                  }
                  long long v85 = *(_OWORD *)v81;
                  long long v86 = *(_OWORD *)(v81 + 16);
                  *(_OWORD *)((char *)v82 + 27) = *(_OWORD *)(v81 + 27);
                  *long long v82 = v85;
                  v82[1] = v86;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 3;
                if ((long long *)v81 == a2)
                {
                  *(_OWORD *)(v81 + 27) = *(_OWORD *)&v119[11];
                  *(_OWORD *)unint64_t v81 = v113;
                  *(_OWORD *)(v81 + 16) = *(_OWORD *)v119;
                }
                else
                {
                  long long v87 = *a2;
                  long long v88 = a2[1];
                  *(_OWORD *)(v81 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v81 = v87;
                  *(_OWORD *)(v81 + 16) = v88;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v119[11];
                  *a2 = v113;
                  a2[1] = *(_OWORD *)v119;
                  uint64_t v89 = v81 - v10 + 48;
                  if (v89 >= 49)
                  {
                    unint64_t v90 = (v89 / 0x30uLL - 2) >> 1;
                    unint64_t v91 = v10 + 48 * v90;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      *(_OWORD *)uint64_t v106 = *(_OWORD *)(v81 + 16);
                      *(_OWORD *)&v106[16] = *(_OWORD *)(v81 + 32);
                      do
                      {
                        unint64_t v94 = (_OWORD *)v81;
                        unint64_t v81 = v91;
                        long long v95 = *(_OWORD *)v91;
                        long long v96 = *(_OWORD *)(v91 + 16);
                        *(_OWORD *)((char *)v94 + 27) = *(_OWORD *)(v91 + 27);
                        *unint64_t v94 = v95;
                        v94[1] = v96;
                        if (!v90) {
                          break;
                        }
                        unint64_t v90 = (v90 - 1) >> 1;
                        unint64_t v91 = v10 + 48 * v90;
                      }
                      while (*(double *)(v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_OWORD *)(v81 + 16) = *(_OWORD *)v106;
                      *(_OWORD *)(v81 + 27) = *(_OWORD *)&v106[11];
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (long long *)(v10 + 48 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v12 >> 1)), a2 - 3);
            uint64_t v15 = 3 * v13;
            long long v16 = (long long *)(a1 + 48 * v13 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48), v16, a2 - 6);
            long long v17 = (long long *)(a1 + 48 + 16 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 96), v17, a2 - 9);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v16, v14, v17);
            *(_OWORD *)unint64_t v115 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v115[16] = *(_OWORD *)(a1 + 32);
            long long v107 = *(_OWORD *)a1;
            long long v18 = *(long long *)((char *)v14 + 27);
            long long v19 = v14[1];
            *(_OWORD *)a1 = *v14;
            *(_OWORD *)(a1 + 16) = v19;
            *(_OWORD *)(a1 + 27) = v18;
            *(long long *)((char *)v14 + 27) = *(_OWORD *)&v115[11];
            *uint64_t v14 = v107;
            v14[1] = *(_OWORD *)v115;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48 * (v12 >> 1)), (long long *)a1, a2 - 3);
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 40) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          *(_OWORD *)long long v105 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)&v105[16] = *(_OWORD *)(a1 + 32);
          if (v20 >= *((double *)a2 - 5))
          {
            unint64_t v41 = a1 + 48;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= (unint64_t)a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 48;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 48;
              double v40 = *(double *)(v39 + 56);
              v39 += 48;
            }
            while (v20 >= v40);
          }
          uint64_t v43 = a2;
          if (v10 < (unint64_t)a2)
          {
            long long v44 = a2;
            do
            {
              uint64_t v43 = v44 - 3;
              double v45 = *((double *)v44 - 5);
              v44 -= 3;
            }
            while (v20 < v45);
          }
          while (v10 < (unint64_t)v43)
          {
            *(_OWORD *)uint64_t v117 = *(_OWORD *)(v10 + 16);
            *(_OWORD *)&v117[16] = *(_OWORD *)(v10 + 32);
            long long v109 = *(_OWORD *)v10;
            long long v46 = *v43;
            long long v47 = v43[1];
            *(_OWORD *)(v10 + 27) = *(long long *)((char *)v43 + 27);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(long long *)((char *)v43 + 27) = *(_OWORD *)&v117[11];
            *uint64_t v43 = v109;
            v43[1] = *(_OWORD *)v117;
            do
            {
              double v48 = *(double *)(v10 + 56);
              v10 += 48;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *((double *)v43 - 5);
              v43 -= 3;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 48 >= a1;
          BOOL v5 = v10 - 48 == a1;
          if (v10 - 48 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 48);
            long long v51 = *(_OWORD *)(v10 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v10 - 21);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 48) = v38;
          *(double *)(v10 - 40) = v20;
          *(_OWORD *)(v10 - 21) = *(_OWORD *)&v105[11];
          *(_OWORD *)(v10 - 32) = *(_OWORD *)v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        *(_OWORD *)uint64_t v104 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v104[16] = *(_OWORD *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 56);
          v21 += 48;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        uint64_t v25 = a2;
        if (v21 == 48)
        {
          long long v28 = a2;
          while (v24 < (unint64_t)v28)
          {
            long long v26 = v28 - 3;
            double v29 = *((double *)v28 - 5);
            v28 -= 3;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          long long v26 = v28;
        }
        else
        {
          do
          {
            long long v26 = v25 - 3;
            double v27 = *((double *)v25 - 5);
            v25 -= 3;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < (unint64_t)v26)
        {
          long long v30 = v26;
          do
          {
            *(_OWORD *)uint64_t v116 = *(_OWORD *)(v10 + 16);
            *(_OWORD *)&v116[16] = *(_OWORD *)(v10 + 32);
            long long v108 = *(_OWORD *)v10;
            long long v31 = *v30;
            long long v32 = v30[1];
            *(_OWORD *)(v10 + 27) = *(long long *)((char *)v30 + 27);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(long long *)((char *)v30 + 27) = *(_OWORD *)&v116[11];
            *long long v30 = v108;
            v30[1] = *(_OWORD *)v116;
            do
            {
              double v33 = *(double *)(v10 + 56);
              v10 += 48;
            }
            while (v33 < v20);
            do
            {
              double v34 = *((double *)v30 - 5);
              v30 -= 3;
            }
            while (v34 >= v20);
          }
          while (v10 < (unint64_t)v30);
        }
        if (v10 - 48 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 48);
          long long v36 = *(_OWORD *)(v10 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v10 - 21);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 48) = v22;
        *(double *)(v10 - 40) = v20;
        *(_OWORD *)(v10 - 21) = *(_OWORD *)&v104[11];
        *(_OWORD *)(v10 - 32) = *(_OWORD *)v104;
        if (v24 >= (unint64_t)v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(a1, v10 - 48, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, v10 - 48);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(v10, (uint64_t)a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = (long long *)(v10 - 48);
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 40) < *(double *)(a1 + 8))
      {
        long long v6 = *(_OWORD *)a1;
        *(_OWORD *)double v20 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v20[16] = *(_OWORD *)(a1 + 32);
        long long v7 = *(_OWORD *)(a2 - 21);
        long long v8 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 27) = v7;
        *(_OWORD *)(a2 - 48) = v6;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v20;
        *(_OWORD *)(a2 - 21) = *(_OWORD *)&v20[11];
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48);
      return 1;
    default:
      uint64_t v9 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96));
      uint64_t v10 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    double v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      uint64_t v14 = *(void *)v10;
      *(_OWORD *)long long v19 = *(_OWORD *)(v10 + 16);
      *(_OWORD *)&v19[16] = *(_OWORD *)(v10 + 32);
      uint64_t v15 = v11;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        long long v17 = *(_OWORD *)(a1 + v15 + 112);
        *(_OWORD *)(v16 + 144) = *(_OWORD *)(a1 + v15 + 96);
        *(_OWORD *)(v16 + 160) = v17;
        *(_OWORD *)(v16 + 171) = *(_OWORD *)(a1 + v15 + 123);
        if (v15 == -96) {
          break;
        }
        v15 -= 48;
        if (v13 >= *(double *)(v16 + 56))
        {
          uint64_t v18 = a1 + v15 + 144;
          goto LABEL_12;
        }
      }
      uint64_t v18 = a1;
LABEL_12:
      *(void *)uint64_t v18 = v14;
      *(double *)(v18 + 8) = v13;
      *(_OWORD *)(v18 + 16) = *(_OWORD *)v19;
      *(_OWORD *)(v18 + 27) = *(_OWORD *)&v19[11];
      if (++v12 == 8) {
        return v10 + 48 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 48;
    v10 += 48;
    if (v10 == a2) {
      return 1;
    }
  }
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  double v3 = *(void **)(a2 + 272);
  double v48 = (void *)(a2 + 280);
  if (v3 == (void *)(a2 + 280)) {
    return;
  }
  long long v50 = (void *)(a1 + 16);
  do
  {
    BOOL v5 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a2, v3[4]);
    long long v6 = v5;
    if (!v5) {
      goto LABEL_80;
    }
    unint64_t v7 = [v5 hash];
    unint64_t v8 = v7;
    unint64_t v9 = *(void *)(a1 + 8);
    if (!v9) {
      goto LABEL_21;
    }
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v51 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v2 = v7;
      if (v7 >= v9) {
        unint64_t v2 = v7 % v9;
      }
    }
    else
    {
      unint64_t v2 = (v9 - 1) & v7;
    }
    uint64_t v11 = *(char ***)(*(void *)a1 + 8 * v2);
    if (!v11 || (int v12 = *v11) == 0)
    {
LABEL_21:
      long long v19 = (char *)operator new(0xB0uLL);
      v52[0] = v19;
      v52[1] = v50;
      *(void *)long long v19 = 0;
      *((void *)v19 + 1) = v8;
      *((void *)v19 + 2) = v6;
      *(_OWORD *)(v19 + 24) = 0u;
      *(_OWORD *)(v19 + 120) = 0u;
      *(_OWORD *)(v19 + 104) = 0u;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      *((void *)v19 + 4) = 0xFFEFFFFFFFFFFFFFLL;
      *(_OWORD *)(v19 + 114) = 0u;
      *(_OWORD *)(v19 + 136) = 0u;
      *(_OWORD *)(v19 + 152) = 0u;
      *((void *)v19 + 21) = 0;
      char v53 = 1;
      float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v21 = *(float *)(a1 + 32);
      if (v9 && (float)(v21 * (float)v9) >= v20)
      {
LABEL_67:
        BOOL v37 = *(char ***)(*(void *)a1 + 8 * v2);
        int v12 = (char *)v52[0];
        if (v37)
        {
          *(void *)v52[0] = *v37;
        }
        else
        {
          *(void *)v52[0] = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = v12;
          *(void *)(*(void *)a1 + 8 * v2) = v50;
          if (!*(void *)v12)
          {
LABEL_76:
            v52[0] = 0;
            ++*(void *)(a1 + 24);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v52);
            goto LABEL_77;
          }
          unint64_t v38 = *(void *)(*(void *)v12 + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v38 >= v9) {
              v38 %= v9;
            }
          }
          else
          {
            v38 &= v9 - 1;
          }
          BOOL v37 = (char **)(*(void *)a1 + 8 * v38);
        }
        long long *v37 = v12;
        goto LABEL_76;
      }
      BOOL v22 = (v9 & (v9 - 1)) != 0;
      if (v9 < 3) {
        BOOL v22 = 1;
      }
      unint64_t v23 = v22 | (2 * v9);
      unint64_t v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      else {
        int8x8_t prime = (int8x8_t)v23;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v9 = *(void *)(a1 + 8);
      if (*(void *)&prime > v9) {
        goto LABEL_33;
      }
      if (*(void *)&prime < v9)
      {
        unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          unint64_t v32 = std::__next_prime(v32);
        }
        else
        {
          uint64_t v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2) {
            unint64_t v32 = v34;
          }
        }
        if (*(void *)&prime <= v32) {
          int8x8_t prime = (int8x8_t)v32;
        }
        if (*(void *)&prime >= v9)
        {
          unint64_t v9 = *(void *)(a1 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            long long v26 = operator new(8 * *(void *)&prime);
            double v27 = *(void **)a1;
            *(void *)a1 = v26;
            if (v27) {
              operator delete(v27);
            }
            uint64_t v28 = 0;
            *(int8x8_t *)(a1 + 8) = prime;
            do
              *(void *)(*(void *)a1 + 8 * v28++) = 0;
            while (*(void *)&prime != v28);
            double v29 = (void *)*v50;
            if (*v50)
            {
              unint64_t v30 = v29[1];
              uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(void *)&prime) {
                  v30 %= *(void *)&prime;
                }
              }
              else
              {
                v30 &= *(void *)&prime - 1;
              }
              *(void *)(*(void *)a1 + 8 * v30) = v50;
              long long v35 = (void *)*v29;
              if (*v29)
              {
                do
                {
                  unint64_t v36 = v35[1];
                  if (v31.u32[0] > 1uLL)
                  {
                    if (v36 >= *(void *)&prime) {
                      v36 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v36 &= *(void *)&prime - 1;
                  }
                  if (v36 != v30)
                  {
                    if (!*(void *)(*(void *)a1 + 8 * v36))
                    {
                      *(void *)(*(void *)a1 + 8 * v36) = v29;
                      goto LABEL_58;
                    }
                    void *v29 = *v35;
                    void *v35 = **(void **)(*(void *)a1 + 8 * v36);
                    **(void **)(*(void *)a1 + 8 * v36) = v35;
                    long long v35 = v29;
                  }
                  unint64_t v36 = v30;
LABEL_58:
                  double v29 = v35;
                  long long v35 = (void *)*v35;
                  unint64_t v30 = v36;
                }
                while (v35);
              }
            }
            unint64_t v9 = (unint64_t)prime;
            goto LABEL_62;
          }
          long long v47 = *(void **)a1;
          *(void *)a1 = 0;
          if (v47) {
            operator delete(v47);
          }
          unint64_t v9 = 0;
          *(void *)(a1 + 8) = 0;
        }
      }
LABEL_62:
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v8 >= v9) {
          unint64_t v2 = v8 % v9;
        }
        else {
          unint64_t v2 = v8;
        }
      }
      else
      {
        unint64_t v2 = (v9 - 1) & v8;
      }
      goto LABEL_67;
    }
    while (1)
    {
      unint64_t v13 = *((void *)v12 + 1);
      if (v13 == v8) {
        break;
      }
      if (v51 > 1)
      {
        if (v13 >= v9) {
          v13 %= v9;
        }
      }
      else
      {
        v13 &= v9 - 1;
      }
      if (v13 != v2) {
        goto LABEL_21;
      }
LABEL_20:
      int v12 = *(char **)v12;
      if (!v12) {
        goto LABEL_21;
      }
    }
    id v14 = *((id *)v12 + 2);
    uint64_t v15 = v6;
    id v16 = v6;
    long long v17 = v16;
    if (v14 != v16)
    {
      char v18 = [v14 isEqualToString:v16];

      long long v6 = v15;
      if (v18) {
        goto LABEL_77;
      }
      goto LABEL_20;
    }

    long long v6 = v15;
LABEL_77:
    long long v39 = *(_OWORD *)(v3 + 5);
    long long v40 = *(_OWORD *)(v3 + 7);
    *(_OWORD *)(v12 + 56) = *(_OWORD *)(v3 + 9);
    *(_OWORD *)(v12 + 40) = v40;
    *(_OWORD *)(v12 + 24) = v39;
    long long v41 = *(_OWORD *)(v3 + 11);
    long long v42 = *(_OWORD *)(v3 + 13);
    long long v43 = *(_OWORD *)(v3 + 15);
    *(_OWORD *)(v12 + 120) = *(_OWORD *)(v3 + 17);
    *(_OWORD *)(v12 + 104) = v43;
    *(_OWORD *)(v12 + 88) = v42;
    *(_OWORD *)(v12 + 72) = v41;
    *((void *)v12 + 17) = v3[19];
    if (v12 + 16 != (char *)(v3 + 4)) {
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v12 + 144, (char *)v3[20], v3[21], (uint64_t)(v3[21] - v3[20]) >> 4);
    }
    *((void *)v12 + 21) = v3[23];

LABEL_80:
    long long v44 = (void *)v3[1];
    if (v44)
    {
      do
      {
        double v45 = v44;
        long long v44 = (void *)*v44;
      }
      while (v44);
    }
    else
    {
      do
      {
        double v45 = (void *)v3[2];
        BOOL v46 = *v45 == (void)v3;
        double v3 = v45;
      }
      while (!v46);
    }
    double v3 = v45;
  }
  while (v45 != v48);
}

void sub_1BD084BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);

  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::~__hash_table(v6);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  unint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,0>(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 128);
  if (v2)
  {
    *(void *)(a1 + 136) = v2;
    operator delete(v2);
  }
  double v3 = *(void **)a1;
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      double v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1723110;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1723110;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C187B8A0);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0x28uLL);
  *unint64_t v2 = &unk_1F1723110;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BD084E98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1723110;
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48))(v1) + 112;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F17231A0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F17231A0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C187B8A0);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0x28uLL);
  *unint64_t v2 = &unk_1F17231A0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BD085130(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F17231A0;
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  unint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__func()
{
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  void *result = &unk_1F1723230;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1723230;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 632))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a4, 3, @"Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date");
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  }
  double v8 = *(double *)(a2 + 8);
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9)
  {
    if (*(unsigned char *)(a1 + 632))
    {
      double v10 = -1.79769313e308;
    }
    else
    {
      double v10 = *(double *)(a1 + 176);
      double v12 = *(double *)(a1 + 120);
      if (v10 <= v12) {
        double v10 = -1.79769313e308;
      }
      if (v10 < v12) {
        double v10 = *(double *)(a1 + 120);
      }
    }
  }
  else
  {
    double v10 = *(double *)(a1 + 176);
    if (v10 <= *(double *)(a1 + 120)) {
      double v10 = -1.79769313e308;
    }
  }
  if (v10 <= v8)
  {
    if (v9 && a3) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_advanceToTime(a1, v8);
    }
    HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    unint64_t v13 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
    uint64_t v11 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v13, a4);
  }
  return v11;
}

void sub_1BD08557C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_advanceToTime(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 128) <= a2)
  {
    uint64_t v4 = a1 + 112;
    uint64_t v5 = a1 + 120;
    do
    {
      uint64_t v6 = *(void *)(a1 + 608);
      uint64_t v7 = *(void *)(a1 + 600);
      if (v6 == v7)
      {
        uint64_t v22 = 0;
        uint64_t v15 = *(void **)(a1 + 40);
        id v16 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a2];
        double v8 = [v15 dateIntervalContainingDate:v16 index:&v22];

        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v17 = v22;
        double v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v19 = v18;
        float v20 = [v8 endDate];
        [v20 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::resetToBucket(v4, v17, v19, v21);
      }
      else
      {
        double v8 = [*(id *)(a1 + 40) dateIntervalAtIndex:*(void *)(a1 + 112) + 1];
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        double v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v12 = v11;
        unint64_t v13 = [v8 endDate];
        [v13 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::advanceBucket(v4, v12, v14);
      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_didChangeBucket(a1, v9);
      if (v6 != v7) {
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
      }
    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1BD085788(_Unwind_Exception *exception_object)
{
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  char v3 = *(unsigned char *)(a2 + 32);
  if (!v3) {
    return;
  }
  uint64_t v5 = a1 + 8;
  double v6 = *(double *)(a2 + 8);
  if (v6 < *(double *)(a1 + 8)) {
    return;
  }
  uint64_t v7 = *(uint64_t **)a2;
  double v8 = *(double *)(a2 + 16);
  unint64_t v9 = *(void *)(a2 + 24);
  char v10 = *(unsigned char *)(a2 + 33);
  double v11 = *(double *)(a1 + 16);
  if (*(_DWORD *)(a1 + 36)) {
    BOOL v12 = v6 < v11;
  }
  else {
    BOOL v12 = v6 <= v11;
  }
  if (v12)
  {
    if (v8 <= v11) {
      double v14 = *(double *)(a2 + 16);
    }
    else {
      double v14 = *(double *)(a1 + 16);
    }
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 304, *(void *)(a2 + 24), v9);
    uint64_t v15 = *(char **)(a1 + 112);
    if (v15 == *(char **)(a1 + 104) && *(uint64_t *)(a1 + 192) <= 0)
    {
      double v33 = *(double *)(a1 + 8);
      double v34 = *(double *)(a1 + 16);
      if (v6 >= v33) {
        double v33 = v6;
      }
      if (v34 >= v14) {
        double v34 = v14;
      }
      *(double *)(a1 + 48) = v33;
      *(double *)(a1 + 56) = v34;
      if (!a3) {
        goto LABEL_47;
      }
    }
    else
    {
      if (v6 < *(double *)(a1 + 48))
      {
        double v16 = *(double *)(a1 + 8);
        if (v6 >= v16) {
          double v16 = v6;
        }
        *(double *)(a1 + 48) = v16;
      }
      if (v14 > *(double *)(a1 + 56))
      {
        double v17 = *(double *)(a1 + 16);
        if (v17 >= v14) {
          double v17 = v14;
        }
        *(double *)(a1 + 56) = v17;
      }
      if (!a3) {
        goto LABEL_47;
      }
    }
    if (v6 < *(double *)(a1 + 16))
    {
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, v6);
      uint64_t v15 = *(char **)(a1 + 112);
    }
LABEL_47:
    unint64_t v35 = *(void *)(a1 + 120);
    if ((unint64_t)v15 >= v35)
    {
      unint64_t v37 = 0x555555555555555;
      unint64_t v38 = *(char **)(a1 + 104);
      unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v38) >> 4);
      unint64_t v40 = v39 + 1;
      if (v39 + 1 > 0x555555555555555) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (void)v38) >> 4);
      if (2 * v41 > v40) {
        unint64_t v40 = 2 * v41;
      }
      if (v41 < 0x2AAAAAAAAAAAAAALL) {
        unint64_t v37 = v40;
      }
      if (v37)
      {
        unint64_t v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v37);
        unint64_t v38 = *(char **)(a1 + 104);
        uint64_t v15 = *(char **)(a1 + 112);
      }
      else
      {
        uint64_t v42 = 0;
      }
      unint64_t v43 = v37 + 48 * v39;
      *(void *)unint64_t v43 = v7;
      *(double *)(v43 + 8) = v6;
      *(double *)(v43 + 16) = v14;
      *(void *)(v43 + 24) = v9;
      unint64_t v44 = v37 + 48 * v42;
      *(unsigned char *)(v43 + 32) = v3;
      *(unsigned char *)(v43 + 33) = v10;
      *(_WORD *)(v43 + 40) = 0;
      *(unsigned char *)(v43 + 42) = 0;
      unint64_t v36 = (void *)(v43 + 48);
      if (v15 != v38)
      {
        do
        {
          long long v45 = *((_OWORD *)v15 - 3);
          long long v46 = *((_OWORD *)v15 - 2);
          *(_OWORD *)(v43 - 21) = *(_OWORD *)(v15 - 21);
          *(_OWORD *)(v43 - 48) = v45;
          *(_OWORD *)(v43 - 32) = v46;
          v43 -= 48;
          v15 -= 48;
        }
        while (v15 != v38);
        unint64_t v38 = *(char **)(a1 + 104);
      }
      *(void *)(a1 + 104) = v43;
      *(void *)(a1 + 112) = v36;
      *(void *)(a1 + 120) = v44;
      if (v38) {
        operator delete(v38);
      }
    }
    else
    {
      *(void *)uint64_t v15 = v7;
      *((double *)v15 + 1) = v6;
      *((double *)v15 + 2) = v14;
      *((void *)v15 + 3) = v9;
      v15[32] = v3;
      v15[33] = v10;
      *((_WORD *)v15 + 20) = 0;
      unint64_t v36 = v15 + 48;
      v15[42] = 0;
    }
    *(void *)(a1 + 112) = v36;
    if (!*(unsigned char *)(a1 + 232) || *(double *)(a1 + 208) <= v6)
    {
      *(void *)(a1 + 200) = v7;
      *(double *)(a1 + 208) = v6;
      *(double *)(a1 + 216) = v8;
      *(void *)(a1 + 224) = v9;
      *(unsigned char *)(a1 + 232) = v3;
      *(unsigned char *)(a1 + 233) = v10;
    }
    if (*(unsigned char *)(a1 + 33))
    {
      unint64_t v47 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(v5, v9);
      double v48 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsForSource(v5, v47);
      if (!*((unsigned char *)v48 + 104) || *((double *)v48 + 10) <= v6)
      {
        v48[9] = v7;
        *((double *)v48 + 10) = v6;
        *((double *)v48 + 11) = v8;
        v48[12] = (uint64_t *)v9;
        *((unsigned char *)v48 + 104) = v3;
        *((unsigned char *)v48 + 105) = v10;
      }
    }
    return;
  }
  if (v6 < v11) {
    double v6 = *(double *)(a1 + 16);
  }
  unint64_t v18 = *(void *)(a1 + 496);
  unint64_t v19 = *(void *)(a1 + 504);
  if (v18 >= v19)
  {
    uint64_t v21 = *(void *)(a1 + 488);
    unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v21) >> 3);
    unint64_t v23 = v22 + 1;
    if (v22 + 1 > 0x666666666666666) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v21) >> 3);
    if (2 * v24 > v23) {
      unint64_t v23 = 2 * v24;
    }
    if (v24 >= 0x333333333333333) {
      unint64_t v25 = 0x666666666666666;
    }
    else {
      unint64_t v25 = v23;
    }
    if (v25) {
      unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v25);
    }
    else {
      uint64_t v26 = 0;
    }
    unint64_t v27 = v25 + 40 * v22;
    unint64_t v28 = v25 + 40 * v26;
    *(void *)unint64_t v27 = v7;
    *(double *)(v27 + 8) = v6;
    *(double *)(v27 + 16) = v8;
    *(void *)(v27 + 24) = v9;
    *(unsigned char *)(v27 + 32) = v3;
    *(unsigned char *)(v27 + 33) = v10;
    unint64_t v20 = v27 + 40;
    unint64_t v30 = *(char **)(a1 + 488);
    double v29 = *(char **)(a1 + 496);
    if (v29 != v30)
    {
      do
      {
        long long v31 = *(_OWORD *)(v29 - 40);
        long long v32 = *(_OWORD *)(v29 - 24);
        *(_WORD *)(v27 - 8) = *((_WORD *)v29 - 4);
        *(_OWORD *)(v27 - 24) = v32;
        *(_OWORD *)(v27 - 40) = v31;
        v27 -= 40;
        v29 -= 40;
      }
      while (v29 != v30);
      double v29 = *(char **)(a1 + 488);
    }
    *(void *)(a1 + 488) = v27;
    *(void *)(a1 + 496) = v20;
    *(void *)(a1 + 504) = v28;
    if (v29) {
      operator delete(v29);
    }
  }
  else
  {
    *(void *)unint64_t v18 = v7;
    *(double *)(v18 + 8) = v6;
    *(double *)(v18 + 16) = v8;
    *(void *)(v18 + 24) = v9;
    *(unsigned char *)(v18 + 32) = v3;
    unint64_t v20 = v18 + 40;
    *(unsigned char *)(v18 + 33) = v10;
  }
  *(void *)(a1 + 496) = v20;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 634))
  {
    *(unsigned char *)(a1 + 636) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 636) = 0;
    unint64_t v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      uint64_t v4 = v2;
      char v3 = (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      if (v3) {
        v4[2](v4, v3);
      }

      unint64_t v2 = v4;
    }
  }
}

void sub_1BD085C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  unint64_t v9 = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 488), *(void *)(a1 + 496), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 496) - *(void *)(a1 + 488)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::resetToBucket(a1, *(void *)a1 + 1, a2, a3);
  double v6 = v9;
  uint64_t v7 = v10;
  if (v9 != v10)
  {
    uint64_t v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BD085D6C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8 = (id *)(a1 + 40);
  objc_storeStrong((id *)(a1 + 512), *(id *)(a1 + 40));
  unint64_t v9 = *(void **)(a1 + 248);
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  *(_OWORD *)(a1 + 128) = xmmword_1BD3301F0;
  long long v10 = 0uLL;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(void *)(a1 + 240) = 0;
  if (v9)
  {
    *(void *)(a1 + 256) = v9;
    operator delete(v9);
    long long v10 = 0uLL;
  }
  *(_OWORD *)(a1 + 248) = v10;
  *(_OWORD *)(a1 + 264) = v10;
  if (*(void *)(a1 + 296))
  {
    uint64_t v11 = *(void **)(a1 + 280);
    uint64_t v12 = *(void *)(a1 + 288);
    *(void *)(a1 + 280) = a1 + 288;
    *(void *)(v12 + 16) = 0;
    *(void *)(a1 + 288) = 0;
    *(void *)(a1 + 296) = 0;
    if (v11[1]) {
      unint64_t v13 = (void *)v11[1];
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      double v14 = (void *)v13[2];
      if (v14)
      {
        uint64_t v15 = (void *)*v14;
        if ((void *)*v14 == v13)
        {
          *double v14 = 0;
          while (1)
          {
            double v17 = (void *)v14[1];
            if (!v17) {
              break;
            }
            do
            {
              double v14 = v17;
              double v17 = (void *)*v17;
            }
            while (v17);
          }
        }
        else
        {
          for (v14[1] = 0; v15; uint64_t v15 = (void *)v14[1])
          {
            do
            {
              double v14 = v15;
              uint64_t v15 = (void *)*v15;
            }
            while (v15);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::destroy(v13);
        for (uint64_t i = (void *)v14[2]; i; uint64_t i = (void *)i[2])
          double v14 = i;
        unint64_t v13 = v14;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::destroy(v13);
  }
  objc_storeStrong(v8, *(id *)(a1 + 512));
  *(void *)(a1 + 496) = *(void *)(a1 + 488);
  *(void *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 636))
  {
    if (v3)
    {
      id v6 = v3;
      uint64_t v4 = _Block_copy(*(const void **)(a1 + 96));
      uint64_t v5 = v4;
      if (v4) {
        (*((void (**)(void *, id))v4 + 2))(v4, v6);
      }

      id v3 = v6;
    }
    *(unsigned char *)(a1 + 636) = 0;
  }
}

void sub_1BD085F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_currentBucketInterval(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 632))
  {
    uint64_t v1 = 0;
  }
  else
  {
    uint64_t v1 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", *(double *)(a1 + 120), *(double *)(a1 + 128));
  }

  return v1;
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 startDate];
  id v6 = [v4 startDate];
  uint64_t v7 = [v5 compare:v6];

  return v7;
}

void sub_1BD086028(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 13);
  if (WeakRetained)
  {
    if (v5
      && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_currentBucketInterval((uint64_t)a1),
          (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v8 = [v5 endDate];
      unint64_t v9 = [v7 startDate];
      if (objc_msgSend(v8, "hk_isAfterDate:", v9))
      {
        long long v10 = [v5 startDate];
        uint64_t v11 = [v7 endDate];
        char v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);
      }
      else
      {
        char v12 = 0;
      }

      unint64_t v13 = _Block_copy(a1[12]);
      if ((v12 & 1) == 0) {
        operator new();
      }
    }
    else
    {
      unint64_t v13 = _Block_copy(a1[12]);
    }
    *((unsigned char *)a1 + 632) = 1;
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
    v27[3] = &unk_1E6308FF8;
    id v15 = v5;
    id v28 = v15;
    id v16 = v13;
    id v29 = v16;
    (*((void (**)(id *, void *))*a1 + 9))(a1, v27);
    if (v5)
    {
      double v17 = [v15 startDate];
      [v17 timeIntervalSinceReferenceDate];
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_configureForStartTime((uint64_t)a1);
    }
    else
    {
      (*((void (**)(id *))*a1 + 4))(a1);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
    v21[3] = &unk_1E6309060;
    unint64_t v24 = a1;
    id v5 = v15;
    char v26 = 1;
    id v22 = v5;
    unint64_t v25 = a1;
    id v23 = WeakRetained;
    uint64_t v14 = (*((uint64_t (**)(id *, void *, uint64_t))*a1 + 14))(a1, v21, a3);
    unint64_t v18 = _Block_copy(v16);
    id v19 = a1[12];
    a1[12] = v18;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to invalidate interval: no data source available.");
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1BD086478(_Unwind_Exception *a1)
{
  MEMORY[0x1C187B8A0](v4, 0x10F1C40C0BC8CBALL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_11;
  }
  id v3 = [v10 endDate];
  uint64_t v4 = [*(id *)(a1 + 32) startDate];
  char v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    id v6 = [v10 startDate];
    uint64_t v7 = [*(id *)(a1 + 32) endDate];
    char v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_11:
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9) {
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
      }
    }
  }
}

void sub_1BD08665C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = [*(id *)(a1 + 32) startDate];
  [v5 timeIntervalSinceReferenceDate];
  uint64_t v7 = v6;

  char v8 = [*(id *)(a1 + 32) endDate];
  [v8 timeIntervalSinceReferenceDate];
  uint64_t v10 = v9;

  uint64_t v11 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  uint64_t v13 = *(void *)(a1 + 32);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  char v32 = *(unsigned char *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  uint64_t v31 = *(void *)(a1 + 56);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  uint64_t v14 = [v11 collectionCalculator:WeakRetained queryForInterval:v13 error:a2 sampleHandler:v30 mergeHandler:v29];

  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15 != v4)
    {
      id v16 = [*(id *)(a1 + 32) endDate];
      [v16 timeIntervalSinceReferenceDate];
      if (*(void *)(v15 + 40))
      {
        double v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          id v19 = [*(id *)(v15 + 40) dateIntervalAtIndex:*(void *)(v15 + 112) + 1];
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          unint64_t v20 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(v15, v15 + 120);
          uint64_t v21 = [v19 startDate];
          [v21 timeIntervalSinceReferenceDate];
          double v23 = v22;
          unint64_t v24 = [v19 endDate];
          [v24 timeIntervalSinceReferenceDate];
          HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            char v26 = _Block_copy(*(const void **)(v15 + 96));
            unint64_t v27 = v26;
            if (v26) {
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);
            }
          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_didChangeBucket(v15, 0);
        }
      }
    }
  }
  return v14;
}

void sub_1BD086908(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7 = *(double *)(a1 + 32);
  if (v7 > a6)
  {
    a2 = 0;
    int v8 = 0;
    a7 = 0.0;
    a5 = 0.0;
    double v9 = 0.0;
  }
  else
  {
    int v8 = 1;
    double v9 = a6;
  }
  double v13 = a5;
  double v14 = v9;
  double v15 = a7;
  uint64_t v16 = a2;
  char v17 = v8;
  char v18 = 0;
  if (*(unsigned char *)(a1 + 56))
  {
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v13, a3, a4);
    }
  }
  else
  {
    BOOL v11 = v7 <= a6;
    double v12 = *(double *)(a1 + 40);
    if (v9 >= v12) {
      BOOL v11 = 0;
    }
    if (!v11 || a7 <= v12) {
      double v12 = a7;
    }
    double v14 = v9;
    double v15 = v12;
    char v17 = v11;
    if (v11) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v13, a3, a4);
    }
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 632)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  }
  if (*(void *)(a1 + 40)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_advanceToTime(a1, a2);
  }
  if (*(double *)(a1 + 128) > a2)
  {
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 32) < *(double *)(v10 + 8))
                {
                  uint64_t v129 = *(void *)(v10 + 32);
                  long long v113 = *(_OWORD *)v10;
                  long long v121 = *(_OWORD *)(v10 + 16);
                  long long v52 = *(_OWORD *)(a2 - 40);
                  long long v53 = *(_OWORD *)(a2 - 24);
                  *(_WORD *)(v10 + 32) = *(_WORD *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(_WORD *)(a2 - 8) = v129;
                  *(_OWORD *)(a2 - 24) = v121;
                  *(_OWORD *)(a2 - 40) = v113;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v10, (double *)(v10 + 40), (double *)(a2 - 40));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, v10 + 120, a2 - 40);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            BOOL v54 = (void *)(v10 + 40);
            BOOL v56 = v10 == a2 || v54 == (void *)a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  long long v59 = v54;
                  double v60 = *(double *)(v58 + 48);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *v54;
                    long long v114 = *(_OWORD *)(v58 + 56);
                    uint64_t v122 = *(void *)(v58 + 72);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      uint64_t v63 = v10 + v62;
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      *(_OWORD *)(v63 + 40) = *(_OWORD *)(v10 + v62);
                      *(_OWORD *)(v63 + 56) = v64;
                      *(_WORD *)(v63 + 72) = *(_WORD *)(v10 + v62 + 32);
                      if (!v62) {
                        break;
                      }
                      v62 -= 40;
                      if (v60 >= *(double *)(v63 - 32))
                      {
                        uint64_t v65 = v10 + v62 + 40;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = v114;
                    *(_WORD *)(v65 + 32) = v122;
                  }
                  BOOL v54 = v59 + 5;
                  v57 += 40;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 5 != (void *)a2);
              }
            }
            else if (!v56)
            {
              do
              {
                id v98 = v54;
                double v99 = *(double *)(a1 + 48);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *v54;
                  long long v117 = *(_OWORD *)(a1 + 56);
                  uint64_t v125 = *(void *)(a1 + 72);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(_OWORD *)(v101 - 3);
                    *(_OWORD *)long long v101 = *(_OWORD *)(v101 - 5);
                    *((_OWORD *)v101 + 1) = v102;
                    *((_WORD *)v101 + 16) = *((_WORD *)v101 - 4);
                    double v103 = *((double *)v101 - 9);
                    v101 -= 5;
                  }
                  while (v99 < v103);
                  void *v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *((_WORD *)v101 + 16) = v125;
                  *((_OWORD *)v101 + 1) = v117;
                }
                v54 += 5;
                a1 = (unint64_t)v98;
              }
              while (v98 + 5 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 40 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v10 + 40 * v69 + 8) < *(double *)(v70 + 48))
                  {
                    v70 += 40;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  double v71 = *(double *)(v10 + 40 * v68 + 8);
                  if (*(double *)(v70 + 8) >= v71)
                  {
                    unint64_t v72 = v10 + 40 * v68;
                    uint64_t v73 = *(void *)v72;
                    uint64_t v123 = *(void *)(v72 + 32);
                    long long v115 = *(_OWORD *)(v72 + 16);
                    do
                    {
                      unint64_t v74 = v72;
                      unint64_t v72 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_WORD *)(v74 + 32) = *(_WORD *)(v70 + 32);
                      *(_OWORD *)unint64_t v74 = v75;
                      *(_OWORD *)(v74 + 16) = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 40 * v77;
                      uint64_t v78 = 2 * v69 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v10 + 40 * v77 + 8) < *(double *)(v70 + 48))
                      {
                        v70 += 40;
                        uint64_t v77 = v78;
                      }
                      uint64_t v69 = v77;
                    }
                    while (*(double *)(v70 + 8) >= v71);
                    *(void *)unint64_t v72 = v73;
                    *(double *)(v72 + 8) = v71;
                    *(_OWORD *)(v72 + 16) = v115;
                    *(_WORD *)(v72 + 32) = v123;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x28uLL;
              do
              {
                uint64_t v80 = 0;
                uint64_t v130 = *(void *)(v10 + 32);
                long long v116 = *(_OWORD *)v10;
                long long v124 = *(_OWORD *)(v10 + 16);
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = v81;
                  uint64_t v83 = v80 + 1;
                  v81 += 40 * (v80 + 1);
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v85 = v84 + 2;
                  if (v85 < v79 && *(double *)(v82 + 40 * v83 + 8) < *(double *)(v81 + 48))
                  {
                    v81 += 40;
                    uint64_t v80 = v85;
                  }
                  long long v86 = *(_OWORD *)v81;
                  long long v87 = *(_OWORD *)(v81 + 16);
                  *(_WORD *)(v82 + 32) = *(_WORD *)(v81 + 32);
                  *(_OWORD *)unint64_t v82 = v86;
                  *(_OWORD *)(v82 + 16) = v87;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 40;
                if (v81 == a2)
                {
                  *(_WORD *)(v81 + 32) = v130;
                  *(_OWORD *)unint64_t v81 = v116;
                  *(_OWORD *)(v81 + 16) = v124;
                }
                else
                {
                  long long v88 = *(_OWORD *)a2;
                  long long v89 = *(_OWORD *)(a2 + 16);
                  *(_WORD *)(v81 + 32) = *(_WORD *)(a2 + 32);
                  *(_OWORD *)unint64_t v81 = v88;
                  *(_OWORD *)(v81 + 16) = v89;
                  *(_WORD *)(a2 + 32) = v130;
                  *(_OWORD *)a2 = v116;
                  *(_OWORD *)(a2 + 16) = v124;
                  uint64_t v90 = v81 - v10 + 40;
                  if (v90 >= 41)
                  {
                    unint64_t v91 = (v90 / 0x28uLL - 2) >> 1;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v10 + 40 * v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      uint64_t v109 = *(void *)(v81 + 32);
                      long long v106 = *(_OWORD *)(v81 + 16);
                      do
                      {
                        unint64_t v94 = v81;
                        unint64_t v81 = v10 + 40 * v91;
                        long long v95 = *(_OWORD *)v81;
                        long long v96 = *(_OWORD *)(v81 + 16);
                        *(_WORD *)(v94 + 32) = *(_WORD *)(v81 + 32);
                        *(_OWORD *)unint64_t v94 = v95;
                        *(_OWORD *)(v94 + 16) = v96;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 40 * v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_WORD *)(v81 + 32) = v109;
                      *(_OWORD *)(v81 + 16) = v106;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40 * (v12 >> 1)), (double *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            uint64_t v16 = (double *)(a1 + 40 * v13 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40), v16, (double *)(a2 - 80));
            char v17 = (double *)(a1 + 40 + 8 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 80), v17, (double *)(a2 - 120));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v16, (double *)v14, v17);
            uint64_t v126 = *(void *)(a1 + 32);
            long long v110 = *(_OWORD *)a1;
            long long v118 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 16) = v19;
            *(_WORD *)(v14 + 32) = v126;
            *(_OWORD *)unint64_t v14 = v110;
            *(_OWORD *)(v14 + 16) = v118;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40 * (v12 >> 1)), (double *)a1, (double *)(a2 - 40));
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 32) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          long long v105 = *(_OWORD *)(a1 + 16);
          uint64_t v108 = *(void *)(a1 + 32);
          if (v20 >= *(double *)(a2 - 32))
          {
            unint64_t v41 = a1 + 40;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 40;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 40;
              double v40 = *(double *)(v39 + 48);
              v39 += 40;
            }
            while (v20 >= v40);
          }
          unint64_t v43 = a2;
          if (v10 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              unint64_t v43 = v44 - 40;
              double v45 = *(double *)(v44 - 32);
              v44 -= 40;
            }
            while (v20 < v45);
          }
          while (v10 < v43)
          {
            uint64_t v128 = *(void *)(v10 + 32);
            long long v112 = *(_OWORD *)v10;
            long long v120 = *(_OWORD *)(v10 + 16);
            long long v46 = *(_OWORD *)v43;
            long long v47 = *(_OWORD *)(v43 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v43 + 32);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(_WORD *)(v43 + 32) = v128;
            *(_OWORD *)unint64_t v43 = v112;
            *(_OWORD *)(v43 + 16) = v120;
            do
            {
              double v48 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *(double *)(v43 - 32);
              v43 -= 40;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 40);
            long long v51 = *(_OWORD *)(v10 - 24);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 40) = v38;
          *(double *)(v10 - 32) = v20;
          *(_WORD *)(v10 - 8) = v108;
          *(_OWORD *)(v10 - 24) = v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        long long v104 = *(_OWORD *)(a1 + 16);
        uint64_t v107 = *(void *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 48);
          v21 += 40;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        unint64_t v25 = a2;
        if (v21 == 40)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 40;
            double v29 = *(double *)(v28 - 32);
            v28 -= 40;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 40;
            double v27 = *(double *)(v25 - 32);
            v25 -= 40;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v127 = *(void *)(v10 + 32);
            long long v111 = *(_OWORD *)v10;
            long long v119 = *(_OWORD *)(v10 + 16);
            long long v31 = *(_OWORD *)v30;
            long long v32 = *(_OWORD *)(v30 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v30 + 32);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(_WORD *)(v30 + 32) = v127;
            *(_OWORD *)unint64_t v30 = v111;
            *(_OWORD *)(v30 + 16) = v119;
            do
            {
              double v33 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v33 < v20);
            do
            {
              double v34 = *(double *)(v30 - 32);
              v30 -= 40;
            }
            while (v34 >= v20);
          }
          while (v10 < v30);
        }
        if (v10 - 40 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 40);
          long long v36 = *(_OWORD *)(v10 - 24);
          *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 40) = v22;
        *(double *)(v10 - 32) = v20;
        *(_WORD *)(v10 - 8) = v107;
        *(_OWORD *)(v10 - 24) = v104;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 40;
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        __int16 v9 = *(_WORD *)(a2 - 8);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      uint64_t v16 = *(void *)v12;
      long long v21 = *(_OWORD *)(v12 + 16);
      uint64_t v22 = *(void *)(v12 + 32);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(void *)uint64_t v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(void *a1, uint64_t a2)
{
  id v3 = (void *)a1[5];
  uint64_t v4 = a1[6];
  BOOL v5 = (void *)a1[4];
  uint64_t v6 = [v5 dateInterval];
  void v9[4] = v4;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  uint64_t v7 = [v3 collectionCalculator:v5 queryForInterval:v6 error:a2 sampleHandler:v10 mergeHandler:v9];

  return v7;
}

void sub_1BD087664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10 = *(void *)(a1 + 32);
  *(double *)int v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  char v15 = 1;
  uint64_t v11 = [MEMORY[0x1E4F1C9C8] distantFuture];
  [v11 timeIntervalSinceReferenceDate];
  BOOL v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1BD087708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6 = a3;
  uint64_t v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = &unk_1F17232E0;
  double v9 = 900.0;
  if ((v6 & 0x10) == 0) {
    double v9 = 0.0;
  }
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(void *)(v8 + 104) = 0;
  *(void *)(v8 + 112) = 0;
  *(void *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_WORD *)(a1 + 640) = 1;
  *(unsigned char *)(a1 + 642) = 0;
  *(unsigned char *)(a1 + 644) = 0;
  *(void *)(a1 + 648) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(void *)(a1 + 688) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);

  JUMPOUT(0x1C187B8A0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1F17232E0;
  unint64_t v2 = *(void **)(a1 + 672);
  if (v2)
  {
    *(void *)(a1 + 680) = v2;
    operator delete(v2);
  }

  id v3 = *(void **)(a1 + 608);
  if (v3)
  {
    *(void *)(a1 + 616) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(unsigned char *)(result + 640) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::setDateInterval(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 copy];
  uint64_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;

  BOOL v5 = [v6 startDate];
  [v5 timeIntervalSinceReferenceDate];
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_configureForStartTime(a1);
}

void sub_1BD0878B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(void *)(a1 + 40))
  {
    id v5 = v3;
    [v3 timeIntervalSinceReferenceDate];
    *(void *)(a1 + 648) = v4;
    id v3 = v5;
  }
}

void sub_1BD087924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::setStatisticsConfiguration(id *a1, void *a2)
{
  objc_storeStrong(a1 + 82, a2);
  id v7 = a2;
  id v4 = a1[82];
  id v5 = a1[79];
  a1[79] = v4;
  id v6 = v4;

  objc_storeStrong(a1 + 19, a1[79]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (*(void *)(a1 + 40)) {
    return 1;
  }
  BOOL v7 = *(void *)(a1 + 224) == *(void *)(a1 + 216) && *(uint64_t *)(a1 + 312) < 1
    || HKIntervalMask<double>::firstDifference(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)a2, *(void *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (v7) {
    return 1;
  }
  double v9 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128);

  return v9(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 copy];
  id v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v3;
}

void sub_1BD087B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::dataSource(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));

  return WeakRetained;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::currentStatistics(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 640))
  {
    uint64_t v1 = 0;
  }
  else
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_updateSourceOrder((uint64_t)v4);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeThroughTime((uint64_t)v4, v4[1]);
    uint64_t v1 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_statisticsFromFinishedBucket(a1, v4);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::~HDStatisticsBucket((uint64_t)v4);
  }

  return v1;
}

void sub_1BD087BDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::~HDStatisticsBucket((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(a1 + 64);
  BOOL v7 = v6;
  if (!v6) {
    goto LABEL_4;
  }
  uint64_t v8 = [v6 startDate];
  [v8 timeIntervalSinceReferenceDate];
  if (v9 > *(double *)(a2 + 16))
  {

    goto LABEL_10;
  }
  uint64_t v10 = [v7 endDate];
  [v10 timeIntervalSinceReferenceDate];
  double v12 = v11;
  double v13 = *(double *)(a2 + 8);

  if (v12 >= v13)
  {
LABEL_4:
    if (!*(unsigned char *)(a1 + 642)) {
      goto LABEL_21;
    }
    if (!*(unsigned char *)(a1 + 641))
    {
      if (*(void *)(a1 + 40))
      {
        if (*(unsigned char *)(a1 + 640))
        {
          double v14 = -1.79769313e308;
        }
        else
        {
          double v16 = *(double *)(a1 + 176);
          double v14 = *(double *)(a1 + 120);
          if (v16 <= v14) {
            double v16 = -1.79769313e308;
          }
          if (v16 >= v14) {
            double v14 = v16;
          }
        }
      }
      else
      {
        double v14 = -1.79769313e308;
        if (*(double *)(a1 + 176) > *(double *)(a1 + 120)) {
          double v14 = *(double *)(a1 + 176);
        }
      }
      if (v14 > *(double *)(a2 + 8))
      {
        uint64_t v17 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
        uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v17, a3);

        goto LABEL_22;
      }
      if (*(unsigned char *)(a1 + 643))
      {
LABEL_21:
        uint64_t v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_primitiveAddSample(a1, a2, 1, a3);
        goto LABEL_22;
      }
      unint64_t v19 = *(void *)(a1 + 680);
      unint64_t v20 = *(void *)(a1 + 688);
      if (v19 >= v20)
      {
        uint64_t v24 = *(void *)(a1 + 672);
        unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v24) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - v24) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x333333333333333) {
          unint64_t v28 = 0x666666666666666;
        }
        else {
          unint64_t v28 = v26;
        }
        if (v28) {
          unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v28);
        }
        else {
          uint64_t v29 = 0;
        }
        unint64_t v30 = v28 + 40 * v25;
        unint64_t v31 = v28 + 40 * v29;
        long long v32 = *(_OWORD *)a2;
        long long v33 = *(_OWORD *)(a2 + 16);
        *(void *)(v30 + 32) = *(void *)(a2 + 32);
        *(_OWORD *)unint64_t v30 = v32;
        *(_OWORD *)(v30 + 16) = v33;
        unint64_t v23 = v30 + 40;
        double v34 = *(char **)(a1 + 680);
        long long v35 = *(char **)(a1 + 672);
        if (v34 != v35)
        {
          do
          {
            long long v36 = *(_OWORD *)(v34 - 40);
            long long v37 = *(_OWORD *)(v34 - 24);
            *(_WORD *)(v30 - 8) = *((_WORD *)v34 - 4);
            *(_OWORD *)(v30 - 24) = v37;
            *(_OWORD *)(v30 - 40) = v36;
            v30 -= 40;
            v34 -= 40;
          }
          while (v34 != v35);
          double v34 = *(char **)(a1 + 672);
        }
        *(void *)(a1 + 672) = v30;
        *(void *)(a1 + 680) = v23;
        *(void *)(a1 + 688) = v31;
        if (v34) {
          operator delete(v34);
        }
      }
      else
      {
        long long v21 = *(_OWORD *)a2;
        long long v22 = *(_OWORD *)(a2 + 16);
        *(void *)(v19 + 32) = *(void *)(a2 + 32);
        *(_OWORD *)unint64_t v19 = v21;
        *(_OWORD *)(v19 + 16) = v22;
        unint64_t v23 = v19 + 40;
      }
      *(void *)(a1 + 680) = v23;
    }
  }
LABEL_10:
  uint64_t v15 = 1;
LABEL_22:

  return v15;
}

void sub_1BD087E98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = v5;
  if (*(unsigned char *)(a1 + 642))
  {
    uint64_t v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 642) = 1;
  uint64_t v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    uint64_t v7 = 0;
    goto LABEL_82;
  }
  uint64_t v65 = v6;
  if (*(unsigned char *)(a1 + 641)) {
    goto LABEL_5;
  }
  double v9 = *(void **)(a1 + 664);
  if (!v9)
  {
    id v68 = 0;
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 40))
  {
LABEL_5:
    int v8 = 0;
    id v68 = 0;
    goto LABEL_29;
  }
  [v9 sortUsingComparator:&__block_literal_global_689];
  id v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v10 = *(id *)(a1 + 664);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  if (!v11)
  {

    id v12 = 0;
    goto LABEL_27;
  }
  id v12 = 0;
  uint64_t v13 = *(void *)v70;
  do
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (*(void *)v70 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(id *)(*((void *)&v69 + 1) + 8 * i);
      double v16 = v15;
      if (v12)
      {
        uint64_t v17 = [v15 startDate];
        uint64_t v18 = [v12 endDate];
        int v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          unint64_t v20 = [v16 endDate];
          long long v21 = [v12 endDate];
          int v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22) {
            goto LABEL_21;
          }
          id v23 = objc_alloc(MEMORY[0x1E4F28C18]);
          uint64_t v24 = [v12 startDate];
          unint64_t v25 = [v16 endDate];
          id v26 = (id)[v23 initWithStartDate:v24 endDate:v25];
        }
        else
        {
          [v68 addObject:v12];
          id v26 = v16;
        }
        id v12 = v26;
      }
      else
      {
        id v12 = v15;
      }
LABEL_21:
    }
    uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  }
  while (v11);

  if (v12) {
    [v68 addObject:v12];
  }
LABEL_27:

LABEL_28:
  int v8 = 1;
LABEL_29:
  unint64_t v27 = *(void **)(a1 + 664);
  *(void *)(a1 + 664) = 0;

  *(unsigned char *)(a1 + 641) = 0;
  if (!v8)
  {
    unint64_t v38 = *(void *)(a1 + 672);
    *(void *)(a1 + 688) = 0;
    *(void *)(a1 + 680) = 0;
    *(void *)(a1 + 672) = 0;
    unint64_t v39 = v38;
    goto LABEL_47;
  }
  unint64_t v28 = [v68 lastObject];
  if (v28)
  {
    uint64_t v29 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_currentBucketInterval(a1);
    unint64_t v30 = [v29 endDate];
    unint64_t v31 = [v28 endDate];
    int v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      long long v33 = [v28 endDate];
      [v33 timeIntervalSinceReferenceDate];
      double v35 = v34;

      uint64_t v36 = *(void *)(a1 + 672);
      long long v37 = *(long long **)(a1 + 680);
      while ((long long *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((long long *)v36 != v37)
          {
            double v40 = (long long *)(v36 + 40);
            if ((long long *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  long long v41 = *v40;
                  long long v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)uint64_t v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                double v40 = (long long *)((char *)v40 + 40);
              }
              while (v40 != v37);
              long long v37 = *(long long **)(a1 + 680);
            }
          }
          if ((long long *)v36 != v37) {
            *(void *)(a1 + 680) = v36;
          }
          break;
        }
        v36 += 40;
      }
    }
  }
  unint64_t v38 = *(void *)(a1 + 672);
  unint64_t v39 = *(void *)(a1 + 680);
  *(void *)(a1 + 688) = 0;
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 680) = 0;
  if (![v68 count]) {
    goto LABEL_60;
  }
LABEL_47:
  id v43 = v68;
  long long __p = (void *)v38;
  if (v43)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v44 = v43;
    uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v70;
      while (2)
      {
        for (uint64_t j = 0; j != v45; ++j)
        {
          if (*(void *)v70 != v46) {
            objc_enumerationMutation(v44);
          }
          id v48 = *(id *)(*((void *)&v69 + 1) + 8 * j);
          int v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_primitiveInvalidateInterval((id *)a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
        if (v45) {
          continue;
        }
        break;
      }
    }

LABEL_59:
    unint64_t v38 = (unint64_t)__p;
LABEL_60:
    unint64_t v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v51;
    }
    int v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    long long __p = (void *)v38;
    if (v39 != v38)
    {
      uint64_t v54 = v38;
      uint64_t v50 = v67;
      do
      {
        int v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_primitiveAddSample(a1, v54, 1, v50);
        int v53 = v55;
        v54 += 40;
        if (v54 == v39) {
          char v56 = 0;
        }
        else {
          char v56 = v55;
        }
        uint64_t v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_primitiveInvalidateInterval((id *)a1, 0, v67))goto LABEL_59; {
LABEL_70:
    }
    int v53 = 0;
  }
  if (*(void *)(a1 + 40) && *(void *)(a1 + 616) != *(void *)(a1 + 608))
  {
    do
    {
      uint64_t v57 = objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(void *)(a1 + 112) + 1, v50, v65);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      unint64_t v58 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_statisticsFromFinishedBucket(a1, (double *)(a1 + 120));
      long long v59 = [v57 startDate];
      [v59 timeIntervalSinceReferenceDate];
      double v61 = v60;
      uint64_t v62 = [v57 endDate];
      [v62 timeIntervalSinceReferenceDate];
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_notifyForCurrentBucket(a1);
    }
    while (*(void *)(a1 + 616) != *(void *)(a1 + 608));
  }
  *(unsigned char *)(a1 + 642) = 0;
  if (__p) {
    operator delete(__p);
  }

  if (v53)
  {
    if (*(unsigned char *)(a1 + 644))
    {
      *(unsigned char *)(a1 + 644) = 0;
      id v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_notifyForCurrentBucket(a1);
      uint64_t v7 = 1;
      goto LABEL_82;
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v6 = v65;
LABEL_82:
  *(unsigned char *)(a1 + 642) = 0;
LABEL_83:

  return v7;
}

void sub_1BD08859C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    *(unsigned char *)(v13 + 642) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(unsigned char *)(result + 643) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(unsigned char *)(a1 + 642)) {
      goto LABEL_12;
    }
    uint64_t v7 = 0;
LABEL_14:
    uint64_t v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_primitiveInvalidateInterval((id *)a1, v7, a3);
    goto LABEL_15;
  }
  uint64_t v7 = [v6 dateIntervalForIntervalsContainingInterval:v5];

  if (!*(unsigned char *)(a1 + 642)) {
    goto LABEL_14;
  }
  if (!v7)
  {
LABEL_12:
    id v12 = *(void **)(a1 + 664);
    *(void *)(a1 + 664) = 0;

    uint64_t v7 = 0;
    uint64_t v11 = 1;
    *(unsigned char *)(a1 + 641) = 1;
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 641))
  {
    int v8 = *(void **)(a1 + 664);
    if (!v8)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      id v10 = *(void **)(a1 + 664);
      *(void *)(a1 + 664) = v9;

      int v8 = *(void **)(a1 + 664);
    }
    [v8 addObject:v7];
  }
  uint64_t v11 = 1;
LABEL_15:

  return v11;
}

void sub_1BD08889C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    *(unsigned char *)(a1 + 640) = 1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v9[3] = &unk_1E63043E8;
    uint64_t v12 = a1;
    id v10 = v5;
    id v11 = WeakRetained;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 112))(a1, v9, a3);
    if (v7 && *(unsigned char *)(a1 + 640) && !*(void *)(a1 + 40)) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_configureForStartTime(a1);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to query for initial statistics: no data source available.");
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1BD0889F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::reset(uint64_t result)
{
  *(unsigned char *)(result + 640) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 encodeBool:*(unsigned __int8 *)(a1 + 640) forKey:@"needs_config"];
  id v12 = v3;
  int v32 = &unk_1F1726FA0;
  long long v33 = 0;
  int v38 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
  LOBYTE(v38) = 1;
  uint64_t v34 = v4;
  uint64_t v35 = 0;
  statistics::StatisticsEngine::makeCurrentBucket((uint64_t)&v32);
  uint64_t v13 = &unk_1F171B9C8;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  int v31 = 511;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 0;
  int8x16_t v14 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  uint64_t v5 = *(void *)(a1 + 136);
  char v29 = *(unsigned char *)(a1 + 144);
  char v30 = *(unsigned char *)(a1 + 145);
  BOOL v28 = *(_DWORD *)(a1 + 148) == 0;
  int8x16_t v15 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  uint64_t v7 = *(int8x16_t **)(a1 + 216);
  if (v7 != *(int8x16_t **)(a1 + 224))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v7, *v7, 8uLL);
    int8x16_t v40 = v7[1];
    char v43 = 0;
    HIBYTE(v42) = v7[2].i8[9];
    LOBYTE(v42) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>();
  }
  statistics::StatisticsBucket::makeStatistics((uint64_t)&v13);
  HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::archive((uint64_t)&v39, (int *)(a1 + 240));
  statistics::Statistics::operator=(*((statistics **)&v22 + 1), (uint64_t)&v39);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v39);
  uint64_t v8 = *(void *)(a1 + 400);
  if (v8 != a1 + 408)
  {
    HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::archive((uint64_t)&v39, (int *)(v8 + 40));
    uint64_t v9 = *(void *)(v8 + 32);
    v46 |= 0x200u;
    uint64_t v45 = v9;
    PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>();
  }
  id v10 = *(int8x16_t **)(a1 + 184);
  if (v10 != *(int8x16_t **)(a1 + 192))
  {
    unint64_t v39 = (char *)&unk_1F1727540;
    v41.i32[0] = 3;
    int8x16_t v40 = vextq_s8(*v10, *v10, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>();
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v13);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v13);
  id v11 = *(int8x16_t **)(a1 + 608);
  if (v11 != *(int8x16_t **)(a1 + 616))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v11, *v11, 8uLL);
    int8x16_t v40 = v11[1];
    __int16 v42 = 0;
    char v43 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>();
  }
  PB::Writer::Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v39);
  [v12 encodeBytes:v40.i64[0] length:&v39[-v40.i64[0]] forKey:@"hdsce_archived_representation"];
  PB::Writer::~Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);
}

void sub_1BD088DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v62 = a2;
  *(unsigned char *)(a1 + 640) = [v62 decodeBoolForKey:@"needs_config"];
  id v3 = v62;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::HDStatisticsBucket((uint64_t)&v66.n128_i64[1], 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)uint64_t v67 = 0u;
  long long v68 = 0u;
  unint64_t v106 = 0;
  id v65 = v3;
  PB::Reader::Reader((PB::Reader *)v105, (const unsigned __int8 *)[v65 decodeBytesForKey:@"hdsce_archived_representation" returnedLength:&v106]);
  id v98 = &unk_1F1726FA0;
  uint64_t v99 = 0;
  uint64_t v103 = 0;
  uint64_t v101 = 0;
  uint64_t v102 = 0;
  int v104 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v98, (PB::Reader *)v105);
  uint64_t v64 = a1;
  v66.n128_u64[0] = v100;
  if (v99)
  {
    uint64_t v73 = 0;
    memset(v76, 0, sizeof(v76));
    long long __p = 0;
    unint64_t v79 = 0;
    uint64_t v78 = 0;
    *(_DWORD *)uint64_t v80 = 0;
    *(_OWORD *)&v80[8] = xmmword_1BD3301F0;
    memset(&v80[24], 0, 90);
    memset(&v80[120], 0, 34);
    uint64_t v83 = 0;
    unint64_t v82 = 0;
    unint64_t v81 = &v82;
    long long v84 = 0u;
    long long v85 = 0u;
    int v86 = 1065353216;
    long long v87 = 0u;
    long long v88 = 0u;
    long long v89 = 0u;
    uint64_t v90 = 0;
    int v91 = 1065353216;
    long long v92 = 0u;
    long long v93 = 0u;
    int v94 = 1065353216;
    long long v95 = 0u;
    long long v96 = 0u;
    int v97 = 1065353216;
    int8x16_t v69 = vextq_s8(*(int8x16_t *)(v99 + 8), *(int8x16_t *)(v99 + 8), 8uLL);
    uint64_t v4 = *(void *)(v99 + 72);
    uint64_t v70 = *(void *)(v99 + 64);
    char v71 = *(unsigned char *)(v99 + 185);
    char v72 = *(unsigned char *)(v99 + 186);
    int8x16_t v74 = vextq_s8(*(int8x16_t *)(v99 + 24), *(int8x16_t *)(v99 + 24), 8uLL);
    uint64_t v75 = v4;
    uint64_t v5 = *(void *)(v99 + 80);
    uint64_t v6 = *(void *)(v99 + 88);
    double v63 = (void *)v99;
    if (v5 != v6)
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(*(void *)v5 + 24);
        uint64_t v9 = *(void *)(*(void *)v5 + 32);
        uint64_t v10 = *(void *)(*(void *)v5 + 8);
        uint64_t v11 = *(void *)(*(void *)v5 + 16);
        char v12 = *(unsigned char *)(*(void *)v5 + 41);
        char v13 = *(unsigned char *)(*(void *)v5 + 40);
        if ((unint64_t)v7 >= v79)
        {
          int8x16_t v14 = (char *)__p;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)__p) >> 4);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v79 - (void)__p) >> 4) > v16) {
            unint64_t v16 = 0x5555555555555556 * ((uint64_t)(v79 - (void)__p) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v79 - (void)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v17 = 0x555555555555555;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17)
          {
            unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            uint64_t v7 = v78;
            int8x16_t v14 = (char *)__p;
          }
          else
          {
            uint64_t v18 = 0;
          }
          uint64_t v19 = (void *)(v17 + 48 * v15);
          void *v19 = v9;
          v19[1] = v8;
          v19[2] = v10;
          v19[3] = v11;
          *((_WORD *)v19 + 16) = 1;
          *((unsigned char *)v19 + 40) = 0;
          *((unsigned char *)v19 + 41) = v12;
          *((unsigned char *)v19 + 42) = v13;
          uint64_t v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              long long v21 = *((_OWORD *)v7 - 3);
              long long v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            int8x16_t v14 = (char *)__p;
          }
          uint64_t v7 = (char *)(v19 + 6);
          long long __p = v20;
          uint64_t v78 = (char *)(v19 + 6);
          unint64_t v79 = v17 + 48 * v18;
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)uint64_t v7 = v9;
          *((void *)v7 + 1) = v8;
          *((void *)v7 + 2) = v10;
          *((void *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        uint64_t v78 = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    long long v23 = (void *)v63[13];
    if (v23)
    {
      HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::unarchive((uint64_t)&v107, v23);
      *(_OWORD *)&v80[96] = v113;
      *(_OWORD *)&v80[112] = v114;
      *(_OWORD *)&v80[128] = v115;
      *(_OWORD *)&v80[144] = v116;
      *(_OWORD *)&v80[32] = v109;
      *(_OWORD *)&v80[48] = v110;
      *(_OWORD *)&v80[64] = v111;
      *(_OWORD *)&v80[80] = v112;
      *(_OWORD *)uint64_t v80 = v107;
      *(_OWORD *)&v80[16] = v108;
    }
    long long v24 = (void **)v63[17];
    for (uint64_t i = (void **)v63[18]; v24 != i; *(_OWORD *)(v33 + 56) = v40)
    {
      uint64_t v26 = (uint64_t)*v24;
      HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::unarchive((uint64_t)&v107, *v24);
      uint64_t v27 = *(void *)(v26 + 144);
      BOOL v28 = v82;
      char v29 = &v82;
      char v30 = &v82;
      if (v82)
      {
        do
        {
          while (1)
          {
            char v30 = (uint64_t **)v28;
            uint64_t v31 = v28[4];
            if (v31 <= v27) {
              break;
            }
            BOOL v28 = *v30;
            char v29 = v30;
            if (!*v30) {
              goto LABEL_32;
            }
          }
          if (v31 >= v27)
          {
            long long v33 = (char *)v30;
            goto LABEL_35;
          }
          BOOL v28 = v30[1];
        }
        while (v28);
        char v29 = v30 + 1;
      }
LABEL_32:
      long long v33 = (char *)operator new(0xC8uLL);
      *((void *)v33 + 4) = v27;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *(_OWORD *)(v33 + 120) = 0u;
      *(_OWORD *)(v33 + 136) = 0u;
      *(_OWORD *)(v33 + 152) = 0u;
      *(_OWORD *)(v33 + 184) = 0u;
      *(_OWORD *)(v33 + 168) = 0u;
      *(_OWORD *)(v33 + 40) = 0u;
      *((void *)v33 + 7) = 0xFFEFFFFFFFFFFFFFLL;
      *((_OWORD *)v33 + 4) = 0u;
      *((_OWORD *)v33 + 5) = 0u;
      *((_OWORD *)v33 + 6) = 0u;
      *((_OWORD *)v33 + 7) = 0u;
      *((_OWORD *)v33 + 8) = 0u;
      *(_OWORD *)(v33 + 138) = 0u;
      *((_OWORD *)v33 + 10) = 0u;
      *((_OWORD *)v33 + 11) = 0u;
      *((_WORD *)v33 + 96) = 0;
      *(void *)long long v33 = 0;
      *((void *)v33 + 1) = 0;
      *((void *)v33 + 2) = v30;
      void *v29 = (uint64_t *)v33;
      int v32 = (uint64_t *)v33;
      if (*v81)
      {
        unint64_t v81 = (uint64_t **)*v81;
        int v32 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v82, v32);
      ++v83;
LABEL_35:
      long long v34 = v116;
      long long v35 = v115;
      long long v36 = v114;
      *(_OWORD *)(v33 + 136) = v113;
      *(_OWORD *)(v33 + 152) = v36;
      *(_OWORD *)(v33 + 168) = v35;
      *(_OWORD *)(v33 + 184) = v34;
      long long v37 = v112;
      long long v38 = v111;
      long long v39 = v110;
      *(_OWORD *)(v33 + 72) = v109;
      *(_OWORD *)(v33 + 88) = v39;
      *(_OWORD *)(v33 + 104) = v38;
      *(_OWORD *)(v33 + 120) = v37;
      long long v40 = v108;
      *(_OWORD *)(v33 + 40) = v107;
      ++v24;
    }
    uint64_t v41 = v63[5];
    for (uint64_t j = v63[6]; v41 != j; v41 += 8)
    {
      double v44 = *(double *)(*(void *)v41 + 8);
      double v43 = *(double *)(*(void *)v41 + 16);
      if (v44 >= v43) {
        double v45 = *(double *)(*(void *)v41 + 16);
      }
      else {
        double v45 = *(double *)(*(void *)v41 + 8);
      }
      if (v43 < v44) {
        double v43 = *(double *)(*(void *)v41 + 8);
      }
      HKIntervalMask<double>::_insertInterval(v76, v45, v43);
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::operator=((uint64_t)&v66.n128_i64[1], (uint64_t)&v69);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::~HDStatisticsBucket((uint64_t)&v69);
  }
  uint64_t v46 = v101;
  uint64_t v47 = v102;
  if (v101 != v102)
  {
    id v48 = (char *)v67[1];
    do
    {
      uint64_t v49 = *(void *)(*(void *)v46 + 24);
      uint64_t v50 = *(void *)(*(void *)v46 + 32);
      uint64_t v51 = *(void *)(*(void *)v46 + 8);
      uint64_t v52 = *(void *)(*(void *)v46 + 16);
      if ((unint64_t)v48 >= (unint64_t)v68)
      {
        int v53 = (char *)v67[0];
        unint64_t v54 = 0xCCCCCCCCCCCCCCCDLL * ((v48 - (char *)v67[0]) >> 3);
        unint64_t v55 = v54 + 1;
        if (v54 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(v68 - (unint64_t)v67[0]) >> 3) > v55) {
          unint64_t v55 = 0x999999999999999ALL * ((uint64_t)(v68 - (unint64_t)v67[0]) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v68 - (unint64_t)v67[0]) >> 3) >= 0x333333333333333) {
          unint64_t v56 = 0x666666666666666;
        }
        else {
          unint64_t v56 = v55;
        }
        if (v56)
        {
          unint64_t v56 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v56);
          id v48 = (char *)v67[1];
          int v53 = (char *)v67[0];
        }
        else
        {
          uint64_t v57 = 0;
        }
        unint64_t v58 = v56 + 40 * v54;
        *(void *)unint64_t v58 = v50;
        *(void *)(v58 + 8) = v49;
        *(void *)(v58 + 16) = v51;
        *(void *)(v58 + 24) = v52;
        *(_WORD *)(v58 + 32) = 1;
        long long v59 = (char *)v58;
        if (v48 != v53)
        {
          do
          {
            long long v60 = *(_OWORD *)(v48 - 40);
            long long v61 = *(_OWORD *)(v48 - 24);
            *((_WORD *)v59 - 4) = *((_WORD *)v48 - 4);
            *(_OWORD *)(v59 - 24) = v61;
            *(_OWORD *)(v59 - 40) = v60;
            v59 -= 40;
            v48 -= 40;
          }
          while (v48 != v53);
          int v53 = (char *)v67[0];
        }
        id v48 = (char *)(v58 + 40);
        v67[0] = v59;
        v67[1] = (void *)(v58 + 40);
        *(void *)&long long v68 = v56 + 40 * v57;
        if (v53) {
          operator delete(v53);
        }
      }
      else
      {
        *(void *)id v48 = v50;
        *((void *)v48 + 1) = v49;
        *((void *)v48 + 2) = v51;
        *((void *)v48 + 3) = v52;
        *((_WORD *)v48 + 16) = 1;
        v48 += 40;
      }
      v67[1] = v48;
      v46 += 8;
    }
    while (v46 != v47);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v98);

  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::operator=((void *)(v64 + 112), &v66);
  if (v67[0])
  {
    v67[1] = v67[0];
    operator delete(v67[0]);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::~HDStatisticsBucket((uint64_t)&v66.n128_i64[1]);
}

void sub_1BD089564(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  va_start(va, a7);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x430]);
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = xmmword_1BD3301F0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 218) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_WORD *)(a1 + 272) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 280) = a1 + 288;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(void *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 400) = 1065353216;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_DWORD *)(a1 + 440) = 1065353216;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_DWORD *)(a1 + 480) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 496);
  if (v2)
  {
    *(void *)(a1 + 504) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::~HDStatisticsBucket(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 448);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 408);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 368);
  unint64_t v2 = *(void **)(a1 + 344);
  if (v2)
  {
    *(void *)(a1 + 352) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 304);
  std::__tree<long>::destroy(*(void **)(a1 + 288));
  id v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(void *)(a1 + 104) = v3;
    operator delete(v3);
  }
  objc_destroyWeak((id *)(a1 + 88));
  uint64_t v4 = *(void **)(a1 + 64);
  if (v4)
  {
    *(void *)(a1 + 72) = v4;
    operator delete(v4);
  }

  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_configureForStartTime(uint64_t a1)
{
  unint64_t v28 = 0;
  unint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
    uint64_t v4 = [v2 dateIntervalContainingDate:v3 index:&v28];

    uint64_t v5 = [v4 startDate];
    [v5 timeIntervalSinceReferenceDate];
    double v7 = v6;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
LABEL_5:
    double v13 = v9;

    goto LABEL_6;
  }
  id v10 = *(id *)(a1 + 64);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v11 = [v10 startDate];
    [v11 timeIntervalSinceReferenceDate];
    double v7 = v12;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
    goto LABEL_5;
  }
  double v7 = -1.79769313e308;
  double v13 = 1.79769313e308;
LABEL_6:

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::HDStatisticsBucket((uint64_t)v21, WeakRetained, v7, v13);

  if (*(void *)(a1 + 32) == 1) {
    char v23 = 1;
  }
  uint64_t v22 = *(void *)(a1 + 56);
  char v24 = *(unsigned char *)(a1 + 24) & 1;
  if (v27 != (char *)(a1 + 72)) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27, *(char **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4);
  }
  objc_storeStrong(&v26, *(id *)(a1 + 656));
  if (!*(void *)(a1 + 40)) {
    int v25 = 0;
  }
  unint64_t v15 = v28;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v21);
  v18.n128_u64[0] = v15;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::HDStatisticsBucket((uint64_t)&v18.n128_i64[1], (uint64_t)v17);
  long long __p = 0u;
  long long v20 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::operator=((void *)(a1 + 112), &v18);

  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::~HDStatisticsBucket((uint64_t)&v18.n128_i64[1]);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::~HDStatisticsBucket((uint64_t)v17);
  *(unsigned char *)(a1 + 640) = 0;
  return HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::~HDStatisticsBucket((uint64_t)v21);
}

void sub_1BD089A8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::operator=(void *a1, __n128 *a2)
{
  *a1 = a2->n128_u64[0];
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::operator=((uint64_t)(a1 + 1), (uint64_t)&a2->n128_i64[1]);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 62), a2 + 31);
  unint64_t v4 = a2[32].n128_u64[1];
  a2[32].n128_u64[1] = 0;
  uint64_t v5 = (void *)a1[65];
  a1[65] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 96);
  double v7 = *(unsigned char **)(a2 + 104);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(void *)(a1 + 96) = v10;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(void *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  long long v12 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v12;
  long long v13 = *(_OWORD *)(a2 + 152);
  long long v14 = *(_OWORD *)(a2 + 168);
  long long v15 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = v15;
  *(_OWORD *)(a1 + 168) = v14;
  *(_OWORD *)(a1 + 152) = v13;
  long long v16 = *(_OWORD *)(a2 + 216);
  long long v17 = *(_OWORD *)(a2 + 232);
  long long v18 = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 248) = v18;
  *(_OWORD *)(a1 + 232) = v17;
  *(_OWORD *)(a1 + 216) = v16;
  uint64_t v19 = (void *)(a1 + 288);
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 280) = a1 + 288;
  long long v20 = *(void **)(a2 + 280);
  if (v20 != (void *)(a2 + 288))
  {
    long long v21 = 0;
    uint64_t v22 = (void *)(a1 + 288);
    while (1)
    {
      uint64_t v23 = v20[4];
      char v24 = (void *)(a1 + 288);
      if (v22 == v19) {
        goto LABEL_12;
      }
      int v25 = v21;
      id v26 = (void *)(a1 + 288);
      if (v21)
      {
        do
        {
          char v24 = v25;
          int v25 = (void *)v25[1];
        }
        while (v25);
      }
      else
      {
        do
        {
          char v24 = (void *)v26[2];
          BOOL v27 = *v24 == (void)v26;
          id v26 = v24;
        }
        while (v27);
      }
      if (v24[4] < v23)
      {
LABEL_12:
        if (v21) {
          unint64_t v28 = (uint64_t **)v24;
        }
        else {
          unint64_t v28 = (uint64_t **)(a1 + 288);
        }
        if (v21) {
          char v29 = (uint64_t **)(v24 + 1);
        }
        else {
          char v29 = (uint64_t **)(a1 + 288);
        }
        if (!*v29)
        {
LABEL_28:
          int v32 = operator new(0xC8uLL);
          long long v33 = *((_OWORD *)v20 + 2);
          long long v34 = *((_OWORD *)v20 + 4);
          v32[3] = *((_OWORD *)v20 + 3);
          v32[4] = v34;
          v32[2] = v33;
          long long v35 = *((_OWORD *)v20 + 5);
          long long v36 = *((_OWORD *)v20 + 6);
          long long v37 = *((_OWORD *)v20 + 8);
          v32[7] = *((_OWORD *)v20 + 7);
          v32[8] = v37;
          v32[5] = v35;
          v32[6] = v36;
          long long v38 = *((_OWORD *)v20 + 9);
          long long v39 = *((_OWORD *)v20 + 10);
          long long v40 = *((_OWORD *)v20 + 11);
          *((void *)v32 + 24) = v20[24];
          v32[10] = v39;
          v32[11] = v40;
          v32[9] = v38;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 280), (uint64_t)v28, v29, (uint64_t *)v32);
        }
      }
      else
      {
        char v29 = (uint64_t **)(a1 + 288);
        unint64_t v28 = (uint64_t **)(a1 + 288);
        if (!v21) {
          goto LABEL_28;
        }
        char v30 = v21;
        while (1)
        {
          while (1)
          {
            unint64_t v28 = (uint64_t **)v30;
            uint64_t v31 = v30[4];
            if (v31 <= v23) {
              break;
            }
            char v30 = *v28;
            char v29 = v28;
            if (!*v28) {
              goto LABEL_28;
            }
          }
          if (v31 >= v23) {
            break;
          }
          char v30 = v28[1];
          if (!v30)
          {
            char v29 = v28 + 1;
            goto LABEL_28;
          }
        }
      }
      uint64_t v41 = (void *)v20[1];
      if (v41)
      {
        do
        {
          __int16 v42 = v41;
          uint64_t v41 = (void *)*v41;
        }
        while (v41);
      }
      else
      {
        do
        {
          __int16 v42 = (void *)v20[2];
          BOOL v27 = *v42 == (void)v20;
          long long v20 = v42;
        }
        while (!v27);
      }
      if (v42 == (void *)(a2 + 288)) {
        break;
      }
      long long v21 = (void *)*v19;
      uint64_t v22 = *(void **)(a1 + 280);
      long long v20 = v42;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 304, a2 + 304);
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 344), *(const void **)(a2 + 344), *(void *)(a2 + 352), (uint64_t)(*(void *)(a2 + 352) - *(void *)(a2 + 344)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 368, a2 + 368);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 408, a2 + 408);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 448, a2 + 448);
  return a1;
}

void sub_1BD089E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, id *location, void **a12)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v16);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v15);
  uint64_t v19 = *v14;
  if (*v14)
  {
    *(void *)(v12 + 352) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v13);
  std::__tree<long>::destroy(*v17);
  long long v20 = *a10;
  if (*a10)
  {
    *(void *)(v12 + 104) = v20;
    operator delete(v20);
  }
  objc_destroyWeak(location);
  long long v21 = *a12;
  if (*a12)
  {
    *(void *)(v12 + 72) = v21;
    operator delete(v21);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::operator=(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  long long v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v5;

  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  id WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  uint64_t v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(void *)(a1 + 104) = v9;
    operator delete(v9);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 96) = 0;
  long long v10 = *(_OWORD *)(a2 + 168);
  long long v11 = *(_OWORD *)(a2 + 184);
  long long v12 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 200) = v12;
  *(_OWORD *)(a1 + 184) = v11;
  *(_OWORD *)(a1 + 168) = v10;
  long long v13 = *(_OWORD *)(a2 + 232);
  long long v14 = *(_OWORD *)(a2 + 248);
  long long v15 = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 264) = v15;
  *(_OWORD *)(a1 + 248) = v14;
  *(_OWORD *)(a1 + 232) = v13;
  long long v16 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v16;
  uint64_t v17 = a1 + 288;
  std::__tree<long>::destroy(*(void **)(a1 + 288));
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  uint64_t v18 = *(void *)(a2 + 288);
  *(void *)(a1 + 288) = v18;
  uint64_t v19 = *(void *)(a2 + 296);
  *(void *)(a1 + 296) = v19;
  if (v19)
  {
    *(void *)(v18 + 16) = v17;
    *(void *)(a2 + 280) = a2 + 288;
    *(void *)(a2 + 288) = 0;
    *(void *)(a2 + 296) = 0;
  }
  else
  {
    *(void *)(a1 + 280) = v17;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 304, (uint64_t *)(a2 + 304));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 344, (__n128 *)(a2 + 344));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 368, (uint64_t *)(a2 + 368));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 408, (uint64_t *)(a2 + 408));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 448, (uint64_t *)(a2 + 448));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_statisticsFromFinishedBucket(uint64_t a1, double *a2)
{
  uint64_t v123 = *MEMORY[0x1E4F143B8];
  double v5 = *a2;
  id v6 = objc_alloc(MEMORY[0x1E4F1C9C8]);
  long long v7 = a2 + 5;
  if (v5 != -1.79769313e308) {
    long long v7 = a2;
  }
  uint64_t v106 = (uint64_t)a2;
  id v107 = (id)[v6 initWithTimeIntervalSinceReferenceDate:*v7];
  if (a2[1] == 1.79769313e308) {
    uint64_t v8 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:a2[6]];
  }
  else {
    uint64_t v8 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:a2[1]];
  }
  uint64_t v9 = (void *)v8;
  id v10 = *(id *)(a1 + 16);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v11 = *(id *)(a1 + 16);
    if ([v11 shouldUseUnderlyingTypeForStatistics])
    {
      uint64_t v12 = [v11 underlyingSampleType];

      id v10 = (id)v12;
    }
  }
  uint64_t v13 = [objc_alloc(MEMORY[0x1E4F2B5B0]) initWithDataType:v10 startDate:v107 endDate:v9];
  uint64_t v14 = a1;
  if (*(unsigned char *)(a1 + 24))
  {
    int8x8_t prime = (int8x8_t)(a1 + 48);
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      unint64_t v2 = (unint64_t)objc_alloc_init(MEMORY[0x1E4F1CA48]);
      long long v16 = *(uint64_t **)(v106 + 344);
      uint64_t v17 = *(uint64_t **)(v106 + 352);
      while (v16 != v17)
      {
        uint64_t v18 = *v16;
        id v19 = objc_loadWeakRetained(*(id **)&prime);
        long long v20 = [v19 sourceForSourceID:v18];

        if (v20)
        {
          if (([(id)v2 containsObject:v20] & 1) == 0) {
            [(id)v2 addObject:v20];
          }
        }

        ++v16;
      }
      int8x8_t prime = (int8x8_t)[(id)v2 copy];
      [(id)v13 _setSources:*(void *)&prime];

      uint64_t v14 = a1;
    }
  }

  v121[0] = &unk_1F17233B0;
  uint64_t v122 = v121;
  id v108 = (id)v13;
  uint64_t v110 = *(void *)(v14 + 24);
  long long v21 = *(_OWORD *)(v106 + 232);
  long long v117 = *(_OWORD *)(v106 + 216);
  long long v118 = v21;
  long long v22 = *(_OWORD *)(v106 + 264);
  long long v119 = *(_OWORD *)(v106 + 248);
  long long v120 = v22;
  long long v23 = *(_OWORD *)(v106 + 168);
  long long v113 = *(_OWORD *)(v106 + 152);
  long long v114 = v23;
  long long v24 = *(_OWORD *)(v106 + 200);
  long long v115 = *(_OWORD *)(v106 + 184);
  long long v116 = v24;
  long long v25 = *(_OWORD *)(v106 + 136);
  *(_OWORD *)long long __p = *(_OWORD *)(v106 + 120);
  long long v112 = v25;
  if (!v122) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  id v26 = (double *)(*(uint64_t (**)(void *, void **))(*v122 + 48))(v122, __p);
  double v28 = v26[5];
  double v27 = v26[6];
  double v29 = v26[7];
  uint64_t v30 = *((void *)v26 + 8);
  double v32 = v26[9];
  double v31 = v26[10];
  double v33 = v26[11];
  uint64_t v34 = *(void *)(a1 + 24);
  uint64_t v35 = _HKStatisticsOptionBaselineRelativeQuantities();
  long long v36 = *(void **)(a1 + 16);
  if ((v35 & v34) != 0) {
    [v36 _unitForChangeInCanonicalUnit];
  }
  else {
  long long v109 = [v36 canonicalUnit];
  }
  if ((v110 & 2) != 0)
  {
    uint64_t v13 = [MEMORY[0x1E4F2B370] quantityWithUnit:v109 doubleValue:v28];
    [v108 setAverageQuantity:v13];
  }
  if ((v110 & 4) != 0)
  {
    uint64_t v13 = [MEMORY[0x1E4F2B370] quantityWithUnit:v109 doubleValue:v29];
    [v108 setMinimumQuantity:v13];
  }
  if ((v110 & 8) != 0)
  {
    uint64_t v13 = [MEMORY[0x1E4F2B370] quantityWithUnit:v109 doubleValue:v27];
    [v108 setMaximumQuantity:v13];
  }
  if ((v110 & 0x20) != 0)
  {
    long long v37 = [MEMORY[0x1E4F2B370] quantityWithUnit:v109 doubleValue:v32];
    [v108 setMostRecentQuantity:v37];

    uint64_t v13 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v31, v33);
    [v108 setMostRecentQuantityDateInterval:v13];
  }
  [v108 setDataCount:v30];
  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    goto LABEL_164;
  }
  if ((v110 & 2) != 0) {
    id v102 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else {
    id v102 = 0;
  }
  if ((v110 & 4) != 0) {
    id v101 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else {
    id v101 = 0;
  }
  if ((v110 & 8) != 0) {
    id v99 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else {
    id v99 = 0;
  }
  if ((v110 & 0x20) != 0)
  {
    id v98 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v100 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else
  {
    id v100 = 0;
    id v98 = 0;
  }
  id v104 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  *(_OWORD *)long long __p = 0u;
  long long v112 = 0u;
  LODWORD(v113) = 1065353216;
  long long v38 = *(void **)(v106 + 280);
  if (v38 == (void *)(v106 + 288)) {
    goto LABEL_155;
  }
  do
  {
    long long v39 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_bundleIdentifierForSourceID(v106, v38[4]);
    long long v40 = v39;
    if (!v39) {
      goto LABEL_122;
    }
    unint64_t v41 = [v39 hash];
    unint64_t v42 = v41;
    unint64_t v43 = (unint64_t)__p[1];
    if (!__p[1]) {
      goto LABEL_64;
    }
    uint8x8_t v44 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v44.i16[0] = vaddlv_u8(v44);
    unint64_t v45 = v44.u32[0];
    if (v44.u32[0] > 1uLL)
    {
      unint64_t v2 = v41;
      if ((void *)v41 >= __p[1]) {
        unint64_t v2 = v41 % (unint64_t)__p[1];
      }
    }
    else
    {
      unint64_t v2 = ((unint64_t)__p[1] - 1) & v41;
    }
    uint64_t v46 = (uint64_t *)*((void *)__p[0] + v2);
    if (!v46 || (uint64_t v13 = *v46) == 0)
    {
LABEL_64:
      uint64_t v13 = (uint64_t)operator new(0xB8uLL);
      *(void *)uint64_t v13 = 0;
      *(void *)(v13 + 8) = v42;
      *(void *)(v13 + 16) = v40;
      *(_OWORD *)(v13 + 40) = 0u;
      *(_OWORD *)(v13 + 56) = 0u;
      *(_OWORD *)(v13 + 72) = 0u;
      *(_OWORD *)(v13 + 88) = 0u;
      *(_OWORD *)(v13 + 104) = 0u;
      *(_OWORD *)(v13 + 120) = 0u;
      *(_OWORD *)(v13 + 136) = 0u;
      *(_OWORD *)(v13 + 168) = 0u;
      *(_OWORD *)(v13 + 152) = 0u;
      *(_OWORD *)(v13 + 24) = 0u;
      *(void *)(v13 + 40) = 0xFFEFFFFFFFFFFFFFLL;
      *(_OWORD *)(v13 + 48) = 0u;
      *(_OWORD *)(v13 + 64) = 0u;
      *(_OWORD *)(v13 + 80) = 0u;
      *(_OWORD *)(v13 + 96) = 0u;
      *(_OWORD *)(v13 + 112) = 0u;
      *(_OWORD *)(v13 + 122) = 0u;
      *(_OWORD *)(v13 + 144) = 0u;
      *(_OWORD *)(v13 + 160) = 0u;
      *(_WORD *)(v13 + 176) = 0;
      float v51 = (float)(unint64_t)(*((void *)&v112 + 1) + 1);
      if (v43 && (float)(*(float *)&v113 * (float)v43) >= v51)
      {
LABEL_111:
        __n128 v66 = __p[0];
        uint64_t v67 = (uint64_t *)*((void *)__p[0] + v2);
        if (v67)
        {
          *(void *)uint64_t v13 = *v67;
        }
        else
        {
          *(void *)uint64_t v13 = v112;
          *(void *)&long long v112 = v13;
          v66[v2] = &v112;
          if (!*(void *)v13)
          {
LABEL_120:
            ++*((void *)&v112 + 1);
            goto LABEL_121;
          }
          unint64_t v68 = *(void *)(*(void *)v13 + 8);
          if ((v43 & (v43 - 1)) != 0)
          {
            if (v68 >= v43) {
              v68 %= v43;
            }
          }
          else
          {
            v68 &= v43 - 1;
          }
          uint64_t v67 = (uint64_t *)((char *)__p[0] + 8 * v68);
        }
        *uint64_t v67 = v13;
        goto LABEL_120;
      }
      BOOL v52 = v43 < 3 || (v43 & (v43 - 1)) != 0;
      unint64_t v53 = v52 | (2 * v43);
      unint64_t v54 = vcvtps_u32_f32(v51 / *(float *)&v113);
      if (v53 <= v54) {
        int8x8_t prime = (int8x8_t)v54;
      }
      else {
        int8x8_t prime = (int8x8_t)v53;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v43 = (unint64_t)__p[1];
      if ((void *)*(void *)&prime > __p[1]) {
        goto LABEL_77;
      }
      if ((void *)*(void *)&prime < __p[1])
      {
        unint64_t v61 = vcvtps_u32_f32((float)*((unint64_t *)&v112 + 1) / *(float *)&v113);
        if (__p[1] < (void *)3
          || (uint8x8_t v62 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v62.i16[0] = vaddlv_u8(v62), v62.u32[0] > 1uLL))
        {
          unint64_t v61 = std::__next_prime(v61);
        }
        else
        {
          uint64_t v63 = 1 << -(char)__clz(v61 - 1);
          if (v61 >= 2) {
            unint64_t v61 = v63;
          }
        }
        if (*(void *)&prime <= v61) {
          int8x8_t prime = (int8x8_t)v61;
        }
        if (*(void *)&prime >= v43)
        {
          unint64_t v43 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_77:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v55 = operator new(8 * *(void *)&prime);
            unint64_t v56 = __p[0];
            __p[0] = v55;
            if (v56) {
              operator delete(v56);
            }
            uint64_t v57 = 0;
            __p[1] = (void *)prime;
            do
              *((void *)__p[0] + v57++) = 0;
            while (*(void *)&prime != v57);
            unint64_t v58 = (void **)v112;
            if ((void)v112)
            {
              unint64_t v59 = *(void *)(v112 + 8);
              uint8x8_t v60 = (uint8x8_t)vcnt_s8(prime);
              v60.i16[0] = vaddlv_u8(v60);
              if (v60.u32[0] > 1uLL)
              {
                if (v59 >= *(void *)&prime) {
                  v59 %= *(void *)&prime;
                }
              }
              else
              {
                v59 &= *(void *)&prime - 1;
              }
              *((void *)__p[0] + v59) = &v112;
              for (i = *v58; i; unint64_t v59 = v65)
              {
                unint64_t v65 = i[1];
                if (v60.u32[0] > 1uLL)
                {
                  if (v65 >= *(void *)&prime) {
                    v65 %= *(void *)&prime;
                  }
                }
                else
                {
                  v65 &= *(void *)&prime - 1;
                }
                if (v65 != v59)
                {
                  if (!*((void *)__p[0] + v65))
                  {
                    *((void *)__p[0] + v65) = v58;
                    goto LABEL_102;
                  }
                  *unint64_t v58 = (void *)*i;
                  void *i = **((void **)__p[0] + v65);
                  **((void **)__p[0] + v65) = i;
                  uint64_t i = v58;
                }
                unint64_t v65 = v59;
LABEL_102:
                unint64_t v58 = (void **)i;
                uint64_t i = (void *)*i;
              }
            }
            unint64_t v43 = (unint64_t)prime;
            goto LABEL_106;
          }
          unint64_t v79 = __p[0];
          __p[0] = 0;
          if (v79) {
            operator delete(v79);
          }
          unint64_t v43 = 0;
          __p[1] = 0;
        }
      }
LABEL_106:
      if ((v43 & (v43 - 1)) != 0)
      {
        if (v42 >= v43) {
          unint64_t v2 = v42 % v43;
        }
        else {
          unint64_t v2 = v42;
        }
      }
      else
      {
        unint64_t v2 = (v43 - 1) & v42;
      }
      goto LABEL_111;
    }
    unint64_t v103 = (unint64_t)__p[1] - 1;
    while (1)
    {
      unint64_t v47 = *(void *)(v13 + 8);
      if (v47 == v42) {
        break;
      }
      if (v45 > 1)
      {
        if (v47 >= v43) {
          v47 %= v43;
        }
      }
      else
      {
        v47 &= v103;
      }
      if (v47 != v2) {
        goto LABEL_64;
      }
LABEL_63:
      uint64_t v13 = *(void *)v13;
      if (!v13) {
        goto LABEL_64;
      }
    }
    int8x8_t prime = (int8x8_t)*(id *)(v13 + 16);
    id v48 = v40;
    uint64_t v49 = v48;
    if ((id)prime != v48)
    {
      char v50 = [*(id *)&prime isEqualToString:v48];

      if (v50) {
        goto LABEL_121;
      }
      goto LABEL_63;
    }

LABEL_121:
    long long v69 = *(_OWORD *)(v38 + 5);
    *(_OWORD *)(v13 + 40) = *(_OWORD *)(v38 + 7);
    *(_OWORD *)(v13 + 24) = v69;
    long long v70 = *(_OWORD *)(v38 + 9);
    long long v71 = *(_OWORD *)(v38 + 11);
    long long v72 = *(_OWORD *)(v38 + 13);
    *(_OWORD *)(v13 + 104) = *(_OWORD *)(v38 + 15);
    *(_OWORD *)(v13 + 88) = v72;
    *(_OWORD *)(v13 + 72) = v71;
    *(_OWORD *)(v13 + 56) = v70;
    long long v73 = *(_OWORD *)(v38 + 17);
    long long v74 = *(_OWORD *)(v38 + 19);
    long long v75 = *(_OWORD *)(v38 + 21);
    *(_OWORD *)(v13 + 168) = *(_OWORD *)(v38 + 23);
    *(_OWORD *)(v13 + 152) = v75;
    *(_OWORD *)(v13 + 136) = v74;
    *(_OWORD *)(v13 + 120) = v73;

LABEL_122:
    long long v76 = (void *)v38[1];
    if (v76)
    {
      do
      {
        uint64_t v77 = v76;
        long long v76 = (void *)*v76;
      }
      while (v76);
    }
    else
    {
      do
      {
        uint64_t v77 = (void *)v38[2];
        BOOL v78 = *v77 == (void)v38;
        long long v38 = v77;
      }
      while (!v78);
    }
    long long v38 = v77;
  }
  while (v77 != (void *)(v106 + 288));
  uint64_t v80 = (uint64_t **)v112;
  if ((void)v112)
  {
    int8x8_t prime = (int8x8_t)0x1E4F28000uLL;
    do
    {
      unint64_t v81 = v80[2];
      if ((v110 & 2) != 0)
      {
        if (!v122) {
          goto LABEL_182;
        }
        unint64_t v82 = objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v109, *(double *)((*(uint64_t (**)(void *, uint64_t *))(*v122 + 48))(v122, (uint64_t *)v80 + 3) + 40));
        [v102 setObject:v82 forKeyedSubscript:v81];
      }
      if ((v110 & 4) != 0)
      {
        if (!v122) {
          goto LABEL_182;
        }
        uint64_t v83 = objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v109, *(double *)((*(uint64_t (**)(void *, uint64_t *))(*v122 + 48))(v122, (uint64_t *)v80 + 3) + 56));
        [v101 setObject:v83 forKeyedSubscript:v81];
      }
      if ((v110 & 8) != 0)
      {
        if (!v122) {
          goto LABEL_182;
        }
        long long v84 = objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v109, *(double *)((*(uint64_t (**)(void *, uint64_t *))(*v122 + 48))(v122, (uint64_t *)v80 + 3) + 48));
        [v99 setObject:v84 forKeyedSubscript:v81];
      }
      if ((v110 & 0x20) != 0)
      {
        if (!v122) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        uint64_t v85 = (*(uint64_t (**)(void *, uint64_t *))(*v122 + 48))(v122, (uint64_t *)v80 + 3);
        double v86 = *(double *)(v85 + 80);
        double v87 = *(double *)(v85 + 88);
        long long v88 = [MEMORY[0x1E4F2B370] quantityWithUnit:v109 doubleValue:*(double *)(v85 + 72)];
        [v98 setObject:v88 forKeyedSubscript:v81];

        long long v89 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v86, v87);
        [v100 setObject:v89 forKeyedSubscript:v81];
      }
      if (!v122) {
LABEL_182:
      }
        std::__throw_bad_function_call[abi:ne180100]();
      uint64_t v13 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)((*(uint64_t (**)(void *, uint64_t *))(*v122 + 48))(v122, (uint64_t *)v80 + 3) + 64));
      [v104 setObject:v13 forKeyedSubscript:v81];

      uint64_t v80 = (uint64_t **)*v80;
    }
    while (v80);
  }
LABEL_155:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>>>::~__hash_table((uint64_t)__p);
  if ((v110 & 2) != 0) {
    [v108 setAverageQuantityBySource:v102];
  }
  if ((v110 & 4) != 0) {
    [v108 setMinimumQuantityBySource:v101];
  }
  if ((v110 & 8) != 0) {
    [v108 setMaximumQuantityBySource:v99];
  }
  if ((v110 & 0x20) != 0)
  {
    [v108 setMostRecentQuantityBySource:v98];
    [v108 setMostRecentQuantityDateIntervalBySource:v100];
  }
  [v108 setDataCountBySource:v104];

LABEL_164:
  std::__function::__value_func<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)>::~__value_func[abi:ne180100](v121);
  uint64_t v90 = [*(id *)(a1 + 16) _unitForChangeInCanonicalUnit];
  int v91 = [v108 averageQuantity];
  if (v91)
  {
    uint64_t v13 = [v108 averageQuantity];
    if (([(id)v13 isCompatibleWithUnit:v90] & 1) == 0)
    {

      goto LABEL_178;
    }
  }
  long long v92 = [v108 minimumQuantity];
  if (v92)
  {
    int8x8_t prime = [v108 minimumQuantity];
    if (![*(id *)&prime isCompatibleWithUnit:v90])
    {
      int v93 = 1;
      goto LABEL_172;
    }
  }
  int v94 = [v108 maximumQuantity];
  if (v94)
  {
    long long v95 = [v108 maximumQuantity];
    int v96 = [v95 isCompatibleWithUnit:v90];

    int v93 = v96 ^ 1;
    if (v92) {
      goto LABEL_172;
    }
LABEL_176:
    if (!v91) {
      goto LABEL_177;
    }
LABEL_173:

    if ((v93 & 1) == 0) {
      goto LABEL_179;
    }
LABEL_178:
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8], @"Expected compatibility with %@", v90 format];
    goto LABEL_179;
  }
  int v93 = 0;
  if (!v92) {
    goto LABEL_176;
  }
LABEL_172:

  if (v91) {
    goto LABEL_173;
  }
LABEL_177:

  if (v93) {
    goto LABEL_178;
  }
LABEL_179:

  return v108;
}

void sub_1BD08AF34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23)
{
  std::__function::__value_func<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)>::~__value_func[abi:ne180100]((void *)(v23 - 176));
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 328);
  uint64_t v2 = *(void *)(a1 + 344);
  if (v1 != (*(void *)(a1 + 352) - v2) >> 3)
  {
    long long v4 = (void **)(a1 + 344);
    *(void *)(a1 + 352) = v2;
    std::vector<long long>::reserve((void **)(a1 + 344), v1);
    double v5 = *(void **)(a1 + 320);
    if (v5)
    {
      id v6 = *(char **)(a1 + 352);
      do
      {
        uint64_t v7 = v5[2];
        unint64_t v8 = *(void *)(a1 + 360);
        if ((unint64_t)v6 >= v8)
        {
          id v10 = (char *)*v4;
          uint64_t v11 = (v6 - (unsigned char *)*v4) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            id v10 = *(char **)(a1 + 344);
            id v6 = *(char **)(a1 + 352);
          }
          else
          {
            uint64_t v15 = 0;
          }
          long long v16 = (void *)(v14 + 8 * v11);
          *long long v16 = v7;
          uint64_t v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            uint64_t v17 = *((void *)v6 - 1);
            v6 -= 8;
            *--long long v16 = v17;
          }
          *(void *)(a1 + 344) = v16;
          *(void *)(a1 + 352) = v9;
          *(void *)(a1 + 360) = v14 + 8 * v15;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)id v6 = v7;
          uint64_t v9 = v6 + 8;
        }
        *(void *)(a1 + 352) = v9;
        double v5 = (void *)*v5;
        id v6 = v9;
      }
      while (v5);
    }
    uint64_t v18 = (id *)(a1 + 88);
    id WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      id v20 = objc_loadWeakRetained(v18);
      [v20 orderSourceIDs:v4];
    }
  }
}

void sub_1BD08B33C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2) {
    a2 = v4 * floor(a2 / v4);
  }
  double v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    uint64_t v101 = a1 + 120;
    id v102 = (char **)(a1 + 96);
    location = (id *)(a1 + 88);
    id v6 = (void *)(a1 + 288);
    do
    {
      uint64_t v7 = *(double **)(a1 + 96);
      unint64_t v8 = *(long long **)(a1 + 104);
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v7) >> 4);
      if (v9)
      {
        if (v9 != 1)
        {
          double v30 = a2;
          double v31 = a2;
          double v32 = v5;
          uint64_t v33 = *(void *)(a1 + 96);
          if (v7 != (double *)v8)
          {
            do
            {
              double v34 = *(double *)(v33 + 8);
              double v35 = *(double *)(v33 + 16);
              if (v34 > v32 && v34 < v31) {
                double v31 = *(double *)(v33 + 8);
              }
              if (v35 > v5) {
                double v37 = *(double *)(v33 + 16);
              }
              else {
                double v37 = v30;
              }
              if (v35 < v30)
              {
                double v32 = v5;
                double v30 = v37;
              }
              v33 += 48;
            }
            while ((long long *)v33 != v8);
          }
          if (v30 >= v31) {
            double v38 = v31;
          }
          else {
            double v38 = v30;
          }
          double v39 = *(double *)(a1 + 16);
          if (v39 > 0.0)
          {
            double v40 = v39 * floor(v38 / v39);
            double v41 = v39 * floor((v39 + v5) / v39);
            if (v40 >= v41) {
              double v38 = v40;
            }
            else {
              double v38 = v41;
            }
          }
          *id v102 = 0;
          v102[1] = 0;
          v102[2] = 0;
          if (v7 != (double *)v8)
          {
            if (v9 > 0x555555555555555) {
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v9);
            unint64_t v45 = *(char **)(a1 + 96);
            uint8x8_t v44 = *(char **)(a1 + 104);
            uint64_t v46 = v42;
            if (v44 != v45)
            {
              do
              {
                long long v47 = *((_OWORD *)v44 - 3);
                long long v48 = *((_OWORD *)v44 - 2);
                *(_OWORD *)(v46 - 21) = *(_OWORD *)(v44 - 21);
                *((_OWORD *)v46 - 3) = v47;
                *((_OWORD *)v46 - 2) = v48;
                v46 -= 48;
                v44 -= 48;
              }
              while (v44 != v45);
              uint8x8_t v44 = *v102;
            }
            *(void *)(a1 + 96) = v46;
            *(void *)(a1 + 104) = v42;
            *(void *)(a1 + 112) = &v42[48 * v43];
            if (v44) {
              operator delete(v44);
            }
          }
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_updateSourceOrder(a1);
          id WeakRetained = objc_loadWeakRetained(location);

          unint64_t v50 = __clz(v9);
          if (WeakRetained)
          {
            *(void *)&long long v104 = a1;
            uint64_t v51 = 126 - 2 * v50;
            if (v7 == (double *)v8) {
              uint64_t v52 = 0;
            }
            else {
              uint64_t v52 = v51;
            }
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder*,false>((unint64_t)v7, v8, (uint64_t)&v104, v52, 1);
          }
          else
          {
            uint64_t v60 = 126 - 2 * v50;
            if (v7 == (double *)v8) {
              uint64_t v52 = 0;
            }
            else {
              uint64_t v52 = v60;
            }
          }
          std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder*,false>((unint64_t)v7, v8, v52, 1);
          if (*(unsigned char *)(a1 + 25)) {
            id v100 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
          }
          else {
            id v100 = 0;
          }
          if (v7 == (double *)v8)
          {
LABEL_140:
            long long v92 = *(void **)(a1 + 280);
            if (v92 != v6)
            {
              do
              {
                int v93 = (void *)v92[1];
                if (v93)
                {
                  do
                  {
                    int v94 = v93;
                    int v93 = (void *)*v93;
                  }
                  while (v93);
                }
                else
                {
                  do
                  {
                    int v94 = (void *)v92[2];
                    BOOL v95 = *v94 == (void)v92;
                    long long v92 = v94;
                  }
                  while (!v95);
                }
                long long v92 = v94;
              }
              while (v94 != v6);
            }
            *(double *)(a1 + 56) = v38;

            if (v7) {
              operator delete(v7);
            }
            goto LABEL_152;
          }
          uint64_t v61 = 0;
          char v62 = 0;
          uint64_t v63 = v7;
          while (2)
          {
            long long v64 = *((_OWORD *)v63 + 1);
            long long v104 = *(_OWORD *)v63;
            long long v105 = v64;
            uint64_t v106 = *((void *)v63 + 4);
            if (!(_BYTE)v106 || *((double *)&v104 + 1) > v38)
            {
              unint64_t v65 = *(long long **)(a1 + 104);
              unint64_t v66 = *(void *)(a1 + 112);
              if ((unint64_t)v65 >= v66)
              {
                unint64_t v70 = 0xAAAAAAAAAAAAAAABLL * (((char *)v65 - *v102) >> 4);
                unint64_t v71 = v70 + 1;
                if (v70 + 1 > 0x555555555555555) {
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v72 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - (void)*v102) >> 4);
                if (2 * v72 > v71) {
                  unint64_t v71 = 2 * v72;
                }
                if (v72 >= 0x2AAAAAAAAAAAAAALL) {
                  unint64_t v73 = 0x555555555555555;
                }
                else {
                  unint64_t v73 = v71;
                }
                if (v73) {
                  unint64_t v73 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v73);
                }
                else {
                  uint64_t v74 = 0;
                }
                BOOL v78 = (long long *)(v73 + 48 * v70);
                long long v79 = *(_OWORD *)v63;
                long long v80 = *((_OWORD *)v63 + 2);
                v78[1] = *((_OWORD *)v63 + 1);
                v78[2] = v80;
                *BOOL v78 = v79;
                unint64_t v82 = *(char **)(a1 + 96);
                unint64_t v81 = *(char **)(a1 + 104);
                uint64_t v83 = v78;
                if (v81 != v82)
                {
                  do
                  {
                    long long v84 = *((_OWORD *)v81 - 3);
                    long long v85 = *((_OWORD *)v81 - 2);
                    *(long long *)((char *)v83 - 21) = *(_OWORD *)(v81 - 21);
                    *(v83 - 3) = v84;
                    *(v83 - 2) = v85;
                    v83 -= 3;
                    v81 -= 48;
                  }
                  while (v81 != v82);
                  unint64_t v81 = *v102;
                }
                long long v69 = v78 + 3;
                *(void *)(a1 + 96) = v83;
                *(void *)(a1 + 104) = v78 + 3;
                *(void *)(a1 + 112) = v73 + 48 * v74;
                if (v81) {
                  operator delete(v81);
                }
              }
              else
              {
                long long v67 = *(_OWORD *)v63;
                long long v68 = *((_OWORD *)v63 + 2);
                v65[1] = *((_OWORD *)v63 + 1);
                v65[2] = v68;
                *unint64_t v65 = v67;
                long long v69 = v65 + 3;
              }
              *(void *)(a1 + 104) = v69;
LABEL_139:
              v63 += 6;
              if (v63 == (double *)v8) {
                goto LABEL_140;
              }
              continue;
            }
            break;
          }
          double v75 = *(double *)&v105;
          if (*(double *)&v105 > v38) {
            double v75 = v38;
          }
          *(double *)&long long v105 = v75;
          for (uint64_t i = *(double **)(a1 + 64); i != *(double **)(a1 + 72) && *((double *)&v104 + 1) >= *i; i += 2)
          {
            if (*((double *)&v104 + 1) < i[1]) {
              goto LABEL_139;
            }
          }
          if (v62)
          {
            unint64_t v77 = *((void *)&v105 + 1);
            if (v61 == *((void *)&v105 + 1) || *(unsigned char *)(a1 + 24)) {
              HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::addSample(v101, (double *)&v104);
            }
          }
          else
          {
            HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::addSample(v101, (double *)&v104);
            unint64_t v77 = *((void *)&v105 + 1);
            uint64_t v61 = *((void *)&v105 + 1);
          }
          if (!*(unsigned char *)(a1 + 25)) {
            goto LABEL_138;
          }
          double v86 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_bundleIdentifierForSourceID(a1, v77);
          if (!v86) {
            goto LABEL_137;
          }
          double v87 = [v100 objectForKeyedSubscript:v86];
          long long v88 = v87;
          if (v87)
          {
            if ([v87 longLongValue] != v77 && !*(unsigned char *)(a1 + 24))
            {
LABEL_136:

LABEL_137:
LABEL_138:
              char v62 = 1;
              goto LABEL_139;
            }
          }
          else
          {
            long long v89 = [NSNumber numberWithLongLong:v77];
            [v100 setObject:v89 forKeyedSubscript:v86];
          }
          unint64_t v90 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_canonicalSourceIDForSourceID(a1, v77);
          int v91 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_statisticsForSource(a1, v90);
          HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::addSample((uint64_t)v91, (double *)&v104);
          goto LABEL_136;
        }
        int v10 = *((unsigned __int8 *)v7 + 42);
        int v11 = *((unsigned __int8 *)v7 + 41);
        int v12 = *((unsigned __int8 *)v7 + 40);
        double v13 = v7[1];
        double v14 = v7[2];
        unint64_t v15 = *((void *)v7 + 3);
        char v16 = *((unsigned char *)v7 + 33);
        if (v14 <= a2) {
          double v17 = v7[2];
        }
        else {
          double v17 = a2;
        }
        if (v13 < a2) {
          int v18 = *((unsigned __int8 *)v7 + 32);
        }
        else {
          int v18 = 0;
        }
        if (v13 < a2) {
          char v19 = 0;
        }
        else {
          char v19 = *((unsigned char *)v7 + 33);
        }
        if (v13 < a2)
        {
          uint64_t v20 = 0;
        }
        else
        {
          double v17 = v7[2];
          uint64_t v20 = *((void *)v7 + 3);
        }
        if (v13 < a2) {
          double v21 = 0.0;
        }
        else {
          double v21 = v7[2];
        }
        if (v13 < a2) {
          double v22 = 0.0;
        }
        else {
          double v22 = *v7;
        }
        if (v13 < a2) {
          double v23 = 0.0;
        }
        else {
          double v23 = v7[1];
        }
        if (v13 < a2) {
          int v24 = 0;
        }
        else {
          int v24 = *((unsigned __int8 *)v7 + 32);
        }
        if (*((unsigned char *)v7 + 32))
        {
          double v14 = v17;
        }
        else
        {
          int v18 = 0;
          char v19 = 0;
          uint64_t v20 = 0;
        }
        if (*((unsigned char *)v7 + 32)) {
          double v25 = v21;
        }
        else {
          double v25 = 0.0;
        }
        if (*((unsigned char *)v7 + 32)) {
          double v26 = v22;
        }
        else {
          double v26 = 0.0;
        }
        if (*((unsigned char *)v7 + 32)) {
          double v27 = v23;
        }
        else {
          double v27 = 0.0;
        }
        if (*((unsigned char *)v7 + 32)) {
          int v28 = v24;
        }
        else {
          int v28 = 0;
        }
        *(double *)&long long v104 = *v7;
        *((double *)&v104 + 1) = v13;
        *(double *)&long long v105 = v14;
        *((void *)&v105 + 1) = v15;
        LOBYTE(v106) = v18;
        BYTE1(v106) = v16;
        *(_DWORD *)((char *)&v106 + 2) = *(_DWORD *)((char *)v7 + 34);
        HIWORD(v106) = *((_WORD *)v7 + 19);
        *(double *)&long long v107 = v26;
        *((double *)&v107 + 1) = v27;
        *(double *)&long long v108 = v25;
        *((void *)&v108 + 1) = v20;
        LOBYTE(v109) = v28;
        HIBYTE(v109) = v19;
        for (uint64_t j = *(double **)(a1 + 64); j != *(double **)(a1 + 72) && v13 >= *j; j += 2)
        {
          if (v13 < j[1])
          {
            BOOL v53 = v12 != 0;
            BOOL v54 = v11 != 0;
            BOOL v55 = v10 != 0;
            if (!v28) {
              goto LABEL_150;
            }
LABEL_88:
            LOWORD(v103) = v109;
            long long v58 = v108;
            unint64_t v59 = *v102;
            *(_OWORD *)unint64_t v59 = v107;
            *((_OWORD *)v59 + 1) = v58;
            *((void *)v59 + 4) = v103;
            v59[40] = v53;
            v59[41] = v54;
            v59[42] = v55;
            goto LABEL_151;
          }
        }
        BOOL v53 = v12 != 0;
        BOOL v54 = v11 != 0;
        BOOL v55 = v10 != 0;
        if (v18)
        {
          HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::addSample(v101, (double *)&v104);
          if (*(unsigned char *)(a1 + 25))
          {
            unint64_t v56 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_canonicalSourceIDForSourceID(a1, v15);
            uint64_t v57 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_statisticsForSource(a1, v56);
            HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::addSample((uint64_t)v57, (double *)&v104);
          }
          BOOL v53 = 1;
          BOOL v54 = 1;
          BOOL v55 = 1;
        }
        if (v28) {
          goto LABEL_88;
        }
LABEL_150:
        *(void *)(a1 + 104) = *(void *)(a1 + 96);
      }
LABEL_151:
      *(double *)(a1 + 56) = a2;
LABEL_152:
      double v96 = *(double *)(a1 + 56);
      if (v96 == v5)
      {
        int v97 = [MEMORY[0x1E4F28B00] currentHandler];
        id v98 = [NSString stringWithUTF8String:"void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeThroughTime(double) [Statistics = HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>]"];
        [v97 handleFailureInFunction:v98 file:@"HDStatisticsBucket.hpp" lineNumber:234 description:@"Failed to make forward progress during statistics merge."];

        double v96 = *(double *)(a1 + 56);
      }
      double v5 = v96;
    }
    while (v96 < a2);
  }
}

void sub_1BD08BAC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::addSample(uint64_t a1, double *a2)
{
  double result = *a2;
  int v3 = 2 * (*a2 != -1.79769313e308);
  if (*a2 == 1.79769313e308) {
    int v3 = 1;
  }
  if (v3)
  {
    if (v3 == 1)
    {
      if (!*(_DWORD *)a1)
      {
        int v4 = 1;
        goto LABEL_14;
      }
    }
    else if (v3 == 2)
    {
      if (*(_DWORD *)a1 != 2)
      {
        int v4 = 2;
LABEL_14:
        *(_DWORD *)a1 = v4;
        *(_OWORD *)(a1 + 8) = xmmword_1BD3301F0;
        uint64_t v5 = a1 + 8;
        *(_OWORD *)(a1 + 104) = 0u;
        *(_OWORD *)(a1 + 88) = 0u;
        *(_OWORD *)(a1 + 72) = 0u;
        *(_OWORD *)(a1 + 24) = 0u;
        *(_OWORD *)(a1 + 40) = 0u;
        *(_OWORD *)(a1 + 56) = 0u;
        long long v6 = *(_OWORD *)(a1 + 136);
        *(_WORD *)(a1 + 112) = *(_WORD *)(a1 + 152);
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 120);
        *(_OWORD *)(a1 + 96) = v6;
        return HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::addSample(v5, a2);
      }
LABEL_10:
      uint64_t v5 = a1 + 8;
      return HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::addSample(v5, a2);
    }
  }
  else if (!*(_DWORD *)a1 && !*(void *)(a1 + 72))
  {
    goto LABEL_10;
  }
  return result;
}

uint64_t **HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = a2;
  int v3 = *(void **)(a1 + 288);
  if (!v3) {
    goto LABEL_11;
  }
  int v4 = (uint64_t **)(a1 + 288);
  do
  {
    uint64_t v5 = v3[4];
    BOOL v6 = v5 < a2;
    if (v5 >= a2) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = v3 + 1;
    }
    if (!v6) {
      int v4 = (uint64_t **)v3;
    }
    int v3 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t **)(a1 + 288) || (uint64_t)v4[4] > a2)
  {
LABEL_11:
    unint64_t v8 = (uint64_t **)(a1 + 280);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 280), a2, &v10);
    int v4 = std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v8, a2, &v10);
  }
  return v4 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    uint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((void *)(a1 + 368), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_bundleIdentifierForSourceID(a1, a2);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      id v10 = v6;
      uint64_t v7 = (void *)(a1 + 408);
      unint64_t v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        int v11 = &v10;
        *((void *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        id v6 = v10;
      }
    }
  }
  return a2;
}

void sub_1BD08BD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  int v4 = (id *)(a1 + 88);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    id v6 = (void *)(a1 + 448);
    uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
    if (v7)
    {
      id v8 = (id)v7[3];
    }
    else
    {
      id v9 = objc_loadWeakRetained(v4);
      id v8 = [v9 bundleIdentifierForSourceID:a2];

      if (v8)
      {
        id v10 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
        objc_storeStrong(v10 + 3, v8);
      }
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1BD08BE30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, void *a3)
{
  id v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        uint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        id v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        id v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    id v9 = (char *)operator new(0xC8uLL);
    *((void *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    *(_OWORD *)(v9 + 136) = 0u;
    *(_OWORD *)(v9 + 152) = 0u;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 168) = 0u;
    *(_OWORD *)(v9 + 184) = 0u;
    *((void *)v9 + 7) = 0xFFEFFFFFFFFFFFFFLL;
    *((_OWORD *)v9 + 4) = 0u;
    *((_OWORD *)v9 + 5) = 0u;
    *((_OWORD *)v9 + 6) = 0u;
    *((_OWORD *)v9 + 7) = 0u;
    *((_OWORD *)v9 + 8) = 0u;
    *(_OWORD *)(v9 + 138) = 0u;
    *((_WORD *)v9 + 96) = 0;
    *((_OWORD *)v9 + 10) = 0u;
    *((_OWORD *)v9 + 11) = 0u;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v12 = a2 - 3;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 4);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v103 = *((void *)a2 - 3);
                uint64_t v104 = *(void *)(v13 + 24);
                if (v103 == v104) {
                  return;
                }
                long long v105 = *(char **)(*(void *)a3 + 344);
                uint64_t v106 = *(char **)(*(void *)a3 + 352);
                long long v107 = v105;
                long long v108 = v105;
                if (v105 == v106) {
                  goto LABEL_171;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)v13, (long long *)(v13 + 48), a2 - 3, a3);
                return;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, (uint64_t)(a2 - 3), a3);
                return;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, v13 + 144, (uint64_t)(a2 - 3), a3);
                return;
              default:
                JUMPOUT(0);
            }
            do
            {
              if (*(void *)v108 == v103) {
                goto LABEL_168;
              }
              v108 += 8;
            }
            while (v108 != v106);
            long long v108 = *(char **)(*(void *)a3 + 352);
LABEL_168:
            while (*(void *)v107 != v104)
            {
              v107 += 8;
              if (v107 == v106)
              {
                long long v107 = *(char **)(*(void *)a3 + 352);
                break;
              }
            }
LABEL_171:
            if (v108 - v105 < v107 - v105)
            {
              *(_OWORD *)v226 = *(_OWORD *)(v13 + 16);
              *(_OWORD *)&v226[16] = *(_OWORD *)(v13 + 32);
              long long v218 = *(_OWORD *)v13;
              long long v109 = *v12;
              long long v110 = *(a2 - 2);
              *(_OWORD *)(v13 + 27) = *(long long *)((char *)a2 - 21);
              *(_OWORD *)unint64_t v13 = v109;
              *(_OWORD *)(v13 + 16) = v110;
              *(long long *)((char *)a2 - 21) = *(_OWORD *)&v226[11];
              long long *v12 = v218;
              *(a2 - 2) = *(_OWORD *)v226;
            }
            return;
          }
          if (v14 <= 1151)
          {
            long long v111 = (long long *)(v13 + 48);
            BOOL v113 = (long long *)v13 == a2 || v111 == a2;
            if (a5)
            {
              if (!v113)
              {
                unint64_t v114 = v13;
                do
                {
                  unint64_t v115 = v114;
                  unint64_t v114 = (unint64_t)v111;
                  uint64_t v116 = *(void *)(v115 + 72);
                  uint64_t v117 = *(void *)(v115 + 24);
                  if (v116 != v117)
                  {
                    long long v118 = *(char **)(*(void *)a3 + 344);
                    long long v119 = *(char **)(*(void *)a3 + 352);
                    long long v120 = v118;
                    long long v121 = v118;
                    if (v118 != v119)
                    {
                      do
                      {
                        if (*(void *)v121 == v116) {
                          goto LABEL_196;
                        }
                        v121 += 8;
                      }
                      while (v121 != v119);
                      long long v121 = *(char **)(*(void *)a3 + 352);
LABEL_196:
                      while (*(void *)v120 != v117)
                      {
                        v120 += 8;
                        if (v120 == v119)
                        {
                          long long v120 = *(char **)(*(void *)a3 + 352);
                          break;
                        }
                      }
                    }
                    if (v121 - v118 < v120 - v118)
                    {
                      uint64_t v227 = *(void *)(v114 + 16);
                      long long v219 = *(_OWORD *)v114;
                      long long v236 = *(_OWORD *)(v115 + 80);
                      unint64_t v122 = v114;
                      while (1)
                      {
                        long long v123 = *(_OWORD *)(v115 + 16);
                        *(_OWORD *)unint64_t v122 = *(_OWORD *)v115;
                        *(_OWORD *)(v122 + 16) = v123;
                        *(_OWORD *)(v122 + 27) = *(_OWORD *)(v115 + 27);
                        if (v115 == v13) {
                          break;
                        }
                        unint64_t v122 = v115;
                        uint64_t v124 = *(void *)(v115 - 24);
                        if (v116 != v124)
                        {
                          uint64_t v125 = *(char **)(*(void *)a3 + 344);
                          uint64_t v126 = *(char **)(*(void *)a3 + 352);
                          uint64_t v127 = v125;
                          uint64_t v128 = v125;
                          if (v125 != v126)
                          {
                            do
                            {
                              if (*(void *)v128 == v116) {
                                goto LABEL_208;
                              }
                              v128 += 8;
                            }
                            while (v128 != v126);
                            uint64_t v128 = *(char **)(*(void *)a3 + 352);
LABEL_208:
                            while (*(void *)v127 != v124)
                            {
                              v127 += 8;
                              if (v127 == v126)
                              {
                                uint64_t v127 = *(char **)(*(void *)a3 + 352);
                                break;
                              }
                            }
                          }
                          unint64_t v115 = v122 - 48;
                          if (v128 - v125 < v127 - v125) {
                            continue;
                          }
                        }
                        goto LABEL_212;
                      }
                      unint64_t v122 = v13;
LABEL_212:
                      *(_OWORD *)unint64_t v122 = v219;
                      *(void *)(v122 + 16) = v227;
                      *(void *)(v122 + 24) = v116;
                      *(void *)(v122 + 32) = v236;
                      *(_DWORD *)(v122 + 39) = *(_DWORD *)((char *)&v236 + 7);
                    }
                  }
                  long long v111 = (long long *)(v114 + 48);
                }
                while ((long long *)(v114 + 48) != a2);
              }
            }
            else if (!v113)
            {
              do
              {
                unint64_t v201 = a1;
                a1 = (unint64_t)v111;
                uint64_t v202 = *(void *)(v201 + 72);
                uint64_t v203 = *(void *)(v201 + 24);
                if (v202 != v203)
                {
                  v204 = *(char **)(*(void *)a3 + 344);
                  v205 = *(char **)(*(void *)a3 + 352);
                  v206 = v204;
                  v207 = v204;
                  if (v204 != v205)
                  {
                    do
                    {
                      if (*(void *)v207 == v202) {
                        goto LABEL_312;
                      }
                      v207 += 8;
                    }
                    while (v207 != v205);
                    v207 = *(char **)(*(void *)a3 + 352);
LABEL_312:
                    while (*(void *)v206 != v203)
                    {
                      v206 += 8;
                      if (v206 == v205)
                      {
                        v206 = *(char **)(*(void *)a3 + 352);
                        break;
                      }
                    }
                  }
                  if (v207 - v204 < v206 - v204)
                  {
                    uint64_t v230 = *(void *)(a1 + 16);
                    long long v222 = *(_OWORD *)a1;
                    long long v239 = *(_OWORD *)(v201 + 80);
                    unint64_t v208 = a1;
                    do
                    {
                      v209 = (_OWORD *)v208;
                      unint64_t v208 = v201;
                      long long v210 = *(_OWORD *)(v201 + 16);
                      _OWORD *v209 = *(_OWORD *)v201;
                      v209[1] = v210;
                      *(_OWORD *)((char *)v209 + 27) = *(_OWORD *)(v201 + 27);
                      uint64_t v211 = *(void *)(v201 - 24);
                      if (v202 == v211) {
                        break;
                      }
                      v212 = *(char **)(*(void *)a3 + 344);
                      v213 = *(char **)(*(void *)a3 + 352);
                      v214 = v212;
                      v215 = v212;
                      if (v212 != v213)
                      {
                        do
                        {
                          if (*(void *)v215 == v202) {
                            goto LABEL_322;
                          }
                          v215 += 8;
                        }
                        while (v215 != v213);
                        v215 = *(char **)(*(void *)a3 + 352);
LABEL_322:
                        while (*(void *)v214 != v211)
                        {
                          v214 += 8;
                          if (v214 == v213)
                          {
                            v214 = *(char **)(*(void *)a3 + 352);
                            break;
                          }
                        }
                      }
                      unint64_t v201 = v208 - 48;
                    }
                    while (v215 - v212 < v214 - v212);
                    *(_OWORD *)unint64_t v208 = v222;
                    *(void *)(v208 + 16) = v230;
                    *(void *)(v208 + 24) = v202;
                    *(void *)(v208 + 32) = v239;
                    *(_DWORD *)(v208 + 39) = *(_DWORD *)((char *)&v239 + 7);
                  }
                }
                long long v111 = (long long *)(a1 + 48);
              }
              while ((long long *)(a1 + 48) != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((long long *)v13 != a2)
            {
              int64_t v129 = (v15 - 2) >> 1;
              int64_t v130 = v129;
              do
              {
                int64_t v131 = v130;
                if (v129 >= v130)
                {
                  uint64_t v132 = (2 * v130) | 1;
                  unint64_t v133 = v13 + 48 * v132;
                  if (2 * v131 + 2 < (uint64_t)v15)
                  {
                    uint64_t v134 = *(void *)(v133 + 24);
                    uint64_t v135 = *(void *)(v133 + 72);
                    if (v134 != v135)
                    {
                      v137 = *(char **)(*(void *)a3 + 344);
                      v136 = *(char **)(*(void *)a3 + 352);
                      v138 = v137;
                      v139 = v137;
                      if (v137 != v136)
                      {
                        do
                        {
                          if (*(void *)v139 == v134) {
                            goto LABEL_224;
                          }
                          v139 += 8;
                        }
                        while (v139 != v136);
                        v139 = *(char **)(*(void *)a3 + 352);
LABEL_224:
                        while (*(void *)v138 != v135)
                        {
                          v138 += 8;
                          if (v138 == v136)
                          {
                            v138 = *(char **)(*(void *)a3 + 352);
                            break;
                          }
                        }
                      }
                      v133 += 48 * (v139 - v137 < v138 - v137);
                      if (v139 - v137 < v138 - v137) {
                        uint64_t v132 = 2 * v131 + 2;
                      }
                    }
                  }
                  unint64_t v140 = v13 + 48 * v131;
                  uint64_t v141 = *(void *)(v133 + 24);
                  uint64_t v142 = *(void *)(v140 + 24);
                  if (v141 == v142) {
                    goto LABEL_238;
                  }
                  v144 = *(char **)(*(void *)a3 + 344);
                  v143 = *(char **)(*(void *)a3 + 352);
                  v145 = v144;
                  v146 = v144;
                  if (v144 != v143)
                  {
                    do
                    {
                      if (*(void *)v146 == v141) {
                        goto LABEL_234;
                      }
                      v146 += 8;
                    }
                    while (v146 != v143);
                    v146 = *(char **)(*(void *)a3 + 352);
LABEL_234:
                    while (*(void *)v145 != v142)
                    {
                      v145 += 8;
                      if (v145 == v143)
                      {
                        v145 = *(char **)(*(void *)a3 + 352);
                        break;
                      }
                    }
                  }
                  if (v146 - v144 >= v145 - v144)
                  {
LABEL_238:
                    uint64_t v228 = *(void *)(v140 + 16);
                    long long v220 = *(_OWORD *)v140;
                    long long v237 = *(_OWORD *)(v140 + 32);
                    long long v147 = *(_OWORD *)v133;
                    long long v148 = *(_OWORD *)(v133 + 16);
                    *(_OWORD *)(v140 + 27) = *(_OWORD *)(v133 + 27);
                    *(_OWORD *)unint64_t v140 = v147;
                    *(_OWORD *)(v140 + 16) = v148;
                    if (v129 >= v132)
                    {
                      while (1)
                      {
                        uint64_t v150 = 2 * v132;
                        uint64_t v132 = (2 * v132) | 1;
                        unint64_t v149 = v13 + 48 * v132;
                        uint64_t v151 = v150 + 2;
                        if (v151 < (uint64_t)v15)
                        {
                          uint64_t v152 = *(void *)(v149 + 24);
                          uint64_t v153 = *(void *)(v149 + 72);
                          if (v152 != v153)
                          {
                            v154 = *(char **)(*(void *)a3 + 344);
                            v155 = *(char **)(*(void *)a3 + 352);
                            v156 = v154;
                            v157 = v154;
                            if (v154 != v155)
                            {
                              do
                              {
                                if (*(void *)v157 == v152) {
                                  goto LABEL_246;
                                }
                                v157 += 8;
                              }
                              while (v157 != v155);
                              v157 = *(char **)(*(void *)a3 + 352);
LABEL_246:
                              while (*(void *)v156 != v153)
                              {
                                v156 += 8;
                                if (v156 == v155)
                                {
                                  v156 = *(char **)(*(void *)a3 + 352);
                                  break;
                                }
                              }
                            }
                            v149 += 48 * (v157 - v154 < v156 - v154);
                            if (v157 - v154 < v156 - v154) {
                              uint64_t v132 = v151;
                            }
                          }
                        }
                        uint64_t v158 = *(void *)(v149 + 24);
                        if (v158 != v142)
                        {
                          v160 = *(char **)(*(void *)a3 + 344);
                          v159 = *(char **)(*(void *)a3 + 352);
                          v161 = v160;
                          v162 = v160;
                          if (v160 != v159)
                          {
                            do
                            {
                              if (*(void *)v162 == v158) {
                                goto LABEL_256;
                              }
                              v162 += 8;
                            }
                            while (v162 != v159);
                            v162 = *(char **)(*(void *)a3 + 352);
LABEL_256:
                            while (*(void *)v161 != v142)
                            {
                              v161 += 8;
                              if (v161 == v159)
                              {
                                v161 = *(char **)(*(void *)a3 + 352);
                                break;
                              }
                            }
                          }
                          if (v162 - v160 < v161 - v160) {
                            break;
                          }
                        }
                        long long v163 = *(_OWORD *)v149;
                        long long v164 = *(_OWORD *)(v149 + 16);
                        *(_OWORD *)(v133 + 27) = *(_OWORD *)(v149 + 27);
                        *(_OWORD *)unint64_t v133 = v163;
                        *(_OWORD *)(v133 + 16) = v164;
                        unint64_t v133 = v149;
                        if (v129 < v132) {
                          goto LABEL_261;
                        }
                      }
                    }
                    unint64_t v149 = v133;
LABEL_261:
                    *(_OWORD *)unint64_t v149 = v220;
                    *(void *)(v149 + 16) = v228;
                    *(void *)(v149 + 24) = v142;
                    *(void *)(v149 + 32) = v237;
                    *(_DWORD *)(v149 + 39) = *(_DWORD *)((char *)&v237 + 7);
                  }
                }
                int64_t v130 = v131 - 1;
              }
              while (v131);
              int64_t v165 = v14 / 0x30uLL;
              do
              {
                uint64_t v166 = 0;
                *(_OWORD *)v229 = *(_OWORD *)(v13 + 16);
                *(_OWORD *)&v229[16] = *(_OWORD *)(v13 + 32);
                long long v221 = *(_OWORD *)v13;
                uint64_t v167 = v165 - 2;
                if (v165 < 2) {
                  uint64_t v167 = v165 - 1;
                }
                uint64_t v168 = v167 >> 1;
                unint64_t v169 = v13;
                do
                {
                  v170 = (_OWORD *)v169;
                  v169 += 48 * v166 + 48;
                  uint64_t v171 = 2 * v166;
                  uint64_t v166 = (2 * v166) | 1;
                  uint64_t v172 = v171 + 2;
                  if (v171 + 2 < v165)
                  {
                    uint64_t v173 = *(void *)(v169 + 24);
                    uint64_t v174 = *(void *)(v169 + 72);
                    if (v173 != v174)
                    {
                      v176 = *(char **)(*(void *)a3 + 344);
                      v175 = *(char **)(*(void *)a3 + 352);
                      v177 = v176;
                      v178 = v176;
                      if (v176 != v175)
                      {
                        do
                        {
                          if (*(void *)v178 == v173) {
                            goto LABEL_273;
                          }
                          v178 += 8;
                        }
                        while (v178 != v175);
                        v178 = *(char **)(*(void *)a3 + 352);
LABEL_273:
                        while (*(void *)v177 != v174)
                        {
                          v177 += 8;
                          if (v177 == v175)
                          {
                            v177 = *(char **)(*(void *)a3 + 352);
                            break;
                          }
                        }
                      }
                      v169 += 48 * (v178 - v176 < v177 - v176);
                      if (v178 - v176 < v177 - v176) {
                        uint64_t v166 = v172;
                      }
                    }
                  }
                  long long v179 = *(_OWORD *)v169;
                  long long v180 = *(_OWORD *)(v169 + 16);
                  *(_OWORD *)((char *)v170 + 27) = *(_OWORD *)(v169 + 27);
                  _OWORD *v170 = v179;
                  v170[1] = v180;
                }
                while (v166 <= v168);
                a2 -= 3;
                if ((long long *)v169 == a2)
                {
                  *(_OWORD *)(v169 + 27) = *(_OWORD *)&v229[11];
                  *(_OWORD *)unint64_t v169 = v221;
                  *(_OWORD *)(v169 + 16) = *(_OWORD *)v229;
                }
                else
                {
                  long long v181 = *a2;
                  long long v182 = a2[1];
                  *(_OWORD *)(v169 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v169 = v181;
                  *(_OWORD *)(v169 + 16) = v182;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v229[11];
                  *a2 = v221;
                  a2[1] = *(_OWORD *)v229;
                  uint64_t v183 = v169 - v13 + 48;
                  if (v183 >= 49)
                  {
                    unint64_t v184 = (v183 / 0x30uLL - 2) >> 1;
                    unint64_t v185 = v13 + 48 * v184;
                    uint64_t v186 = *(void *)(v185 + 24);
                    uint64_t v187 = *(void *)(v169 + 24);
                    if (v186 != v187)
                    {
                      v189 = *(char **)(*(void *)a3 + 344);
                      v188 = *(char **)(*(void *)a3 + 352);
                      v190 = v189;
                      v191 = v189;
                      if (v189 != v188)
                      {
                        do
                        {
                          if (*(void *)v191 == v186) {
                            goto LABEL_286;
                          }
                          v191 += 8;
                        }
                        while (v191 != v188);
                        v191 = *(char **)(*(void *)a3 + 352);
LABEL_286:
                        while (*(void *)v190 != v187)
                        {
                          v190 += 8;
                          if (v190 == v188)
                          {
                            v190 = *(char **)(*(void *)a3 + 352);
                            break;
                          }
                        }
                      }
                      if (v191 - v189 < v190 - v189)
                      {
                        uint64_t v242 = *(void *)(v169 + 16);
                        long long v238 = *(_OWORD *)v169;
                        long long v233 = *(_OWORD *)(v169 + 32);
                        do
                        {
                          v192 = (_OWORD *)v169;
                          unint64_t v169 = v185;
                          long long v193 = *(_OWORD *)v185;
                          long long v194 = *(_OWORD *)(v185 + 16);
                          *(_OWORD *)((char *)v192 + 27) = *(_OWORD *)(v185 + 27);
                          _OWORD *v192 = v193;
                          v192[1] = v194;
                          if (!v184) {
                            break;
                          }
                          unint64_t v184 = (v184 - 1) >> 1;
                          unint64_t v185 = v13 + 48 * v184;
                          uint64_t v195 = *(void *)(v185 + 24);
                          if (v195 == v187) {
                            break;
                          }
                          v197 = *(char **)(*(void *)a3 + 344);
                          v196 = *(char **)(*(void *)a3 + 352);
                          v198 = v197;
                          v199 = v197;
                          if (v197 != v196)
                          {
                            do
                            {
                              if (*(void *)v199 == v195) {
                                goto LABEL_297;
                              }
                              v199 += 8;
                            }
                            while (v199 != v196);
                            v199 = *(char **)(*(void *)a3 + 352);
LABEL_297:
                            while (*(void *)v198 != v187)
                            {
                              v198 += 8;
                              if (v198 == v196)
                              {
                                v198 = *(char **)(*(void *)a3 + 352);
                                break;
                              }
                            }
                          }
                        }
                        while (v199 - v197 < v198 - v197);
                        *(_OWORD *)unint64_t v169 = v238;
                        *(void *)(v169 + 16) = v242;
                        *(void *)(v169 + 24) = v187;
                        *(void *)(v169 + 32) = v233;
                        *(_DWORD *)(v169 + 39) = *(_DWORD *)((char *)&v233 + 7);
                      }
                    }
                  }
                }
              }
              while (v165-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          double v17 = (long long *)(v13 + 48 * (v15 >> 1));
          if ((unint64_t)v14 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v15 >> 1)), a2 - 3, a3);
            uint64_t v18 = 3 * v16;
            char v19 = (long long *)(a1 + 48 * v16 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48), v19, a2 - 6, a3);
            uint64_t v20 = (long long *)(a1 + 48 + 16 * v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 96), v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v19, v17, v20, a3);
            *(_OWORD *)v223 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v223[16] = *(_OWORD *)(a1 + 32);
            long long v216 = *(_OWORD *)a1;
            long long v21 = *(long long *)((char *)v17 + 27);
            long long v22 = v17[1];
            *(_OWORD *)a1 = *v17;
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(a1 + 27) = v21;
            *(long long *)((char *)v17 + 27) = *(_OWORD *)&v223[11];
            long long *v17 = v216;
            v17[1] = *(_OWORD *)v223;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48 * (v15 >> 1)), (long long *)a1, a2 - 3, a3);
          }
          --a4;
          if (a5)
          {
            uint64_t v23 = *(void *)(a1 + 24);
            uint64_t v24 = *(void *)a3;
            break;
          }
          uint64_t v25 = *(void *)(a1 - 24);
          uint64_t v23 = *(void *)(a1 + 24);
          if (v25 != v23)
          {
            uint64_t v24 = *(void *)a3;
            double v26 = *(char **)(*(void *)a3 + 344);
            double v27 = *(char **)(*(void *)a3 + 352);
            int v28 = v26;
            double v29 = v26;
            if (v26 != v27)
            {
              do
              {
                if (*(void *)v29 == v25) {
                  goto LABEL_16;
                }
                v29 += 8;
              }
              while (v29 != v27);
              double v29 = *(char **)(*(void *)a3 + 352);
LABEL_16:
              while (*(void *)v28 != v23)
              {
                v28 += 8;
                if (v28 == v27)
                {
                  int v28 = *(char **)(*(void *)a3 + 352);
                  break;
                }
              }
            }
            if (v29 - v26 < v28 - v26) {
              break;
            }
          }
          uint64_t v241 = *(void *)(a1 + 16);
          long long v232 = *(_OWORD *)(a1 + 32);
          long long v235 = *(_OWORD *)a1;
          uint64_t v67 = *((void *)a2 - 3);
          if (v23 == v67) {
            goto LABEL_107;
          }
          long long v68 = *(char **)(*(void *)a3 + 344);
          long long v69 = *(char **)(*(void *)a3 + 352);
          if (v68 == v69)
          {
            unint64_t v71 = *(char **)(*(void *)a3 + 344);
            unint64_t v70 = v71;
          }
          else
          {
            unint64_t v70 = *(char **)(*(void *)a3 + 344);
            while (*(void *)v70 != v23)
            {
              v70 += 8;
              if (v70 == v69)
              {
                unint64_t v70 = *(char **)(*(void *)a3 + 352);
                break;
              }
            }
            unint64_t v71 = *(char **)(*(void *)a3 + 344);
            while (*(void *)v71 != v67)
            {
              v71 += 8;
              if (v71 == v69)
              {
                unint64_t v71 = *(char **)(*(void *)a3 + 352);
                break;
              }
            }
          }
          if (v70 - v68 >= v71 - v68)
          {
LABEL_107:
            unint64_t v13 = a1 + 48;
            if (a1 + 48 < (unint64_t)a2)
            {
              uint64_t v75 = *(void *)a3;
              unint64_t v76 = a1;
              do
              {
                uint64_t v77 = *(void *)(v76 + 72);
                unint64_t v76 = v13;
                if (v23 != v77)
                {
                  BOOL v78 = *(char **)(v75 + 344);
                  long long v79 = *(char **)(v75 + 352);
                  long long v80 = v78;
                  unint64_t v81 = v78;
                  if (v78 != v79)
                  {
                    do
                    {
                      if (*(void *)v81 == v23) {
                        goto LABEL_114;
                      }
                      v81 += 8;
                    }
                    while (v81 != v79);
                    unint64_t v81 = *(char **)(v75 + 352);
LABEL_114:
                    while (*(void *)v80 != v77)
                    {
                      v80 += 8;
                      if (v80 == v79)
                      {
                        long long v80 = *(char **)(v75 + 352);
                        break;
                      }
                    }
                  }
                  if (v81 - v78 < v80 - v78) {
                    break;
                  }
                }
                v13 += 48;
              }
              while (v76 + 48 < (unint64_t)a2);
            }
          }
          else
          {
            unint64_t v13 = a1;
            do
            {
              do
              {
                uint64_t v72 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v72);
              if (v68 == v69)
              {
                uint64_t v74 = *(char **)(*(void *)a3 + 344);
                unint64_t v73 = v74;
              }
              else
              {
                unint64_t v73 = *(char **)(*(void *)a3 + 344);
                while (*(void *)v73 != v23)
                {
                  v73 += 8;
                  if (v73 == v69)
                  {
                    unint64_t v73 = *(char **)(*(void *)a3 + 352);
                    break;
                  }
                }
                uint64_t v74 = *(char **)(*(void *)a3 + 344);
                while (*(void *)v74 != v72)
                {
                  v74 += 8;
                  if (v74 == v69)
                  {
                    uint64_t v74 = *(char **)(*(void *)a3 + 352);
                    break;
                  }
                }
              }
            }
            while (v73 - v68 >= v74 - v68);
          }
          unint64_t v82 = a2;
          if (v13 < (unint64_t)a2)
          {
            uint64_t v83 = *(void *)a3;
            unint64_t v82 = a2;
            do
            {
              uint64_t v84 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v84) {
                break;
              }
              long long v85 = *(char **)(v83 + 344);
              double v86 = *(char **)(v83 + 352);
              double v87 = v85;
              long long v88 = v85;
              if (v85 != v86)
              {
                do
                {
                  if (*(void *)v88 == v23) {
                    goto LABEL_126;
                  }
                  v88 += 8;
                }
                while (v88 != v86);
                long long v88 = *(char **)(v83 + 352);
LABEL_126:
                while (*(void *)v87 != v84)
                {
                  v87 += 8;
                  if (v87 == v86)
                  {
                    double v87 = *(char **)(v83 + 352);
                    break;
                  }
                }
              }
            }
            while (v88 - v85 < v87 - v85);
          }
          while (v13 < (unint64_t)v82)
          {
            *(_OWORD *)v225 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v225[16] = *(_OWORD *)(v13 + 32);
            long long v217 = *(_OWORD *)v13;
            long long v89 = *v82;
            long long v90 = v82[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v82 + 27);
            *(_OWORD *)unint64_t v13 = v89;
            *(_OWORD *)(v13 + 16) = v90;
            *(long long *)((char *)v82 + 27) = *(_OWORD *)&v225[11];
            *unint64_t v82 = v217;
            v82[1] = *(_OWORD *)v225;
            uint64_t v91 = *(void *)a3;
            do
            {
              do
              {
                uint64_t v92 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v92);
              int v93 = *(char **)(v91 + 344);
              int v94 = *(char **)(v91 + 352);
              if (v93 == v94)
              {
                double v96 = *(char **)(v91 + 344);
                BOOL v95 = v96;
              }
              else
              {
                BOOL v95 = *(char **)(v91 + 344);
                while (*(void *)v95 != v23)
                {
                  v95 += 8;
                  if (v95 == v94)
                  {
                    BOOL v95 = *(char **)(v91 + 352);
                    break;
                  }
                }
                double v96 = *(char **)(v91 + 344);
                while (*(void *)v96 != v92)
                {
                  v96 += 8;
                  if (v96 == v94)
                  {
                    double v96 = *(char **)(v91 + 352);
                    break;
                  }
                }
              }
            }
            while (v95 - v93 >= v96 - v93);
            do
            {
              uint64_t v97 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v97) {
                break;
              }
              if (v93 == v94)
              {
                id v99 = v93;
                id v98 = v93;
              }
              else
              {
                id v98 = v93;
                while (*(void *)v98 != v23)
                {
                  v98 += 8;
                  if (v98 == v94)
                  {
                    id v98 = v94;
                    break;
                  }
                }
                id v99 = v93;
                while (*(void *)v99 != v97)
                {
                  v99 += 8;
                  if (v99 == v94)
                  {
                    id v99 = v94;
                    break;
                  }
                }
              }
            }
            while (v98 - v93 < v99 - v93);
          }
          id v100 = (long long *)(v13 - 48);
          BOOL v5 = v13 - 48 >= a1;
          BOOL v6 = v13 - 48 == a1;
          if (v13 - 48 != a1)
          {
            long long v101 = *v100;
            long long v102 = *(_OWORD *)(v13 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
            *(_OWORD *)a1 = v101;
            *(_OWORD *)(a1 + 16) = v102;
          }
          a5 = 0;
          *id v100 = v235;
          *(void *)(v13 - 32) = v241;
          *(void *)(v13 - 24) = v23;
          *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v232 + 7);
          *(void *)(v13 - 16) = v232;
        }
        uint64_t v240 = *(void *)(a1 + 16);
        long long v231 = *(_OWORD *)(a1 + 32);
        long long v234 = *(_OWORD *)a1;
        unint64_t v30 = a1;
        do
        {
          unint64_t v31 = v30;
          v30 += 48;
          uint64_t v32 = *(void *)(v31 + 72);
          if (v32 == v23) {
            break;
          }
          uint64_t v33 = *(char **)(v24 + 344);
          double v34 = *(char **)(v24 + 352);
          double v35 = v33;
          long long v36 = v33;
          if (v33 != v34)
          {
            do
            {
              if (*(void *)v36 == v32) {
                goto LABEL_26;
              }
              v36 += 8;
            }
            while (v36 != v34);
            long long v36 = *(char **)(v24 + 352);
LABEL_26:
            while (*(void *)v35 != v23)
            {
              v35 += 8;
              if (v35 == v34)
              {
                double v35 = *(char **)(v24 + 352);
                break;
              }
            }
          }
        }
        while (v36 - v33 < v35 - v33);
        double v37 = a2;
        if (v31 == a1)
        {
          double v37 = a2;
          if (v30 < (unint64_t)a2)
          {
            double v37 = a2;
            do
            {
              uint64_t v43 = *((void *)v37 - 3);
              v37 -= 3;
              if (v43 != v23)
              {
                uint8x8_t v44 = *(char **)(v24 + 344);
                unint64_t v45 = *(char **)(v24 + 352);
                uint64_t v46 = v44;
                long long v47 = v44;
                if (v44 != v45)
                {
                  do
                  {
                    if (*(void *)v47 == v43) {
                      goto LABEL_48;
                    }
                    v47 += 8;
                  }
                  while (v47 != v45);
                  long long v47 = *(char **)(v24 + 352);
LABEL_48:
                  while (*(void *)v46 != v23)
                  {
                    v46 += 8;
                    if (v46 == v45)
                    {
                      uint64_t v46 = *(char **)(v24 + 352);
                      break;
                    }
                  }
                }
                if (v47 - v44 < v46 - v44) {
                  break;
                }
              }
            }
            while (v30 < (unint64_t)v37);
          }
        }
        else
        {
          do
          {
            do
            {
              uint64_t v38 = *((void *)v37 - 3);
              v37 -= 3;
            }
            while (v38 == v23);
            double v39 = *(char **)(v24 + 344);
            double v40 = *(char **)(v24 + 352);
            double v41 = v39;
            unint64_t v42 = v39;
            if (v39 != v40)
            {
              do
              {
                if (*(void *)v42 == v38) {
                  goto LABEL_36;
                }
                v42 += 8;
              }
              while (v42 != v40);
              unint64_t v42 = *(char **)(v24 + 352);
LABEL_36:
              while (*(void *)v41 != v23)
              {
                v41 += 8;
                if (v41 == v40)
                {
                  double v41 = *(char **)(v24 + 352);
                  break;
                }
              }
            }
          }
          while (v42 - v39 >= v41 - v39);
        }
        unint64_t v13 = v30;
        if (v30 < (unint64_t)v37)
        {
          long long v48 = v37;
          do
          {
            *(_OWORD *)v224 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v224[16] = *(_OWORD *)(v13 + 32);
            long long v49 = *(_OWORD *)v13;
            long long v51 = *v48;
            long long v50 = v48[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v48 + 27);
            *(_OWORD *)unint64_t v13 = v51;
            *(_OWORD *)(v13 + 16) = v50;
            *(long long *)((char *)v48 + 27) = *(_OWORD *)&v224[11];
            long long *v48 = v49;
            v48[1] = *(_OWORD *)v224;
            uint64_t v52 = *(void *)a3;
            do
            {
              uint64_t v53 = *(void *)(v13 + 72);
              v13 += 48;
              if (v53 == v23) {
                break;
              }
              BOOL v54 = *(char **)(v52 + 344);
              BOOL v55 = *(char **)(v52 + 352);
              unint64_t v56 = v54;
              uint64_t v57 = v54;
              if (v54 != v55)
              {
                do
                {
                  if (*(void *)v57 == v53) {
                    goto LABEL_61;
                  }
                  v57 += 8;
                }
                while (v57 != v55);
                uint64_t v57 = *(char **)(v52 + 352);
LABEL_61:
                while (*(void *)v56 != v23)
                {
                  v56 += 8;
                  if (v56 == v55)
                  {
                    unint64_t v56 = *(char **)(v52 + 352);
                    break;
                  }
                }
              }
            }
            while (v57 - v54 < v56 - v54);
            do
            {
              do
              {
                uint64_t v58 = *((void *)v48 - 3);
                v48 -= 3;
              }
              while (v58 == v23);
              unint64_t v59 = *(char **)(v52 + 344);
              uint64_t v60 = *(char **)(v52 + 352);
              uint64_t v61 = v59;
              char v62 = v59;
              if (v59 != v60)
              {
                do
                {
                  if (*(void *)v62 == v58) {
                    goto LABEL_70;
                  }
                  v62 += 8;
                }
                while (v62 != v60);
                char v62 = *(char **)(v52 + 352);
LABEL_70:
                while (*(void *)v61 != v23)
                {
                  v61 += 8;
                  if (v61 == v60)
                  {
                    uint64_t v61 = *(char **)(v52 + 352);
                    break;
                  }
                }
              }
            }
            while (v62 - v59 >= v61 - v59);
          }
          while (v13 < (unint64_t)v48);
        }
        uint64_t v63 = (long long *)(v13 - 48);
        if (v13 - 48 != a1)
        {
          long long v64 = *v63;
          long long v65 = *(_OWORD *)(v13 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
          *(_OWORD *)a1 = v64;
          *(_OWORD *)(a1 + 16) = v65;
        }
        long long *v63 = v234;
        *(void *)(v13 - 32) = v240;
        *(void *)(v13 - 24) = v23;
        *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v231 + 7);
        *(void *)(v13 - 16) = v231;
        if (v30 >= (unint64_t)v37) {
          break;
        }
LABEL_80:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder*,false>(a1, v13 - 48, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder*>(a1, v13 - 48, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder*>(v13, (uint64_t)a2, a3))
      {
        break;
      }
      if (!v66) {
        goto LABEL_80;
      }
    }
    a2 = (long long *)(v13 - 48);
    if (!v66) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 - 24);
      uint64_t v9 = *(void *)(a1 + 24);
      if (v8 == v9) {
        return result;
      }
      id v10 = *(char **)(*(void *)a3 + 344);
      int v11 = *(char **)(*(void *)a3 + 352);
      unint64_t v12 = v10;
      unint64_t v13 = v10;
      if (v10 == v11) {
        goto LABEL_10;
      }
      do
      {
        if (*(void *)v13 == v8) {
          goto LABEL_7;
        }
        v13 += 8;
      }
      while (v13 != v11);
      unint64_t v13 = *(char **)(*(void *)a3 + 352);
      do
      {
LABEL_7:
        if (*(void *)v12 == v9) {
          goto LABEL_10;
        }
        v12 += 8;
      }
      while (v12 != v11);
      unint64_t v12 = *(char **)(*(void *)a3 + 352);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        uint64_t v14 = (long long *)(a2 - 48);
        long long v15 = *(_OWORD *)a1;
        *(_OWORD *)double v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        long long v16 = *(_OWORD *)(a2 - 21);
        long long v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *uint64_t v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(long long *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), a3);
      uint64_t v19 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      int v20 = 0;
      break;
  }
  while (1)
  {
    uint64_t v21 = *(void *)(v19 + 24);
    uint64_t v22 = *(void *)(v18 + 24);
    if (v21 != v22)
    {
      uint64_t v23 = *(char **)(*(void *)a3 + 344);
      uint64_t v24 = *(char **)(*(void *)a3 + 352);
      uint64_t v25 = v23;
      double v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(void *)v26 == v21) {
            goto LABEL_19;
          }
          v26 += 8;
        }
        while (v26 != v24);
        double v26 = *(char **)(*(void *)a3 + 352);
LABEL_19:
        while (*(void *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            uint64_t v25 = *(char **)(*(void *)a3 + 352);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        long long v34 = *(_OWORD *)v19;
        uint64_t v36 = *(void *)(v19 + 16);
        long long v37 = *(_OWORD *)(v19 + 32);
        uint64_t v27 = v19;
        while (1)
        {
          long long v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1) {
            break;
          }
          uint64_t v27 = v18;
          uint64_t v29 = *(void *)(v18 - 24);
          if (v21 != v29)
          {
            unint64_t v30 = *(char **)(*(void *)a3 + 344);
            unint64_t v31 = *(char **)(*(void *)a3 + 352);
            uint64_t v32 = v30;
            uint64_t v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(void *)v33 == v21) {
                  goto LABEL_30;
                }
                v33 += 8;
              }
              while (v33 != v31);
              uint64_t v33 = *(char **)(*(void *)a3 + 352);
LABEL_30:
              while (*(void *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  uint64_t v32 = *(char **)(*(void *)a3 + 352);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30) {
              continue;
            }
          }
          goto LABEL_36;
        }
        uint64_t v27 = a1;
LABEL_36:
        *(_OWORD *)uint64_t v27 = v34;
        *(void *)(v27 + 16) = v36;
        *(void *)(v27 + 24) = v21;
        *(void *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8) {
          return v19 + 48 == a2;
        }
      }
    }
    uint64_t v18 = v19;
    v19 += 48;
    if (v19 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v10) >> 4);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*((double *)a2 - 5) < *(double *)(v10 + 8))
                {
                  *(_OWORD *)long long v118 = *(_OWORD *)(v10 + 16);
                  *(_OWORD *)&v118[16] = *(_OWORD *)(v10 + 32);
                  long long v110 = *(_OWORD *)v10;
                  long long v52 = *(a2 - 3);
                  long long v53 = *(a2 - 2);
                  *(_OWORD *)(v10 + 27) = *(long long *)((char *)a2 - 21);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(long long *)((char *)a2 - 21) = *(_OWORD *)&v118[11];
                  *(a2 - 3) = v110;
                  *(a2 - 2) = *(_OWORD *)v118;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)v10, (long long *)(v10 + 48), a2 - 3);
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v10, v10 + 48, v10 + 96, (uint64_t)(a2 - 3));
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v10, v10 + 48, v10 + 96, v10 + 144, (uint64_t)(a2 - 3));
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 1151)
          {
            BOOL v54 = (long long *)(v10 + 48);
            BOOL v56 = (long long *)v10 == a2 || v54 == a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  unint64_t v59 = v54;
                  double v60 = *(double *)(v58 + 56);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *(void *)v54;
                    *(_OWORD *)long long v111 = *(_OWORD *)(v58 + 64);
                    *(_OWORD *)&v111[16] = *(_OWORD *)(v58 + 80);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      uint64_t v63 = (_OWORD *)(v10 + v62);
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      v63[3] = *(_OWORD *)(v10 + v62);
                      v63[4] = v64;
                      *(_OWORD *)((char *)v63 + 75) = *(_OWORD *)(v10 + v62 + 27);
                      if (!v62) {
                        break;
                      }
                      v62 -= 48;
                      if (v60 >= *((double *)v63 - 5))
                      {
                        uint64_t v65 = v10 + v62 + 48;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = *(_OWORD *)v111;
                    *(_OWORD *)(v65 + 27) = *(_OWORD *)&v111[11];
                  }
                  BOOL v54 = v59 + 3;
                  v57 += 48;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 3 != a2);
              }
            }
            else if (!v56)
            {
              do
              {
                id v98 = v54;
                double v99 = *(double *)(a1 + 56);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *(void *)v54;
                  *(_OWORD *)unint64_t v114 = *(_OWORD *)(a1 + 64);
                  *(_OWORD *)&v114[16] = *(_OWORD *)(a1 + 80);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(v101 - 2);
                    long long *v101 = *(v101 - 3);
                    v101[1] = v102;
                    *(long long *)((char *)v101 + 27) = *(long long *)((char *)v101 - 21);
                    double v103 = *((double *)v101 - 11);
                    v101 -= 3;
                  }
                  while (v99 < v103);
                  *(void *)long long v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *(long long *)((char *)v101 + 27) = *(_OWORD *)&v114[11];
                  v101[1] = *(_OWORD *)v114;
                }
                v54 += 3;
                a1 = (unint64_t)v98;
              }
              while (v98 + 3 != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((long long *)v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 48 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v70 + 8) < *(double *)(v70 + 56))
                  {
                    v70 += 48;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  unint64_t v71 = v10 + 48 * v68;
                  double v72 = *(double *)(v71 + 8);
                  if (*(double *)(v70 + 8) >= v72)
                  {
                    uint64_t v73 = *(void *)v71;
                    *(_OWORD *)long long v112 = *(_OWORD *)(v71 + 16);
                    *(_OWORD *)&v112[16] = *(_OWORD *)(v71 + 32);
                    do
                    {
                      uint64_t v74 = (_OWORD *)v71;
                      unint64_t v71 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_OWORD *)((char *)v74 + 27) = *(_OWORD *)(v70 + 27);
                      *uint64_t v74 = v75;
                      v74[1] = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = 2 * v69;
                      uint64_t v69 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 48 * v69;
                      uint64_t v78 = v77 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v70 + 8) < *(double *)(v70 + 56))
                      {
                        v70 += 48;
                        uint64_t v69 = v78;
                      }
                    }
                    while (*(double *)(v70 + 8) >= v72);
                    *(void *)unint64_t v71 = v73;
                    *(double *)(v71 + 8) = v72;
                    *(_OWORD *)(v71 + 16) = *(_OWORD *)v112;
                    *(_OWORD *)(v71 + 27) = *(_OWORD *)&v112[11];
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x30uLL;
              do
              {
                uint64_t v80 = 0;
                *(_OWORD *)long long v119 = *(_OWORD *)(v10 + 16);
                *(_OWORD *)&v119[16] = *(_OWORD *)(v10 + 32);
                long long v113 = *(_OWORD *)v10;
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = (_OWORD *)v81;
                  v81 += 48 * v80 + 48;
                  uint64_t v83 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v84 = v83 + 2;
                  if (v84 < v79 && *(double *)(v81 + 8) < *(double *)(v81 + 56))
                  {
                    v81 += 48;
                    uint64_t v80 = v84;
                  }
                  long long v85 = *(_OWORD *)v81;
                  long long v86 = *(_OWORD *)(v81 + 16);
                  *(_OWORD *)((char *)v82 + 27) = *(_OWORD *)(v81 + 27);
                  *unint64_t v82 = v85;
                  v82[1] = v86;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 3;
                if ((long long *)v81 == a2)
                {
                  *(_OWORD *)(v81 + 27) = *(_OWORD *)&v119[11];
                  *(_OWORD *)unint64_t v81 = v113;
                  *(_OWORD *)(v81 + 16) = *(_OWORD *)v119;
                }
                else
                {
                  long long v87 = *a2;
                  long long v88 = a2[1];
                  *(_OWORD *)(v81 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v81 = v87;
                  *(_OWORD *)(v81 + 16) = v88;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v119[11];
                  *a2 = v113;
                  a2[1] = *(_OWORD *)v119;
                  uint64_t v89 = v81 - v10 + 48;
                  if (v89 >= 49)
                  {
                    unint64_t v90 = (v89 / 0x30uLL - 2) >> 1;
                    unint64_t v91 = v10 + 48 * v90;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      *(_OWORD *)uint64_t v106 = *(_OWORD *)(v81 + 16);
                      *(_OWORD *)&v106[16] = *(_OWORD *)(v81 + 32);
                      do
                      {
                        int v94 = (_OWORD *)v81;
                        unint64_t v81 = v91;
                        long long v95 = *(_OWORD *)v91;
                        long long v96 = *(_OWORD *)(v91 + 16);
                        *(_OWORD *)((char *)v94 + 27) = *(_OWORD *)(v91 + 27);
                        *int v94 = v95;
                        v94[1] = v96;
                        if (!v90) {
                          break;
                        }
                        unint64_t v90 = (v90 - 1) >> 1;
                        unint64_t v91 = v10 + 48 * v90;
                      }
                      while (*(double *)(v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_OWORD *)(v81 + 16) = *(_OWORD *)v106;
                      *(_OWORD *)(v81 + 27) = *(_OWORD *)&v106[11];
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (long long *)(v10 + 48 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v12 >> 1)), a2 - 3);
            uint64_t v15 = 3 * v13;
            long long v16 = (long long *)(a1 + 48 * v13 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48), v16, a2 - 6);
            long long v17 = (long long *)(a1 + 48 + 16 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 96), v17, a2 - 9);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v16, v14, v17);
            *(_OWORD *)unint64_t v115 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v115[16] = *(_OWORD *)(a1 + 32);
            long long v107 = *(_OWORD *)a1;
            long long v18 = *(long long *)((char *)v14 + 27);
            long long v19 = v14[1];
            *(_OWORD *)a1 = *v14;
            *(_OWORD *)(a1 + 16) = v19;
            *(_OWORD *)(a1 + 27) = v18;
            *(long long *)((char *)v14 + 27) = *(_OWORD *)&v115[11];
            *uint64_t v14 = v107;
            v14[1] = *(_OWORD *)v115;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48 * (v12 >> 1)), (long long *)a1, a2 - 3);
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 40) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          *(_OWORD *)long long v105 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)&v105[16] = *(_OWORD *)(a1 + 32);
          if (v20 >= *((double *)a2 - 5))
          {
            unint64_t v41 = a1 + 48;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= (unint64_t)a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 48;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 48;
              double v40 = *(double *)(v39 + 56);
              v39 += 48;
            }
            while (v20 >= v40);
          }
          uint64_t v43 = a2;
          if (v10 < (unint64_t)a2)
          {
            uint8x8_t v44 = a2;
            do
            {
              uint64_t v43 = v44 - 3;
              double v45 = *((double *)v44 - 5);
              v44 -= 3;
            }
            while (v20 < v45);
          }
          while (v10 < (unint64_t)v43)
          {
            *(_OWORD *)uint64_t v117 = *(_OWORD *)(v10 + 16);
            *(_OWORD *)&v117[16] = *(_OWORD *)(v10 + 32);
            long long v109 = *(_OWORD *)v10;
            long long v46 = *v43;
            long long v47 = v43[1];
            *(_OWORD *)(v10 + 27) = *(long long *)((char *)v43 + 27);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(long long *)((char *)v43 + 27) = *(_OWORD *)&v117[11];
            *uint64_t v43 = v109;
            v43[1] = *(_OWORD *)v117;
            do
            {
              double v48 = *(double *)(v10 + 56);
              v10 += 48;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *((double *)v43 - 5);
              v43 -= 3;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 48 >= a1;
          BOOL v5 = v10 - 48 == a1;
          if (v10 - 48 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 48);
            long long v51 = *(_OWORD *)(v10 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v10 - 21);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 48) = v38;
          *(double *)(v10 - 40) = v20;
          *(_OWORD *)(v10 - 21) = *(_OWORD *)&v105[11];
          *(_OWORD *)(v10 - 32) = *(_OWORD *)v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        *(_OWORD *)uint64_t v104 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v104[16] = *(_OWORD *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 56);
          v21 += 48;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        uint64_t v25 = a2;
        if (v21 == 48)
        {
          long long v28 = a2;
          while (v24 < (unint64_t)v28)
          {
            double v26 = v28 - 3;
            double v29 = *((double *)v28 - 5);
            v28 -= 3;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          double v26 = v28;
        }
        else
        {
          do
          {
            double v26 = v25 - 3;
            double v27 = *((double *)v25 - 5);
            v25 -= 3;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < (unint64_t)v26)
        {
          unint64_t v30 = v26;
          do
          {
            *(_OWORD *)uint64_t v116 = *(_OWORD *)(v10 + 16);
            *(_OWORD *)&v116[16] = *(_OWORD *)(v10 + 32);
            long long v108 = *(_OWORD *)v10;
            long long v31 = *v30;
            long long v32 = v30[1];
            *(_OWORD *)(v10 + 27) = *(long long *)((char *)v30 + 27);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(long long *)((char *)v30 + 27) = *(_OWORD *)&v116[11];
            *unint64_t v30 = v108;
            v30[1] = *(_OWORD *)v116;
            do
            {
              double v33 = *(double *)(v10 + 56);
              v10 += 48;
            }
            while (v33 < v20);
            do
            {
              double v34 = *((double *)v30 - 5);
              v30 -= 3;
            }
            while (v34 >= v20);
          }
          while (v10 < (unint64_t)v30);
        }
        if (v10 - 48 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 48);
          long long v36 = *(_OWORD *)(v10 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v10 - 21);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 48) = v22;
        *(double *)(v10 - 40) = v20;
        *(_OWORD *)(v10 - 21) = *(_OWORD *)&v104[11];
        *(_OWORD *)(v10 - 32) = *(_OWORD *)v104;
        if (v24 >= (unint64_t)v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder*,false>(a1, v10 - 48, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder*>(a1, v10 - 48);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder*>(v10, (uint64_t)a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = (long long *)(v10 - 48);
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 40) < *(double *)(a1 + 8))
      {
        long long v6 = *(_OWORD *)a1;
        *(_OWORD *)double v20 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v20[16] = *(_OWORD *)(a1 + 32);
        long long v7 = *(_OWORD *)(a2 - 21);
        long long v8 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 27) = v7;
        *(_OWORD *)(a2 - 48) = v6;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v20;
        *(_OWORD *)(a2 - 21) = *(_OWORD *)&v20[11];
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48);
      return 1;
    default:
      uint64_t v9 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96));
      uint64_t v10 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    double v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      uint64_t v14 = *(void *)v10;
      *(_OWORD *)long long v19 = *(_OWORD *)(v10 + 16);
      *(_OWORD *)&v19[16] = *(_OWORD *)(v10 + 32);
      uint64_t v15 = v11;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        long long v17 = *(_OWORD *)(a1 + v15 + 112);
        *(_OWORD *)(v16 + 144) = *(_OWORD *)(a1 + v15 + 96);
        *(_OWORD *)(v16 + 160) = v17;
        *(_OWORD *)(v16 + 171) = *(_OWORD *)(a1 + v15 + 123);
        if (v15 == -96) {
          break;
        }
        v15 -= 48;
        if (v13 >= *(double *)(v16 + 56))
        {
          uint64_t v18 = a1 + v15 + 144;
          goto LABEL_12;
        }
      }
      uint64_t v18 = a1;
LABEL_12:
      *(void *)uint64_t v18 = v14;
      *(double *)(v18 + 8) = v13;
      *(_OWORD *)(v18 + 16) = *(_OWORD *)v19;
      *(_OWORD *)(v18 + 27) = *(_OWORD *)&v19[11];
      if (++v12 == 8) {
        return v10 + 48 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 48;
    v10 += 48;
    if (v10 == a2) {
      return 1;
    }
  }
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)#1}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)>::~__func()
{
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)#1}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  void *result = &unk_1F17233B0;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)#1}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F17233B0;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)#1}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)#1}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)#1}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 640))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a4, 3, @"Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date");
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_configureForStartTime(a1);
  }
  double v8 = *(double *)(a2 + 8);
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9)
  {
    if (*(unsigned char *)(a1 + 640))
    {
      double v10 = -1.79769313e308;
    }
    else
    {
      double v10 = *(double *)(a1 + 176);
      double v12 = *(double *)(a1 + 120);
      if (v10 <= v12) {
        double v10 = -1.79769313e308;
      }
      if (v10 < v12) {
        double v10 = *(double *)(a1 + 120);
      }
    }
  }
  else
  {
    double v10 = *(double *)(a1 + 176);
    if (v10 <= *(double *)(a1 + 120)) {
      double v10 = -1.79769313e308;
    }
  }
  if (v10 <= v8)
  {
    if (v9 && a3) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_advanceToTime(a1, v8);
    }
    HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    double v13 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
    uint64_t v11 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v13, a4);
  }
  return v11;
}

void sub_1BD08E330(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_advanceToTime(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 128) <= a2)
  {
    uint64_t v4 = a1 + 112;
    BOOL v5 = (double *)(a1 + 120);
    do
    {
      uint64_t v6 = *(void *)(a1 + 616);
      uint64_t v7 = *(void *)(a1 + 608);
      if (v6 == v7)
      {
        uint64_t v22 = 0;
        uint64_t v15 = *(void **)(a1 + 40);
        uint64_t v16 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a2];
        double v8 = [v15 dateIntervalContainingDate:v16 index:&v22];

        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v17 = v22;
        double v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v19 = v18;
        double v20 = [v8 endDate];
        [v20 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::resetToBucket(v4, v17, v19, v21);
      }
      else
      {
        double v8 = [*(id *)(a1 + 40) dateIntervalAtIndex:*(void *)(a1 + 112) + 1];
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_statisticsFromFinishedBucket(a1, v5);
        double v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v12 = v11;
        double v13 = [v8 endDate];
        [v13 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::advanceBucket(v4, v12, v14);
      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_didChangeBucket(a1, v9);
      if (v6 != v7) {
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_notifyForCurrentBucket(a1);
      }
    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1BD08E53C(_Unwind_Exception *exception_object)
{
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  char v3 = *(unsigned char *)(a2 + 32);
  if (!v3) {
    return;
  }
  uint64_t v5 = a1 + 8;
  double v6 = *(double *)(a2 + 8);
  if (v6 < *(double *)(a1 + 8)) {
    return;
  }
  uint64_t v7 = *(uint64_t **)a2;
  double v8 = *(double *)(a2 + 16);
  unint64_t v9 = *(void *)(a2 + 24);
  char v10 = *(unsigned char *)(a2 + 33);
  double v11 = *(double *)(a1 + 16);
  if (*(_DWORD *)(a1 + 36)) {
    BOOL v12 = v6 < v11;
  }
  else {
    BOOL v12 = v6 <= v11;
  }
  if (v12)
  {
    if (v8 <= v11) {
      double v14 = *(double *)(a2 + 16);
    }
    else {
      double v14 = *(double *)(a1 + 16);
    }
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 312, *(void *)(a2 + 24), v9);
    uint64_t v15 = *(char **)(a1 + 112);
    if (v15 == *(char **)(a1 + 104) && *(uint64_t *)(a1 + 200) <= 0)
    {
      double v33 = *(double *)(a1 + 8);
      double v34 = *(double *)(a1 + 16);
      if (v6 >= v33) {
        double v33 = v6;
      }
      if (v34 >= v14) {
        double v34 = v14;
      }
      *(double *)(a1 + 48) = v33;
      *(double *)(a1 + 56) = v34;
      if (!a3) {
        goto LABEL_47;
      }
    }
    else
    {
      if (v6 < *(double *)(a1 + 48))
      {
        double v16 = *(double *)(a1 + 8);
        if (v6 >= v16) {
          double v16 = v6;
        }
        *(double *)(a1 + 48) = v16;
      }
      if (v14 > *(double *)(a1 + 56))
      {
        double v17 = *(double *)(a1 + 16);
        if (v17 >= v14) {
          double v17 = v14;
        }
        *(double *)(a1 + 56) = v17;
      }
      if (!a3) {
        goto LABEL_47;
      }
    }
    if (v6 < *(double *)(a1 + 16))
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeThroughTime(v5, v6);
      uint64_t v15 = *(char **)(a1 + 112);
    }
LABEL_47:
    unint64_t v35 = *(void *)(a1 + 120);
    if ((unint64_t)v15 >= v35)
    {
      unint64_t v37 = 0x555555555555555;
      uint64_t v38 = *(char **)(a1 + 104);
      unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v38) >> 4);
      unint64_t v40 = v39 + 1;
      if (v39 + 1 > 0x555555555555555) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (void)v38) >> 4);
      if (2 * v41 > v40) {
        unint64_t v40 = 2 * v41;
      }
      if (v41 < 0x2AAAAAAAAAAAAAALL) {
        unint64_t v37 = v40;
      }
      if (v37)
      {
        unint64_t v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v37);
        uint64_t v38 = *(char **)(a1 + 104);
        uint64_t v15 = *(char **)(a1 + 112);
      }
      else
      {
        uint64_t v42 = 0;
      }
      unint64_t v43 = v37 + 48 * v39;
      *(void *)unint64_t v43 = v7;
      *(double *)(v43 + 8) = v6;
      *(double *)(v43 + 16) = v14;
      *(void *)(v43 + 24) = v9;
      unint64_t v44 = v37 + 48 * v42;
      *(unsigned char *)(v43 + 32) = v3;
      *(unsigned char *)(v43 + 33) = v10;
      *(_WORD *)(v43 + 40) = 0;
      *(unsigned char *)(v43 + 42) = 0;
      long long v36 = (void *)(v43 + 48);
      if (v15 != v38)
      {
        do
        {
          long long v45 = *((_OWORD *)v15 - 3);
          long long v46 = *((_OWORD *)v15 - 2);
          *(_OWORD *)(v43 - 21) = *(_OWORD *)(v15 - 21);
          *(_OWORD *)(v43 - 48) = v45;
          *(_OWORD *)(v43 - 32) = v46;
          v43 -= 48;
          v15 -= 48;
        }
        while (v15 != v38);
        uint64_t v38 = *(char **)(a1 + 104);
      }
      *(void *)(a1 + 104) = v43;
      *(void *)(a1 + 112) = v36;
      *(void *)(a1 + 120) = v44;
      if (v38) {
        operator delete(v38);
      }
    }
    else
    {
      *(void *)uint64_t v15 = v7;
      *((double *)v15 + 1) = v6;
      *((double *)v15 + 2) = v14;
      *((void *)v15 + 3) = v9;
      v15[32] = v3;
      v15[33] = v10;
      *((_WORD *)v15 + 20) = 0;
      long long v36 = v15 + 48;
      v15[42] = 0;
    }
    *(void *)(a1 + 112) = v36;
    if (!*(unsigned char *)(a1 + 280) || *(double *)(a1 + 256) <= v6)
    {
      *(void *)(a1 + 248) = v7;
      *(double *)(a1 + 256) = v6;
      *(double *)(a1 + 264) = v8;
      *(void *)(a1 + 272) = v9;
      *(unsigned char *)(a1 + 280) = v3;
      *(unsigned char *)(a1 + 281) = v10;
      if (!*(unsigned char *)(a1 + 240) || *(double *)(a1 + 216) <= v6)
      {
        *(void *)(a1 + 208) = v7;
        *(double *)(a1 + 216) = v6;
        *(double *)(a1 + 224) = v8;
        *(void *)(a1 + 232) = v9;
        *(unsigned char *)(a1 + 240) = v3;
        *(unsigned char *)(a1 + 241) = v10;
      }
    }
    if (*(unsigned char *)(a1 + 33))
    {
      unint64_t v47 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_canonicalSourceIDForSourceID(v5, v9);
      double v48 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_statisticsForSource(v5, v47);
      if (!*((unsigned char *)v48 + 152) || *((double *)v48 + 16) <= v6)
      {
        v48[15] = v7;
        *((double *)v48 + 16) = v6;
        *((double *)v48 + 17) = v8;
        v48[18] = (uint64_t *)v9;
        *((unsigned char *)v48 + 152) = v3;
        *((unsigned char *)v48 + 153) = v10;
        if (!*((unsigned char *)v48 + 112) || *((double *)v48 + 11) <= v6)
        {
          v48[10] = v7;
          *((double *)v48 + 11) = v6;
          *((double *)v48 + 12) = v8;
          v48[13] = (uint64_t *)v9;
          *((unsigned char *)v48 + 112) = v3;
          *((unsigned char *)v48 + 113) = v10;
        }
      }
    }
    return;
  }
  if (v6 < v11) {
    double v6 = *(double *)(a1 + 16);
  }
  unint64_t v18 = *(void *)(a1 + 504);
  unint64_t v19 = *(void *)(a1 + 512);
  if (v18 >= v19)
  {
    uint64_t v21 = *(void *)(a1 + 496);
    unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v21) >> 3);
    unint64_t v23 = v22 + 1;
    if (v22 + 1 > 0x666666666666666) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v21) >> 3);
    if (2 * v24 > v23) {
      unint64_t v23 = 2 * v24;
    }
    if (v24 >= 0x333333333333333) {
      unint64_t v25 = 0x666666666666666;
    }
    else {
      unint64_t v25 = v23;
    }
    if (v25) {
      unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v25);
    }
    else {
      uint64_t v26 = 0;
    }
    unint64_t v27 = v25 + 40 * v22;
    unint64_t v28 = v25 + 40 * v26;
    *(void *)unint64_t v27 = v7;
    *(double *)(v27 + 8) = v6;
    *(double *)(v27 + 16) = v8;
    *(void *)(v27 + 24) = v9;
    *(unsigned char *)(v27 + 32) = v3;
    *(unsigned char *)(v27 + 33) = v10;
    unint64_t v20 = v27 + 40;
    unint64_t v30 = *(char **)(a1 + 496);
    double v29 = *(char **)(a1 + 504);
    if (v29 != v30)
    {
      do
      {
        long long v31 = *(_OWORD *)(v29 - 40);
        long long v32 = *(_OWORD *)(v29 - 24);
        *(_WORD *)(v27 - 8) = *((_WORD *)v29 - 4);
        *(_OWORD *)(v27 - 24) = v32;
        *(_OWORD *)(v27 - 40) = v31;
        v27 -= 40;
        v29 -= 40;
      }
      while (v29 != v30);
      double v29 = *(char **)(a1 + 496);
    }
    *(void *)(a1 + 496) = v27;
    *(void *)(a1 + 504) = v20;
    *(void *)(a1 + 512) = v28;
    if (v29) {
      operator delete(v29);
    }
  }
  else
  {
    *(void *)unint64_t v18 = v7;
    *(double *)(v18 + 8) = v6;
    *(double *)(v18 + 16) = v8;
    *(void *)(v18 + 24) = v9;
    *(unsigned char *)(v18 + 32) = v3;
    unint64_t v20 = v18 + 40;
    *(unsigned char *)(v18 + 33) = v10;
  }
  *(void *)(a1 + 504) = v20;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_notifyForCurrentBucket(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 642))
  {
    *(unsigned char *)(a1 + 644) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 644) = 0;
    uint64_t v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      uint64_t v4 = v2;
      char v3 = (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      if (v3) {
        v4[2](v4, v3);
      }

      uint64_t v2 = v4;
    }
  }
}

void sub_1BD08EA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  unint64_t v9 = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 496), *(void *)(a1 + 504), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 504) - *(void *)(a1 + 496)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::resetToBucket(a1, *(void *)a1 + 1, a2, a3);
  double v6 = v9;
  uint64_t v7 = v10;
  if (v9 != v10)
  {
    uint64_t v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BD08EB70(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8 = (id *)(a1 + 40);
  objc_storeStrong((id *)(a1 + 520), *(id *)(a1 + 40));
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(void *)(a1 + 280) = 0;
  if (*(void *)(a1 + 304))
  {
    unint64_t v9 = *(void **)(a1 + 288);
    uint64_t v10 = *(void *)(a1 + 296);
    *(void *)(a1 + 288) = a1 + 296;
    *(void *)(v10 + 16) = 0;
    *(void *)(a1 + 296) = 0;
    *(void *)(a1 + 304) = 0;
    if (v9[1]) {
      uint64_t v11 = (void *)v9[1];
    }
    else {
      uint64_t v11 = v9;
    }
    if (v11)
    {
      BOOL v12 = (void *)v11[2];
      if (v12)
      {
        double v13 = (void *)*v12;
        if ((void *)*v12 == v11)
        {
          void *v12 = 0;
          while (1)
          {
            uint64_t v15 = (void *)v12[1];
            if (!v15) {
              break;
            }
            do
            {
              BOOL v12 = v15;
              uint64_t v15 = (void *)*v15;
            }
            while (v15);
          }
        }
        else
        {
          for (v12[1] = 0; v13; double v13 = (void *)v12[1])
          {
            do
            {
              BOOL v12 = v13;
              double v13 = (void *)*v13;
            }
            while (v13);
          }
        }
        std::__tree<long>::destroy(v11);
        for (uint64_t i = (void *)v12[2]; i; uint64_t i = (void *)i[2])
          BOOL v12 = i;
        uint64_t v11 = v12;
      }
    }
    std::__tree<long>::destroy(v11);
  }
  objc_storeStrong(v8, *(id *)(a1 + 520));
  *(void *)(a1 + 504) = *(void *)(a1 + 496);
  *(void *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 644))
  {
    if (v3)
    {
      id v6 = v3;
      uint64_t v4 = _Block_copy(*(const void **)(a1 + 96));
      uint64_t v5 = v4;
      if (v4) {
        (*((void (**)(void *, id))v4 + 2))(v4, v6);
      }

      id v3 = v6;
    }
    *(unsigned char *)(a1 + 644) = 0;
  }
}

void sub_1BD08ED38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 startDate];
  id v6 = [v4 startDate];
  uint64_t v7 = [v5 compare:v6];

  return v7;
}

void sub_1BD08EDC0(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_primitiveInvalidateInterval(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 13);
  if (WeakRetained)
  {
    if (v5
      && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_currentBucketInterval((uint64_t)a1),
          (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v8 = [v5 endDate];
      unint64_t v9 = [v7 startDate];
      if (objc_msgSend(v8, "hk_isAfterDate:", v9))
      {
        uint64_t v10 = [v5 startDate];
        uint64_t v11 = [v7 endDate];
        char v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);
      }
      else
      {
        char v12 = 0;
      }

      double v13 = _Block_copy(a1[12]);
      if ((v12 & 1) == 0) {
        operator new();
      }
    }
    else
    {
      double v13 = _Block_copy(a1[12]);
    }
    *((unsigned char *)a1 + 640) = 1;
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
    v27[3] = &unk_1E6308FF8;
    id v15 = v5;
    id v28 = v15;
    id v16 = v13;
    id v29 = v16;
    (*((void (**)(id *, void *))*a1 + 9))(a1, v27);
    if (v5)
    {
      double v17 = [v15 startDate];
      [v17 timeIntervalSinceReferenceDate];
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_configureForStartTime((uint64_t)a1);
    }
    else
    {
      (*((void (**)(id *))*a1 + 4))(a1);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
    v21[3] = &unk_1E6309060;
    unint64_t v24 = a1;
    id v5 = v15;
    char v26 = 1;
    id v22 = v5;
    unint64_t v25 = a1;
    id v23 = WeakRetained;
    uint64_t v14 = (*((uint64_t (**)(id *, void *, uint64_t))*a1 + 14))(a1, v21, a3);
    unint64_t v18 = _Block_copy(v16);
    id v19 = a1[12];
    a1[12] = v18;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to invalidate interval: no data source available.");
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1BD08F210(_Unwind_Exception *a1)
{
  MEMORY[0x1C187B8A0](v4, 0x10F1C4099229AECLL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_11;
  }
  id v3 = [v10 endDate];
  uint64_t v4 = [*(id *)(a1 + 32) startDate];
  char v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    id v6 = [v10 startDate];
    uint64_t v7 = [*(id *)(a1 + 32) endDate];
    char v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_11:
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9) {
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
      }
    }
  }
}

void sub_1BD08F3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = [*(id *)(a1 + 32) startDate];
  [v5 timeIntervalSinceReferenceDate];
  uint64_t v7 = v6;

  char v8 = [*(id *)(a1 + 32) endDate];
  [v8 timeIntervalSinceReferenceDate];
  uint64_t v10 = v9;

  uint64_t v11 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  uint64_t v13 = *(void *)(a1 + 32);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  char v32 = *(unsigned char *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  uint64_t v31 = *(void *)(a1 + 56);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  uint64_t v14 = [v11 collectionCalculator:WeakRetained queryForInterval:v13 error:a2 sampleHandler:v30 mergeHandler:v29];

  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15 != v4)
    {
      id v16 = [*(id *)(a1 + 32) endDate];
      [v16 timeIntervalSinceReferenceDate];
      if (*(void *)(v15 + 40))
      {
        double v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          id v19 = [*(id *)(v15 + 40) dateIntervalAtIndex:*(void *)(v15 + 112) + 1];
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          unint64_t v20 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_statisticsFromFinishedBucket(v15, (double *)(v15 + 120));
          uint64_t v21 = [v19 startDate];
          [v21 timeIntervalSinceReferenceDate];
          double v23 = v22;
          unint64_t v24 = [v19 endDate];
          [v24 timeIntervalSinceReferenceDate];
          HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            char v26 = _Block_copy(*(const void **)(v15 + 96));
            unint64_t v27 = v26;
            if (v26) {
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);
            }
          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_didChangeBucket(v15, 0);
        }
      }
    }
  }
  return v14;
}

void sub_1BD08F6A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7 = *(double *)(a1 + 32);
  if (v7 > a6)
  {
    a2 = 0;
    int v8 = 0;
    a7 = 0.0;
    a5 = 0.0;
    double v9 = 0.0;
  }
  else
  {
    int v8 = 1;
    double v9 = a6;
  }
  double v13 = a5;
  double v14 = v9;
  double v15 = a7;
  uint64_t v16 = a2;
  char v17 = v8;
  char v18 = 0;
  if (*(unsigned char *)(a1 + 56))
  {
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v13, a3, a4);
    }
  }
  else
  {
    BOOL v11 = v7 <= a6;
    double v12 = *(double *)(a1 + 40);
    if (v9 >= v12) {
      BOOL v11 = 0;
    }
    if (!v11 || a7 <= v12) {
      double v12 = a7;
    }
    double v14 = v9;
    double v15 = v12;
    char v17 = v11;
    if (v11) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v13, a3, a4);
    }
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 640)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_configureForStartTime(a1);
  }
  if (*(void *)(a1 + 40)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_advanceToTime(a1, a2);
  }
  if (*(double *)(a1 + 128) > a2)
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeThroughTime(a1 + 120, a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 32) < *(double *)(v10 + 8))
                {
                  uint64_t v129 = *(void *)(v10 + 32);
                  long long v113 = *(_OWORD *)v10;
                  long long v121 = *(_OWORD *)(v10 + 16);
                  long long v52 = *(_OWORD *)(a2 - 40);
                  long long v53 = *(_OWORD *)(a2 - 24);
                  *(_WORD *)(v10 + 32) = *(_WORD *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(_WORD *)(a2 - 8) = v129;
                  *(_OWORD *)(a2 - 24) = v121;
                  *(_OWORD *)(a2 - 40) = v113;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v10, (double *)(v10 + 40), (double *)(a2 - 40));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, v10 + 120, a2 - 40);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            BOOL v54 = (void *)(v10 + 40);
            BOOL v56 = v10 == a2 || v54 == (void *)a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  unint64_t v59 = v54;
                  double v60 = *(double *)(v58 + 48);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *v54;
                    long long v114 = *(_OWORD *)(v58 + 56);
                    uint64_t v122 = *(void *)(v58 + 72);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      uint64_t v63 = v10 + v62;
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      *(_OWORD *)(v63 + 40) = *(_OWORD *)(v10 + v62);
                      *(_OWORD *)(v63 + 56) = v64;
                      *(_WORD *)(v63 + 72) = *(_WORD *)(v10 + v62 + 32);
                      if (!v62) {
                        break;
                      }
                      v62 -= 40;
                      if (v60 >= *(double *)(v63 - 32))
                      {
                        uint64_t v65 = v10 + v62 + 40;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = v114;
                    *(_WORD *)(v65 + 32) = v122;
                  }
                  BOOL v54 = v59 + 5;
                  v57 += 40;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 5 != (void *)a2);
              }
            }
            else if (!v56)
            {
              do
              {
                id v98 = v54;
                double v99 = *(double *)(a1 + 48);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *v54;
                  long long v117 = *(_OWORD *)(a1 + 56);
                  uint64_t v125 = *(void *)(a1 + 72);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(_OWORD *)(v101 - 3);
                    *(_OWORD *)long long v101 = *(_OWORD *)(v101 - 5);
                    *((_OWORD *)v101 + 1) = v102;
                    *((_WORD *)v101 + 16) = *((_WORD *)v101 - 4);
                    double v103 = *((double *)v101 - 9);
                    v101 -= 5;
                  }
                  while (v99 < v103);
                  void *v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *((_WORD *)v101 + 16) = v125;
                  *((_OWORD *)v101 + 1) = v117;
                }
                v54 += 5;
                a1 = (unint64_t)v98;
              }
              while (v98 + 5 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 40 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v10 + 40 * v69 + 8) < *(double *)(v70 + 48))
                  {
                    v70 += 40;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  double v71 = *(double *)(v10 + 40 * v68 + 8);
                  if (*(double *)(v70 + 8) >= v71)
                  {
                    unint64_t v72 = v10 + 40 * v68;
                    uint64_t v73 = *(void *)v72;
                    uint64_t v123 = *(void *)(v72 + 32);
                    long long v115 = *(_OWORD *)(v72 + 16);
                    do
                    {
                      unint64_t v74 = v72;
                      unint64_t v72 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_WORD *)(v74 + 32) = *(_WORD *)(v70 + 32);
                      *(_OWORD *)unint64_t v74 = v75;
                      *(_OWORD *)(v74 + 16) = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 40 * v77;
                      uint64_t v78 = 2 * v69 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v10 + 40 * v77 + 8) < *(double *)(v70 + 48))
                      {
                        v70 += 40;
                        uint64_t v77 = v78;
                      }
                      uint64_t v69 = v77;
                    }
                    while (*(double *)(v70 + 8) >= v71);
                    *(void *)unint64_t v72 = v73;
                    *(double *)(v72 + 8) = v71;
                    *(_OWORD *)(v72 + 16) = v115;
                    *(_WORD *)(v72 + 32) = v123;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x28uLL;
              do
              {
                uint64_t v80 = 0;
                uint64_t v130 = *(void *)(v10 + 32);
                long long v116 = *(_OWORD *)v10;
                long long v124 = *(_OWORD *)(v10 + 16);
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = v81;
                  uint64_t v83 = v80 + 1;
                  v81 += 40 * (v80 + 1);
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v85 = v84 + 2;
                  if (v85 < v79 && *(double *)(v82 + 40 * v83 + 8) < *(double *)(v81 + 48))
                  {
                    v81 += 40;
                    uint64_t v80 = v85;
                  }
                  long long v86 = *(_OWORD *)v81;
                  long long v87 = *(_OWORD *)(v81 + 16);
                  *(_WORD *)(v82 + 32) = *(_WORD *)(v81 + 32);
                  *(_OWORD *)unint64_t v82 = v86;
                  *(_OWORD *)(v82 + 16) = v87;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 40;
                if (v81 == a2)
                {
                  *(_WORD *)(v81 + 32) = v130;
                  *(_OWORD *)unint64_t v81 = v116;
                  *(_OWORD *)(v81 + 16) = v124;
                }
                else
                {
                  long long v88 = *(_OWORD *)a2;
                  long long v89 = *(_OWORD *)(a2 + 16);
                  *(_WORD *)(v81 + 32) = *(_WORD *)(a2 + 32);
                  *(_OWORD *)unint64_t v81 = v88;
                  *(_OWORD *)(v81 + 16) = v89;
                  *(_WORD *)(a2 + 32) = v130;
                  *(_OWORD *)a2 = v116;
                  *(_OWORD *)(a2 + 16) = v124;
                  uint64_t v90 = v81 - v10 + 40;
                  if (v90 >= 41)
                  {
                    unint64_t v91 = (v90 / 0x28uLL - 2) >> 1;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v10 + 40 * v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      uint64_t v109 = *(void *)(v81 + 32);
                      long long v106 = *(_OWORD *)(v81 + 16);
                      do
                      {
                        unint64_t v94 = v81;
                        unint64_t v81 = v10 + 40 * v91;
                        long long v95 = *(_OWORD *)v81;
                        long long v96 = *(_OWORD *)(v81 + 16);
                        *(_WORD *)(v94 + 32) = *(_WORD *)(v81 + 32);
                        *(_OWORD *)unint64_t v94 = v95;
                        *(_OWORD *)(v94 + 16) = v96;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 40 * v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_WORD *)(v81 + 32) = v109;
                      *(_OWORD *)(v81 + 16) = v106;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40 * (v12 >> 1)), (double *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            uint64_t v16 = (double *)(a1 + 40 * v13 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40), v16, (double *)(a2 - 80));
            char v17 = (double *)(a1 + 40 + 8 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 80), v17, (double *)(a2 - 120));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v16, (double *)v14, v17);
            uint64_t v126 = *(void *)(a1 + 32);
            long long v110 = *(_OWORD *)a1;
            long long v118 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 16) = v19;
            *(_WORD *)(v14 + 32) = v126;
            *(_OWORD *)unint64_t v14 = v110;
            *(_OWORD *)(v14 + 16) = v118;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40 * (v12 >> 1)), (double *)a1, (double *)(a2 - 40));
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 32) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          long long v105 = *(_OWORD *)(a1 + 16);
          uint64_t v108 = *(void *)(a1 + 32);
          if (v20 >= *(double *)(a2 - 32))
          {
            unint64_t v41 = a1 + 40;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 40;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 40;
              double v40 = *(double *)(v39 + 48);
              v39 += 40;
            }
            while (v20 >= v40);
          }
          unint64_t v43 = a2;
          if (v10 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              unint64_t v43 = v44 - 40;
              double v45 = *(double *)(v44 - 32);
              v44 -= 40;
            }
            while (v20 < v45);
          }
          while (v10 < v43)
          {
            uint64_t v128 = *(void *)(v10 + 32);
            long long v112 = *(_OWORD *)v10;
            long long v120 = *(_OWORD *)(v10 + 16);
            long long v46 = *(_OWORD *)v43;
            long long v47 = *(_OWORD *)(v43 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v43 + 32);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(_WORD *)(v43 + 32) = v128;
            *(_OWORD *)unint64_t v43 = v112;
            *(_OWORD *)(v43 + 16) = v120;
            do
            {
              double v48 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *(double *)(v43 - 32);
              v43 -= 40;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 40);
            long long v51 = *(_OWORD *)(v10 - 24);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 40) = v38;
          *(double *)(v10 - 32) = v20;
          *(_WORD *)(v10 - 8) = v108;
          *(_OWORD *)(v10 - 24) = v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        long long v104 = *(_OWORD *)(a1 + 16);
        uint64_t v107 = *(void *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 48);
          v21 += 40;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        unint64_t v25 = a2;
        if (v21 == 40)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 40;
            double v29 = *(double *)(v28 - 32);
            v28 -= 40;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 40;
            double v27 = *(double *)(v25 - 32);
            v25 -= 40;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v127 = *(void *)(v10 + 32);
            long long v111 = *(_OWORD *)v10;
            long long v119 = *(_OWORD *)(v10 + 16);
            long long v31 = *(_OWORD *)v30;
            long long v32 = *(_OWORD *)(v30 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v30 + 32);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(_WORD *)(v30 + 32) = v127;
            *(_OWORD *)unint64_t v30 = v111;
            *(_OWORD *)(v30 + 16) = v119;
            do
            {
              double v33 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v33 < v20);
            do
            {
              double v34 = *(double *)(v30 - 32);
              v30 -= 40;
            }
            while (v34 >= v20);
          }
          while (v10 < v30);
        }
        if (v10 - 40 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 40);
          long long v36 = *(_OWORD *)(v10 - 24);
          *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 40) = v22;
        *(double *)(v10 - 32) = v20;
        *(_WORD *)(v10 - 8) = v107;
        *(_OWORD *)(v10 - 24) = v104;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 40;
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        __int16 v9 = *(_WORD *)(a2 - 8);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      uint64_t v16 = *(void *)v12;
      long long v21 = *(_OWORD *)(v12 + 16);
      uint64_t v22 = *(void *)(v12 + 32);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(void *)uint64_t v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(void *a1, uint64_t a2)
{
  id v3 = (void *)a1[5];
  uint64_t v4 = a1[6];
  BOOL v5 = (void *)a1[4];
  uint64_t v6 = [v5 dateInterval];
  void v9[4] = v4;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  uint64_t v7 = [v3 collectionCalculator:v5 queryForInterval:v6 error:a2 sampleHandler:v10 mergeHandler:v9];

  return v7;
}

void sub_1BD0903FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10 = *(void *)(a1 + 32);
  *(double *)int v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  char v15 = 1;
  uint64_t v11 = [MEMORY[0x1E4F1C9C8] distantFuture];
  [v11 timeIntervalSinceReferenceDate];
  BOOL v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1BD0904A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
}

void HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::archive(uint64_t a1, int *a2)
{
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 112);
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F171B978;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  statistics::Statistics::makePrimaryStatistics(a1);
  HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::archive((uint64_t)v6, (uint64_t)(a2 + 2));
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v6);
  statistics::Statistics::~Statistics((statistics::Statistics *)v6);
  uint64_t v5 = *a2;
  *(_DWORD *)(a1 + 204) |= 0x100u;
  *(void *)(a1 + 136) = v5;
  statistics::Statistics::makeMostRecentDatum(a1);
  v6[0] = &unk_1F17206F8;
  int v10 = 127;
  int8x16_t v7 = vextq_s8(*(int8x16_t *)(a2 + 30), *(int8x16_t *)(a2 + 30), 8uLL);
  v6[1] = *((void *)a2 + 17);
  v6[2] = *((void *)a2 + 18);
  __int16 v8 = 0;
  char v9 = 0;
  statistics::RawQuantitySample::operator=(*v4, (uint64_t)v6);
  PB::Base::~Base((PB::Base *)v6);
}

void sub_1BD0905D0(_Unwind_Exception *a1)
{
  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::unarchive(uint64_t a1, void *a2)
{
  *(_OWORD *)(a1 + 8) = xmmword_1BD3301F0;
  int8x16_t v2 = 0uLL;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 98) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_WORD *)(a1 + 152) = 0;
  uint64_t v3 = a2[16];
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 24);
    int8x16_t v5 = *(int8x16_t *)(v3 + 88);
    uint64_t v6 = *(void *)(v3 + 104);
    uint64_t v7 = *(void *)(v3 + 176);
    uint64_t v8 = *(void *)(v3 + 168);
    uint64_t v9 = *(void *)(v3 + 56);
    uint64_t v10 = *(void *)(v3 + 48);
    uint64_t v11 = *(void *)(v3 + 40);
    uint64_t v12 = *(void *)(v3 + 112);
    if (v12)
    {
      int8x16_t v2 = *(int8x16_t *)(v12 + 24);
      uint64_t v13 = *(void *)(v12 + 8);
      char v14 = 1;
      uint64_t v12 = *(void *)(v12 + 16);
    }
    else
    {
      char v14 = 0;
      uint64_t v13 = 0;
    }
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v11;
    *(void *)(a1 + 24) = v10;
    *(void *)(a1 + 32) = v8;
    *(void *)(a1 + 40) = v7;
    *(int8x16_t *)(a1 + 48) = vextq_s8(v5, v5, 8uLL);
    *(void *)(a1 + 64) = v6;
    *(void *)(a1 + 72) = v4;
    int8x16_t v2 = vextq_s8(v2, v2, 8uLL);
    *(int8x16_t *)(a1 + 80) = v2;
    *(void *)(a1 + 96) = v13;
    *(void *)(a1 + 104) = v12;
    *(unsigned char *)(a1 + 112) = v14;
  }
  *(_DWORD *)a1 = a2[17];
  uint64_t v15 = a2[14];
  if (v15)
  {
    v2.i64[0] = *(void *)(v15 + 8);
    uint64_t v16 = *(void *)(v15 + 16);
    *(int8x16_t *)(a1 + 120) = vextq_s8(*(int8x16_t *)(v15 + 24), *(int8x16_t *)(v15 + 24), 8uLL);
    *(void *)(a1 + 136) = v2.i64[0];
    *(void *)(a1 + 144) = v16;
    *(_WORD *)(a1 + 152) = 1;
  }
  return *(double *)v2.i64;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6 = a3;
  uint64_t v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = &unk_1F1723460;
  double v9 = 900.0;
  if ((v6 & 0x10) == 0) {
    double v9 = 0.0;
  }
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(void *)(v8 + 104) = 0;
  *(void *)(v8 + 112) = 0;
  *(void *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_WORD *)(a1 + 592) = 1;
  *(unsigned char *)(a1 + 594) = 0;
  *(unsigned char *)(a1 + 596) = 0;
  *(void *)(a1 + 600) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(void *)(a1 + 640) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);

  JUMPOUT(0x1C187B8A0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1F1723460;
  int8x16_t v2 = *(void **)(a1 + 624);
  if (v2)
  {
    *(void *)(a1 + 632) = v2;
    operator delete(v2);
  }

  uint64_t v3 = *(void **)(a1 + 560);
  if (v3)
  {
    *(void *)(a1 + 568) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(unsigned char *)(result + 592) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::setDateInterval(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 copy];
  uint64_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;

  int8x16_t v5 = [v6 startDate];
  [v5 timeIntervalSinceReferenceDate];
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_configureForStartTime(a1);
}

void sub_1BD090860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::configureMergeAnchor(double *a1, void *a2)
{
  id v3 = a2;
  if (!*((void *)a1 + 5))
  {
    id v5 = v3;
    [v3 timeIntervalSinceReferenceDate];
    *((void *)a1 + 75) = v4;
    id v3 = v5;
    if (a1[31] == -1.79769313e308) {
      *((void *)a1 + 31) = v4;
    }
  }
}

void sub_1BD0908EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::setStatisticsConfiguration(id *a1, void *a2)
{
  objc_storeStrong(a1 + 76, a2);
  id v7 = a2;
  id v4 = a1[76];
  id v5 = a1[73];
  a1[73] = v4;
  id v6 = v4;

  objc_storeStrong(a1 + 19, a1[73]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (*(void *)(a1 + 40)) {
    return 1;
  }
  BOOL v7 = *(void *)(a1 + 224) == *(void *)(a1 + 216) && *(uint64_t *)(a1 + 304) < 1
    || HKIntervalMask<double>::firstDifference(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)a2, *(void *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (v7) {
    return 1;
  }
  double v9 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128);

  return v9(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 copy];
  id v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v3;
}

void sub_1BD090AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::dataSource(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));

  return WeakRetained;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::currentStatistics(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 592))
  {
    unint64_t v1 = 0;
  }
  else
  {
    HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
    HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_updateSourceOrder((uint64_t)v4);
    HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeThroughTime((uint64_t)v4, v4[1]);
    unint64_t v1 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_statisticsFromFinishedBucket(a1, v4);
    HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::~HDStatisticsBucket((uint64_t)v4);
  }

  return v1;
}

void sub_1BD090BA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::~HDStatisticsBucket((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(a1 + 64);
  BOOL v7 = v6;
  if (!v6) {
    goto LABEL_4;
  }
  uint64_t v8 = [v6 startDate];
  [v8 timeIntervalSinceReferenceDate];
  if (v9 > *(double *)(a2 + 16))
  {

    goto LABEL_10;
  }
  uint64_t v10 = [v7 endDate];
  [v10 timeIntervalSinceReferenceDate];
  double v12 = v11;
  double v13 = *(double *)(a2 + 8);

  if (v12 >= v13)
  {
LABEL_4:
    if (!*(unsigned char *)(a1 + 594)) {
      goto LABEL_21;
    }
    if (!*(unsigned char *)(a1 + 593))
    {
      if (*(void *)(a1 + 40))
      {
        if (*(unsigned char *)(a1 + 592))
        {
          double v14 = -1.79769313e308;
        }
        else
        {
          double v16 = *(double *)(a1 + 176);
          double v14 = *(double *)(a1 + 120);
          if (v16 <= v14) {
            double v16 = -1.79769313e308;
          }
          if (v16 >= v14) {
            double v14 = v16;
          }
        }
      }
      else
      {
        double v14 = -1.79769313e308;
        if (*(double *)(a1 + 176) > *(double *)(a1 + 120)) {
          double v14 = *(double *)(a1 + 176);
        }
      }
      if (v14 > *(double *)(a2 + 8))
      {
        uint64_t v17 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
        uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v17, a3);

        goto LABEL_22;
      }
      if (*(unsigned char *)(a1 + 595))
      {
LABEL_21:
        uint64_t v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_primitiveAddSample(a1, a2, 1, a3);
        goto LABEL_22;
      }
      unint64_t v19 = *(void *)(a1 + 632);
      unint64_t v20 = *(void *)(a1 + 640);
      if (v19 >= v20)
      {
        uint64_t v24 = *(void *)(a1 + 624);
        unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v24) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - v24) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x333333333333333) {
          unint64_t v28 = 0x666666666666666;
        }
        else {
          unint64_t v28 = v26;
        }
        if (v28) {
          unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v28);
        }
        else {
          uint64_t v29 = 0;
        }
        unint64_t v30 = v28 + 40 * v25;
        unint64_t v31 = v28 + 40 * v29;
        long long v32 = *(_OWORD *)a2;
        long long v33 = *(_OWORD *)(a2 + 16);
        *(void *)(v30 + 32) = *(void *)(a2 + 32);
        *(_OWORD *)unint64_t v30 = v32;
        *(_OWORD *)(v30 + 16) = v33;
        unint64_t v23 = v30 + 40;
        double v34 = *(char **)(a1 + 632);
        long long v35 = *(char **)(a1 + 624);
        if (v34 != v35)
        {
          do
          {
            long long v36 = *(_OWORD *)(v34 - 40);
            long long v37 = *(_OWORD *)(v34 - 24);
            *(_WORD *)(v30 - 8) = *((_WORD *)v34 - 4);
            *(_OWORD *)(v30 - 24) = v37;
            *(_OWORD *)(v30 - 40) = v36;
            v30 -= 40;
            v34 -= 40;
          }
          while (v34 != v35);
          double v34 = *(char **)(a1 + 624);
        }
        *(void *)(a1 + 624) = v30;
        *(void *)(a1 + 632) = v23;
        *(void *)(a1 + 640) = v31;
        if (v34) {
          operator delete(v34);
        }
      }
      else
      {
        long long v21 = *(_OWORD *)a2;
        long long v22 = *(_OWORD *)(a2 + 16);
        *(void *)(v19 + 32) = *(void *)(a2 + 32);
        *(_OWORD *)unint64_t v19 = v21;
        *(_OWORD *)(v19 + 16) = v22;
        unint64_t v23 = v19 + 40;
      }
      *(void *)(a1 + 632) = v23;
    }
  }
LABEL_10:
  uint64_t v15 = 1;
LABEL_22:

  return v15;
}

void sub_1BD090E60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = v5;
  if (*(unsigned char *)(a1 + 594))
  {
    uint64_t v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 594) = 1;
  uint64_t v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    uint64_t v7 = 0;
    goto LABEL_82;
  }
  uint64_t v65 = v6;
  if (*(unsigned char *)(a1 + 593)) {
    goto LABEL_5;
  }
  double v9 = *(void **)(a1 + 616);
  if (!v9)
  {
    id v68 = 0;
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 40))
  {
LABEL_5:
    int v8 = 0;
    id v68 = 0;
    goto LABEL_29;
  }
  [v9 sortUsingComparator:&__block_literal_global_698];
  id v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v10 = *(id *)(a1 + 616);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  if (!v11)
  {

    id v12 = 0;
    goto LABEL_27;
  }
  id v12 = 0;
  uint64_t v13 = *(void *)v70;
  do
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (*(void *)v70 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(id *)(*((void *)&v69 + 1) + 8 * i);
      double v16 = v15;
      if (v12)
      {
        uint64_t v17 = [v15 startDate];
        uint64_t v18 = [v12 endDate];
        int v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          unint64_t v20 = [v16 endDate];
          long long v21 = [v12 endDate];
          int v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22) {
            goto LABEL_21;
          }
          id v23 = objc_alloc(MEMORY[0x1E4F28C18]);
          uint64_t v24 = [v12 startDate];
          unint64_t v25 = [v16 endDate];
          id v26 = (id)[v23 initWithStartDate:v24 endDate:v25];
        }
        else
        {
          [v68 addObject:v12];
          id v26 = v16;
        }
        id v12 = v26;
      }
      else
      {
        id v12 = v15;
      }
LABEL_21:
    }
    uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  }
  while (v11);

  if (v12) {
    [v68 addObject:v12];
  }
LABEL_27:

LABEL_28:
  int v8 = 1;
LABEL_29:
  unint64_t v27 = *(void **)(a1 + 616);
  *(void *)(a1 + 616) = 0;

  *(unsigned char *)(a1 + 593) = 0;
  if (!v8)
  {
    unint64_t v38 = *(void *)(a1 + 624);
    *(void *)(a1 + 640) = 0;
    *(void *)(a1 + 632) = 0;
    *(void *)(a1 + 624) = 0;
    unint64_t v39 = v38;
    goto LABEL_47;
  }
  unint64_t v28 = [v68 lastObject];
  if (v28)
  {
    uint64_t v29 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_currentBucketInterval(a1);
    unint64_t v30 = [v29 endDate];
    unint64_t v31 = [v28 endDate];
    int v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      long long v33 = [v28 endDate];
      [v33 timeIntervalSinceReferenceDate];
      double v35 = v34;

      uint64_t v36 = *(void *)(a1 + 624);
      long long v37 = *(long long **)(a1 + 632);
      while ((long long *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((long long *)v36 != v37)
          {
            double v40 = (long long *)(v36 + 40);
            if ((long long *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  long long v41 = *v40;
                  long long v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)uint64_t v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                double v40 = (long long *)((char *)v40 + 40);
              }
              while (v40 != v37);
              long long v37 = *(long long **)(a1 + 632);
            }
          }
          if ((long long *)v36 != v37) {
            *(void *)(a1 + 632) = v36;
          }
          break;
        }
        v36 += 40;
      }
    }
  }
  unint64_t v38 = *(void *)(a1 + 624);
  unint64_t v39 = *(void *)(a1 + 632);
  *(void *)(a1 + 640) = 0;
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 632) = 0;
  if (![v68 count]) {
    goto LABEL_60;
  }
LABEL_47:
  id v43 = v68;
  long long __p = (void *)v38;
  if (v43)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v44 = v43;
    uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v70;
      while (2)
      {
        for (uint64_t j = 0; j != v45; ++j)
        {
          if (*(void *)v70 != v46) {
            objc_enumerationMutation(v44);
          }
          id v48 = *(id *)(*((void *)&v69 + 1) + 8 * j);
          int v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_primitiveInvalidateInterval((id *)a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
        if (v45) {
          continue;
        }
        break;
      }
    }

LABEL_59:
    unint64_t v38 = (unint64_t)__p;
LABEL_60:
    unint64_t v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v51;
    }
    int v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    long long __p = (void *)v38;
    if (v39 != v38)
    {
      uint64_t v54 = v38;
      uint64_t v50 = v67;
      do
      {
        int v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_primitiveAddSample(a1, v54, 1, v50);
        int v53 = v55;
        v54 += 40;
        if (v54 == v39) {
          char v56 = 0;
        }
        else {
          char v56 = v55;
        }
        uint64_t v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_primitiveInvalidateInterval((id *)a1, 0, v67))goto LABEL_59; {
LABEL_70:
    }
    int v53 = 0;
  }
  if (*(void *)(a1 + 40) && *(void *)(a1 + 568) != *(void *)(a1 + 560))
  {
    do
    {
      uint64_t v57 = objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(void *)(a1 + 112) + 1, v50, v65);
      HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      unint64_t v58 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_statisticsFromFinishedBucket(a1, (double *)(a1 + 120));
      unint64_t v59 = [v57 startDate];
      [v59 timeIntervalSinceReferenceDate];
      double v61 = v60;
      uint64_t v62 = [v57 endDate];
      [v62 timeIntervalSinceReferenceDate];
      HDStatisticsCollectionEngine<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_notifyForCurrentBucket(a1);
    }
    while (*(void *)(a1 + 568) != *(void *)(a1 + 560));
  }
  *(unsigned char *)(a1 + 594) = 0;
  if (__p) {
    operator delete(__p);
  }

  if (v53)
  {
    if (*(unsigned char *)(a1 + 596))
    {
      *(unsigned char *)(a1 + 596) = 0;
      id v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_notifyForCurrentBucket(a1);
      uint64_t v7 = 1;
      goto LABEL_82;
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v6 = v65;
LABEL_82:
  *(unsigned char *)(a1 + 594) = 0;
LABEL_83:

  return v7;
}

void sub_1BD091564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    *(unsigned char *)(v13 + 594) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(unsigned char *)(result + 595) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(unsigned char *)(a1 + 594)) {
      goto LABEL_12;
    }
    uint64_t v7 = 0;
LABEL_14:
    uint64_t v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_primitiveInvalidateInterval((id *)a1, v7, a3);
    goto LABEL_15;
  }
  uint64_t v7 = [v6 dateIntervalForIntervalsContainingInterval:v5];

  if (!*(unsigned char *)(a1 + 594)) {
    goto LABEL_14;
  }
  if (!v7)
  {
LABEL_12:
    id v12 = *(void **)(a1 + 616);
    *(void *)(a1 + 616) = 0;

    uint64_t v7 = 0;
    uint64_t v11 = 1;
    *(unsigned char *)(a1 + 593) = 1;
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 593))
  {
    int v8 = *(void **)(a1 + 616);
    if (!v8)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      id v10 = *(void **)(a1 + 616);
      *(void *)(a1 + 616) = v9;

      int v8 = *(void **)(a1 + 616);
    }
    [v8 addObject:v7];
  }
  uint64_t v11 = 1;
LABEL_15:

  return v11;
}

void sub_1BD091864(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    *(unsigned char *)(a1 + 592) = 1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v9[3] = &unk_1E63043E8;
    uint64_t v12 = a1;
    id v10 = v5;
    id v11 = WeakRetained;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 112))(a1, v9, a3);
    if (v7 && *(unsigned char *)(a1 + 592) && !*(void *)(a1 + 40)) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_configureForStartTime(a1);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to query for initial statistics: no data source available.");
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1BD0919B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::reset(uint64_t result)
{
  *(unsigned char *)(result + 592) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 encodeBool:*(unsigned __int8 *)(a1 + 592) forKey:@"needs_config"];
  id v12 = v3;
  int v32 = &unk_1F1726FA0;
  long long v33 = 0;
  int v38 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
  LOBYTE(v38) = 1;
  uint64_t v34 = v4;
  uint64_t v35 = 0;
  statistics::StatisticsEngine::makeCurrentBucket((uint64_t)&v32);
  uint64_t v13 = &unk_1F171B9C8;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  int v31 = 511;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 0;
  int8x16_t v14 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  uint64_t v5 = *(void *)(a1 + 136);
  char v29 = *(unsigned char *)(a1 + 144);
  char v30 = *(unsigned char *)(a1 + 145);
  BOOL v28 = *(_DWORD *)(a1 + 148) == 0;
  int8x16_t v15 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  uint64_t v7 = *(int8x16_t **)(a1 + 216);
  if (v7 != *(int8x16_t **)(a1 + 224))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v7, *v7, 8uLL);
    int8x16_t v40 = v7[1];
    char v43 = 0;
    HIBYTE(v42) = v7[2].i8[9];
    LOBYTE(v42) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>();
  }
  statistics::StatisticsBucket::makeStatistics((uint64_t)&v13);
  HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::archive((uint64_t)&v39, a1 + 240);
  statistics::Statistics::operator=(*((statistics **)&v22 + 1), (uint64_t)&v39);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v39);
  uint64_t v8 = *(void *)(a1 + 352);
  if (v8 != a1 + 360)
  {
    HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::archive((uint64_t)&v39, v8 + 40);
    uint64_t v9 = *(void *)(v8 + 32);
    v46 |= 0x200u;
    uint64_t v45 = v9;
    PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>();
  }
  id v10 = *(int8x16_t **)(a1 + 184);
  if (v10 != *(int8x16_t **)(a1 + 192))
  {
    unint64_t v39 = (char *)&unk_1F1727540;
    v41.i32[0] = 3;
    int8x16_t v40 = vextq_s8(*v10, *v10, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>();
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v13);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v13);
  id v11 = *(int8x16_t **)(a1 + 560);
  if (v11 != *(int8x16_t **)(a1 + 568))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v11, *v11, 8uLL);
    int8x16_t v40 = v11[1];
    __int16 v42 = 0;
    char v43 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>();
  }
  PB::Writer::Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v39);
  [v12 encodeBytes:v40.i64[0] length:&v39[-v40.i64[0]] forKey:@"hdsce_archived_representation"];
  PB::Writer::~Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);
}

void sub_1BD091DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v78 = a2;
  *(unsigned char *)(a1 + 592) = [v78 decodeBoolForKey:@"needs_config"];
  id v3 = v78;
  HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::HDStatisticsBucket((uint64_t)&v85.n128_i64[1], 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)long long v86 = 0u;
  long long v87 = 0u;
  v126[0] = 0;
  id v81 = v3;
  PB::Reader::Reader((PB::Reader *)v125, (const unsigned __int8 *)[v81 decodeBytesForKey:@"hdsce_archived_representation" returnedLength:v126]);
  long long v118 = &unk_1F1726FA0;
  uint64_t v119 = 0;
  uint64_t v122 = 0;
  uint64_t v123 = 0;
  uint64_t v121 = 0;
  int v124 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v118, (PB::Reader *)v125);
  uint64_t v80 = a1;
  v85.n128_u64[0] = v120;
  if (v119)
  {
    uint64_t v92 = 0;
    memset(v95, 0, sizeof(v95));
    *(_OWORD *)long long __p = 0u;
    long long v97 = 0u;
    long long v99 = 0u;
    memset(v100, 0, 74);
    uint64_t v103 = 0;
    long long v102 = 0;
    unint64_t v98 = 0xFFEFFFFFFFFFFFFFLL;
    long long v101 = &v102;
    long long v104 = 0u;
    long long v105 = 0u;
    int v106 = 1065353216;
    long long v107 = 0u;
    long long v108 = 0u;
    long long v109 = 0u;
    uint64_t v110 = 0;
    int v111 = 1065353216;
    long long v112 = 0u;
    long long v113 = 0u;
    int v114 = 1065353216;
    long long v115 = 0u;
    long long v116 = 0u;
    int v117 = 1065353216;
    int8x16_t v88 = vextq_s8(*(int8x16_t *)(v119 + 8), *(int8x16_t *)(v119 + 8), 8uLL);
    uint64_t v4 = *(void *)(v119 + 72);
    uint64_t v89 = *(void *)(v119 + 64);
    char v90 = *(unsigned char *)(v119 + 185);
    char v91 = *(unsigned char *)(v119 + 186);
    int8x16_t v93 = vextq_s8(*(int8x16_t *)(v119 + 24), *(int8x16_t *)(v119 + 24), 8uLL);
    uint64_t v94 = v4;
    uint64_t v5 = *(void *)(v119 + 80);
    uint64_t v6 = *(void *)(v119 + 88);
    int64_t v79 = (void *)v119;
    if (v5 != v6)
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(*(void *)v5 + 24);
        uint64_t v9 = *(void *)(*(void *)v5 + 32);
        uint64_t v10 = *(void *)(*(void *)v5 + 8);
        uint64_t v11 = *(void *)(*(void *)v5 + 16);
        char v12 = *(unsigned char *)(*(void *)v5 + 41);
        char v13 = *(unsigned char *)(*(void *)v5 + 40);
        if ((unint64_t)v7 >= (unint64_t)v97)
        {
          int8x16_t v14 = (char *)__p[0];
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (char *)__p[0]) >> 4);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v97 - (unint64_t)__p[0]) >> 4) > v16) {
            unint64_t v16 = 0x5555555555555556 * ((uint64_t)(v97 - (unint64_t)__p[0]) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v97 - (unint64_t)__p[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v17 = 0x555555555555555;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17)
          {
            unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            uint64_t v7 = (char *)__p[1];
            int8x16_t v14 = (char *)__p[0];
          }
          else
          {
            uint64_t v18 = 0;
          }
          unint64_t v19 = v17 + 48 * v15;
          *(void *)unint64_t v19 = v9;
          *(void *)(v19 + 8) = v8;
          *(void *)(v19 + 16) = v10;
          *(void *)(v19 + 24) = v11;
          *(_WORD *)(v19 + 32) = 1;
          *(unsigned char *)(v19 + 40) = 0;
          *(unsigned char *)(v19 + 41) = v12;
          *(unsigned char *)(v19 + 42) = v13;
          uint64_t v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              long long v21 = *((_OWORD *)v7 - 3);
              long long v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            int8x16_t v14 = (char *)__p[0];
          }
          uint64_t v7 = (char *)(v19 + 48);
          __p[0] = v20;
          __p[1] = (void *)(v19 + 48);
          *(void *)&long long v97 = v17 + 48 * v18;
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)uint64_t v7 = v9;
          *((void *)v7 + 1) = v8;
          *((void *)v7 + 2) = v10;
          *((void *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        __p[1] = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    uint64_t v23 = v79[13];
    if (v23)
    {
      uint64_t v24 = *(void *)(v23 + 24);
      int8x16_t v25 = *(int8x16_t *)(v23 + 88);
      uint64_t v26 = *(void *)(v23 + 104);
      uint64_t v27 = *(void *)(v23 + 176);
      uint64_t v28 = *(void *)(v23 + 168);
      uint64_t v29 = *(void *)(v23 + 56);
      uint64_t v30 = *(void *)(v23 + 48);
      unint64_t v31 = *(void *)(v23 + 40);
      uint64_t v32 = *(void *)(v23 + 112);
      if (v32)
      {
        int8x16_t v33 = *(int8x16_t *)(v32 + 24);
        uint64_t v34 = *(void *)(v32 + 8);
        unsigned __int8 v35 = 1;
        uint64_t v32 = *(void *)(v32 + 16);
      }
      else
      {
        unsigned __int8 v35 = 0;
        int8x16_t v33 = 0uLL;
        uint64_t v34 = 0;
      }
      *((void *)&v97 + 1) = v29;
      unint64_t v98 = v31;
      *(void *)&long long v99 = v30;
      *((void *)&v99 + 1) = v28;
      v100[0] = v27;
      *(int8x16_t *)&v100[1] = vextq_s8(v25, v25, 8uLL);
      v100[3] = v26;
      void v100[4] = v24;
      *(int8x16_t *)&v100[5] = vextq_s8(v33, v33, 8uLL);
      v100[7] = v34;
      v100[8] = v32;
      LOWORD(v100[9]) = v35;
    }
    uint64_t v37 = (uint64_t *)v79[17];
    uint64_t v36 = (uint64_t *)v79[18];
    unint64_t v82 = v36;
    while (v37 != v36)
    {
      uint64_t v38 = *v37;
      uint64_t v39 = *(void *)(*v37 + 112);
      if (v39)
      {
        int8x16_t v84 = *(int8x16_t *)(v39 + 24);
        uint64_t v40 = *(void *)(v39 + 8);
        char v41 = 1;
        uint64_t v42 = *(void *)(v39 + 16);
      }
      else
      {
        uint64_t v42 = 0;
        char v41 = 0;
        uint64_t v40 = 0;
        int8x16_t v84 = 0u;
      }
      uint64_t v43 = *(void *)(v38 + 24);
      int8x16_t v83 = *(int8x16_t *)(v38 + 88);
      uint64_t v44 = *(void *)(v38 + 104);
      uint64_t v45 = *(void *)(v38 + 176);
      uint64_t v46 = *(void *)(v38 + 168);
      uint64_t v47 = *(void *)(v38 + 56);
      uint64_t v48 = *(void *)(v38 + 48);
      uint64_t v49 = *(void *)(v38 + 40);
      uint64_t v50 = *(void *)(v38 + 144);
      unint64_t v51 = &v102;
      uint64_t v52 = &v102;
      int v53 = v102;
      if (v102)
      {
        do
        {
          while (1)
          {
            unint64_t v51 = (uint64_t **)v53;
            uint64_t v54 = v53[4];
            if (v54 <= v50) {
              break;
            }
            int v53 = *v51;
            uint64_t v52 = v51;
            if (!*v51) {
              goto LABEL_39;
            }
          }
          if (v54 >= v50)
          {
            char v56 = (char *)v51;
            goto LABEL_42;
          }
          int v53 = v51[1];
        }
        while (v53);
        uint64_t v52 = v51 + 1;
      }
LABEL_39:
      char v56 = (char *)operator new(0x98uLL);
      *((void *)v56 + 4) = v50;
      *(_OWORD *)(v56 + 40) = 0u;
      *(_OWORD *)(v56 + 120) = 0u;
      *(_OWORD *)(v56 + 136) = 0u;
      *(_OWORD *)(v56 + 56) = 0u;
      *(_OWORD *)(v56 + 72) = 0u;
      *(_OWORD *)(v56 + 88) = 0u;
      *(_OWORD *)(v56 + 104) = 0u;
      *((void *)v56 + 6) = 0xFFEFFFFFFFFFFFFFLL;
      *(_OWORD *)(v56 + 130) = 0u;
      *(void *)char v56 = 0;
      *((void *)v56 + 1) = 0;
      *((void *)v56 + 2) = v51;
      *uint64_t v52 = (uint64_t *)v56;
      int v55 = (uint64_t *)v56;
      if (*v101)
      {
        long long v101 = (uint64_t **)*v101;
        int v55 = *v52;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v102, v55);
      ++v103;
LABEL_42:
      *((void *)v56 + 5) = v47;
      *((void *)v56 + 6) = v49;
      *((void *)v56 + 7) = v48;
      *((void *)v56 + 8) = v46;
      *((void *)v56 + 9) = v45;
      *((int8x16_t *)v56 + 5) = vextq_s8(v83, v83, 8uLL);
      *((void *)v56 + 12) = v44;
      *((void *)v56 + 13) = v43;
      *((int8x16_t *)v56 + 7) = vextq_s8(v84, v84, 8uLL);
      *((void *)v56 + 16) = v40;
      *((void *)v56 + 17) = v42;
      v56[144] = v41;
      ++v37;
      v56[145] = 0;
      uint64_t v36 = v82;
    }
    uint64_t v57 = v79[5];
    for (uint64_t i = v79[6]; v57 != i; v57 += 8)
    {
      double v60 = *(double *)(*(void *)v57 + 8);
      double v59 = *(double *)(*(void *)v57 + 16);
      if (v60 >= v59) {
        double v61 = *(double *)(*(void *)v57 + 16);
      }
      else {
        double v61 = *(double *)(*(void *)v57 + 8);
      }
      if (v59 < v60) {
        double v59 = *(double *)(*(void *)v57 + 8);
      }
      HKIntervalMask<double>::_insertInterval(v95, v61, v59);
    }
    HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::operator=((uint64_t)&v85.n128_i64[1], (uint64_t)&v88);
    HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::~HDStatisticsBucket((uint64_t)&v88);
  }
  uint64_t v62 = v121;
  uint64_t v63 = v122;
  if (v121 != v122)
  {
    long long v64 = (char *)v86[1];
    do
    {
      uint64_t v65 = *(void *)(*(void *)v62 + 24);
      uint64_t v66 = *(void *)(*(void *)v62 + 32);
      uint64_t v67 = *(void *)(*(void *)v62 + 8);
      uint64_t v68 = *(void *)(*(void *)v62 + 16);
      if ((unint64_t)v64 >= (unint64_t)v87)
      {
        long long v69 = (char *)v86[0];
        unint64_t v70 = 0xCCCCCCCCCCCCCCCDLL * ((v64 - (char *)v86[0]) >> 3);
        unint64_t v71 = v70 + 1;
        if (v70 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(v87 - (unint64_t)v86[0]) >> 3) > v71) {
          unint64_t v71 = 0x999999999999999ALL * ((uint64_t)(v87 - (unint64_t)v86[0]) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v87 - (unint64_t)v86[0]) >> 3) >= 0x333333333333333) {
          unint64_t v72 = 0x666666666666666;
        }
        else {
          unint64_t v72 = v71;
        }
        if (v72)
        {
          unint64_t v72 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v72);
          long long v64 = (char *)v86[1];
          long long v69 = (char *)v86[0];
        }
        else
        {
          uint64_t v73 = 0;
        }
        unint64_t v74 = v72 + 40 * v70;
        *(void *)unint64_t v74 = v66;
        *(void *)(v74 + 8) = v65;
        *(void *)(v74 + 16) = v67;
        *(void *)(v74 + 24) = v68;
        *(_WORD *)(v74 + 32) = 1;
        long long v75 = (char *)v74;
        if (v64 != v69)
        {
          do
          {
            long long v76 = *(_OWORD *)(v64 - 40);
            long long v77 = *(_OWORD *)(v64 - 24);
            *((_WORD *)v75 - 4) = *((_WORD *)v64 - 4);
            *(_OWORD *)(v75 - 24) = v77;
            *(_OWORD *)(v75 - 40) = v76;
            v75 -= 40;
            v64 -= 40;
          }
          while (v64 != v69);
          long long v69 = (char *)v86[0];
        }
        long long v64 = (char *)(v74 + 40);
        v86[0] = v75;
        v86[1] = (void *)(v74 + 40);
        *(void *)&long long v87 = v72 + 40 * v73;
        if (v69) {
          operator delete(v69);
        }
      }
      else
      {
        *(void *)long long v64 = v66;
        *((void *)v64 + 1) = v65;
        *((void *)v64 + 2) = v67;
        *((void *)v64 + 3) = v68;
        *((_WORD *)v64 + 16) = 1;
        v64 += 40;
      }
      v86[1] = v64;
      v62 += 8;
    }
    while (v62 != v63);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v118);

  HDStatisticsCollectionEngine<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::operator=((void *)(v80 + 112), &v85);
  if (v86[0])
  {
    v86[1] = v86[0];
    operator delete(v86[0]);
  }
  HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::~HDStatisticsBucket((uint64_t)&v85.n128_i64[1]);
}

void sub_1BD092578(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)(v13 - 240));
  HDStatisticsCollectionEngine<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 128) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 210) = 0u;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 232) = a1 + 240;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_DWORD *)(a1 + 288) = 1065353216;
  *(void *)(a1 + 344) = 0;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_DWORD *)(a1 + 352) = 1065353216;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_DWORD *)(a1 + 392) = 1065353216;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_DWORD *)(a1 + 432) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  int8x16_t v2 = *(void **)(a1 + 448);
  if (v2)
  {
    *(void *)(a1 + 456) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::~HDStatisticsBucket(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 400);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 360);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 320);
  int8x16_t v2 = *(void **)(a1 + 296);
  if (v2)
  {
    *(void *)(a1 + 304) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 256);
  std::__tree<long>::destroy(*(void **)(a1 + 240));
  id v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(void *)(a1 + 104) = v3;
    operator delete(v3);
  }
  objc_destroyWeak((id *)(a1 + 88));
  uint64_t v4 = *(void **)(a1 + 64);
  if (v4)
  {
    *(void *)(a1 + 72) = v4;
    operator delete(v4);
  }

  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_configureForStartTime(uint64_t a1)
{
  unint64_t v29 = 0;
  int8x16_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
    uint64_t v4 = [v2 dateIntervalContainingDate:v3 index:&v29];

    uint64_t v5 = [v4 startDate];
    [v5 timeIntervalSinceReferenceDate];
    double v7 = v6;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
LABEL_5:
    double v13 = v9;

    goto LABEL_6;
  }
  id v10 = *(id *)(a1 + 64);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v11 = [v10 startDate];
    [v11 timeIntervalSinceReferenceDate];
    double v7 = v12;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
    goto LABEL_5;
  }
  double v7 = -1.79769313e308;
  double v13 = 1.79769313e308;
LABEL_6:

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::HDStatisticsBucket((uint64_t)v21, WeakRetained, v7, v13);

  if (*(void *)(a1 + 32) == 1) {
    char v23 = 1;
  }
  uint64_t v22 = *(void *)(a1 + 56);
  char v24 = *(unsigned char *)(a1 + 24) & 1;
  if (v27 != (char *)(a1 + 72)) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27, *(char **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4);
  }
  objc_storeStrong(&v26, *(id *)(a1 + 608));
  if (!*(void *)(a1 + 40))
  {
    int v25 = 0;
    if (v28 == -1.79769313e308) {
      double v28 = *(double *)(a1 + 600);
    }
  }
  unint64_t v15 = v29;
  HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v21);
  v18.n128_u64[0] = v15;
  HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::HDStatisticsBucket((uint64_t)&v18.n128_i64[1], (uint64_t)v17);
  long long __p = 0u;
  long long v20 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::operator=((void *)(a1 + 112), &v18);

  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::~HDStatisticsBucket((uint64_t)&v18.n128_i64[1]);
  HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::~HDStatisticsBucket((uint64_t)v17);
  *(unsigned char *)(a1 + 592) = 0;
  return HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::~HDStatisticsBucket((uint64_t)v21);
}

void sub_1BD092AB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *HDStatisticsCollectionEngine<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::operator=(void *a1, __n128 *a2)
{
  *a1 = a2->n128_u64[0];
  HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::operator=((uint64_t)(a1 + 1), (uint64_t)&a2->n128_i64[1]);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 56), a2 + 28);
  unint64_t v4 = a2[29].n128_u64[1];
  a2[29].n128_u64[1] = 0;
  uint64_t v5 = (void *)a1[59];
  a1[59] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 96);
  double v7 = *(unsigned char **)(a2 + 104);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(void *)(a1 + 96) = v10;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(void *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  long long v12 = *(_OWORD *)(a2 + 168);
  long long v13 = *(_OWORD *)(a2 + 184);
  long long v14 = *(_OWORD *)(a2 + 200);
  long long v15 = *(_OWORD *)(a2 + 216);
  long long v16 = *(_OWORD *)(a2 + 120);
  long long v17 = *(_OWORD *)(a2 + 136);
  long long v18 = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 240) = 0;
  unint64_t v19 = (void *)(a1 + 240);
  *(void *)(a1 + 232) = a1 + 240;
  *(_OWORD *)(a1 + 120) = v16;
  *(_OWORD *)(a1 + 136) = v17;
  *(_OWORD *)(a1 + 200) = v14;
  *(_OWORD *)(a1 + 216) = v15;
  *(_OWORD *)(a1 + 168) = v12;
  *(_OWORD *)(a1 + 184) = v13;
  *(_OWORD *)(a1 + 152) = v18;
  *(void *)(a1 + 248) = 0;
  long long v20 = *(void **)(a2 + 232);
  if (v20 != (void *)(a2 + 240))
  {
    long long v21 = 0;
    uint64_t v22 = (void *)(a1 + 240);
    while (1)
    {
      uint64_t v23 = v20[4];
      char v24 = (void *)(a1 + 240);
      if (v22 == v19) {
        goto LABEL_12;
      }
      int v25 = v21;
      id v26 = (void *)(a1 + 240);
      if (v21)
      {
        do
        {
          char v24 = v25;
          int v25 = (void *)v25[1];
        }
        while (v25);
      }
      else
      {
        do
        {
          char v24 = (void *)v26[2];
          BOOL v27 = *v24 == (void)v26;
          id v26 = v24;
        }
        while (v27);
      }
      if (v24[4] < v23)
      {
LABEL_12:
        if (v21) {
          double v28 = (uint64_t **)v24;
        }
        else {
          double v28 = (uint64_t **)(a1 + 240);
        }
        if (v21) {
          unint64_t v29 = (uint64_t **)(v24 + 1);
        }
        else {
          unint64_t v29 = (uint64_t **)(a1 + 240);
        }
        if (!*v29)
        {
LABEL_28:
          uint64_t v32 = operator new(0x98uLL);
          long long v33 = *((_OWORD *)v20 + 2);
          long long v34 = *((_OWORD *)v20 + 3);
          long long v35 = *((_OWORD *)v20 + 5);
          v32[4] = *((_OWORD *)v20 + 4);
          v32[5] = v35;
          v32[2] = v33;
          v32[3] = v34;
          long long v36 = *((_OWORD *)v20 + 6);
          long long v37 = *((_OWORD *)v20 + 7);
          long long v38 = *((_OWORD *)v20 + 8);
          *((void *)v32 + 18) = v20[18];
          v32[7] = v37;
          v32[8] = v38;
          v32[6] = v36;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 232), (uint64_t)v28, v29, (uint64_t *)v32);
        }
      }
      else
      {
        unint64_t v29 = (uint64_t **)(a1 + 240);
        double v28 = (uint64_t **)(a1 + 240);
        if (!v21) {
          goto LABEL_28;
        }
        uint64_t v30 = v21;
        while (1)
        {
          while (1)
          {
            double v28 = (uint64_t **)v30;
            uint64_t v31 = v30[4];
            if (v31 <= v23) {
              break;
            }
            uint64_t v30 = *v28;
            unint64_t v29 = v28;
            if (!*v28) {
              goto LABEL_28;
            }
          }
          if (v31 >= v23) {
            break;
          }
          uint64_t v30 = v28[1];
          if (!v30)
          {
            unint64_t v29 = v28 + 1;
            goto LABEL_28;
          }
        }
      }
      uint64_t v39 = (void *)v20[1];
      if (v39)
      {
        do
        {
          uint64_t v40 = v39;
          uint64_t v39 = (void *)*v39;
        }
        while (v39);
      }
      else
      {
        do
        {
          uint64_t v40 = (void *)v20[2];
          BOOL v27 = *v40 == (void)v20;
          long long v20 = v40;
        }
        while (!v27);
      }
      if (v40 == (void *)(a2 + 240)) {
        break;
      }
      long long v21 = (void *)*v19;
      uint64_t v22 = *(void **)(a1 + 232);
      long long v20 = v40;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 256, a2 + 256);
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 296), *(const void **)(a2 + 296), *(void *)(a2 + 304), (uint64_t)(*(void *)(a2 + 304) - *(void *)(a2 + 296)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 320, a2 + 320);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 360, a2 + 360);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 400, a2 + 400);
  return a1;
}

void sub_1BD092E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, id *location, void **a12)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v16);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v15);
  unint64_t v19 = *v14;
  if (*v14)
  {
    *(void *)(v12 + 304) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v13);
  std::__tree<long>::destroy(*v17);
  long long v20 = *a10;
  if (*a10)
  {
    *(void *)(v12 + 104) = v20;
    operator delete(v20);
  }
  objc_destroyWeak(location);
  long long v21 = *a12;
  if (*a12)
  {
    *(void *)(v12 + 72) = v21;
    operator delete(v21);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::operator=(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  long long v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v5;

  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  id WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  uint64_t v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(void *)(a1 + 104) = v9;
    operator delete(v9);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 96) = 0;
  long long v10 = *(_OWORD *)(a2 + 184);
  long long v11 = *(_OWORD *)(a2 + 200);
  long long v12 = *(_OWORD *)(a2 + 216);
  uint64_t v14 = a1 + 240;
  uint64_t v13 = *(void **)(a1 + 240);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 216) = v12;
  *(_OWORD *)(a1 + 200) = v11;
  *(_OWORD *)(a1 + 184) = v10;
  long long v15 = *(_OWORD *)(a2 + 152);
  long long v16 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v16;
  *(_OWORD *)(a1 + 152) = v15;
  std::__tree<long>::destroy(v13);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  long long v17 = (void *)(a2 + 240);
  uint64_t v18 = *(void *)(a2 + 240);
  *(void *)(a1 + 240) = v18;
  uint64_t v19 = *(void *)(a2 + 248);
  *(void *)(a1 + 248) = v19;
  if (v19)
  {
    *(void *)(v18 + 16) = v14;
    *(void *)(a2 + 232) = v17;
    void *v17 = 0;
    *(void *)(a2 + 248) = 0;
  }
  else
  {
    *(void *)(a1 + 232) = v14;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 256, (uint64_t *)(a2 + 256));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 296, (__n128 *)(a2 + 296));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 320, (uint64_t *)(a2 + 320));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 360, (uint64_t *)(a2 + 360));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 400, (uint64_t *)(a2 + 400));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_statisticsFromFinishedBucket(uint64_t a1, double *a2)
{
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  double v4 = *a2;
  id v5 = objc_alloc(MEMORY[0x1E4F1C9C8]);
  long long v6 = a2 + 5;
  if (v4 != -1.79769313e308) {
    long long v6 = a2;
  }
  id v102 = (id)[v5 initWithTimeIntervalSinceReferenceDate:*v6];
  uint64_t v104 = (uint64_t)a2;
  if (a2[1] == 1.79769313e308) {
    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:a2[6]];
  }
  else {
    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:a2[1]];
  }
  uint64_t v8 = (void *)v7;
  id v9 = *(id *)(a1 + 16);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v10 = *(id *)(a1 + 16);
    if ([v10 shouldUseUnderlyingTypeForStatistics])
    {
      uint64_t v11 = [v10 underlyingSampleType];

      id v9 = (id)v11;
    }
  }
  long long v12 = (void *)[objc_alloc(MEMORY[0x1E4F2B5B0]) initWithDataType:v9 startDate:v102 endDate:v8];
  if (*(unsigned char *)(a1 + 24))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      id v14 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      long long v15 = *(uint64_t **)(v104 + 296);
      long long v16 = *(uint64_t **)(v104 + 304);
      while (v15 != v16)
      {
        uint64_t v17 = *v15;
        id v18 = objc_loadWeakRetained((id *)(a1 + 48));
        uint64_t v19 = [v18 sourceForSourceID:v17];

        if (v19)
        {
          if (([v14 containsObject:v19] & 1) == 0) {
            [v14 addObject:v19];
          }
        }

        ++v15;
      }
      long long v20 = (void *)[v14 copy];
      [v12 _setSources:v20];
    }
  }

  v114[0] = &unk_1F1723530;
  long long v115 = v114;
  id v103 = v12;
  uint64_t v106 = *(void *)(a1 + 24);
  long long v21 = *(_OWORD *)(v104 + 168);
  long long v22 = *(_OWORD *)(v104 + 200);
  long long v111 = *(_OWORD *)(v104 + 184);
  long long v112 = v22;
  long long v113 = *(_OWORD *)(v104 + 216);
  long long v23 = *(_OWORD *)(v104 + 136);
  *(_OWORD *)long long __p = *(_OWORD *)(v104 + 120);
  long long v108 = v23;
  long long v109 = *(_OWORD *)(v104 + 152);
  long long v110 = v21;
  if (!v115) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  char v24 = (double *)(*(uint64_t (**)(void *, void **))(*v115 + 48))(v115, __p);
  double v26 = v24[5];
  double v25 = v24[6];
  double v27 = v24[7];
  unint64_t v28 = *((void *)v24 + 8);
  double v30 = v24[9];
  double v29 = v24[10];
  double v31 = v24[11];
  uint64_t v32 = *(void *)(a1 + 24);
  uint64_t v33 = _HKStatisticsOptionBaselineRelativeQuantities();
  long long v34 = *(void **)(a1 + 16);
  if ((v33 & v32) != 0) {
    [v34 _unitForChangeInCanonicalUnit];
  }
  else {
  long long v105 = [v34 canonicalUnit];
  }
  if ((v106 & 2) != 0)
  {
    long long v35 = [MEMORY[0x1E4F2B370] quantityWithUnit:v105 doubleValue:v26];
    [v103 setAverageQuantity:v35];
  }
  if ((v106 & 4) != 0)
  {
    long long v36 = [MEMORY[0x1E4F2B370] quantityWithUnit:v105 doubleValue:v27];
    [v103 setMinimumQuantity:v36];
  }
  if ((v106 & 8) != 0)
  {
    long long v37 = [MEMORY[0x1E4F2B370] quantityWithUnit:v105 doubleValue:v25];
    [v103 setMaximumQuantity:v37];
  }
  if ((v106 & 0x20) != 0)
  {
    long long v38 = [MEMORY[0x1E4F2B370] quantityWithUnit:v105 doubleValue:v30];
    [v103 setMostRecentQuantity:v38];

    uint64_t v39 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v29, v31);
    [v103 setMostRecentQuantityDateInterval:v39];
  }
  [v103 setDataCount:v28];
  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    goto LABEL_162;
  }
  if ((v106 & 2) != 0) {
    id v99 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else {
    id v99 = 0;
  }
  if ((v106 & 4) != 0) {
    id v98 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else {
    id v98 = 0;
  }
  if ((v106 & 8) != 0) {
    id v96 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else {
    id v96 = 0;
  }
  if ((v106 & 0x20) != 0)
  {
    id v95 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v97 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else
  {
    id v97 = 0;
    id v95 = 0;
  }
  id v101 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  *(_OWORD *)long long __p = 0u;
  long long v108 = 0u;
  LODWORD(v109) = 1065353216;
  uint64_t v40 = *(void **)(v104 + 232);
  if (v40 == (void *)(v104 + 240)) {
    goto LABEL_153;
  }
  do
  {
    char v41 = HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_bundleIdentifierForSourceID(v104, v40[4]);
    uint64_t v42 = v41;
    if (!v41) {
      goto LABEL_121;
    }
    unint64_t v43 = [v41 hash];
    unint64_t v44 = v43;
    unint64_t v45 = (unint64_t)__p[1];
    if (!__p[1]) {
      goto LABEL_64;
    }
    uint8x8_t v46 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v46.i16[0] = vaddlv_u8(v46);
    unint64_t v47 = v46.u32[0];
    if (v46.u32[0] > 1uLL)
    {
      unint64_t v28 = v43;
      if ((void *)v43 >= __p[1]) {
        unint64_t v28 = v43 % (unint64_t)__p[1];
      }
    }
    else
    {
      unint64_t v28 = ((unint64_t)__p[1] - 1) & v43;
    }
    uint64_t v48 = (void **)*((void *)__p[0] + v28);
    if (!v48 || (uint64_t v49 = (char *)*v48) == 0)
    {
LABEL_64:
      uint64_t v49 = (char *)operator new(0x88uLL);
      *(void *)uint64_t v49 = 0;
      *((void *)v49 + 1) = v44;
      *((void *)v49 + 2) = v42;
      *(_OWORD *)(v49 + 24) = 0u;
      *(_OWORD *)(v49 + 120) = 0u;
      *(_OWORD *)(v49 + 104) = 0u;
      *(_OWORD *)(v49 + 40) = 0u;
      *(_OWORD *)(v49 + 56) = 0u;
      *(_OWORD *)(v49 + 72) = 0u;
      *(_OWORD *)(v49 + 88) = 0u;
      *((void *)v49 + 4) = 0xFFEFFFFFFFFFFFFFLL;
      *(_OWORD *)(v49 + 114) = 0u;
      float v55 = (float)(unint64_t)(*((void *)&v108 + 1) + 1);
      if (v45 && (float)(*(float *)&v109 * (float)v45) >= v55)
      {
LABEL_110:
        unint64_t v71 = __p[0];
        unint64_t v72 = (void *)*((void *)__p[0] + v28);
        if (v72)
        {
          *(void *)uint64_t v49 = *v72;
        }
        else
        {
          *(void *)uint64_t v49 = v108;
          *(void *)&long long v108 = v49;
          v71[v28] = &v108;
          if (!*(void *)v49)
          {
LABEL_119:
            ++*((void *)&v108 + 1);
            goto LABEL_120;
          }
          unint64_t v73 = *(void *)(*(void *)v49 + 8);
          if ((v45 & (v45 - 1)) != 0)
          {
            if (v73 >= v45) {
              v73 %= v45;
            }
          }
          else
          {
            v73 &= v45 - 1;
          }
          unint64_t v72 = (char *)__p[0] + 8 * v73;
        }
        *unint64_t v72 = v49;
        goto LABEL_119;
      }
      BOOL v56 = (v45 & (v45 - 1)) != 0;
      if (v45 < 3) {
        BOOL v56 = 1;
      }
      unint64_t v57 = v56 | (2 * v45);
      unint64_t v58 = vcvtps_u32_f32(v55 / *(float *)&v109);
      if (v57 <= v58) {
        int8x8_t prime = (int8x8_t)v58;
      }
      else {
        int8x8_t prime = (int8x8_t)v57;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v45 = (unint64_t)__p[1];
      if ((void *)*(void *)&prime > __p[1]) {
        goto LABEL_76;
      }
      if ((void *)*(void *)&prime < __p[1])
      {
        unint64_t v66 = vcvtps_u32_f32((float)*((unint64_t *)&v108 + 1) / *(float *)&v109);
        if (__p[1] < (void *)3
          || (uint8x8_t v67 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v67.i16[0] = vaddlv_u8(v67), v67.u32[0] > 1uLL))
        {
          unint64_t v66 = std::__next_prime(v66);
        }
        else
        {
          uint64_t v68 = 1 << -(char)__clz(v66 - 1);
          if (v66 >= 2) {
            unint64_t v66 = v68;
          }
        }
        if (*(void *)&prime <= v66) {
          int8x8_t prime = (int8x8_t)v66;
        }
        if (*(void *)&prime >= v45)
        {
          unint64_t v45 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_76:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            double v60 = operator new(8 * *(void *)&prime);
            double v61 = __p[0];
            __p[0] = v60;
            if (v61) {
              operator delete(v61);
            }
            uint64_t v62 = 0;
            __p[1] = (void *)prime;
            do
              *((void *)__p[0] + v62++) = 0;
            while (*(void *)&prime != v62);
            uint64_t v63 = (void **)v108;
            if ((void)v108)
            {
              unint64_t v64 = *(void *)(v108 + 8);
              uint8x8_t v65 = (uint8x8_t)vcnt_s8(prime);
              v65.i16[0] = vaddlv_u8(v65);
              if (v65.u32[0] > 1uLL)
              {
                if (v64 >= *(void *)&prime) {
                  v64 %= *(void *)&prime;
                }
              }
              else
              {
                v64 &= *(void *)&prime - 1;
              }
              *((void *)__p[0] + v64) = &v108;
              for (i = *v63; i; unint64_t v64 = v70)
              {
                unint64_t v70 = i[1];
                if (v65.u32[0] > 1uLL)
                {
                  if (v70 >= *(void *)&prime) {
                    v70 %= *(void *)&prime;
                  }
                }
                else
                {
                  v70 &= *(void *)&prime - 1;
                }
                if (v70 != v64)
                {
                  if (!*((void *)__p[0] + v70))
                  {
                    *((void *)__p[0] + v70) = v63;
                    goto LABEL_101;
                  }
                  _OWORD *v63 = (void *)*i;
                  void *i = **((void **)__p[0] + v70);
                  **((void **)__p[0] + v70) = i;
                  uint64_t i = v63;
                }
                unint64_t v70 = v64;
LABEL_101:
                uint64_t v63 = (void **)i;
                uint64_t i = (void *)*i;
              }
            }
            unint64_t v45 = (unint64_t)prime;
            goto LABEL_105;
          }
          unint64_t v82 = __p[0];
          __p[0] = 0;
          if (v82) {
            operator delete(v82);
          }
          unint64_t v45 = 0;
          __p[1] = 0;
        }
      }
LABEL_105:
      if ((v45 & (v45 - 1)) != 0)
      {
        if (v44 >= v45) {
          unint64_t v28 = v44 % v45;
        }
        else {
          unint64_t v28 = v44;
        }
      }
      else
      {
        unint64_t v28 = (v45 - 1) & v44;
      }
      goto LABEL_110;
    }
    unint64_t v100 = (unint64_t)__p[1] - 1;
    while (1)
    {
      unint64_t v50 = *((void *)v49 + 1);
      if (v50 == v44) {
        break;
      }
      if (v47 > 1)
      {
        if (v50 >= v45) {
          v50 %= v45;
        }
      }
      else
      {
        v50 &= v100;
      }
      if (v50 != v28) {
        goto LABEL_64;
      }
LABEL_63:
      uint64_t v49 = *(char **)v49;
      if (!v49) {
        goto LABEL_64;
      }
    }
    id v51 = *((id *)v49 + 2);
    id v52 = v42;
    int v53 = v52;
    if (v51 != v52)
    {
      char v54 = [v51 isEqualToString:v52];

      if (v54) {
        goto LABEL_120;
      }
      goto LABEL_63;
    }

LABEL_120:
    long long v74 = *(_OWORD *)(v40 + 5);
    long long v75 = *(_OWORD *)(v40 + 7);
    *(_OWORD *)(v49 + 56) = *(_OWORD *)(v40 + 9);
    *(_OWORD *)(v49 + 40) = v75;
    *(_OWORD *)(v49 + 24) = v74;
    long long v76 = *(_OWORD *)(v40 + 11);
    long long v77 = *(_OWORD *)(v40 + 13);
    long long v78 = *(_OWORD *)(v40 + 15);
    *(_OWORD *)(v49 + 120) = *(_OWORD *)(v40 + 17);
    *(_OWORD *)(v49 + 104) = v78;
    *(_OWORD *)(v49 + 88) = v77;
    *(_OWORD *)(v49 + 72) = v76;

LABEL_121:
    int64_t v79 = (void *)v40[1];
    if (v79)
    {
      do
      {
        uint64_t v80 = v79;
        int64_t v79 = (void *)*v79;
      }
      while (v79);
    }
    else
    {
      do
      {
        uint64_t v80 = (void *)v40[2];
        BOOL v81 = *v80 == (void)v40;
        uint64_t v40 = v80;
      }
      while (!v81);
    }
    uint64_t v40 = v80;
  }
  while (v80 != (void *)(v104 + 240));
  for (uint64_t j = (uint64_t **)v108; j; uint64_t j = (uint64_t **)*j)
  {
    int8x16_t v84 = j[2];
    if ((v106 & 2) != 0)
    {
      if (!v115) {
        goto LABEL_165;
      }
      __n128 v85 = objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v105, *(double *)((*(uint64_t (**)(void *, uint64_t *))(*v115 + 48))(v115, (uint64_t *)j + 3) + 40));
      [v99 setObject:v85 forKeyedSubscript:v84];
    }
    if ((v106 & 4) != 0)
    {
      if (!v115) {
        goto LABEL_165;
      }
      long long v86 = objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v105, *(double *)((*(uint64_t (**)(void *, uint64_t *))(*v115 + 48))(v115, (uint64_t *)j + 3) + 56));
      [v98 setObject:v86 forKeyedSubscript:v84];
    }
    if ((v106 & 8) != 0)
    {
      if (!v115) {
        goto LABEL_165;
      }
      long long v87 = objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v105, *(double *)((*(uint64_t (**)(void *, uint64_t *))(*v115 + 48))(v115, (uint64_t *)j + 3) + 48));
      [v96 setObject:v87 forKeyedSubscript:v84];
    }
    if ((v106 & 0x20) != 0)
    {
      if (!v115) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v88 = (*(uint64_t (**)(void *, uint64_t *))(*v115 + 48))(v115, (uint64_t *)j + 3);
      double v89 = *(double *)(v88 + 80);
      double v90 = *(double *)(v88 + 88);
      char v91 = [MEMORY[0x1E4F2B370] quantityWithUnit:v105 doubleValue:*(double *)(v88 + 72)];
      [v95 setObject:v91 forKeyedSubscript:v84];

      uint64_t v92 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v89, v90);
      [v97 setObject:v92 forKeyedSubscript:v84];
    }
    if (!v115) {
LABEL_165:
    }
      std::__throw_bad_function_call[abi:ne180100]();
    int8x16_t v93 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)((*(uint64_t (**)(void *, uint64_t *))(*v115 + 48))(v115, (uint64_t *)j + 3) + 64));
    [v101 setObject:v93 forKeyedSubscript:v84];
  }
LABEL_153:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>>>::~__hash_table((uint64_t)__p);
  if ((v106 & 2) != 0) {
    [v103 setAverageQuantityBySource:v99];
  }
  if ((v106 & 4) != 0) {
    [v103 setMinimumQuantityBySource:v98];
  }
  if ((v106 & 8) != 0) {
    [v103 setMaximumQuantityBySource:v96];
  }
  if ((v106 & 0x20) != 0)
  {
    [v103 setMostRecentQuantityBySource:v95];
    [v103 setMostRecentQuantityDateIntervalBySource:v97];
  }
  [v103 setDataCountBySource:v101];

LABEL_162:
  std::__function::__value_func<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)>::~__value_func[abi:ne180100](v114);

  return v103;
}

void sub_1BD093D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21)
{
  std::__function::__value_func<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)>::~__value_func[abi:ne180100]((void *)(v21 - 176));
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 280);
  uint64_t v2 = *(void *)(a1 + 296);
  if (v1 != (*(void *)(a1 + 304) - v2) >> 3)
  {
    double v4 = (void **)(a1 + 296);
    *(void *)(a1 + 304) = v2;
    std::vector<long long>::reserve((void **)(a1 + 296), v1);
    id v5 = *(void **)(a1 + 272);
    if (v5)
    {
      long long v6 = *(char **)(a1 + 304);
      do
      {
        uint64_t v7 = v5[2];
        unint64_t v8 = *(void *)(a1 + 312);
        if ((unint64_t)v6 >= v8)
        {
          id v10 = (char *)*v4;
          uint64_t v11 = (v6 - (unsigned char *)*v4) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            id v10 = *(char **)(a1 + 296);
            long long v6 = *(char **)(a1 + 304);
          }
          else
          {
            uint64_t v15 = 0;
          }
          long long v16 = (void *)(v14 + 8 * v11);
          *long long v16 = v7;
          id v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            uint64_t v17 = *((void *)v6 - 1);
            v6 -= 8;
            *--long long v16 = v17;
          }
          *(void *)(a1 + 296) = v16;
          *(void *)(a1 + 304) = v9;
          *(void *)(a1 + 312) = v14 + 8 * v15;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)long long v6 = v7;
          id v9 = v6 + 8;
        }
        *(void *)(a1 + 304) = v9;
        id v5 = (void *)*v5;
        long long v6 = v9;
      }
      while (v5);
    }
    id v18 = (id *)(a1 + 88);
    id WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      id v20 = objc_loadWeakRetained(v18);
      [v20 orderSourceIDs:v4];
    }
  }
}

void sub_1BD0940CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2) {
    a2 = v4 * floor(a2 / v4);
  }
  double v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    uint64_t v101 = a1 + 120;
    id v102 = (char **)(a1 + 96);
    location = (id *)(a1 + 88);
    long long v6 = (void *)(a1 + 240);
    do
    {
      uint64_t v7 = *(double **)(a1 + 96);
      unint64_t v8 = *(long long **)(a1 + 104);
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v7) >> 4);
      if (v9)
      {
        if (v9 != 1)
        {
          double v30 = a2;
          double v31 = a2;
          double v32 = v5;
          uint64_t v33 = *(void *)(a1 + 96);
          if (v7 != (double *)v8)
          {
            do
            {
              double v34 = *(double *)(v33 + 8);
              double v35 = *(double *)(v33 + 16);
              if (v34 > v32 && v34 < v31) {
                double v31 = *(double *)(v33 + 8);
              }
              if (v35 > v5) {
                double v37 = *(double *)(v33 + 16);
              }
              else {
                double v37 = v30;
              }
              if (v35 < v30)
              {
                double v32 = v5;
                double v30 = v37;
              }
              v33 += 48;
            }
            while ((long long *)v33 != v8);
          }
          if (v30 >= v31) {
            double v38 = v31;
          }
          else {
            double v38 = v30;
          }
          double v39 = *(double *)(a1 + 16);
          if (v39 > 0.0)
          {
            double v40 = v39 * floor(v38 / v39);
            double v41 = v39 * floor((v39 + v5) / v39);
            if (v40 >= v41) {
              double v38 = v40;
            }
            else {
              double v38 = v41;
            }
          }
          *id v102 = 0;
          v102[1] = 0;
          v102[2] = 0;
          if (v7 != (double *)v8)
          {
            if (v9 > 0x555555555555555) {
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v9);
            unint64_t v45 = *(char **)(a1 + 96);
            unint64_t v44 = *(char **)(a1 + 104);
            uint8x8_t v46 = v42;
            if (v44 != v45)
            {
              do
              {
                long long v47 = *((_OWORD *)v44 - 3);
                long long v48 = *((_OWORD *)v44 - 2);
                *(_OWORD *)(v46 - 21) = *(_OWORD *)(v44 - 21);
                *((_OWORD *)v46 - 3) = v47;
                *((_OWORD *)v46 - 2) = v48;
                v46 -= 48;
                v44 -= 48;
              }
              while (v44 != v45);
              unint64_t v44 = *v102;
            }
            *(void *)(a1 + 96) = v46;
            *(void *)(a1 + 104) = v42;
            *(void *)(a1 + 112) = &v42[48 * v43];
            if (v44) {
              operator delete(v44);
            }
          }
          HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_updateSourceOrder(a1);
          id WeakRetained = objc_loadWeakRetained(location);

          unint64_t v50 = __clz(v9);
          if (WeakRetained)
          {
            *(void *)&long long v104 = a1;
            uint64_t v51 = 126 - 2 * v50;
            if (v7 == (double *)v8) {
              uint64_t v52 = 0;
            }
            else {
              uint64_t v52 = v51;
            }
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder*,false>((unint64_t)v7, v8, (uint64_t)&v104, v52, 1);
          }
          else
          {
            uint64_t v60 = 126 - 2 * v50;
            if (v7 == (double *)v8) {
              uint64_t v52 = 0;
            }
            else {
              uint64_t v52 = v60;
            }
          }
          std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder*,false>((unint64_t)v7, v8, v52, 1);
          if (*(unsigned char *)(a1 + 25)) {
            id v100 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
          }
          else {
            id v100 = 0;
          }
          if (v7 == (double *)v8)
          {
LABEL_140:
            uint64_t v92 = *(void **)(a1 + 232);
            if (v92 != v6)
            {
              do
              {
                int8x16_t v93 = (void *)v92[1];
                if (v93)
                {
                  do
                  {
                    uint64_t v94 = v93;
                    int8x16_t v93 = (void *)*v93;
                  }
                  while (v93);
                }
                else
                {
                  do
                  {
                    uint64_t v94 = (void *)v92[2];
                    BOOL v95 = *v94 == (void)v92;
                    uint64_t v92 = v94;
                  }
                  while (!v95);
                }
                uint64_t v92 = v94;
              }
              while (v94 != v6);
            }
            *(double *)(a1 + 56) = v38;

            if (v7) {
              operator delete(v7);
            }
            goto LABEL_152;
          }
          uint64_t v61 = 0;
          char v62 = 0;
          uint64_t v63 = v7;
          while (2)
          {
            long long v64 = *((_OWORD *)v63 + 1);
            long long v104 = *(_OWORD *)v63;
            long long v105 = v64;
            uint64_t v106 = *((void *)v63 + 4);
            if (!(_BYTE)v106 || *((double *)&v104 + 1) > v38)
            {
              uint8x8_t v65 = *(long long **)(a1 + 104);
              unint64_t v66 = *(void *)(a1 + 112);
              if ((unint64_t)v65 >= v66)
              {
                unint64_t v70 = 0xAAAAAAAAAAAAAAABLL * (((char *)v65 - *v102) >> 4);
                unint64_t v71 = v70 + 1;
                if (v70 + 1 > 0x555555555555555) {
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v72 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - (void)*v102) >> 4);
                if (2 * v72 > v71) {
                  unint64_t v71 = 2 * v72;
                }
                if (v72 >= 0x2AAAAAAAAAAAAAALL) {
                  unint64_t v73 = 0x555555555555555;
                }
                else {
                  unint64_t v73 = v71;
                }
                if (v73) {
                  unint64_t v73 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v73);
                }
                else {
                  uint64_t v74 = 0;
                }
                long long v78 = (long long *)(v73 + 48 * v70);
                long long v79 = *(_OWORD *)v63;
                long long v80 = *((_OWORD *)v63 + 2);
                v78[1] = *((_OWORD *)v63 + 1);
                v78[2] = v80;
                *long long v78 = v79;
                unint64_t v82 = *(char **)(a1 + 96);
                BOOL v81 = *(char **)(a1 + 104);
                int8x16_t v83 = v78;
                if (v81 != v82)
                {
                  do
                  {
                    long long v84 = *((_OWORD *)v81 - 3);
                    long long v85 = *((_OWORD *)v81 - 2);
                    *(long long *)((char *)v83 - 21) = *(_OWORD *)(v81 - 21);
                    *(v83 - 3) = v84;
                    *(v83 - 2) = v85;
                    v83 -= 3;
                    v81 -= 48;
                  }
                  while (v81 != v82);
                  BOOL v81 = *v102;
                }
                long long v69 = v78 + 3;
                *(void *)(a1 + 96) = v83;
                *(void *)(a1 + 104) = v78 + 3;
                *(void *)(a1 + 112) = v73 + 48 * v74;
                if (v81) {
                  operator delete(v81);
                }
              }
              else
              {
                long long v67 = *(_OWORD *)v63;
                long long v68 = *((_OWORD *)v63 + 2);
                v65[1] = *((_OWORD *)v63 + 1);
                v65[2] = v68;
                *uint8x8_t v65 = v67;
                long long v69 = v65 + 3;
              }
              *(void *)(a1 + 104) = v69;
LABEL_139:
              v63 += 6;
              if (v63 == (double *)v8) {
                goto LABEL_140;
              }
              continue;
            }
            break;
          }
          double v75 = *(double *)&v105;
          if (*(double *)&v105 > v38) {
            double v75 = v38;
          }
          *(double *)&long long v105 = v75;
          for (uint64_t i = *(double **)(a1 + 64); i != *(double **)(a1 + 72) && *((double *)&v104 + 1) >= *i; i += 2)
          {
            if (*((double *)&v104 + 1) < i[1]) {
              goto LABEL_139;
            }
          }
          if (v62)
          {
            unint64_t v77 = *((void *)&v105 + 1);
            if (v61 == *((void *)&v105 + 1) || *(unsigned char *)(a1 + 24)) {
              HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::addSample(v101, (double *)&v104);
            }
          }
          else
          {
            HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::addSample(v101, (double *)&v104);
            unint64_t v77 = *((void *)&v105 + 1);
            uint64_t v61 = *((void *)&v105 + 1);
          }
          if (!*(unsigned char *)(a1 + 25)) {
            goto LABEL_138;
          }
          long long v86 = HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_bundleIdentifierForSourceID(a1, v77);
          if (!v86) {
            goto LABEL_137;
          }
          long long v87 = [v100 objectForKeyedSubscript:v86];
          uint64_t v88 = v87;
          if (v87)
          {
            if ([v87 longLongValue] != v77 && !*(unsigned char *)(a1 + 24))
            {
LABEL_136:

LABEL_137:
LABEL_138:
              char v62 = 1;
              goto LABEL_139;
            }
          }
          else
          {
            double v89 = [NSNumber numberWithLongLong:v77];
            [v100 setObject:v89 forKeyedSubscript:v86];
          }
          unint64_t v90 = HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_canonicalSourceIDForSourceID(a1, v77);
          char v91 = HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_statisticsForSource(a1, v90);
          HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::addSample((uint64_t)v91, (double *)&v104);
          goto LABEL_136;
        }
        int v10 = *((unsigned __int8 *)v7 + 42);
        int v11 = *((unsigned __int8 *)v7 + 41);
        int v12 = *((unsigned __int8 *)v7 + 40);
        double v13 = v7[1];
        double v14 = v7[2];
        unint64_t v15 = *((void *)v7 + 3);
        char v16 = *((unsigned char *)v7 + 33);
        if (v14 <= a2) {
          double v17 = v7[2];
        }
        else {
          double v17 = a2;
        }
        if (v13 < a2) {
          int v18 = *((unsigned __int8 *)v7 + 32);
        }
        else {
          int v18 = 0;
        }
        if (v13 < a2) {
          char v19 = 0;
        }
        else {
          char v19 = *((unsigned char *)v7 + 33);
        }
        if (v13 < a2)
        {
          uint64_t v20 = 0;
        }
        else
        {
          double v17 = v7[2];
          uint64_t v20 = *((void *)v7 + 3);
        }
        if (v13 < a2) {
          double v21 = 0.0;
        }
        else {
          double v21 = v7[2];
        }
        if (v13 < a2) {
          double v22 = 0.0;
        }
        else {
          double v22 = *v7;
        }
        if (v13 < a2) {
          double v23 = 0.0;
        }
        else {
          double v23 = v7[1];
        }
        if (v13 < a2) {
          int v24 = 0;
        }
        else {
          int v24 = *((unsigned __int8 *)v7 + 32);
        }
        if (*((unsigned char *)v7 + 32))
        {
          double v14 = v17;
        }
        else
        {
          int v18 = 0;
          char v19 = 0;
          uint64_t v20 = 0;
        }
        if (*((unsigned char *)v7 + 32)) {
          double v25 = v21;
        }
        else {
          double v25 = 0.0;
        }
        if (*((unsigned char *)v7 + 32)) {
          double v26 = v22;
        }
        else {
          double v26 = 0.0;
        }
        if (*((unsigned char *)v7 + 32)) {
          double v27 = v23;
        }
        else {
          double v27 = 0.0;
        }
        if (*((unsigned char *)v7 + 32)) {
          int v28 = v24;
        }
        else {
          int v28 = 0;
        }
        *(double *)&long long v104 = *v7;
        *((double *)&v104 + 1) = v13;
        *(double *)&long long v105 = v14;
        *((void *)&v105 + 1) = v15;
        LOBYTE(v106) = v18;
        BYTE1(v106) = v16;
        *(_DWORD *)((char *)&v106 + 2) = *(_DWORD *)((char *)v7 + 34);
        HIWORD(v106) = *((_WORD *)v7 + 19);
        *(double *)&long long v107 = v26;
        *((double *)&v107 + 1) = v27;
        *(double *)&long long v108 = v25;
        *((void *)&v108 + 1) = v20;
        LOBYTE(v109) = v28;
        HIBYTE(v109) = v19;
        for (uint64_t j = *(double **)(a1 + 64); j != *(double **)(a1 + 72) && v13 >= *j; j += 2)
        {
          if (v13 < j[1])
          {
            BOOL v53 = v12 != 0;
            BOOL v54 = v11 != 0;
            BOOL v55 = v10 != 0;
            if (!v28) {
              goto LABEL_150;
            }
LABEL_88:
            LOWORD(v103) = v109;
            long long v58 = v108;
            double v59 = *v102;
            *(_OWORD *)double v59 = v107;
            *((_OWORD *)v59 + 1) = v58;
            *((void *)v59 + 4) = v103;
            v59[40] = v53;
            v59[41] = v54;
            v59[42] = v55;
            goto LABEL_151;
          }
        }
        BOOL v53 = v12 != 0;
        BOOL v54 = v11 != 0;
        BOOL v55 = v10 != 0;
        if (v18)
        {
          HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::addSample(v101, (double *)&v104);
          if (*(unsigned char *)(a1 + 25))
          {
            unint64_t v56 = HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_canonicalSourceIDForSourceID(a1, v15);
            unint64_t v57 = HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_statisticsForSource(a1, v56);
            HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::addSample((uint64_t)v57, (double *)&v104);
          }
          BOOL v53 = 1;
          BOOL v54 = 1;
          BOOL v55 = 1;
        }
        if (v28) {
          goto LABEL_88;
        }
LABEL_150:
        *(void *)(a1 + 104) = *(void *)(a1 + 96);
      }
LABEL_151:
      *(double *)(a1 + 56) = a2;
LABEL_152:
      double v96 = *(double *)(a1 + 56);
      if (v96 == v5)
      {
        id v97 = [MEMORY[0x1E4F28B00] currentHandler];
        id v98 = [NSString stringWithUTF8String:"void HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeThroughTime(double) [Statistics = HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>]"];
        [v97 handleFailureInFunction:v98 file:@"HDStatisticsBucket.hpp" lineNumber:234 description:@"Failed to make forward progress during statistics merge."];

        double v96 = *(double *)(a1 + 56);
      }
      double v5 = v96;
    }
    while (v96 < a2);
  }
}

void sub_1BD094850(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = a2;
  double v5 = *(void **)(a1 + 240);
  id v3 = (uint64_t **)(a1 + 240);
  double v4 = v5;
  if (!v5) {
    goto LABEL_11;
  }
  long long v6 = v3;
  do
  {
    uint64_t v7 = v4[4];
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      unint64_t v9 = v4;
    }
    else {
      unint64_t v9 = v4 + 1;
    }
    if (!v8) {
      long long v6 = (uint64_t **)v4;
    }
    double v4 = (void *)*v9;
  }
  while (*v9);
  if (v6 == v3 || (uint64_t)v6[4] > a2)
  {
LABEL_11:
    int v10 = v3 - 1;
    std::__tree<std::__value_type<long long,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v3 - 1, a2, &v12);
    long long v6 = std::__tree<std::__value_type<long long,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v10, a2, &v12);
  }
  return v6 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    double v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((void *)(a1 + 320), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_bundleIdentifierForSourceID(a1, a2);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      id v10 = v6;
      uint64_t v7 = (void *)(a1 + 360);
      BOOL v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        int v11 = &v10;
        *((void *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        id v6 = v10;
      }
    }
  }
  return a2;
}

void sub_1BD094A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  double v4 = (id *)(a1 + 88);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    id v6 = (void *)(a1 + 400);
    uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
    if (v7)
    {
      id v8 = (id)v7[3];
    }
    else
    {
      id v9 = objc_loadWeakRetained(v4);
      id v8 = [v9 bundleIdentifierForSourceID:a2];

      if (v8)
      {
        id v10 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
        objc_storeStrong(v10 + 3, v8);
      }
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1BD094AF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, void *a3)
{
  id v6 = a1 + 1;
  double v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        uint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        double v5 = *v7;
        id v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      double v5 = v7[1];
      if (!v5)
      {
        id v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    id v9 = (char *)operator new(0x98uLL);
    *((void *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 136) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *((void *)v9 + 6) = 0xFFEFFFFFFFFFFFFFLL;
    *(_OWORD *)(v9 + 130) = 0u;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v12 = a2 - 3;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 4);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v103 = *((void *)a2 - 3);
                uint64_t v104 = *(void *)(v13 + 24);
                if (v103 == v104) {
                  return;
                }
                long long v105 = *(char **)(*(void *)a3 + 296);
                uint64_t v106 = *(char **)(*(void *)a3 + 304);
                long long v107 = v105;
                long long v108 = v105;
                if (v105 == v106) {
                  goto LABEL_171;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)v13, (long long *)(v13 + 48), a2 - 3, a3);
                return;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, (uint64_t)(a2 - 3), a3);
                return;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, v13 + 144, (uint64_t)(a2 - 3), a3);
                return;
              default:
                JUMPOUT(0);
            }
            do
            {
              if (*(void *)v108 == v103) {
                goto LABEL_168;
              }
              v108 += 8;
            }
            while (v108 != v106);
            long long v108 = *(char **)(*(void *)a3 + 304);
LABEL_168:
            while (*(void *)v107 != v104)
            {
              v107 += 8;
              if (v107 == v106)
              {
                long long v107 = *(char **)(*(void *)a3 + 304);
                break;
              }
            }
LABEL_171:
            if (v108 - v105 < v107 - v105)
            {
              *(_OWORD *)v226 = *(_OWORD *)(v13 + 16);
              *(_OWORD *)&v226[16] = *(_OWORD *)(v13 + 32);
              long long v218 = *(_OWORD *)v13;
              long long v109 = *v12;
              long long v110 = *(a2 - 2);
              *(_OWORD *)(v13 + 27) = *(long long *)((char *)a2 - 21);
              *(_OWORD *)unint64_t v13 = v109;
              *(_OWORD *)(v13 + 16) = v110;
              *(long long *)((char *)a2 - 21) = *(_OWORD *)&v226[11];
              long long *v12 = v218;
              *(a2 - 2) = *(_OWORD *)v226;
            }
            return;
          }
          if (v14 <= 1151)
          {
            long long v111 = (long long *)(v13 + 48);
            BOOL v113 = (long long *)v13 == a2 || v111 == a2;
            if (a5)
            {
              if (!v113)
              {
                unint64_t v114 = v13;
                do
                {
                  unint64_t v115 = v114;
                  unint64_t v114 = (unint64_t)v111;
                  uint64_t v116 = *(void *)(v115 + 72);
                  uint64_t v117 = *(void *)(v115 + 24);
                  if (v116 != v117)
                  {
                    long long v118 = *(char **)(*(void *)a3 + 296);
                    uint64_t v119 = *(char **)(*(void *)a3 + 304);
                    unint64_t v120 = v118;
                    uint64_t v121 = v118;
                    if (v118 != v119)
                    {
                      do
                      {
                        if (*(void *)v121 == v116) {
                          goto LABEL_196;
                        }
                        v121 += 8;
                      }
                      while (v121 != v119);
                      uint64_t v121 = *(char **)(*(void *)a3 + 304);
LABEL_196:
                      while (*(void *)v120 != v117)
                      {
                        v120 += 8;
                        if (v120 == v119)
                        {
                          unint64_t v120 = *(char **)(*(void *)a3 + 304);
                          break;
                        }
                      }
                    }
                    if (v121 - v118 < v120 - v118)
                    {
                      uint64_t v227 = *(void *)(v114 + 16);
                      long long v219 = *(_OWORD *)v114;
                      long long v236 = *(_OWORD *)(v115 + 80);
                      unint64_t v122 = v114;
                      while (1)
                      {
                        long long v123 = *(_OWORD *)(v115 + 16);
                        *(_OWORD *)unint64_t v122 = *(_OWORD *)v115;
                        *(_OWORD *)(v122 + 16) = v123;
                        *(_OWORD *)(v122 + 27) = *(_OWORD *)(v115 + 27);
                        if (v115 == v13) {
                          break;
                        }
                        unint64_t v122 = v115;
                        uint64_t v124 = *(void *)(v115 - 24);
                        if (v116 != v124)
                        {
                          uint64_t v125 = *(char **)(*(void *)a3 + 296);
                          uint64_t v126 = *(char **)(*(void *)a3 + 304);
                          uint64_t v127 = v125;
                          uint64_t v128 = v125;
                          if (v125 != v126)
                          {
                            do
                            {
                              if (*(void *)v128 == v116) {
                                goto LABEL_208;
                              }
                              v128 += 8;
                            }
                            while (v128 != v126);
                            uint64_t v128 = *(char **)(*(void *)a3 + 304);
LABEL_208:
                            while (*(void *)v127 != v124)
                            {
                              v127 += 8;
                              if (v127 == v126)
                              {
                                uint64_t v127 = *(char **)(*(void *)a3 + 304);
                                break;
                              }
                            }
                          }
                          unint64_t v115 = v122 - 48;
                          if (v128 - v125 < v127 - v125) {
                            continue;
                          }
                        }
                        goto LABEL_212;
                      }
                      unint64_t v122 = v13;
LABEL_212:
                      *(_OWORD *)unint64_t v122 = v219;
                      *(void *)(v122 + 16) = v227;
                      *(void *)(v122 + 24) = v116;
                      *(void *)(v122 + 32) = v236;
                      *(_DWORD *)(v122 + 39) = *(_DWORD *)((char *)&v236 + 7);
                    }
                  }
                  long long v111 = (long long *)(v114 + 48);
                }
                while ((long long *)(v114 + 48) != a2);
              }
            }
            else if (!v113)
            {
              do
              {
                unint64_t v201 = a1;
                a1 = (unint64_t)v111;
                uint64_t v202 = *(void *)(v201 + 72);
                uint64_t v203 = *(void *)(v201 + 24);
                if (v202 != v203)
                {
                  v204 = *(char **)(*(void *)a3 + 296);
                  v205 = *(char **)(*(void *)a3 + 304);
                  v206 = v204;
                  v207 = v204;
                  if (v204 != v205)
                  {
                    do
                    {
                      if (*(void *)v207 == v202) {
                        goto LABEL_312;
                      }
                      v207 += 8;
                    }
                    while (v207 != v205);
                    v207 = *(char **)(*(void *)a3 + 304);
LABEL_312:
                    while (*(void *)v206 != v203)
                    {
                      v206 += 8;
                      if (v206 == v205)
                      {
                        v206 = *(char **)(*(void *)a3 + 304);
                        break;
                      }
                    }
                  }
                  if (v207 - v204 < v206 - v204)
                  {
                    uint64_t v230 = *(void *)(a1 + 16);
                    long long v222 = *(_OWORD *)a1;
                    long long v239 = *(_OWORD *)(v201 + 80);
                    unint64_t v208 = a1;
                    do
                    {
                      v209 = (_OWORD *)v208;
                      unint64_t v208 = v201;
                      long long v210 = *(_OWORD *)(v201 + 16);
                      _OWORD *v209 = *(_OWORD *)v201;
                      v209[1] = v210;
                      *(_OWORD *)((char *)v209 + 27) = *(_OWORD *)(v201 + 27);
                      uint64_t v211 = *(void *)(v201 - 24);
                      if (v202 == v211) {
                        break;
                      }
                      v212 = *(char **)(*(void *)a3 + 296);
                      v213 = *(char **)(*(void *)a3 + 304);
                      v214 = v212;
                      v215 = v212;
                      if (v212 != v213)
                      {
                        do
                        {
                          if (*(void *)v215 == v202) {
                            goto LABEL_322;
                          }
                          v215 += 8;
                        }
                        while (v215 != v213);
                        v215 = *(char **)(*(void *)a3 + 304);
LABEL_322:
                        while (*(void *)v214 != v211)
                        {
                          v214 += 8;
                          if (v214 == v213)
                          {
                            v214 = *(char **)(*(void *)a3 + 304);
                            break;
                          }
                        }
                      }
                      unint64_t v201 = v208 - 48;
                    }
                    while (v215 - v212 < v214 - v212);
                    *(_OWORD *)unint64_t v208 = v222;
                    *(void *)(v208 + 16) = v230;
                    *(void *)(v208 + 24) = v202;
                    *(void *)(v208 + 32) = v239;
                    *(_DWORD *)(v208 + 39) = *(_DWORD *)((char *)&v239 + 7);
                  }
                }
                long long v111 = (long long *)(a1 + 48);
              }
              while ((long long *)(a1 + 48) != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((long long *)v13 != a2)
            {
              int64_t v129 = (v15 - 2) >> 1;
              int64_t v130 = v129;
              do
              {
                int64_t v131 = v130;
                if (v129 >= v130)
                {
                  uint64_t v132 = (2 * v130) | 1;
                  unint64_t v133 = v13 + 48 * v132;
                  if (2 * v131 + 2 < (uint64_t)v15)
                  {
                    uint64_t v134 = *(void *)(v133 + 24);
                    uint64_t v135 = *(void *)(v133 + 72);
                    if (v134 != v135)
                    {
                      v137 = *(char **)(*(void *)a3 + 296);
                      v136 = *(char **)(*(void *)a3 + 304);
                      v138 = v137;
                      v139 = v137;
                      if (v137 != v136)
                      {
                        do
                        {
                          if (*(void *)v139 == v134) {
                            goto LABEL_224;
                          }
                          v139 += 8;
                        }
                        while (v139 != v136);
                        v139 = *(char **)(*(void *)a3 + 304);
LABEL_224:
                        while (*(void *)v138 != v135)
                        {
                          v138 += 8;
                          if (v138 == v136)
                          {
                            v138 = *(char **)(*(void *)a3 + 304);
                            break;
                          }
                        }
                      }
                      v133 += 48 * (v139 - v137 < v138 - v137);
                      if (v139 - v137 < v138 - v137) {
                        uint64_t v132 = 2 * v131 + 2;
                      }
                    }
                  }
                  unint64_t v140 = v13 + 48 * v131;
                  uint64_t v141 = *(void *)(v133 + 24);
                  uint64_t v142 = *(void *)(v140 + 24);
                  if (v141 == v142) {
                    goto LABEL_238;
                  }
                  v144 = *(char **)(*(void *)a3 + 296);
                  v143 = *(char **)(*(void *)a3 + 304);
                  v145 = v144;
                  v146 = v144;
                  if (v144 != v143)
                  {
                    do
                    {
                      if (*(void *)v146 == v141) {
                        goto LABEL_234;
                      }
                      v146 += 8;
                    }
                    while (v146 != v143);
                    v146 = *(char **)(*(void *)a3 + 304);
LABEL_234:
                    while (*(void *)v145 != v142)
                    {
                      v145 += 8;
                      if (v145 == v143)
                      {
                        v145 = *(char **)(*(void *)a3 + 304);
                        break;
                      }
                    }
                  }
                  if (v146 - v144 >= v145 - v144)
                  {
LABEL_238:
                    uint64_t v228 = *(void *)(v140 + 16);
                    long long v220 = *(_OWORD *)v140;
                    long long v237 = *(_OWORD *)(v140 + 32);
                    long long v147 = *(_OWORD *)v133;
                    long long v148 = *(_OWORD *)(v133 + 16);
                    *(_OWORD *)(v140 + 27) = *(_OWORD *)(v133 + 27);
                    *(_OWORD *)unint64_t v140 = v147;
                    *(_OWORD *)(v140 + 16) = v148;
                    if (v129 >= v132)
                    {
                      while (1)
                      {
                        uint64_t v150 = 2 * v132;
                        uint64_t v132 = (2 * v132) | 1;
                        unint64_t v149 = v13 + 48 * v132;
                        uint64_t v151 = v150 + 2;
                        if (v151 < (uint64_t)v15)
                        {
                          uint64_t v152 = *(void *)(v149 + 24);
                          uint64_t v153 = *(void *)(v149 + 72);
                          if (v152 != v153)
                          {
                            v154 = *(char **)(*(void *)a3 + 296);
                            v155 = *(char **)(*(void *)a3 + 304);
                            v156 = v154;
                            v157 = v154;
                            if (v154 != v155)
                            {
                              do
                              {
                                if (*(void *)v157 == v152) {
                                  goto LABEL_246;
                                }
                                v157 += 8;
                              }
                              while (v157 != v155);
                              v157 = *(char **)(*(void *)a3 + 304);
LABEL_246:
                              while (*(void *)v156 != v153)
                              {
                                v156 += 8;
                                if (v156 == v155)
                                {
                                  v156 = *(char **)(*(void *)a3 + 304);
                                  break;
                                }
                              }
                            }
                            v149 += 48 * (v157 - v154 < v156 - v154);
                            if (v157 - v154 < v156 - v154) {
                              uint64_t v132 = v151;
                            }
                          }
                        }
                        uint64_t v158 = *(void *)(v149 + 24);
                        if (v158 != v142)
                        {
                          v160 = *(char **)(*(void *)a3 + 296);
                          v159 = *(char **)(*(void *)a3 + 304);
                          v161 = v160;
                          v162 = v160;
                          if (v160 != v159)
                          {
                            do
                            {
                              if (*(void *)v162 == v158) {
                                goto LABEL_256;
                              }
                              v162 += 8;
                            }
                            while (v162 != v159);
                            v162 = *(char **)(*(void *)a3 + 304);
LABEL_256:
                            while (*(void *)v161 != v142)
                            {
                              v161 += 8;
                              if (v161 == v159)
                              {
                                v161 = *(char **)(*(void *)a3 + 304);
                                break;
                              }
                            }
                          }
                          if (v162 - v160 < v161 - v160) {
                            break;
                          }
                        }
                        long long v163 = *(_OWORD *)v149;
                        long long v164 = *(_OWORD *)(v149 + 16);
                        *(_OWORD *)(v133 + 27) = *(_OWORD *)(v149 + 27);
                        *(_OWORD *)unint64_t v133 = v163;
                        *(_OWORD *)(v133 + 16) = v164;
                        unint64_t v133 = v149;
                        if (v129 < v132) {
                          goto LABEL_261;
                        }
                      }
                    }
                    unint64_t v149 = v133;
LABEL_261:
                    *(_OWORD *)unint64_t v149 = v220;
                    *(void *)(v149 + 16) = v228;
                    *(void *)(v149 + 24) = v142;
                    *(void *)(v149 + 32) = v237;
                    *(_DWORD *)(v149 + 39) = *(_DWORD *)((char *)&v237 + 7);
                  }
                }
                int64_t v130 = v131 - 1;
              }
              while (v131);
              int64_t v165 = v14 / 0x30uLL;
              do
              {
                uint64_t v166 = 0;
                *(_OWORD *)v229 = *(_OWORD *)(v13 + 16);
                *(_OWORD *)&v229[16] = *(_OWORD *)(v13 + 32);
                long long v221 = *(_OWORD *)v13;
                uint64_t v167 = v165 - 2;
                if (v165 < 2) {
                  uint64_t v167 = v165 - 1;
                }
                uint64_t v168 = v167 >> 1;
                unint64_t v169 = v13;
                do
                {
                  v170 = (_OWORD *)v169;
                  v169 += 48 * v166 + 48;
                  uint64_t v171 = 2 * v166;
                  uint64_t v166 = (2 * v166) | 1;
                  uint64_t v172 = v171 + 2;
                  if (v171 + 2 < v165)
                  {
                    uint64_t v173 = *(void *)(v169 + 24);
                    uint64_t v174 = *(void *)(v169 + 72);
                    if (v173 != v174)
                    {
                      v176 = *(char **)(*(void *)a3 + 296);
                      v175 = *(char **)(*(void *)a3 + 304);
                      v177 = v176;
                      v178 = v176;
                      if (v176 != v175)
                      {
                        do
                        {
                          if (*(void *)v178 == v173) {
                            goto LABEL_273;
                          }
                          v178 += 8;
                        }
                        while (v178 != v175);
                        v178 = *(char **)(*(void *)a3 + 304);
LABEL_273:
                        while (*(void *)v177 != v174)
                        {
                          v177 += 8;
                          if (v177 == v175)
                          {
                            v177 = *(char **)(*(void *)a3 + 304);
                            break;
                          }
                        }
                      }
                      v169 += 48 * (v178 - v176 < v177 - v176);
                      if (v178 - v176 < v177 - v176) {
                        uint64_t v166 = v172;
                      }
                    }
                  }
                  long long v179 = *(_OWORD *)v169;
                  long long v180 = *(_OWORD *)(v169 + 16);
                  *(_OWORD *)((char *)v170 + 27) = *(_OWORD *)(v169 + 27);
                  _OWORD *v170 = v179;
                  v170[1] = v180;
                }
                while (v166 <= v168);
                a2 -= 3;
                if ((long long *)v169 == a2)
                {
                  *(_OWORD *)(v169 + 27) = *(_OWORD *)&v229[11];
                  *(_OWORD *)unint64_t v169 = v221;
                  *(_OWORD *)(v169 + 16) = *(_OWORD *)v229;
                }
                else
                {
                  long long v181 = *a2;
                  long long v182 = a2[1];
                  *(_OWORD *)(v169 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v169 = v181;
                  *(_OWORD *)(v169 + 16) = v182;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v229[11];
                  *a2 = v221;
                  a2[1] = *(_OWORD *)v229;
                  uint64_t v183 = v169 - v13 + 48;
                  if (v183 >= 49)
                  {
                    unint64_t v184 = (v183 / 0x30uLL - 2) >> 1;
                    unint64_t v185 = v13 + 48 * v184;
                    uint64_t v186 = *(void *)(v185 + 24);
                    uint64_t v187 = *(void *)(v169 + 24);
                    if (v186 != v187)
                    {
                      v189 = *(char **)(*(void *)a3 + 296);
                      v188 = *(char **)(*(void *)a3 + 304);
                      v190 = v189;
                      v191 = v189;
                      if (v189 != v188)
                      {
                        do
                        {
                          if (*(void *)v191 == v186) {
                            goto LABEL_286;
                          }
                          v191 += 8;
                        }
                        while (v191 != v188);
                        v191 = *(char **)(*(void *)a3 + 304);
LABEL_286:
                        while (*(void *)v190 != v187)
                        {
                          v190 += 8;
                          if (v190 == v188)
                          {
                            v190 = *(char **)(*(void *)a3 + 304);
                            break;
                          }
                        }
                      }
                      if (v191 - v189 < v190 - v189)
                      {
                        uint64_t v242 = *(void *)(v169 + 16);
                        long long v238 = *(_OWORD *)v169;
                        long long v233 = *(_OWORD *)(v169 + 32);
                        do
                        {
                          v192 = (_OWORD *)v169;
                          unint64_t v169 = v185;
                          long long v193 = *(_OWORD *)v185;
                          long long v194 = *(_OWORD *)(v185 + 16);
                          *(_OWORD *)((char *)v192 + 27) = *(_OWORD *)(v185 + 27);
                          _OWORD *v192 = v193;
                          v192[1] = v194;
                          if (!v184) {
                            break;
                          }
                          unint64_t v184 = (v184 - 1) >> 1;
                          unint64_t v185 = v13 + 48 * v184;
                          uint64_t v195 = *(void *)(v185 + 24);
                          if (v195 == v187) {
                            break;
                          }
                          v197 = *(char **)(*(void *)a3 + 296);
                          v196 = *(char **)(*(void *)a3 + 304);
                          v198 = v197;
                          v199 = v197;
                          if (v197 != v196)
                          {
                            do
                            {
                              if (*(void *)v199 == v195) {
                                goto LABEL_297;
                              }
                              v199 += 8;
                            }
                            while (v199 != v196);
                            v199 = *(char **)(*(void *)a3 + 304);
LABEL_297:
                            while (*(void *)v198 != v187)
                            {
                              v198 += 8;
                              if (v198 == v196)
                              {
                                v198 = *(char **)(*(void *)a3 + 304);
                                break;
                              }
                            }
                          }
                        }
                        while (v199 - v197 < v198 - v197);
                        *(_OWORD *)unint64_t v169 = v238;
                        *(void *)(v169 + 16) = v242;
                        *(void *)(v169 + 24) = v187;
                        *(void *)(v169 + 32) = v233;
                        *(_DWORD *)(v169 + 39) = *(_DWORD *)((char *)&v233 + 7);
                      }
                    }
                  }
                }
              }
              while (v165-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          double v17 = (long long *)(v13 + 48 * (v15 >> 1));
          if ((unint64_t)v14 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v15 >> 1)), a2 - 3, a3);
            uint64_t v18 = 3 * v16;
            char v19 = (long long *)(a1 + 48 * v16 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)(a1 + 48), v19, a2 - 6, a3);
            uint64_t v20 = (long long *)(a1 + 48 + 16 * v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)(a1 + 96), v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>(v19, v17, v20, a3);
            *(_OWORD *)v223 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v223[16] = *(_OWORD *)(a1 + 32);
            long long v216 = *(_OWORD *)a1;
            long long v21 = *(long long *)((char *)v17 + 27);
            long long v22 = v17[1];
            *(_OWORD *)a1 = *v17;
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(a1 + 27) = v21;
            *(long long *)((char *)v17 + 27) = *(_OWORD *)&v223[11];
            long long *v17 = v216;
            v17[1] = *(_OWORD *)v223;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)(a1 + 48 * (v15 >> 1)), (long long *)a1, a2 - 3, a3);
          }
          --a4;
          if (a5)
          {
            uint64_t v23 = *(void *)(a1 + 24);
            uint64_t v24 = *(void *)a3;
            break;
          }
          uint64_t v25 = *(void *)(a1 - 24);
          uint64_t v23 = *(void *)(a1 + 24);
          if (v25 != v23)
          {
            uint64_t v24 = *(void *)a3;
            double v26 = *(char **)(*(void *)a3 + 296);
            double v27 = *(char **)(*(void *)a3 + 304);
            int v28 = v26;
            double v29 = v26;
            if (v26 != v27)
            {
              do
              {
                if (*(void *)v29 == v25) {
                  goto LABEL_16;
                }
                v29 += 8;
              }
              while (v29 != v27);
              double v29 = *(char **)(*(void *)a3 + 304);
LABEL_16:
              while (*(void *)v28 != v23)
              {
                v28 += 8;
                if (v28 == v27)
                {
                  int v28 = *(char **)(*(void *)a3 + 304);
                  break;
                }
              }
            }
            if (v29 - v26 < v28 - v26) {
              break;
            }
          }
          uint64_t v241 = *(void *)(a1 + 16);
          long long v232 = *(_OWORD *)(a1 + 32);
          long long v235 = *(_OWORD *)a1;
          uint64_t v67 = *((void *)a2 - 3);
          if (v23 == v67) {
            goto LABEL_107;
          }
          long long v68 = *(char **)(*(void *)a3 + 296);
          long long v69 = *(char **)(*(void *)a3 + 304);
          if (v68 == v69)
          {
            unint64_t v71 = *(char **)(*(void *)a3 + 296);
            unint64_t v70 = v71;
          }
          else
          {
            unint64_t v70 = *(char **)(*(void *)a3 + 296);
            while (*(void *)v70 != v23)
            {
              v70 += 8;
              if (v70 == v69)
              {
                unint64_t v70 = *(char **)(*(void *)a3 + 304);
                break;
              }
            }
            unint64_t v71 = *(char **)(*(void *)a3 + 296);
            while (*(void *)v71 != v67)
            {
              v71 += 8;
              if (v71 == v69)
              {
                unint64_t v71 = *(char **)(*(void *)a3 + 304);
                break;
              }
            }
          }
          if (v70 - v68 >= v71 - v68)
          {
LABEL_107:
            unint64_t v13 = a1 + 48;
            if (a1 + 48 < (unint64_t)a2)
            {
              uint64_t v75 = *(void *)a3;
              unint64_t v76 = a1;
              do
              {
                uint64_t v77 = *(void *)(v76 + 72);
                unint64_t v76 = v13;
                if (v23 != v77)
                {
                  long long v78 = *(char **)(v75 + 296);
                  long long v79 = *(char **)(v75 + 304);
                  long long v80 = v78;
                  BOOL v81 = v78;
                  if (v78 != v79)
                  {
                    do
                    {
                      if (*(void *)v81 == v23) {
                        goto LABEL_114;
                      }
                      v81 += 8;
                    }
                    while (v81 != v79);
                    BOOL v81 = *(char **)(v75 + 304);
LABEL_114:
                    while (*(void *)v80 != v77)
                    {
                      v80 += 8;
                      if (v80 == v79)
                      {
                        long long v80 = *(char **)(v75 + 304);
                        break;
                      }
                    }
                  }
                  if (v81 - v78 < v80 - v78) {
                    break;
                  }
                }
                v13 += 48;
              }
              while (v76 + 48 < (unint64_t)a2);
            }
          }
          else
          {
            unint64_t v13 = a1;
            do
            {
              do
              {
                uint64_t v72 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v72);
              if (v68 == v69)
              {
                uint64_t v74 = *(char **)(*(void *)a3 + 296);
                unint64_t v73 = v74;
              }
              else
              {
                unint64_t v73 = *(char **)(*(void *)a3 + 296);
                while (*(void *)v73 != v23)
                {
                  v73 += 8;
                  if (v73 == v69)
                  {
                    unint64_t v73 = *(char **)(*(void *)a3 + 304);
                    break;
                  }
                }
                uint64_t v74 = *(char **)(*(void *)a3 + 296);
                while (*(void *)v74 != v72)
                {
                  v74 += 8;
                  if (v74 == v69)
                  {
                    uint64_t v74 = *(char **)(*(void *)a3 + 304);
                    break;
                  }
                }
              }
            }
            while (v73 - v68 >= v74 - v68);
          }
          unint64_t v82 = a2;
          if (v13 < (unint64_t)a2)
          {
            uint64_t v83 = *(void *)a3;
            unint64_t v82 = a2;
            do
            {
              uint64_t v84 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v84) {
                break;
              }
              long long v85 = *(char **)(v83 + 296);
              long long v86 = *(char **)(v83 + 304);
              long long v87 = v85;
              uint64_t v88 = v85;
              if (v85 != v86)
              {
                do
                {
                  if (*(void *)v88 == v23) {
                    goto LABEL_126;
                  }
                  v88 += 8;
                }
                while (v88 != v86);
                uint64_t v88 = *(char **)(v83 + 304);
LABEL_126:
                while (*(void *)v87 != v84)
                {
                  v87 += 8;
                  if (v87 == v86)
                  {
                    long long v87 = *(char **)(v83 + 304);
                    break;
                  }
                }
              }
            }
            while (v88 - v85 < v87 - v85);
          }
          while (v13 < (unint64_t)v82)
          {
            *(_OWORD *)v225 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v225[16] = *(_OWORD *)(v13 + 32);
            long long v217 = *(_OWORD *)v13;
            long long v89 = *v82;
            long long v90 = v82[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v82 + 27);
            *(_OWORD *)unint64_t v13 = v89;
            *(_OWORD *)(v13 + 16) = v90;
            *(long long *)((char *)v82 + 27) = *(_OWORD *)&v225[11];
            *unint64_t v82 = v217;
            v82[1] = *(_OWORD *)v225;
            uint64_t v91 = *(void *)a3;
            do
            {
              do
              {
                uint64_t v92 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v92);
              int8x16_t v93 = *(char **)(v91 + 296);
              uint64_t v94 = *(char **)(v91 + 304);
              if (v93 == v94)
              {
                double v96 = *(char **)(v91 + 296);
                BOOL v95 = v96;
              }
              else
              {
                BOOL v95 = *(char **)(v91 + 296);
                while (*(void *)v95 != v23)
                {
                  v95 += 8;
                  if (v95 == v94)
                  {
                    BOOL v95 = *(char **)(v91 + 304);
                    break;
                  }
                }
                double v96 = *(char **)(v91 + 296);
                while (*(void *)v96 != v92)
                {
                  v96 += 8;
                  if (v96 == v94)
                  {
                    double v96 = *(char **)(v91 + 304);
                    break;
                  }
                }
              }
            }
            while (v95 - v93 >= v96 - v93);
            do
            {
              uint64_t v97 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v97) {
                break;
              }
              if (v93 == v94)
              {
                id v99 = v93;
                id v98 = v93;
              }
              else
              {
                id v98 = v93;
                while (*(void *)v98 != v23)
                {
                  v98 += 8;
                  if (v98 == v94)
                  {
                    id v98 = v94;
                    break;
                  }
                }
                id v99 = v93;
                while (*(void *)v99 != v97)
                {
                  v99 += 8;
                  if (v99 == v94)
                  {
                    id v99 = v94;
                    break;
                  }
                }
              }
            }
            while (v98 - v93 < v99 - v93);
          }
          id v100 = (long long *)(v13 - 48);
          BOOL v5 = v13 - 48 >= a1;
          BOOL v6 = v13 - 48 == a1;
          if (v13 - 48 != a1)
          {
            long long v101 = *v100;
            long long v102 = *(_OWORD *)(v13 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
            *(_OWORD *)a1 = v101;
            *(_OWORD *)(a1 + 16) = v102;
          }
          a5 = 0;
          *id v100 = v235;
          *(void *)(v13 - 32) = v241;
          *(void *)(v13 - 24) = v23;
          *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v232 + 7);
          *(void *)(v13 - 16) = v232;
        }
        uint64_t v240 = *(void *)(a1 + 16);
        long long v231 = *(_OWORD *)(a1 + 32);
        long long v234 = *(_OWORD *)a1;
        unint64_t v30 = a1;
        do
        {
          unint64_t v31 = v30;
          v30 += 48;
          uint64_t v32 = *(void *)(v31 + 72);
          if (v32 == v23) {
            break;
          }
          uint64_t v33 = *(char **)(v24 + 296);
          double v34 = *(char **)(v24 + 304);
          double v35 = v33;
          long long v36 = v33;
          if (v33 != v34)
          {
            do
            {
              if (*(void *)v36 == v32) {
                goto LABEL_26;
              }
              v36 += 8;
            }
            while (v36 != v34);
            long long v36 = *(char **)(v24 + 304);
LABEL_26:
            while (*(void *)v35 != v23)
            {
              v35 += 8;
              if (v35 == v34)
              {
                double v35 = *(char **)(v24 + 304);
                break;
              }
            }
          }
        }
        while (v36 - v33 < v35 - v33);
        double v37 = a2;
        if (v31 == a1)
        {
          double v37 = a2;
          if (v30 < (unint64_t)a2)
          {
            double v37 = a2;
            do
            {
              uint64_t v43 = *((void *)v37 - 3);
              v37 -= 3;
              if (v43 != v23)
              {
                unint64_t v44 = *(char **)(v24 + 296);
                unint64_t v45 = *(char **)(v24 + 304);
                uint8x8_t v46 = v44;
                long long v47 = v44;
                if (v44 != v45)
                {
                  do
                  {
                    if (*(void *)v47 == v43) {
                      goto LABEL_48;
                    }
                    v47 += 8;
                  }
                  while (v47 != v45);
                  long long v47 = *(char **)(v24 + 304);
LABEL_48:
                  while (*(void *)v46 != v23)
                  {
                    v46 += 8;
                    if (v46 == v45)
                    {
                      uint8x8_t v46 = *(char **)(v24 + 304);
                      break;
                    }
                  }
                }
                if (v47 - v44 < v46 - v44) {
                  break;
                }
              }
            }
            while (v30 < (unint64_t)v37);
          }
        }
        else
        {
          do
          {
            do
            {
              uint64_t v38 = *((void *)v37 - 3);
              v37 -= 3;
            }
            while (v38 == v23);
            double v39 = *(char **)(v24 + 296);
            double v40 = *(char **)(v24 + 304);
            double v41 = v39;
            uint64_t v42 = v39;
            if (v39 != v40)
            {
              do
              {
                if (*(void *)v42 == v38) {
                  goto LABEL_36;
                }
                v42 += 8;
              }
              while (v42 != v40);
              uint64_t v42 = *(char **)(v24 + 304);
LABEL_36:
              while (*(void *)v41 != v23)
              {
                v41 += 8;
                if (v41 == v40)
                {
                  double v41 = *(char **)(v24 + 304);
                  break;
                }
              }
            }
          }
          while (v42 - v39 >= v41 - v39);
        }
        unint64_t v13 = v30;
        if (v30 < (unint64_t)v37)
        {
          long long v48 = v37;
          do
          {
            *(_OWORD *)v224 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v224[16] = *(_OWORD *)(v13 + 32);
            long long v49 = *(_OWORD *)v13;
            long long v51 = *v48;
            long long v50 = v48[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v48 + 27);
            *(_OWORD *)unint64_t v13 = v51;
            *(_OWORD *)(v13 + 16) = v50;
            *(long long *)((char *)v48 + 27) = *(_OWORD *)&v224[11];
            long long *v48 = v49;
            v48[1] = *(_OWORD *)v224;
            uint64_t v52 = *(void *)a3;
            do
            {
              uint64_t v53 = *(void *)(v13 + 72);
              v13 += 48;
              if (v53 == v23) {
                break;
              }
              BOOL v54 = *(char **)(v52 + 296);
              BOOL v55 = *(char **)(v52 + 304);
              unint64_t v56 = v54;
              unint64_t v57 = v54;
              if (v54 != v55)
              {
                do
                {
                  if (*(void *)v57 == v53) {
                    goto LABEL_61;
                  }
                  v57 += 8;
                }
                while (v57 != v55);
                unint64_t v57 = *(char **)(v52 + 304);
LABEL_61:
                while (*(void *)v56 != v23)
                {
                  v56 += 8;
                  if (v56 == v55)
                  {
                    unint64_t v56 = *(char **)(v52 + 304);
                    break;
                  }
                }
              }
            }
            while (v57 - v54 < v56 - v54);
            do
            {
              do
              {
                uint64_t v58 = *((void *)v48 - 3);
                v48 -= 3;
              }
              while (v58 == v23);
              double v59 = *(char **)(v52 + 296);
              uint64_t v60 = *(char **)(v52 + 304);
              uint64_t v61 = v59;
              char v62 = v59;
              if (v59 != v60)
              {
                do
                {
                  if (*(void *)v62 == v58) {
                    goto LABEL_70;
                  }
                  v62 += 8;
                }
                while (v62 != v60);
                char v62 = *(char **)(v52 + 304);
LABEL_70:
                while (*(void *)v61 != v23)
                {
                  v61 += 8;
                  if (v61 == v60)
                  {
                    uint64_t v61 = *(char **)(v52 + 304);
                    break;
                  }
                }
              }
            }
            while (v62 - v59 >= v61 - v59);
          }
          while (v13 < (unint64_t)v48);
        }
        uint64_t v63 = (long long *)(v13 - 48);
        if (v13 - 48 != a1)
        {
          long long v64 = *v63;
          long long v65 = *(_OWORD *)(v13 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
          *(_OWORD *)a1 = v64;
          *(_OWORD *)(a1 + 16) = v65;
        }
        long long *v63 = v234;
        *(void *)(v13 - 32) = v240;
        *(void *)(v13 - 24) = v23;
        *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v231 + 7);
        *(void *)(v13 - 16) = v231;
        if (v30 >= (unint64_t)v37) {
          break;
        }
LABEL_80:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder*,false>(a1, v13 - 48, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder*>(a1, v13 - 48, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder*>(v13, (uint64_t)a2, a3))
      {
        break;
      }
      if (!v66) {
        goto LABEL_80;
      }
    }
    a2 = (long long *)(v13 - 48);
    if (!v66) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 - 24);
      uint64_t v9 = *(void *)(a1 + 24);
      if (v8 == v9) {
        return result;
      }
      id v10 = *(char **)(*(void *)a3 + 296);
      int v11 = *(char **)(*(void *)a3 + 304);
      unint64_t v12 = v10;
      unint64_t v13 = v10;
      if (v10 == v11) {
        goto LABEL_10;
      }
      do
      {
        if (*(void *)v13 == v8) {
          goto LABEL_7;
        }
        v13 += 8;
      }
      while (v13 != v11);
      unint64_t v13 = *(char **)(*(void *)a3 + 304);
      do
      {
LABEL_7:
        if (*(void *)v12 == v9) {
          goto LABEL_10;
        }
        v12 += 8;
      }
      while (v12 != v11);
      unint64_t v12 = *(char **)(*(void *)a3 + 304);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        uint64_t v14 = (long long *)(a2 - 48);
        long long v15 = *(_OWORD *)a1;
        *(_OWORD *)double v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        long long v16 = *(_OWORD *)(a2 - 21);
        long long v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *uint64_t v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(long long *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), a3);
      uint64_t v19 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      int v20 = 0;
      break;
  }
  while (1)
  {
    uint64_t v21 = *(void *)(v19 + 24);
    uint64_t v22 = *(void *)(v18 + 24);
    if (v21 != v22)
    {
      uint64_t v23 = *(char **)(*(void *)a3 + 296);
      uint64_t v24 = *(char **)(*(void *)a3 + 304);
      uint64_t v25 = v23;
      double v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(void *)v26 == v21) {
            goto LABEL_19;
          }
          v26 += 8;
        }
        while (v26 != v24);
        double v26 = *(char **)(*(void *)a3 + 304);
LABEL_19:
        while (*(void *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            uint64_t v25 = *(char **)(*(void *)a3 + 304);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        long long v34 = *(_OWORD *)v19;
        uint64_t v36 = *(void *)(v19 + 16);
        long long v37 = *(_OWORD *)(v19 + 32);
        uint64_t v27 = v19;
        while (1)
        {
          long long v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1) {
            break;
          }
          uint64_t v27 = v18;
          uint64_t v29 = *(void *)(v18 - 24);
          if (v21 != v29)
          {
            unint64_t v30 = *(char **)(*(void *)a3 + 296);
            unint64_t v31 = *(char **)(*(void *)a3 + 304);
            uint64_t v32 = v30;
            uint64_t v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(void *)v33 == v21) {
                  goto LABEL_30;
                }
                v33 += 8;
              }
              while (v33 != v31);
              uint64_t v33 = *(char **)(*(void *)a3 + 304);
LABEL_30:
              while (*(void *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  uint64_t v32 = *(char **)(*(void *)a3 + 304);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30) {
              continue;
            }
          }
          goto LABEL_36;
        }
        uint64_t v27 = a1;
LABEL_36:
        *(_OWORD *)uint64_t v27 = v34;
        *(void *)(v27 + 16) = v36;
        *(void *)(v27 + 24) = v21;
        *(void *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8) {
          return v19 + 48 == a2;
        }
      }
    }
    uint64_t v18 = v19;
    v19 += 48;
    if (v19 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v10) >> 4);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*((double *)a2 - 5) < *(double *)(v10 + 8))
                {
                  *(_OWORD *)long long v118 = *(_OWORD *)(v10 + 16);
                  *(_OWORD *)&v118[16] = *(_OWORD *)(v10 + 32);
                  long long v110 = *(_OWORD *)v10;
                  long long v52 = *(a2 - 3);
                  long long v53 = *(a2 - 2);
                  *(_OWORD *)(v10 + 27) = *(long long *)((char *)a2 - 21);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(long long *)((char *)a2 - 21) = *(_OWORD *)&v118[11];
                  *(a2 - 3) = v110;
                  *(a2 - 2) = *(_OWORD *)v118;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)v10, (long long *)(v10 + 48), a2 - 3);
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v10, v10 + 48, v10 + 96, (uint64_t)(a2 - 3));
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v10, v10 + 48, v10 + 96, v10 + 144, (uint64_t)(a2 - 3));
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 1151)
          {
            BOOL v54 = (long long *)(v10 + 48);
            BOOL v56 = (long long *)v10 == a2 || v54 == a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  double v59 = v54;
                  double v60 = *(double *)(v58 + 56);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *(void *)v54;
                    *(_OWORD *)long long v111 = *(_OWORD *)(v58 + 64);
                    *(_OWORD *)&v111[16] = *(_OWORD *)(v58 + 80);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      uint64_t v63 = (_OWORD *)(v10 + v62);
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      v63[3] = *(_OWORD *)(v10 + v62);
                      v63[4] = v64;
                      *(_OWORD *)((char *)v63 + 75) = *(_OWORD *)(v10 + v62 + 27);
                      if (!v62) {
                        break;
                      }
                      v62 -= 48;
                      if (v60 >= *((double *)v63 - 5))
                      {
                        uint64_t v65 = v10 + v62 + 48;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = *(_OWORD *)v111;
                    *(_OWORD *)(v65 + 27) = *(_OWORD *)&v111[11];
                  }
                  BOOL v54 = v59 + 3;
                  v57 += 48;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 3 != a2);
              }
            }
            else if (!v56)
            {
              do
              {
                id v98 = v54;
                double v99 = *(double *)(a1 + 56);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *(void *)v54;
                  *(_OWORD *)unint64_t v114 = *(_OWORD *)(a1 + 64);
                  *(_OWORD *)&v114[16] = *(_OWORD *)(a1 + 80);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(v101 - 2);
                    long long *v101 = *(v101 - 3);
                    v101[1] = v102;
                    *(long long *)((char *)v101 + 27) = *(long long *)((char *)v101 - 21);
                    double v103 = *((double *)v101 - 11);
                    v101 -= 3;
                  }
                  while (v99 < v103);
                  *(void *)long long v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *(long long *)((char *)v101 + 27) = *(_OWORD *)&v114[11];
                  v101[1] = *(_OWORD *)v114;
                }
                v54 += 3;
                a1 = (unint64_t)v98;
              }
              while (v98 + 3 != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((long long *)v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 48 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v70 + 8) < *(double *)(v70 + 56))
                  {
                    v70 += 48;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  unint64_t v71 = v10 + 48 * v68;
                  double v72 = *(double *)(v71 + 8);
                  if (*(double *)(v70 + 8) >= v72)
                  {
                    uint64_t v73 = *(void *)v71;
                    *(_OWORD *)long long v112 = *(_OWORD *)(v71 + 16);
                    *(_OWORD *)&v112[16] = *(_OWORD *)(v71 + 32);
                    do
                    {
                      uint64_t v74 = (_OWORD *)v71;
                      unint64_t v71 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_OWORD *)((char *)v74 + 27) = *(_OWORD *)(v70 + 27);
                      *uint64_t v74 = v75;
                      v74[1] = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = 2 * v69;
                      uint64_t v69 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 48 * v69;
                      uint64_t v78 = v77 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v70 + 8) < *(double *)(v70 + 56))
                      {
                        v70 += 48;
                        uint64_t v69 = v78;
                      }
                    }
                    while (*(double *)(v70 + 8) >= v72);
                    *(void *)unint64_t v71 = v73;
                    *(double *)(v71 + 8) = v72;
                    *(_OWORD *)(v71 + 16) = *(_OWORD *)v112;
                    *(_OWORD *)(v71 + 27) = *(_OWORD *)&v112[11];
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x30uLL;
              do
              {
                uint64_t v80 = 0;
                *(_OWORD *)uint64_t v119 = *(_OWORD *)(v10 + 16);
                *(_OWORD *)&v119[16] = *(_OWORD *)(v10 + 32);
                long long v113 = *(_OWORD *)v10;
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = (_OWORD *)v81;
                  v81 += 48 * v80 + 48;
                  uint64_t v83 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v84 = v83 + 2;
                  if (v84 < v79 && *(double *)(v81 + 8) < *(double *)(v81 + 56))
                  {
                    v81 += 48;
                    uint64_t v80 = v84;
                  }
                  long long v85 = *(_OWORD *)v81;
                  long long v86 = *(_OWORD *)(v81 + 16);
                  *(_OWORD *)((char *)v82 + 27) = *(_OWORD *)(v81 + 27);
                  *unint64_t v82 = v85;
                  v82[1] = v86;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 3;
                if ((long long *)v81 == a2)
                {
                  *(_OWORD *)(v81 + 27) = *(_OWORD *)&v119[11];
                  *(_OWORD *)unint64_t v81 = v113;
                  *(_OWORD *)(v81 + 16) = *(_OWORD *)v119;
                }
                else
                {
                  long long v87 = *a2;
                  long long v88 = a2[1];
                  *(_OWORD *)(v81 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v81 = v87;
                  *(_OWORD *)(v81 + 16) = v88;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v119[11];
                  *a2 = v113;
                  a2[1] = *(_OWORD *)v119;
                  uint64_t v89 = v81 - v10 + 48;
                  if (v89 >= 49)
                  {
                    unint64_t v90 = (v89 / 0x30uLL - 2) >> 1;
                    unint64_t v91 = v10 + 48 * v90;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      *(_OWORD *)uint64_t v106 = *(_OWORD *)(v81 + 16);
                      *(_OWORD *)&v106[16] = *(_OWORD *)(v81 + 32);
                      do
                      {
                        uint64_t v94 = (_OWORD *)v81;
                        unint64_t v81 = v91;
                        long long v95 = *(_OWORD *)v91;
                        long long v96 = *(_OWORD *)(v91 + 16);
                        *(_OWORD *)((char *)v94 + 27) = *(_OWORD *)(v91 + 27);
                        *uint64_t v94 = v95;
                        v94[1] = v96;
                        if (!v90) {
                          break;
                        }
                        unint64_t v90 = (v90 - 1) >> 1;
                        unint64_t v91 = v10 + 48 * v90;
                      }
                      while (*(double *)(v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_OWORD *)(v81 + 16) = *(_OWORD *)v106;
                      *(_OWORD *)(v81 + 27) = *(_OWORD *)&v106[11];
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (long long *)(v10 + 48 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v12 >> 1)), a2 - 3);
            uint64_t v15 = 3 * v13;
            long long v16 = (long long *)(a1 + 48 * v13 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48), v16, a2 - 6);
            long long v17 = (long long *)(a1 + 48 + 16 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 96), v17, a2 - 9);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v16, v14, v17);
            *(_OWORD *)unint64_t v115 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v115[16] = *(_OWORD *)(a1 + 32);
            long long v107 = *(_OWORD *)a1;
            long long v18 = *(long long *)((char *)v14 + 27);
            long long v19 = v14[1];
            *(_OWORD *)a1 = *v14;
            *(_OWORD *)(a1 + 16) = v19;
            *(_OWORD *)(a1 + 27) = v18;
            *(long long *)((char *)v14 + 27) = *(_OWORD *)&v115[11];
            *uint64_t v14 = v107;
            v14[1] = *(_OWORD *)v115;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48 * (v12 >> 1)), (long long *)a1, a2 - 3);
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 40) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          *(_OWORD *)long long v105 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)&v105[16] = *(_OWORD *)(a1 + 32);
          if (v20 >= *((double *)a2 - 5))
          {
            unint64_t v41 = a1 + 48;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= (unint64_t)a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 48;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 48;
              double v40 = *(double *)(v39 + 56);
              v39 += 48;
            }
            while (v20 >= v40);
          }
          uint64_t v43 = a2;
          if (v10 < (unint64_t)a2)
          {
            unint64_t v44 = a2;
            do
            {
              uint64_t v43 = v44 - 3;
              double v45 = *((double *)v44 - 5);
              v44 -= 3;
            }
            while (v20 < v45);
          }
          while (v10 < (unint64_t)v43)
          {
            *(_OWORD *)uint64_t v117 = *(_OWORD *)(v10 + 16);
            *(_OWORD *)&v117[16] = *(_OWORD *)(v10 + 32);
            long long v109 = *(_OWORD *)v10;
            long long v46 = *v43;
            long long v47 = v43[1];
            *(_OWORD *)(v10 + 27) = *(long long *)((char *)v43 + 27);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(long long *)((char *)v43 + 27) = *(_OWORD *)&v117[11];
            *uint64_t v43 = v109;
            v43[1] = *(_OWORD *)v117;
            do
            {
              double v48 = *(double *)(v10 + 56);
              v10 += 48;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *((double *)v43 - 5);
              v43 -= 3;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 48 >= a1;
          BOOL v5 = v10 - 48 == a1;
          if (v10 - 48 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 48);
            long long v51 = *(_OWORD *)(v10 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v10 - 21);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 48) = v38;
          *(double *)(v10 - 40) = v20;
          *(_OWORD *)(v10 - 21) = *(_OWORD *)&v105[11];
          *(_OWORD *)(v10 - 32) = *(_OWORD *)v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        *(_OWORD *)uint64_t v104 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v104[16] = *(_OWORD *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 56);
          v21 += 48;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        uint64_t v25 = a2;
        if (v21 == 48)
        {
          long long v28 = a2;
          while (v24 < (unint64_t)v28)
          {
            double v26 = v28 - 3;
            double v29 = *((double *)v28 - 5);
            v28 -= 3;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          double v26 = v28;
        }
        else
        {
          do
          {
            double v26 = v25 - 3;
            double v27 = *((double *)v25 - 5);
            v25 -= 3;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < (unint64_t)v26)
        {
          unint64_t v30 = v26;
          do
          {
            *(_OWORD *)uint64_t v116 = *(_OWORD *)(v10 + 16);
            *(_OWORD *)&v116[16] = *(_OWORD *)(v10 + 32);
            long long v108 = *(_OWORD *)v10;
            long long v31 = *v30;
            long long v32 = v30[1];
            *(_OWORD *)(v10 + 27) = *(long long *)((char *)v30 + 27);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(long long *)((char *)v30 + 27) = *(_OWORD *)&v116[11];
            *unint64_t v30 = v108;
            v30[1] = *(_OWORD *)v116;
            do
            {
              double v33 = *(double *)(v10 + 56);
              v10 += 48;
            }
            while (v33 < v20);
            do
            {
              double v34 = *((double *)v30 - 5);
              v30 -= 3;
            }
            while (v34 >= v20);
          }
          while (v10 < (unint64_t)v30);
        }
        if (v10 - 48 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 48);
          long long v36 = *(_OWORD *)(v10 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v10 - 21);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 48) = v22;
        *(double *)(v10 - 40) = v20;
        *(_OWORD *)(v10 - 21) = *(_OWORD *)&v104[11];
        *(_OWORD *)(v10 - 32) = *(_OWORD *)v104;
        if (v24 >= (unint64_t)v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder*,false>(a1, v10 - 48, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder*>(a1, v10 - 48);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder*>(v10, (uint64_t)a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = (long long *)(v10 - 48);
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 40) < *(double *)(a1 + 8))
      {
        long long v6 = *(_OWORD *)a1;
        *(_OWORD *)double v20 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v20[16] = *(_OWORD *)(a1 + 32);
        long long v7 = *(_OWORD *)(a2 - 21);
        long long v8 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 27) = v7;
        *(_OWORD *)(a2 - 48) = v6;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v20;
        *(_OWORD *)(a2 - 21) = *(_OWORD *)&v20[11];
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48);
      return 1;
    default:
      uint64_t v9 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96));
      uint64_t v10 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    double v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      uint64_t v14 = *(void *)v10;
      *(_OWORD *)long long v19 = *(_OWORD *)(v10 + 16);
      *(_OWORD *)&v19[16] = *(_OWORD *)(v10 + 32);
      uint64_t v15 = v11;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        long long v17 = *(_OWORD *)(a1 + v15 + 112);
        *(_OWORD *)(v16 + 144) = *(_OWORD *)(a1 + v15 + 96);
        *(_OWORD *)(v16 + 160) = v17;
        *(_OWORD *)(v16 + 171) = *(_OWORD *)(a1 + v15 + 123);
        if (v15 == -96) {
          break;
        }
        v15 -= 48;
        if (v13 >= *(double *)(v16 + 56))
        {
          uint64_t v18 = a1 + v15 + 144;
          goto LABEL_12;
        }
      }
      uint64_t v18 = a1;
LABEL_12:
      *(void *)uint64_t v18 = v14;
      *(double *)(v18 + 8) = v13;
      *(_OWORD *)(v18 + 16) = *(_OWORD *)v19;
      *(_OWORD *)(v18 + 27) = *(_OWORD *)&v19[11];
      if (++v12 == 8) {
        return v10 + 48 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 48;
    v10 += 48;
    if (v10 == a2) {
      return 1;
    }
  }
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)#1}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)>::~__func()
{
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)#1}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  void *result = &unk_1F1723530;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)#1}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1723530;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)#1}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)#1}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)#1}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 592))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a4, 3, @"Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date");
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_configureForStartTime(a1);
  }
  double v8 = *(double *)(a2 + 8);
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9)
  {
    if (*(unsigned char *)(a1 + 592))
    {
      double v10 = -1.79769313e308;
    }
    else
    {
      double v10 = *(double *)(a1 + 176);
      double v12 = *(double *)(a1 + 120);
      if (v10 <= v12) {
        double v10 = -1.79769313e308;
      }
      if (v10 < v12) {
        double v10 = *(double *)(a1 + 120);
      }
    }
  }
  else
  {
    double v10 = *(double *)(a1 + 176);
    if (v10 <= *(double *)(a1 + 120)) {
      double v10 = -1.79769313e308;
    }
  }
  if (v10 <= v8)
  {
    if (v9 && a3) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_advanceToTime(a1, v8);
    }
    HDStatisticsCollectionEngine<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    double v13 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
    uint64_t v11 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v13, a4);
  }
  return v11;
}

void sub_1BD096FD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_advanceToTime(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 128) <= a2)
  {
    uint64_t v4 = a1 + 112;
    BOOL v5 = (double *)(a1 + 120);
    do
    {
      uint64_t v6 = *(void *)(a1 + 568);
      uint64_t v7 = *(void *)(a1 + 560);
      if (v6 == v7)
      {
        uint64_t v22 = 0;
        uint64_t v15 = *(void **)(a1 + 40);
        uint64_t v16 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a2];
        double v8 = [v15 dateIntervalContainingDate:v16 index:&v22];

        HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v17 = v22;
        double v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v19 = v18;
        double v20 = [v8 endDate];
        [v20 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::resetToBucket(v4, v17, v19, v21);
      }
      else
      {
        double v8 = [*(id *)(a1 + 40) dateIntervalAtIndex:*(void *)(a1 + 112) + 1];
        HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_statisticsFromFinishedBucket(a1, v5);
        double v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v12 = v11;
        double v13 = [v8 endDate];
        [v13 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::advanceBucket(v4, v12, v14);
      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_didChangeBucket(a1, v9);
      if (v6 != v7) {
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_notifyForCurrentBucket(a1);
      }
    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1BD0971E4(_Unwind_Exception *exception_object)
{
}

void HDStatisticsCollectionEngine<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  char v3 = *(unsigned char *)(a2 + 32);
  if (!v3) {
    return;
  }
  uint64_t v5 = a1 + 8;
  double v6 = *(double *)(a2 + 8);
  if (v6 < *(double *)(a1 + 8)) {
    return;
  }
  uint64_t v7 = *(uint64_t **)a2;
  double v8 = *(double *)(a2 + 16);
  unint64_t v9 = *(void *)(a2 + 24);
  char v10 = *(unsigned char *)(a2 + 33);
  double v11 = *(double *)(a1 + 16);
  if (*(_DWORD *)(a1 + 36)) {
    BOOL v12 = v6 < v11;
  }
  else {
    BOOL v12 = v6 <= v11;
  }
  if (v12)
  {
    if (v8 <= v11) {
      double v14 = *(double *)(a2 + 16);
    }
    else {
      double v14 = *(double *)(a1 + 16);
    }
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 264, *(void *)(a2 + 24), v9);
    uint64_t v15 = *(char **)(a1 + 112);
    if (v15 == *(char **)(a1 + 104) && *(uint64_t *)(a1 + 192) <= 0)
    {
      double v33 = *(double *)(a1 + 8);
      double v34 = *(double *)(a1 + 16);
      if (v6 >= v33) {
        double v33 = v6;
      }
      if (v34 >= v14) {
        double v34 = v14;
      }
      *(double *)(a1 + 48) = v33;
      *(double *)(a1 + 56) = v34;
      if (!a3) {
        goto LABEL_47;
      }
    }
    else
    {
      if (v6 < *(double *)(a1 + 48))
      {
        double v16 = *(double *)(a1 + 8);
        if (v6 >= v16) {
          double v16 = v6;
        }
        *(double *)(a1 + 48) = v16;
      }
      if (v14 > *(double *)(a1 + 56))
      {
        double v17 = *(double *)(a1 + 16);
        if (v17 >= v14) {
          double v17 = v14;
        }
        *(double *)(a1 + 56) = v17;
      }
      if (!a3) {
        goto LABEL_47;
      }
    }
    if (v6 < *(double *)(a1 + 16))
    {
      HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeThroughTime(v5, v6);
      uint64_t v15 = *(char **)(a1 + 112);
    }
LABEL_47:
    unint64_t v35 = *(void *)(a1 + 120);
    if ((unint64_t)v15 >= v35)
    {
      unint64_t v37 = 0x555555555555555;
      uint64_t v38 = *(char **)(a1 + 104);
      unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v38) >> 4);
      unint64_t v40 = v39 + 1;
      if (v39 + 1 > 0x555555555555555) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (void)v38) >> 4);
      if (2 * v41 > v40) {
        unint64_t v40 = 2 * v41;
      }
      if (v41 < 0x2AAAAAAAAAAAAAALL) {
        unint64_t v37 = v40;
      }
      if (v37)
      {
        unint64_t v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v37);
        uint64_t v38 = *(char **)(a1 + 104);
        uint64_t v15 = *(char **)(a1 + 112);
      }
      else
      {
        uint64_t v42 = 0;
      }
      unint64_t v43 = v37 + 48 * v39;
      *(void *)unint64_t v43 = v7;
      *(double *)(v43 + 8) = v6;
      *(double *)(v43 + 16) = v14;
      *(void *)(v43 + 24) = v9;
      unint64_t v44 = v37 + 48 * v42;
      *(unsigned char *)(v43 + 32) = v3;
      *(unsigned char *)(v43 + 33) = v10;
      *(_WORD *)(v43 + 40) = 0;
      *(unsigned char *)(v43 + 42) = 0;
      long long v36 = (void *)(v43 + 48);
      if (v15 != v38)
      {
        do
        {
          long long v45 = *((_OWORD *)v15 - 3);
          long long v46 = *((_OWORD *)v15 - 2);
          *(_OWORD *)(v43 - 21) = *(_OWORD *)(v15 - 21);
          *(_OWORD *)(v43 - 48) = v45;
          *(_OWORD *)(v43 - 32) = v46;
          v43 -= 48;
          v15 -= 48;
        }
        while (v15 != v38);
        uint64_t v38 = *(char **)(a1 + 104);
      }
      *(void *)(a1 + 104) = v43;
      *(void *)(a1 + 112) = v36;
      *(void *)(a1 + 120) = v44;
      if (v38) {
        operator delete(v38);
      }
    }
    else
    {
      *(void *)uint64_t v15 = v7;
      *((double *)v15 + 1) = v6;
      *((double *)v15 + 2) = v14;
      *((void *)v15 + 3) = v9;
      v15[32] = v3;
      v15[33] = v10;
      *((_WORD *)v15 + 20) = 0;
      long long v36 = v15 + 48;
      v15[42] = 0;
    }
    *(void *)(a1 + 112) = v36;
    if (!*(unsigned char *)(a1 + 232) || *(double *)(a1 + 208) <= v6)
    {
      *(void *)(a1 + 200) = v7;
      *(double *)(a1 + 208) = v6;
      *(double *)(a1 + 216) = v8;
      *(void *)(a1 + 224) = v9;
      *(unsigned char *)(a1 + 232) = v3;
      *(unsigned char *)(a1 + 233) = v10;
    }
    if (*(unsigned char *)(a1 + 33))
    {
      unint64_t v47 = HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_canonicalSourceIDForSourceID(v5, v9);
      double v48 = HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_statisticsForSource(v5, v47);
      if (!*((unsigned char *)v48 + 104) || *((double *)v48 + 10) <= v6)
      {
        v48[9] = v7;
        *((double *)v48 + 10) = v6;
        *((double *)v48 + 11) = v8;
        v48[12] = (uint64_t *)v9;
        *((unsigned char *)v48 + 104) = v3;
        *((unsigned char *)v48 + 105) = v10;
      }
    }
    return;
  }
  if (v6 < v11) {
    double v6 = *(double *)(a1 + 16);
  }
  unint64_t v18 = *(void *)(a1 + 456);
  unint64_t v19 = *(void *)(a1 + 464);
  if (v18 >= v19)
  {
    uint64_t v21 = *(void *)(a1 + 448);
    unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v21) >> 3);
    unint64_t v23 = v22 + 1;
    if (v22 + 1 > 0x666666666666666) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v21) >> 3);
    if (2 * v24 > v23) {
      unint64_t v23 = 2 * v24;
    }
    if (v24 >= 0x333333333333333) {
      unint64_t v25 = 0x666666666666666;
    }
    else {
      unint64_t v25 = v23;
    }
    if (v25) {
      unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v25);
    }
    else {
      uint64_t v26 = 0;
    }
    unint64_t v27 = v25 + 40 * v22;
    unint64_t v28 = v25 + 40 * v26;
    *(void *)unint64_t v27 = v7;
    *(double *)(v27 + 8) = v6;
    *(double *)(v27 + 16) = v8;
    *(void *)(v27 + 24) = v9;
    *(unsigned char *)(v27 + 32) = v3;
    *(unsigned char *)(v27 + 33) = v10;
    unint64_t v20 = v27 + 40;
    unint64_t v30 = *(char **)(a1 + 448);
    double v29 = *(char **)(a1 + 456);
    if (v29 != v30)
    {
      do
      {
        long long v31 = *(_OWORD *)(v29 - 40);
        long long v32 = *(_OWORD *)(v29 - 24);
        *(_WORD *)(v27 - 8) = *((_WORD *)v29 - 4);
        *(_OWORD *)(v27 - 24) = v32;
        *(_OWORD *)(v27 - 40) = v31;
        v27 -= 40;
        v29 -= 40;
      }
      while (v29 != v30);
      double v29 = *(char **)(a1 + 448);
    }
    *(void *)(a1 + 448) = v27;
    *(void *)(a1 + 456) = v20;
    *(void *)(a1 + 464) = v28;
    if (v29) {
      operator delete(v29);
    }
  }
  else
  {
    *(void *)unint64_t v18 = v7;
    *(double *)(v18 + 8) = v6;
    *(double *)(v18 + 16) = v8;
    *(void *)(v18 + 24) = v9;
    *(unsigned char *)(v18 + 32) = v3;
    unint64_t v20 = v18 + 40;
    *(unsigned char *)(v18 + 33) = v10;
  }
  *(void *)(a1 + 456) = v20;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_notifyForCurrentBucket(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 594))
  {
    *(unsigned char *)(a1 + 596) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 596) = 0;
    uint64_t v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      uint64_t v4 = v2;
      char v3 = (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      if (v3) {
        v4[2](v4, v3);
      }

      uint64_t v2 = v4;
    }
  }
}

void sub_1BD0976CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  unint64_t v9 = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 448), *(void *)(a1 + 456), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 456) - *(void *)(a1 + 448)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::resetToBucket(a1, *(void *)a1 + 1, a2, a3);
  double v6 = v9;
  uint64_t v7 = v10;
  if (v9 != v10)
  {
    uint64_t v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BD0977C8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8 = a1 + 40;
  objc_storeStrong((id *)(a1 + 472), *(id *)(a1 + 40));
  *(double *)(v8 - 32) = a3;
  *(double *)(v8 - 24) = a4;
  *(double *)(v8 + 24) = a3;
  *(void *)(v8 + 72) = *(void *)(v8 + 64);
  *(_OWORD *)(v8 + 88) = xmmword_1BD3301F0;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  if (*(void *)(v8 + 216))
  {
    uint64_t v9 = *(void *)(a1 + 248);
    char v10 = *(void **)(a1 + 240);
    *(void *)(a1 + 240) = a1 + 248;
    *(void *)(v9 + 16) = 0;
    *(void *)(a1 + 248) = 0;
    *(void *)(a1 + 256) = 0;
    if (v10[1]) {
      uint64_t v11 = (void *)v10[1];
    }
    else {
      uint64_t v11 = v10;
    }
    if (v11)
    {
      BOOL v12 = (void *)v11[2];
      if (v12)
      {
        double v13 = (void *)*v12;
        if ((void *)*v12 == v11)
        {
          void *v12 = 0;
          while (1)
          {
            uint64_t v15 = (void *)v12[1];
            if (!v15) {
              break;
            }
            do
            {
              BOOL v12 = v15;
              uint64_t v15 = (void *)*v15;
            }
            while (v15);
          }
        }
        else
        {
          for (v12[1] = 0; v13; double v13 = (void *)v12[1])
          {
            do
            {
              BOOL v12 = v13;
              double v13 = (void *)*v13;
            }
            while (v13);
          }
        }
        std::__tree<long>::destroy(v11);
        for (uint64_t i = (void *)v12[2]; i; uint64_t i = (void *)i[2])
          BOOL v12 = i;
        uint64_t v11 = v12;
      }
    }
    std::__tree<long>::destroy(v11);
  }
  objc_storeStrong((id *)v8, *(id *)(a1 + 472));
  *(void *)(a1 + 456) = *(void *)(a1 + 448);
  *(void *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 596))
  {
    if (v3)
    {
      id v6 = v3;
      uint64_t v4 = _Block_copy(*(const void **)(a1 + 96));
      uint64_t v5 = v4;
      if (v4) {
        (*((void (**)(void *, id))v4 + 2))(v4, v6);
      }

      id v3 = v6;
    }
    *(unsigned char *)(a1 + 596) = 0;
  }
}

void sub_1BD097994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 startDate];
  id v6 = [v4 startDate];
  uint64_t v7 = [v5 compare:v6];

  return v7;
}

void sub_1BD097A1C(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_primitiveInvalidateInterval(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 13);
  if (WeakRetained)
  {
    if (v5
      && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_currentBucketInterval((uint64_t)a1),
          (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v8 = [v5 endDate];
      uint64_t v9 = [v7 startDate];
      if (objc_msgSend(v8, "hk_isAfterDate:", v9))
      {
        char v10 = [v5 startDate];
        uint64_t v11 = [v7 endDate];
        char v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);
      }
      else
      {
        char v12 = 0;
      }

      double v13 = _Block_copy(a1[12]);
      if ((v12 & 1) == 0) {
        operator new();
      }
    }
    else
    {
      double v13 = _Block_copy(a1[12]);
    }
    *((unsigned char *)a1 + 592) = 1;
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
    v27[3] = &unk_1E6308FF8;
    id v15 = v5;
    id v28 = v15;
    id v16 = v13;
    id v29 = v16;
    (*((void (**)(id *, void *))*a1 + 9))(a1, v27);
    if (v5)
    {
      double v17 = [v15 startDate];
      [v17 timeIntervalSinceReferenceDate];
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_configureForStartTime((uint64_t)a1);
    }
    else
    {
      (*((void (**)(id *))*a1 + 4))(a1);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
    v21[3] = &unk_1E6309060;
    unint64_t v24 = a1;
    id v5 = v15;
    char v26 = 1;
    id v22 = v5;
    unint64_t v25 = a1;
    id v23 = WeakRetained;
    uint64_t v14 = (*((uint64_t (**)(id *, void *, uint64_t))*a1 + 14))(a1, v21, a3);
    unint64_t v18 = _Block_copy(v16);
    id v19 = a1[12];
    a1[12] = v18;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to invalidate interval: no data source available.");
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1BD097E6C(_Unwind_Exception *a1)
{
  MEMORY[0x1C187B8A0](v4, 0x10F1C40E1B91A94);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_11;
  }
  id v3 = [v10 endDate];
  uint64_t v4 = [*(id *)(a1 + 32) startDate];
  char v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    id v6 = [v10 startDate];
    uint64_t v7 = [*(id *)(a1 + 32) endDate];
    char v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_11:
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9) {
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
      }
    }
  }
}

void sub_1BD098050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = [*(id *)(a1 + 32) startDate];
  [v5 timeIntervalSinceReferenceDate];
  uint64_t v7 = v6;

  char v8 = [*(id *)(a1 + 32) endDate];
  [v8 timeIntervalSinceReferenceDate];
  uint64_t v10 = v9;

  uint64_t v11 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  uint64_t v13 = *(void *)(a1 + 32);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  char v32 = *(unsigned char *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  uint64_t v31 = *(void *)(a1 + 56);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  uint64_t v14 = [v11 collectionCalculator:WeakRetained queryForInterval:v13 error:a2 sampleHandler:v30 mergeHandler:v29];

  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15 != v4)
    {
      id v16 = [*(id *)(a1 + 32) endDate];
      [v16 timeIntervalSinceReferenceDate];
      if (*(void *)(v15 + 40))
      {
        double v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          id v19 = [*(id *)(v15 + 40) dateIntervalAtIndex:*(void *)(v15 + 112) + 1];
          HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          unint64_t v20 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_statisticsFromFinishedBucket(v15, (double *)(v15 + 120));
          uint64_t v21 = [v19 startDate];
          [v21 timeIntervalSinceReferenceDate];
          double v23 = v22;
          unint64_t v24 = [v19 endDate];
          [v24 timeIntervalSinceReferenceDate];
          HDStatisticsCollectionEngine<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            char v26 = _Block_copy(*(const void **)(v15 + 96));
            unint64_t v27 = v26;
            if (v26) {
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);
            }
          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_didChangeBucket(v15, 0);
        }
      }
    }
  }
  return v14;
}

void sub_1BD0982FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7 = *(double *)(a1 + 32);
  if (v7 > a6)
  {
    a2 = 0;
    int v8 = 0;
    a7 = 0.0;
    a5 = 0.0;
    double v9 = 0.0;
  }
  else
  {
    int v8 = 1;
    double v9 = a6;
  }
  double v13 = a5;
  double v14 = v9;
  double v15 = a7;
  uint64_t v16 = a2;
  char v17 = v8;
  char v18 = 0;
  if (*(unsigned char *)(a1 + 56))
  {
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v13, a3, a4);
    }
  }
  else
  {
    BOOL v11 = v7 <= a6;
    double v12 = *(double *)(a1 + 40);
    if (v9 >= v12) {
      BOOL v11 = 0;
    }
    if (!v11 || a7 <= v12) {
      double v12 = a7;
    }
    double v14 = v9;
    double v15 = v12;
    char v17 = v11;
    if (v11) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v13, a3, a4);
    }
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 592)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_configureForStartTime(a1);
  }
  if (*(void *)(a1 + 40)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_advanceToTime(a1, a2);
  }
  if (*(double *)(a1 + 128) > a2)
  {
    HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeThroughTime(a1 + 120, a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 32) < *(double *)(v10 + 8))
                {
                  uint64_t v129 = *(void *)(v10 + 32);
                  long long v113 = *(_OWORD *)v10;
                  long long v121 = *(_OWORD *)(v10 + 16);
                  long long v52 = *(_OWORD *)(a2 - 40);
                  long long v53 = *(_OWORD *)(a2 - 24);
                  *(_WORD *)(v10 + 32) = *(_WORD *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(_WORD *)(a2 - 8) = v129;
                  *(_OWORD *)(a2 - 24) = v121;
                  *(_OWORD *)(a2 - 40) = v113;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v10, (double *)(v10 + 40), (double *)(a2 - 40));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, v10 + 120, a2 - 40);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            BOOL v54 = (void *)(v10 + 40);
            BOOL v56 = v10 == a2 || v54 == (void *)a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  double v59 = v54;
                  double v60 = *(double *)(v58 + 48);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *v54;
                    long long v114 = *(_OWORD *)(v58 + 56);
                    uint64_t v122 = *(void *)(v58 + 72);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      uint64_t v63 = v10 + v62;
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      *(_OWORD *)(v63 + 40) = *(_OWORD *)(v10 + v62);
                      *(_OWORD *)(v63 + 56) = v64;
                      *(_WORD *)(v63 + 72) = *(_WORD *)(v10 + v62 + 32);
                      if (!v62) {
                        break;
                      }
                      v62 -= 40;
                      if (v60 >= *(double *)(v63 - 32))
                      {
                        uint64_t v65 = v10 + v62 + 40;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = v114;
                    *(_WORD *)(v65 + 32) = v122;
                  }
                  BOOL v54 = v59 + 5;
                  v57 += 40;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 5 != (void *)a2);
              }
            }
            else if (!v56)
            {
              do
              {
                id v98 = v54;
                double v99 = *(double *)(a1 + 48);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *v54;
                  long long v117 = *(_OWORD *)(a1 + 56);
                  uint64_t v125 = *(void *)(a1 + 72);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(_OWORD *)(v101 - 3);
                    *(_OWORD *)long long v101 = *(_OWORD *)(v101 - 5);
                    *((_OWORD *)v101 + 1) = v102;
                    *((_WORD *)v101 + 16) = *((_WORD *)v101 - 4);
                    double v103 = *((double *)v101 - 9);
                    v101 -= 5;
                  }
                  while (v99 < v103);
                  void *v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *((_WORD *)v101 + 16) = v125;
                  *((_OWORD *)v101 + 1) = v117;
                }
                v54 += 5;
                a1 = (unint64_t)v98;
              }
              while (v98 + 5 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 40 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v10 + 40 * v69 + 8) < *(double *)(v70 + 48))
                  {
                    v70 += 40;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  double v71 = *(double *)(v10 + 40 * v68 + 8);
                  if (*(double *)(v70 + 8) >= v71)
                  {
                    unint64_t v72 = v10 + 40 * v68;
                    uint64_t v73 = *(void *)v72;
                    uint64_t v123 = *(void *)(v72 + 32);
                    long long v115 = *(_OWORD *)(v72 + 16);
                    do
                    {
                      unint64_t v74 = v72;
                      unint64_t v72 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_WORD *)(v74 + 32) = *(_WORD *)(v70 + 32);
                      *(_OWORD *)unint64_t v74 = v75;
                      *(_OWORD *)(v74 + 16) = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 40 * v77;
                      uint64_t v78 = 2 * v69 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v10 + 40 * v77 + 8) < *(double *)(v70 + 48))
                      {
                        v70 += 40;
                        uint64_t v77 = v78;
                      }
                      uint64_t v69 = v77;
                    }
                    while (*(double *)(v70 + 8) >= v71);
                    *(void *)unint64_t v72 = v73;
                    *(double *)(v72 + 8) = v71;
                    *(_OWORD *)(v72 + 16) = v115;
                    *(_WORD *)(v72 + 32) = v123;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x28uLL;
              do
              {
                uint64_t v80 = 0;
                uint64_t v130 = *(void *)(v10 + 32);
                long long v116 = *(_OWORD *)v10;
                long long v124 = *(_OWORD *)(v10 + 16);
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = v81;
                  uint64_t v83 = v80 + 1;
                  v81 += 40 * (v80 + 1);
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v85 = v84 + 2;
                  if (v85 < v79 && *(double *)(v82 + 40 * v83 + 8) < *(double *)(v81 + 48))
                  {
                    v81 += 40;
                    uint64_t v80 = v85;
                  }
                  long long v86 = *(_OWORD *)v81;
                  long long v87 = *(_OWORD *)(v81 + 16);
                  *(_WORD *)(v82 + 32) = *(_WORD *)(v81 + 32);
                  *(_OWORD *)unint64_t v82 = v86;
                  *(_OWORD *)(v82 + 16) = v87;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 40;
                if (v81 == a2)
                {
                  *(_WORD *)(v81 + 32) = v130;
                  *(_OWORD *)unint64_t v81 = v116;
                  *(_OWORD *)(v81 + 16) = v124;
                }
                else
                {
                  long long v88 = *(_OWORD *)a2;
                  long long v89 = *(_OWORD *)(a2 + 16);
                  *(_WORD *)(v81 + 32) = *(_WORD *)(a2 + 32);
                  *(_OWORD *)unint64_t v81 = v88;
                  *(_OWORD *)(v81 + 16) = v89;
                  *(_WORD *)(a2 + 32) = v130;
                  *(_OWORD *)a2 = v116;
                  *(_OWORD *)(a2 + 16) = v124;
                  uint64_t v90 = v81 - v10 + 40;
                  if (v90 >= 41)
                  {
                    unint64_t v91 = (v90 / 0x28uLL - 2) >> 1;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v10 + 40 * v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      uint64_t v109 = *(void *)(v81 + 32);
                      long long v106 = *(_OWORD *)(v81 + 16);
                      do
                      {
                        unint64_t v94 = v81;
                        unint64_t v81 = v10 + 40 * v91;
                        long long v95 = *(_OWORD *)v81;
                        long long v96 = *(_OWORD *)(v81 + 16);
                        *(_WORD *)(v94 + 32) = *(_WORD *)(v81 + 32);
                        *(_OWORD *)unint64_t v94 = v95;
                        *(_OWORD *)(v94 + 16) = v96;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 40 * v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_WORD *)(v81 + 32) = v109;
                      *(_OWORD *)(v81 + 16) = v106;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40 * (v12 >> 1)), (double *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            uint64_t v16 = (double *)(a1 + 40 * v13 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40), v16, (double *)(a2 - 80));
            char v17 = (double *)(a1 + 40 + 8 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 80), v17, (double *)(a2 - 120));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v16, (double *)v14, v17);
            uint64_t v126 = *(void *)(a1 + 32);
            long long v110 = *(_OWORD *)a1;
            long long v118 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 16) = v19;
            *(_WORD *)(v14 + 32) = v126;
            *(_OWORD *)unint64_t v14 = v110;
            *(_OWORD *)(v14 + 16) = v118;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40 * (v12 >> 1)), (double *)a1, (double *)(a2 - 40));
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 32) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          long long v105 = *(_OWORD *)(a1 + 16);
          uint64_t v108 = *(void *)(a1 + 32);
          if (v20 >= *(double *)(a2 - 32))
          {
            unint64_t v41 = a1 + 40;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 40;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 40;
              double v40 = *(double *)(v39 + 48);
              v39 += 40;
            }
            while (v20 >= v40);
          }
          unint64_t v43 = a2;
          if (v10 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              unint64_t v43 = v44 - 40;
              double v45 = *(double *)(v44 - 32);
              v44 -= 40;
            }
            while (v20 < v45);
          }
          while (v10 < v43)
          {
            uint64_t v128 = *(void *)(v10 + 32);
            long long v112 = *(_OWORD *)v10;
            long long v120 = *(_OWORD *)(v10 + 16);
            long long v46 = *(_OWORD *)v43;
            long long v47 = *(_OWORD *)(v43 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v43 + 32);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(_WORD *)(v43 + 32) = v128;
            *(_OWORD *)unint64_t v43 = v112;
            *(_OWORD *)(v43 + 16) = v120;
            do
            {
              double v48 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *(double *)(v43 - 32);
              v43 -= 40;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 40);
            long long v51 = *(_OWORD *)(v10 - 24);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 40) = v38;
          *(double *)(v10 - 32) = v20;
          *(_WORD *)(v10 - 8) = v108;
          *(_OWORD *)(v10 - 24) = v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        long long v104 = *(_OWORD *)(a1 + 16);
        uint64_t v107 = *(void *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 48);
          v21 += 40;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        unint64_t v25 = a2;
        if (v21 == 40)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 40;
            double v29 = *(double *)(v28 - 32);
            v28 -= 40;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 40;
            double v27 = *(double *)(v25 - 32);
            v25 -= 40;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v127 = *(void *)(v10 + 32);
            long long v111 = *(_OWORD *)v10;
            long long v119 = *(_OWORD *)(v10 + 16);
            long long v31 = *(_OWORD *)v30;
            long long v32 = *(_OWORD *)(v30 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v30 + 32);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(_WORD *)(v30 + 32) = v127;
            *(_OWORD *)unint64_t v30 = v111;
            *(_OWORD *)(v30 + 16) = v119;
            do
            {
              double v33 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v33 < v20);
            do
            {
              double v34 = *(double *)(v30 - 32);
              v30 -= 40;
            }
            while (v34 >= v20);
          }
          while (v10 < v30);
        }
        if (v10 - 40 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 40);
          long long v36 = *(_OWORD *)(v10 - 24);
          *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 40) = v22;
        *(double *)(v10 - 32) = v20;
        *(_WORD *)(v10 - 8) = v107;
        *(_OWORD *)(v10 - 24) = v104;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 40;
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        __int16 v9 = *(_WORD *)(a2 - 8);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      uint64_t v16 = *(void *)v12;
      long long v21 = *(_OWORD *)(v12 + 16);
      uint64_t v22 = *(void *)(v12 + 32);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(void *)uint64_t v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(void *a1, uint64_t a2)
{
  id v3 = (void *)a1[5];
  uint64_t v4 = a1[6];
  BOOL v5 = (void *)a1[4];
  uint64_t v6 = [v5 dateInterval];
  void v9[4] = v4;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  uint64_t v7 = [v3 collectionCalculator:v5 queryForInterval:v6 error:a2 sampleHandler:v10 mergeHandler:v9];

  return v7;
}

void sub_1BD099058(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10 = *(void *)(a1 + 32);
  *(double *)int v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  char v15 = 1;
  uint64_t v11 = [MEMORY[0x1E4F1C9C8] distantFuture];
  [v11 timeIntervalSinceReferenceDate];
  BOOL v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1BD0990FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6 = a3;
  uint64_t v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = &unk_1F17235E0;
  double v9 = 900.0;
  if ((v6 & 0x10) == 0) {
    double v9 = 0.0;
  }
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(void *)(v8 + 104) = 0;
  *(void *)(v8 + 112) = 0;
  *(void *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_WORD *)(a1 + 704) = 1;
  *(unsigned char *)(a1 + 706) = 0;
  *(unsigned char *)(a1 + 708) = 0;
  *(void *)(a1 + 712) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(void *)(a1 + 752) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);

  JUMPOUT(0x1C187B8A0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1F17235E0;
  uint64_t v2 = *(void **)(a1 + 736);
  if (v2)
  {
    *(void *)(a1 + 744) = v2;
    operator delete(v2);
  }

  id v3 = *(void **)(a1 + 672);
  if (v3)
  {
    *(void *)(a1 + 680) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(unsigned char *)(result + 704) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::setDateInterval(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 copy];
  uint64_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;

  BOOL v5 = [v6 startDate];
  [v5 timeIntervalSinceReferenceDate];
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
}

void sub_1BD0992A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(void *)(a1 + 40))
  {
    id v5 = v3;
    [v3 timeIntervalSinceReferenceDate];
    *(void *)(a1 + 712) = v4;
    id v3 = v5;
  }
}

void sub_1BD099318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::setStatisticsConfiguration(id *a1, void *a2)
{
  objc_storeStrong(a1 + 90, a2);
  id v7 = a2;
  id v4 = a1[90];
  id v5 = a1[87];
  a1[87] = v4;
  id v6 = v4;

  objc_storeStrong(a1 + 19, a1[87]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (*(void *)(a1 + 40)) {
    return 1;
  }
  BOOL v7 = *(void *)(a1 + 224) == *(void *)(a1 + 216) && *(uint64_t *)(a1 + 280) < 1
    || HKIntervalMask<double>::firstDifference(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)a2, *(void *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (v7) {
    return 1;
  }
  double v9 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128);

  return v9(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 copy];
  id v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v3;
}

void sub_1BD099500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::dataSource(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));

  return WeakRetained;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::currentStatistics(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 704))
  {
    unint64_t v1 = 0;
  }
  else
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v4);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v4, v4[1]);
    unint64_t v1 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v4);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v4);
  }

  return v1;
}

void sub_1BD0995D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(a1 + 64);
  BOOL v7 = v6;
  if (!v6) {
    goto LABEL_4;
  }
  uint64_t v8 = [v6 startDate];
  [v8 timeIntervalSinceReferenceDate];
  if (v9 > *(double *)(a2 + 16))
  {

    goto LABEL_10;
  }
  uint64_t v10 = [v7 endDate];
  [v10 timeIntervalSinceReferenceDate];
  double v12 = v11;
  double v13 = *(double *)(a2 + 8);

  if (v12 >= v13)
  {
LABEL_4:
    if (!*(unsigned char *)(a1 + 706)) {
      goto LABEL_21;
    }
    if (!*(unsigned char *)(a1 + 705))
    {
      if (*(void *)(a1 + 40))
      {
        if (*(unsigned char *)(a1 + 704))
        {
          double v14 = -1.79769313e308;
        }
        else
        {
          double v16 = *(double *)(a1 + 176);
          double v14 = *(double *)(a1 + 120);
          if (v16 <= v14) {
            double v16 = -1.79769313e308;
          }
          if (v16 >= v14) {
            double v14 = v16;
          }
        }
      }
      else
      {
        double v14 = -1.79769313e308;
        if (*(double *)(a1 + 176) > *(double *)(a1 + 120)) {
          double v14 = *(double *)(a1 + 176);
        }
      }
      if (v14 > *(double *)(a2 + 8))
      {
        uint64_t v17 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
        uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v17, a3);

        goto LABEL_22;
      }
      if (*(unsigned char *)(a1 + 707))
      {
LABEL_21:
        uint64_t v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveAddSample(a1, a2, 1, a3);
        goto LABEL_22;
      }
      unint64_t v19 = *(void *)(a1 + 744);
      unint64_t v20 = *(void *)(a1 + 752);
      if (v19 >= v20)
      {
        uint64_t v24 = *(void *)(a1 + 736);
        unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v24) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - v24) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x333333333333333) {
          unint64_t v28 = 0x666666666666666;
        }
        else {
          unint64_t v28 = v26;
        }
        if (v28) {
          unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v28);
        }
        else {
          uint64_t v29 = 0;
        }
        unint64_t v30 = v28 + 40 * v25;
        unint64_t v31 = v28 + 40 * v29;
        long long v32 = *(_OWORD *)a2;
        long long v33 = *(_OWORD *)(a2 + 16);
        *(void *)(v30 + 32) = *(void *)(a2 + 32);
        *(_OWORD *)unint64_t v30 = v32;
        *(_OWORD *)(v30 + 16) = v33;
        unint64_t v23 = v30 + 40;
        double v34 = *(char **)(a1 + 744);
        long long v35 = *(char **)(a1 + 736);
        if (v34 != v35)
        {
          do
          {
            long long v36 = *(_OWORD *)(v34 - 40);
            long long v37 = *(_OWORD *)(v34 - 24);
            *(_WORD *)(v30 - 8) = *((_WORD *)v34 - 4);
            *(_OWORD *)(v30 - 24) = v37;
            *(_OWORD *)(v30 - 40) = v36;
            v30 -= 40;
            v34 -= 40;
          }
          while (v34 != v35);
          double v34 = *(char **)(a1 + 736);
        }
        *(void *)(a1 + 736) = v30;
        *(void *)(a1 + 744) = v23;
        *(void *)(a1 + 752) = v31;
        if (v34) {
          operator delete(v34);
        }
      }
      else
      {
        long long v21 = *(_OWORD *)a2;
        long long v22 = *(_OWORD *)(a2 + 16);
        *(void *)(v19 + 32) = *(void *)(a2 + 32);
        *(_OWORD *)unint64_t v19 = v21;
        *(_OWORD *)(v19 + 16) = v22;
        unint64_t v23 = v19 + 40;
      }
      *(void *)(a1 + 744) = v23;
    }
  }
LABEL_10:
  uint64_t v15 = 1;
LABEL_22:

  return v15;
}

void sub_1BD09988C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = v5;
  if (*(unsigned char *)(a1 + 706))
  {
    uint64_t v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 706) = 1;
  uint64_t v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    uint64_t v7 = 0;
    goto LABEL_82;
  }
  uint64_t v65 = v6;
  if (*(unsigned char *)(a1 + 705)) {
    goto LABEL_5;
  }
  double v9 = *(void **)(a1 + 728);
  if (!v9)
  {
    id v68 = 0;
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 40))
  {
LABEL_5:
    int v8 = 0;
    id v68 = 0;
    goto LABEL_29;
  }
  [v9 sortUsingComparator:&__block_literal_global_721];
  id v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v10 = *(id *)(a1 + 728);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  if (!v11)
  {

    id v12 = 0;
    goto LABEL_27;
  }
  id v12 = 0;
  uint64_t v13 = *(void *)v70;
  do
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (*(void *)v70 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(id *)(*((void *)&v69 + 1) + 8 * i);
      double v16 = v15;
      if (v12)
      {
        uint64_t v17 = [v15 startDate];
        uint64_t v18 = [v12 endDate];
        int v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          unint64_t v20 = [v16 endDate];
          long long v21 = [v12 endDate];
          int v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22) {
            goto LABEL_21;
          }
          id v23 = objc_alloc(MEMORY[0x1E4F28C18]);
          uint64_t v24 = [v12 startDate];
          unint64_t v25 = [v16 endDate];
          id v26 = (id)[v23 initWithStartDate:v24 endDate:v25];
        }
        else
        {
          [v68 addObject:v12];
          id v26 = v16;
        }
        id v12 = v26;
      }
      else
      {
        id v12 = v15;
      }
LABEL_21:
    }
    uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  }
  while (v11);

  if (v12) {
    [v68 addObject:v12];
  }
LABEL_27:

LABEL_28:
  int v8 = 1;
LABEL_29:
  unint64_t v27 = *(void **)(a1 + 728);
  *(void *)(a1 + 728) = 0;

  *(unsigned char *)(a1 + 705) = 0;
  if (!v8)
  {
    unint64_t v38 = *(void *)(a1 + 736);
    *(void *)(a1 + 752) = 0;
    *(void *)(a1 + 744) = 0;
    *(void *)(a1 + 736) = 0;
    unint64_t v39 = v38;
    goto LABEL_47;
  }
  unint64_t v28 = [v68 lastObject];
  if (v28)
  {
    uint64_t v29 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_currentBucketInterval(a1);
    unint64_t v30 = [v29 endDate];
    unint64_t v31 = [v28 endDate];
    int v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      long long v33 = [v28 endDate];
      [v33 timeIntervalSinceReferenceDate];
      double v35 = v34;

      uint64_t v36 = *(void *)(a1 + 736);
      long long v37 = *(long long **)(a1 + 744);
      while ((long long *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((long long *)v36 != v37)
          {
            double v40 = (long long *)(v36 + 40);
            if ((long long *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  long long v41 = *v40;
                  long long v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)uint64_t v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                double v40 = (long long *)((char *)v40 + 40);
              }
              while (v40 != v37);
              long long v37 = *(long long **)(a1 + 744);
            }
          }
          if ((long long *)v36 != v37) {
            *(void *)(a1 + 744) = v36;
          }
          break;
        }
        v36 += 40;
      }
    }
  }
  unint64_t v38 = *(void *)(a1 + 736);
  unint64_t v39 = *(void *)(a1 + 744);
  *(void *)(a1 + 752) = 0;
  *(void *)(a1 + 736) = 0;
  *(void *)(a1 + 744) = 0;
  if (![v68 count]) {
    goto LABEL_60;
  }
LABEL_47:
  id v43 = v68;
  long long __p = (void *)v38;
  if (v43)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v44 = v43;
    uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v70;
      while (2)
      {
        for (uint64_t j = 0; j != v45; ++j)
        {
          if (*(void *)v70 != v46) {
            objc_enumerationMutation(v44);
          }
          id v48 = *(id *)(*((void *)&v69 + 1) + 8 * j);
          int v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval((id *)a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
        if (v45) {
          continue;
        }
        break;
      }
    }

LABEL_59:
    unint64_t v38 = (unint64_t)__p;
LABEL_60:
    unint64_t v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v51;
    }
    int v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    long long __p = (void *)v38;
    if (v39 != v38)
    {
      uint64_t v54 = v38;
      uint64_t v50 = v67;
      do
      {
        int v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveAddSample(a1, v54, 1, v50);
        int v53 = v55;
        v54 += 40;
        if (v54 == v39) {
          char v56 = 0;
        }
        else {
          char v56 = v55;
        }
        uint64_t v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval((id *)a1, 0, v67))goto LABEL_59; {
LABEL_70:
    }
    int v53 = 0;
  }
  if (*(void *)(a1 + 40) && *(void *)(a1 + 680) != *(void *)(a1 + 672))
  {
    do
    {
      uint64_t v57 = objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(void *)(a1 + 112) + 1, v50, v65);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      unint64_t v58 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, (double *)(a1 + 120));
      double v59 = [v57 startDate];
      [v59 timeIntervalSinceReferenceDate];
      double v61 = v60;
      uint64_t v62 = [v57 endDate];
      [v62 timeIntervalSinceReferenceDate];
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
    }
    while (*(void *)(a1 + 680) != *(void *)(a1 + 672));
  }
  *(unsigned char *)(a1 + 706) = 0;
  if (__p) {
    operator delete(__p);
  }

  if (v53)
  {
    if (*(unsigned char *)(a1 + 708))
    {
      *(unsigned char *)(a1 + 708) = 0;
      id v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
      uint64_t v7 = 1;
      goto LABEL_82;
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v6 = v65;
LABEL_82:
  *(unsigned char *)(a1 + 706) = 0;
LABEL_83:

  return v7;
}

void sub_1BD099F90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    *(unsigned char *)(v13 + 706) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(unsigned char *)(result + 707) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(unsigned char *)(a1 + 706)) {
      goto LABEL_12;
    }
    uint64_t v7 = 0;
LABEL_14:
    uint64_t v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval((id *)a1, v7, a3);
    goto LABEL_15;
  }
  uint64_t v7 = [v6 dateIntervalForIntervalsContainingInterval:v5];

  if (!*(unsigned char *)(a1 + 706)) {
    goto LABEL_14;
  }
  if (!v7)
  {
LABEL_12:
    id v12 = *(void **)(a1 + 728);
    *(void *)(a1 + 728) = 0;

    uint64_t v7 = 0;
    uint64_t v11 = 1;
    *(unsigned char *)(a1 + 705) = 1;
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 705))
  {
    int v8 = *(void **)(a1 + 728);
    if (!v8)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      id v10 = *(void **)(a1 + 728);
      *(void *)(a1 + 728) = v9;

      int v8 = *(void **)(a1 + 728);
    }
    [v8 addObject:v7];
  }
  uint64_t v11 = 1;
LABEL_15:

  return v11;
}

void sub_1BD09A290(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    *(unsigned char *)(a1 + 704) = 1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v9[3] = &unk_1E63043E8;
    uint64_t v12 = a1;
    id v10 = v5;
    id v11 = WeakRetained;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 112))(a1, v9, a3);
    if (v7 && *(unsigned char *)(a1 + 704) && !*(void *)(a1 + 40)) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to query for initial statistics: no data source available.");
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1BD09A3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::reset(uint64_t result)
{
  *(unsigned char *)(result + 704) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 encodeBool:*(unsigned __int8 *)(a1 + 704) forKey:@"needs_config"];
  id v12 = v3;
  int v32 = &unk_1F1726FA0;
  long long v33 = 0;
  int v38 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
  LOBYTE(v38) = 1;
  uint64_t v34 = v4;
  uint64_t v35 = 0;
  statistics::StatisticsEngine::makeCurrentBucket((uint64_t)&v32);
  uint64_t v13 = &unk_1F171B9C8;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  int v31 = 511;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 0;
  int8x16_t v14 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  uint64_t v5 = *(void *)(a1 + 136);
  char v29 = *(unsigned char *)(a1 + 144);
  char v30 = *(unsigned char *)(a1 + 145);
  BOOL v28 = *(_DWORD *)(a1 + 148) == 0;
  int8x16_t v15 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  uint64_t v7 = *(int8x16_t **)(a1 + 216);
  if (v7 != *(int8x16_t **)(a1 + 224))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v7, *v7, 8uLL);
    int8x16_t v40 = v7[1];
    char v43 = 0;
    HIBYTE(v42) = v7[2].i8[9];
    LOBYTE(v42) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>();
  }
  statistics::StatisticsBucket::makeStatistics((uint64_t)&v13);
  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::archive((uint64_t)&v39, (int *)(a1 + 240));
  statistics::Statistics::operator=(*((statistics **)&v22 + 1), (uint64_t)&v39);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v39);
  uint64_t v8 = *(void *)(a1 + 464);
  if (v8 != a1 + 472)
  {
    HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::archive((uint64_t)&v39, (int *)(v8 + 40));
    uint64_t v9 = *(void *)(v8 + 32);
    v46 |= 0x200u;
    uint64_t v45 = v9;
    PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>();
  }
  id v10 = *(int8x16_t **)(a1 + 184);
  if (v10 != *(int8x16_t **)(a1 + 192))
  {
    unint64_t v39 = (char *)&unk_1F1727540;
    v41.i32[0] = 3;
    int8x16_t v40 = vextq_s8(*v10, *v10, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>();
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v13);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v13);
  id v11 = *(int8x16_t **)(a1 + 672);
  if (v11 != *(int8x16_t **)(a1 + 680))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v11, *v11, 8uLL);
    int8x16_t v40 = v11[1];
    __int16 v42 = 0;
    char v43 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>();
  }
  PB::Writer::Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v39);
  [v12 encodeBytes:v40.i64[0] length:&v39[-v40.i64[0]] forKey:@"hdsce_archived_representation"];
  PB::Writer::~Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);
}

void sub_1BD09A7E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v63 = a2;
  *(unsigned char *)(a1 + 704) = [v63 decodeBoolForKey:@"needs_config"];
  id v3 = v63;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)&v67.n128_i64[1], 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)id v68 = 0u;
  long long v69 = 0u;
  unint64_t v113 = 0;
  id v66 = v3;
  PB::Reader::Reader((PB::Reader *)v112, (const unsigned __int8 *)[v66 decodeBytesForKey:@"hdsce_archived_representation" returnedLength:&v113]);
  uint64_t v65 = a1;
  long long v105 = &unk_1F1726FA0;
  uint64_t v106 = 0;
  uint64_t v110 = 0;
  uint64_t v108 = 0;
  uint64_t v109 = 0;
  int v111 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v105, (PB::Reader *)v112);
  v67.n128_u64[0] = v107;
  if (v106)
  {
    uint64_t v73 = 0;
    memset(v76, 0, sizeof(v76));
    long long v85 = 0u;
    long long v86 = 0u;
    *(_WORD *)long long v87 = 0;
    long long v81 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    memset(v84, 0, 26);
    memset(&v87[8], 0, 90);
    uint64_t v90 = 0;
    int v80 = 0;
    long long __p = 0;
    unint64_t v79 = 0;
    uint64_t v78 = 0;
    long long v89 = 0;
    long long v88 = &v89;
    long long v91 = 0u;
    long long v92 = 0u;
    int v93 = 1065353216;
    long long v94 = 0u;
    long long v95 = 0u;
    long long v96 = 0u;
    uint64_t v97 = 0;
    int v98 = 1065353216;
    long long v99 = 0u;
    long long v100 = 0u;
    int v101 = 1065353216;
    long long v103 = 0u;
    long long v102 = 0u;
    int v104 = 1065353216;
    int8x16_t v70 = vextq_s8(*(int8x16_t *)(v106 + 8), *(int8x16_t *)(v106 + 8), 8uLL);
    uint64_t v4 = *(void *)(v106 + 72);
    uint64_t v71 = *(void *)(v106 + 64);
    __int16 v72 = *(_WORD *)(v106 + 185);
    int8x16_t v74 = vextq_s8(*(int8x16_t *)(v106 + 24), *(int8x16_t *)(v106 + 24), 8uLL);
    uint64_t v75 = v4;
    uint64_t v5 = *(void *)(v106 + 80);
    uint64_t v6 = *(void *)(v106 + 88);
    long long v64 = (void *)v106;
    if (v5 != v6)
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(*(void *)v5 + 24);
        uint64_t v9 = *(void *)(*(void *)v5 + 32);
        uint64_t v10 = *(void *)(*(void *)v5 + 8);
        uint64_t v11 = *(void *)(*(void *)v5 + 16);
        char v12 = *(unsigned char *)(*(void *)v5 + 41);
        char v13 = *(unsigned char *)(*(void *)v5 + 40);
        if ((unint64_t)v7 >= v79)
        {
          int8x16_t v14 = (char *)__p;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)__p) >> 4);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v79 - (void)__p) >> 4) > v16) {
            unint64_t v16 = 0x5555555555555556 * ((uint64_t)(v79 - (void)__p) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v79 - (void)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v17 = 0x555555555555555;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17)
          {
            unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            uint64_t v7 = v78;
            int8x16_t v14 = (char *)__p;
          }
          else
          {
            uint64_t v18 = 0;
          }
          uint64_t v19 = (void *)(v17 + 48 * v15);
          void *v19 = v9;
          v19[1] = v8;
          v19[2] = v10;
          v19[3] = v11;
          *((_WORD *)v19 + 16) = 1;
          *((unsigned char *)v19 + 40) = 0;
          *((unsigned char *)v19 + 41) = v12;
          *((unsigned char *)v19 + 42) = v13;
          uint64_t v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              long long v21 = *((_OWORD *)v7 - 3);
              long long v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            int8x16_t v14 = (char *)__p;
          }
          uint64_t v7 = (char *)(v19 + 6);
          long long __p = v20;
          uint64_t v78 = (char *)(v19 + 6);
          unint64_t v79 = v17 + 48 * v18;
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)uint64_t v7 = v9;
          *((void *)v7 + 1) = v8;
          *((void *)v7 + 2) = v10;
          *((void *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        uint64_t v78 = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    long long v23 = (void *)v64[13];
    if (v23)
    {
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::unarchive((uint64_t)&v114, v23);
      int v80 = v114;
      *(void *)&v87[16] = v123;
      long long v86 = v121;
      *(_OWORD *)long long v87 = v122;
      long long v83 = v117;
      v84[0] = v118;
      v84[1] = v119;
      long long v85 = v120;
      long long v81 = v115;
      long long v82 = v116;
      *(void *)&v87[24] = v124;
      if (*(void *)&v87[32])
      {
        *(void *)&v87[40] = *(void *)&v87[32];
        operator delete(*(void **)&v87[32]);
      }
      *(_OWORD *)&v87[32] = v125;
      *(void *)&v87[48] = v126;
      uint64_t v126 = 0;
      long long v125 = 0uLL;
      *(void *)&v87[56] = v127;
      *(_OWORD *)&v87[64] = v128;
      *(_OWORD *)&v87[80] = v129;
      *(_WORD *)&v87[96] = v130;
    }
    long long v24 = (void **)v64[17];
    for (uint64_t i = (void **)v64[18]; v24 != i; ++v24)
    {
      uint64_t v26 = (uint64_t)*v24;
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::unarchive((uint64_t)&v114, *v24);
      uint64_t v27 = *(void *)(v26 + 144);
      BOOL v28 = v89;
      for (j = &v89; ; BOOL v28 = *j)
      {
        char v30 = j;
        if (!v28) {
          break;
        }
        while (1)
        {
          uint64_t j = (uint64_t **)v28;
          uint64_t v31 = v28[4];
          if (v31 > v27) {
            break;
          }
          if (v31 >= v27)
          {
            int v32 = (char *)j;
            goto LABEL_37;
          }
          BOOL v28 = j[1];
          if (!v28)
          {
            char v30 = j + 1;
            goto LABEL_34;
          }
        }
      }
LABEL_34:
      int v32 = (char *)operator new(0x108uLL);
      *((void *)v32 + 4) = v27;
      *(_OWORD *)(v32 + 40) = 0u;
      *(_OWORD *)(v32 + 56) = 0u;
      *(_OWORD *)(v32 + 72) = 0u;
      *(_OWORD *)(v32 + 88) = 0u;
      *(_OWORD *)(v32 + 104) = 0u;
      *(_OWORD *)(v32 + 120) = 0u;
      *(_OWORD *)(v32 + 136) = 0u;
      *(_OWORD *)(v32 + 152) = 0u;
      *(_OWORD *)(v32 + 168) = 0u;
      *(_OWORD *)(v32 + 184) = 0u;
      *(_OWORD *)(v32 + 200) = 0u;
      *(_OWORD *)(v32 + 216) = 0u;
      *(_OWORD *)(v32 + 232) = 0u;
      *(_OWORD *)(v32 + 248) = 0u;
      *(void *)int v32 = 0;
      *((void *)v32 + 1) = 0;
      *((void *)v32 + 2) = j;
      *char v30 = (uint64_t *)v32;
      long long v33 = (uint64_t *)v32;
      if (*v88)
      {
        long long v88 = (uint64_t **)*v88;
        long long v33 = *v30;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v89, v33);
      ++v90;
LABEL_37:
      *((_DWORD *)v32 + 10) = v114;
      long long v34 = v119;
      *((_OWORD *)v32 + 6) = v118;
      *((_OWORD *)v32 + 7) = v34;
      long long v35 = v117;
      long long v36 = v115;
      *((_OWORD *)v32 + 4) = v116;
      *((_OWORD *)v32 + 5) = v35;
      uint64_t v37 = v123;
      long long v38 = v122;
      long long v39 = v120;
      *((_OWORD *)v32 + 9) = v121;
      *((_OWORD *)v32 + 10) = v38;
      *((_OWORD *)v32 + 8) = v39;
      *((void *)v32 + 22) = v37;
      *((_OWORD *)v32 + 3) = v36;
      int8x16_t v40 = (void *)*((void *)v32 + 24);
      *((void *)v32 + 23) = v124;
      if (v40)
      {
        *((void *)v32 + 25) = v40;
        operator delete(v40);
        *((void *)v32 + 24) = 0;
        *((void *)v32 + 25) = 0;
        *((void *)v32 + 26) = 0;
      }
      *((_OWORD *)v32 + 12) = v125;
      *((void *)v32 + 26) = v126;
      uint64_t v126 = 0;
      long long v125 = 0uLL;
      *((void *)v32 + 27) = v127;
      long long v41 = v129;
      *((_OWORD *)v32 + 14) = v128;
      *((_OWORD *)v32 + 15) = v41;
      *((_WORD *)v32 + 128) = v130;
    }
    uint64_t v42 = v64[5];
    for (uint64_t k = v64[6]; v42 != k; v42 += 8)
    {
      double v45 = *(double *)(*(void *)v42 + 8);
      double v44 = *(double *)(*(void *)v42 + 16);
      if (v45 >= v44) {
        double v46 = *(double *)(*(void *)v42 + 16);
      }
      else {
        double v46 = *(double *)(*(void *)v42 + 8);
      }
      if (v44 < v45) {
        double v44 = *(double *)(*(void *)v42 + 8);
      }
      HKIntervalMask<double>::_insertInterval(v76, v46, v44);
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::operator=((uint64_t)&v67.n128_i64[1], (uint64_t)&v70);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v70);
  }
  uint64_t v47 = v108;
  uint64_t v48 = v109;
  if (v108 != v109)
  {
    int v49 = (char *)v68[1];
    do
    {
      uint64_t v50 = *(void *)(*(void *)v47 + 24);
      uint64_t v51 = *(void *)(*(void *)v47 + 32);
      uint64_t v52 = *(void *)(*(void *)v47 + 8);
      uint64_t v53 = *(void *)(*(void *)v47 + 16);
      if ((unint64_t)v49 >= (unint64_t)v69)
      {
        uint64_t v54 = (char *)v68[0];
        unint64_t v55 = 0xCCCCCCCCCCCCCCCDLL * ((v49 - (char *)v68[0]) >> 3);
        unint64_t v56 = v55 + 1;
        if (v55 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(v69 - (unint64_t)v68[0]) >> 3) > v56) {
          unint64_t v56 = 0x999999999999999ALL * ((uint64_t)(v69 - (unint64_t)v68[0]) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v69 - (unint64_t)v68[0]) >> 3) >= 0x333333333333333) {
          unint64_t v57 = 0x666666666666666;
        }
        else {
          unint64_t v57 = v56;
        }
        if (v57)
        {
          unint64_t v57 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v57);
          int v49 = (char *)v68[1];
          uint64_t v54 = (char *)v68[0];
        }
        else
        {
          uint64_t v58 = 0;
        }
        unint64_t v59 = v57 + 40 * v55;
        *(void *)unint64_t v59 = v51;
        *(void *)(v59 + 8) = v50;
        *(void *)(v59 + 16) = v52;
        *(void *)(v59 + 24) = v53;
        *(_WORD *)(v59 + 32) = 1;
        double v60 = (char *)v59;
        if (v49 != v54)
        {
          do
          {
            long long v61 = *(_OWORD *)(v49 - 40);
            long long v62 = *(_OWORD *)(v49 - 24);
            *((_WORD *)v60 - 4) = *((_WORD *)v49 - 4);
            *(_OWORD *)(v60 - 24) = v62;
            *(_OWORD *)(v60 - 40) = v61;
            v60 -= 40;
            v49 -= 40;
          }
          while (v49 != v54);
          uint64_t v54 = (char *)v68[0];
        }
        v68[0] = v60;
        int v49 = (char *)(v59 + 40);
        v68[1] = (void *)(v59 + 40);
        *(void *)&long long v69 = v57 + 40 * v58;
        if (v54) {
          operator delete(v54);
        }
      }
      else
      {
        *(void *)int v49 = v51;
        *((void *)v49 + 1) = v50;
        *((void *)v49 + 2) = v52;
        *((void *)v49 + 3) = v53;
        *((_WORD *)v49 + 16) = 1;
        v49 += 40;
      }
      v68[1] = v49;
      v47 += 8;
    }
    while (v47 != v48);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v105);

  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::operator=((void *)(v65 + 112), &v67);
  if (v68[0])
  {
    v68[1] = v68[0];
    operator delete(v68[0]);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v67.n128_i64[1]);
}

void sub_1BD09B00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table((uint64_t)&STACK[0x490]);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a3);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x440]);
  uint64_t v10 = (void *)STACK[0x428];
  if (STACK[0x428])
  {
    STACK[0x430] = (unint64_t)v10;
    operator delete(v10);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x400]);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::destroy((void *)STACK[0x3F0]);
  uint64_t v11 = (void *)STACK[0x3A0];
  if (STACK[0x3A0])
  {
    STACK[0x3A8] = (unint64_t)v11;
    operator delete(v11);
  }
  char v12 = (void *)STACK[0x2F0];
  if (STACK[0x2F0])
  {
    STACK[0x2F8] = (unint64_t)v12;
    operator delete(v12);
  }
  objc_destroyWeak((id *)&STACK[0x2E8]);
  char v13 = (void *)STACK[0x2D0];
  if (STACK[0x2D0])
  {
    STACK[0x2D8] = (unint64_t)v13;
    operator delete(v13);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x4C0]);
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_WORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 186) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 322) = 0u;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 344) = a1 + 352;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_DWORD *)(a1 + 400) = 1065353216;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(void *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 464) = 1065353216;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_DWORD *)(a1 + 504) = 1065353216;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_DWORD *)(a1 + 544) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 560);
  if (v2)
  {
    *(void *)(a1 + 568) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 512);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 472);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 432);
  uint64_t v2 = *(void **)(a1 + 408);
  if (v2)
  {
    *(void *)(a1 + 416) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 368);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::destroy(*(void **)(a1 + 352));
  id v3 = *(void **)(a1 + 272);
  if (v3)
  {
    *(void *)(a1 + 280) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(void *)(a1 + 104) = v4;
    operator delete(v4);
  }
  objc_destroyWeak((id *)(a1 + 88));
  uint64_t v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(void *)(a1 + 72) = v5;
    operator delete(v5);
  }

  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::destroy(a1[1]);
    uint64_t v2 = (void *)a1[24];
    if (v2)
    {
      a1[25] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_configureForStartTime(uint64_t a1)
{
  unint64_t v28 = 0;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
    uint64_t v4 = [v2 dateIntervalContainingDate:v3 index:&v28];

    uint64_t v5 = [v4 startDate];
    [v5 timeIntervalSinceReferenceDate];
    double v7 = v6;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
LABEL_5:
    double v13 = v9;

    goto LABEL_6;
  }
  id v10 = *(id *)(a1 + 64);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v11 = [v10 startDate];
    [v11 timeIntervalSinceReferenceDate];
    double v7 = v12;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
    goto LABEL_5;
  }
  double v7 = -1.79769313e308;
  double v13 = 1.79769313e308;
LABEL_6:

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v21, WeakRetained, v7, v13);

  if (*(void *)(a1 + 32) == 1) {
    char v23 = 1;
  }
  uint64_t v22 = *(void *)(a1 + 56);
  char v24 = *(unsigned char *)(a1 + 24) & 1;
  if (v27 != (char *)(a1 + 72)) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27, *(char **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4);
  }
  objc_storeStrong(&v26, *(id *)(a1 + 720));
  if (!*(void *)(a1 + 40)) {
    int v25 = 0;
  }
  unint64_t v15 = v28;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v21);
  v18.n128_u64[0] = v15;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)&v18.n128_i64[1], (uint64_t)v17);
  long long __p = 0u;
  long long v20 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::operator=((void *)(a1 + 112), &v18);

  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v18.n128_i64[1]);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v17);
  *(unsigned char *)(a1 + 704) = 0;
  return HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v21);
}

void sub_1BD09B5D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::operator=(void *a1, __n128 *a2)
{
  *a1 = a2->n128_u64[0];
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::operator=((uint64_t)(a1 + 1), (uint64_t)&a2->n128_i64[1]);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 70), a2 + 35);
  unint64_t v4 = a2[36].n128_u64[1];
  a2[36].n128_u64[1] = 0;
  uint64_t v5 = (void *)a1[73];
  a1[73] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 96);
  double v7 = *(unsigned char **)(a2 + 104);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(void *)(a1 + 96) = v10;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(void *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  long long v12 = *(_OWORD *)(a2 + 144);
  long long v13 = *(_OWORD *)(a2 + 160);
  long long v14 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v14;
  *(_OWORD *)(a1 + 144) = v12;
  *(_OWORD *)(a1 + 160) = v13;
  long long v15 = *(_OWORD *)(a2 + 208);
  long long v16 = *(_OWORD *)(a2 + 224);
  long long v17 = *(_OWORD *)(a2 + 240);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(_OWORD *)(a1 + 224) = v16;
  *(_OWORD *)(a1 + 240) = v17;
  *(_OWORD *)(a1 + 208) = v15;
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 272), *(const void **)(a2 + 272), *(void *)(a2 + 280), (uint64_t)(*(void *)(a2 + 280) - *(void *)(a2 + 272)) >> 4);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  long long v18 = *(_OWORD *)(a2 + 320);
  uint64_t v19 = *(void *)(a2 + 336);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 320) = v18;
  long long v20 = (void *)(a1 + 352);
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 336) = v19;
  *(void *)(a1 + 344) = a1 + 352;
  long long v21 = *(void **)(a2 + 344);
  if (v21 != (void *)(a2 + 352))
  {
    uint64_t v22 = 0;
    char v23 = (void *)(a1 + 352);
    while (1)
    {
      char v24 = (void *)(a1 + 352);
      if (v23 == v20) {
        goto LABEL_12;
      }
      int v25 = v22;
      id v26 = (void *)(a1 + 352);
      if (v22)
      {
        do
        {
          char v24 = v25;
          int v25 = (void *)v25[1];
        }
        while (v25);
      }
      else
      {
        do
        {
          char v24 = (void *)v26[2];
          BOOL v27 = *v24 == (void)v26;
          id v26 = v24;
        }
        while (v27);
      }
      uint64_t v28 = v21[4];
      if (v24[4] < v28)
      {
LABEL_12:
        if (v22) {
          char v29 = (uint64_t **)v24;
        }
        else {
          char v29 = (uint64_t **)(a1 + 352);
        }
        if (v22) {
          char v30 = (uint64_t **)(v24 + 1);
        }
        else {
          char v30 = (uint64_t **)(a1 + 352);
        }
        if (!*v30)
        {
LABEL_28:
          long long v33 = operator new(0x108uLL);
          v33[4] = v21[4];
          *((_DWORD *)v33 + 10) = *((_DWORD *)v21 + 10);
          *((_OWORD *)v33 + 3) = *((_OWORD *)v21 + 3);
          long long v34 = *((_OWORD *)v21 + 4);
          long long v35 = *((_OWORD *)v21 + 5);
          long long v36 = *((_OWORD *)v21 + 7);
          *((_OWORD *)v33 + 6) = *((_OWORD *)v21 + 6);
          *((_OWORD *)v33 + 7) = v36;
          *((_OWORD *)v33 + 4) = v34;
          *((_OWORD *)v33 + 5) = v35;
          long long v37 = *((_OWORD *)v21 + 8);
          long long v38 = *((_OWORD *)v21 + 9);
          long long v39 = *((_OWORD *)v21 + 10);
          v33[22] = v21[22];
          *((_OWORD *)v33 + 9) = v38;
          *((_OWORD *)v33 + 10) = v39;
          *((_OWORD *)v33 + 8) = v37;
          uint64_t v40 = v21[23];
          v33[24] = 0;
          v33[23] = v40;
          v33[25] = 0;
          v33[26] = 0;
          std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v33 + 24, (const void *)v21[24], v21[25], (uint64_t)(v21[25] - v21[24]) >> 4);
          v33[27] = v21[27];
          long long v41 = *((_OWORD *)v21 + 14);
          long long v42 = *((_OWORD *)v21 + 15);
          v33[32] = v21[32];
          *((_OWORD *)v33 + 14) = v41;
          *((_OWORD *)v33 + 15) = v42;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 344), (uint64_t)v29, v30, v33);
        }
      }
      else
      {
        char v30 = (uint64_t **)(a1 + 352);
        char v29 = (uint64_t **)(a1 + 352);
        if (!v22) {
          goto LABEL_28;
        }
        uint64_t v31 = v22;
        while (1)
        {
          while (1)
          {
            char v29 = (uint64_t **)v31;
            uint64_t v32 = v31[4];
            if (v32 <= v28) {
              break;
            }
            uint64_t v31 = *v29;
            char v30 = v29;
            if (!*v29) {
              goto LABEL_28;
            }
          }
          if (v32 >= v28) {
            break;
          }
          uint64_t v31 = v29[1];
          if (!v31)
          {
            char v30 = v29 + 1;
            goto LABEL_28;
          }
        }
      }
      char v43 = (void *)v21[1];
      if (v43)
      {
        do
        {
          double v44 = v43;
          char v43 = (void *)*v43;
        }
        while (v43);
      }
      else
      {
        do
        {
          double v44 = (void *)v21[2];
          BOOL v27 = *v44 == (void)v21;
          long long v21 = v44;
        }
        while (!v27);
      }
      if (v44 == (void *)(a2 + 352)) {
        break;
      }
      uint64_t v22 = (void *)*v20;
      char v23 = *(void **)(a1 + 344);
      long long v21 = v44;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 368, a2 + 368);
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 408), *(const void **)(a2 + 408), *(void *)(a2 + 416), (uint64_t)(*(void *)(a2 + 416) - *(void *)(a2 + 408)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 432, a2 + 432);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 472, a2 + 472);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 512, a2 + 512);
  return a1;
}

void sub_1BD09BA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, id *location, void **a12)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v17);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  uint64_t v19 = *v15;
  if (*v15)
  {
    *(void *)(v12 + 416) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::destroy(*v13);
  long long v20 = *a9;
  if (*a9)
  {
    *(void *)(v12 + 280) = v20;
    operator delete(v20);
  }
  long long v21 = *a10;
  if (*a10)
  {
    *(void *)(v12 + 104) = v21;
    operator delete(v21);
  }
  objc_destroyWeak(location);
  uint64_t v22 = *a12;
  if (*a12)
  {
    *(void *)(v12 + 72) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::operator=(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  long long v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v5;

  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  id WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  uint64_t v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(void *)(a1 + 104) = v9;
    operator delete(v9);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  long long v10 = *(_OWORD *)(a2 + 144);
  long long v11 = *(_OWORD *)(a2 + 160);
  long long v12 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v12;
  *(_OWORD *)(a1 + 144) = v10;
  *(_OWORD *)(a1 + 160) = v11;
  long long v13 = *(_OWORD *)(a2 + 208);
  long long v14 = *(_OWORD *)(a2 + 224);
  long long v15 = *(_OWORD *)(a2 + 240);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(_OWORD *)(a1 + 224) = v14;
  *(_OWORD *)(a1 + 240) = v15;
  *(_OWORD *)(a1 + 208) = v13;
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 272, (__n128 *)(a2 + 272));
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  long long v16 = *(_OWORD *)(a2 + 304);
  long long v17 = *(_OWORD *)(a2 + 320);
  *(_WORD *)(a1 + 336) = *(_WORD *)(a2 + 336);
  *(_OWORD *)(a1 + 304) = v16;
  *(_OWORD *)(a1 + 320) = v17;
  uint64_t v18 = a1 + 352;
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::destroy(*(void **)(a1 + 352));
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  uint64_t v19 = *(void *)(a2 + 352);
  *(void *)(a1 + 352) = v19;
  uint64_t v20 = *(void *)(a2 + 360);
  *(void *)(a1 + 360) = v20;
  if (v20)
  {
    *(void *)(v19 + 16) = v18;
    *(void *)(a2 + 344) = a2 + 352;
    *(void *)(a2 + 352) = 0;
    *(void *)(a2 + 360) = 0;
  }
  else
  {
    *(void *)(a1 + 344) = v18;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 368, (uint64_t *)(a2 + 368));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 408, (__n128 *)(a2 + 408));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 432, (uint64_t *)(a2 + 432));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 472, (uint64_t *)(a2 + 472));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 512, (uint64_t *)(a2 + 512));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(uint64_t a1, double *a2)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  double v3 = *a2;
  id v4 = objc_alloc(MEMORY[0x1E4F1C9C8]);
  uint64_t v5 = a2 + 5;
  if (v3 != -1.79769313e308) {
    uint64_t v5 = a2;
  }
  long long v6 = (void *)[v4 initWithTimeIntervalSinceReferenceDate:*v5];
  uint64_t v96 = (uint64_t)a2;
  if (a2[1] == 1.79769313e308) {
    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:a2[6]];
  }
  else {
    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:a2[1]];
  }
  uint64_t v8 = (void *)v7;
  id v9 = *(id *)(a1 + 16);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v10 = *(id *)(a1 + 16);
    if ([v10 shouldUseUnderlyingTypeForStatistics])
    {
      uint64_t v11 = [v10 underlyingSampleType];

      id v9 = (id)v11;
    }
  }
  long long v12 = (void *)[objc_alloc(MEMORY[0x1E4F2B5B0]) initWithDataType:v9 startDate:v6 endDate:v8];
  if (*(unsigned char *)(a1 + 24))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      id v14 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      long long v15 = *(uint64_t **)(v96 + 408);
      long long v16 = *(uint64_t **)(v96 + 416);
      while (v15 != v16)
      {
        uint64_t v17 = *v15;
        id v18 = objc_loadWeakRetained((id *)(a1 + 48));
        uint64_t v19 = [v18 sourceForSourceID:v17];

        if (v19)
        {
          if (([v14 containsObject:v19] & 1) == 0) {
            [v14 addObject:v19];
          }
        }

        ++v15;
      }
      uint64_t v20 = (void *)[v14 copy];
      [v12 _setSources:v20];
    }
  }

  v104[0] = &unk_1F17237D0;
  v104[3] = v104;
  id v93 = v12;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)v106, (uint64_t)v104);
  uint64_t v108 = 0;
  long long v21 = operator new(0x28uLL);
  *long long v21 = &unk_1F17236B0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(v21 + 1), (uint64_t)v106);
  uint64_t v108 = v21;
  id v98 = v93;
  uint64_t v22 = (void *)MEMORY[0x1E4F2B370];
  char v23 = [MEMORY[0x1E4F2B618] secondUnit];
  __n128 v24 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v100, v96);
  if (!v108) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v25 = (*(uint64_t (**)(void *, unsigned char *, __n128))(*v108 + 48))(v108, v100, v24);
  id v26 = *(double **)(v25 + 8);
  double v27 = 0.0;
  while (v26 != *(double **)(v25 + 16))
  {
    double v29 = *v26;
    double v28 = v26[1];
    v26 += 2;
    double v27 = v27 + v28 - v29;
  }
  char v30 = [v22 quantityWithUnit:v23 doubleValue:v27 + *(double *)(v25 + 32)];
  [v98 setDuration:v30];

  if (__p)
  {
    long long v103 = __p;
    operator delete(__p);
  }

  __n128 v31 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v100, v96);
  if (!v108) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  objc_msgSend(v98, "setDataCount:", *(void *)(*(uint64_t (**)(void *, unsigned char *, __n128))(*v108 + 48))(v108, v100, v31));
  if (__p)
  {
    long long v103 = __p;
    operator delete(__p);
  }
  if (*(unsigned char *)(a1 + 24))
  {
    id v32 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v33 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier((uint64_t)v100, v96);
    for (uint64_t i = v101; i; uint64_t i = (uint64_t **)*i)
    {
      long long v35 = i[2];
      long long v36 = (void *)MEMORY[0x1E4F2B370];
      long long v37 = [MEMORY[0x1E4F2B618] secondUnit];
      if (!v108) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v38 = (*(uint64_t (**)(void *, uint64_t *))(*v108 + 48))(v108, (uint64_t *)i + 3);
      long long v39 = *(double **)(v38 + 8);
      double v40 = 0.0;
      while (v39 != *(double **)(v38 + 16))
      {
        double v42 = *v39;
        double v41 = v39[1];
        v39 += 2;
        double v40 = v40 + v41 - v42;
      }
      char v43 = [v36 quantityWithUnit:v37 doubleValue:v40 + *(double *)(v38 + 32)];
      [v32 setObject:v43 forKeyedSubscript:v35];

      if (!v108) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      double v44 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)(*(uint64_t (**)(void *, uint64_t *))(*v108 + 48))(v108, (uint64_t *)i + 3));
      [v33 setObject:v44 forKeyedSubscript:v35];
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::~__hash_table((uint64_t)v100);
    [v98 setDurationBySource:v32];
    [v98 setDataCountBySource:v33];
  }
  std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v107);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v106);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)v105, (uint64_t)v104);
  uint64_t v108 = 0;
  double v45 = operator new(0x28uLL);
  void *v45 = &unk_1F1723740;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(v45 + 1), (uint64_t)v105);
  uint64_t v108 = v45;
  id v99 = v98;
  uint64_t v46 = *(void *)(a1 + 24);
  __n128 v47 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v100, v96);
  if (!v108) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v48 = (*(uint64_t (**)(void *, unsigned char *, __n128))(*v108 + 48))(v108, v100, v47);
  double v49 = *(double *)(v48 + 8);
  double v50 = *(double *)(v48 + 16);
  uint64_t v51 = *(void *)(v48 + 32);
  double v53 = *(double *)(v48 + 40);
  double v52 = *(double *)(v48 + 48);
  double v54 = *(double *)(v48 + 56);
  double v55 = *(double *)(v48 + 80);
  int v56 = *(unsigned __int8 *)(v48 + 112);
  double v57 = *(double *)(v48 + 120);
  double v58 = *(double *)(v48 + 128);
  if (__p)
  {
    long long v103 = __p;
    operator delete(__p);
  }
  uint64_t v59 = *(void *)(a1 + 24);
  uint64_t v60 = _HKStatisticsOptionBaselineRelativeQuantities();
  long long v61 = *(void **)(a1 + 16);
  if ((v60 & v59) != 0) {
    [v61 _unitForChangeInCanonicalUnit];
  }
  else {
  long long v62 = [v61 canonicalUnit];
  }
  if ((v46 & 2) != 0)
  {
    if (v56) {
      double v57 = v57 + (v55 - v57) * 22.5 / (v58 + 22.5);
    }
    id v63 = [MEMORY[0x1E4F2B370] quantityWithUnit:v62 doubleValue:v57];
    [v99 setAverageQuantity:v63];
  }
  if ((v46 & 4) != 0)
  {
    long long v64 = [MEMORY[0x1E4F2B370] quantityWithUnit:v62 doubleValue:v50];
    [v99 setMinimumQuantity:v64];
  }
  if ((v46 & 8) != 0)
  {
    uint64_t v65 = [MEMORY[0x1E4F2B370] quantityWithUnit:v62 doubleValue:v49];
    [v99 setMaximumQuantity:v65];
  }
  if ((v46 & 0x20) != 0)
  {
    id v66 = [MEMORY[0x1E4F2B370] quantityWithUnit:v62 doubleValue:v53];
    [v99 setMostRecentQuantity:v66];

    __n128 v67 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v52, v54);
    [v99 setMostRecentQuantityDateInterval:v67];
  }
  [v99 setDataCount:v51];
  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    goto LABEL_92;
  }
  if ((v46 & 2) != 0)
  {
    uint64_t v59 = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1CA60]);
    if ((v46 & 4) == 0) {
      goto LABEL_56;
    }
LABEL_58:
    id v95 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    goto LABEL_59;
  }
  uint64_t v59 = 0;
  if ((v46 & 4) != 0) {
    goto LABEL_58;
  }
LABEL_56:
  id v95 = 0;
LABEL_59:
  if ((v46 & 8) != 0) {
    id v94 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else {
    id v94 = 0;
  }
  if ((v46 & 0x20) != 0)
  {
    id v69 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v68 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else
  {
    id v68 = 0;
    id v69 = 0;
  }
  id v70 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier((uint64_t)v100, v96);
  for (uint64_t j = v101; j; uint64_t j = (uint64_t **)*j)
  {
    __int16 v72 = j[2];
    if ((v46 & 2) != 0)
    {
      if (!v108) {
        goto LABEL_110;
      }
      uint64_t v73 = (void *)MEMORY[0x1E4F2B370];
      uint64_t v74 = (*(uint64_t (**)(void *, uint64_t *))(*v108 + 48))(v108, (uint64_t *)j + 3);
      if (*(unsigned char *)(v74 + 112)) {
        double v75 = *(double *)(v74 + 120)
      }
            + (*(double *)(v74 + 80) - *(double *)(v74 + 120)) * 22.5 / (*(double *)(v74 + 128) + 22.5);
      else {
        double v75 = *(double *)(v74 + 120);
      }
      long long v76 = [v73 quantityWithUnit:v62 doubleValue:v75];
      [(id)v59 setObject:v76 forKeyedSubscript:v72];
    }
    if ((v46 & 4) != 0)
    {
      if (!v108) {
        goto LABEL_110;
      }
      uint64_t v77 = objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v62, *(double *)((*(uint64_t (**)(void *, uint64_t *))(*v108 + 48))(v108, (uint64_t *)j + 3) + 16));
      [v95 setObject:v77 forKeyedSubscript:v72];
    }
    if ((v46 & 8) != 0)
    {
      if (!v108) {
        goto LABEL_110;
      }
      uint64_t v78 = objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v62, *(double *)((*(uint64_t (**)(void *, uint64_t *))(*v108 + 48))(v108, (uint64_t *)j + 3) + 8));
      [v94 setObject:v78 forKeyedSubscript:v72];
    }
    if ((v46 & 0x20) != 0)
    {
      if (!v108) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v79 = (*(uint64_t (**)(void *, uint64_t *))(*v108 + 48))(v108, (uint64_t *)j + 3);
      double v80 = *(double *)(v79 + 48);
      double v81 = *(double *)(v79 + 56);
      long long v82 = [MEMORY[0x1E4F2B370] quantityWithUnit:v62 doubleValue:*(double *)(v79 + 40)];
      [v69 setObject:v82 forKeyedSubscript:v72];

      long long v83 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v80, v81);
      [v68 setObject:v83 forKeyedSubscript:v72];
    }
    if (!v108) {
LABEL_110:
    }
      std::__throw_bad_function_call[abi:ne180100]();
    uint64_t v84 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)((*(uint64_t (**)(void *, uint64_t *))(*v108 + 48))(v108, (uint64_t *)j + 3) + 32));
    [v70 setObject:v84 forKeyedSubscript:v72];
  }
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::~__hash_table((uint64_t)v100);
  if ((v46 & 2) != 0) {
    [v99 setAverageQuantityBySource:v59];
  }
  if ((v46 & 4) != 0) {
    [v99 setMinimumQuantityBySource:v95];
  }
  if ((v46 & 8) != 0) {
    [v99 setMaximumQuantityBySource:v94];
  }
  if ((v46 & 0x20) != 0)
  {
    [v99 setMostRecentQuantityBySource:v69];
    [v99 setMostRecentQuantityDateIntervalBySource:v68];
  }
  [v99 setDataCountBySource:v70];

LABEL_92:
  std::__function::__value_func<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v107);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v105);

  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v104);
  long long v85 = [*(id *)(a1 + 16) _unitForChangeInCanonicalUnit];
  long long v86 = [v99 averageQuantity];
  if (v86)
  {
    long long v62 = [v99 averageQuantity];
    if (([v62 isCompatibleWithUnit:v85] & 1) == 0)
    {

LABEL_106:
      [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8], @"Expected compatibility with %@", v85 format];
      goto LABEL_107;
    }
  }
  long long v87 = [v99 minimumQuantity];
  if (v87)
  {
    uint64_t v59 = [v99 minimumQuantity];
    if (![(id)v59 isCompatibleWithUnit:v85])
    {
      int v88 = 1;
      goto LABEL_100;
    }
  }
  long long v89 = [v99 maximumQuantity];
  if (v89)
  {
    uint64_t v90 = [v99 maximumQuantity];
    int v91 = [v90 isCompatibleWithUnit:v85];

    int v88 = v91 ^ 1;
    if (v87) {
      goto LABEL_100;
    }
  }
  else
  {
    int v88 = 0;
    if (v87)
    {
LABEL_100:

      if (v86) {
        goto LABEL_101;
      }
LABEL_105:

      if (!v88) {
        goto LABEL_107;
      }
      goto LABEL_106;
    }
  }
  if (!v86) {
    goto LABEL_105;
  }
LABEL_101:

  if (v88) {
    goto LABEL_106;
  }
LABEL_107:

  return v99;
}

void sub_1BD09C96C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, _Unwind_Exception *exception_object, void *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  std::__function::__value_func<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100]((void *)(v48 - 192));
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100]((void *)(v48 - 256));

  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](&a45);
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 392);
  uint64_t v2 = *(void *)(a1 + 408);
  if (v1 != (*(void *)(a1 + 416) - v2) >> 3)
  {
    id v4 = (void **)(a1 + 408);
    *(void *)(a1 + 416) = v2;
    std::vector<long long>::reserve((void **)(a1 + 408), v1);
    uint64_t v5 = *(void **)(a1 + 384);
    if (v5)
    {
      long long v6 = *(char **)(a1 + 416);
      do
      {
        uint64_t v7 = v5[2];
        unint64_t v8 = *(void *)(a1 + 424);
        if ((unint64_t)v6 >= v8)
        {
          id v10 = (char *)*v4;
          uint64_t v11 = (v6 - (unsigned char *)*v4) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            id v10 = *(char **)(a1 + 408);
            long long v6 = *(char **)(a1 + 416);
          }
          else
          {
            uint64_t v15 = 0;
          }
          long long v16 = (void *)(v14 + 8 * v11);
          *long long v16 = v7;
          id v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            uint64_t v17 = *((void *)v6 - 1);
            v6 -= 8;
            *--long long v16 = v17;
          }
          *(void *)(a1 + 408) = v16;
          *(void *)(a1 + 416) = v9;
          *(void *)(a1 + 424) = v14 + 8 * v15;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)long long v6 = v7;
          id v9 = v6 + 8;
        }
        *(void *)(a1 + 416) = v9;
        uint64_t v5 = (void *)*v5;
        long long v6 = v9;
      }
      while (v5);
    }
    id v18 = (id *)(a1 + 88);
    id WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      id v20 = objc_loadWeakRetained(v18);
      [v20 orderSourceIDs:v4];
    }
  }
}

void sub_1BD09CE64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2) {
    a2 = v4 * floor(a2 / v4);
  }
  double v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    long long v121 = (void **)(a1 + 96);
    long long v117 = (double **)(a1 + 64);
    long long v115 = (uint64_t *)(a1 + 120);
    location = (id *)(a1 + 88);
    int v111 = (double **)(a1 + 272);
    uint64_t v110 = (void *)(a1 + 352);
    while (1)
    {
      unint64_t v6 = *(void *)(a1 + 96);
      uint64_t v7 = *(long long **)(a1 + 104);
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v7 - v6) >> 4);
      if (v8) {
        break;
      }
LABEL_127:
      *(double *)(a1 + 56) = a2;
LABEL_128:
      double v107 = *(double *)(a1 + 56);
      if (v107 == v5)
      {
        uint64_t v108 = [MEMORY[0x1E4F28B00] currentHandler];
        uint64_t v109 = objc_msgSend(NSString, "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>, HDStatisticsTimeInterval>>>::_mergeThroughTime(double) [Statistics = HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>, HDStatisticsTimeInterval>>]");
        [v108 handleFailureInFunction:v109 file:@"HDStatisticsBucket.hpp" lineNumber:234 description:@"Failed to make forward progress during statistics merge."];

        double v107 = *(double *)(a1 + 56);
      }
      double v5 = v107;
      if (v107 >= a2) {
        return;
      }
    }
    if (v8 != 1)
    {
      double v17 = a2;
      double v18 = a2;
      double v19 = v5;
      uint64_t v20 = *(void *)(a1 + 96);
      if ((long long *)v6 != v7)
      {
        do
        {
          double v21 = *(double *)(v20 + 8);
          double v22 = *(double *)(v20 + 16);
          if (v21 > v19 && v21 < v18) {
            double v18 = *(double *)(v20 + 8);
          }
          if (v22 > v5) {
            double v24 = *(double *)(v20 + 16);
          }
          else {
            double v24 = v17;
          }
          if (v22 < v17)
          {
            double v19 = v5;
            double v17 = v24;
          }
          v20 += 48;
        }
        while ((long long *)v20 != v7);
      }
      if (v17 >= v18) {
        double v25 = v18;
      }
      else {
        double v25 = v17;
      }
      double v26 = *(double *)(a1 + 16);
      if (v26 > 0.0)
      {
        double v27 = v26 * floor(v25 / v26);
        double v28 = v26 * floor((v26 + v5) / v26);
        if (v27 >= v28) {
          double v25 = v27;
        }
        else {
          double v25 = v28;
        }
      }
      *long long v121 = 0;
      v121[1] = 0;
      v121[2] = 0;
      if ((long long *)v6 != v7)
      {
        if (v8 > 0x555555555555555) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        double v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v8);
        id v32 = *(char **)(a1 + 96);
        __n128 v31 = *(char **)(a1 + 104);
        id v33 = v29;
        if (v31 != v32)
        {
          do
          {
            long long v34 = *((_OWORD *)v31 - 3);
            long long v35 = *((_OWORD *)v31 - 2);
            *(_OWORD *)(v33 - 21) = *(_OWORD *)(v31 - 21);
            *((_OWORD *)v33 - 3) = v34;
            *((_OWORD *)v33 - 2) = v35;
            v33 -= 48;
            v31 -= 48;
          }
          while (v31 != v32);
          __n128 v31 = (char *)*v121;
        }
        *(void *)(a1 + 96) = v33;
        *(void *)(a1 + 104) = v29;
        *(void *)(a1 + 112) = &v29[48 * v30];
        if (v31) {
          operator delete(v31);
        }
      }
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_updateSourceOrder(a1);
      id WeakRetained = objc_loadWeakRetained(location);

      unint64_t v37 = __clz(v8);
      if (WeakRetained)
      {
        *(void *)&long long v123 = a1;
        uint64_t v38 = 126 - 2 * v37;
        if ((long long *)v6 == v7) {
          uint64_t v39 = 0;
        }
        else {
          uint64_t v39 = v38;
        }
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(v6, v7, (uint64_t)&v123, v39, 1);
      }
      else
      {
        uint64_t v42 = 126 - 2 * v37;
        if ((long long *)v6 == v7) {
          uint64_t v39 = 0;
        }
        else {
          uint64_t v39 = v42;
        }
      }
      std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(v6, v7, v39, 1);
      if (*(unsigned char *)(a1 + 25)) {
        id v114 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      }
      else {
        id v114 = 0;
      }
      unint64_t v113 = (void *)v6;
      if ((long long *)v6 == v7)
      {
LABEL_109:
        *(double *)(a1 + 296) = HKIntervalMask<double>::removeIntervalsBefore(v111, v25) + *(double *)(a1 + 296);
        long long v92 = *(void **)(a1 + 344);
        if (v92 != v110)
        {
          do
          {
            *((double *)v92 + 27) = HKIntervalMask<double>::removeIntervalsBefore((double **)v92 + 24, v25)
                                  + *((double *)v92 + 27);
            id v93 = (void *)v92[1];
            if (v93)
            {
              do
              {
                id v94 = v93;
                id v93 = (void *)*v93;
              }
              while (v93);
            }
            else
            {
              do
              {
                id v94 = (void *)v92[2];
                BOOL v95 = *v94 == (void)v92;
                long long v92 = v94;
              }
              while (!v95);
            }
            long long v92 = v94;
          }
          while (v94 != v110);
        }
        *(double *)(a1 + 56) = v25;

        if (v113) {
          operator delete(v113);
        }
        goto LABEL_128;
      }
      uint64_t v116 = 0;
      char v43 = 0;
      unint64_t v44 = v6;
      while (2)
      {
        long long v45 = *(_OWORD *)(v44 + 16);
        long long v123 = *(_OWORD *)v44;
        long long v124 = v45;
        uint64_t v125 = *(void *)(v44 + 32);
        uint64_t v46 = v123;
        uint64_t v47 = v45;
        if (*(double *)&v45 - *((double *)&v123 + 1) - (v25 - *((double *)&v123 + 1)) < 0.01)
        {
          uint64_t v48 = 0;
          int v49 = 0;
          char v50 = 0;
          double v51 = 0.0;
          uint64_t v47 = 0;
          if (!(_BYTE)v125) {
            goto LABEL_62;
          }
LABEL_57:
          char v119 = v50;
          uint64_t v120 = v48;
          HDRawQuantitySample::applyMask((uint64_t)&v123, v117);
          int v52 = *(unsigned __int8 *)(v44 + 42);
          int v53 = *(unsigned __int8 *)(v44 + 41);
          char v118 = *(unsigned char *)(v44 + 40);
          if (!(_BYTE)v125) {
            goto LABEL_90;
          }
          if (v43)
          {
            unint64_t v54 = *((void *)&v124 + 1);
            if (v116 == *((void *)&v124 + 1) || *(unsigned char *)(a1 + 24))
            {
              HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(v115, (double *)&v123, v52 == 0);
              int v52 = 1;
            }
          }
          else
          {
            HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(v115, (double *)&v123, v52 == 0);
            int v52 = 1;
            unint64_t v54 = *((void *)&v124 + 1);
            uint64_t v116 = *((void *)&v124 + 1);
          }
          if (!*(unsigned char *)(a1 + 25)) {
            goto LABEL_89;
          }
          uint64_t v65 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a1, v54);
          if (!v65) {
            goto LABEL_88;
          }
          id v66 = [v114 objectForKeyedSubscript:v65];
          __n128 v67 = v66;
          if (v66)
          {
            if ([v66 longLongValue] != v54 && !*(unsigned char *)(a1 + 24))
            {
LABEL_87:

LABEL_88:
LABEL_89:
              char v43 = 1;
LABEL_90:
              if (v49)
              {
                BOOL v80 = v52 != 0;
                long long v82 = *(char **)(a1 + 104);
                unint64_t v81 = *(void *)(a1 + 112);
                if ((unint64_t)v82 < v81)
                {
                  *(void *)long long v82 = v46;
                  *((double *)v82 + 1) = v51;
                  *((void *)v82 + 2) = v47;
                  *((void *)v82 + 3) = v120;
                  v82[32] = v49;
                  v82[33] = v119;
                  v82[40] = v118;
                  v82[41] = v53;
                  uint64_t v59 = v82 + 48;
                  v82[42] = v80;
                  goto LABEL_107;
                }
                long long v76 = (char *)*v121;
                unint64_t v83 = 0xAAAAAAAAAAAAAAABLL * ((v82 - (unsigned char *)*v121) >> 4);
                unint64_t v84 = v83 + 1;
                if (v83 + 1 > 0x555555555555555) {
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v85 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v81 - (void)v76) >> 4);
                if (2 * v85 > v84) {
                  unint64_t v84 = 2 * v85;
                }
                if (v85 >= 0x2AAAAAAAAAAAAAALL) {
                  unint64_t v86 = 0x555555555555555;
                }
                else {
                  unint64_t v86 = v84;
                }
                if (v86)
                {
                  unint64_t v86 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v86);
                  long long v76 = *(char **)(a1 + 96);
                  long long v82 = *(char **)(a1 + 104);
                }
                else
                {
                  uint64_t v87 = 0;
                }
                unint64_t v88 = v86 + 48 * v83;
                *(void *)unint64_t v88 = v46;
                *(double *)(v88 + 8) = v51;
                *(void *)(v88 + 16) = v47;
                *(void *)(v88 + 24) = v120;
                *(unsigned char *)(v88 + 32) = v49;
                *(unsigned char *)(v88 + 33) = v119;
                *(unsigned char *)(v88 + 40) = v118;
                *(unsigned char *)(v88 + 41) = v53;
                *(unsigned char *)(v88 + 42) = v80;
                unint64_t v89 = v88;
                if (v82 != v76)
                {
                  do
                  {
                    long long v90 = *((_OWORD *)v82 - 3);
                    long long v91 = *((_OWORD *)v82 - 2);
                    *(_OWORD *)(v89 - 21) = *(_OWORD *)(v82 - 21);
                    *(_OWORD *)(v89 - 48) = v90;
                    *(_OWORD *)(v89 - 32) = v91;
                    v89 -= 48;
                    v82 -= 48;
                  }
                  while (v82 != v76);
                  long long v76 = (char *)*v121;
                }
                uint64_t v59 = (_OWORD *)(v88 + 48);
                *(void *)(a1 + 96) = v89;
                *(void *)(a1 + 104) = v88 + 48;
                *(void *)(a1 + 112) = v86 + 48 * v87;
                if (v76) {
LABEL_106:
                }
                  operator delete(v76);
                goto LABEL_107;
              }
              goto LABEL_108;
            }
          }
          else
          {
            uint64_t v77 = [NSNumber numberWithLongLong:v54];
            [v114 setObject:v77 forKeyedSubscript:v65];
          }
          unint64_t v78 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(a1, v54);
          uint64_t v79 = (uint64_t *)HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsForSource(a1, v78);
          HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(v79, (double *)&v123, v53 == 0);
          LOBYTE(v53) = 1;
          goto LABEL_87;
        }
        if (v25 - *((double *)&v123 + 1) < 0.01)
        {
          LOBYTE(v125) = 0;
          goto LABEL_62;
        }
        uint64_t v48 = *((void *)&v124 + 1);
        char v50 = BYTE1(v125);
        *(double *)&long long v124 = v25;
        double v51 = v25;
        int v49 = v125;
        if ((_BYTE)v125) {
          goto LABEL_57;
        }
LABEL_62:
        double v55 = *(long long **)(a1 + 104);
        unint64_t v56 = *(void *)(a1 + 112);
        if ((unint64_t)v55 < v56)
        {
          long long v57 = *(_OWORD *)v44;
          long long v58 = *(_OWORD *)(v44 + 32);
          v55[1] = *(_OWORD *)(v44 + 16);
          v55[2] = v58;
          *double v55 = v57;
          uint64_t v59 = v55 + 3;
          goto LABEL_107;
        }
        unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (unsigned char *)*v121) >> 4);
        unint64_t v61 = v60 + 1;
        if (v60 + 1 > 0x555555555555555) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - (void)*v121) >> 4);
        if (2 * v62 > v61) {
          unint64_t v61 = 2 * v62;
        }
        if (v62 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v63 = 0x555555555555555;
        }
        else {
          unint64_t v63 = v61;
        }
        if (v63) {
          unint64_t v63 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v63);
        }
        else {
          uint64_t v64 = 0;
        }
        id v68 = (long long *)(v63 + 48 * v60);
        long long v69 = *(_OWORD *)v44;
        long long v70 = *(_OWORD *)(v44 + 32);
        v68[1] = *(_OWORD *)(v44 + 16);
        v68[2] = v70;
        *id v68 = v69;
        __int16 v72 = *(char **)(a1 + 96);
        uint64_t v71 = *(char **)(a1 + 104);
        uint64_t v73 = v68;
        if (v71 != v72)
        {
          do
          {
            long long v74 = *((_OWORD *)v71 - 3);
            long long v75 = *((_OWORD *)v71 - 2);
            *(long long *)((char *)v73 - 21) = *(_OWORD *)(v71 - 21);
            *(v73 - 3) = v74;
            *(v73 - 2) = v75;
            v73 -= 3;
            v71 -= 48;
          }
          while (v71 != v72);
          uint64_t v71 = (char *)*v121;
        }
        uint64_t v59 = v68 + 3;
        *(void *)(a1 + 96) = v73;
        *(void *)(a1 + 104) = v68 + 3;
        *(void *)(a1 + 112) = v63 + 48 * v64;
        if (v71)
        {
          long long v76 = v71;
          goto LABEL_106;
        }
LABEL_107:
        *(void *)(a1 + 104) = v59;
LABEL_108:
        v44 += 48;
        if ((long long *)v44 == v7) {
          goto LABEL_109;
        }
        continue;
      }
    }
    double v9 = *(double *)(v6 + 8);
    double v10 = *(double *)(v6 + 16);
    uint64_t v11 = *(void *)(v6 + 24);
    char v12 = *(unsigned char *)(v6 + 32);
    char v13 = *(unsigned char *)(v6 + 33);
    if (a2 - v9 >= 0.01)
    {
      if (v10 - v9 - (a2 - v9) < 0.01)
      {
        uint64_t v40 = 0;
        char v41 = 0;
        double v16 = 0.0;
        double v15 = *(double *)(v6 + 16);
        char v14 = *(unsigned char *)(v6 + 32);
        double v10 = 0.0;
        char v12 = 0;
LABEL_120:
        int v96 = *(unsigned __int8 *)(v6 + 42);
        int v97 = *(unsigned __int8 *)(v6 + 41);
        int v98 = *(unsigned __int8 *)(v6 + 40);
        uint64_t v99 = *(void *)v6;
        *((void *)&v123 + 1) = *(void *)(v6 + 8);
        *(double *)&long long v124 = v15;
        *((void *)&v124 + 1) = v11;
        LOBYTE(v125) = v14;
        BYTE1(v125) = v13;
        *(_DWORD *)((char *)&v125 + 2) = *(_DWORD *)(v6 + 34);
        HIWORD(v125) = *(_WORD *)(v6 + 38);
        *((double *)&v126 + 1) = v16;
        *(double *)&long long v127 = v10;
        *((void *)&v127 + 1) = v40;
        LOBYTE(v128) = v12;
        HIBYTE(v128) = v41;
        *(void *)&long long v123 = v99;
        *(void *)&long long v126 = v99;
        HDRawQuantitySample::applyMask((uint64_t)&v123, v117);
        BOOL v100 = v98 != 0;
        BOOL v101 = v97 != 0;
        BOOL v102 = v96 != 0;
        if ((_BYTE)v125)
        {
          HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(v115, (double *)&v123, v96 == 0);
          if (*(unsigned char *)(a1 + 25))
          {
            unint64_t v103 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(a1, *((unint64_t *)&v124 + 1));
            int v104 = (uint64_t *)HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsForSource(a1, v103);
            HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(v104, (double *)&v123, v97 == 0);
          }
          BOOL v100 = 1;
          BOOL v101 = 1;
          BOOL v102 = 1;
        }
        if ((_BYTE)v128)
        {
          LOWORD(v122) = v128;
          long long v105 = v127;
          uint64_t v106 = (char *)*v121;
          *(_OWORD *)uint64_t v106 = v126;
          *((_OWORD *)v106 + 1) = v105;
          *((void *)v106 + 4) = v122;
          v106[40] = v100;
          v106[41] = v101;
          v106[42] = v102;
        }
        else
        {
          *(void *)(a1 + 104) = *(void *)(a1 + 96);
        }
        goto LABEL_127;
      }
      double v15 = a2;
      char v14 = *(unsigned char *)(v6 + 32);
      double v16 = a2;
    }
    else
    {
      char v14 = 0;
      double v15 = *(double *)(v6 + 16);
      double v16 = *(double *)(v6 + 8);
    }
    uint64_t v40 = *(void *)(v6 + 24);
    char v41 = *(unsigned char *)(v6 + 33);
    goto LABEL_120;
  }
}

void sub_1BD09D7E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(uint64_t *result, double *a2, int a3)
{
  double v5 = result;
  int v6 = 2 * (*a2 != -1.79769313e308);
  if (*a2 == 1.79769313e308) {
    int v6 = 1;
  }
  if (!v6)
  {
    if (*(_DWORD *)result || result[5]) {
      return result;
    }
    HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::addSample((uint64_t)(result + 1), a2, a3);
    uint64_t v7 = v5 + 18;
    goto LABEL_26;
  }
  if (v6 == 1)
  {
    if (*(_DWORD *)result) {
      return result;
    }
    *(_DWORD *)BOOL result = 1;
    *(_OWORD *)(result + 1) = 0u;
    char v14 = result + 19;
    char v13 = (void *)result[19];
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 5) = 0u;
    *(_OWORD *)(v5 + 7) = 0u;
    *(_OWORD *)(v5 + 9) = 0u;
    *(_OWORD *)(v5 + 11) = 0u;
    *(_OWORD *)(v5 + 13) = 0u;
    *(_OWORD *)(v5 + 15) = 0u;
    *(_OWORD *)(v5 + 17) = 0u;
    if (v13)
    {
      v5[20] = (uint64_t)v13;
      operator delete(v13);
      int v15 = *((unsigned __int8 *)v5 + 80);
      *char v14 = 0u;
      *(_OWORD *)(v5 + 21) = 0u;
      if (v15 && *((double *)v5 + 7) > *((double *)v5 + 24)) {
        goto LABEL_25;
      }
    }
    else
    {
      *char v14 = 0uLL;
      *(_OWORD *)(v5 + 21) = 0uLL;
    }
    long long v17 = *(_OWORD *)(v5 + 25);
    *((_OWORD *)v5 + 3) = *(_OWORD *)(v5 + 23);
    *((_OWORD *)v5 + 4) = v17;
    *((_WORD *)v5 + 40) = *((_WORD *)v5 + 108);
    goto LABEL_25;
  }
  if (v6 != 2) {
    return result;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_OWORD *)(result + 1) = 0u;
    *(_DWORD *)BOOL result = 2;
    uint64_t v11 = result + 19;
    double v10 = (void *)result[19];
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 5) = 0u;
    *(_OWORD *)(v5 + 7) = 0u;
    *(_OWORD *)(v5 + 9) = 0u;
    *(_OWORD *)(v5 + 11) = 0u;
    *(_OWORD *)(v5 + 13) = 0u;
    *(_OWORD *)(v5 + 15) = 0u;
    *(_OWORD *)(v5 + 17) = 0u;
    if (v10)
    {
      v5[20] = (uint64_t)v10;
      operator delete(v10);
      int v12 = *((unsigned __int8 *)v5 + 80);
      *uint64_t v11 = 0u;
      *(_OWORD *)(v5 + 21) = 0u;
      if (v12 && *((double *)v5 + 7) > *((double *)v5 + 24)) {
        goto LABEL_25;
      }
    }
    else
    {
      *uint64_t v11 = 0uLL;
      *(_OWORD *)(v5 + 21) = 0uLL;
    }
    long long v16 = *(_OWORD *)(v5 + 25);
    *((_OWORD *)v5 + 3) = *(_OWORD *)(v5 + 23);
    *((_OWORD *)v5 + 4) = v16;
    *((_WORD *)v5 + 40) = *((_WORD *)v5 + 108);
LABEL_25:
    HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::addSample((uint64_t)(v5 + 1), a2, a3);
    uint64_t v7 = v5 + 18;
LABEL_26:
    unint64_t v8 = (const HDRawQuantitySample *)a2;
    int v9 = a3;
    goto LABEL_27;
  }
  HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::addSample((uint64_t)(result + 1), a2, 1);
  uint64_t v7 = v5 + 18;
  unint64_t v8 = (const HDRawQuantitySample *)a2;
  int v9 = 1;
LABEL_27:

  return HDStatisticsTimeInterval::addSample(v7, v8, v9);
}

uint64_t **HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = a2;
  double v3 = *(void **)(a1 + 352);
  if (!v3) {
    goto LABEL_11;
  }
  double v4 = (uint64_t **)(a1 + 352);
  do
  {
    uint64_t v5 = v3[4];
    BOOL v6 = v5 < a2;
    if (v5 >= a2) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = v3 + 1;
    }
    if (!v6) {
      double v4 = (uint64_t **)v3;
    }
    double v3 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t **)(a1 + 352) || (uint64_t)v4[4] > a2)
  {
LABEL_11:
    unint64_t v8 = (uint64_t **)(a1 + 344);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 344), a2, &v10);
    double v4 = std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v8, a2, &v10);
  }
  return v4 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    uint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((void *)(a1 + 432), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a1, a2);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      id v10 = v6;
      uint64_t v7 = (void *)(a1 + 472);
      unint64_t v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        uint64_t v11 = &v10;
        *((void *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        id v6 = v10;
      }
    }
  }
  return a2;
}

void sub_1BD09DC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  double v4 = (id *)(a1 + 88);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    id v6 = (void *)(a1 + 512);
    uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
    if (v7)
    {
      id v8 = (id)v7[3];
    }
    else
    {
      id v9 = objc_loadWeakRetained(v4);
      id v8 = [v9 bundleIdentifierForSourceID:a2];

      if (v8)
      {
        id v10 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
        objc_storeStrong(v10 + 3, v8);
      }
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1BD09DCE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::addSample(uint64_t result, double *a2, int a3)
{
  if (!*(unsigned char *)(result + 112))
  {
    double v10 = a2[2] - a2[1] + 22.5;
    double v8 = *(double *)(result + 128) + v10;
    double v9 = *(double *)(result + 120) + v10 * (*a2 - *(double *)(result + 120)) / v8;
    goto LABEL_5;
  }
  double v3 = a2[1];
  double v4 = v3 - *(double *)(result + 96);
  if (v4 > 45.0)
  {
    double v5 = *(double *)(result + 128) + 22.5;
    double v6 = *(double *)(result + 120) + (*(double *)(result + 80) - *(double *)(result + 120)) * 22.5 / v5;
    double v7 = a2[2] - v3 + 22.5;
    double v8 = v5 + v7;
    double v9 = v6 + v7 * (*a2 - v6) / (v5 + v7);
LABEL_5:
    *(double *)(result + 128) = v8;
    goto LABEL_7;
  }
  double v11 = v4 + *(double *)(result + 128);
  double v12 = *(double *)(result + 120) + v4 * ((*a2 + *(double *)(result + 80)) * 0.5 - *(double *)(result + 120)) / v11;
  double v13 = a2[2] - v3;
  double v14 = v11 + v13;
  double v9 = v12 + v13 * (*a2 - v12) / (v11 + v13);
  *(double *)(result + 128) = v14;
LABEL_7:
  *(double *)(result + 120) = v9;
  long long v15 = *(_OWORD *)a2;
  long long v16 = *((_OWORD *)a2 + 1);
  *(_WORD *)(result + 112) = *((_WORD *)a2 + 16);
  *(_OWORD *)(result + 80) = v15;
  *(_OWORD *)(result + 96) = v16;
  if (a3) {
    ++*(void *)(result + 32);
  }
  uint64_t v17 = *(void *)(result + 24);
  if (v17)
  {
    double v18 = *(double *)(result + 16);
    if (v18 >= *a2) {
      double v18 = *a2;
    }
    *(double *)(result + 16) = v18;
    double v19 = *(double *)(result + 8);
    if (*a2 >= v19) {
      double v19 = *a2;
    }
    uint64_t v20 = v17 + 1;
    *(double *)BOOL result = *(double *)result + (*a2 - *(double *)result) / (double)v20;
    *(double *)(result + 8) = v19;
  }
  else
  {
    double v21 = *a2;
    *(double *)(result + 8) = *a2;
    *(double *)(result + 16) = v21;
    *(double *)BOOL result = v21;
    uint64_t v20 = 1;
  }
  *(void *)(result + 24) = v20;
  return result;
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, void *a3)
{
  double v6 = a1 + 1;
  double v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        double v7 = (uint64_t **)v5;
        uint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        double v5 = *v7;
        double v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      double v5 = v7[1];
      if (!v5)
      {
        double v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    double v7 = a1 + 1;
LABEL_9:
    double v9 = (char *)operator new(0x108uLL);
    *((void *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    *(_OWORD *)(v9 + 136) = 0u;
    *(_OWORD *)(v9 + 152) = 0u;
    *(_OWORD *)(v9 + 168) = 0u;
    *(_OWORD *)(v9 + 184) = 0u;
    *(_OWORD *)(v9 + 200) = 0u;
    *(_OWORD *)(v9 + 216) = 0u;
    *(_OWORD *)(v9 + 232) = 0u;
    *(_OWORD *)(v9 + 248) = 0u;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    double v12 = a2 - 3;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 4);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v103 = *((void *)a2 - 3);
                uint64_t v104 = *(void *)(v13 + 24);
                if (v103 == v104) {
                  return;
                }
                long long v105 = *(char **)(*(void *)a3 + 408);
                uint64_t v106 = *(char **)(*(void *)a3 + 416);
                double v107 = v105;
                uint64_t v108 = v105;
                if (v105 == v106) {
                  goto LABEL_171;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)v13, (long long *)(v13 + 48), a2 - 3, a3);
                return;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, (uint64_t)(a2 - 3), a3);
                return;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, v13 + 144, (uint64_t)(a2 - 3), a3);
                return;
              default:
                JUMPOUT(0);
            }
            do
            {
              if (*(void *)v108 == v103) {
                goto LABEL_168;
              }
              v108 += 8;
            }
            while (v108 != v106);
            uint64_t v108 = *(char **)(*(void *)a3 + 416);
LABEL_168:
            while (*(void *)v107 != v104)
            {
              v107 += 8;
              if (v107 == v106)
              {
                double v107 = *(char **)(*(void *)a3 + 416);
                break;
              }
            }
LABEL_171:
            if (v108 - v105 < v107 - v105)
            {
              *(_OWORD *)v226 = *(_OWORD *)(v13 + 16);
              *(_OWORD *)&v226[16] = *(_OWORD *)(v13 + 32);
              long long v218 = *(_OWORD *)v13;
              long long v109 = *v12;
              long long v110 = *(a2 - 2);
              *(_OWORD *)(v13 + 27) = *(long long *)((char *)a2 - 21);
              *(_OWORD *)unint64_t v13 = v109;
              *(_OWORD *)(v13 + 16) = v110;
              *(long long *)((char *)a2 - 21) = *(_OWORD *)&v226[11];
              long long *v12 = v218;
              *(a2 - 2) = *(_OWORD *)v226;
            }
            return;
          }
          if (v14 <= 1151)
          {
            int v111 = (long long *)(v13 + 48);
            BOOL v113 = (long long *)v13 == a2 || v111 == a2;
            if (a5)
            {
              if (!v113)
              {
                unint64_t v114 = v13;
                do
                {
                  unint64_t v115 = v114;
                  unint64_t v114 = (unint64_t)v111;
                  uint64_t v116 = *(void *)(v115 + 72);
                  uint64_t v117 = *(void *)(v115 + 24);
                  if (v116 != v117)
                  {
                    char v118 = *(char **)(*(void *)a3 + 408);
                    char v119 = *(char **)(*(void *)a3 + 416);
                    uint64_t v120 = v118;
                    long long v121 = v118;
                    if (v118 != v119)
                    {
                      do
                      {
                        if (*(void *)v121 == v116) {
                          goto LABEL_196;
                        }
                        v121 += 8;
                      }
                      while (v121 != v119);
                      long long v121 = *(char **)(*(void *)a3 + 416);
LABEL_196:
                      while (*(void *)v120 != v117)
                      {
                        v120 += 8;
                        if (v120 == v119)
                        {
                          uint64_t v120 = *(char **)(*(void *)a3 + 416);
                          break;
                        }
                      }
                    }
                    if (v121 - v118 < v120 - v118)
                    {
                      uint64_t v227 = *(void *)(v114 + 16);
                      long long v219 = *(_OWORD *)v114;
                      long long v236 = *(_OWORD *)(v115 + 80);
                      unint64_t v122 = v114;
                      while (1)
                      {
                        long long v123 = *(_OWORD *)(v115 + 16);
                        *(_OWORD *)unint64_t v122 = *(_OWORD *)v115;
                        *(_OWORD *)(v122 + 16) = v123;
                        *(_OWORD *)(v122 + 27) = *(_OWORD *)(v115 + 27);
                        if (v115 == v13) {
                          break;
                        }
                        unint64_t v122 = v115;
                        uint64_t v124 = *(void *)(v115 - 24);
                        if (v116 != v124)
                        {
                          uint64_t v125 = *(char **)(*(void *)a3 + 408);
                          long long v126 = *(char **)(*(void *)a3 + 416);
                          long long v127 = v125;
                          __int16 v128 = v125;
                          if (v125 != v126)
                          {
                            do
                            {
                              if (*(void *)v128 == v116) {
                                goto LABEL_208;
                              }
                              v128 += 8;
                            }
                            while (v128 != v126);
                            __int16 v128 = *(char **)(*(void *)a3 + 416);
LABEL_208:
                            while (*(void *)v127 != v124)
                            {
                              v127 += 8;
                              if (v127 == v126)
                              {
                                long long v127 = *(char **)(*(void *)a3 + 416);
                                break;
                              }
                            }
                          }
                          unint64_t v115 = v122 - 48;
                          if (v128 - v125 < v127 - v125) {
                            continue;
                          }
                        }
                        goto LABEL_212;
                      }
                      unint64_t v122 = v13;
LABEL_212:
                      *(_OWORD *)unint64_t v122 = v219;
                      *(void *)(v122 + 16) = v227;
                      *(void *)(v122 + 24) = v116;
                      *(void *)(v122 + 32) = v236;
                      *(_DWORD *)(v122 + 39) = *(_DWORD *)((char *)&v236 + 7);
                    }
                  }
                  int v111 = (long long *)(v114 + 48);
                }
                while ((long long *)(v114 + 48) != a2);
              }
            }
            else if (!v113)
            {
              do
              {
                unint64_t v201 = a1;
                a1 = (unint64_t)v111;
                uint64_t v202 = *(void *)(v201 + 72);
                uint64_t v203 = *(void *)(v201 + 24);
                if (v202 != v203)
                {
                  v204 = *(char **)(*(void *)a3 + 408);
                  v205 = *(char **)(*(void *)a3 + 416);
                  v206 = v204;
                  v207 = v204;
                  if (v204 != v205)
                  {
                    do
                    {
                      if (*(void *)v207 == v202) {
                        goto LABEL_312;
                      }
                      v207 += 8;
                    }
                    while (v207 != v205);
                    v207 = *(char **)(*(void *)a3 + 416);
LABEL_312:
                    while (*(void *)v206 != v203)
                    {
                      v206 += 8;
                      if (v206 == v205)
                      {
                        v206 = *(char **)(*(void *)a3 + 416);
                        break;
                      }
                    }
                  }
                  if (v207 - v204 < v206 - v204)
                  {
                    uint64_t v230 = *(void *)(a1 + 16);
                    long long v222 = *(_OWORD *)a1;
                    long long v239 = *(_OWORD *)(v201 + 80);
                    unint64_t v208 = a1;
                    do
                    {
                      v209 = (_OWORD *)v208;
                      unint64_t v208 = v201;
                      long long v210 = *(_OWORD *)(v201 + 16);
                      _OWORD *v209 = *(_OWORD *)v201;
                      v209[1] = v210;
                      *(_OWORD *)((char *)v209 + 27) = *(_OWORD *)(v201 + 27);
                      uint64_t v211 = *(void *)(v201 - 24);
                      if (v202 == v211) {
                        break;
                      }
                      v212 = *(char **)(*(void *)a3 + 408);
                      v213 = *(char **)(*(void *)a3 + 416);
                      v214 = v212;
                      v215 = v212;
                      if (v212 != v213)
                      {
                        do
                        {
                          if (*(void *)v215 == v202) {
                            goto LABEL_322;
                          }
                          v215 += 8;
                        }
                        while (v215 != v213);
                        v215 = *(char **)(*(void *)a3 + 416);
LABEL_322:
                        while (*(void *)v214 != v211)
                        {
                          v214 += 8;
                          if (v214 == v213)
                          {
                            v214 = *(char **)(*(void *)a3 + 416);
                            break;
                          }
                        }
                      }
                      unint64_t v201 = v208 - 48;
                    }
                    while (v215 - v212 < v214 - v212);
                    *(_OWORD *)unint64_t v208 = v222;
                    *(void *)(v208 + 16) = v230;
                    *(void *)(v208 + 24) = v202;
                    *(void *)(v208 + 32) = v239;
                    *(_DWORD *)(v208 + 39) = *(_DWORD *)((char *)&v239 + 7);
                  }
                }
                int v111 = (long long *)(a1 + 48);
              }
              while ((long long *)(a1 + 48) != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((long long *)v13 != a2)
            {
              int64_t v129 = (v15 - 2) >> 1;
              int64_t v130 = v129;
              do
              {
                int64_t v131 = v130;
                if (v129 >= v130)
                {
                  uint64_t v132 = (2 * v130) | 1;
                  unint64_t v133 = v13 + 48 * v132;
                  if (2 * v131 + 2 < (uint64_t)v15)
                  {
                    uint64_t v134 = *(void *)(v133 + 24);
                    uint64_t v135 = *(void *)(v133 + 72);
                    if (v134 != v135)
                    {
                      v137 = *(char **)(*(void *)a3 + 408);
                      v136 = *(char **)(*(void *)a3 + 416);
                      v138 = v137;
                      v139 = v137;
                      if (v137 != v136)
                      {
                        do
                        {
                          if (*(void *)v139 == v134) {
                            goto LABEL_224;
                          }
                          v139 += 8;
                        }
                        while (v139 != v136);
                        v139 = *(char **)(*(void *)a3 + 416);
LABEL_224:
                        while (*(void *)v138 != v135)
                        {
                          v138 += 8;
                          if (v138 == v136)
                          {
                            v138 = *(char **)(*(void *)a3 + 416);
                            break;
                          }
                        }
                      }
                      v133 += 48 * (v139 - v137 < v138 - v137);
                      if (v139 - v137 < v138 - v137) {
                        uint64_t v132 = 2 * v131 + 2;
                      }
                    }
                  }
                  unint64_t v140 = v13 + 48 * v131;
                  uint64_t v141 = *(void *)(v133 + 24);
                  uint64_t v142 = *(void *)(v140 + 24);
                  if (v141 == v142) {
                    goto LABEL_238;
                  }
                  v144 = *(char **)(*(void *)a3 + 408);
                  v143 = *(char **)(*(void *)a3 + 416);
                  v145 = v144;
                  v146 = v144;
                  if (v144 != v143)
                  {
                    do
                    {
                      if (*(void *)v146 == v141) {
                        goto LABEL_234;
                      }
                      v146 += 8;
                    }
                    while (v146 != v143);
                    v146 = *(char **)(*(void *)a3 + 416);
LABEL_234:
                    while (*(void *)v145 != v142)
                    {
                      v145 += 8;
                      if (v145 == v143)
                      {
                        v145 = *(char **)(*(void *)a3 + 416);
                        break;
                      }
                    }
                  }
                  if (v146 - v144 >= v145 - v144)
                  {
LABEL_238:
                    uint64_t v228 = *(void *)(v140 + 16);
                    long long v220 = *(_OWORD *)v140;
                    long long v237 = *(_OWORD *)(v140 + 32);
                    long long v147 = *(_OWORD *)v133;
                    long long v148 = *(_OWORD *)(v133 + 16);
                    *(_OWORD *)(v140 + 27) = *(_OWORD *)(v133 + 27);
                    *(_OWORD *)unint64_t v140 = v147;
                    *(_OWORD *)(v140 + 16) = v148;
                    if (v129 >= v132)
                    {
                      while (1)
                      {
                        uint64_t v150 = 2 * v132;
                        uint64_t v132 = (2 * v132) | 1;
                        unint64_t v149 = v13 + 48 * v132;
                        uint64_t v151 = v150 + 2;
                        if (v151 < (uint64_t)v15)
                        {
                          uint64_t v152 = *(void *)(v149 + 24);
                          uint64_t v153 = *(void *)(v149 + 72);
                          if (v152 != v153)
                          {
                            v154 = *(char **)(*(void *)a3 + 408);
                            v155 = *(char **)(*(void *)a3 + 416);
                            v156 = v154;
                            v157 = v154;
                            if (v154 != v155)
                            {
                              do
                              {
                                if (*(void *)v157 == v152) {
                                  goto LABEL_246;
                                }
                                v157 += 8;
                              }
                              while (v157 != v155);
                              v157 = *(char **)(*(void *)a3 + 416);
LABEL_246:
                              while (*(void *)v156 != v153)
                              {
                                v156 += 8;
                                if (v156 == v155)
                                {
                                  v156 = *(char **)(*(void *)a3 + 416);
                                  break;
                                }
                              }
                            }
                            v149 += 48 * (v157 - v154 < v156 - v154);
                            if (v157 - v154 < v156 - v154) {
                              uint64_t v132 = v151;
                            }
                          }
                        }
                        uint64_t v158 = *(void *)(v149 + 24);
                        if (v158 != v142)
                        {
                          v160 = *(char **)(*(void *)a3 + 408);
                          v159 = *(char **)(*(void *)a3 + 416);
                          v161 = v160;
                          v162 = v160;
                          if (v160 != v159)
                          {
                            do
                            {
                              if (*(void *)v162 == v158) {
                                goto LABEL_256;
                              }
                              v162 += 8;
                            }
                            while (v162 != v159);
                            v162 = *(char **)(*(void *)a3 + 416);
LABEL_256:
                            while (*(void *)v161 != v142)
                            {
                              v161 += 8;
                              if (v161 == v159)
                              {
                                v161 = *(char **)(*(void *)a3 + 416);
                                break;
                              }
                            }
                          }
                          if (v162 - v160 < v161 - v160) {
                            break;
                          }
                        }
                        long long v163 = *(_OWORD *)v149;
                        long long v164 = *(_OWORD *)(v149 + 16);
                        *(_OWORD *)(v133 + 27) = *(_OWORD *)(v149 + 27);
                        *(_OWORD *)unint64_t v133 = v163;
                        *(_OWORD *)(v133 + 16) = v164;
                        unint64_t v133 = v149;
                        if (v129 < v132) {
                          goto LABEL_261;
                        }
                      }
                    }
                    unint64_t v149 = v133;
LABEL_261:
                    *(_OWORD *)unint64_t v149 = v220;
                    *(void *)(v149 + 16) = v228;
                    *(void *)(v149 + 24) = v142;
                    *(void *)(v149 + 32) = v237;
                    *(_DWORD *)(v149 + 39) = *(_DWORD *)((char *)&v237 + 7);
                  }
                }
                int64_t v130 = v131 - 1;
              }
              while (v131);
              int64_t v165 = v14 / 0x30uLL;
              do
              {
                uint64_t v166 = 0;
                *(_OWORD *)v229 = *(_OWORD *)(v13 + 16);
                *(_OWORD *)&v229[16] = *(_OWORD *)(v13 + 32);
                long long v221 = *(_OWORD *)v13;
                uint64_t v167 = v165 - 2;
                if (v165 < 2) {
                  uint64_t v167 = v165 - 1;
                }
                uint64_t v168 = v167 >> 1;
                unint64_t v169 = v13;
                do
                {
                  v170 = (_OWORD *)v169;
                  v169 += 48 * v166 + 48;
                  uint64_t v171 = 2 * v166;
                  uint64_t v166 = (2 * v166) | 1;
                  uint64_t v172 = v171 + 2;
                  if (v171 + 2 < v165)
                  {
                    uint64_t v173 = *(void *)(v169 + 24);
                    uint64_t v174 = *(void *)(v169 + 72);
                    if (v173 != v174)
                    {
                      v176 = *(char **)(*(void *)a3 + 408);
                      v175 = *(char **)(*(void *)a3 + 416);
                      v177 = v176;
                      v178 = v176;
                      if (v176 != v175)
                      {
                        do
                        {
                          if (*(void *)v178 == v173) {
                            goto LABEL_273;
                          }
                          v178 += 8;
                        }
                        while (v178 != v175);
                        v178 = *(char **)(*(void *)a3 + 416);
LABEL_273:
                        while (*(void *)v177 != v174)
                        {
                          v177 += 8;
                          if (v177 == v175)
                          {
                            v177 = *(char **)(*(void *)a3 + 416);
                            break;
                          }
                        }
                      }
                      v169 += 48 * (v178 - v176 < v177 - v176);
                      if (v178 - v176 < v177 - v176) {
                        uint64_t v166 = v172;
                      }
                    }
                  }
                  long long v179 = *(_OWORD *)v169;
                  long long v180 = *(_OWORD *)(v169 + 16);
                  *(_OWORD *)((char *)v170 + 27) = *(_OWORD *)(v169 + 27);
                  _OWORD *v170 = v179;
                  v170[1] = v180;
                }
                while (v166 <= v168);
                a2 -= 3;
                if ((long long *)v169 == a2)
                {
                  *(_OWORD *)(v169 + 27) = *(_OWORD *)&v229[11];
                  *(_OWORD *)unint64_t v169 = v221;
                  *(_OWORD *)(v169 + 16) = *(_OWORD *)v229;
                }
                else
                {
                  long long v181 = *a2;
                  long long v182 = a2[1];
                  *(_OWORD *)(v169 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v169 = v181;
                  *(_OWORD *)(v169 + 16) = v182;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v229[11];
                  *a2 = v221;
                  a2[1] = *(_OWORD *)v229;
                  uint64_t v183 = v169 - v13 + 48;
                  if (v183 >= 49)
                  {
                    unint64_t v184 = (v183 / 0x30uLL - 2) >> 1;
                    unint64_t v185 = v13 + 48 * v184;
                    uint64_t v186 = *(void *)(v185 + 24);
                    uint64_t v187 = *(void *)(v169 + 24);
                    if (v186 != v187)
                    {
                      v189 = *(char **)(*(void *)a3 + 408);
                      v188 = *(char **)(*(void *)a3 + 416);
                      v190 = v189;
                      v191 = v189;
                      if (v189 != v188)
                      {
                        do
                        {
                          if (*(void *)v191 == v186) {
                            goto LABEL_286;
                          }
                          v191 += 8;
                        }
                        while (v191 != v188);
                        v191 = *(char **)(*(void *)a3 + 416);
LABEL_286:
                        while (*(void *)v190 != v187)
                        {
                          v190 += 8;
                          if (v190 == v188)
                          {
                            v190 = *(char **)(*(void *)a3 + 416);
                            break;
                          }
                        }
                      }
                      if (v191 - v189 < v190 - v189)
                      {
                        uint64_t v242 = *(void *)(v169 + 16);
                        long long v238 = *(_OWORD *)v169;
                        long long v233 = *(_OWORD *)(v169 + 32);
                        do
                        {
                          v192 = (_OWORD *)v169;
                          unint64_t v169 = v185;
                          long long v193 = *(_OWORD *)v185;
                          long long v194 = *(_OWORD *)(v185 + 16);
                          *(_OWORD *)((char *)v192 + 27) = *(_OWORD *)(v185 + 27);
                          _OWORD *v192 = v193;
                          v192[1] = v194;
                          if (!v184) {
                            break;
                          }
                          unint64_t v184 = (v184 - 1) >> 1;
                          unint64_t v185 = v13 + 48 * v184;
                          uint64_t v195 = *(void *)(v185 + 24);
                          if (v195 == v187) {
                            break;
                          }
                          v197 = *(char **)(*(void *)a3 + 408);
                          v196 = *(char **)(*(void *)a3 + 416);
                          v198 = v197;
                          v199 = v197;
                          if (v197 != v196)
                          {
                            do
                            {
                              if (*(void *)v199 == v195) {
                                goto LABEL_297;
                              }
                              v199 += 8;
                            }
                            while (v199 != v196);
                            v199 = *(char **)(*(void *)a3 + 416);
LABEL_297:
                            while (*(void *)v198 != v187)
                            {
                              v198 += 8;
                              if (v198 == v196)
                              {
                                v198 = *(char **)(*(void *)a3 + 416);
                                break;
                              }
                            }
                          }
                        }
                        while (v199 - v197 < v198 - v197);
                        *(_OWORD *)unint64_t v169 = v238;
                        *(void *)(v169 + 16) = v242;
                        *(void *)(v169 + 24) = v187;
                        *(void *)(v169 + 32) = v233;
                        *(_DWORD *)(v169 + 39) = *(_DWORD *)((char *)&v233 + 7);
                      }
                    }
                  }
                }
              }
              while (v165-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          uint64_t v17 = (long long *)(v13 + 48 * (v15 >> 1));
          if ((unint64_t)v14 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v15 >> 1)), a2 - 3, a3);
            uint64_t v18 = 3 * v16;
            double v19 = (long long *)(a1 + 48 * v16 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48), v19, a2 - 6, a3);
            uint64_t v20 = (long long *)(a1 + 48 + 16 * v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 96), v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v19, v17, v20, a3);
            *(_OWORD *)v223 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v223[16] = *(_OWORD *)(a1 + 32);
            long long v216 = *(_OWORD *)a1;
            long long v21 = *(long long *)((char *)v17 + 27);
            long long v22 = v17[1];
            *(_OWORD *)a1 = *v17;
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(a1 + 27) = v21;
            *(long long *)((char *)v17 + 27) = *(_OWORD *)&v223[11];
            long long *v17 = v216;
            v17[1] = *(_OWORD *)v223;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48 * (v15 >> 1)), (long long *)a1, a2 - 3, a3);
          }
          --a4;
          if (a5)
          {
            uint64_t v23 = *(void *)(a1 + 24);
            uint64_t v24 = *(void *)a3;
            break;
          }
          uint64_t v25 = *(void *)(a1 - 24);
          uint64_t v23 = *(void *)(a1 + 24);
          if (v25 != v23)
          {
            uint64_t v24 = *(void *)a3;
            double v26 = *(char **)(*(void *)a3 + 408);
            double v27 = *(char **)(*(void *)a3 + 416);
            double v28 = v26;
            double v29 = v26;
            if (v26 != v27)
            {
              do
              {
                if (*(void *)v29 == v25) {
                  goto LABEL_16;
                }
                v29 += 8;
              }
              while (v29 != v27);
              double v29 = *(char **)(*(void *)a3 + 416);
LABEL_16:
              while (*(void *)v28 != v23)
              {
                v28 += 8;
                if (v28 == v27)
                {
                  double v28 = *(char **)(*(void *)a3 + 416);
                  break;
                }
              }
            }
            if (v29 - v26 < v28 - v26) {
              break;
            }
          }
          uint64_t v241 = *(void *)(a1 + 16);
          long long v232 = *(_OWORD *)(a1 + 32);
          long long v235 = *(_OWORD *)a1;
          uint64_t v67 = *((void *)a2 - 3);
          if (v23 == v67) {
            goto LABEL_107;
          }
          id v68 = *(char **)(*(void *)a3 + 408);
          long long v69 = *(char **)(*(void *)a3 + 416);
          if (v68 == v69)
          {
            uint64_t v71 = *(char **)(*(void *)a3 + 408);
            long long v70 = v71;
          }
          else
          {
            long long v70 = *(char **)(*(void *)a3 + 408);
            while (*(void *)v70 != v23)
            {
              v70 += 8;
              if (v70 == v69)
              {
                long long v70 = *(char **)(*(void *)a3 + 416);
                break;
              }
            }
            uint64_t v71 = *(char **)(*(void *)a3 + 408);
            while (*(void *)v71 != v67)
            {
              v71 += 8;
              if (v71 == v69)
              {
                uint64_t v71 = *(char **)(*(void *)a3 + 416);
                break;
              }
            }
          }
          if (v70 - v68 >= v71 - v68)
          {
LABEL_107:
            unint64_t v13 = a1 + 48;
            if (a1 + 48 < (unint64_t)a2)
            {
              uint64_t v75 = *(void *)a3;
              unint64_t v76 = a1;
              do
              {
                uint64_t v77 = *(void *)(v76 + 72);
                unint64_t v76 = v13;
                if (v23 != v77)
                {
                  unint64_t v78 = *(char **)(v75 + 408);
                  uint64_t v79 = *(char **)(v75 + 416);
                  BOOL v80 = v78;
                  unint64_t v81 = v78;
                  if (v78 != v79)
                  {
                    do
                    {
                      if (*(void *)v81 == v23) {
                        goto LABEL_114;
                      }
                      v81 += 8;
                    }
                    while (v81 != v79);
                    unint64_t v81 = *(char **)(v75 + 416);
LABEL_114:
                    while (*(void *)v80 != v77)
                    {
                      v80 += 8;
                      if (v80 == v79)
                      {
                        BOOL v80 = *(char **)(v75 + 416);
                        break;
                      }
                    }
                  }
                  if (v81 - v78 < v80 - v78) {
                    break;
                  }
                }
                v13 += 48;
              }
              while (v76 + 48 < (unint64_t)a2);
            }
          }
          else
          {
            unint64_t v13 = a1;
            do
            {
              do
              {
                uint64_t v72 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v72);
              if (v68 == v69)
              {
                long long v74 = *(char **)(*(void *)a3 + 408);
                uint64_t v73 = v74;
              }
              else
              {
                uint64_t v73 = *(char **)(*(void *)a3 + 408);
                while (*(void *)v73 != v23)
                {
                  v73 += 8;
                  if (v73 == v69)
                  {
                    uint64_t v73 = *(char **)(*(void *)a3 + 416);
                    break;
                  }
                }
                long long v74 = *(char **)(*(void *)a3 + 408);
                while (*(void *)v74 != v72)
                {
                  v74 += 8;
                  if (v74 == v69)
                  {
                    long long v74 = *(char **)(*(void *)a3 + 416);
                    break;
                  }
                }
              }
            }
            while (v73 - v68 >= v74 - v68);
          }
          long long v82 = a2;
          if (v13 < (unint64_t)a2)
          {
            uint64_t v83 = *(void *)a3;
            long long v82 = a2;
            do
            {
              uint64_t v84 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v84) {
                break;
              }
              unint64_t v85 = *(char **)(v83 + 408);
              unint64_t v86 = *(char **)(v83 + 416);
              uint64_t v87 = v85;
              unint64_t v88 = v85;
              if (v85 != v86)
              {
                do
                {
                  if (*(void *)v88 == v23) {
                    goto LABEL_126;
                  }
                  v88 += 8;
                }
                while (v88 != v86);
                unint64_t v88 = *(char **)(v83 + 416);
LABEL_126:
                while (*(void *)v87 != v84)
                {
                  v87 += 8;
                  if (v87 == v86)
                  {
                    uint64_t v87 = *(char **)(v83 + 416);
                    break;
                  }
                }
              }
            }
            while (v88 - v85 < v87 - v85);
          }
          while (v13 < (unint64_t)v82)
          {
            *(_OWORD *)v225 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v225[16] = *(_OWORD *)(v13 + 32);
            long long v217 = *(_OWORD *)v13;
            long long v89 = *v82;
            long long v90 = v82[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v82 + 27);
            *(_OWORD *)unint64_t v13 = v89;
            *(_OWORD *)(v13 + 16) = v90;
            *(long long *)((char *)v82 + 27) = *(_OWORD *)&v225[11];
            *long long v82 = v217;
            v82[1] = *(_OWORD *)v225;
            uint64_t v91 = *(void *)a3;
            do
            {
              do
              {
                uint64_t v92 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v92);
              id v93 = *(char **)(v91 + 408);
              id v94 = *(char **)(v91 + 416);
              if (v93 == v94)
              {
                int v96 = *(char **)(v91 + 408);
                BOOL v95 = v96;
              }
              else
              {
                BOOL v95 = *(char **)(v91 + 408);
                while (*(void *)v95 != v23)
                {
                  v95 += 8;
                  if (v95 == v94)
                  {
                    BOOL v95 = *(char **)(v91 + 416);
                    break;
                  }
                }
                int v96 = *(char **)(v91 + 408);
                while (*(void *)v96 != v92)
                {
                  v96 += 8;
                  if (v96 == v94)
                  {
                    int v96 = *(char **)(v91 + 416);
                    break;
                  }
                }
              }
            }
            while (v95 - v93 >= v96 - v93);
            do
            {
              uint64_t v97 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v97) {
                break;
              }
              if (v93 == v94)
              {
                uint64_t v99 = v93;
                int v98 = v93;
              }
              else
              {
                int v98 = v93;
                while (*(void *)v98 != v23)
                {
                  v98 += 8;
                  if (v98 == v94)
                  {
                    int v98 = v94;
                    break;
                  }
                }
                uint64_t v99 = v93;
                while (*(void *)v99 != v97)
                {
                  v99 += 8;
                  if (v99 == v94)
                  {
                    uint64_t v99 = v94;
                    break;
                  }
                }
              }
            }
            while (v98 - v93 < v99 - v93);
          }
          BOOL v100 = (long long *)(v13 - 48);
          BOOL v5 = v13 - 48 >= a1;
          BOOL v6 = v13 - 48 == a1;
          if (v13 - 48 != a1)
          {
            long long v101 = *v100;
            long long v102 = *(_OWORD *)(v13 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
            *(_OWORD *)a1 = v101;
            *(_OWORD *)(a1 + 16) = v102;
          }
          a5 = 0;
          *BOOL v100 = v235;
          *(void *)(v13 - 32) = v241;
          *(void *)(v13 - 24) = v23;
          *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v232 + 7);
          *(void *)(v13 - 16) = v232;
        }
        uint64_t v240 = *(void *)(a1 + 16);
        long long v231 = *(_OWORD *)(a1 + 32);
        long long v234 = *(_OWORD *)a1;
        unint64_t v30 = a1;
        do
        {
          unint64_t v31 = v30;
          v30 += 48;
          uint64_t v32 = *(void *)(v31 + 72);
          if (v32 == v23) {
            break;
          }
          id v33 = *(char **)(v24 + 408);
          long long v34 = *(char **)(v24 + 416);
          long long v35 = v33;
          long long v36 = v33;
          if (v33 != v34)
          {
            do
            {
              if (*(void *)v36 == v32) {
                goto LABEL_26;
              }
              v36 += 8;
            }
            while (v36 != v34);
            long long v36 = *(char **)(v24 + 416);
LABEL_26:
            while (*(void *)v35 != v23)
            {
              v35 += 8;
              if (v35 == v34)
              {
                long long v35 = *(char **)(v24 + 416);
                break;
              }
            }
          }
        }
        while (v36 - v33 < v35 - v33);
        unint64_t v37 = a2;
        if (v31 == a1)
        {
          unint64_t v37 = a2;
          if (v30 < (unint64_t)a2)
          {
            unint64_t v37 = a2;
            do
            {
              uint64_t v43 = *((void *)v37 - 3);
              v37 -= 3;
              if (v43 != v23)
              {
                unint64_t v44 = *(char **)(v24 + 408);
                long long v45 = *(char **)(v24 + 416);
                uint64_t v46 = v44;
                uint64_t v47 = v44;
                if (v44 != v45)
                {
                  do
                  {
                    if (*(void *)v47 == v43) {
                      goto LABEL_48;
                    }
                    v47 += 8;
                  }
                  while (v47 != v45);
                  uint64_t v47 = *(char **)(v24 + 416);
LABEL_48:
                  while (*(void *)v46 != v23)
                  {
                    v46 += 8;
                    if (v46 == v45)
                    {
                      uint64_t v46 = *(char **)(v24 + 416);
                      break;
                    }
                  }
                }
                if (v47 - v44 < v46 - v44) {
                  break;
                }
              }
            }
            while (v30 < (unint64_t)v37);
          }
        }
        else
        {
          do
          {
            do
            {
              uint64_t v38 = *((void *)v37 - 3);
              v37 -= 3;
            }
            while (v38 == v23);
            uint64_t v39 = *(char **)(v24 + 408);
            uint64_t v40 = *(char **)(v24 + 416);
            char v41 = v39;
            uint64_t v42 = v39;
            if (v39 != v40)
            {
              do
              {
                if (*(void *)v42 == v38) {
                  goto LABEL_36;
                }
                v42 += 8;
              }
              while (v42 != v40);
              uint64_t v42 = *(char **)(v24 + 416);
LABEL_36:
              while (*(void *)v41 != v23)
              {
                v41 += 8;
                if (v41 == v40)
                {
                  char v41 = *(char **)(v24 + 416);
                  break;
                }
              }
            }
          }
          while (v42 - v39 >= v41 - v39);
        }
        unint64_t v13 = v30;
        if (v30 < (unint64_t)v37)
        {
          uint64_t v48 = v37;
          do
          {
            *(_OWORD *)v224 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v224[16] = *(_OWORD *)(v13 + 32);
            long long v49 = *(_OWORD *)v13;
            long long v51 = *v48;
            long long v50 = v48[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v48 + 27);
            *(_OWORD *)unint64_t v13 = v51;
            *(_OWORD *)(v13 + 16) = v50;
            *(long long *)((char *)v48 + 27) = *(_OWORD *)&v224[11];
            long long *v48 = v49;
            v48[1] = *(_OWORD *)v224;
            uint64_t v52 = *(void *)a3;
            do
            {
              uint64_t v53 = *(void *)(v13 + 72);
              v13 += 48;
              if (v53 == v23) {
                break;
              }
              unint64_t v54 = *(char **)(v52 + 408);
              double v55 = *(char **)(v52 + 416);
              unint64_t v56 = v54;
              long long v57 = v54;
              if (v54 != v55)
              {
                do
                {
                  if (*(void *)v57 == v53) {
                    goto LABEL_61;
                  }
                  v57 += 8;
                }
                while (v57 != v55);
                long long v57 = *(char **)(v52 + 416);
LABEL_61:
                while (*(void *)v56 != v23)
                {
                  v56 += 8;
                  if (v56 == v55)
                  {
                    unint64_t v56 = *(char **)(v52 + 416);
                    break;
                  }
                }
              }
            }
            while (v57 - v54 < v56 - v54);
            do
            {
              do
              {
                uint64_t v58 = *((void *)v48 - 3);
                v48 -= 3;
              }
              while (v58 == v23);
              uint64_t v59 = *(char **)(v52 + 408);
              unint64_t v60 = *(char **)(v52 + 416);
              unint64_t v61 = v59;
              unint64_t v62 = v59;
              if (v59 != v60)
              {
                do
                {
                  if (*(void *)v62 == v58) {
                    goto LABEL_70;
                  }
                  v62 += 8;
                }
                while (v62 != v60);
                unint64_t v62 = *(char **)(v52 + 416);
LABEL_70:
                while (*(void *)v61 != v23)
                {
                  v61 += 8;
                  if (v61 == v60)
                  {
                    unint64_t v61 = *(char **)(v52 + 416);
                    break;
                  }
                }
              }
            }
            while (v62 - v59 >= v61 - v59);
          }
          while (v13 < (unint64_t)v48);
        }
        unint64_t v63 = (long long *)(v13 - 48);
        if (v13 - 48 != a1)
        {
          long long v64 = *v63;
          long long v65 = *(_OWORD *)(v13 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
          *(_OWORD *)a1 = v64;
          *(_OWORD *)(a1 + 16) = v65;
        }
        long long *v63 = v234;
        *(void *)(v13 - 32) = v240;
        *(void *)(v13 - 24) = v23;
        *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v231 + 7);
        *(void *)(v13 - 16) = v231;
        if (v30 >= (unint64_t)v37) {
          break;
        }
LABEL_80:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(a1, v13 - 48, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, v13 - 48, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v13, (uint64_t)a2, a3))
      {
        break;
      }
      if (!v66) {
        goto LABEL_80;
      }
    }
    a2 = (long long *)(v13 - 48);
    if (!v66) {
      continue;
    }
    break;
  }
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(long long *a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = *((void *)a2 + 3);
  uint64_t v5 = *((void *)a1 + 3);
  if (v4 == v5) {
    goto LABEL_23;
  }
  BOOL v6 = *(char **)(*(void *)a4 + 408);
  double v7 = *(char **)(*(void *)a4 + 416);
  if (v6 == v7)
  {
    double v9 = *(char **)(*(void *)a4 + 408);
    uint64_t v8 = v9;
  }
  else
  {
    uint64_t v8 = *(char **)(*(void *)a4 + 408);
    while (*(void *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        uint64_t v8 = *(char **)(*(void *)a4 + 416);
        break;
      }
    }
    double v9 = *(char **)(*(void *)a4 + 408);
    while (*(void *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        double v9 = *(char **)(*(void *)a4 + 416);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    uint64_t v13 = *((void *)a3 + 3);
    if (v13 != v4)
    {
      uint64_t v14 = *(char **)(*(void *)a4 + 408);
      unint64_t v15 = *(char **)(*(void *)a4 + 416);
      unint64_t v16 = v14;
      uint64_t v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(void *)v17 == v13) {
            goto LABEL_28;
          }
          v17 += 8;
        }
        while (v17 != v15);
        uint64_t v17 = *(char **)(*(void *)a4 + 416);
LABEL_28:
        while (*(void *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            unint64_t v16 = *(char **)(*(void *)a4 + 416);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        long long v18 = *a2;
        *(_OWORD *)uint64_t v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        long long v19 = *(long long *)((char *)a3 + 27);
        long long v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(long long *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        __n128 result = *(__n128 *)&v46[11];
        *(long long *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        uint64_t v22 = *((void *)a2 + 3);
        uint64_t v23 = *((void *)a1 + 3);
        if (v22 != v23)
        {
          uint64_t v24 = *(char **)(*(void *)a4 + 408);
          uint64_t v25 = *(char **)(*(void *)a4 + 416);
          double v26 = v24;
          double v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(void *)v27 == v22) {
                goto LABEL_37;
              }
              v27 += 8;
            }
            while (v27 != v25);
            double v27 = *(char **)(*(void *)a4 + 416);
LABEL_37:
            while (*(void *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                double v26 = *(char **)(*(void *)a4 + 416);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            long long v28 = *a1;
            *(_OWORD *)uint64_t v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            long long v29 = *(long long *)((char *)a2 + 27);
            long long v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(long long *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            __n128 result = *(__n128 *)&v47[11];
            *(long long *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    uint64_t v10 = *((void *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        double v12 = *(char **)(*(void *)a4 + 408);
        double v11 = v12;
      }
      else
      {
        double v11 = *(char **)(*(void *)a4 + 408);
        while (*(void *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            double v11 = *(char **)(*(void *)a4 + 416);
            break;
          }
        }
        double v12 = *(char **)(*(void *)a4 + 408);
        while (*(void *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            double v12 = *(char **)(*(void *)a4 + 416);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        long long v31 = a1[1];
        long long v32 = *a1;
        *(void *)long long v49 = *((void *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        long long v33 = *(long long *)((char *)a3 + 27);
        long long v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(long long *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        __n128 result = *(__n128 *)&v49[3];
        *(long long *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    long long v35 = *a1;
    *(_OWORD *)uint64_t v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    long long v36 = *(long long *)((char *)a2 + 27);
    long long v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(long long *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    __n128 result = *(__n128 *)&v48[11];
    *(long long *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    uint64_t v38 = *((void *)a3 + 3);
    uint64_t v39 = *((void *)a2 + 3);
    if (v38 != v39)
    {
      uint64_t v40 = *(char **)(*(void *)a4 + 408);
      char v41 = *(char **)(*(void *)a4 + 416);
      uint64_t v42 = v40;
      uint64_t v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(void *)v43 == v38) {
            goto LABEL_50;
          }
          v43 += 8;
        }
        while (v43 != v41);
        uint64_t v43 = *(char **)(*(void *)a4 + 416);
LABEL_50:
        while (*(void *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            uint64_t v42 = *(char **)(*(void *)a4 + 416);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        long long v31 = a2[1];
        long long v32 = *a2;
        *(void *)long long v49 = *((void *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        long long v44 = *(long long *)((char *)a3 + 27);
        long long v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(long long *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 - 24);
      uint64_t v9 = *(void *)(a1 + 24);
      if (v8 == v9) {
        return result;
      }
      uint64_t v10 = *(char **)(*(void *)a3 + 408);
      double v11 = *(char **)(*(void *)a3 + 416);
      double v12 = v10;
      uint64_t v13 = v10;
      if (v10 == v11) {
        goto LABEL_10;
      }
      do
      {
        if (*(void *)v13 == v8) {
          goto LABEL_7;
        }
        v13 += 8;
      }
      while (v13 != v11);
      uint64_t v13 = *(char **)(*(void *)a3 + 416);
      do
      {
LABEL_7:
        if (*(void *)v12 == v9) {
          goto LABEL_10;
        }
        v12 += 8;
      }
      while (v12 != v11);
      double v12 = *(char **)(*(void *)a3 + 416);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        uint64_t v14 = (long long *)(a2 - 48);
        long long v15 = *(_OWORD *)a1;
        *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        long long v16 = *(_OWORD *)(a2 - 21);
        long long v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *uint64_t v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(long long *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), a3);
      uint64_t v19 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      int v20 = 0;
      break;
  }
  while (1)
  {
    uint64_t v21 = *(void *)(v19 + 24);
    uint64_t v22 = *(void *)(v18 + 24);
    if (v21 != v22)
    {
      uint64_t v23 = *(char **)(*(void *)a3 + 408);
      uint64_t v24 = *(char **)(*(void *)a3 + 416);
      uint64_t v25 = v23;
      double v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(void *)v26 == v21) {
            goto LABEL_19;
          }
          v26 += 8;
        }
        while (v26 != v24);
        double v26 = *(char **)(*(void *)a3 + 416);
LABEL_19:
        while (*(void *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            uint64_t v25 = *(char **)(*(void *)a3 + 416);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        long long v34 = *(_OWORD *)v19;
        uint64_t v36 = *(void *)(v19 + 16);
        long long v37 = *(_OWORD *)(v19 + 32);
        uint64_t v27 = v19;
        while (1)
        {
          long long v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1) {
            break;
          }
          uint64_t v27 = v18;
          uint64_t v29 = *(void *)(v18 - 24);
          if (v21 != v29)
          {
            long long v30 = *(char **)(*(void *)a3 + 408);
            long long v31 = *(char **)(*(void *)a3 + 416);
            long long v32 = v30;
            long long v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(void *)v33 == v21) {
                  goto LABEL_30;
                }
                v33 += 8;
              }
              while (v33 != v31);
              long long v33 = *(char **)(*(void *)a3 + 416);
LABEL_30:
              while (*(void *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  long long v32 = *(char **)(*(void *)a3 + 416);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30) {
              continue;
            }
          }
          goto LABEL_36;
        }
        uint64_t v27 = a1;
LABEL_36:
        *(_OWORD *)uint64_t v27 = v34;
        *(void *)(v27 + 16) = v36;
        *(void *)(v27 + 24) = v21;
        *(void *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8) {
          return v19 + 48 == a2;
        }
      }
    }
    uint64_t v18 = v19;
    v19 += 48;
    if (v19 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)a2, (long long *)a3, a5).n128_u64[0];
  uint64_t v11 = *(void *)(a4 + 24);
  uint64_t v12 = *(void *)(a3 + 24);
  if (v11 != v12)
  {
    uint64_t v13 = *(char **)(*(void *)a5 + 408);
    uint64_t v14 = *(char **)(*(void *)a5 + 416);
    long long v15 = v13;
    long long v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(void *)v16 == v11) {
          goto LABEL_6;
        }
        v16 += 8;
      }
      while (v16 != v14);
      long long v16 = *(char **)(*(void *)a5 + 416);
LABEL_6:
      while (*(void *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          long long v15 = *(char **)(*(void *)a5 + 416);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      long long v17 = *(_OWORD *)a3;
      *(_OWORD *)uint64_t v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      long long v18 = *(_OWORD *)(a4 + 27);
      long long v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v38;
      __n128 result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      uint64_t v20 = *(void *)(a3 + 24);
      uint64_t v21 = *(void *)(a2 + 24);
      if (v20 != v21)
      {
        uint64_t v22 = *(char **)(*(void *)a5 + 408);
        uint64_t v23 = *(char **)(*(void *)a5 + 416);
        uint64_t v24 = v22;
        uint64_t v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(void *)v25 == v20) {
              goto LABEL_15;
            }
            v25 += 8;
          }
          while (v25 != v23);
          uint64_t v25 = *(char **)(*(void *)a5 + 416);
LABEL_15:
          while (*(void *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              uint64_t v24 = *(char **)(*(void *)a5 + 416);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          long long v26 = *(_OWORD *)a2;
          *(_OWORD *)uint64_t v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          long long v27 = *(_OWORD *)(a3 + 27);
          long long v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 16) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)v39;
          __n128 result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          uint64_t v29 = *(void *)(a2 + 24);
          uint64_t v30 = *(void *)(a1 + 24);
          if (v29 != v30)
          {
            long long v31 = *(char **)(*(void *)a5 + 408);
            long long v32 = *(char **)(*(void *)a5 + 416);
            long long v33 = v31;
            long long v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(void *)v34 == v29) {
                  goto LABEL_24;
                }
                v34 += 8;
              }
              while (v34 != v32);
              long long v34 = *(char **)(*(void *)a5 + 416);
LABEL_24:
              while (*(void *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  long long v33 = *(char **)(*(void *)a5 + 416);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              long long v35 = *(_OWORD *)a1;
              *(_OWORD *)uint64_t v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              long long v36 = *(_OWORD *)(a2 + 27);
              long long v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 16) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 16) = *(_OWORD *)v40;
              __n128 result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  uint64_t v13 = *(void *)(a5 + 24);
  uint64_t v14 = *(void *)(a4 + 24);
  if (v13 != v14)
  {
    long long v15 = *(char **)(*(void *)a6 + 408);
    long long v16 = *(char **)(*(void *)a6 + 416);
    long long v17 = v15;
    long long v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(void *)v18 == v13) {
          goto LABEL_6;
        }
        v18 += 8;
      }
      while (v18 != v16);
      long long v18 = *(char **)(*(void *)a6 + 416);
LABEL_6:
      while (*(void *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          long long v17 = *(char **)(*(void *)a6 + 416);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      long long v19 = *(_OWORD *)a4;
      *(_OWORD *)long long v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      long long v20 = *(_OWORD *)(a5 + 27);
      long long v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 16) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v49;
      __n128 result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      uint64_t v22 = *(void *)(a4 + 24);
      uint64_t v23 = *(void *)(a3 + 24);
      if (v22 != v23)
      {
        uint64_t v24 = *(char **)(*(void *)a6 + 408);
        uint64_t v25 = *(char **)(*(void *)a6 + 416);
        long long v26 = v24;
        long long v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(void *)v27 == v22) {
              goto LABEL_15;
            }
            v27 += 8;
          }
          while (v27 != v25);
          long long v27 = *(char **)(*(void *)a6 + 416);
LABEL_15:
          while (*(void *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              long long v26 = *(char **)(*(void *)a6 + 416);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          long long v28 = *(_OWORD *)a3;
          *(_OWORD *)long long v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          long long v29 = *(_OWORD *)(a4 + 27);
          long long v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 16) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 16) = *(_OWORD *)v50;
          __n128 result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          uint64_t v31 = *(void *)(a3 + 24);
          uint64_t v32 = *(void *)(a2 + 24);
          if (v31 != v32)
          {
            long long v33 = *(char **)(*(void *)a6 + 408);
            long long v34 = *(char **)(*(void *)a6 + 416);
            long long v35 = v33;
            long long v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(void *)v36 == v31) {
                  goto LABEL_24;
                }
                v36 += 8;
              }
              while (v36 != v34);
              long long v36 = *(char **)(*(void *)a6 + 416);
LABEL_24:
              while (*(void *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  long long v35 = *(char **)(*(void *)a6 + 416);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              long long v37 = *(_OWORD *)a2;
              *(_OWORD *)long long v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              long long v38 = *(_OWORD *)(a3 + 27);
              long long v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 16) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 16) = *(_OWORD *)v51;
              __n128 result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              uint64_t v40 = *(void *)(a2 + 24);
              uint64_t v41 = *(void *)(a1 + 24);
              if (v40 != v41)
              {
                uint64_t v42 = *(char **)(*(void *)a6 + 408);
                uint64_t v43 = *(char **)(*(void *)a6 + 416);
                long long v44 = v42;
                long long v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(void *)v45 == v40) {
                      goto LABEL_33;
                    }
                    v45 += 8;
                  }
                  while (v45 != v43);
                  long long v45 = *(char **)(*(void *)a6 + 416);
LABEL_33:
                  while (*(void *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      long long v44 = *(char **)(*(void *)a6 + 416);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  long long v46 = *(_OWORD *)a1;
                  *(_OWORD *)uint64_t v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  long long v47 = *(_OWORD *)(a2 + 27);
                  long long v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 16) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 16) = *(_OWORD *)v52;
                  __n128 result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v10) >> 4);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*((double *)a2 - 5) < *(double *)(v10 + 8))
                {
                  *(_OWORD *)char v118 = *(_OWORD *)(v10 + 16);
                  *(_OWORD *)&v118[16] = *(_OWORD *)(v10 + 32);
                  long long v110 = *(_OWORD *)v10;
                  long long v52 = *(a2 - 3);
                  long long v53 = *(a2 - 2);
                  *(_OWORD *)(v10 + 27) = *(long long *)((char *)a2 - 21);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(long long *)((char *)a2 - 21) = *(_OWORD *)&v118[11];
                  *(a2 - 3) = v110;
                  *(a2 - 2) = *(_OWORD *)v118;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)v10, (long long *)(v10 + 48), a2 - 3);
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v10, v10 + 48, v10 + 96, (uint64_t)(a2 - 3));
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v10, v10 + 48, v10 + 96, v10 + 144, (uint64_t)(a2 - 3));
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 1151)
          {
            unint64_t v54 = (long long *)(v10 + 48);
            BOOL v56 = (long long *)v10 == a2 || v54 == a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  uint64_t v59 = v54;
                  double v60 = *(double *)(v58 + 56);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *(void *)v54;
                    *(_OWORD *)int v111 = *(_OWORD *)(v58 + 64);
                    *(_OWORD *)&v111[16] = *(_OWORD *)(v58 + 80);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      unint64_t v63 = (_OWORD *)(v10 + v62);
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      v63[3] = *(_OWORD *)(v10 + v62);
                      v63[4] = v64;
                      *(_OWORD *)((char *)v63 + 75) = *(_OWORD *)(v10 + v62 + 27);
                      if (!v62) {
                        break;
                      }
                      v62 -= 48;
                      if (v60 >= *((double *)v63 - 5))
                      {
                        uint64_t v65 = v10 + v62 + 48;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = *(_OWORD *)v111;
                    *(_OWORD *)(v65 + 27) = *(_OWORD *)&v111[11];
                  }
                  unint64_t v54 = v59 + 3;
                  v57 += 48;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 3 != a2);
              }
            }
            else if (!v56)
            {
              do
              {
                int v98 = v54;
                double v99 = *(double *)(a1 + 56);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *(void *)v54;
                  *(_OWORD *)unint64_t v114 = *(_OWORD *)(a1 + 64);
                  *(_OWORD *)&v114[16] = *(_OWORD *)(a1 + 80);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(v101 - 2);
                    long long *v101 = *(v101 - 3);
                    v101[1] = v102;
                    *(long long *)((char *)v101 + 27) = *(long long *)((char *)v101 - 21);
                    double v103 = *((double *)v101 - 11);
                    v101 -= 3;
                  }
                  while (v99 < v103);
                  *(void *)long long v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *(long long *)((char *)v101 + 27) = *(_OWORD *)&v114[11];
                  v101[1] = *(_OWORD *)v114;
                }
                v54 += 3;
                a1 = (unint64_t)v98;
              }
              while (v98 + 3 != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((long long *)v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 48 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v70 + 8) < *(double *)(v70 + 56))
                  {
                    v70 += 48;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  unint64_t v71 = v10 + 48 * v68;
                  double v72 = *(double *)(v71 + 8);
                  if (*(double *)(v70 + 8) >= v72)
                  {
                    uint64_t v73 = *(void *)v71;
                    *(_OWORD *)long long v112 = *(_OWORD *)(v71 + 16);
                    *(_OWORD *)&v112[16] = *(_OWORD *)(v71 + 32);
                    do
                    {
                      long long v74 = (_OWORD *)v71;
                      unint64_t v71 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_OWORD *)((char *)v74 + 27) = *(_OWORD *)(v70 + 27);
                      *long long v74 = v75;
                      v74[1] = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = 2 * v69;
                      uint64_t v69 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 48 * v69;
                      uint64_t v78 = v77 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v70 + 8) < *(double *)(v70 + 56))
                      {
                        v70 += 48;
                        uint64_t v69 = v78;
                      }
                    }
                    while (*(double *)(v70 + 8) >= v72);
                    *(void *)unint64_t v71 = v73;
                    *(double *)(v71 + 8) = v72;
                    *(_OWORD *)(v71 + 16) = *(_OWORD *)v112;
                    *(_OWORD *)(v71 + 27) = *(_OWORD *)&v112[11];
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x30uLL;
              do
              {
                uint64_t v80 = 0;
                *(_OWORD *)char v119 = *(_OWORD *)(v10 + 16);
                *(_OWORD *)&v119[16] = *(_OWORD *)(v10 + 32);
                long long v113 = *(_OWORD *)v10;
                unint64_t v81 = v10;
                do
                {
                  long long v82 = (_OWORD *)v81;
                  v81 += 48 * v80 + 48;
                  uint64_t v83 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v84 = v83 + 2;
                  if (v84 < v79 && *(double *)(v81 + 8) < *(double *)(v81 + 56))
                  {
                    v81 += 48;
                    uint64_t v80 = v84;
                  }
                  long long v85 = *(_OWORD *)v81;
                  long long v86 = *(_OWORD *)(v81 + 16);
                  *(_OWORD *)((char *)v82 + 27) = *(_OWORD *)(v81 + 27);
                  *long long v82 = v85;
                  v82[1] = v86;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 3;
                if ((long long *)v81 == a2)
                {
                  *(_OWORD *)(v81 + 27) = *(_OWORD *)&v119[11];
                  *(_OWORD *)unint64_t v81 = v113;
                  *(_OWORD *)(v81 + 16) = *(_OWORD *)v119;
                }
                else
                {
                  long long v87 = *a2;
                  long long v88 = a2[1];
                  *(_OWORD *)(v81 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v81 = v87;
                  *(_OWORD *)(v81 + 16) = v88;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v119[11];
                  *a2 = v113;
                  a2[1] = *(_OWORD *)v119;
                  uint64_t v89 = v81 - v10 + 48;
                  if (v89 >= 49)
                  {
                    unint64_t v90 = (v89 / 0x30uLL - 2) >> 1;
                    unint64_t v91 = v10 + 48 * v90;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      *(_OWORD *)uint64_t v106 = *(_OWORD *)(v81 + 16);
                      *(_OWORD *)&v106[16] = *(_OWORD *)(v81 + 32);
                      do
                      {
                        id v94 = (_OWORD *)v81;
                        unint64_t v81 = v91;
                        long long v95 = *(_OWORD *)v91;
                        long long v96 = *(_OWORD *)(v91 + 16);
                        *(_OWORD *)((char *)v94 + 27) = *(_OWORD *)(v91 + 27);
                        *id v94 = v95;
                        v94[1] = v96;
                        if (!v90) {
                          break;
                        }
                        unint64_t v90 = (v90 - 1) >> 1;
                        unint64_t v91 = v10 + 48 * v90;
                      }
                      while (*(double *)(v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_OWORD *)(v81 + 16) = *(_OWORD *)v106;
                      *(_OWORD *)(v81 + 27) = *(_OWORD *)&v106[11];
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (long long *)(v10 + 48 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v12 >> 1)), a2 - 3);
            uint64_t v15 = 3 * v13;
            long long v16 = (long long *)(a1 + 48 * v13 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48), v16, a2 - 6);
            long long v17 = (long long *)(a1 + 48 + 16 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 96), v17, a2 - 9);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v16, v14, v17);
            *(_OWORD *)unint64_t v115 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v115[16] = *(_OWORD *)(a1 + 32);
            long long v107 = *(_OWORD *)a1;
            long long v18 = *(long long *)((char *)v14 + 27);
            long long v19 = v14[1];
            *(_OWORD *)a1 = *v14;
            *(_OWORD *)(a1 + 16) = v19;
            *(_OWORD *)(a1 + 27) = v18;
            *(long long *)((char *)v14 + 27) = *(_OWORD *)&v115[11];
            *uint64_t v14 = v107;
            v14[1] = *(_OWORD *)v115;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48 * (v12 >> 1)), (long long *)a1, a2 - 3);
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 40) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          *(_OWORD *)long long v105 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)&v105[16] = *(_OWORD *)(a1 + 32);
          if (v20 >= *((double *)a2 - 5))
          {
            unint64_t v41 = a1 + 48;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= (unint64_t)a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 48;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 48;
              double v40 = *(double *)(v39 + 56);
              v39 += 48;
            }
            while (v20 >= v40);
          }
          uint64_t v43 = a2;
          if (v10 < (unint64_t)a2)
          {
            long long v44 = a2;
            do
            {
              uint64_t v43 = v44 - 3;
              double v45 = *((double *)v44 - 5);
              v44 -= 3;
            }
            while (v20 < v45);
          }
          while (v10 < (unint64_t)v43)
          {
            *(_OWORD *)uint64_t v117 = *(_OWORD *)(v10 + 16);
            *(_OWORD *)&v117[16] = *(_OWORD *)(v10 + 32);
            long long v109 = *(_OWORD *)v10;
            long long v46 = *v43;
            long long v47 = v43[1];
            *(_OWORD *)(v10 + 27) = *(long long *)((char *)v43 + 27);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(long long *)((char *)v43 + 27) = *(_OWORD *)&v117[11];
            *uint64_t v43 = v109;
            v43[1] = *(_OWORD *)v117;
            do
            {
              double v48 = *(double *)(v10 + 56);
              v10 += 48;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *((double *)v43 - 5);
              v43 -= 3;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 48 >= a1;
          BOOL v5 = v10 - 48 == a1;
          if (v10 - 48 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 48);
            long long v51 = *(_OWORD *)(v10 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v10 - 21);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 48) = v38;
          *(double *)(v10 - 40) = v20;
          *(_OWORD *)(v10 - 21) = *(_OWORD *)&v105[11];
          *(_OWORD *)(v10 - 32) = *(_OWORD *)v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        *(_OWORD *)uint64_t v104 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v104[16] = *(_OWORD *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 56);
          v21 += 48;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        uint64_t v25 = a2;
        if (v21 == 48)
        {
          long long v28 = a2;
          while (v24 < (unint64_t)v28)
          {
            long long v26 = v28 - 3;
            double v29 = *((double *)v28 - 5);
            v28 -= 3;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          long long v26 = v28;
        }
        else
        {
          do
          {
            long long v26 = v25 - 3;
            double v27 = *((double *)v25 - 5);
            v25 -= 3;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < (unint64_t)v26)
        {
          long long v30 = v26;
          do
          {
            *(_OWORD *)uint64_t v116 = *(_OWORD *)(v10 + 16);
            *(_OWORD *)&v116[16] = *(_OWORD *)(v10 + 32);
            long long v108 = *(_OWORD *)v10;
            long long v31 = *v30;
            long long v32 = v30[1];
            *(_OWORD *)(v10 + 27) = *(long long *)((char *)v30 + 27);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(long long *)((char *)v30 + 27) = *(_OWORD *)&v116[11];
            *long long v30 = v108;
            v30[1] = *(_OWORD *)v116;
            do
            {
              double v33 = *(double *)(v10 + 56);
              v10 += 48;
            }
            while (v33 < v20);
            do
            {
              double v34 = *((double *)v30 - 5);
              v30 -= 3;
            }
            while (v34 >= v20);
          }
          while (v10 < (unint64_t)v30);
        }
        if (v10 - 48 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 48);
          long long v36 = *(_OWORD *)(v10 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v10 - 21);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 48) = v22;
        *(double *)(v10 - 40) = v20;
        *(_OWORD *)(v10 - 21) = *(_OWORD *)&v104[11];
        *(_OWORD *)(v10 - 32) = *(_OWORD *)v104;
        if (v24 >= (unint64_t)v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(a1, v10 - 48, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, v10 - 48);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v10, (uint64_t)a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = (long long *)(v10 - 48);
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 40) < *(double *)(a1 + 8))
      {
        long long v6 = *(_OWORD *)a1;
        *(_OWORD *)double v20 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v20[16] = *(_OWORD *)(a1 + 32);
        long long v7 = *(_OWORD *)(a2 - 21);
        long long v8 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 27) = v7;
        *(_OWORD *)(a2 - 48) = v6;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v20;
        *(_OWORD *)(a2 - 21) = *(_OWORD *)&v20[11];
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48);
      return 1;
    default:
      uint64_t v9 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96));
      uint64_t v10 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    double v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      uint64_t v14 = *(void *)v10;
      *(_OWORD *)long long v19 = *(_OWORD *)(v10 + 16);
      *(_OWORD *)&v19[16] = *(_OWORD *)(v10 + 32);
      uint64_t v15 = v11;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        long long v17 = *(_OWORD *)(a1 + v15 + 112);
        *(_OWORD *)(v16 + 144) = *(_OWORD *)(a1 + v15 + 96);
        *(_OWORD *)(v16 + 160) = v17;
        *(_OWORD *)(v16 + 171) = *(_OWORD *)(a1 + v15 + 123);
        if (v15 == -96) {
          break;
        }
        v15 -= 48;
        if (v13 >= *(double *)(v16 + 56))
        {
          uint64_t v18 = a1 + v15 + 144;
          goto LABEL_12;
        }
      }
      uint64_t v18 = a1;
LABEL_12:
      *(void *)uint64_t v18 = v14;
      *(double *)(v18 + 8) = v13;
      *(_OWORD *)(v18 + 16) = *(_OWORD *)v19;
      *(_OWORD *)(v18 + 27) = *(_OWORD *)&v19[11];
      if (++v12 == 8) {
        return v10 + 48 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 48;
    v10 += 48;
    if (v10 == a2) {
      return 1;
    }
  }
}

__n128 HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::overallStatistics(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 208);
  long long v4 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 120) = v4;
  long long v5 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 144);
  long long v6 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 72) = v3;
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 120);
  uint64_t v7 = *(void *)(a2 + 264);
  *(void *)(a1 + 136) = *(void *)(a2 + 256);
  *(_OWORD *)(a1 + 8) = v5;
  *(void *)(a1 + 152) = 0;
  uint64_t v8 = a1 + 152;
  *(void *)(a1 + 144) = v7;
  uint64_t v9 = *(const void **)(a2 + 272);
  uint64_t v10 = *(void *)(a2 + 280);
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 152), v9, v10, (v10 - (uint64_t)v9) >> 4);
  *(void *)(v8 + 24) = *(void *)(a2 + 296);
  __n128 result = *(__n128 *)(a2 + 304);
  long long v12 = *(_OWORD *)(a2 + 320);
  *(__n128 *)(v8 + 32) = result;
  *(_OWORD *)(v8 + 48) = v12;
  *(void *)(v8 + 64) = *(void *)(a2 + 336);
  return result;
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  long long v3 = *(void **)(a2 + 344);
  long long v51 = (void *)(a2 + 352);
  if (v3 == (void *)(a2 + 352)) {
    return;
  }
  long long v53 = (void *)(a1 + 16);
  do
  {
    long long v5 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a2, v3[4]);
    long long v6 = v5;
    if (!v5) {
      goto LABEL_80;
    }
    unint64_t v7 = [v5 hash];
    unint64_t v8 = v7;
    unint64_t v9 = *(void *)(a1 + 8);
    if (!v9) {
      goto LABEL_21;
    }
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v54 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v2 = v7;
      if (v7 >= v9) {
        unint64_t v2 = v7 % v9;
      }
    }
    else
    {
      unint64_t v2 = (v9 - 1) & v7;
    }
    uint64_t v11 = *(uint64_t ***)(*(void *)a1 + 8 * v2);
    if (!v11 || (long long v12 = *v11) == 0)
    {
LABEL_21:
      long long v19 = (char *)operator new(0xF8uLL);
      v55[0] = v19;
      v55[1] = v53;
      *(void *)long long v19 = 0;
      *((void *)v19 + 1) = v8;
      *((void *)v19 + 2) = v6;
      *(_OWORD *)(v19 + 24) = 0u;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      *(_OWORD *)(v19 + 104) = 0u;
      *(_OWORD *)(v19 + 120) = 0u;
      *(_OWORD *)(v19 + 136) = 0u;
      *(_OWORD *)(v19 + 152) = 0u;
      *(_OWORD *)(v19 + 168) = 0u;
      *(_OWORD *)(v19 + 184) = 0u;
      *(_OWORD *)(v19 + 200) = 0u;
      *(_OWORD *)(v19 + 216) = 0u;
      *(_OWORD *)(v19 + 232) = 0u;
      char v56 = 1;
      float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v21 = *(float *)(a1 + 32);
      if (v9 && (float)(v21 * (float)v9) >= v20)
      {
LABEL_67:
        BOOL v37 = *(void **)(*(void *)a1 + 8 * v2);
        long long v12 = (uint64_t *)v55[0];
        if (v37)
        {
          *(void *)v55[0] = *v37;
        }
        else
        {
          *(void *)v55[0] = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = v12;
          *(void *)(*(void *)a1 + 8 * v2) = v53;
          if (!*v12)
          {
LABEL_76:
            v55[0] = 0;
            ++*(void *)(a1 + 24);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v55);
            goto LABEL_77;
          }
          unint64_t v38 = *(void *)(*v12 + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v38 >= v9) {
              v38 %= v9;
            }
          }
          else
          {
            v38 &= v9 - 1;
          }
          BOOL v37 = (void *)(*(void *)a1 + 8 * v38);
        }
        void *v37 = v12;
        goto LABEL_76;
      }
      BOOL v22 = (v9 & (v9 - 1)) != 0;
      if (v9 < 3) {
        BOOL v22 = 1;
      }
      unint64_t v23 = v22 | (2 * v9);
      unint64_t v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      else {
        int8x8_t prime = (int8x8_t)v23;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v9 = *(void *)(a1 + 8);
      if (*(void *)&prime > v9) {
        goto LABEL_33;
      }
      if (*(void *)&prime < v9)
      {
        unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          unint64_t v32 = std::__next_prime(v32);
        }
        else
        {
          uint64_t v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2) {
            unint64_t v32 = v34;
          }
        }
        if (*(void *)&prime <= v32) {
          int8x8_t prime = (int8x8_t)v32;
        }
        if (*(void *)&prime >= v9)
        {
          unint64_t v9 = *(void *)(a1 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            long long v26 = operator new(8 * *(void *)&prime);
            double v27 = *(void **)a1;
            *(void *)a1 = v26;
            if (v27) {
              operator delete(v27);
            }
            uint64_t v28 = 0;
            *(int8x8_t *)(a1 + 8) = prime;
            do
              *(void *)(*(void *)a1 + 8 * v28++) = 0;
            while (*(void *)&prime != v28);
            double v29 = (void *)*v53;
            if (*v53)
            {
              unint64_t v30 = v29[1];
              uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(void *)&prime) {
                  v30 %= *(void *)&prime;
                }
              }
              else
              {
                v30 &= *(void *)&prime - 1;
              }
              *(void *)(*(void *)a1 + 8 * v30) = v53;
              long long v35 = (void *)*v29;
              if (*v29)
              {
                do
                {
                  unint64_t v36 = v35[1];
                  if (v31.u32[0] > 1uLL)
                  {
                    if (v36 >= *(void *)&prime) {
                      v36 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v36 &= *(void *)&prime - 1;
                  }
                  if (v36 != v30)
                  {
                    if (!*(void *)(*(void *)a1 + 8 * v36))
                    {
                      *(void *)(*(void *)a1 + 8 * v36) = v29;
                      goto LABEL_58;
                    }
                    void *v29 = *v35;
                    void *v35 = **(void **)(*(void *)a1 + 8 * v36);
                    **(void **)(*(void *)a1 + 8 * v36) = v35;
                    long long v35 = v29;
                  }
                  unint64_t v36 = v30;
LABEL_58:
                  double v29 = v35;
                  long long v35 = (void *)*v35;
                  unint64_t v30 = v36;
                }
                while (v35);
              }
            }
            unint64_t v9 = (unint64_t)prime;
            goto LABEL_62;
          }
          long long v50 = *(void **)a1;
          *(void *)a1 = 0;
          if (v50) {
            operator delete(v50);
          }
          unint64_t v9 = 0;
          *(void *)(a1 + 8) = 0;
        }
      }
LABEL_62:
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v8 >= v9) {
          unint64_t v2 = v8 % v9;
        }
        else {
          unint64_t v2 = v8;
        }
      }
      else
      {
        unint64_t v2 = (v9 - 1) & v8;
      }
      goto LABEL_67;
    }
    while (1)
    {
      unint64_t v13 = v12[1];
      if (v13 == v8) {
        break;
      }
      if (v54 > 1)
      {
        if (v13 >= v9) {
          v13 %= v9;
        }
      }
      else
      {
        v13 &= v9 - 1;
      }
      if (v13 != v2) {
        goto LABEL_21;
      }
LABEL_20:
      long long v12 = (uint64_t *)*v12;
      if (!v12) {
        goto LABEL_21;
      }
    }
    id v14 = (id)v12[2];
    uint64_t v15 = v6;
    id v16 = v6;
    long long v17 = v16;
    if (v14 != v16)
    {
      char v18 = [v14 isEqualToString:v16];

      long long v6 = v15;
      if (v18) {
        goto LABEL_77;
      }
      goto LABEL_20;
    }

    long long v6 = v15;
LABEL_77:
    *((_DWORD *)v12 + 6) = *((_DWORD *)v3 + 10);
    *((_OWORD *)v12 + 2) = *((_OWORD *)v3 + 3);
    long long v39 = *((_OWORD *)v3 + 4);
    long long v40 = *((_OWORD *)v3 + 5);
    long long v41 = *((_OWORD *)v3 + 7);
    *((_OWORD *)v12 + 5) = *((_OWORD *)v3 + 6);
    *((_OWORD *)v12 + 6) = v41;
    *((_OWORD *)v12 + 3) = v39;
    *((_OWORD *)v12 + 4) = v40;
    long long v42 = *((_OWORD *)v3 + 8);
    long long v43 = *((_OWORD *)v3 + 9);
    long long v44 = *((_OWORD *)v3 + 10);
    v12[20] = v3[22];
    *((_OWORD *)v12 + 8) = v43;
    *((_OWORD *)v12 + 9) = v44;
    *((_OWORD *)v12 + 7) = v42;
    v12[21] = v3[23];
    if (v12 + 2 != v3 + 4) {
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)v12 + 176, (char *)v3[24], v3[25], (uint64_t)(v3[25] - v3[24]) >> 4);
    }
    v12[25] = v3[27];
    long long v45 = *((_OWORD *)v3 + 14);
    long long v46 = *((_OWORD *)v3 + 15);
    *((_WORD *)v12 + 120) = *((_WORD *)v3 + 128);
    *((_OWORD *)v12 + 13) = v45;
    *((_OWORD *)v12 + 14) = v46;

LABEL_80:
    long long v47 = (void *)v3[1];
    if (v47)
    {
      do
      {
        double v48 = v47;
        long long v47 = (void *)*v47;
      }
      while (v47);
    }
    else
    {
      do
      {
        double v48 = (void *)v3[2];
        BOOL v49 = *v48 == (void)v3;
        long long v3 = v48;
      }
      while (!v49);
    }
    long long v3 = v48;
  }
  while (v48 != v51);
}

void sub_1BD0A0ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);

  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::~__hash_table(v6);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  unint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,0>(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 160);
  if (v2)
  {
    *(void *)(a1 + 168) = v2;
    operator delete(v2);
  }
  long long v3 = *(void **)a1;
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      long long v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  long long v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F17236B0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F17236B0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C187B8A0);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0x28uLL);
  *unint64_t v2 = &unk_1F17236B0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BD0A11A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F17236B0;
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48))(v1) + 136;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1723740;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1723740;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C187B8A0);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0x28uLL);
  *unint64_t v2 = &unk_1F1723740;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BD0A1440(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1723740;
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  unint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__func()
{
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_1F17237D0;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F17237D0;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 704))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a4, 3, @"Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date");
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
  }
  double v8 = *(double *)(a2 + 8);
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9)
  {
    if (*(unsigned char *)(a1 + 704))
    {
      double v10 = -1.79769313e308;
    }
    else
    {
      double v10 = *(double *)(a1 + 176);
      double v12 = *(double *)(a1 + 120);
      if (v10 <= v12) {
        double v10 = -1.79769313e308;
      }
      if (v10 < v12) {
        double v10 = *(double *)(a1 + 120);
      }
    }
  }
  else
  {
    double v10 = *(double *)(a1 + 176);
    if (v10 <= *(double *)(a1 + 120)) {
      double v10 = -1.79769313e308;
    }
  }
  if (v10 <= v8)
  {
    if (v9 && a3) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_advanceToTime(a1, v8);
    }
    HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    unint64_t v13 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
    uint64_t v11 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v13, a4);
  }
  return v11;
}

void sub_1BD0A188C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_advanceToTime(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 128) <= a2)
  {
    uint64_t v4 = a1 + 112;
    long long v5 = (double *)(a1 + 120);
    do
    {
      uint64_t v6 = *(void *)(a1 + 680);
      uint64_t v7 = *(void *)(a1 + 672);
      if (v6 == v7)
      {
        uint64_t v22 = 0;
        uint64_t v15 = *(void **)(a1 + 40);
        id v16 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a2];
        double v8 = [v15 dateIntervalContainingDate:v16 index:&v22];

        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v17 = v22;
        double v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v19 = v18;
        float v20 = [v8 endDate];
        [v20 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::resetToBucket(v4, v17, v19, v21);
      }
      else
      {
        double v8 = [*(id *)(a1 + 40) dateIntervalAtIndex:*(void *)(a1 + 112) + 1];
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v5);
        double v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v12 = v11;
        unint64_t v13 = [v8 endDate];
        [v13 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::advanceBucket(v4, v12, v14);
      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_didChangeBucket(a1, v9);
      if (v6 != v7) {
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
      }
    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1BD0A1A98(_Unwind_Exception *exception_object)
{
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a1 + 8;
  double v6 = *(double *)(a1 + 8);
  double v7 = *(double *)(a2 + 8);
  double v8 = *(double *)(a2 + 16);
  uint64_t v9 = *(uint64_t **)(a2 + 24);
  unsigned __int8 v10 = *(unsigned char *)(a2 + 32);
  char v11 = *(unsigned char *)(a2 + 33);
  int v12 = v10;
  char v13 = v11;
  unint64_t v14 = (unint64_t)v9;
  double v15 = v8;
  double v16 = v7;
  if (v6 - v7 >= 0.01)
  {
    if (v8 - v7 - (v6 - v7) >= 0.01)
    {
      int v12 = *(unsigned __int8 *)(a2 + 32);
      char v13 = *(unsigned char *)(a2 + 33);
      unint64_t v14 = *(void *)(a2 + 24);
      double v15 = *(double *)(a2 + 16);
      double v16 = *(double *)(a1 + 8);
    }
    else
    {
      int v12 = 0;
      char v13 = 0;
      unint64_t v14 = 0;
      double v15 = 0.0;
      double v16 = 0.0;
    }
  }
  uint64_t v17 = *(uint64_t **)a2;
  double v18 = *(double *)(a1 + 16);
  double v19 = v18 - v16;
  double v20 = v15 - v16 - (v18 - v16);
  if (*(_DWORD *)(a1 + 36))
  {
    if (v19 >= 0.01)
    {
      if (v20 >= 0.01)
      {
LABEL_27:
        double v22 = v15;
        unint64_t v64 = v14;
        int v21 = v12;
        char v65 = v13;
        double v15 = *(double *)(a1 + 16);
        if (!v12) {
          goto LABEL_28;
        }
        goto LABEL_11;
      }
LABEL_10:
      unint64_t v64 = 0;
      int v21 = 0;
      char v65 = 0;
      double v18 = 0.0;
      double v22 = 0.0;
      if (!v12)
      {
LABEL_28:
        char v13 = v65;
        goto LABEL_59;
      }
LABEL_11:
      double v62 = v16;
      double v63 = v15;
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 376, v14, v14);
      unint64_t v23 = *(void *)(a1 + 112);
      if (v23 == *(void *)(a1 + 104) && *(uint64_t *)(a1 + 168) <= 0)
      {
        v28.f64[1] = *(float64_t *)(a1 + 16);
        double v24 = v62;
        double v25 = v63;
        v28.f64[0] = v62;
        v29.f64[0] = *(float64_t *)(a1 + 8);
        v29.f64[1] = v63;
        int8x16_t v30 = (int8x16_t)vcgtq_f64(v29, v28);
        v29.f64[0] = v62;
        *(int8x16_t *)(a1 + 48) = vbslq_s8(v30, *(int8x16_t *)(a1 + 8), (int8x16_t)v29);
        if (!a3)
        {
LABEL_30:
          unint64_t v31 = *(void *)(a1 + 120);
          if (v23 >= v31)
          {
            uint64_t v33 = *(void *)(a1 + 104);
            unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - v33) >> 4);
            unint64_t v35 = v34 + 1;
            if (v34 + 1 > 0x555555555555555) {
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - v33) >> 4);
            if (2 * v36 > v35) {
              unint64_t v35 = 2 * v36;
            }
            if (v36 >= 0x2AAAAAAAAAAAAAALL) {
              unint64_t v37 = 0x555555555555555;
            }
            else {
              unint64_t v37 = v35;
            }
            if (v37)
            {
              unint64_t v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v37);
              double v24 = v62;
              double v25 = v63;
            }
            else
            {
              uint64_t v38 = 0;
            }
            unint64_t v39 = v37 + 48 * v34;
            unint64_t v40 = v37 + 48 * v38;
            *(void *)unint64_t v39 = v17;
            *(double *)(v39 + 8) = v24;
            *(double *)(v39 + 16) = v25;
            *(void *)(v39 + 24) = v14;
            *(unsigned char *)(v39 + 32) = v12;
            *(unsigned char *)(v39 + 33) = v13;
            *(_WORD *)(v39 + 40) = 0;
            *(unsigned char *)(v39 + 42) = 0;
            unint64_t v32 = v39 + 48;
            long long v42 = *(char **)(a1 + 104);
            long long v41 = *(char **)(a1 + 112);
            if (v41 == v42)
            {
              char v13 = v65;
            }
            else
            {
              char v13 = v65;
              do
              {
                long long v43 = *((_OWORD *)v41 - 3);
                long long v44 = *((_OWORD *)v41 - 2);
                *(_OWORD *)(v39 - 21) = *(_OWORD *)(v41 - 21);
                *(_OWORD *)(v39 - 48) = v43;
                *(_OWORD *)(v39 - 32) = v44;
                v39 -= 48;
                v41 -= 48;
              }
              while (v41 != v42);
              long long v41 = *(char **)(a1 + 104);
            }
            *(void *)(a1 + 104) = v39;
            *(void *)(a1 + 112) = v32;
            *(void *)(a1 + 120) = v40;
            if (v41) {
              operator delete(v41);
            }
          }
          else
          {
            *(void *)unint64_t v23 = v17;
            *(double *)(v23 + 8) = v24;
            *(double *)(v23 + 16) = v25;
            *(void *)(v23 + 24) = v14;
            *(unsigned char *)(v23 + 32) = v12;
            *(unsigned char *)(v23 + 33) = v13;
            *(_WORD *)(v23 + 40) = 0;
            unint64_t v32 = v23 + 48;
            *(unsigned char *)(v23 + 42) = 0;
            char v13 = v65;
          }
          *(void *)(a1 + 112) = v32;
          if (!*(unsigned char *)(a1 + 344) || *(double *)(a1 + 320) <= v7)
          {
            *(void *)(a1 + 312) = v17;
            *(double *)(a1 + 320) = v7;
            *(double *)(a1 + 328) = v8;
            *(void *)(a1 + 336) = v9;
            *(unsigned char *)(a1 + 344) = v10;
            *(unsigned char *)(a1 + 345) = v11;
            if (!*(unsigned char *)(a1 + 208) || *(double *)(a1 + 184) <= v7)
            {
              *(void *)(a1 + 176) = v17;
              *(double *)(a1 + 184) = v7;
              *(double *)(a1 + 192) = v8;
              *(void *)(a1 + 200) = v9;
              *(unsigned char *)(a1 + 208) = v10;
              *(unsigned char *)(a1 + 209) = v11;
            }
          }
          if (*(unsigned char *)(a1 + 33))
          {
            unint64_t v45 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(v5, v14);
            long long v46 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsForSource(v5, v45);
            if (!*((unsigned char *)v46 + 216) || *((double *)v46 + 24) <= v7)
            {
              v46[23] = v17;
              *((double *)v46 + 24) = v7;
              *((double *)v46 + 25) = v8;
              v46[26] = v9;
              *((unsigned char *)v46 + 216) = v10;
              *((unsigned char *)v46 + 217) = v11;
              if (!*((unsigned char *)v46 + 80) || *((double *)v46 + 7) <= v7)
              {
                v46[6] = v17;
                *((double *)v46 + 7) = v7;
                *((double *)v46 + 8) = v8;
                v46[9] = v9;
                *((unsigned char *)v46 + 80) = v10;
                *((unsigned char *)v46 + 81) = v11;
              }
            }
          }
LABEL_59:
          unint64_t v14 = v64;
          if (!v21) {
            return;
          }
          goto LABEL_60;
        }
      }
      else
      {
        double v24 = v62;
        double v25 = v63;
        if (v62 < *(double *)(a1 + 48))
        {
          double v26 = *(double *)(a1 + 8);
          if (v62 >= v26) {
            double v26 = v62;
          }
          *(double *)(a1 + 48) = v26;
        }
        if (v63 > *(double *)(a1 + 56))
        {
          double v27 = *(double *)(a1 + 16);
          if (v27 >= v63) {
            double v27 = v63;
          }
          *(double *)(a1 + 56) = v27;
        }
        if (!a3) {
          goto LABEL_30;
        }
      }
      if (v24 < *(double *)(a1 + 16))
      {
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeThroughTime(v5, v24);
        double v24 = v62;
        double v25 = v63;
        unint64_t v23 = *(void *)(a1 + 112);
      }
      goto LABEL_30;
    }
  }
  else
  {
    if (v20 < 0.01) {
      goto LABEL_10;
    }
    if (v19 >= 0.01) {
      goto LABEL_27;
    }
  }
  LOBYTE(v21) = v12;
  double v22 = v15;
  double v18 = v16;
  if (!v12) {
    return;
  }
LABEL_60:
  unint64_t v47 = *(void *)(a1 + 568);
  unint64_t v48 = *(void *)(a1 + 576);
  if (v47 >= v48)
  {
    uint64_t v50 = *(void *)(a1 + 560);
    unint64_t v51 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v47 - v50) >> 3);
    unint64_t v52 = v51 + 1;
    if (v51 + 1 > 0x666666666666666) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v53 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v48 - v50) >> 3);
    if (2 * v53 > v52) {
      unint64_t v52 = 2 * v53;
    }
    if (v53 >= 0x333333333333333) {
      unint64_t v54 = 0x666666666666666;
    }
    else {
      unint64_t v54 = v52;
    }
    if (v54) {
      unint64_t v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v54);
    }
    else {
      uint64_t v55 = 0;
    }
    unint64_t v56 = v54 + 40 * v51;
    unint64_t v57 = v54 + 40 * v55;
    *(void *)unint64_t v56 = v17;
    *(double *)(v56 + 8) = v18;
    *(double *)(v56 + 16) = v22;
    *(void *)(v56 + 24) = v14;
    *(unsigned char *)(v56 + 32) = v21;
    *(unsigned char *)(v56 + 33) = v13;
    unint64_t v49 = v56 + 40;
    unint64_t v58 = *(char **)(a1 + 568);
    uint64_t v59 = *(char **)(a1 + 560);
    if (v58 != v59)
    {
      do
      {
        long long v60 = *(_OWORD *)(v58 - 40);
        long long v61 = *(_OWORD *)(v58 - 24);
        *(_WORD *)(v56 - 8) = *((_WORD *)v58 - 4);
        *(_OWORD *)(v56 - 24) = v61;
        *(_OWORD *)(v56 - 40) = v60;
        v56 -= 40;
        v58 -= 40;
      }
      while (v58 != v59);
      unint64_t v58 = *(char **)(a1 + 560);
    }
    *(void *)(a1 + 560) = v56;
    *(void *)(a1 + 568) = v49;
    *(void *)(a1 + 576) = v57;
    if (v58) {
      operator delete(v58);
    }
  }
  else
  {
    *(void *)unint64_t v47 = v17;
    *(double *)(v47 + 8) = v18;
    *(double *)(v47 + 16) = v22;
    *(void *)(v47 + 24) = v14;
    *(unsigned char *)(v47 + 32) = v21;
    unint64_t v49 = v47 + 40;
    *(unsigned char *)(v47 + 33) = v13;
  }
  *(void *)(a1 + 568) = v49;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 706))
  {
    *(unsigned char *)(a1 + 708) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 708) = 0;
    unint64_t v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      uint64_t v4 = v2;
      uint64_t v3 = (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      if (v3) {
        v4[2](v4, v3);
      }

      unint64_t v2 = v4;
    }
  }
}

void sub_1BD0A20CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  uint64_t v9 = 0;
  unsigned __int8 v10 = 0;
  uint64_t v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 560), *(void *)(a1 + 568), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 568) - *(void *)(a1 + 560)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::resetToBucket(a1, *(void *)a1 + 1, a2, a3);
  double v6 = v9;
  double v7 = v10;
  if (v9 != v10)
  {
    uint64_t v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BD0A21CC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8 = (id *)(a1 + 40);
  objc_storeStrong((id *)(a1 + 584), *(id *)(a1 + 40));
  *((double *)v8 - 4) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  long long v9 = 0uLL;
  memset(v18, 0, sizeof(v18));
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)&v18[84];
  *(_OWORD *)(a1 + 232) = *(_OWORD *)&v18[100];
  *(_OWORD *)(a1 + 248) = *(_OWORD *)&v18[116];
  *(_OWORD *)(a1 + 152) = *(_OWORD *)&v18[20];
  *(_OWORD *)(a1 + 168) = *(_OWORD *)&v18[36];
  *(_OWORD *)(a1 + 184) = *(_OWORD *)&v18[52];
  *(_OWORD *)(a1 + 200) = *(_OWORD *)&v18[68];
  *(_OWORD *)(a1 + 136) = *(_OWORD *)&v18[4];
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  unsigned __int8 v10 = *(void **)(a1 + 280);
  if (v10)
  {
    *(void *)(a1 + 288) = v10;
    operator delete(v10);
    long long v9 = 0uLL;
  }
  *(_WORD *)(a1 + 344) = 0;
  *(_OWORD *)(a1 + 312) = v9;
  *(_OWORD *)(a1 + 328) = v9;
  *(_OWORD *)(a1 + 280) = v9;
  *(_OWORD *)(a1 + 296) = v9;
  if (*(void *)(a1 + 368))
  {
    uint64_t v11 = *(void **)(a1 + 352);
    uint64_t v12 = *(void *)(a1 + 360);
    *(void *)(a1 + 352) = a1 + 360;
    *(void *)(v12 + 16) = 0;
    *(void *)(a1 + 360) = 0;
    *(void *)(a1 + 368) = 0;
    if (v11[1]) {
      char v13 = (void *)v11[1];
    }
    else {
      char v13 = v11;
    }
    if (v13)
    {
      unint64_t v14 = (void *)v13[2];
      if (v14)
      {
        double v15 = (void *)*v14;
        if ((void *)*v14 == v13)
        {
          *unint64_t v14 = 0;
          while (1)
          {
            uint64_t v17 = (void *)v14[1];
            if (!v17) {
              break;
            }
            do
            {
              unint64_t v14 = v17;
              uint64_t v17 = (void *)*v17;
            }
            while (v17);
          }
        }
        else
        {
          for (v14[1] = 0; v15; double v15 = (void *)v14[1])
          {
            do
            {
              unint64_t v14 = v15;
              double v15 = (void *)*v15;
            }
            while (v15);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::destroy(v13);
        for (uint64_t i = (void *)v14[2]; i; uint64_t i = (void *)i[2])
          unint64_t v14 = i;
        char v13 = v14;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::destroy(v13);
  }
  objc_storeStrong(v8, *(id *)(a1 + 584));
  *(void *)(a1 + 568) = *(void *)(a1 + 560);
  *(void *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 708))
  {
    if (v3)
    {
      id v6 = v3;
      uint64_t v4 = _Block_copy(*(const void **)(a1 + 96));
      uint64_t v5 = v4;
      if (v4) {
        (*((void (**)(void *, id))v4 + 2))(v4, v6);
      }

      id v3 = v6;
    }
    *(unsigned char *)(a1 + 708) = 0;
  }
}

void sub_1BD0A2434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_currentBucketInterval(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 704))
  {
    uint64_t v1 = 0;
  }
  else
  {
    uint64_t v1 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", *(double *)(a1 + 120), *(double *)(a1 + 128));
  }

  return v1;
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 startDate];
  id v6 = [v4 startDate];
  uint64_t v7 = [v5 compare:v6];

  return v7;
}

void sub_1BD0A2508(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 13);
  if (WeakRetained)
  {
    if (v5
      && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_currentBucketInterval((uint64_t)a1),
          (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v8 = [v5 endDate];
      long long v9 = [v7 startDate];
      if (objc_msgSend(v8, "hk_isAfterDate:", v9))
      {
        unsigned __int8 v10 = [v5 startDate];
        uint64_t v11 = [v7 endDate];
        char v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);
      }
      else
      {
        char v12 = 0;
      }

      char v13 = _Block_copy(a1[12]);
      if ((v12 & 1) == 0) {
        operator new();
      }
    }
    else
    {
      char v13 = _Block_copy(a1[12]);
    }
    *((unsigned char *)a1 + 704) = 1;
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
    v27[3] = &unk_1E6308FF8;
    id v15 = v5;
    id v28 = v15;
    id v16 = v13;
    id v29 = v16;
    (*((void (**)(id *, void *))*a1 + 9))(a1, v27);
    if (v5)
    {
      uint64_t v17 = [v15 startDate];
      [v17 timeIntervalSinceReferenceDate];
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_configureForStartTime((uint64_t)a1);
    }
    else
    {
      (*((void (**)(id *))*a1 + 4))(a1);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
    v21[3] = &unk_1E6309060;
    double v24 = a1;
    id v5 = v15;
    char v26 = 1;
    id v22 = v5;
    double v25 = a1;
    id v23 = WeakRetained;
    uint64_t v14 = (*((uint64_t (**)(id *, void *, uint64_t))*a1 + 14))(a1, v21, a3);
    double v18 = _Block_copy(v16);
    id v19 = a1[12];
    a1[12] = v18;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to invalidate interval: no data source available.");
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1BD0A2958(_Unwind_Exception *a1)
{
  MEMORY[0x1C187B8A0](v4, 0x10F1C406C794F1BLL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_11;
  }
  id v3 = [v10 endDate];
  uint64_t v4 = [*(id *)(a1 + 32) startDate];
  char v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    id v6 = [v10 startDate];
    uint64_t v7 = [*(id *)(a1 + 32) endDate];
    char v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_11:
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9) {
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
      }
    }
  }
}

void sub_1BD0A2B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = [*(id *)(a1 + 32) startDate];
  [v5 timeIntervalSinceReferenceDate];
  uint64_t v7 = v6;

  char v8 = [*(id *)(a1 + 32) endDate];
  [v8 timeIntervalSinceReferenceDate];
  uint64_t v10 = v9;

  uint64_t v11 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  uint64_t v13 = *(void *)(a1 + 32);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  char v32 = *(unsigned char *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  uint64_t v31 = *(void *)(a1 + 56);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  uint64_t v14 = [v11 collectionCalculator:WeakRetained queryForInterval:v13 error:a2 sampleHandler:v30 mergeHandler:v29];

  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15 != v4)
    {
      id v16 = [*(id *)(a1 + 32) endDate];
      [v16 timeIntervalSinceReferenceDate];
      if (*(void *)(v15 + 40))
      {
        double v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          id v19 = [*(id *)(v15 + 40) dateIntervalAtIndex:*(void *)(v15 + 112) + 1];
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          double v20 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(v15, (double *)(v15 + 120));
          int v21 = [v19 startDate];
          [v21 timeIntervalSinceReferenceDate];
          double v23 = v22;
          double v24 = [v19 endDate];
          [v24 timeIntervalSinceReferenceDate];
          HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            char v26 = _Block_copy(*(const void **)(v15 + 96));
            double v27 = v26;
            if (v26) {
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);
            }
          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_didChangeBucket(v15, 0);
        }
      }
    }
  }
  return v14;
}

void sub_1BD0A2DE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7 = *(double *)(a1 + 32) - a6;
  if (v7 >= 0.01)
  {
    if (a7 - a6 - v7 >= 0.01)
    {
      int v8 = 1;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      int v8 = 0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    int v8 = 1;
  }
  double v11 = a5;
  double v12 = a6;
  double v13 = a7;
  uint64_t v14 = a2;
  char v15 = v8;
  char v16 = 0;
  if (*(unsigned char *)(a1 + 56))
  {
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v11, a3, a4);
    }
  }
  else
  {
    double v10 = *(double *)(a1 + 40) - a6;
    if (v10 >= 0.01)
    {
      if (a7 - a6 - v10 >= 0.01) {
        a7 = *(double *)(a1 + 40);
      }
    }
    else
    {
      int v8 = 0;
    }
    double v12 = a6;
    double v13 = a7;
    char v15 = v8;
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v11, a3, a4);
    }
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 704)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
  }
  if (*(void *)(a1 + 40)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_advanceToTime(a1, a2);
  }
  if (*(double *)(a1 + 128) > a2)
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeThroughTime(a1 + 120, a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 32) < *(double *)(v10 + 8))
                {
                  uint64_t v129 = *(void *)(v10 + 32);
                  long long v113 = *(_OWORD *)v10;
                  long long v121 = *(_OWORD *)(v10 + 16);
                  long long v52 = *(_OWORD *)(a2 - 40);
                  long long v53 = *(_OWORD *)(a2 - 24);
                  *(_WORD *)(v10 + 32) = *(_WORD *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(_WORD *)(a2 - 8) = v129;
                  *(_OWORD *)(a2 - 24) = v121;
                  *(_OWORD *)(a2 - 40) = v113;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v10, (double *)(v10 + 40), (double *)(a2 - 40));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, v10 + 120, a2 - 40);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            unint64_t v54 = (void *)(v10 + 40);
            BOOL v56 = v10 == a2 || v54 == (void *)a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  uint64_t v59 = v54;
                  double v60 = *(double *)(v58 + 48);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *v54;
                    long long v114 = *(_OWORD *)(v58 + 56);
                    uint64_t v122 = *(void *)(v58 + 72);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      uint64_t v63 = v10 + v62;
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      *(_OWORD *)(v63 + 40) = *(_OWORD *)(v10 + v62);
                      *(_OWORD *)(v63 + 56) = v64;
                      *(_WORD *)(v63 + 72) = *(_WORD *)(v10 + v62 + 32);
                      if (!v62) {
                        break;
                      }
                      v62 -= 40;
                      if (v60 >= *(double *)(v63 - 32))
                      {
                        uint64_t v65 = v10 + v62 + 40;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = v114;
                    *(_WORD *)(v65 + 32) = v122;
                  }
                  unint64_t v54 = v59 + 5;
                  v57 += 40;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 5 != (void *)a2);
              }
            }
            else if (!v56)
            {
              do
              {
                int v98 = v54;
                double v99 = *(double *)(a1 + 48);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *v54;
                  long long v117 = *(_OWORD *)(a1 + 56);
                  uint64_t v125 = *(void *)(a1 + 72);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(_OWORD *)(v101 - 3);
                    *(_OWORD *)long long v101 = *(_OWORD *)(v101 - 5);
                    *((_OWORD *)v101 + 1) = v102;
                    *((_WORD *)v101 + 16) = *((_WORD *)v101 - 4);
                    double v103 = *((double *)v101 - 9);
                    v101 -= 5;
                  }
                  while (v99 < v103);
                  void *v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *((_WORD *)v101 + 16) = v125;
                  *((_OWORD *)v101 + 1) = v117;
                }
                v54 += 5;
                a1 = (unint64_t)v98;
              }
              while (v98 + 5 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 40 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v10 + 40 * v69 + 8) < *(double *)(v70 + 48))
                  {
                    v70 += 40;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  double v71 = *(double *)(v10 + 40 * v68 + 8);
                  if (*(double *)(v70 + 8) >= v71)
                  {
                    unint64_t v72 = v10 + 40 * v68;
                    uint64_t v73 = *(void *)v72;
                    uint64_t v123 = *(void *)(v72 + 32);
                    long long v115 = *(_OWORD *)(v72 + 16);
                    do
                    {
                      unint64_t v74 = v72;
                      unint64_t v72 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_WORD *)(v74 + 32) = *(_WORD *)(v70 + 32);
                      *(_OWORD *)unint64_t v74 = v75;
                      *(_OWORD *)(v74 + 16) = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 40 * v77;
                      uint64_t v78 = 2 * v69 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v10 + 40 * v77 + 8) < *(double *)(v70 + 48))
                      {
                        v70 += 40;
                        uint64_t v77 = v78;
                      }
                      uint64_t v69 = v77;
                    }
                    while (*(double *)(v70 + 8) >= v71);
                    *(void *)unint64_t v72 = v73;
                    *(double *)(v72 + 8) = v71;
                    *(_OWORD *)(v72 + 16) = v115;
                    *(_WORD *)(v72 + 32) = v123;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x28uLL;
              do
              {
                uint64_t v80 = 0;
                uint64_t v130 = *(void *)(v10 + 32);
                long long v116 = *(_OWORD *)v10;
                long long v124 = *(_OWORD *)(v10 + 16);
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = v81;
                  uint64_t v83 = v80 + 1;
                  v81 += 40 * (v80 + 1);
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v85 = v84 + 2;
                  if (v85 < v79 && *(double *)(v82 + 40 * v83 + 8) < *(double *)(v81 + 48))
                  {
                    v81 += 40;
                    uint64_t v80 = v85;
                  }
                  long long v86 = *(_OWORD *)v81;
                  long long v87 = *(_OWORD *)(v81 + 16);
                  *(_WORD *)(v82 + 32) = *(_WORD *)(v81 + 32);
                  *(_OWORD *)unint64_t v82 = v86;
                  *(_OWORD *)(v82 + 16) = v87;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 40;
                if (v81 == a2)
                {
                  *(_WORD *)(v81 + 32) = v130;
                  *(_OWORD *)unint64_t v81 = v116;
                  *(_OWORD *)(v81 + 16) = v124;
                }
                else
                {
                  long long v88 = *(_OWORD *)a2;
                  long long v89 = *(_OWORD *)(a2 + 16);
                  *(_WORD *)(v81 + 32) = *(_WORD *)(a2 + 32);
                  *(_OWORD *)unint64_t v81 = v88;
                  *(_OWORD *)(v81 + 16) = v89;
                  *(_WORD *)(a2 + 32) = v130;
                  *(_OWORD *)a2 = v116;
                  *(_OWORD *)(a2 + 16) = v124;
                  uint64_t v90 = v81 - v10 + 40;
                  if (v90 >= 41)
                  {
                    unint64_t v91 = (v90 / 0x28uLL - 2) >> 1;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v10 + 40 * v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      uint64_t v109 = *(void *)(v81 + 32);
                      long long v106 = *(_OWORD *)(v81 + 16);
                      do
                      {
                        unint64_t v94 = v81;
                        unint64_t v81 = v10 + 40 * v91;
                        long long v95 = *(_OWORD *)v81;
                        long long v96 = *(_OWORD *)(v81 + 16);
                        *(_WORD *)(v94 + 32) = *(_WORD *)(v81 + 32);
                        *(_OWORD *)unint64_t v94 = v95;
                        *(_OWORD *)(v94 + 16) = v96;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 40 * v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_WORD *)(v81 + 32) = v109;
                      *(_OWORD *)(v81 + 16) = v106;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40 * (v12 >> 1)), (double *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            char v16 = (double *)(a1 + 40 * v13 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40), v16, (double *)(a2 - 80));
            double v17 = (double *)(a1 + 40 + 8 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 80), v17, (double *)(a2 - 120));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v16, (double *)v14, v17);
            uint64_t v126 = *(void *)(a1 + 32);
            long long v110 = *(_OWORD *)a1;
            long long v118 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 16) = v19;
            *(_WORD *)(v14 + 32) = v126;
            *(_OWORD *)unint64_t v14 = v110;
            *(_OWORD *)(v14 + 16) = v118;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40 * (v12 >> 1)), (double *)a1, (double *)(a2 - 40));
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 32) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          long long v105 = *(_OWORD *)(a1 + 16);
          uint64_t v108 = *(void *)(a1 + 32);
          if (v20 >= *(double *)(a2 - 32))
          {
            unint64_t v41 = a1 + 40;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 40;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 40;
              double v40 = *(double *)(v39 + 48);
              v39 += 40;
            }
            while (v20 >= v40);
          }
          unint64_t v43 = a2;
          if (v10 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              unint64_t v43 = v44 - 40;
              double v45 = *(double *)(v44 - 32);
              v44 -= 40;
            }
            while (v20 < v45);
          }
          while (v10 < v43)
          {
            uint64_t v128 = *(void *)(v10 + 32);
            long long v112 = *(_OWORD *)v10;
            long long v120 = *(_OWORD *)(v10 + 16);
            long long v46 = *(_OWORD *)v43;
            long long v47 = *(_OWORD *)(v43 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v43 + 32);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(_WORD *)(v43 + 32) = v128;
            *(_OWORD *)unint64_t v43 = v112;
            *(_OWORD *)(v43 + 16) = v120;
            do
            {
              double v48 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *(double *)(v43 - 32);
              v43 -= 40;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 40);
            long long v51 = *(_OWORD *)(v10 - 24);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 40) = v38;
          *(double *)(v10 - 32) = v20;
          *(_WORD *)(v10 - 8) = v108;
          *(_OWORD *)(v10 - 24) = v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        long long v104 = *(_OWORD *)(a1 + 16);
        uint64_t v107 = *(void *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 48);
          v21 += 40;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        unint64_t v25 = a2;
        if (v21 == 40)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 40;
            double v29 = *(double *)(v28 - 32);
            v28 -= 40;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 40;
            double v27 = *(double *)(v25 - 32);
            v25 -= 40;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v127 = *(void *)(v10 + 32);
            long long v111 = *(_OWORD *)v10;
            long long v119 = *(_OWORD *)(v10 + 16);
            long long v31 = *(_OWORD *)v30;
            long long v32 = *(_OWORD *)(v30 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v30 + 32);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(_WORD *)(v30 + 32) = v127;
            *(_OWORD *)unint64_t v30 = v111;
            *(_OWORD *)(v30 + 16) = v119;
            do
            {
              double v33 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v33 < v20);
            do
            {
              double v34 = *(double *)(v30 - 32);
              v30 -= 40;
            }
            while (v34 >= v20);
          }
          while (v10 < v30);
        }
        if (v10 - 40 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 40);
          long long v36 = *(_OWORD *)(v10 - 24);
          *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 40) = v22;
        *(double *)(v10 - 32) = v20;
        *(_WORD *)(v10 - 8) = v107;
        *(_OWORD *)(v10 - 24) = v104;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 40;
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        __int16 v9 = *(_WORD *)(a2 - 8);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      uint64_t v16 = *(void *)v12;
      long long v21 = *(_OWORD *)(v12 + 16);
      uint64_t v22 = *(void *)(v12 + 32);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(void *)uint64_t v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(void *a1, uint64_t a2)
{
  id v3 = (void *)a1[5];
  uint64_t v4 = a1[6];
  BOOL v5 = (void *)a1[4];
  uint64_t v6 = [v5 dateInterval];
  void v9[4] = v4;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  uint64_t v7 = [v3 collectionCalculator:v5 queryForInterval:v6 error:a2 sampleHandler:v10 mergeHandler:v9];

  return v7;
}

void sub_1BD0A3B6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10 = *(void *)(a1 + 32);
  *(double *)int v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  char v15 = 1;
  uint64_t v11 = [MEMORY[0x1E4F1C9C8] distantFuture];
  [v11 timeIntervalSinceReferenceDate];
  BOOL v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1BD0A3C10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
}

void HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::archive(uint64_t a1, int *a2)
{
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 112);
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F171B978;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  statistics::Statistics::makePrimaryStatistics(a1);
  HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>::archive((uint64_t)v6, (uint64_t)(a2 + 2));
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v6);
  statistics::Statistics::~Statistics((statistics::Statistics *)v6);
  uint64_t v5 = *a2;
  *(_DWORD *)(a1 + 204) |= 0x100u;
  *(void *)(a1 + 136) = v5;
  statistics::Statistics::makeMostRecentDatum(a1);
  v6[0] = &unk_1F17206F8;
  int v10 = 127;
  int8x16_t v7 = vextq_s8(*(int8x16_t *)(a2 + 46), *(int8x16_t *)(a2 + 46), 8uLL);
  v6[1] = *((void *)a2 + 25);
  v6[2] = *((void *)a2 + 26);
  __int16 v8 = 0;
  char v9 = 0;
  statistics::RawQuantitySample::operator=(*v4, (uint64_t)v6);
  PB::Base::~Base((PB::Base *)v6);
}

void sub_1BD0A3D40(_Unwind_Exception *a1)
{
  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

void HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>::archive(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F171B978;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (statistics **)(a1 + 8);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = 0;
  statistics::Statistics::makePrimaryStatistics(a1);
  HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::archive((uint64_t)v5, a2);
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v5);
  statistics::Statistics::~Statistics((statistics::Statistics *)v5);
  statistics::Statistics::makeAuxiliaryStatistics(a1);
  HDStatisticsTimeInterval::archive((HDStatisticsTimeInterval *)(a2 + 136), (uint64_t)v5);
  statistics::Statistics::operator=(*v4, (uint64_t)v5);
  statistics::Statistics::~Statistics((statistics::Statistics *)v5);
}

void sub_1BD0A3E18(_Unwind_Exception *a1)
{
  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

int8x16_t HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::archive(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 112);
  *(void *)(a1 + 160) = 0;
  *(void *)a1 = &unk_1F171B978;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v5;
  *(int8x16_t *)(a1 + 88) = vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 8uLL);
  uint64_t v6 = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 204) = 225;
  *(void *)(a1 + 104) = v6;
  statistics::Statistics::makeMostRecentDatum(a1);
  int v10 = &unk_1F17206F8;
  int v16 = 127;
  int8x16_t v13 = vextq_s8(*(int8x16_t *)(a2 + 40), *(int8x16_t *)(a2 + 40), 8uLL);
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v12 = *(void *)(a2 + 64);
  __int16 v14 = 0;
  char v15 = 0;
  statistics::RawQuantitySample::operator=(*v4, (uint64_t)&v10);
  PB::Base::~Base((PB::Base *)&v10);
  if (*(unsigned char *)(a2 + 112))
  {
    statistics::Statistics::makeUnfinishedDatum(a1);
    int v10 = &unk_1F17206F8;
    int v16 = 127;
    int8x16_t v13 = vextq_s8(*(int8x16_t *)(a2 + 80), *(int8x16_t *)(a2 + 80), 8uLL);
    uint64_t v11 = *(void *)(a2 + 96);
    uint64_t v12 = *(void *)(a2 + 104);
    __int16 v14 = 0;
    char v15 = 0;
    statistics::RawQuantitySample::operator=(*(void *)(a1 + 160), (uint64_t)&v10);
    PB::Base::~Base((PB::Base *)&v10);
  }
  int v7 = *(_DWORD *)(a1 + 204);
  int8x16_t result = vextq_s8(*(int8x16_t *)(a2 + 120), *(int8x16_t *)(a2 + 120), 8uLL);
  *(int8x16_t *)(a1 + 184) = result;
  uint64_t v9 = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 204) = v7 | 0x6002;
  *(void *)(a1 + 32) = v9;
  return result;
}

void sub_1BD0A3FB8(_Unwind_Exception *a1)
{
  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::unarchive(uint64_t a1, void *a2)
{
  *(_DWORD *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v5 = a1 + 8;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_WORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 66) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 202) = 0u;
  uint64_t v6 = a2[16];
  if (v6)
  {
    HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>::unarchive((uint64_t)v15, *(HDStatisticsTimeInterval **)(v6 + 8), *(void *)(v6 + 128));
    uint64_t v7 = v17;
    *(void *)(v5 + 128) = v16;
    long long v8 = v15[7];
    *(_OWORD *)(v5 + 96) = v15[6];
    *(_OWORD *)(v5 + 112) = v8;
    long long v9 = v15[3];
    *(_OWORD *)(v5 + 32) = v15[2];
    *(_OWORD *)(v5 + 48) = v9;
    long long v10 = v15[5];
    *(_OWORD *)(v5 + 64) = v15[4];
    *(_OWORD *)(v5 + 80) = v10;
    long long v11 = v15[1];
    *(_OWORD *)uint64_t v5 = v15[0];
    *(_OWORD *)(v5 + 16) = v11;
    *(void *)(a1 + 144) = v7;
    double result = v20;
    uint64_t v12 = v19;
    *(_OWORD *)(a1 + 152) = v18;
    *(void *)(a1 + 168) = v12;
    *(double *)(a1 + 176) = result;
  }
  *(_DWORD *)a1 = a2[17];
  uint64_t v13 = a2[14];
  if (v13)
  {
    double result = *(double *)(v13 + 8);
    uint64_t v14 = *(void *)(v13 + 16);
    *(int8x16_t *)(a1 + 184) = vextq_s8(*(int8x16_t *)(v13 + 24), *(int8x16_t *)(v13 + 24), 8uLL);
    *(double *)(a1 + 200) = result;
    *(void *)(a1 + 208) = v14;
    *(_WORD *)(a1 + 216) = 1;
  }
  return result;
}

double HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>::unarchive(uint64_t a1, HDStatisticsTimeInterval *this, uint64_t a3)
{
  *(_WORD *)(a1 + 112) = 0;
  *(void *)&long long v5 = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 58) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0;
  if (a3)
  {
    HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::unarchive((uint64_t)v11, a3);
    long long v6 = v17;
    *(_OWORD *)(a1 + 96) = v16;
    *(_OWORD *)(a1 + 112) = v6;
    *(void *)(a1 + 128) = v18;
    long long v7 = v13;
    *(_OWORD *)(a1 + 32) = v12;
    *(_OWORD *)(a1 + 48) = v7;
    long long v8 = v15;
    *(_OWORD *)(a1 + 64) = v14;
    *(_OWORD *)(a1 + 80) = v8;
    long long v5 = *(_OWORD *)&v11[16];
    *(_OWORD *)a1 = *(_OWORD *)v11;
    *(_OWORD *)(a1 + 16) = v5;
  }
  if (this)
  {
    HDStatisticsTimeInterval::unarchive(this, (uint64_t)v11);
    *(void *)(a1 + 136) = *(void *)v11;
    *(void *)&long long v5 = v12;
    uint64_t v9 = *(void *)&v11[24];
    *(_OWORD *)(a1 + 144) = *(_OWORD *)&v11[8];
    *(void *)(a1 + 160) = v9;
    *(void *)(a1 + 168) = v5;
  }
  return *(double *)&v5;
}

int8x16_t HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::unarchive(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_WORD *)(a1 + 72) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)(a2 + 88), *(int8x16_t *)(a2 + 88), 8uLL);
  *(void *)(a1 + 16) = *(void *)(a2 + 104);
  uint64_t v2 = *(void *)(a2 + 112);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    uint64_t v4 = *(void *)(v2 + 16);
    *(int8x16_t *)(a1 + 40) = vextq_s8(*(int8x16_t *)(v2 + 24), *(int8x16_t *)(v2 + 24), 8uLL);
    *(void *)(a1 + 56) = v3;
    *(void *)(a1 + 64) = v4;
    *(unsigned char *)(a1 + 72) = 1;
  }
  uint64_t v5 = *(void *)(a2 + 160);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 8);
    uint64_t v7 = *(void *)(v5 + 16);
    *(int8x16_t *)(a1 + 80) = vextq_s8(*(int8x16_t *)(v5 + 24), *(int8x16_t *)(v5 + 24), 8uLL);
    *(void *)(a1 + 96) = v6;
    *(void *)(a1 + 104) = v7;
    *(_WORD *)(a1 + 112) = 1;
  }
  int8x16_t result = vextq_s8(*(int8x16_t *)(a2 + 184), *(int8x16_t *)(a2 + 184), 8uLL);
  *(int8x16_t *)(a1 + 120) = result;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6 = a3;
  uint64_t v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = &unk_1F1723880;
  double v9 = 900.0;
  if ((v6 & 0x10) == 0) {
    double v9 = 0.0;
  }
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(void *)(v8 + 104) = 0;
  *(void *)(v8 + 112) = 0;
  *(void *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_WORD *)(a1 + 656) = 1;
  *(unsigned char *)(a1 + 658) = 0;
  *(unsigned char *)(a1 + 660) = 0;
  *(void *)(a1 + 664) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(void *)(a1 + 704) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);

  JUMPOUT(0x1C187B8A0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1F1723880;
  uint64_t v2 = *(void **)(a1 + 688);
  if (v2)
  {
    *(void *)(a1 + 696) = v2;
    operator delete(v2);
  }

  uint64_t v3 = *(void **)(a1 + 624);
  if (v3)
  {
    *(void *)(a1 + 632) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(unsigned char *)(result + 656) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::setDateInterval(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 copy];
  uint64_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;

  uint64_t v5 = [v6 startDate];
  [v5 timeIntervalSinceReferenceDate];
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
}

void sub_1BD0A43CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(void *)(a1 + 40))
  {
    id v5 = v3;
    [v3 timeIntervalSinceReferenceDate];
    *(void *)(a1 + 664) = v4;
    id v3 = v5;
  }
}

void sub_1BD0A4440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::setStatisticsConfiguration(id *a1, void *a2)
{
  objc_storeStrong(a1 + 84, a2);
  id v7 = a2;
  id v4 = a1[84];
  id v5 = a1[81];
  a1[81] = v4;
  id v6 = v4;

  objc_storeStrong(a1 + 19, a1[81]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (*(void *)(a1 + 40)) {
    return 1;
  }
  BOOL v7 = *(void *)(a1 + 224) == *(void *)(a1 + 216) && *(uint64_t *)(a1 + 272) < 1
    || HKIntervalMask<double>::firstDifference(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)a2, *(void *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (v7) {
    return 1;
  }
  double v9 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128);

  return v9(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 copy];
  id v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v3;
}

void sub_1BD0A4628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::dataSource(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));

  return WeakRetained;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::currentStatistics(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 656))
  {
    uint64_t v1 = 0;
  }
  else
  {
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_updateSourceOrder((uint64_t)v4);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeThroughTime((uint64_t)v4, v4[1]);
    uint64_t v1 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v4);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v4);
  }

  return v1;
}

void sub_1BD0A46F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(a1 + 64);
  BOOL v7 = v6;
  if (!v6) {
    goto LABEL_4;
  }
  uint64_t v8 = [v6 startDate];
  [v8 timeIntervalSinceReferenceDate];
  if (v9 > *(double *)(a2 + 16))
  {

    goto LABEL_10;
  }
  long long v10 = [v7 endDate];
  [v10 timeIntervalSinceReferenceDate];
  double v12 = v11;
  double v13 = *(double *)(a2 + 8);

  if (v12 >= v13)
  {
LABEL_4:
    if (!*(unsigned char *)(a1 + 658)) {
      goto LABEL_21;
    }
    if (!*(unsigned char *)(a1 + 657))
    {
      if (*(void *)(a1 + 40))
      {
        if (*(unsigned char *)(a1 + 656))
        {
          double v14 = -1.79769313e308;
        }
        else
        {
          double v16 = *(double *)(a1 + 176);
          double v14 = *(double *)(a1 + 120);
          if (v16 <= v14) {
            double v16 = -1.79769313e308;
          }
          if (v16 >= v14) {
            double v14 = v16;
          }
        }
      }
      else
      {
        double v14 = -1.79769313e308;
        if (*(double *)(a1 + 176) > *(double *)(a1 + 120)) {
          double v14 = *(double *)(a1 + 176);
        }
      }
      if (v14 > *(double *)(a2 + 8))
      {
        long long v17 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
        uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v17, a3);

        goto LABEL_22;
      }
      if (*(unsigned char *)(a1 + 659))
      {
LABEL_21:
        uint64_t v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveAddSample(a1, a2, 1, a3);
        goto LABEL_22;
      }
      unint64_t v19 = *(void *)(a1 + 696);
      unint64_t v20 = *(void *)(a1 + 704);
      if (v19 >= v20)
      {
        uint64_t v24 = *(void *)(a1 + 688);
        unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v24) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - v24) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x333333333333333) {
          unint64_t v28 = 0x666666666666666;
        }
        else {
          unint64_t v28 = v26;
        }
        if (v28) {
          unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v28);
        }
        else {
          uint64_t v29 = 0;
        }
        unint64_t v30 = v28 + 40 * v25;
        unint64_t v31 = v28 + 40 * v29;
        long long v32 = *(_OWORD *)a2;
        long long v33 = *(_OWORD *)(a2 + 16);
        *(void *)(v30 + 32) = *(void *)(a2 + 32);
        *(_OWORD *)unint64_t v30 = v32;
        *(_OWORD *)(v30 + 16) = v33;
        unint64_t v23 = v30 + 40;
        double v34 = *(char **)(a1 + 696);
        long long v35 = *(char **)(a1 + 688);
        if (v34 != v35)
        {
          do
          {
            long long v36 = *(_OWORD *)(v34 - 40);
            long long v37 = *(_OWORD *)(v34 - 24);
            *(_WORD *)(v30 - 8) = *((_WORD *)v34 - 4);
            *(_OWORD *)(v30 - 24) = v37;
            *(_OWORD *)(v30 - 40) = v36;
            v30 -= 40;
            v34 -= 40;
          }
          while (v34 != v35);
          double v34 = *(char **)(a1 + 688);
        }
        *(void *)(a1 + 688) = v30;
        *(void *)(a1 + 696) = v23;
        *(void *)(a1 + 704) = v31;
        if (v34) {
          operator delete(v34);
        }
      }
      else
      {
        long long v21 = *(_OWORD *)a2;
        long long v22 = *(_OWORD *)(a2 + 16);
        *(void *)(v19 + 32) = *(void *)(a2 + 32);
        *(_OWORD *)unint64_t v19 = v21;
        *(_OWORD *)(v19 + 16) = v22;
        unint64_t v23 = v19 + 40;
      }
      *(void *)(a1 + 696) = v23;
    }
  }
LABEL_10:
  uint64_t v15 = 1;
LABEL_22:

  return v15;
}

void sub_1BD0A49B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = v5;
  if (*(unsigned char *)(a1 + 658))
  {
    uint64_t v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 658) = 1;
  uint64_t v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    uint64_t v7 = 0;
    goto LABEL_82;
  }
  uint64_t v65 = v6;
  if (*(unsigned char *)(a1 + 657)) {
    goto LABEL_5;
  }
  double v9 = *(void **)(a1 + 680);
  if (!v9)
  {
    id v68 = 0;
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 40))
  {
LABEL_5:
    int v8 = 0;
    id v68 = 0;
    goto LABEL_29;
  }
  [v9 sortUsingComparator:&__block_literal_global_744];
  id v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v10 = *(id *)(a1 + 680);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  if (!v11)
  {

    id v12 = 0;
    goto LABEL_27;
  }
  id v12 = 0;
  uint64_t v13 = *(void *)v70;
  do
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (*(void *)v70 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(id *)(*((void *)&v69 + 1) + 8 * i);
      double v16 = v15;
      if (v12)
      {
        long long v17 = [v15 startDate];
        uint64_t v18 = [v12 endDate];
        int v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          unint64_t v20 = [v16 endDate];
          long long v21 = [v12 endDate];
          int v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22) {
            goto LABEL_21;
          }
          id v23 = objc_alloc(MEMORY[0x1E4F28C18]);
          uint64_t v24 = [v12 startDate];
          unint64_t v25 = [v16 endDate];
          id v26 = (id)[v23 initWithStartDate:v24 endDate:v25];
        }
        else
        {
          [v68 addObject:v12];
          id v26 = v16;
        }
        id v12 = v26;
      }
      else
      {
        id v12 = v15;
      }
LABEL_21:
    }
    uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  }
  while (v11);

  if (v12) {
    [v68 addObject:v12];
  }
LABEL_27:

LABEL_28:
  int v8 = 1;
LABEL_29:
  unint64_t v27 = *(void **)(a1 + 680);
  *(void *)(a1 + 680) = 0;

  *(unsigned char *)(a1 + 657) = 0;
  if (!v8)
  {
    unint64_t v38 = *(void *)(a1 + 688);
    *(void *)(a1 + 704) = 0;
    *(void *)(a1 + 696) = 0;
    *(void *)(a1 + 688) = 0;
    unint64_t v39 = v38;
    goto LABEL_47;
  }
  unint64_t v28 = [v68 lastObject];
  if (v28)
  {
    uint64_t v29 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_currentBucketInterval(a1);
    unint64_t v30 = [v29 endDate];
    unint64_t v31 = [v28 endDate];
    int v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      long long v33 = [v28 endDate];
      [v33 timeIntervalSinceReferenceDate];
      double v35 = v34;

      uint64_t v36 = *(void *)(a1 + 688);
      long long v37 = *(long long **)(a1 + 696);
      while ((long long *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((long long *)v36 != v37)
          {
            double v40 = (long long *)(v36 + 40);
            if ((long long *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  long long v41 = *v40;
                  long long v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)uint64_t v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                double v40 = (long long *)((char *)v40 + 40);
              }
              while (v40 != v37);
              long long v37 = *(long long **)(a1 + 696);
            }
          }
          if ((long long *)v36 != v37) {
            *(void *)(a1 + 696) = v36;
          }
          break;
        }
        v36 += 40;
      }
    }
  }
  unint64_t v38 = *(void *)(a1 + 688);
  unint64_t v39 = *(void *)(a1 + 696);
  *(void *)(a1 + 704) = 0;
  *(void *)(a1 + 688) = 0;
  *(void *)(a1 + 696) = 0;
  if (![v68 count]) {
    goto LABEL_60;
  }
LABEL_47:
  id v43 = v68;
  long long __p = (void *)v38;
  if (v43)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v44 = v43;
    uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v70;
      while (2)
      {
        for (uint64_t j = 0; j != v45; ++j)
        {
          if (*(void *)v70 != v46) {
            objc_enumerationMutation(v44);
          }
          id v48 = *(id *)(*((void *)&v69 + 1) + 8 * j);
          int v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval((id *)a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
        if (v45) {
          continue;
        }
        break;
      }
    }

LABEL_59:
    unint64_t v38 = (unint64_t)__p;
LABEL_60:
    unint64_t v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v51;
    }
    int v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    long long __p = (void *)v38;
    if (v39 != v38)
    {
      uint64_t v54 = v38;
      uint64_t v50 = v67;
      do
      {
        int v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveAddSample(a1, v54, 1, v50);
        int v53 = v55;
        v54 += 40;
        if (v54 == v39) {
          char v56 = 0;
        }
        else {
          char v56 = v55;
        }
        uint64_t v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval((id *)a1, 0, v67))goto LABEL_59; {
LABEL_70:
    }
    int v53 = 0;
  }
  if (*(void *)(a1 + 40) && *(void *)(a1 + 632) != *(void *)(a1 + 624))
  {
    do
    {
      uint64_t v57 = objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(void *)(a1 + 112) + 1, v50, v65);
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      unint64_t v58 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, (double *)(a1 + 120));
      uint64_t v59 = [v57 startDate];
      [v59 timeIntervalSinceReferenceDate];
      double v61 = v60;
      uint64_t v62 = [v57 endDate];
      [v62 timeIntervalSinceReferenceDate];
      HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
    }
    while (*(void *)(a1 + 632) != *(void *)(a1 + 624));
  }
  *(unsigned char *)(a1 + 658) = 0;
  if (__p) {
    operator delete(__p);
  }

  if (v53)
  {
    if (*(unsigned char *)(a1 + 660))
    {
      *(unsigned char *)(a1 + 660) = 0;
      id v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
      uint64_t v7 = 1;
      goto LABEL_82;
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v6 = v65;
LABEL_82:
  *(unsigned char *)(a1 + 658) = 0;
LABEL_83:

  return v7;
}

void sub_1BD0A50B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    *(unsigned char *)(v13 + 658) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(unsigned char *)(result + 659) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(unsigned char *)(a1 + 658)) {
      goto LABEL_12;
    }
    uint64_t v7 = 0;
LABEL_14:
    uint64_t v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval((id *)a1, v7, a3);
    goto LABEL_15;
  }
  uint64_t v7 = [v6 dateIntervalForIntervalsContainingInterval:v5];

  if (!*(unsigned char *)(a1 + 658)) {
    goto LABEL_14;
  }
  if (!v7)
  {
LABEL_12:
    id v12 = *(void **)(a1 + 680);
    *(void *)(a1 + 680) = 0;

    uint64_t v7 = 0;
    uint64_t v11 = 1;
    *(unsigned char *)(a1 + 657) = 1;
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 657))
  {
    int v8 = *(void **)(a1 + 680);
    if (!v8)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      id v10 = *(void **)(a1 + 680);
      *(void *)(a1 + 680) = v9;

      int v8 = *(void **)(a1 + 680);
    }
    [v8 addObject:v7];
  }
  uint64_t v11 = 1;
LABEL_15:

  return v11;
}

void sub_1BD0A53B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    *(unsigned char *)(a1 + 656) = 1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v9[3] = &unk_1E63043E8;
    uint64_t v12 = a1;
    id v10 = v5;
    id v11 = WeakRetained;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 112))(a1, v9, a3);
    if (v7 && *(unsigned char *)(a1 + 656) && !*(void *)(a1 + 40)) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to query for initial statistics: no data source available.");
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1BD0A550C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::reset(uint64_t result)
{
  *(unsigned char *)(result + 656) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 encodeBool:*(unsigned __int8 *)(a1 + 656) forKey:@"needs_config"];
  id v12 = v3;
  int v32 = &unk_1F1726FA0;
  long long v33 = 0;
  int v38 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
  LOBYTE(v38) = 1;
  uint64_t v34 = v4;
  uint64_t v35 = 0;
  statistics::StatisticsEngine::makeCurrentBucket((uint64_t)&v32);
  uint64_t v13 = &unk_1F171B9C8;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  int v31 = 511;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 0;
  int8x16_t v14 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  uint64_t v5 = *(void *)(a1 + 136);
  char v29 = *(unsigned char *)(a1 + 144);
  char v30 = *(unsigned char *)(a1 + 145);
  BOOL v28 = *(_DWORD *)(a1 + 148) == 0;
  int8x16_t v15 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  uint64_t v7 = *(int8x16_t **)(a1 + 216);
  if (v7 != *(int8x16_t **)(a1 + 224))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v7, *v7, 8uLL);
    int8x16_t v40 = v7[1];
    char v43 = 0;
    HIBYTE(v42) = v7[2].i8[9];
    LOBYTE(v42) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>();
  }
  statistics::StatisticsBucket::makeStatistics((uint64_t)&v13);
  HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>::archive((uint64_t)&v39, a1 + 240);
  statistics::Statistics::operator=(*((statistics **)&v22 + 1), (uint64_t)&v39);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v39);
  uint64_t v8 = *(void *)(a1 + 416);
  if (v8 != a1 + 424)
  {
    HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>::archive((uint64_t)&v39, v8 + 40);
    uint64_t v9 = *(void *)(v8 + 32);
    v46 |= 0x200u;
    uint64_t v45 = v9;
    PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>();
  }
  id v10 = *(int8x16_t **)(a1 + 184);
  if (v10 != *(int8x16_t **)(a1 + 192))
  {
    unint64_t v39 = (char *)&unk_1F1727540;
    v41.i32[0] = 3;
    int8x16_t v40 = vextq_s8(*v10, *v10, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>();
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v13);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v13);
  id v11 = *(int8x16_t **)(a1 + 624);
  if (v11 != *(int8x16_t **)(a1 + 632))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v11, *v11, 8uLL);
    int8x16_t v40 = v11[1];
    __int16 v42 = 0;
    char v43 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>();
  }
  PB::Writer::Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v39);
  [v12 encodeBytes:v40.i64[0] length:&v39[-v40.i64[0]] forKey:@"hdsce_archived_representation"];
  PB::Writer::~Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);
}

void sub_1BD0A590C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v60 = a2;
  *(unsigned char *)(a1 + 656) = [v60 decodeBoolForKey:@"needs_config"];
  id v3 = v60;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)&v64.n128_i64[1], 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)uint64_t v65 = 0u;
  long long v66 = 0u;
  unint64_t v107 = 0;
  id v63 = v3;
  PB::Reader::Reader((PB::Reader *)v106, (const unsigned __int8 *)[v63 decodeBytesForKey:@"hdsce_archived_representation" returnedLength:&v107]);
  double v99 = &unk_1F1726FA0;
  uint64_t v100 = 0;
  uint64_t v104 = 0;
  uint64_t v102 = 0;
  uint64_t v103 = 0;
  int v105 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v99, (PB::Reader *)v106);
  uint64_t v62 = a1;
  v64.n128_u64[0] = v101;
  if (v100)
  {
    uint64_t v71 = 0;
    memset(v74, 0, sizeof(v74));
    long long v77 = 0u;
    long long v78 = 0u;
    *(_WORD *)int64_t v79 = 0;
    *(_OWORD *)&v79[8] = 0u;
    memset(v80, 0, sizeof(v80));
    uint64_t v84 = 0;
    uint64_t v83 = 0;
    *(_OWORD *)long long __p = 0u;
    memset(v76, 0, 82);
    uint64_t v81 = 0;
    unint64_t v82 = &v83;
    long long v85 = 0u;
    long long v86 = 0u;
    int v87 = 1065353216;
    long long v88 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    uint64_t v91 = 0;
    int v92 = 1065353216;
    long long v93 = 0u;
    long long v94 = 0u;
    int v95 = 1065353216;
    long long v96 = 0u;
    long long v97 = 0u;
    int v98 = 1065353216;
    int8x16_t v67 = vextq_s8(*(int8x16_t *)(v100 + 8), *(int8x16_t *)(v100 + 8), 8uLL);
    uint64_t v4 = *(void *)(v100 + 72);
    uint64_t v68 = *(void *)(v100 + 64);
    char v69 = *(unsigned char *)(v100 + 185);
    char v70 = *(unsigned char *)(v100 + 186);
    int8x16_t v72 = vextq_s8(*(int8x16_t *)(v100 + 24), *(int8x16_t *)(v100 + 24), 8uLL);
    uint64_t v73 = v4;
    uint64_t v5 = *(void *)(v100 + 80);
    uint64_t v6 = *(void *)(v100 + 88);
    double v61 = (void *)v100;
    if (v5 != v6)
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(*(void *)v5 + 24);
        uint64_t v9 = *(void *)(*(void *)v5 + 32);
        uint64_t v10 = *(void *)(*(void *)v5 + 8);
        uint64_t v11 = *(void *)(*(void *)v5 + 16);
        char v12 = *(unsigned char *)(*(void *)v5 + 41);
        char v13 = *(unsigned char *)(*(void *)v5 + 40);
        if ((unint64_t)v7 >= *(void *)v76)
        {
          int8x16_t v14 = (char *)__p[0];
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (char *)__p[0]) >> 4);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(*(void *)v76 - (unint64_t)__p[0]) >> 4) > v16) {
            unint64_t v16 = 0x5555555555555556 * ((uint64_t)(*(void *)v76 - (unint64_t)__p[0]) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v76 - (unint64_t)__p[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v17 = 0x555555555555555;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17)
          {
            unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            uint64_t v7 = (char *)__p[1];
            int8x16_t v14 = (char *)__p[0];
          }
          else
          {
            uint64_t v18 = 0;
          }
          unint64_t v19 = v17 + 48 * v15;
          *(void *)unint64_t v19 = v9;
          *(void *)(v19 + 8) = v8;
          *(void *)(v19 + 16) = v10;
          *(void *)(v19 + 24) = v11;
          *(_WORD *)(v19 + 32) = 1;
          *(unsigned char *)(v19 + 40) = 0;
          *(unsigned char *)(v19 + 41) = v12;
          *(unsigned char *)(v19 + 42) = v13;
          uint64_t v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              long long v21 = *((_OWORD *)v7 - 3);
              long long v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            int8x16_t v14 = (char *)__p[0];
          }
          uint64_t v7 = (char *)(v19 + 48);
          __p[0] = v20;
          __p[1] = (void *)(v19 + 48);
          *(void *)long long v76 = v17 + 48 * v18;
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)uint64_t v7 = v9;
          *((void *)v7 + 1) = v8;
          *((void *)v7 + 2) = v10;
          *((void *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        __p[1] = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    uint64_t v23 = v61[13];
    if (v23)
    {
      HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>::unarchive((uint64_t)&v108, *(HDStatisticsTimeInterval **)(v23 + 8), *(void *)(v23 + 128));
      *(void *)&v79[16] = v116;
      long long v78 = v114;
      *(_OWORD *)int64_t v79 = v115;
      *(_OWORD *)&v76[40] = v110;
      *(_OWORD *)&v76[56] = v111;
      *(_OWORD *)&v76[72] = v112;
      long long v77 = v113;
      *(_OWORD *)&v76[8] = v108;
      *(_OWORD *)&v76[24] = v109;
      v80[0] = v117;
      if (v80[1])
      {
        v80[2] = v80[1];
        operator delete(v80[1]);
      }
      *(_OWORD *)&v80[1] = v118;
      v80[3] = v119;
      long long v119 = 0;
      long long v118 = 0uLL;
      uint64_t v81 = v120;
    }
    long long v25 = (uint64_t *)v61[17];
    for (uint64_t i = (uint64_t *)v61[18]; v25 != i; ++v25)
    {
      uint64_t v26 = *v25;
      HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>::unarchive((uint64_t)&v108, *(HDStatisticsTimeInterval **)(*v25 + 8), *(void *)(*v25 + 128));
      uint64_t v27 = *(void *)(v26 + 144);
      BOOL v28 = v83;
      char v29 = &v83;
      char v30 = &v83;
      if (v83)
      {
        do
        {
          while (1)
          {
            char v30 = (uint64_t **)v28;
            uint64_t v31 = v28[4];
            if (v31 <= v27) {
              break;
            }
            BOOL v28 = *v30;
            char v29 = v30;
            if (!*v30) {
              goto LABEL_34;
            }
          }
          if (v31 >= v27)
          {
            long long v33 = (char *)v30;
            goto LABEL_37;
          }
          BOOL v28 = v30[1];
        }
        while (v28);
        char v29 = v30 + 1;
      }
LABEL_34:
      long long v33 = (char *)operator new(0xD8uLL);
      *((void *)v33 + 4) = v27;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *(_OWORD *)(v33 + 120) = 0u;
      *(_OWORD *)(v33 + 136) = 0u;
      *(_OWORD *)(v33 + 152) = 0u;
      *(_OWORD *)(v33 + 168) = 0u;
      *(_OWORD *)(v33 + 184) = 0u;
      *(_OWORD *)(v33 + 200) = 0u;
      *(void *)long long v33 = 0;
      *((void *)v33 + 1) = 0;
      *((void *)v33 + 2) = v30;
      void *v29 = (uint64_t *)v33;
      int v32 = (uint64_t *)v33;
      if (*v82)
      {
        unint64_t v82 = (uint64_t **)*v82;
        int v32 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v83, v32);
      ++v84;
LABEL_37:
      *(_OWORD *)(v33 + 104) = v112;
      long long v34 = v110;
      *(_OWORD *)(v33 + 88) = v111;
      *(_OWORD *)(v33 + 72) = v34;
      long long v35 = v108;
      *(_OWORD *)(v33 + 56) = v109;
      *(_OWORD *)(v33 + 152) = v115;
      long long v36 = v113;
      *(_OWORD *)(v33 + 136) = v114;
      uint64_t v37 = v116;
      *(_OWORD *)(v33 + 120) = v36;
      *((void *)v33 + 21) = v37;
      *(_OWORD *)(v33 + 40) = v35;
      int v38 = (void *)*((void *)v33 + 23);
      *((void *)v33 + 22) = v117;
      if (v38)
      {
        *((void *)v33 + 24) = v38;
        operator delete(v38);
        *((void *)v33 + 23) = 0;
        *((void *)v33 + 24) = 0;
        *((void *)v33 + 25) = 0;
      }
      *(_OWORD *)(v33 + 184) = v118;
      *((void *)v33 + 25) = v119;
      long long v119 = 0;
      long long v118 = 0uLL;
      *((void *)v33 + 26) = v120;
    }
    uint64_t v39 = v61[5];
    for (uint64_t j = v61[6]; v39 != j; v39 += 8)
    {
      double v42 = *(double *)(*(void *)v39 + 8);
      double v41 = *(double *)(*(void *)v39 + 16);
      if (v42 >= v41) {
        double v43 = *(double *)(*(void *)v39 + 16);
      }
      else {
        double v43 = *(double *)(*(void *)v39 + 8);
      }
      if (v41 < v42) {
        double v41 = *(double *)(*(void *)v39 + 8);
      }
      HKIntervalMask<double>::_insertInterval(v74, v43, v41);
    }
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::operator=((uint64_t)&v64.n128_i64[1], (uint64_t)&v67);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v67);
  }
  uint64_t v44 = v102;
  uint64_t v45 = v103;
  if (v102 != v103)
  {
    int v46 = (char *)v65[1];
    do
    {
      uint64_t v47 = *(void *)(*(void *)v44 + 24);
      uint64_t v48 = *(void *)(*(void *)v44 + 32);
      uint64_t v49 = *(void *)(*(void *)v44 + 8);
      uint64_t v50 = *(void *)(*(void *)v44 + 16);
      if ((unint64_t)v46 >= (unint64_t)v66)
      {
        unint64_t v51 = (char *)v65[0];
        unint64_t v52 = 0xCCCCCCCCCCCCCCCDLL * ((v46 - (char *)v65[0]) >> 3);
        unint64_t v53 = v52 + 1;
        if (v52 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(v66 - (unint64_t)v65[0]) >> 3) > v53) {
          unint64_t v53 = 0x999999999999999ALL * ((uint64_t)(v66 - (unint64_t)v65[0]) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v66 - (unint64_t)v65[0]) >> 3) >= 0x333333333333333) {
          unint64_t v54 = 0x666666666666666;
        }
        else {
          unint64_t v54 = v53;
        }
        if (v54)
        {
          unint64_t v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v54);
          int v46 = (char *)v65[1];
          unint64_t v51 = (char *)v65[0];
        }
        else
        {
          uint64_t v55 = 0;
        }
        unint64_t v56 = v54 + 40 * v52;
        *(void *)unint64_t v56 = v48;
        *(void *)(v56 + 8) = v47;
        *(void *)(v56 + 16) = v49;
        *(void *)(v56 + 24) = v50;
        *(_WORD *)(v56 + 32) = 1;
        uint64_t v57 = (char *)v56;
        if (v46 != v51)
        {
          do
          {
            long long v58 = *(_OWORD *)(v46 - 40);
            long long v59 = *(_OWORD *)(v46 - 24);
            *((_WORD *)v57 - 4) = *((_WORD *)v46 - 4);
            *(_OWORD *)(v57 - 24) = v59;
            *(_OWORD *)(v57 - 40) = v58;
            v57 -= 40;
            v46 -= 40;
          }
          while (v46 != v51);
          unint64_t v51 = (char *)v65[0];
        }
        v65[0] = v57;
        int v46 = (char *)(v56 + 40);
        v65[1] = (void *)(v56 + 40);
        *(void *)&long long v66 = v54 + 40 * v55;
        if (v51) {
          operator delete(v51);
        }
      }
      else
      {
        *(void *)int v46 = v48;
        *((void *)v46 + 1) = v47;
        *((void *)v46 + 2) = v49;
        *((void *)v46 + 3) = v50;
        *((_WORD *)v46 + 16) = 1;
        v46 += 40;
      }
      v65[1] = v46;
      v44 += 8;
    }
    while (v44 != v45);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v99);

  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::operator=((void *)(v62 + 112), &v64);
  if (v65[0])
  {
    v65[1] = v65[0];
    operator delete(v65[0]);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v64.n128_i64[1]);
}

void sub_1BD0A60F4(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table((uint64_t)&STACK[0x420]);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a2);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x3D0]);
  uint64_t v8 = (void *)STACK[0x3B8];
  if (STACK[0x3B8])
  {
    STACK[0x3C0] = (unint64_t)v8;
    operator delete(v8);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x390]);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::destroy((void *)STACK[0x380]);
  uint64_t v9 = (void *)STACK[0x358];
  if (STACK[0x358])
  {
    STACK[0x360] = (unint64_t)v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v10;
    operator delete(v10);
  }
  objc_destroyWeak((id *)&STACK[0x2A8]);
  uint64_t v11 = (void *)STACK[0x290];
  if (STACK[0x290])
  {
    STACK[0x298] = (unint64_t)v11;
    operator delete(v11);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x450]);
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_WORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_WORD *)(a1 + 192) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = a1 + 304;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_DWORD *)(a1 + 352) = 1065353216;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(void *)(a1 + 408) = 0;
  *(_DWORD *)(a1 + 416) = 1065353216;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_DWORD *)(a1 + 456) = 1065353216;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_DWORD *)(a1 + 496) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 512);
  if (v2)
  {
    *(void *)(a1 + 520) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 464);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 424);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 384);
  uint64_t v2 = *(void **)(a1 + 360);
  if (v2)
  {
    *(void *)(a1 + 368) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 320);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::destroy(*(void **)(a1 + 304));
  id v3 = *(void **)(a1 + 264);
  if (v3)
  {
    *(void *)(a1 + 272) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(void *)(a1 + 104) = v4;
    operator delete(v4);
  }
  objc_destroyWeak((id *)(a1 + 88));
  uint64_t v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(void *)(a1 + 72) = v5;
    operator delete(v5);
  }

  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::destroy(a1[1]);
    uint64_t v2 = (void *)a1[23];
    if (v2)
    {
      a1[24] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_configureForStartTime(uint64_t a1)
{
  unint64_t v28 = 0;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
    uint64_t v4 = [v2 dateIntervalContainingDate:v3 index:&v28];

    uint64_t v5 = [v4 startDate];
    [v5 timeIntervalSinceReferenceDate];
    double v7 = v6;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
LABEL_5:
    double v13 = v9;

    goto LABEL_6;
  }
  id v10 = *(id *)(a1 + 64);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v11 = [v10 startDate];
    [v11 timeIntervalSinceReferenceDate];
    double v7 = v12;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
    goto LABEL_5;
  }
  double v7 = -1.79769313e308;
  double v13 = 1.79769313e308;
LABEL_6:

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v21, WeakRetained, v7, v13);

  if (*(void *)(a1 + 32) == 1) {
    char v23 = 1;
  }
  uint64_t v22 = *(void *)(a1 + 56);
  char v24 = *(unsigned char *)(a1 + 24) & 1;
  if (v27 != (char *)(a1 + 72)) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27, *(char **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4);
  }
  objc_storeStrong(&v26, *(id *)(a1 + 672));
  if (!*(void *)(a1 + 40)) {
    int v25 = 0;
  }
  unint64_t v15 = v28;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v21);
  v18.n128_u64[0] = v15;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)&v18.n128_i64[1], (uint64_t)v17);
  long long __p = 0u;
  long long v20 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::operator=((void *)(a1 + 112), &v18);

  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v18.n128_i64[1]);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v17);
  *(unsigned char *)(a1 + 656) = 0;
  return HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v21);
}

void sub_1BD0A66AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::operator=(void *a1, __n128 *a2)
{
  *a1 = a2->n128_u64[0];
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::operator=((uint64_t)(a1 + 1), (uint64_t)&a2->n128_i64[1]);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 64), a2 + 32);
  unint64_t v4 = a2[33].n128_u64[1];
  a2[33].n128_u64[1] = 0;
  uint64_t v5 = (void *)a1[67];
  a1[67] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 96);
  double v7 = *(unsigned char **)(a2 + 104);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(void *)(a1 + 96) = v10;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(void *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  long long v12 = *(_OWORD *)(a2 + 136);
  long long v13 = *(_OWORD *)(a2 + 152);
  long long v14 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v14;
  *(_OWORD *)(a1 + 152) = v13;
  *(_OWORD *)(a1 + 136) = v12;
  long long v15 = *(_OWORD *)(a2 + 200);
  long long v16 = *(_OWORD *)(a2 + 216);
  long long v17 = *(_OWORD *)(a2 + 232);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = v17;
  *(_OWORD *)(a1 + 216) = v16;
  *(_OWORD *)(a1 + 200) = v15;
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 264), *(const void **)(a2 + 264), *(void *)(a2 + 272), (uint64_t)(*(void *)(a2 + 272) - *(void *)(a2 + 264)) >> 4);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  __n128 v18 = (void *)(a1 + 304);
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 296) = a1 + 304;
  unint64_t v19 = *(void **)(a2 + 296);
  if (v19 != (void *)(a2 + 304))
  {
    long long v20 = 0;
    long long v21 = (void *)(a1 + 304);
    while (1)
    {
      uint64_t v22 = (void *)(a1 + 304);
      if (v21 == v18) {
        goto LABEL_12;
      }
      char v23 = v20;
      char v24 = (void *)(a1 + 304);
      if (v20)
      {
        do
        {
          uint64_t v22 = v23;
          char v23 = (void *)v23[1];
        }
        while (v23);
      }
      else
      {
        do
        {
          uint64_t v22 = (void *)v24[2];
          BOOL v25 = *v22 == (void)v24;
          char v24 = v22;
        }
        while (v25);
      }
      uint64_t v26 = v19[4];
      if (v22[4] < v26)
      {
LABEL_12:
        if (v20) {
          uint64_t v27 = (uint64_t **)v22;
        }
        else {
          uint64_t v27 = (uint64_t **)(a1 + 304);
        }
        if (v20) {
          unint64_t v28 = (uint64_t **)(v22 + 1);
        }
        else {
          unint64_t v28 = (uint64_t **)(a1 + 304);
        }
        if (!*v28)
        {
LABEL_28:
          uint64_t v31 = (char *)operator new(0xD8uLL);
          *((void *)v31 + 4) = v19[4];
          *(_OWORD *)(v31 + 40) = *(_OWORD *)(v19 + 5);
          long long v32 = *(_OWORD *)(v19 + 7);
          long long v33 = *(_OWORD *)(v19 + 9);
          long long v34 = *(_OWORD *)(v19 + 11);
          *(_OWORD *)(v31 + 104) = *(_OWORD *)(v19 + 13);
          *(_OWORD *)(v31 + 88) = v34;
          *(_OWORD *)(v31 + 72) = v33;
          *(_OWORD *)(v31 + 56) = v32;
          long long v35 = *(_OWORD *)(v19 + 15);
          long long v36 = *(_OWORD *)(v19 + 17);
          long long v37 = *(_OWORD *)(v19 + 19);
          *((void *)v31 + 21) = v19[21];
          *(_OWORD *)(v31 + 152) = v37;
          *(_OWORD *)(v31 + 136) = v36;
          *(_OWORD *)(v31 + 120) = v35;
          uint64_t v38 = v19[22];
          *((void *)v31 + 23) = 0;
          *((void *)v31 + 22) = v38;
          *((void *)v31 + 24) = 0;
          *((void *)v31 + 25) = 0;
          std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)v31 + 23, (const void *)v19[23], v19[24], (uint64_t)(v19[24] - v19[23]) >> 4);
          *((void *)v31 + 26) = v19[26];
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 296), (uint64_t)v27, v28, (uint64_t *)v31);
        }
      }
      else
      {
        unint64_t v28 = (uint64_t **)(a1 + 304);
        uint64_t v27 = (uint64_t **)(a1 + 304);
        if (!v20) {
          goto LABEL_28;
        }
        char v29 = v20;
        while (1)
        {
          while (1)
          {
            uint64_t v27 = (uint64_t **)v29;
            uint64_t v30 = v29[4];
            if (v30 <= v26) {
              break;
            }
            char v29 = *v27;
            unint64_t v28 = v27;
            if (!*v27) {
              goto LABEL_28;
            }
          }
          if (v30 >= v26) {
            break;
          }
          char v29 = v27[1];
          if (!v29)
          {
            unint64_t v28 = v27 + 1;
            goto LABEL_28;
          }
        }
      }
      uint64_t v39 = (void *)v19[1];
      if (v39)
      {
        do
        {
          int8x16_t v40 = v39;
          uint64_t v39 = (void *)*v39;
        }
        while (v39);
      }
      else
      {
        do
        {
          int8x16_t v40 = (void *)v19[2];
          BOOL v25 = *v40 == (void)v19;
          unint64_t v19 = v40;
        }
        while (!v25);
      }
      if (v40 == (void *)(a2 + 304)) {
        break;
      }
      long long v20 = (void *)*v18;
      long long v21 = *(void **)(a1 + 296);
      unint64_t v19 = v40;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 320, a2 + 320);
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 360), *(const void **)(a2 + 360), *(void *)(a2 + 368), (uint64_t)(*(void *)(a2 + 368) - *(void *)(a2 + 360)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 384, a2 + 384);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 424, a2 + 424);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 464, a2 + 464);
  return a1;
}

void sub_1BD0A6AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, id *location, void **a12)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v17);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  unint64_t v19 = *v15;
  if (*v15)
  {
    *(void *)(v12 + 368) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::destroy(*v13);
  long long v20 = *a9;
  if (*a9)
  {
    *(void *)(v12 + 272) = v20;
    operator delete(v20);
  }
  long long v21 = *a10;
  if (*a10)
  {
    *(void *)(v12 + 104) = v21;
    operator delete(v21);
  }
  objc_destroyWeak(location);
  uint64_t v22 = *a12;
  if (*a12)
  {
    *(void *)(v12 + 72) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::operator=(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  long long v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v5;

  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  id WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  uint64_t v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(void *)(a1 + 104) = v9;
    operator delete(v9);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 96) = 0;
  long long v10 = *(_OWORD *)(a2 + 152);
  long long v11 = *(_OWORD *)(a2 + 168);
  long long v12 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 184) = v12;
  *(_OWORD *)(a1 + 168) = v11;
  *(_OWORD *)(a1 + 152) = v10;
  long long v13 = *(_OWORD *)(a2 + 216);
  long long v14 = *(_OWORD *)(a2 + 232);
  uint64_t v15 = *(void *)(a2 + 248);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(void *)(a1 + 248) = v15;
  *(_OWORD *)(a1 + 232) = v14;
  *(_OWORD *)(a1 + 216) = v13;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 264, (__n128 *)(a2 + 264));
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  uint64_t v16 = a1 + 304;
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::destroy(*(void **)(a1 + 304));
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  uint64_t v17 = *(void *)(a2 + 304);
  *(void *)(a1 + 304) = v17;
  uint64_t v18 = *(void *)(a2 + 312);
  *(void *)(a1 + 312) = v18;
  if (v18)
  {
    *(void *)(v17 + 16) = v16;
    *(void *)(a2 + 296) = a2 + 304;
    *(void *)(a2 + 304) = 0;
    *(void *)(a2 + 312) = 0;
  }
  else
  {
    *(void *)(a1 + 296) = v16;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 320, (uint64_t *)(a2 + 320));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 360, (__n128 *)(a2 + 360));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 384, (uint64_t *)(a2 + 384));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 424, (uint64_t *)(a2 + 424));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 464, (uint64_t *)(a2 + 464));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(uint64_t a1, double *a2)
{
  uint64_t v2 = (uint64_t)a2;
  uint64_t v134 = *MEMORY[0x1E4F143B8];
  double v3 = *a2;
  id v4 = objc_alloc(MEMORY[0x1E4F1C9C8]);
  uint64_t v5 = (double *)(v2 + 40);
  if (v3 != -1.79769313e308) {
    uint64_t v5 = (double *)v2;
  }
  long long v108 = (void *)[v4 initWithTimeIntervalSinceReferenceDate:*v5];
  if (*(double *)(v2 + 8) == 1.79769313e308) {
    uint64_t v6 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(v2 + 48)];
  }
  else {
    uint64_t v6 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(v2 + 8)];
  }
  long long v7 = (void *)v6;
  id v8 = *(id *)(a1 + 16);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v9 = *(id *)(a1 + 16);
    if ([v9 shouldUseUnderlyingTypeForStatistics])
    {
      uint64_t v10 = [v9 underlyingSampleType];

      id v8 = (id)v10;
    }
  }
  long long v11 = (void *)[objc_alloc(MEMORY[0x1E4F2B5B0]) initWithDataType:v8 startDate:v108 endDate:v7];
  if (*(unsigned char *)(a1 + 24))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      id v13 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      long long v14 = *(uint64_t **)(v2 + 360);
      uint64_t v15 = *(uint64_t **)(v2 + 368);
      while (v14 != v15)
      {
        uint64_t v16 = *v14;
        id v17 = objc_loadWeakRetained((id *)(a1 + 48));
        uint64_t v18 = [v17 sourceForSourceID:v16];

        if (v18)
        {
          if (([v13 containsObject:v18] & 1) == 0) {
            [v13 addObject:v18];
          }
        }

        ++v14;
      }
      unint64_t v19 = (void *)[v13 copy];
      [v11 _setSources:v19];
    }
  }

  v129[0] = &unk_1F1723A70;
  v129[3] = v129;
  id v109 = v11;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)v131, (uint64_t)v129);
  unint64_t v133 = 0;
  long long v20 = operator new(0x28uLL);
  *long long v20 = &unk_1F1723950;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(v20 + 1), (uint64_t)v131);
  unint64_t v133 = v20;
  id v21 = v109;
  uint64_t v22 = (void *)MEMORY[0x1E4F2B370];
  char v23 = [MEMORY[0x1E4F2B618] secondUnit];
  long long v24 = *(_OWORD *)(v2 + 200);
  long long v25 = *(_OWORD *)(v2 + 232);
  long long v121 = *(_OWORD *)(v2 + 216);
  long long v122 = v25;
  long long v26 = *(_OWORD *)(v2 + 136);
  long long v27 = *(_OWORD *)(v2 + 168);
  long long v117 = *(_OWORD *)(v2 + 152);
  long long v118 = v27;
  long long v119 = *(_OWORD *)(v2 + 184);
  long long v120 = v24;
  long long v115 = *(_OWORD *)(v2 + 120);
  long long v116 = v26;
  uint64_t v28 = *(void *)(v2 + 256);
  uint64_t v123 = *(void *)(v2 + 248);
  uint64_t v124 = v28;
  uint64_t v126 = 0;
  uint64_t v127 = 0;
  char v29 = *(const void **)(v2 + 264);
  uint64_t v30 = *(void *)(v2 + 272);
  long long __p = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v29, v30, (v30 - (uint64_t)v29) >> 4);
  uint64_t v128 = *(void *)(v2 + 288);
  if (!v133) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v31 = (*(uint64_t (**)(void *, long long *))(*v133 + 48))(v133, &v115);
  long long v32 = *(double **)(v31 + 8);
  double v33 = 0.0;
  while (v32 != *(double **)(v31 + 16))
  {
    double v35 = *v32;
    double v34 = v32[1];
    v32 += 2;
    double v33 = v33 + v34 - v35;
  }
  long long v36 = [v22 quantityWithUnit:v23 doubleValue:v33 + *(double *)(v31 + 32)];
  [v21 setDuration:v36];

  if (__p)
  {
    uint64_t v126 = __p;
    operator delete(__p);
  }

  uint64_t v37 = v2 + 120;
  long long v38 = *(_OWORD *)(v2 + 232);
  long long v121 = *(_OWORD *)(v2 + 216);
  long long v122 = v38;
  uint64_t v39 = *(void *)(v2 + 248);
  long long v40 = *(_OWORD *)(v2 + 168);
  long long v117 = *(_OWORD *)(v2 + 152);
  long long v118 = v40;
  long long v41 = *(_OWORD *)(v2 + 200);
  long long v119 = *(_OWORD *)(v2 + 184);
  long long v120 = v41;
  long long v42 = *(_OWORD *)(v2 + 136);
  long long v115 = *(_OWORD *)(v2 + 120);
  long long v116 = v42;
  uint64_t v44 = *(void *)(v2 + 256);
  double v43 = *(const void **)(v2 + 264);
  uint64_t v123 = v39;
  uint64_t v124 = v44;
  uint64_t v126 = 0;
  uint64_t v127 = 0;
  uint64_t v45 = *(void *)(v2 + 272);
  long long __p = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v43, v45, (v45 - (uint64_t)v43) >> 4);
  uint64_t v128 = *(void *)(v2 + 288);
  if (!v133) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  objc_msgSend(v21, "setDataCount:", *(void *)(*(uint64_t (**)(void *, long long *))(*v133 + 48))(v133, &v115));
  if (__p)
  {
    uint64_t v126 = __p;
    operator delete(__p);
  }
  uint64_t v114 = v2;
  if (*(unsigned char *)(a1 + 24))
  {
    id v46 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v47 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier((uint64_t)&v115, v2);
    for (uint64_t i = (uint64_t **)v116; i; uint64_t i = (uint64_t **)*i)
    {
      uint64_t v49 = i[2];
      uint64_t v50 = (void *)MEMORY[0x1E4F2B370];
      unint64_t v51 = [MEMORY[0x1E4F2B618] secondUnit];
      if (!v133) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v52 = (*(uint64_t (**)(void *, uint64_t *))(*v133 + 48))(v133, (uint64_t *)i + 3);
      unint64_t v53 = *(double **)(v52 + 8);
      double v54 = 0.0;
      while (v53 != *(double **)(v52 + 16))
      {
        double v56 = *v53;
        double v55 = v53[1];
        v53 += 2;
        double v54 = v54 + v55 - v56;
      }
      uint64_t v57 = [v50 quantityWithUnit:v51 doubleValue:v54 + *(double *)(v52 + 32)];
      [v46 setObject:v57 forKeyedSubscript:v49];

      if (!v133) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      long long v58 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)(*(uint64_t (**)(void *, uint64_t *))(*v133 + 48))(v133, (uint64_t *)i + 3));
      [v47 setObject:v58 forKeyedSubscript:v49];
      uint64_t v2 = v114;
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)&v115);
    [v21 setDurationBySource:v46];
    [v21 setDataCountBySource:v47];
  }
  std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v132);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v131);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)v130, (uint64_t)v129);
  unint64_t v133 = 0;
  long long v59 = operator new(0x28uLL);
  *long long v59 = &unk_1F17239E0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(v59 + 1), (uint64_t)v130);
  unint64_t v133 = v59;
  id v113 = v21;
  uint64_t v60 = *(void *)(a1 + 24);
  long long v61 = *(_OWORD *)(v37 + 112);
  long long v121 = *(_OWORD *)(v37 + 96);
  long long v122 = v61;
  uint64_t v62 = *(void *)(v37 + 128);
  long long v63 = *(_OWORD *)(v37 + 48);
  long long v117 = *(_OWORD *)(v37 + 32);
  long long v118 = v63;
  long long v64 = *(_OWORD *)(v37 + 80);
  long long v119 = *(_OWORD *)(v37 + 64);
  long long v120 = v64;
  long long v65 = *(_OWORD *)(v37 + 16);
  long long v115 = *(_OWORD *)v37;
  long long v116 = v65;
  uint64_t v67 = *(void *)(v2 + 256);
  long long v66 = *(const void **)(v2 + 264);
  uint64_t v123 = v62;
  uint64_t v124 = v67;
  uint64_t v126 = 0;
  uint64_t v127 = 0;
  uint64_t v68 = *(void *)(v2 + 272);
  long long __p = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v66, v68, (v68 - (uint64_t)v66) >> 4);
  uint64_t v128 = *(void *)(v2 + 288);
  if (!v133) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v69 = (*(uint64_t (**)(void *, long long *))(*v133 + 48))(v133, &v115);
  double v70 = *(double *)(v69 + 8);
  double v71 = *(double *)(v69 + 16);
  uint64_t v72 = *(void *)(v69 + 32);
  double v74 = *(double *)(v69 + 40);
  double v73 = *(double *)(v69 + 48);
  double v75 = *(double *)(v69 + 56);
  double v76 = *(double *)(v69 + 80);
  int v77 = *(unsigned __int8 *)(v69 + 112);
  double v78 = *(double *)(v69 + 120);
  double v79 = *(double *)(v69 + 128);
  if (__p)
  {
    uint64_t v126 = __p;
    operator delete(__p);
  }
  uint64_t v80 = *(void *)(a1 + 24);
  uint64_t v81 = _HKStatisticsOptionBaselineRelativeQuantities();
  unint64_t v82 = *(void **)(a1 + 16);
  if ((v81 & v80) != 0) {
    [v82 _unitForChangeInCanonicalUnit];
  }
  else {
  uint64_t v83 = [v82 canonicalUnit];
  }
  if ((v60 & 2) != 0)
  {
    if (v77) {
      double v78 = v78 + (v76 - v78) * 22.5 / (v79 + 22.5);
    }
    uint64_t v84 = [MEMORY[0x1E4F2B370] quantityWithUnit:v83 doubleValue:v78];
    [v113 setAverageQuantity:v84];
  }
  if ((v60 & 4) != 0)
  {
    long long v85 = [MEMORY[0x1E4F2B370] quantityWithUnit:v83 doubleValue:v71];
    [v113 setMinimumQuantity:v85];
  }
  if ((v60 & 8) != 0)
  {
    long long v86 = [MEMORY[0x1E4F2B370] quantityWithUnit:v83 doubleValue:v70];
    [v113 setMaximumQuantity:v86];
  }
  if ((v60 & 0x20) != 0)
  {
    int v87 = [MEMORY[0x1E4F2B370] quantityWithUnit:v83 doubleValue:v74];
    [v113 setMostRecentQuantity:v87];

    long long v88 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v73, v75);
    [v113 setMostRecentQuantityDateInterval:v88];
  }
  [v113 setDataCount:v72];
  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    goto LABEL_92;
  }
  if ((v60 & 2) != 0) {
    id v112 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else {
    id v112 = 0;
  }
  if ((v60 & 4) != 0) {
    id v110 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else {
    id v110 = 0;
  }
  if ((v60 & 8) != 0)
  {
    id v89 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    if ((v60 & 0x20) == 0) {
      goto LABEL_62;
    }
LABEL_64:
    id v91 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v90 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    goto LABEL_65;
  }
  id v89 = 0;
  if ((v60 & 0x20) != 0) {
    goto LABEL_64;
  }
LABEL_62:
  id v90 = 0;
  id v91 = 0;
LABEL_65:
  id v92 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier((uint64_t)&v115, v114);
  for (uint64_t j = (uint64_t **)v116; j; uint64_t j = (uint64_t **)*j)
  {
    long long v94 = j[2];
    if ((v60 & 2) != 0)
    {
      if (!v133) {
        goto LABEL_95;
      }
      int v95 = (void *)MEMORY[0x1E4F2B370];
      uint64_t v96 = (*(uint64_t (**)(void *, uint64_t *))(*v133 + 48))(v133, (uint64_t *)j + 3);
      if (*(unsigned char *)(v96 + 112)) {
        double v97 = *(double *)(v96 + 120)
      }
            + (*(double *)(v96 + 80) - *(double *)(v96 + 120)) * 22.5 / (*(double *)(v96 + 128) + 22.5);
      else {
        double v97 = *(double *)(v96 + 120);
      }
      int v98 = [v95 quantityWithUnit:v83 doubleValue:v97];
      [v112 setObject:v98 forKeyedSubscript:v94];
    }
    if ((v60 & 4) != 0)
    {
      if (!v133) {
        goto LABEL_95;
      }
      double v99 = objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v83, *(double *)((*(uint64_t (**)(void *, uint64_t *))(*v133 + 48))(v133, (uint64_t *)j + 3) + 16));
      [v110 setObject:v99 forKeyedSubscript:v94];
    }
    if ((v60 & 8) != 0)
    {
      if (!v133) {
        goto LABEL_95;
      }
      uint64_t v100 = objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v83, *(double *)((*(uint64_t (**)(void *, uint64_t *))(*v133 + 48))(v133, (uint64_t *)j + 3) + 8));
      [v89 setObject:v100 forKeyedSubscript:v94];
    }
    if ((v60 & 0x20) != 0)
    {
      if (!v133) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v101 = (*(uint64_t (**)(void *, uint64_t *))(*v133 + 48))(v133, (uint64_t *)j + 3);
      double v102 = *(double *)(v101 + 48);
      double v103 = *(double *)(v101 + 56);
      uint64_t v104 = [MEMORY[0x1E4F2B370] quantityWithUnit:v83 doubleValue:*(double *)(v101 + 40)];
      [v91 setObject:v104 forKeyedSubscript:v94];

      int v105 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v102, v103);
      [v90 setObject:v105 forKeyedSubscript:v94];
    }
    if (!v133) {
LABEL_95:
    }
      std::__throw_bad_function_call[abi:ne180100]();
    long long v106 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)((*(uint64_t (**)(void *, uint64_t *))(*v133 + 48))(v133, (uint64_t *)j + 3) + 32));
    [v92 setObject:v106 forKeyedSubscript:v94];
  }
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)&v115);
  if ((v60 & 2) != 0) {
    [v113 setAverageQuantityBySource:v112];
  }
  if ((v60 & 4) != 0) {
    [v113 setMinimumQuantityBySource:v110];
  }
  if ((v60 & 8) != 0) {
    [v113 setMaximumQuantityBySource:v89];
  }
  if ((v60 & 0x20) != 0)
  {
    [v113 setMostRecentQuantityBySource:v91];
    [v113 setMostRecentQuantityDateIntervalBySource:v90];
  }
  [v113 setDataCountBySource:v92];

LABEL_92:
  std::__function::__value_func<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v132);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v130);

  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v129);

  return v113;
}

void sub_1BD0A79F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  std::__function::__value_func<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100]((void *)(v44 - 192));
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](&a41);

  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](&a37);
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 344);
  uint64_t v2 = *(void *)(a1 + 360);
  if (v1 != (*(void *)(a1 + 368) - v2) >> 3)
  {
    id v4 = (void **)(a1 + 360);
    *(void *)(a1 + 368) = v2;
    std::vector<long long>::reserve((void **)(a1 + 360), v1);
    uint64_t v5 = *(void **)(a1 + 336);
    if (v5)
    {
      uint64_t v6 = *(char **)(a1 + 368);
      do
      {
        uint64_t v7 = v5[2];
        unint64_t v8 = *(void *)(a1 + 376);
        if ((unint64_t)v6 >= v8)
        {
          uint64_t v10 = (char *)*v4;
          uint64_t v11 = (v6 - (unsigned char *)*v4) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            uint64_t v10 = *(char **)(a1 + 360);
            uint64_t v6 = *(char **)(a1 + 368);
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v16 = (void *)(v14 + 8 * v11);
          *uint64_t v16 = v7;
          id v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            uint64_t v17 = *((void *)v6 - 1);
            v6 -= 8;
            *--uint64_t v16 = v17;
          }
          *(void *)(a1 + 360) = v16;
          *(void *)(a1 + 368) = v9;
          *(void *)(a1 + 376) = v14 + 8 * v15;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)uint64_t v6 = v7;
          id v9 = v6 + 8;
        }
        *(void *)(a1 + 368) = v9;
        uint64_t v5 = (void *)*v5;
        uint64_t v6 = v9;
      }
      while (v5);
    }
    uint64_t v18 = (id *)(a1 + 88);
    id WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      id v20 = objc_loadWeakRetained(v18);
      [v20 orderSourceIDs:v4];
    }
  }
}

void sub_1BD0A7E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2) {
    a2 = v4 * floor(a2 / v4);
  }
  double v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    uint64_t v124 = (void **)(a1 + 96);
    long long v120 = (double **)(a1 + 64);
    long long v117 = (uint64_t *)(a1 + 256);
    uint64_t v118 = a1 + 120;
    location = (id *)(a1 + 88);
    id v113 = (double **)(a1 + 264);
    id v112 = (void *)(a1 + 304);
    while (1)
    {
      unint64_t v6 = *(void *)(a1 + 96);
      uint64_t v7 = *(long long **)(a1 + 104);
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v7 - v6) >> 4);
      if (v8) {
        break;
      }
LABEL_127:
      *(double *)(a1 + 56) = a2;
LABEL_128:
      double v109 = *(double *)(a1 + 56);
      if (v109 == v5)
      {
        id v110 = [MEMORY[0x1E4F28B00] currentHandler];
        long long v111 = objc_msgSend(NSString, "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>, HDStatisticsTimeInterval>>::_mergeThroughTime(double) [Statistics = HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>, HDStatisticsTimeInterval>]");
        [v110 handleFailureInFunction:v111 file:@"HDStatisticsBucket.hpp" lineNumber:234 description:@"Failed to make forward progress during statistics merge."];

        double v109 = *(double *)(a1 + 56);
      }
      double v5 = v109;
      if (v109 >= a2) {
        return;
      }
    }
    if (v8 != 1)
    {
      double v17 = a2;
      double v18 = a2;
      double v19 = v5;
      uint64_t v20 = *(void *)(a1 + 96);
      if ((long long *)v6 != v7)
      {
        do
        {
          double v21 = *(double *)(v20 + 8);
          double v22 = *(double *)(v20 + 16);
          if (v21 > v19 && v21 < v18) {
            double v18 = *(double *)(v20 + 8);
          }
          if (v22 > v5) {
            double v24 = *(double *)(v20 + 16);
          }
          else {
            double v24 = v17;
          }
          if (v22 < v17)
          {
            double v19 = v5;
            double v17 = v24;
          }
          v20 += 48;
        }
        while ((long long *)v20 != v7);
      }
      if (v17 >= v18) {
        double v25 = v18;
      }
      else {
        double v25 = v17;
      }
      double v26 = *(double *)(a1 + 16);
      if (v26 > 0.0)
      {
        double v27 = v26 * floor(v25 / v26);
        double v28 = v26 * floor((v26 + v5) / v26);
        if (v27 >= v28) {
          double v25 = v27;
        }
        else {
          double v25 = v28;
        }
      }
      *uint64_t v124 = 0;
      v124[1] = 0;
      v124[2] = 0;
      long long __p = (void *)v6;
      if ((long long *)v6 != v7)
      {
        if (v8 > 0x555555555555555) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        char v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v7 - v6) >> 4));
        long long v32 = *(char **)(a1 + 96);
        uint64_t v31 = *(char **)(a1 + 104);
        double v33 = v29;
        if (v31 != v32)
        {
          do
          {
            long long v34 = *((_OWORD *)v31 - 3);
            long long v35 = *((_OWORD *)v31 - 2);
            *(_OWORD *)(v33 - 21) = *(_OWORD *)(v31 - 21);
            *((_OWORD *)v33 - 3) = v34;
            *((_OWORD *)v33 - 2) = v35;
            v33 -= 48;
            v31 -= 48;
          }
          while (v31 != v32);
          uint64_t v31 = (char *)*v124;
        }
        *(void *)(a1 + 96) = v33;
        *(void *)(a1 + 104) = v29;
        *(void *)(a1 + 112) = &v29[48 * v30];
        if (v31) {
          operator delete(v31);
        }
      }
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_updateSourceOrder(a1);
      id WeakRetained = objc_loadWeakRetained(location);

      unint64_t v37 = __clz(v8);
      if (WeakRetained)
      {
        *(void *)&v126.double var0 = a1;
        uint64_t v38 = 126 - 2 * v37;
        if ((long long *)v6 == v7) {
          uint64_t v39 = 0;
        }
        else {
          uint64_t v39 = v38;
        }
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(v6, v7, (uint64_t)&v126, v39, 1);
      }
      else
      {
        uint64_t v42 = 126 - 2 * v37;
        if ((long long *)v6 == v7) {
          uint64_t v39 = 0;
        }
        else {
          uint64_t v39 = v42;
        }
      }
      std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(v6, v7, v39, 1);
      if (*(unsigned char *)(a1 + 25)) {
        id v116 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      }
      else {
        id v116 = 0;
      }
      if ((long long *)v6 == v7)
      {
LABEL_109:
        *(double *)(a1 + 288) = HKIntervalMask<double>::removeIntervalsBefore(v113, v25) + *(double *)(a1 + 288);
        id v92 = *(void **)(a1 + 296);
        if (v92 != v112)
        {
          do
          {
            *((double *)v92 + 26) = HKIntervalMask<double>::removeIntervalsBefore((double **)v92 + 23, v25)
                                  + *((double *)v92 + 26);
            long long v93 = (void *)v92[1];
            if (v93)
            {
              do
              {
                long long v94 = v93;
                long long v93 = (void *)*v93;
              }
              while (v93);
            }
            else
            {
              do
              {
                long long v94 = (void *)v92[2];
                BOOL v95 = *v94 == (void)v92;
                id v92 = v94;
              }
              while (!v95);
            }
            id v92 = v94;
          }
          while (v94 != v112);
        }
        *(double *)(a1 + 56) = v25;

        if (__p) {
          operator delete(__p);
        }
        goto LABEL_128;
      }
      int64_t v119 = 0;
      char v43 = 0;
      unint64_t v44 = v6;
      while (2)
      {
        long long v45 = *(_OWORD *)(v44 + 16);
        *(_OWORD *)&v126.double var0 = *(_OWORD *)v44;
        *(_OWORD *)&v126.double var2 = v45;
        *(void *)&v126.BOOL var4 = *(void *)(v44 + 32);
        double var0 = v126.var0;
        uint64_t v47 = v45;
        if (*(double *)&v45 - v126.var1 - (v25 - v126.var1) < 0.01)
        {
          int64_t v48 = 0;
          BOOL var4 = 0;
          BOOL var5 = 0;
          double v51 = 0.0;
          uint64_t v47 = 0;
          if (!v126.var4) {
            goto LABEL_62;
          }
LABEL_57:
          BOOL v122 = var5;
          int64_t v123 = v48;
          HDRawQuantitySample::applyMask((uint64_t)&v126, v120);
          int v52 = *(unsigned __int8 *)(v44 + 42);
          int v53 = *(unsigned __int8 *)(v44 + 41);
          char v121 = *(unsigned char *)(v44 + 40);
          if (!v126.var4) {
            goto LABEL_90;
          }
          if (v43)
          {
            unint64_t var3 = v126.var3;
            if (v119 == v126.var3 || *(unsigned char *)(a1 + 24))
            {
              HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::addSample(v118, &v126.var0, v52 == 0);
              HDStatisticsTimeInterval::addSample(v117, &v126, v52 == 0);
              int v52 = 1;
            }
          }
          else
          {
            HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::addSample(v118, &v126.var0, v52 == 0);
            HDStatisticsTimeInterval::addSample(v117, &v126, v52 == 0);
            int v52 = 1;
            unint64_t var3 = v126.var3;
            int64_t v119 = v126.var3;
          }
          if (!*(unsigned char *)(a1 + 25)) {
            goto LABEL_89;
          }
          long long v65 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, var3);
          if (!v65) {
            goto LABEL_88;
          }
          long long v66 = [v116 objectForKeyedSubscript:v65];
          uint64_t v67 = v66;
          if (v66)
          {
            if ([v66 longLongValue] != var3 && !*(unsigned char *)(a1 + 24))
            {
LABEL_87:

LABEL_88:
LABEL_89:
              char v43 = 1;
LABEL_90:
              if (var4)
              {
                BOOL v80 = v52 != 0;
                unint64_t v82 = *(char **)(a1 + 104);
                unint64_t v81 = *(void *)(a1 + 112);
                if ((unint64_t)v82 < v81)
                {
                  *(double *)unint64_t v82 = var0;
                  *((double *)v82 + 1) = v51;
                  *((void *)v82 + 2) = v47;
                  *((void *)v82 + 3) = v123;
                  v82[32] = var4;
                  v82[33] = v122;
                  v82[40] = v121;
                  v82[41] = v53;
                  long long v59 = v82 + 48;
                  v82[42] = v80;
                  goto LABEL_107;
                }
                double v76 = (char *)*v124;
                unint64_t v83 = 0xAAAAAAAAAAAAAAABLL * ((v82 - (unsigned char *)*v124) >> 4);
                unint64_t v84 = v83 + 1;
                if (v83 + 1 > 0x555555555555555) {
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v85 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v81 - (void)v76) >> 4);
                if (2 * v85 > v84) {
                  unint64_t v84 = 2 * v85;
                }
                if (v85 >= 0x2AAAAAAAAAAAAAALL) {
                  unint64_t v86 = 0x555555555555555;
                }
                else {
                  unint64_t v86 = v84;
                }
                if (v86)
                {
                  unint64_t v86 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v86);
                  double v76 = *(char **)(a1 + 96);
                  unint64_t v82 = *(char **)(a1 + 104);
                }
                else
                {
                  uint64_t v87 = 0;
                }
                unint64_t v88 = v86 + 48 * v83;
                *(double *)unint64_t v88 = var0;
                *(double *)(v88 + 8) = v51;
                *(void *)(v88 + 16) = v47;
                *(void *)(v88 + 24) = v123;
                *(unsigned char *)(v88 + 32) = var4;
                *(unsigned char *)(v88 + 33) = v122;
                *(unsigned char *)(v88 + 40) = v121;
                *(unsigned char *)(v88 + 41) = v53;
                *(unsigned char *)(v88 + 42) = v80;
                unint64_t v89 = v88;
                if (v82 != v76)
                {
                  do
                  {
                    long long v90 = *((_OWORD *)v82 - 3);
                    long long v91 = *((_OWORD *)v82 - 2);
                    *(_OWORD *)(v89 - 21) = *(_OWORD *)(v82 - 21);
                    *(_OWORD *)(v89 - 48) = v90;
                    *(_OWORD *)(v89 - 32) = v91;
                    v89 -= 48;
                    v82 -= 48;
                  }
                  while (v82 != v76);
                  double v76 = (char *)*v124;
                }
                long long v59 = (_OWORD *)(v88 + 48);
                *(void *)(a1 + 96) = v89;
                *(void *)(a1 + 104) = v88 + 48;
                *(void *)(a1 + 112) = v86 + 48 * v87;
                if (v76) {
LABEL_106:
                }
                  operator delete(v76);
                goto LABEL_107;
              }
              goto LABEL_108;
            }
          }
          else
          {
            int v77 = [NSNumber numberWithLongLong:var3];
            [v116 setObject:v77 forKeyedSubscript:v65];
          }
          unint64_t v78 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, var3);
          double v79 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v78);
          HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::addSample((uint64_t)v79, &v126.var0, v53 == 0);
          HDStatisticsTimeInterval::addSample((uint64_t *)v79 + 17, &v126, v53 == 0);
          LOBYTE(v53) = 1;
          goto LABEL_87;
        }
        if (v25 - v126.var1 < 0.01)
        {
          v126.BOOL var4 = 0;
          goto LABEL_62;
        }
        int64_t v48 = v126.var3;
        BOOL var5 = v126.var5;
        v126.double var2 = v25;
        double v51 = v25;
        BOOL var4 = v126.var4;
        if (v126.var4) {
          goto LABEL_57;
        }
LABEL_62:
        double v55 = *(_OWORD **)(a1 + 104);
        unint64_t v56 = *(void *)(a1 + 112);
        if ((unint64_t)v55 < v56)
        {
          long long v57 = *(_OWORD *)v44;
          long long v58 = *(_OWORD *)(v44 + 32);
          v55[1] = *(_OWORD *)(v44 + 16);
          void v55[2] = v58;
          *double v55 = v57;
          long long v59 = v55 + 3;
          goto LABEL_107;
        }
        unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (unsigned char *)*v124) >> 4);
        unint64_t v61 = v60 + 1;
        if (v60 + 1 > 0x555555555555555) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - (void)*v124) >> 4);
        if (2 * v62 > v61) {
          unint64_t v61 = 2 * v62;
        }
        if (v62 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v63 = 0x555555555555555;
        }
        else {
          unint64_t v63 = v61;
        }
        if (v63) {
          unint64_t v63 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v63);
        }
        else {
          uint64_t v64 = 0;
        }
        uint64_t v68 = (_OWORD *)(v63 + 48 * v60);
        long long v69 = *(_OWORD *)v44;
        long long v70 = *(_OWORD *)(v44 + 32);
        v68[1] = *(_OWORD *)(v44 + 16);
        v68[2] = v70;
        *uint64_t v68 = v69;
        uint64_t v72 = *(char **)(a1 + 96);
        double v71 = *(char **)(a1 + 104);
        double v73 = v68;
        if (v71 != v72)
        {
          do
          {
            long long v74 = *((_OWORD *)v71 - 3);
            long long v75 = *((_OWORD *)v71 - 2);
            *(_OWORD *)((char *)v73 - 21) = *(_OWORD *)(v71 - 21);
            *(v73 - 3) = v74;
            *(v73 - 2) = v75;
            v73 -= 3;
            v71 -= 48;
          }
          while (v71 != v72);
          double v71 = (char *)*v124;
        }
        long long v59 = v68 + 3;
        *(void *)(a1 + 96) = v73;
        *(void *)(a1 + 104) = v68 + 3;
        *(void *)(a1 + 112) = v63 + 48 * v64;
        if (v71)
        {
          double v76 = v71;
          goto LABEL_106;
        }
LABEL_107:
        *(void *)(a1 + 104) = v59;
LABEL_108:
        v44 += 48;
        if ((long long *)v44 == v7) {
          goto LABEL_109;
        }
        continue;
      }
    }
    double v9 = *(double *)(v6 + 8);
    double v10 = *(double *)(v6 + 16);
    int64_t v11 = *(void *)(v6 + 24);
    char v12 = *(unsigned char *)(v6 + 32);
    char v13 = *(unsigned char *)(v6 + 33);
    if (a2 - v9 >= 0.01)
    {
      if (v10 - v9 - (a2 - v9) < 0.01)
      {
        uint64_t v40 = 0;
        char v41 = 0;
        double v16 = 0.0;
        double v15 = *(double *)(v6 + 16);
        char v14 = *(unsigned char *)(v6 + 32);
        double v10 = 0.0;
        char v12 = 0;
LABEL_120:
        uint64_t v96 = *(void *)(a1 + 96);
        int v97 = *(unsigned __int8 *)(v6 + 42);
        int v98 = *(unsigned __int8 *)(v6 + 41);
        int v99 = *(unsigned __int8 *)(v96 + 40);
        double v100 = *(double *)v96;
        v126.var1 = v9;
        v126.double var2 = v15;
        v126.unint64_t var3 = v11;
        v126.BOOL var4 = v14;
        v126.BOOL var5 = v13;
        *(_DWORD *)(&v126.var5 + 1) = *(_DWORD *)(v96 + 34);
        *(_WORD *)(&v126.var5 + 5) = *(_WORD *)(v96 + 38);
        *((double *)&v127 + 1) = v16;
        *(double *)&long long v128 = v10;
        *((void *)&v128 + 1) = v40;
        LOBYTE(v129) = v12;
        HIBYTE(v129) = v41;
        v126.double var0 = v100;
        *(double *)&long long v127 = v100;
        HDRawQuantitySample::applyMask((uint64_t)&v126, v120);
        BOOL v101 = v99 != 0;
        BOOL v102 = v98 != 0;
        BOOL v103 = v97 != 0;
        if (v126.var4)
        {
          BOOL v104 = v97 == 0;
          HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::addSample(v118, &v126.var0, v104);
          HDStatisticsTimeInterval::addSample(v117, &v126, v104);
          if (*(unsigned char *)(a1 + 25))
          {
            unint64_t v105 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v126.var3);
            long long v106 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v105);
            HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::addSample((uint64_t)v106, &v126.var0, v98 == 0);
            HDStatisticsTimeInterval::addSample((uint64_t *)v106 + 17, &v126, v98 == 0);
          }
          BOOL v101 = 1;
          BOOL v102 = 1;
          BOOL v103 = 1;
        }
        if ((_BYTE)v129)
        {
          LOWORD(v125) = v129;
          long long v107 = v128;
          long long v108 = (char *)*v124;
          *(_OWORD *)long long v108 = v127;
          *((_OWORD *)v108 + 1) = v107;
          *((void *)v108 + 4) = v125;
          v108[40] = v101;
          v108[41] = v102;
          v108[42] = v103;
        }
        else
        {
          *(void *)(a1 + 104) = *(void *)(a1 + 96);
        }
        goto LABEL_127;
      }
      double v15 = a2;
      char v14 = *(unsigned char *)(v6 + 32);
      double v16 = a2;
    }
    else
    {
      char v14 = 0;
      double v15 = *(double *)(v6 + 16);
      double v16 = *(double *)(v6 + 8);
    }
    uint64_t v40 = *(void *)(v6 + 24);
    char v41 = *(unsigned char *)(v6 + 33);
    goto LABEL_120;
  }
}

void sub_1BD0A8844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  _Unwind_Resume(a1);
}

uint64_t **HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = a2;
  double v3 = *(void **)(a1 + 304);
  if (!v3) {
    goto LABEL_11;
  }
  double v4 = (uint64_t **)(a1 + 304);
  do
  {
    uint64_t v5 = v3[4];
    BOOL v6 = v5 < a2;
    if (v5 >= a2) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = v3 + 1;
    }
    if (!v6) {
      double v4 = (uint64_t **)v3;
    }
    double v3 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t **)(a1 + 304) || (uint64_t)v4[4] > a2)
  {
LABEL_11:
    unint64_t v8 = (uint64_t **)(a1 + 296);
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 296), a2, &v10);
    double v4 = std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v8, a2, &v10);
  }
  return v4 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    uint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((void *)(a1 + 384), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, a2);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      id v10 = v6;
      uint64_t v7 = (void *)(a1 + 424);
      unint64_t v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        int64_t v11 = &v10;
        *((void *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        id v6 = v10;
      }
    }
  }
  return a2;
}

void sub_1BD0A8A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  double v4 = (id *)(a1 + 88);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    id v6 = (void *)(a1 + 464);
    uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
    if (v7)
    {
      id v8 = (id)v7[3];
    }
    else
    {
      id v9 = objc_loadWeakRetained(v4);
      id v8 = [v9 bundleIdentifierForSourceID:a2];

      if (v8)
      {
        id v10 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
        objc_storeStrong(v10 + 3, v8);
      }
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1BD0A8B0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, void *a3)
{
  id v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        uint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        id v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        id v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    id v9 = (char *)operator new(0xD8uLL);
    *((void *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    *(_OWORD *)(v9 + 136) = 0u;
    *(_OWORD *)(v9 + 152) = 0u;
    *(_OWORD *)(v9 + 168) = 0u;
    *(_OWORD *)(v9 + 184) = 0u;
    *(_OWORD *)(v9 + 200) = 0u;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v12 = a2 - 3;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 4);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v103 = *((void *)a2 - 3);
                uint64_t v104 = *(void *)(v13 + 24);
                if (v103 == v104) {
                  return;
                }
                unint64_t v105 = *(char **)(*(void *)a3 + 360);
                long long v106 = *(char **)(*(void *)a3 + 368);
                long long v107 = v105;
                long long v108 = v105;
                if (v105 == v106) {
                  goto LABEL_171;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)v13, (long long *)(v13 + 48), a2 - 3, a3);
                return;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, (uint64_t)(a2 - 3), a3);
                return;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, v13 + 144, (uint64_t)(a2 - 3), a3);
                return;
              default:
                JUMPOUT(0);
            }
            do
            {
              if (*(void *)v108 == v103) {
                goto LABEL_168;
              }
              v108 += 8;
            }
            while (v108 != v106);
            long long v108 = *(char **)(*(void *)a3 + 368);
LABEL_168:
            while (*(void *)v107 != v104)
            {
              v107 += 8;
              if (v107 == v106)
              {
                long long v107 = *(char **)(*(void *)a3 + 368);
                break;
              }
            }
LABEL_171:
            if (v108 - v105 < v107 - v105)
            {
              *(_OWORD *)v226 = *(_OWORD *)(v13 + 16);
              *(_OWORD *)&v226[16] = *(_OWORD *)(v13 + 32);
              long long v218 = *(_OWORD *)v13;
              long long v109 = *v12;
              long long v110 = *(a2 - 2);
              *(_OWORD *)(v13 + 27) = *(long long *)((char *)a2 - 21);
              *(_OWORD *)unint64_t v13 = v109;
              *(_OWORD *)(v13 + 16) = v110;
              *(long long *)((char *)a2 - 21) = *(_OWORD *)&v226[11];
              long long *v12 = v218;
              *(a2 - 2) = *(_OWORD *)v226;
            }
            return;
          }
          if (v14 <= 1151)
          {
            long long v111 = (long long *)(v13 + 48);
            BOOL v113 = (long long *)v13 == a2 || v111 == a2;
            if (a5)
            {
              if (!v113)
              {
                unint64_t v114 = v13;
                do
                {
                  unint64_t v115 = v114;
                  unint64_t v114 = (unint64_t)v111;
                  uint64_t v116 = *(void *)(v115 + 72);
                  uint64_t v117 = *(void *)(v115 + 24);
                  if (v116 != v117)
                  {
                    uint64_t v118 = *(char **)(*(void *)a3 + 360);
                    int64_t v119 = *(char **)(*(void *)a3 + 368);
                    long long v120 = v118;
                    char v121 = v118;
                    if (v118 != v119)
                    {
                      do
                      {
                        if (*(void *)v121 == v116) {
                          goto LABEL_196;
                        }
                        v121 += 8;
                      }
                      while (v121 != v119);
                      char v121 = *(char **)(*(void *)a3 + 368);
LABEL_196:
                      while (*(void *)v120 != v117)
                      {
                        v120 += 8;
                        if (v120 == v119)
                        {
                          long long v120 = *(char **)(*(void *)a3 + 368);
                          break;
                        }
                      }
                    }
                    if (v121 - v118 < v120 - v118)
                    {
                      uint64_t v227 = *(void *)(v114 + 16);
                      long long v219 = *(_OWORD *)v114;
                      long long v236 = *(_OWORD *)(v115 + 80);
                      unint64_t v122 = v114;
                      while (1)
                      {
                        long long v123 = *(_OWORD *)(v115 + 16);
                        *(_OWORD *)unint64_t v122 = *(_OWORD *)v115;
                        *(_OWORD *)(v122 + 16) = v123;
                        *(_OWORD *)(v122 + 27) = *(_OWORD *)(v115 + 27);
                        if (v115 == v13) {
                          break;
                        }
                        unint64_t v122 = v115;
                        uint64_t v124 = *(void *)(v115 - 24);
                        if (v116 != v124)
                        {
                          uint64_t v125 = *(char **)(*(void *)a3 + 360);
                          HDRawQuantitySample v126 = *(char **)(*(void *)a3 + 368);
                          long long v127 = v125;
                          long long v128 = v125;
                          if (v125 != v126)
                          {
                            do
                            {
                              if (*(void *)v128 == v116) {
                                goto LABEL_208;
                              }
                              v128 += 8;
                            }
                            while (v128 != v126);
                            long long v128 = *(char **)(*(void *)a3 + 368);
LABEL_208:
                            while (*(void *)v127 != v124)
                            {
                              v127 += 8;
                              if (v127 == v126)
                              {
                                long long v127 = *(char **)(*(void *)a3 + 368);
                                break;
                              }
                            }
                          }
                          unint64_t v115 = v122 - 48;
                          if (v128 - v125 < v127 - v125) {
                            continue;
                          }
                        }
                        goto LABEL_212;
                      }
                      unint64_t v122 = v13;
LABEL_212:
                      *(_OWORD *)unint64_t v122 = v219;
                      *(void *)(v122 + 16) = v227;
                      *(void *)(v122 + 24) = v116;
                      *(void *)(v122 + 32) = v236;
                      *(_DWORD *)(v122 + 39) = *(_DWORD *)((char *)&v236 + 7);
                    }
                  }
                  long long v111 = (long long *)(v114 + 48);
                }
                while ((long long *)(v114 + 48) != a2);
              }
            }
            else if (!v113)
            {
              do
              {
                unint64_t v201 = a1;
                a1 = (unint64_t)v111;
                uint64_t v202 = *(void *)(v201 + 72);
                uint64_t v203 = *(void *)(v201 + 24);
                if (v202 != v203)
                {
                  v204 = *(char **)(*(void *)a3 + 360);
                  v205 = *(char **)(*(void *)a3 + 368);
                  v206 = v204;
                  v207 = v204;
                  if (v204 != v205)
                  {
                    do
                    {
                      if (*(void *)v207 == v202) {
                        goto LABEL_312;
                      }
                      v207 += 8;
                    }
                    while (v207 != v205);
                    v207 = *(char **)(*(void *)a3 + 368);
LABEL_312:
                    while (*(void *)v206 != v203)
                    {
                      v206 += 8;
                      if (v206 == v205)
                      {
                        v206 = *(char **)(*(void *)a3 + 368);
                        break;
                      }
                    }
                  }
                  if (v207 - v204 < v206 - v204)
                  {
                    uint64_t v230 = *(void *)(a1 + 16);
                    long long v222 = *(_OWORD *)a1;
                    long long v239 = *(_OWORD *)(v201 + 80);
                    unint64_t v208 = a1;
                    do
                    {
                      v209 = (_OWORD *)v208;
                      unint64_t v208 = v201;
                      long long v210 = *(_OWORD *)(v201 + 16);
                      _OWORD *v209 = *(_OWORD *)v201;
                      v209[1] = v210;
                      *(_OWORD *)((char *)v209 + 27) = *(_OWORD *)(v201 + 27);
                      uint64_t v211 = *(void *)(v201 - 24);
                      if (v202 == v211) {
                        break;
                      }
                      v212 = *(char **)(*(void *)a3 + 360);
                      v213 = *(char **)(*(void *)a3 + 368);
                      v214 = v212;
                      v215 = v212;
                      if (v212 != v213)
                      {
                        do
                        {
                          if (*(void *)v215 == v202) {
                            goto LABEL_322;
                          }
                          v215 += 8;
                        }
                        while (v215 != v213);
                        v215 = *(char **)(*(void *)a3 + 368);
LABEL_322:
                        while (*(void *)v214 != v211)
                        {
                          v214 += 8;
                          if (v214 == v213)
                          {
                            v214 = *(char **)(*(void *)a3 + 368);
                            break;
                          }
                        }
                      }
                      unint64_t v201 = v208 - 48;
                    }
                    while (v215 - v212 < v214 - v212);
                    *(_OWORD *)unint64_t v208 = v222;
                    *(void *)(v208 + 16) = v230;
                    *(void *)(v208 + 24) = v202;
                    *(void *)(v208 + 32) = v239;
                    *(_DWORD *)(v208 + 39) = *(_DWORD *)((char *)&v239 + 7);
                  }
                }
                long long v111 = (long long *)(a1 + 48);
              }
              while ((long long *)(a1 + 48) != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((long long *)v13 != a2)
            {
              int64_t v129 = (v15 - 2) >> 1;
              int64_t v130 = v129;
              do
              {
                int64_t v131 = v130;
                if (v129 >= v130)
                {
                  uint64_t v132 = (2 * v130) | 1;
                  unint64_t v133 = v13 + 48 * v132;
                  if (2 * v131 + 2 < (uint64_t)v15)
                  {
                    uint64_t v134 = *(void *)(v133 + 24);
                    uint64_t v135 = *(void *)(v133 + 72);
                    if (v134 != v135)
                    {
                      v137 = *(char **)(*(void *)a3 + 360);
                      v136 = *(char **)(*(void *)a3 + 368);
                      v138 = v137;
                      v139 = v137;
                      if (v137 != v136)
                      {
                        do
                        {
                          if (*(void *)v139 == v134) {
                            goto LABEL_224;
                          }
                          v139 += 8;
                        }
                        while (v139 != v136);
                        v139 = *(char **)(*(void *)a3 + 368);
LABEL_224:
                        while (*(void *)v138 != v135)
                        {
                          v138 += 8;
                          if (v138 == v136)
                          {
                            v138 = *(char **)(*(void *)a3 + 368);
                            break;
                          }
                        }
                      }
                      v133 += 48 * (v139 - v137 < v138 - v137);
                      if (v139 - v137 < v138 - v137) {
                        uint64_t v132 = 2 * v131 + 2;
                      }
                    }
                  }
                  unint64_t v140 = v13 + 48 * v131;
                  uint64_t v141 = *(void *)(v133 + 24);
                  uint64_t v142 = *(void *)(v140 + 24);
                  if (v141 == v142) {
                    goto LABEL_238;
                  }
                  v144 = *(char **)(*(void *)a3 + 360);
                  v143 = *(char **)(*(void *)a3 + 368);
                  v145 = v144;
                  v146 = v144;
                  if (v144 != v143)
                  {
                    do
                    {
                      if (*(void *)v146 == v141) {
                        goto LABEL_234;
                      }
                      v146 += 8;
                    }
                    while (v146 != v143);
                    v146 = *(char **)(*(void *)a3 + 368);
LABEL_234:
                    while (*(void *)v145 != v142)
                    {
                      v145 += 8;
                      if (v145 == v143)
                      {
                        v145 = *(char **)(*(void *)a3 + 368);
                        break;
                      }
                    }
                  }
                  if (v146 - v144 >= v145 - v144)
                  {
LABEL_238:
                    uint64_t v228 = *(void *)(v140 + 16);
                    long long v220 = *(_OWORD *)v140;
                    long long v237 = *(_OWORD *)(v140 + 32);
                    long long v147 = *(_OWORD *)v133;
                    long long v148 = *(_OWORD *)(v133 + 16);
                    *(_OWORD *)(v140 + 27) = *(_OWORD *)(v133 + 27);
                    *(_OWORD *)unint64_t v140 = v147;
                    *(_OWORD *)(v140 + 16) = v148;
                    if (v129 >= v132)
                    {
                      while (1)
                      {
                        uint64_t v150 = 2 * v132;
                        uint64_t v132 = (2 * v132) | 1;
                        unint64_t v149 = v13 + 48 * v132;
                        uint64_t v151 = v150 + 2;
                        if (v151 < (uint64_t)v15)
                        {
                          uint64_t v152 = *(void *)(v149 + 24);
                          uint64_t v153 = *(void *)(v149 + 72);
                          if (v152 != v153)
                          {
                            v154 = *(char **)(*(void *)a3 + 360);
                            v155 = *(char **)(*(void *)a3 + 368);
                            v156 = v154;
                            v157 = v154;
                            if (v154 != v155)
                            {
                              do
                              {
                                if (*(void *)v157 == v152) {
                                  goto LABEL_246;
                                }
                                v157 += 8;
                              }
                              while (v157 != v155);
                              v157 = *(char **)(*(void *)a3 + 368);
LABEL_246:
                              while (*(void *)v156 != v153)
                              {
                                v156 += 8;
                                if (v156 == v155)
                                {
                                  v156 = *(char **)(*(void *)a3 + 368);
                                  break;
                                }
                              }
                            }
                            v149 += 48 * (v157 - v154 < v156 - v154);
                            if (v157 - v154 < v156 - v154) {
                              uint64_t v132 = v151;
                            }
                          }
                        }
                        uint64_t v158 = *(void *)(v149 + 24);
                        if (v158 != v142)
                        {
                          v160 = *(char **)(*(void *)a3 + 360);
                          v159 = *(char **)(*(void *)a3 + 368);
                          v161 = v160;
                          v162 = v160;
                          if (v160 != v159)
                          {
                            do
                            {
                              if (*(void *)v162 == v158) {
                                goto LABEL_256;
                              }
                              v162 += 8;
                            }
                            while (v162 != v159);
                            v162 = *(char **)(*(void *)a3 + 368);
LABEL_256:
                            while (*(void *)v161 != v142)
                            {
                              v161 += 8;
                              if (v161 == v159)
                              {
                                v161 = *(char **)(*(void *)a3 + 368);
                                break;
                              }
                            }
                          }
                          if (v162 - v160 < v161 - v160) {
                            break;
                          }
                        }
                        long long v163 = *(_OWORD *)v149;
                        long long v164 = *(_OWORD *)(v149 + 16);
                        *(_OWORD *)(v133 + 27) = *(_OWORD *)(v149 + 27);
                        *(_OWORD *)unint64_t v133 = v163;
                        *(_OWORD *)(v133 + 16) = v164;
                        unint64_t v133 = v149;
                        if (v129 < v132) {
                          goto LABEL_261;
                        }
                      }
                    }
                    unint64_t v149 = v133;
LABEL_261:
                    *(_OWORD *)unint64_t v149 = v220;
                    *(void *)(v149 + 16) = v228;
                    *(void *)(v149 + 24) = v142;
                    *(void *)(v149 + 32) = v237;
                    *(_DWORD *)(v149 + 39) = *(_DWORD *)((char *)&v237 + 7);
                  }
                }
                int64_t v130 = v131 - 1;
              }
              while (v131);
              int64_t v165 = v14 / 0x30uLL;
              do
              {
                uint64_t v166 = 0;
                *(_OWORD *)v229 = *(_OWORD *)(v13 + 16);
                *(_OWORD *)&v229[16] = *(_OWORD *)(v13 + 32);
                long long v221 = *(_OWORD *)v13;
                uint64_t v167 = v165 - 2;
                if (v165 < 2) {
                  uint64_t v167 = v165 - 1;
                }
                uint64_t v168 = v167 >> 1;
                unint64_t v169 = v13;
                do
                {
                  v170 = (_OWORD *)v169;
                  v169 += 48 * v166 + 48;
                  uint64_t v171 = 2 * v166;
                  uint64_t v166 = (2 * v166) | 1;
                  uint64_t v172 = v171 + 2;
                  if (v171 + 2 < v165)
                  {
                    uint64_t v173 = *(void *)(v169 + 24);
                    uint64_t v174 = *(void *)(v169 + 72);
                    if (v173 != v174)
                    {
                      v176 = *(char **)(*(void *)a3 + 360);
                      v175 = *(char **)(*(void *)a3 + 368);
                      v177 = v176;
                      v178 = v176;
                      if (v176 != v175)
                      {
                        do
                        {
                          if (*(void *)v178 == v173) {
                            goto LABEL_273;
                          }
                          v178 += 8;
                        }
                        while (v178 != v175);
                        v178 = *(char **)(*(void *)a3 + 368);
LABEL_273:
                        while (*(void *)v177 != v174)
                        {
                          v177 += 8;
                          if (v177 == v175)
                          {
                            v177 = *(char **)(*(void *)a3 + 368);
                            break;
                          }
                        }
                      }
                      v169 += 48 * (v178 - v176 < v177 - v176);
                      if (v178 - v176 < v177 - v176) {
                        uint64_t v166 = v172;
                      }
                    }
                  }
                  long long v179 = *(_OWORD *)v169;
                  long long v180 = *(_OWORD *)(v169 + 16);
                  *(_OWORD *)((char *)v170 + 27) = *(_OWORD *)(v169 + 27);
                  _OWORD *v170 = v179;
                  v170[1] = v180;
                }
                while (v166 <= v168);
                a2 -= 3;
                if ((long long *)v169 == a2)
                {
                  *(_OWORD *)(v169 + 27) = *(_OWORD *)&v229[11];
                  *(_OWORD *)unint64_t v169 = v221;
                  *(_OWORD *)(v169 + 16) = *(_OWORD *)v229;
                }
                else
                {
                  long long v181 = *a2;
                  long long v182 = a2[1];
                  *(_OWORD *)(v169 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v169 = v181;
                  *(_OWORD *)(v169 + 16) = v182;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v229[11];
                  *a2 = v221;
                  a2[1] = *(_OWORD *)v229;
                  uint64_t v183 = v169 - v13 + 48;
                  if (v183 >= 49)
                  {
                    unint64_t v184 = (v183 / 0x30uLL - 2) >> 1;
                    unint64_t v185 = v13 + 48 * v184;
                    uint64_t v186 = *(void *)(v185 + 24);
                    uint64_t v187 = *(void *)(v169 + 24);
                    if (v186 != v187)
                    {
                      v189 = *(char **)(*(void *)a3 + 360);
                      v188 = *(char **)(*(void *)a3 + 368);
                      v190 = v189;
                      v191 = v189;
                      if (v189 != v188)
                      {
                        do
                        {
                          if (*(void *)v191 == v186) {
                            goto LABEL_286;
                          }
                          v191 += 8;
                        }
                        while (v191 != v188);
                        v191 = *(char **)(*(void *)a3 + 368);
LABEL_286:
                        while (*(void *)v190 != v187)
                        {
                          v190 += 8;
                          if (v190 == v188)
                          {
                            v190 = *(char **)(*(void *)a3 + 368);
                            break;
                          }
                        }
                      }
                      if (v191 - v189 < v190 - v189)
                      {
                        uint64_t v242 = *(void *)(v169 + 16);
                        long long v238 = *(_OWORD *)v169;
                        long long v233 = *(_OWORD *)(v169 + 32);
                        do
                        {
                          v192 = (_OWORD *)v169;
                          unint64_t v169 = v185;
                          long long v193 = *(_OWORD *)v185;
                          long long v194 = *(_OWORD *)(v185 + 16);
                          *(_OWORD *)((char *)v192 + 27) = *(_OWORD *)(v185 + 27);
                          _OWORD *v192 = v193;
                          v192[1] = v194;
                          if (!v184) {
                            break;
                          }
                          unint64_t v184 = (v184 - 1) >> 1;
                          unint64_t v185 = v13 + 48 * v184;
                          uint64_t v195 = *(void *)(v185 + 24);
                          if (v195 == v187) {
                            break;
                          }
                          v197 = *(char **)(*(void *)a3 + 360);
                          v196 = *(char **)(*(void *)a3 + 368);
                          v198 = v197;
                          v199 = v197;
                          if (v197 != v196)
                          {
                            do
                            {
                              if (*(void *)v199 == v195) {
                                goto LABEL_297;
                              }
                              v199 += 8;
                            }
                            while (v199 != v196);
                            v199 = *(char **)(*(void *)a3 + 368);
LABEL_297:
                            while (*(void *)v198 != v187)
                            {
                              v198 += 8;
                              if (v198 == v196)
                              {
                                v198 = *(char **)(*(void *)a3 + 368);
                                break;
                              }
                            }
                          }
                        }
                        while (v199 - v197 < v198 - v197);
                        *(_OWORD *)unint64_t v169 = v238;
                        *(void *)(v169 + 16) = v242;
                        *(void *)(v169 + 24) = v187;
                        *(void *)(v169 + 32) = v233;
                        *(_DWORD *)(v169 + 39) = *(_DWORD *)((char *)&v233 + 7);
                      }
                    }
                  }
                }
              }
              while (v165-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          double v17 = (long long *)(v13 + 48 * (v15 >> 1));
          if ((unint64_t)v14 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v15 >> 1)), a2 - 3, a3);
            uint64_t v18 = 3 * v16;
            double v19 = (long long *)(a1 + 48 * v16 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)(a1 + 48), v19, a2 - 6, a3);
            uint64_t v20 = (long long *)(a1 + 48 + 16 * v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)(a1 + 96), v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(v19, v17, v20, a3);
            *(_OWORD *)v223 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v223[16] = *(_OWORD *)(a1 + 32);
            long long v216 = *(_OWORD *)a1;
            long long v21 = *(long long *)((char *)v17 + 27);
            long long v22 = v17[1];
            *(_OWORD *)a1 = *v17;
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(a1 + 27) = v21;
            *(long long *)((char *)v17 + 27) = *(_OWORD *)&v223[11];
            long long *v17 = v216;
            v17[1] = *(_OWORD *)v223;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)(a1 + 48 * (v15 >> 1)), (long long *)a1, a2 - 3, a3);
          }
          --a4;
          if (a5)
          {
            uint64_t v23 = *(void *)(a1 + 24);
            uint64_t v24 = *(void *)a3;
            break;
          }
          uint64_t v25 = *(void *)(a1 - 24);
          uint64_t v23 = *(void *)(a1 + 24);
          if (v25 != v23)
          {
            uint64_t v24 = *(void *)a3;
            double v26 = *(char **)(*(void *)a3 + 360);
            double v27 = *(char **)(*(void *)a3 + 368);
            double v28 = v26;
            char v29 = v26;
            if (v26 != v27)
            {
              do
              {
                if (*(void *)v29 == v25) {
                  goto LABEL_16;
                }
                v29 += 8;
              }
              while (v29 != v27);
              char v29 = *(char **)(*(void *)a3 + 368);
LABEL_16:
              while (*(void *)v28 != v23)
              {
                v28 += 8;
                if (v28 == v27)
                {
                  double v28 = *(char **)(*(void *)a3 + 368);
                  break;
                }
              }
            }
            if (v29 - v26 < v28 - v26) {
              break;
            }
          }
          uint64_t v241 = *(void *)(a1 + 16);
          long long v232 = *(_OWORD *)(a1 + 32);
          long long v235 = *(_OWORD *)a1;
          uint64_t v67 = *((void *)a2 - 3);
          if (v23 == v67) {
            goto LABEL_107;
          }
          uint64_t v68 = *(char **)(*(void *)a3 + 360);
          long long v69 = *(char **)(*(void *)a3 + 368);
          if (v68 == v69)
          {
            double v71 = *(char **)(*(void *)a3 + 360);
            long long v70 = v71;
          }
          else
          {
            long long v70 = *(char **)(*(void *)a3 + 360);
            while (*(void *)v70 != v23)
            {
              v70 += 8;
              if (v70 == v69)
              {
                long long v70 = *(char **)(*(void *)a3 + 368);
                break;
              }
            }
            double v71 = *(char **)(*(void *)a3 + 360);
            while (*(void *)v71 != v67)
            {
              v71 += 8;
              if (v71 == v69)
              {
                double v71 = *(char **)(*(void *)a3 + 368);
                break;
              }
            }
          }
          if (v70 - v68 >= v71 - v68)
          {
LABEL_107:
            unint64_t v13 = a1 + 48;
            if (a1 + 48 < (unint64_t)a2)
            {
              uint64_t v75 = *(void *)a3;
              unint64_t v76 = a1;
              do
              {
                uint64_t v77 = *(void *)(v76 + 72);
                unint64_t v76 = v13;
                if (v23 != v77)
                {
                  unint64_t v78 = *(char **)(v75 + 360);
                  double v79 = *(char **)(v75 + 368);
                  BOOL v80 = v78;
                  unint64_t v81 = v78;
                  if (v78 != v79)
                  {
                    do
                    {
                      if (*(void *)v81 == v23) {
                        goto LABEL_114;
                      }
                      v81 += 8;
                    }
                    while (v81 != v79);
                    unint64_t v81 = *(char **)(v75 + 368);
LABEL_114:
                    while (*(void *)v80 != v77)
                    {
                      v80 += 8;
                      if (v80 == v79)
                      {
                        BOOL v80 = *(char **)(v75 + 368);
                        break;
                      }
                    }
                  }
                  if (v81 - v78 < v80 - v78) {
                    break;
                  }
                }
                v13 += 48;
              }
              while (v76 + 48 < (unint64_t)a2);
            }
          }
          else
          {
            unint64_t v13 = a1;
            do
            {
              do
              {
                uint64_t v72 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v72);
              if (v68 == v69)
              {
                long long v74 = *(char **)(*(void *)a3 + 360);
                double v73 = v74;
              }
              else
              {
                double v73 = *(char **)(*(void *)a3 + 360);
                while (*(void *)v73 != v23)
                {
                  v73 += 8;
                  if (v73 == v69)
                  {
                    double v73 = *(char **)(*(void *)a3 + 368);
                    break;
                  }
                }
                long long v74 = *(char **)(*(void *)a3 + 360);
                while (*(void *)v74 != v72)
                {
                  v74 += 8;
                  if (v74 == v69)
                  {
                    long long v74 = *(char **)(*(void *)a3 + 368);
                    break;
                  }
                }
              }
            }
            while (v73 - v68 >= v74 - v68);
          }
          unint64_t v82 = a2;
          if (v13 < (unint64_t)a2)
          {
            uint64_t v83 = *(void *)a3;
            unint64_t v82 = a2;
            do
            {
              uint64_t v84 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v84) {
                break;
              }
              unint64_t v85 = *(char **)(v83 + 360);
              unint64_t v86 = *(char **)(v83 + 368);
              uint64_t v87 = v85;
              unint64_t v88 = v85;
              if (v85 != v86)
              {
                do
                {
                  if (*(void *)v88 == v23) {
                    goto LABEL_126;
                  }
                  v88 += 8;
                }
                while (v88 != v86);
                unint64_t v88 = *(char **)(v83 + 368);
LABEL_126:
                while (*(void *)v87 != v84)
                {
                  v87 += 8;
                  if (v87 == v86)
                  {
                    uint64_t v87 = *(char **)(v83 + 368);
                    break;
                  }
                }
              }
            }
            while (v88 - v85 < v87 - v85);
          }
          while (v13 < (unint64_t)v82)
          {
            *(_OWORD *)v225 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v225[16] = *(_OWORD *)(v13 + 32);
            long long v217 = *(_OWORD *)v13;
            long long v89 = *v82;
            long long v90 = v82[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v82 + 27);
            *(_OWORD *)unint64_t v13 = v89;
            *(_OWORD *)(v13 + 16) = v90;
            *(long long *)((char *)v82 + 27) = *(_OWORD *)&v225[11];
            *unint64_t v82 = v217;
            v82[1] = *(_OWORD *)v225;
            uint64_t v91 = *(void *)a3;
            do
            {
              do
              {
                uint64_t v92 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v92);
              long long v93 = *(char **)(v91 + 360);
              long long v94 = *(char **)(v91 + 368);
              if (v93 == v94)
              {
                uint64_t v96 = *(char **)(v91 + 360);
                BOOL v95 = v96;
              }
              else
              {
                BOOL v95 = *(char **)(v91 + 360);
                while (*(void *)v95 != v23)
                {
                  v95 += 8;
                  if (v95 == v94)
                  {
                    BOOL v95 = *(char **)(v91 + 368);
                    break;
                  }
                }
                uint64_t v96 = *(char **)(v91 + 360);
                while (*(void *)v96 != v92)
                {
                  v96 += 8;
                  if (v96 == v94)
                  {
                    uint64_t v96 = *(char **)(v91 + 368);
                    break;
                  }
                }
              }
            }
            while (v95 - v93 >= v96 - v93);
            do
            {
              uint64_t v97 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v97) {
                break;
              }
              if (v93 == v94)
              {
                int v99 = v93;
                int v98 = v93;
              }
              else
              {
                int v98 = v93;
                while (*(void *)v98 != v23)
                {
                  v98 += 8;
                  if (v98 == v94)
                  {
                    int v98 = v94;
                    break;
                  }
                }
                int v99 = v93;
                while (*(void *)v99 != v97)
                {
                  v99 += 8;
                  if (v99 == v94)
                  {
                    int v99 = v94;
                    break;
                  }
                }
              }
            }
            while (v98 - v93 < v99 - v93);
          }
          double v100 = (long long *)(v13 - 48);
          BOOL v5 = v13 - 48 >= a1;
          BOOL v6 = v13 - 48 == a1;
          if (v13 - 48 != a1)
          {
            long long v101 = *v100;
            long long v102 = *(_OWORD *)(v13 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
            *(_OWORD *)a1 = v101;
            *(_OWORD *)(a1 + 16) = v102;
          }
          a5 = 0;
          *double v100 = v235;
          *(void *)(v13 - 32) = v241;
          *(void *)(v13 - 24) = v23;
          *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v232 + 7);
          *(void *)(v13 - 16) = v232;
        }
        uint64_t v240 = *(void *)(a1 + 16);
        long long v231 = *(_OWORD *)(a1 + 32);
        long long v234 = *(_OWORD *)a1;
        unint64_t v30 = a1;
        do
        {
          unint64_t v31 = v30;
          v30 += 48;
          uint64_t v32 = *(void *)(v31 + 72);
          if (v32 == v23) {
            break;
          }
          double v33 = *(char **)(v24 + 360);
          long long v34 = *(char **)(v24 + 368);
          long long v35 = v33;
          long long v36 = v33;
          if (v33 != v34)
          {
            do
            {
              if (*(void *)v36 == v32) {
                goto LABEL_26;
              }
              v36 += 8;
            }
            while (v36 != v34);
            long long v36 = *(char **)(v24 + 368);
LABEL_26:
            while (*(void *)v35 != v23)
            {
              v35 += 8;
              if (v35 == v34)
              {
                long long v35 = *(char **)(v24 + 368);
                break;
              }
            }
          }
        }
        while (v36 - v33 < v35 - v33);
        unint64_t v37 = a2;
        if (v31 == a1)
        {
          unint64_t v37 = a2;
          if (v30 < (unint64_t)a2)
          {
            unint64_t v37 = a2;
            do
            {
              uint64_t v43 = *((void *)v37 - 3);
              v37 -= 3;
              if (v43 != v23)
              {
                unint64_t v44 = *(char **)(v24 + 360);
                long long v45 = *(char **)(v24 + 368);
                id v46 = v44;
                uint64_t v47 = v44;
                if (v44 != v45)
                {
                  do
                  {
                    if (*(void *)v47 == v43) {
                      goto LABEL_48;
                    }
                    v47 += 8;
                  }
                  while (v47 != v45);
                  uint64_t v47 = *(char **)(v24 + 368);
LABEL_48:
                  while (*(void *)v46 != v23)
                  {
                    v46 += 8;
                    if (v46 == v45)
                    {
                      id v46 = *(char **)(v24 + 368);
                      break;
                    }
                  }
                }
                if (v47 - v44 < v46 - v44) {
                  break;
                }
              }
            }
            while (v30 < (unint64_t)v37);
          }
        }
        else
        {
          do
          {
            do
            {
              uint64_t v38 = *((void *)v37 - 3);
              v37 -= 3;
            }
            while (v38 == v23);
            uint64_t v39 = *(char **)(v24 + 360);
            uint64_t v40 = *(char **)(v24 + 368);
            char v41 = v39;
            uint64_t v42 = v39;
            if (v39 != v40)
            {
              do
              {
                if (*(void *)v42 == v38) {
                  goto LABEL_36;
                }
                v42 += 8;
              }
              while (v42 != v40);
              uint64_t v42 = *(char **)(v24 + 368);
LABEL_36:
              while (*(void *)v41 != v23)
              {
                v41 += 8;
                if (v41 == v40)
                {
                  char v41 = *(char **)(v24 + 368);
                  break;
                }
              }
            }
          }
          while (v42 - v39 >= v41 - v39);
        }
        unint64_t v13 = v30;
        if (v30 < (unint64_t)v37)
        {
          int64_t v48 = v37;
          do
          {
            *(_OWORD *)v224 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v224[16] = *(_OWORD *)(v13 + 32);
            long long v49 = *(_OWORD *)v13;
            long long v51 = *v48;
            long long v50 = v48[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v48 + 27);
            *(_OWORD *)unint64_t v13 = v51;
            *(_OWORD *)(v13 + 16) = v50;
            *(long long *)((char *)v48 + 27) = *(_OWORD *)&v224[11];
            long long *v48 = v49;
            v48[1] = *(_OWORD *)v224;
            uint64_t v52 = *(void *)a3;
            do
            {
              uint64_t v53 = *(void *)(v13 + 72);
              v13 += 48;
              if (v53 == v23) {
                break;
              }
              double v54 = *(char **)(v52 + 360);
              double v55 = *(char **)(v52 + 368);
              unint64_t v56 = v54;
              long long v57 = v54;
              if (v54 != v55)
              {
                do
                {
                  if (*(void *)v57 == v53) {
                    goto LABEL_61;
                  }
                  v57 += 8;
                }
                while (v57 != v55);
                long long v57 = *(char **)(v52 + 368);
LABEL_61:
                while (*(void *)v56 != v23)
                {
                  v56 += 8;
                  if (v56 == v55)
                  {
                    unint64_t v56 = *(char **)(v52 + 368);
                    break;
                  }
                }
              }
            }
            while (v57 - v54 < v56 - v54);
            do
            {
              do
              {
                uint64_t v58 = *((void *)v48 - 3);
                v48 -= 3;
              }
              while (v58 == v23);
              long long v59 = *(char **)(v52 + 360);
              unint64_t v60 = *(char **)(v52 + 368);
              unint64_t v61 = v59;
              unint64_t v62 = v59;
              if (v59 != v60)
              {
                do
                {
                  if (*(void *)v62 == v58) {
                    goto LABEL_70;
                  }
                  v62 += 8;
                }
                while (v62 != v60);
                unint64_t v62 = *(char **)(v52 + 368);
LABEL_70:
                while (*(void *)v61 != v23)
                {
                  v61 += 8;
                  if (v61 == v60)
                  {
                    unint64_t v61 = *(char **)(v52 + 368);
                    break;
                  }
                }
              }
            }
            while (v62 - v59 >= v61 - v59);
          }
          while (v13 < (unint64_t)v48);
        }
        unint64_t v63 = (long long *)(v13 - 48);
        if (v13 - 48 != a1)
        {
          long long v64 = *v63;
          long long v65 = *(_OWORD *)(v13 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
          *(_OWORD *)a1 = v64;
          *(_OWORD *)(a1 + 16) = v65;
        }
        long long *v63 = v234;
        *(void *)(v13 - 32) = v240;
        *(void *)(v13 - 24) = v23;
        *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v231 + 7);
        *(void *)(v13 - 16) = v231;
        if (v30 >= (unint64_t)v37) {
          break;
        }
LABEL_80:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(a1, v13 - 48, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, v13 - 48, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(v13, (uint64_t)a2, a3))
      {
        break;
      }
      if (!v66) {
        goto LABEL_80;
      }
    }
    a2 = (long long *)(v13 - 48);
    if (!v66) {
      continue;
    }
    break;
  }
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(long long *a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = *((void *)a2 + 3);
  uint64_t v5 = *((void *)a1 + 3);
  if (v4 == v5) {
    goto LABEL_23;
  }
  BOOL v6 = *(char **)(*(void *)a4 + 360);
  uint64_t v7 = *(char **)(*(void *)a4 + 368);
  if (v6 == v7)
  {
    id v9 = *(char **)(*(void *)a4 + 360);
    uint64_t v8 = v9;
  }
  else
  {
    uint64_t v8 = *(char **)(*(void *)a4 + 360);
    while (*(void *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        uint64_t v8 = *(char **)(*(void *)a4 + 368);
        break;
      }
    }
    id v9 = *(char **)(*(void *)a4 + 360);
    while (*(void *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        id v9 = *(char **)(*(void *)a4 + 368);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    uint64_t v13 = *((void *)a3 + 3);
    if (v13 != v4)
    {
      uint64_t v14 = *(char **)(*(void *)a4 + 360);
      unint64_t v15 = *(char **)(*(void *)a4 + 368);
      unint64_t v16 = v14;
      double v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(void *)v17 == v13) {
            goto LABEL_28;
          }
          v17 += 8;
        }
        while (v17 != v15);
        double v17 = *(char **)(*(void *)a4 + 368);
LABEL_28:
        while (*(void *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            unint64_t v16 = *(char **)(*(void *)a4 + 368);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        long long v18 = *a2;
        *(_OWORD *)id v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        long long v19 = *(long long *)((char *)a3 + 27);
        long long v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(long long *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        __n128 result = *(__n128 *)&v46[11];
        *(long long *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        uint64_t v22 = *((void *)a2 + 3);
        uint64_t v23 = *((void *)a1 + 3);
        if (v22 != v23)
        {
          uint64_t v24 = *(char **)(*(void *)a4 + 360);
          uint64_t v25 = *(char **)(*(void *)a4 + 368);
          double v26 = v24;
          double v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(void *)v27 == v22) {
                goto LABEL_37;
              }
              v27 += 8;
            }
            while (v27 != v25);
            double v27 = *(char **)(*(void *)a4 + 368);
LABEL_37:
            while (*(void *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                double v26 = *(char **)(*(void *)a4 + 368);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            long long v28 = *a1;
            *(_OWORD *)uint64_t v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            long long v29 = *(long long *)((char *)a2 + 27);
            long long v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(long long *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            __n128 result = *(__n128 *)&v47[11];
            *(long long *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    uint64_t v10 = *((void *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        unint64_t v12 = *(char **)(*(void *)a4 + 360);
        int64_t v11 = v12;
      }
      else
      {
        int64_t v11 = *(char **)(*(void *)a4 + 360);
        while (*(void *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            int64_t v11 = *(char **)(*(void *)a4 + 368);
            break;
          }
        }
        unint64_t v12 = *(char **)(*(void *)a4 + 360);
        while (*(void *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            unint64_t v12 = *(char **)(*(void *)a4 + 368);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        long long v31 = a1[1];
        long long v32 = *a1;
        *(void *)long long v49 = *((void *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        long long v33 = *(long long *)((char *)a3 + 27);
        long long v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(long long *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        __n128 result = *(__n128 *)&v49[3];
        *(long long *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    long long v35 = *a1;
    *(_OWORD *)int64_t v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    long long v36 = *(long long *)((char *)a2 + 27);
    long long v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(long long *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    __n128 result = *(__n128 *)&v48[11];
    *(long long *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    uint64_t v38 = *((void *)a3 + 3);
    uint64_t v39 = *((void *)a2 + 3);
    if (v38 != v39)
    {
      uint64_t v40 = *(char **)(*(void *)a4 + 360);
      char v41 = *(char **)(*(void *)a4 + 368);
      uint64_t v42 = v40;
      uint64_t v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(void *)v43 == v38) {
            goto LABEL_50;
          }
          v43 += 8;
        }
        while (v43 != v41);
        uint64_t v43 = *(char **)(*(void *)a4 + 368);
LABEL_50:
        while (*(void *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            uint64_t v42 = *(char **)(*(void *)a4 + 368);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        long long v31 = a2[1];
        long long v32 = *a2;
        *(void *)long long v49 = *((void *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        long long v44 = *(long long *)((char *)a3 + 27);
        long long v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(long long *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 - 24);
      uint64_t v9 = *(void *)(a1 + 24);
      if (v8 == v9) {
        return result;
      }
      uint64_t v10 = *(char **)(*(void *)a3 + 360);
      int64_t v11 = *(char **)(*(void *)a3 + 368);
      unint64_t v12 = v10;
      uint64_t v13 = v10;
      if (v10 == v11) {
        goto LABEL_10;
      }
      do
      {
        if (*(void *)v13 == v8) {
          goto LABEL_7;
        }
        v13 += 8;
      }
      while (v13 != v11);
      uint64_t v13 = *(char **)(*(void *)a3 + 368);
      do
      {
LABEL_7:
        if (*(void *)v12 == v9) {
          goto LABEL_10;
        }
        v12 += 8;
      }
      while (v12 != v11);
      unint64_t v12 = *(char **)(*(void *)a3 + 368);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        uint64_t v14 = (long long *)(a2 - 48);
        long long v15 = *(_OWORD *)a1;
        *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        long long v16 = *(_OWORD *)(a2 - 21);
        long long v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *uint64_t v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(long long *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), a3);
      uint64_t v19 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      int v20 = 0;
      break;
  }
  while (1)
  {
    uint64_t v21 = *(void *)(v19 + 24);
    uint64_t v22 = *(void *)(v18 + 24);
    if (v21 != v22)
    {
      uint64_t v23 = *(char **)(*(void *)a3 + 360);
      uint64_t v24 = *(char **)(*(void *)a3 + 368);
      uint64_t v25 = v23;
      double v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(void *)v26 == v21) {
            goto LABEL_19;
          }
          v26 += 8;
        }
        while (v26 != v24);
        double v26 = *(char **)(*(void *)a3 + 368);
LABEL_19:
        while (*(void *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            uint64_t v25 = *(char **)(*(void *)a3 + 368);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        long long v34 = *(_OWORD *)v19;
        uint64_t v36 = *(void *)(v19 + 16);
        long long v37 = *(_OWORD *)(v19 + 32);
        uint64_t v27 = v19;
        while (1)
        {
          long long v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1) {
            break;
          }
          uint64_t v27 = v18;
          uint64_t v29 = *(void *)(v18 - 24);
          if (v21 != v29)
          {
            long long v30 = *(char **)(*(void *)a3 + 360);
            long long v31 = *(char **)(*(void *)a3 + 368);
            long long v32 = v30;
            long long v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(void *)v33 == v21) {
                  goto LABEL_30;
                }
                v33 += 8;
              }
              while (v33 != v31);
              long long v33 = *(char **)(*(void *)a3 + 368);
LABEL_30:
              while (*(void *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  long long v32 = *(char **)(*(void *)a3 + 368);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30) {
              continue;
            }
          }
          goto LABEL_36;
        }
        uint64_t v27 = a1;
LABEL_36:
        *(_OWORD *)uint64_t v27 = v34;
        *(void *)(v27 + 16) = v36;
        *(void *)(v27 + 24) = v21;
        *(void *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8) {
          return v19 + 48 == a2;
        }
      }
    }
    uint64_t v18 = v19;
    v19 += 48;
    if (v19 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)a2, (long long *)a3, a5).n128_u64[0];
  uint64_t v11 = *(void *)(a4 + 24);
  uint64_t v12 = *(void *)(a3 + 24);
  if (v11 != v12)
  {
    uint64_t v13 = *(char **)(*(void *)a5 + 360);
    uint64_t v14 = *(char **)(*(void *)a5 + 368);
    long long v15 = v13;
    long long v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(void *)v16 == v11) {
          goto LABEL_6;
        }
        v16 += 8;
      }
      while (v16 != v14);
      long long v16 = *(char **)(*(void *)a5 + 368);
LABEL_6:
      while (*(void *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          long long v15 = *(char **)(*(void *)a5 + 368);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      long long v17 = *(_OWORD *)a3;
      *(_OWORD *)uint64_t v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      long long v18 = *(_OWORD *)(a4 + 27);
      long long v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v38;
      __n128 result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      uint64_t v20 = *(void *)(a3 + 24);
      uint64_t v21 = *(void *)(a2 + 24);
      if (v20 != v21)
      {
        uint64_t v22 = *(char **)(*(void *)a5 + 360);
        uint64_t v23 = *(char **)(*(void *)a5 + 368);
        uint64_t v24 = v22;
        uint64_t v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(void *)v25 == v20) {
              goto LABEL_15;
            }
            v25 += 8;
          }
          while (v25 != v23);
          uint64_t v25 = *(char **)(*(void *)a5 + 368);
LABEL_15:
          while (*(void *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              uint64_t v24 = *(char **)(*(void *)a5 + 368);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          long long v26 = *(_OWORD *)a2;
          *(_OWORD *)uint64_t v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          long long v27 = *(_OWORD *)(a3 + 27);
          long long v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 16) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)v39;
          __n128 result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          uint64_t v29 = *(void *)(a2 + 24);
          uint64_t v30 = *(void *)(a1 + 24);
          if (v29 != v30)
          {
            long long v31 = *(char **)(*(void *)a5 + 360);
            long long v32 = *(char **)(*(void *)a5 + 368);
            long long v33 = v31;
            long long v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(void *)v34 == v29) {
                  goto LABEL_24;
                }
                v34 += 8;
              }
              while (v34 != v32);
              long long v34 = *(char **)(*(void *)a5 + 368);
LABEL_24:
              while (*(void *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  long long v33 = *(char **)(*(void *)a5 + 368);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              long long v35 = *(_OWORD *)a1;
              *(_OWORD *)uint64_t v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              long long v36 = *(_OWORD *)(a2 + 27);
              long long v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 16) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 16) = *(_OWORD *)v40;
              __n128 result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  uint64_t v13 = *(void *)(a5 + 24);
  uint64_t v14 = *(void *)(a4 + 24);
  if (v13 != v14)
  {
    long long v15 = *(char **)(*(void *)a6 + 360);
    long long v16 = *(char **)(*(void *)a6 + 368);
    long long v17 = v15;
    long long v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(void *)v18 == v13) {
          goto LABEL_6;
        }
        v18 += 8;
      }
      while (v18 != v16);
      long long v18 = *(char **)(*(void *)a6 + 368);
LABEL_6:
      while (*(void *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          long long v17 = *(char **)(*(void *)a6 + 368);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      long long v19 = *(_OWORD *)a4;
      *(_OWORD *)long long v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      long long v20 = *(_OWORD *)(a5 + 27);
      long long v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 16) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v49;
      __n128 result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      uint64_t v22 = *(void *)(a4 + 24);
      uint64_t v23 = *(void *)(a3 + 24);
      if (v22 != v23)
      {
        uint64_t v24 = *(char **)(*(void *)a6 + 360);
        uint64_t v25 = *(char **)(*(void *)a6 + 368);
        long long v26 = v24;
        long long v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(void *)v27 == v22) {
              goto LABEL_15;
            }
            v27 += 8;
          }
          while (v27 != v25);
          long long v27 = *(char **)(*(void *)a6 + 368);
LABEL_15:
          while (*(void *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              long long v26 = *(char **)(*(void *)a6 + 368);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          long long v28 = *(_OWORD *)a3;
          *(_OWORD *)long long v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          long long v29 = *(_OWORD *)(a4 + 27);
          long long v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 16) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 16) = *(_OWORD *)v50;
          __n128 result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          uint64_t v31 = *(void *)(a3 + 24);
          uint64_t v32 = *(void *)(a2 + 24);
          if (v31 != v32)
          {
            long long v33 = *(char **)(*(void *)a6 + 360);
            long long v34 = *(char **)(*(void *)a6 + 368);
            long long v35 = v33;
            long long v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(void *)v36 == v31) {
                  goto LABEL_24;
                }
                v36 += 8;
              }
              while (v36 != v34);
              long long v36 = *(char **)(*(void *)a6 + 368);
LABEL_24:
              while (*(void *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  long long v35 = *(char **)(*(void *)a6 + 368);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              long long v37 = *(_OWORD *)a2;
              *(_OWORD *)long long v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              long long v38 = *(_OWORD *)(a3 + 27);
              long long v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 16) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 16) = *(_OWORD *)v51;
              __n128 result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              uint64_t v40 = *(void *)(a2 + 24);
              uint64_t v41 = *(void *)(a1 + 24);
              if (v40 != v41)
              {
                uint64_t v42 = *(char **)(*(void *)a6 + 360);
                uint64_t v43 = *(char **)(*(void *)a6 + 368);
                long long v44 = v42;
                long long v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(void *)v45 == v40) {
                      goto LABEL_33;
                    }
                    v45 += 8;
                  }
                  while (v45 != v43);
                  long long v45 = *(char **)(*(void *)a6 + 368);
LABEL_33:
                  while (*(void *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      long long v44 = *(char **)(*(void *)a6 + 368);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  long long v46 = *(_OWORD *)a1;
                  *(_OWORD *)uint64_t v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  long long v47 = *(_OWORD *)(a2 + 27);
                  long long v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 16) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 16) = *(_OWORD *)v52;
                  __n128 result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v10) >> 4);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*((double *)a2 - 5) < *(double *)(v10 + 8))
                {
                  *(_OWORD *)uint64_t v118 = *(_OWORD *)(v10 + 16);
                  *(_OWORD *)&v118[16] = *(_OWORD *)(v10 + 32);
                  long long v110 = *(_OWORD *)v10;
                  long long v52 = *(a2 - 3);
                  long long v53 = *(a2 - 2);
                  *(_OWORD *)(v10 + 27) = *(long long *)((char *)a2 - 21);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(long long *)((char *)a2 - 21) = *(_OWORD *)&v118[11];
                  *(a2 - 3) = v110;
                  *(a2 - 2) = *(_OWORD *)v118;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)v10, (long long *)(v10 + 48), a2 - 3);
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v10, v10 + 48, v10 + 96, (uint64_t)(a2 - 3));
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v10, v10 + 48, v10 + 96, v10 + 144, (uint64_t)(a2 - 3));
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 1151)
          {
            double v54 = (long long *)(v10 + 48);
            BOOL v56 = (long long *)v10 == a2 || v54 == a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  long long v59 = v54;
                  double v60 = *(double *)(v58 + 56);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *(void *)v54;
                    *(_OWORD *)long long v111 = *(_OWORD *)(v58 + 64);
                    *(_OWORD *)&v111[16] = *(_OWORD *)(v58 + 80);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      unint64_t v63 = (_OWORD *)(v10 + v62);
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      v63[3] = *(_OWORD *)(v10 + v62);
                      v63[4] = v64;
                      *(_OWORD *)((char *)v63 + 75) = *(_OWORD *)(v10 + v62 + 27);
                      if (!v62) {
                        break;
                      }
                      v62 -= 48;
                      if (v60 >= *((double *)v63 - 5))
                      {
                        uint64_t v65 = v10 + v62 + 48;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = *(_OWORD *)v111;
                    *(_OWORD *)(v65 + 27) = *(_OWORD *)&v111[11];
                  }
                  double v54 = v59 + 3;
                  v57 += 48;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 3 != a2);
              }
            }
            else if (!v56)
            {
              do
              {
                int v98 = v54;
                double v99 = *(double *)(a1 + 56);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *(void *)v54;
                  *(_OWORD *)unint64_t v114 = *(_OWORD *)(a1 + 64);
                  *(_OWORD *)&v114[16] = *(_OWORD *)(a1 + 80);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(v101 - 2);
                    long long *v101 = *(v101 - 3);
                    v101[1] = v102;
                    *(long long *)((char *)v101 + 27) = *(long long *)((char *)v101 - 21);
                    double v103 = *((double *)v101 - 11);
                    v101 -= 3;
                  }
                  while (v99 < v103);
                  *(void *)long long v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *(long long *)((char *)v101 + 27) = *(_OWORD *)&v114[11];
                  v101[1] = *(_OWORD *)v114;
                }
                v54 += 3;
                a1 = (unint64_t)v98;
              }
              while (v98 + 3 != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((long long *)v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 48 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v70 + 8) < *(double *)(v70 + 56))
                  {
                    v70 += 48;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  unint64_t v71 = v10 + 48 * v68;
                  double v72 = *(double *)(v71 + 8);
                  if (*(double *)(v70 + 8) >= v72)
                  {
                    uint64_t v73 = *(void *)v71;
                    *(_OWORD *)id v112 = *(_OWORD *)(v71 + 16);
                    *(_OWORD *)&v112[16] = *(_OWORD *)(v71 + 32);
                    do
                    {
                      long long v74 = (_OWORD *)v71;
                      unint64_t v71 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_OWORD *)((char *)v74 + 27) = *(_OWORD *)(v70 + 27);
                      *long long v74 = v75;
                      v74[1] = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = 2 * v69;
                      uint64_t v69 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 48 * v69;
                      uint64_t v78 = v77 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v70 + 8) < *(double *)(v70 + 56))
                      {
                        v70 += 48;
                        uint64_t v69 = v78;
                      }
                    }
                    while (*(double *)(v70 + 8) >= v72);
                    *(void *)unint64_t v71 = v73;
                    *(double *)(v71 + 8) = v72;
                    *(_OWORD *)(v71 + 16) = *(_OWORD *)v112;
                    *(_OWORD *)(v71 + 27) = *(_OWORD *)&v112[11];
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x30uLL;
              do
              {
                uint64_t v80 = 0;
                *(_OWORD *)int64_t v119 = *(_OWORD *)(v10 + 16);
                *(_OWORD *)&v119[16] = *(_OWORD *)(v10 + 32);
                long long v113 = *(_OWORD *)v10;
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = (_OWORD *)v81;
                  v81 += 48 * v80 + 48;
                  uint64_t v83 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v84 = v83 + 2;
                  if (v84 < v79 && *(double *)(v81 + 8) < *(double *)(v81 + 56))
                  {
                    v81 += 48;
                    uint64_t v80 = v84;
                  }
                  long long v85 = *(_OWORD *)v81;
                  long long v86 = *(_OWORD *)(v81 + 16);
                  *(_OWORD *)((char *)v82 + 27) = *(_OWORD *)(v81 + 27);
                  *unint64_t v82 = v85;
                  v82[1] = v86;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 3;
                if ((long long *)v81 == a2)
                {
                  *(_OWORD *)(v81 + 27) = *(_OWORD *)&v119[11];
                  *(_OWORD *)unint64_t v81 = v113;
                  *(_OWORD *)(v81 + 16) = *(_OWORD *)v119;
                }
                else
                {
                  long long v87 = *a2;
                  long long v88 = a2[1];
                  *(_OWORD *)(v81 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v81 = v87;
                  *(_OWORD *)(v81 + 16) = v88;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v119[11];
                  *a2 = v113;
                  a2[1] = *(_OWORD *)v119;
                  uint64_t v89 = v81 - v10 + 48;
                  if (v89 >= 49)
                  {
                    unint64_t v90 = (v89 / 0x30uLL - 2) >> 1;
                    unint64_t v91 = v10 + 48 * v90;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      *(_OWORD *)long long v106 = *(_OWORD *)(v81 + 16);
                      *(_OWORD *)&v106[16] = *(_OWORD *)(v81 + 32);
                      do
                      {
                        long long v94 = (_OWORD *)v81;
                        unint64_t v81 = v91;
                        long long v95 = *(_OWORD *)v91;
                        long long v96 = *(_OWORD *)(v91 + 16);
                        *(_OWORD *)((char *)v94 + 27) = *(_OWORD *)(v91 + 27);
                        *long long v94 = v95;
                        v94[1] = v96;
                        if (!v90) {
                          break;
                        }
                        unint64_t v90 = (v90 - 1) >> 1;
                        unint64_t v91 = v10 + 48 * v90;
                      }
                      while (*(double *)(v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_OWORD *)(v81 + 16) = *(_OWORD *)v106;
                      *(_OWORD *)(v81 + 27) = *(_OWORD *)&v106[11];
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (long long *)(v10 + 48 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v12 >> 1)), a2 - 3);
            uint64_t v15 = 3 * v13;
            long long v16 = (long long *)(a1 + 48 * v13 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48), v16, a2 - 6);
            long long v17 = (long long *)(a1 + 48 + 16 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 96), v17, a2 - 9);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v16, v14, v17);
            *(_OWORD *)unint64_t v115 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v115[16] = *(_OWORD *)(a1 + 32);
            long long v107 = *(_OWORD *)a1;
            long long v18 = *(long long *)((char *)v14 + 27);
            long long v19 = v14[1];
            *(_OWORD *)a1 = *v14;
            *(_OWORD *)(a1 + 16) = v19;
            *(_OWORD *)(a1 + 27) = v18;
            *(long long *)((char *)v14 + 27) = *(_OWORD *)&v115[11];
            *uint64_t v14 = v107;
            v14[1] = *(_OWORD *)v115;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48 * (v12 >> 1)), (long long *)a1, a2 - 3);
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 40) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          *(_OWORD *)unint64_t v105 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)&v105[16] = *(_OWORD *)(a1 + 32);
          if (v20 >= *((double *)a2 - 5))
          {
            unint64_t v41 = a1 + 48;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= (unint64_t)a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 48;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 48;
              double v40 = *(double *)(v39 + 56);
              v39 += 48;
            }
            while (v20 >= v40);
          }
          uint64_t v43 = a2;
          if (v10 < (unint64_t)a2)
          {
            long long v44 = a2;
            do
            {
              uint64_t v43 = v44 - 3;
              double v45 = *((double *)v44 - 5);
              v44 -= 3;
            }
            while (v20 < v45);
          }
          while (v10 < (unint64_t)v43)
          {
            *(_OWORD *)uint64_t v117 = *(_OWORD *)(v10 + 16);
            *(_OWORD *)&v117[16] = *(_OWORD *)(v10 + 32);
            long long v109 = *(_OWORD *)v10;
            long long v46 = *v43;
            long long v47 = v43[1];
            *(_OWORD *)(v10 + 27) = *(long long *)((char *)v43 + 27);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(long long *)((char *)v43 + 27) = *(_OWORD *)&v117[11];
            *uint64_t v43 = v109;
            v43[1] = *(_OWORD *)v117;
            do
            {
              double v48 = *(double *)(v10 + 56);
              v10 += 48;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *((double *)v43 - 5);
              v43 -= 3;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 48 >= a1;
          BOOL v5 = v10 - 48 == a1;
          if (v10 - 48 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 48);
            long long v51 = *(_OWORD *)(v10 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v10 - 21);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 48) = v38;
          *(double *)(v10 - 40) = v20;
          *(_OWORD *)(v10 - 21) = *(_OWORD *)&v105[11];
          *(_OWORD *)(v10 - 32) = *(_OWORD *)v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        *(_OWORD *)uint64_t v104 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v104[16] = *(_OWORD *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 56);
          v21 += 48;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        uint64_t v25 = a2;
        if (v21 == 48)
        {
          long long v28 = a2;
          while (v24 < (unint64_t)v28)
          {
            long long v26 = v28 - 3;
            double v29 = *((double *)v28 - 5);
            v28 -= 3;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          long long v26 = v28;
        }
        else
        {
          do
          {
            long long v26 = v25 - 3;
            double v27 = *((double *)v25 - 5);
            v25 -= 3;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < (unint64_t)v26)
        {
          long long v30 = v26;
          do
          {
            *(_OWORD *)uint64_t v116 = *(_OWORD *)(v10 + 16);
            *(_OWORD *)&v116[16] = *(_OWORD *)(v10 + 32);
            long long v108 = *(_OWORD *)v10;
            long long v31 = *v30;
            long long v32 = v30[1];
            *(_OWORD *)(v10 + 27) = *(long long *)((char *)v30 + 27);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(long long *)((char *)v30 + 27) = *(_OWORD *)&v116[11];
            *long long v30 = v108;
            v30[1] = *(_OWORD *)v116;
            do
            {
              double v33 = *(double *)(v10 + 56);
              v10 += 48;
            }
            while (v33 < v20);
            do
            {
              double v34 = *((double *)v30 - 5);
              v30 -= 3;
            }
            while (v34 >= v20);
          }
          while (v10 < (unint64_t)v30);
        }
        if (v10 - 48 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 48);
          long long v36 = *(_OWORD *)(v10 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v10 - 21);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 48) = v22;
        *(double *)(v10 - 40) = v20;
        *(_OWORD *)(v10 - 21) = *(_OWORD *)&v104[11];
        *(_OWORD *)(v10 - 32) = *(_OWORD *)v104;
        if (v24 >= (unint64_t)v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(a1, v10 - 48, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, v10 - 48);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(v10, (uint64_t)a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = (long long *)(v10 - 48);
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 40) < *(double *)(a1 + 8))
      {
        long long v6 = *(_OWORD *)a1;
        *(_OWORD *)double v20 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v20[16] = *(_OWORD *)(a1 + 32);
        long long v7 = *(_OWORD *)(a2 - 21);
        long long v8 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 27) = v7;
        *(_OWORD *)(a2 - 48) = v6;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v20;
        *(_OWORD *)(a2 - 21) = *(_OWORD *)&v20[11];
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48);
      return 1;
    default:
      uint64_t v9 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96));
      uint64_t v10 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    double v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      uint64_t v14 = *(void *)v10;
      *(_OWORD *)long long v19 = *(_OWORD *)(v10 + 16);
      *(_OWORD *)&v19[16] = *(_OWORD *)(v10 + 32);
      uint64_t v15 = v11;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        long long v17 = *(_OWORD *)(a1 + v15 + 112);
        *(_OWORD *)(v16 + 144) = *(_OWORD *)(a1 + v15 + 96);
        *(_OWORD *)(v16 + 160) = v17;
        *(_OWORD *)(v16 + 171) = *(_OWORD *)(a1 + v15 + 123);
        if (v15 == -96) {
          break;
        }
        v15 -= 48;
        if (v13 >= *(double *)(v16 + 56))
        {
          uint64_t v18 = a1 + v15 + 144;
          goto LABEL_12;
        }
      }
      uint64_t v18 = a1;
LABEL_12:
      *(void *)uint64_t v18 = v14;
      *(double *)(v18 + 8) = v13;
      *(_OWORD *)(v18 + 16) = *(_OWORD *)v19;
      *(_OWORD *)(v18 + 27) = *(_OWORD *)&v19[11];
      if (++v12 == 8) {
        return v10 + 48 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 48;
    v10 += 48;
    if (v10 == a2) {
      return 1;
    }
  }
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  double v3 = *(void **)(a2 + 296);
  double v49 = (void *)(a2 + 304);
  if (v3 == (void *)(a2 + 304)) {
    return;
  }
  long long v51 = (void *)(a1 + 16);
  do
  {
    BOOL v5 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a2, v3[4]);
    long long v6 = v5;
    if (!v5) {
      goto LABEL_80;
    }
    unint64_t v7 = [v5 hash];
    unint64_t v8 = v7;
    unint64_t v9 = *(void *)(a1 + 8);
    if (!v9) {
      goto LABEL_21;
    }
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v52 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v2 = v7;
      if (v7 >= v9) {
        unint64_t v2 = v7 % v9;
      }
    }
    else
    {
      unint64_t v2 = (v9 - 1) & v7;
    }
    uint64_t v11 = *(char ***)(*(void *)a1 + 8 * v2);
    if (!v11 || (int v12 = *v11) == 0)
    {
LABEL_21:
      long long v19 = (char *)operator new(0xC8uLL);
      v53[0] = v19;
      v53[1] = v51;
      *(void *)long long v19 = 0;
      *((void *)v19 + 1) = v8;
      *((void *)v19 + 2) = v6;
      *(_OWORD *)(v19 + 24) = 0u;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      *(_OWORD *)(v19 + 104) = 0u;
      *(_OWORD *)(v19 + 120) = 0u;
      *(_OWORD *)(v19 + 136) = 0u;
      *(_OWORD *)(v19 + 152) = 0u;
      *(_OWORD *)(v19 + 168) = 0u;
      *(_OWORD *)(v19 + 184) = 0u;
      char v54 = 1;
      float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v21 = *(float *)(a1 + 32);
      if (v9 && (float)(v21 * (float)v9) >= v20)
      {
LABEL_67:
        BOOL v37 = *(char ***)(*(void *)a1 + 8 * v2);
        int v12 = (char *)v53[0];
        if (v37)
        {
          *(void *)v53[0] = *v37;
        }
        else
        {
          *(void *)v53[0] = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = v12;
          *(void *)(*(void *)a1 + 8 * v2) = v51;
          if (!*(void *)v12)
          {
LABEL_76:
            v53[0] = 0;
            ++*(void *)(a1 + 24);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v53);
            goto LABEL_77;
          }
          unint64_t v38 = *(void *)(*(void *)v12 + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v38 >= v9) {
              v38 %= v9;
            }
          }
          else
          {
            v38 &= v9 - 1;
          }
          BOOL v37 = (char **)(*(void *)a1 + 8 * v38);
        }
        long long *v37 = v12;
        goto LABEL_76;
      }
      BOOL v22 = (v9 & (v9 - 1)) != 0;
      if (v9 < 3) {
        BOOL v22 = 1;
      }
      unint64_t v23 = v22 | (2 * v9);
      unint64_t v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      else {
        int8x8_t prime = (int8x8_t)v23;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v9 = *(void *)(a1 + 8);
      if (*(void *)&prime > v9) {
        goto LABEL_33;
      }
      if (*(void *)&prime < v9)
      {
        unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          unint64_t v32 = std::__next_prime(v32);
        }
        else
        {
          uint64_t v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2) {
            unint64_t v32 = v34;
          }
        }
        if (*(void *)&prime <= v32) {
          int8x8_t prime = (int8x8_t)v32;
        }
        if (*(void *)&prime >= v9)
        {
          unint64_t v9 = *(void *)(a1 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            long long v26 = operator new(8 * *(void *)&prime);
            double v27 = *(void **)a1;
            *(void *)a1 = v26;
            if (v27) {
              operator delete(v27);
            }
            uint64_t v28 = 0;
            *(int8x8_t *)(a1 + 8) = prime;
            do
              *(void *)(*(void *)a1 + 8 * v28++) = 0;
            while (*(void *)&prime != v28);
            double v29 = (void *)*v51;
            if (*v51)
            {
              unint64_t v30 = v29[1];
              uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(void *)&prime) {
                  v30 %= *(void *)&prime;
                }
              }
              else
              {
                v30 &= *(void *)&prime - 1;
              }
              *(void *)(*(void *)a1 + 8 * v30) = v51;
              long long v35 = (void *)*v29;
              if (*v29)
              {
                do
                {
                  unint64_t v36 = v35[1];
                  if (v31.u32[0] > 1uLL)
                  {
                    if (v36 >= *(void *)&prime) {
                      v36 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v36 &= *(void *)&prime - 1;
                  }
                  if (v36 != v30)
                  {
                    if (!*(void *)(*(void *)a1 + 8 * v36))
                    {
                      *(void *)(*(void *)a1 + 8 * v36) = v29;
                      goto LABEL_58;
                    }
                    void *v29 = *v35;
                    void *v35 = **(void **)(*(void *)a1 + 8 * v36);
                    **(void **)(*(void *)a1 + 8 * v36) = v35;
                    long long v35 = v29;
                  }
                  unint64_t v36 = v30;
LABEL_58:
                  double v29 = v35;
                  long long v35 = (void *)*v35;
                  unint64_t v30 = v36;
                }
                while (v35);
              }
            }
            unint64_t v9 = (unint64_t)prime;
            goto LABEL_62;
          }
          double v48 = *(void **)a1;
          *(void *)a1 = 0;
          if (v48) {
            operator delete(v48);
          }
          unint64_t v9 = 0;
          *(void *)(a1 + 8) = 0;
        }
      }
LABEL_62:
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v8 >= v9) {
          unint64_t v2 = v8 % v9;
        }
        else {
          unint64_t v2 = v8;
        }
      }
      else
      {
        unint64_t v2 = (v9 - 1) & v8;
      }
      goto LABEL_67;
    }
    while (1)
    {
      unint64_t v13 = *((void *)v12 + 1);
      if (v13 == v8) {
        break;
      }
      if (v52 > 1)
      {
        if (v13 >= v9) {
          v13 %= v9;
        }
      }
      else
      {
        v13 &= v9 - 1;
      }
      if (v13 != v2) {
        goto LABEL_21;
      }
LABEL_20:
      int v12 = *(char **)v12;
      if (!v12) {
        goto LABEL_21;
      }
    }
    id v14 = *((id *)v12 + 2);
    uint64_t v15 = v6;
    id v16 = v6;
    long long v17 = v16;
    if (v14 != v16)
    {
      char v18 = [v14 isEqualToString:v16];

      long long v6 = v15;
      if (v18) {
        goto LABEL_77;
      }
      goto LABEL_20;
    }

    long long v6 = v15;
LABEL_77:
    *(_OWORD *)(v12 + 24) = *(_OWORD *)(v3 + 5);
    long long v39 = *(_OWORD *)(v3 + 7);
    long long v40 = *(_OWORD *)(v3 + 9);
    long long v41 = *(_OWORD *)(v3 + 11);
    *(_OWORD *)(v12 + 88) = *(_OWORD *)(v3 + 13);
    *(_OWORD *)(v12 + 72) = v41;
    *(_OWORD *)(v12 + 56) = v40;
    *(_OWORD *)(v12 + 40) = v39;
    long long v42 = *(_OWORD *)(v3 + 15);
    long long v43 = *(_OWORD *)(v3 + 17);
    long long v44 = *(_OWORD *)(v3 + 19);
    *((void *)v12 + 19) = v3[21];
    *(_OWORD *)(v12 + 136) = v44;
    *(_OWORD *)(v12 + 120) = v43;
    *(_OWORD *)(v12 + 104) = v42;
    *((void *)v12 + 20) = v3[22];
    if (v12 + 16 != (char *)(v3 + 4)) {
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v12 + 168, (char *)v3[23], v3[24], (uint64_t)(v3[24] - v3[23]) >> 4);
    }
    *((void *)v12 + 24) = v3[26];

LABEL_80:
    double v45 = (void *)v3[1];
    if (v45)
    {
      do
      {
        long long v46 = v45;
        double v45 = (void *)*v45;
      }
      while (v45);
    }
    else
    {
      do
      {
        long long v46 = (void *)v3[2];
        BOOL v47 = *v46 == (void)v3;
        double v3 = v46;
      }
      while (!v47);
    }
    double v3 = v46;
  }
  while (v46 != v49);
}

void sub_1BD0ABABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);

  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::~__hash_table(v6);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  unint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,0>(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 152);
  if (v2)
  {
    *(void *)(a1 + 160) = v2;
    operator delete(v2);
  }
  double v3 = *(void **)a1;
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      double v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1723950;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1723950;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C187B8A0);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0x28uLL);
  *unint64_t v2 = &unk_1F1723950;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BD0ABD98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1723950;
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48))(v1) + 136;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F17239E0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F17239E0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C187B8A0);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0x28uLL);
  *unint64_t v2 = &unk_1F17239E0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BD0AC030(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F17239E0;
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  unint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__func()
{
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  void *result = &unk_1F1723A70;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1723A70;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 656))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a4, 3, @"Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date");
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  }
  double v8 = *(double *)(a2 + 8);
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9)
  {
    if (*(unsigned char *)(a1 + 656))
    {
      double v10 = -1.79769313e308;
    }
    else
    {
      double v10 = *(double *)(a1 + 176);
      double v12 = *(double *)(a1 + 120);
      if (v10 <= v12) {
        double v10 = -1.79769313e308;
      }
      if (v10 < v12) {
        double v10 = *(double *)(a1 + 120);
      }
    }
  }
  else
  {
    double v10 = *(double *)(a1 + 176);
    if (v10 <= *(double *)(a1 + 120)) {
      double v10 = -1.79769313e308;
    }
  }
  if (v10 <= v8)
  {
    if (v9 && a3) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_advanceToTime(a1, v8);
    }
    HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    unint64_t v13 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
    uint64_t v11 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v13, a4);
  }
  return v11;
}

void sub_1BD0AC47C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_advanceToTime(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 128) <= a2)
  {
    uint64_t v4 = a1 + 112;
    BOOL v5 = (double *)(a1 + 120);
    do
    {
      uint64_t v6 = *(void *)(a1 + 632);
      uint64_t v7 = *(void *)(a1 + 624);
      if (v6 == v7)
      {
        uint64_t v22 = 0;
        uint64_t v15 = *(void **)(a1 + 40);
        id v16 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a2];
        double v8 = [v15 dateIntervalContainingDate:v16 index:&v22];

        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v17 = v22;
        double v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v19 = v18;
        float v20 = [v8 endDate];
        [v20 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::resetToBucket(v4, v17, v19, v21);
      }
      else
      {
        double v8 = [*(id *)(a1 + 40) dateIntervalAtIndex:*(void *)(a1 + 112) + 1];
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        double v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v12 = v11;
        unint64_t v13 = [v8 endDate];
        [v13 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::advanceBucket(v4, v12, v14);
      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_didChangeBucket(a1, v9);
      if (v6 != v7) {
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
      }
    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1BD0AC688(_Unwind_Exception *exception_object)
{
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a1 + 8;
  double v6 = *(double *)(a1 + 8);
  double v7 = *(double *)(a2 + 8);
  double v8 = *(double *)(a2 + 16);
  uint64_t v9 = *(uint64_t **)(a2 + 24);
  unsigned __int8 v10 = *(unsigned char *)(a2 + 32);
  char v11 = *(unsigned char *)(a2 + 33);
  int v12 = v10;
  char v13 = v11;
  unint64_t v14 = (unint64_t)v9;
  double v15 = v8;
  double v16 = v7;
  if (v6 - v7 >= 0.01)
  {
    if (v8 - v7 - (v6 - v7) >= 0.01)
    {
      int v12 = *(unsigned __int8 *)(a2 + 32);
      char v13 = *(unsigned char *)(a2 + 33);
      unint64_t v14 = *(void *)(a2 + 24);
      double v15 = *(double *)(a2 + 16);
      double v16 = *(double *)(a1 + 8);
    }
    else
    {
      int v12 = 0;
      char v13 = 0;
      unint64_t v14 = 0;
      double v15 = 0.0;
      double v16 = 0.0;
    }
  }
  uint64_t v17 = *(uint64_t **)a2;
  double v18 = *(double *)(a1 + 16);
  double v19 = v18 - v16;
  double v20 = v15 - v16 - (v18 - v16);
  if (!*(_DWORD *)(a1 + 36))
  {
    if (v20 < 0.01)
    {
LABEL_10:
      unint64_t v65 = 0;
      int v21 = 0;
      char v66 = 0;
      double v18 = 0.0;
      double v22 = 0.0;
      if (!v12) {
        goto LABEL_28;
      }
      goto LABEL_11;
    }
    if (v19 >= 0.01) {
      goto LABEL_27;
    }
LABEL_25:
    int v21 = v12;
    unint64_t v28 = v14;
    double v22 = v15;
    double v18 = v16;
    if (!v21) {
      return;
    }
    goto LABEL_56;
  }
  if (v19 < 0.01) {
    goto LABEL_25;
  }
  if (v20 < 0.01) {
    goto LABEL_10;
  }
LABEL_27:
  double v22 = v15;
  unint64_t v65 = v14;
  int v21 = v12;
  char v66 = v13;
  double v15 = *(double *)(a1 + 16);
  if (!v12)
  {
LABEL_28:
    char v13 = v66;
    unint64_t v28 = v65;
    if (!v21) {
      return;
    }
    goto LABEL_56;
  }
LABEL_11:
  double v63 = v16;
  double v64 = v15;
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 328, v14, v14);
  unint64_t v23 = *(void *)(a1 + 112);
  if (v23 == *(void *)(a1 + 104) && *(uint64_t *)(a1 + 160) <= 0)
  {
    v29.f64[1] = *(float64_t *)(a1 + 16);
    double v24 = v63;
    double v25 = v64;
    v29.f64[0] = v63;
    v30.f64[0] = *(float64_t *)(a1 + 8);
    v30.f64[1] = v64;
    int8x16_t v31 = (int8x16_t)vcgtq_f64(v30, v29);
    v30.f64[0] = v63;
    *(int8x16_t *)(a1 + 48) = vbslq_s8(v31, *(int8x16_t *)(a1 + 8), (int8x16_t)v30);
    if (!a3) {
      goto LABEL_31;
    }
    goto LABEL_22;
  }
  double v24 = v63;
  double v25 = v64;
  if (v63 < *(double *)(a1 + 48))
  {
    double v26 = *(double *)(a1 + 8);
    if (v63 >= v26) {
      double v26 = v63;
    }
    *(double *)(a1 + 48) = v26;
  }
  if (v64 > *(double *)(a1 + 56))
  {
    double v27 = *(double *)(a1 + 16);
    if (v27 >= v64) {
      double v27 = v64;
    }
    *(double *)(a1 + 56) = v27;
  }
  if (a3)
  {
LABEL_22:
    if (v24 < *(double *)(a1 + 16))
    {
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, v24);
      double v24 = v63;
      double v25 = v64;
      unint64_t v23 = *(void *)(a1 + 112);
    }
  }
LABEL_31:
  unint64_t v32 = *(void *)(a1 + 120);
  if (v23 >= v32)
  {
    uint64_t v34 = *(void *)(a1 + 104);
    unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - v34) >> 4);
    unint64_t v36 = v35 + 1;
    if (v35 + 1 > 0x555555555555555) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - v34) >> 4);
    if (2 * v37 > v36) {
      unint64_t v36 = 2 * v37;
    }
    if (v37 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v38 = 0x555555555555555;
    }
    else {
      unint64_t v38 = v36;
    }
    if (v38)
    {
      unint64_t v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v38);
      double v24 = v63;
      double v25 = v64;
    }
    else
    {
      uint64_t v39 = 0;
    }
    unint64_t v40 = v38 + 48 * v35;
    unint64_t v41 = v38 + 48 * v39;
    *(void *)unint64_t v40 = v17;
    *(double *)(v40 + 8) = v24;
    *(double *)(v40 + 16) = v25;
    *(void *)(v40 + 24) = v14;
    *(unsigned char *)(v40 + 32) = v12;
    *(unsigned char *)(v40 + 33) = v13;
    *(_WORD *)(v40 + 40) = 0;
    *(unsigned char *)(v40 + 42) = 0;
    unint64_t v33 = v40 + 48;
    long long v43 = *(char **)(a1 + 104);
    long long v42 = *(char **)(a1 + 112);
    if (v42 == v43)
    {
      char v13 = v66;
      unint64_t v28 = v65;
    }
    else
    {
      char v13 = v66;
      unint64_t v28 = v65;
      do
      {
        long long v44 = *((_OWORD *)v42 - 3);
        long long v45 = *((_OWORD *)v42 - 2);
        *(_OWORD *)(v40 - 21) = *(_OWORD *)(v42 - 21);
        *(_OWORD *)(v40 - 48) = v44;
        *(_OWORD *)(v40 - 32) = v45;
        v40 -= 48;
        v42 -= 48;
      }
      while (v42 != v43);
      long long v42 = *(char **)(a1 + 104);
    }
    *(void *)(a1 + 104) = v40;
    *(void *)(a1 + 112) = v33;
    *(void *)(a1 + 120) = v41;
    if (v42) {
      operator delete(v42);
    }
  }
  else
  {
    *(void *)unint64_t v23 = v17;
    *(double *)(v23 + 8) = v24;
    *(double *)(v23 + 16) = v25;
    *(void *)(v23 + 24) = v14;
    *(unsigned char *)(v23 + 32) = v12;
    *(unsigned char *)(v23 + 33) = v13;
    *(_WORD *)(v23 + 40) = 0;
    unint64_t v33 = v23 + 48;
    *(unsigned char *)(v23 + 42) = 0;
    char v13 = v66;
    unint64_t v28 = v65;
  }
  *(void *)(a1 + 112) = v33;
  if (!*(unsigned char *)(a1 + 200) || *(double *)(a1 + 176) <= v7)
  {
    *(void *)(a1 + 168) = v17;
    *(double *)(a1 + 176) = v7;
    *(double *)(a1 + 184) = v8;
    *(void *)(a1 + 192) = v9;
    *(unsigned char *)(a1 + 200) = v10;
    *(unsigned char *)(a1 + 201) = v11;
  }
  if (*(unsigned char *)(a1 + 33)
    && ((unint64_t v46 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(v5, v14), v47 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsForSource(v5, v46), !*((unsigned char *)v47 + 72))|| *((double *)v47 + 6) <= v7))
  {
    v47[5] = v17;
    *((double *)v47 + 6) = v7;
    *((double *)v47 + 7) = v8;
    v47[8] = v9;
    *((unsigned char *)v47 + 72) = v10;
    *((unsigned char *)v47 + 73) = v11;
    if (!v21) {
      return;
    }
  }
  else if (!v21)
  {
    return;
  }
LABEL_56:
  unint64_t v48 = *(void *)(a1 + 520);
  unint64_t v49 = *(void *)(a1 + 528);
  if (v48 >= v49)
  {
    uint64_t v51 = *(void *)(a1 + 512);
    unint64_t v52 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v48 - v51) >> 3);
    unint64_t v53 = v52 + 1;
    if (v52 + 1 > 0x666666666666666) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v54 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v49 - v51) >> 3);
    if (2 * v54 > v53) {
      unint64_t v53 = 2 * v54;
    }
    if (v54 >= 0x333333333333333) {
      unint64_t v55 = 0x666666666666666;
    }
    else {
      unint64_t v55 = v53;
    }
    if (v55) {
      unint64_t v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v55);
    }
    else {
      uint64_t v56 = 0;
    }
    unint64_t v57 = v55 + 40 * v52;
    unint64_t v58 = v55 + 40 * v56;
    *(void *)unint64_t v57 = v17;
    *(double *)(v57 + 8) = v18;
    *(double *)(v57 + 16) = v22;
    *(void *)(v57 + 24) = v28;
    *(unsigned char *)(v57 + 32) = v21;
    *(unsigned char *)(v57 + 33) = v13;
    unint64_t v50 = v57 + 40;
    long long v59 = *(char **)(a1 + 520);
    double v60 = *(char **)(a1 + 512);
    if (v59 != v60)
    {
      do
      {
        long long v61 = *(_OWORD *)(v59 - 40);
        long long v62 = *(_OWORD *)(v59 - 24);
        *(_WORD *)(v57 - 8) = *((_WORD *)v59 - 4);
        *(_OWORD *)(v57 - 24) = v62;
        *(_OWORD *)(v57 - 40) = v61;
        v57 -= 40;
        v59 -= 40;
      }
      while (v59 != v60);
      long long v59 = *(char **)(a1 + 512);
    }
    *(void *)(a1 + 512) = v57;
    *(void *)(a1 + 520) = v50;
    *(void *)(a1 + 528) = v58;
    if (v59) {
      operator delete(v59);
    }
  }
  else
  {
    *(void *)unint64_t v48 = v17;
    *(double *)(v48 + 8) = v18;
    *(double *)(v48 + 16) = v22;
    *(void *)(v48 + 24) = v28;
    *(unsigned char *)(v48 + 32) = v21;
    unint64_t v50 = v48 + 40;
    *(unsigned char *)(v48 + 33) = v13;
  }
  *(void *)(a1 + 520) = v50;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 658))
  {
    *(unsigned char *)(a1 + 660) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 660) = 0;
    unint64_t v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      uint64_t v4 = v2;
      uint64_t v3 = (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      if (v3) {
        v4[2](v4, v3);
      }

      unint64_t v2 = v4;
    }
  }
}

void sub_1BD0ACC88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  uint64_t v9 = 0;
  unsigned __int8 v10 = 0;
  uint64_t v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 512), *(void *)(a1 + 520), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 520) - *(void *)(a1 + 512)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::resetToBucket(a1, *(void *)a1 + 1, a2, a3);
  double v6 = v9;
  double v7 = v10;
  if (v9 != v10)
  {
    uint64_t v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BD0ACD88(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8 = a1 + 40;
  objc_storeStrong((id *)(a1 + 536), *(id *)(a1 + 40));
  *(double *)(v8 - 32) = a3;
  *(double *)(v8 - 24) = a4;
  *(double *)(v8 + 24) = a3;
  *(void *)(v8 + 72) = *(void *)(v8 + 64);
  long long v9 = 0uLL;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  unsigned __int8 v10 = *(void **)(v8 + 232);
  if (v10)
  {
    *(void *)(a1 + 280) = v10;
    operator delete(v10);
    long long v9 = 0uLL;
  }
  *(_OWORD *)(v8 + 232) = v9;
  *(_OWORD *)(v8 + 248) = v9;
  if (*(void *)(a1 + 320))
  {
    uint64_t v11 = *(void **)(a1 + 304);
    uint64_t v12 = *(void *)(a1 + 312);
    *(void *)(a1 + 304) = a1 + 312;
    *(void *)(v12 + 16) = 0;
    *(void *)(a1 + 312) = 0;
    *(void *)(a1 + 320) = 0;
    if (v11[1]) {
      char v13 = (void *)v11[1];
    }
    else {
      char v13 = v11;
    }
    if (v13)
    {
      unint64_t v14 = (void *)v13[2];
      if (v14)
      {
        double v15 = (void *)*v14;
        if ((void *)*v14 == v13)
        {
          *unint64_t v14 = 0;
          while (1)
          {
            uint64_t v17 = (void *)v14[1];
            if (!v17) {
              break;
            }
            do
            {
              unint64_t v14 = v17;
              uint64_t v17 = (void *)*v17;
            }
            while (v17);
          }
        }
        else
        {
          for (v14[1] = 0; v15; double v15 = (void *)v14[1])
          {
            do
            {
              unint64_t v14 = v15;
              double v15 = (void *)*v15;
            }
            while (v15);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::destroy(v13);
        for (uint64_t i = (void *)v14[2]; i; uint64_t i = (void *)i[2])
          unint64_t v14 = i;
        char v13 = v14;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::destroy(v13);
  }
  objc_storeStrong((id *)v8, *(id *)(a1 + 536));
  *(void *)(a1 + 520) = *(void *)(a1 + 512);
  *(void *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 660))
  {
    if (v3)
    {
      id v6 = v3;
      uint64_t v4 = _Block_copy(*(const void **)(a1 + 96));
      uint64_t v5 = v4;
      if (v4) {
        (*((void (**)(void *, id))v4 + 2))(v4, v6);
      }

      id v3 = v6;
    }
    *(unsigned char *)(a1 + 660) = 0;
  }
}

void sub_1BD0ACF6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_currentBucketInterval(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 656))
  {
    uint64_t v1 = 0;
  }
  else
  {
    uint64_t v1 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", *(double *)(a1 + 120), *(double *)(a1 + 128));
  }

  return v1;
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 startDate];
  id v6 = [v4 startDate];
  uint64_t v7 = [v5 compare:v6];

  return v7;
}

void sub_1BD0AD040(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 13);
  if (WeakRetained)
  {
    if (v5
      && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_currentBucketInterval((uint64_t)a1),
          (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v8 = [v5 endDate];
      long long v9 = [v7 startDate];
      if (objc_msgSend(v8, "hk_isAfterDate:", v9))
      {
        unsigned __int8 v10 = [v5 startDate];
        uint64_t v11 = [v7 endDate];
        char v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);
      }
      else
      {
        char v12 = 0;
      }

      char v13 = _Block_copy(a1[12]);
      if ((v12 & 1) == 0) {
        operator new();
      }
    }
    else
    {
      char v13 = _Block_copy(a1[12]);
    }
    *((unsigned char *)a1 + 656) = 1;
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
    v27[3] = &unk_1E6308FF8;
    id v15 = v5;
    id v28 = v15;
    id v16 = v13;
    id v29 = v16;
    (*((void (**)(id *, void *))*a1 + 9))(a1, v27);
    if (v5)
    {
      uint64_t v17 = [v15 startDate];
      [v17 timeIntervalSinceReferenceDate];
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_configureForStartTime((uint64_t)a1);
    }
    else
    {
      (*((void (**)(id *))*a1 + 4))(a1);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
    v21[3] = &unk_1E6309060;
    double v24 = a1;
    id v5 = v15;
    char v26 = 1;
    id v22 = v5;
    double v25 = a1;
    id v23 = WeakRetained;
    uint64_t v14 = (*((uint64_t (**)(id *, void *, uint64_t))*a1 + 14))(a1, v21, a3);
    double v18 = _Block_copy(v16);
    id v19 = a1[12];
    a1[12] = v18;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to invalidate interval: no data source available.");
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1BD0AD490(_Unwind_Exception *a1)
{
  MEMORY[0x1C187B8A0](v4, 0x10F1C40101E088FLL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_11;
  }
  id v3 = [v10 endDate];
  uint64_t v4 = [*(id *)(a1 + 32) startDate];
  char v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    id v6 = [v10 startDate];
    uint64_t v7 = [*(id *)(a1 + 32) endDate];
    char v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_11:
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9) {
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
      }
    }
  }
}

void sub_1BD0AD674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = [*(id *)(a1 + 32) startDate];
  [v5 timeIntervalSinceReferenceDate];
  uint64_t v7 = v6;

  char v8 = [*(id *)(a1 + 32) endDate];
  [v8 timeIntervalSinceReferenceDate];
  uint64_t v10 = v9;

  uint64_t v11 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  uint64_t v13 = *(void *)(a1 + 32);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  char v32 = *(unsigned char *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  uint64_t v31 = *(void *)(a1 + 56);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  uint64_t v14 = [v11 collectionCalculator:WeakRetained queryForInterval:v13 error:a2 sampleHandler:v30 mergeHandler:v29];

  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15 != v4)
    {
      id v16 = [*(id *)(a1 + 32) endDate];
      [v16 timeIntervalSinceReferenceDate];
      if (*(void *)(v15 + 40))
      {
        double v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          id v19 = [*(id *)(v15 + 40) dateIntervalAtIndex:*(void *)(v15 + 112) + 1];
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          double v20 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(v15, (double *)(v15 + 120));
          int v21 = [v19 startDate];
          [v21 timeIntervalSinceReferenceDate];
          double v23 = v22;
          double v24 = [v19 endDate];
          [v24 timeIntervalSinceReferenceDate];
          HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            char v26 = _Block_copy(*(const void **)(v15 + 96));
            double v27 = v26;
            if (v26) {
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);
            }
          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_didChangeBucket(v15, 0);
        }
      }
    }
  }
  return v14;
}

void sub_1BD0AD920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7 = *(double *)(a1 + 32) - a6;
  if (v7 >= 0.01)
  {
    if (a7 - a6 - v7 >= 0.01)
    {
      int v8 = 1;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      int v8 = 0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    int v8 = 1;
  }
  double v11 = a5;
  double v12 = a6;
  double v13 = a7;
  uint64_t v14 = a2;
  char v15 = v8;
  char v16 = 0;
  if (*(unsigned char *)(a1 + 56))
  {
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v11, a3, a4);
    }
  }
  else
  {
    double v10 = *(double *)(a1 + 40) - a6;
    if (v10 >= 0.01)
    {
      if (a7 - a6 - v10 >= 0.01) {
        a7 = *(double *)(a1 + 40);
      }
    }
    else
    {
      int v8 = 0;
    }
    double v12 = a6;
    double v13 = a7;
    char v15 = v8;
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v11, a3, a4);
    }
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 656)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  }
  if (*(void *)(a1 + 40)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_advanceToTime(a1, a2);
  }
  if (*(double *)(a1 + 128) > a2)
  {
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 32) < *(double *)(v10 + 8))
                {
                  uint64_t v129 = *(void *)(v10 + 32);
                  long long v113 = *(_OWORD *)v10;
                  long long v121 = *(_OWORD *)(v10 + 16);
                  long long v52 = *(_OWORD *)(a2 - 40);
                  long long v53 = *(_OWORD *)(a2 - 24);
                  *(_WORD *)(v10 + 32) = *(_WORD *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(_WORD *)(a2 - 8) = v129;
                  *(_OWORD *)(a2 - 24) = v121;
                  *(_OWORD *)(a2 - 40) = v113;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v10, (double *)(v10 + 40), (double *)(a2 - 40));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, v10 + 120, a2 - 40);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            unint64_t v54 = (void *)(v10 + 40);
            BOOL v56 = v10 == a2 || v54 == (void *)a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  long long v59 = v54;
                  double v60 = *(double *)(v58 + 48);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *v54;
                    long long v114 = *(_OWORD *)(v58 + 56);
                    uint64_t v122 = *(void *)(v58 + 72);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      uint64_t v63 = v10 + v62;
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      *(_OWORD *)(v63 + 40) = *(_OWORD *)(v10 + v62);
                      *(_OWORD *)(v63 + 56) = v64;
                      *(_WORD *)(v63 + 72) = *(_WORD *)(v10 + v62 + 32);
                      if (!v62) {
                        break;
                      }
                      v62 -= 40;
                      if (v60 >= *(double *)(v63 - 32))
                      {
                        uint64_t v65 = v10 + v62 + 40;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = v114;
                    *(_WORD *)(v65 + 32) = v122;
                  }
                  unint64_t v54 = v59 + 5;
                  v57 += 40;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 5 != (void *)a2);
              }
            }
            else if (!v56)
            {
              do
              {
                int v98 = v54;
                double v99 = *(double *)(a1 + 48);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *v54;
                  long long v117 = *(_OWORD *)(a1 + 56);
                  uint64_t v125 = *(void *)(a1 + 72);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(_OWORD *)(v101 - 3);
                    *(_OWORD *)long long v101 = *(_OWORD *)(v101 - 5);
                    *((_OWORD *)v101 + 1) = v102;
                    *((_WORD *)v101 + 16) = *((_WORD *)v101 - 4);
                    double v103 = *((double *)v101 - 9);
                    v101 -= 5;
                  }
                  while (v99 < v103);
                  void *v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *((_WORD *)v101 + 16) = v125;
                  *((_OWORD *)v101 + 1) = v117;
                }
                v54 += 5;
                a1 = (unint64_t)v98;
              }
              while (v98 + 5 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 40 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v10 + 40 * v69 + 8) < *(double *)(v70 + 48))
                  {
                    v70 += 40;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  double v71 = *(double *)(v10 + 40 * v68 + 8);
                  if (*(double *)(v70 + 8) >= v71)
                  {
                    unint64_t v72 = v10 + 40 * v68;
                    uint64_t v73 = *(void *)v72;
                    uint64_t v123 = *(void *)(v72 + 32);
                    long long v115 = *(_OWORD *)(v72 + 16);
                    do
                    {
                      unint64_t v74 = v72;
                      unint64_t v72 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_WORD *)(v74 + 32) = *(_WORD *)(v70 + 32);
                      *(_OWORD *)unint64_t v74 = v75;
                      *(_OWORD *)(v74 + 16) = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 40 * v77;
                      uint64_t v78 = 2 * v69 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v10 + 40 * v77 + 8) < *(double *)(v70 + 48))
                      {
                        v70 += 40;
                        uint64_t v77 = v78;
                      }
                      uint64_t v69 = v77;
                    }
                    while (*(double *)(v70 + 8) >= v71);
                    *(void *)unint64_t v72 = v73;
                    *(double *)(v72 + 8) = v71;
                    *(_OWORD *)(v72 + 16) = v115;
                    *(_WORD *)(v72 + 32) = v123;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x28uLL;
              do
              {
                uint64_t v80 = 0;
                uint64_t v130 = *(void *)(v10 + 32);
                long long v116 = *(_OWORD *)v10;
                long long v124 = *(_OWORD *)(v10 + 16);
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = v81;
                  uint64_t v83 = v80 + 1;
                  v81 += 40 * (v80 + 1);
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v85 = v84 + 2;
                  if (v85 < v79 && *(double *)(v82 + 40 * v83 + 8) < *(double *)(v81 + 48))
                  {
                    v81 += 40;
                    uint64_t v80 = v85;
                  }
                  long long v86 = *(_OWORD *)v81;
                  long long v87 = *(_OWORD *)(v81 + 16);
                  *(_WORD *)(v82 + 32) = *(_WORD *)(v81 + 32);
                  *(_OWORD *)unint64_t v82 = v86;
                  *(_OWORD *)(v82 + 16) = v87;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 40;
                if (v81 == a2)
                {
                  *(_WORD *)(v81 + 32) = v130;
                  *(_OWORD *)unint64_t v81 = v116;
                  *(_OWORD *)(v81 + 16) = v124;
                }
                else
                {
                  long long v88 = *(_OWORD *)a2;
                  long long v89 = *(_OWORD *)(a2 + 16);
                  *(_WORD *)(v81 + 32) = *(_WORD *)(a2 + 32);
                  *(_OWORD *)unint64_t v81 = v88;
                  *(_OWORD *)(v81 + 16) = v89;
                  *(_WORD *)(a2 + 32) = v130;
                  *(_OWORD *)a2 = v116;
                  *(_OWORD *)(a2 + 16) = v124;
                  uint64_t v90 = v81 - v10 + 40;
                  if (v90 >= 41)
                  {
                    unint64_t v91 = (v90 / 0x28uLL - 2) >> 1;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v10 + 40 * v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      uint64_t v109 = *(void *)(v81 + 32);
                      long long v106 = *(_OWORD *)(v81 + 16);
                      do
                      {
                        unint64_t v94 = v81;
                        unint64_t v81 = v10 + 40 * v91;
                        long long v95 = *(_OWORD *)v81;
                        long long v96 = *(_OWORD *)(v81 + 16);
                        *(_WORD *)(v94 + 32) = *(_WORD *)(v81 + 32);
                        *(_OWORD *)unint64_t v94 = v95;
                        *(_OWORD *)(v94 + 16) = v96;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 40 * v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_WORD *)(v81 + 32) = v109;
                      *(_OWORD *)(v81 + 16) = v106;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40 * (v12 >> 1)), (double *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            char v16 = (double *)(a1 + 40 * v13 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40), v16, (double *)(a2 - 80));
            double v17 = (double *)(a1 + 40 + 8 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 80), v17, (double *)(a2 - 120));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v16, (double *)v14, v17);
            uint64_t v126 = *(void *)(a1 + 32);
            long long v110 = *(_OWORD *)a1;
            long long v118 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 16) = v19;
            *(_WORD *)(v14 + 32) = v126;
            *(_OWORD *)unint64_t v14 = v110;
            *(_OWORD *)(v14 + 16) = v118;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40 * (v12 >> 1)), (double *)a1, (double *)(a2 - 40));
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 32) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          long long v105 = *(_OWORD *)(a1 + 16);
          uint64_t v108 = *(void *)(a1 + 32);
          if (v20 >= *(double *)(a2 - 32))
          {
            unint64_t v41 = a1 + 40;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 40;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 40;
              double v40 = *(double *)(v39 + 48);
              v39 += 40;
            }
            while (v20 >= v40);
          }
          unint64_t v43 = a2;
          if (v10 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              unint64_t v43 = v44 - 40;
              double v45 = *(double *)(v44 - 32);
              v44 -= 40;
            }
            while (v20 < v45);
          }
          while (v10 < v43)
          {
            uint64_t v128 = *(void *)(v10 + 32);
            long long v112 = *(_OWORD *)v10;
            long long v120 = *(_OWORD *)(v10 + 16);
            long long v46 = *(_OWORD *)v43;
            long long v47 = *(_OWORD *)(v43 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v43 + 32);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(_WORD *)(v43 + 32) = v128;
            *(_OWORD *)unint64_t v43 = v112;
            *(_OWORD *)(v43 + 16) = v120;
            do
            {
              double v48 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *(double *)(v43 - 32);
              v43 -= 40;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 40);
            long long v51 = *(_OWORD *)(v10 - 24);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 40) = v38;
          *(double *)(v10 - 32) = v20;
          *(_WORD *)(v10 - 8) = v108;
          *(_OWORD *)(v10 - 24) = v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        long long v104 = *(_OWORD *)(a1 + 16);
        uint64_t v107 = *(void *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 48);
          v21 += 40;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        unint64_t v25 = a2;
        if (v21 == 40)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 40;
            double v29 = *(double *)(v28 - 32);
            v28 -= 40;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 40;
            double v27 = *(double *)(v25 - 32);
            v25 -= 40;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v127 = *(void *)(v10 + 32);
            long long v111 = *(_OWORD *)v10;
            long long v119 = *(_OWORD *)(v10 + 16);
            long long v31 = *(_OWORD *)v30;
            long long v32 = *(_OWORD *)(v30 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v30 + 32);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(_WORD *)(v30 + 32) = v127;
            *(_OWORD *)unint64_t v30 = v111;
            *(_OWORD *)(v30 + 16) = v119;
            do
            {
              double v33 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v33 < v20);
            do
            {
              double v34 = *(double *)(v30 - 32);
              v30 -= 40;
            }
            while (v34 >= v20);
          }
          while (v10 < v30);
        }
        if (v10 - 40 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 40);
          long long v36 = *(_OWORD *)(v10 - 24);
          *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 40) = v22;
        *(double *)(v10 - 32) = v20;
        *(_WORD *)(v10 - 8) = v107;
        *(_OWORD *)(v10 - 24) = v104;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 40;
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        __int16 v9 = *(_WORD *)(a2 - 8);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      uint64_t v16 = *(void *)v12;
      long long v21 = *(_OWORD *)(v12 + 16);
      uint64_t v22 = *(void *)(v12 + 32);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(void *)uint64_t v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(void *a1, uint64_t a2)
{
  id v3 = (void *)a1[5];
  uint64_t v4 = a1[6];
  BOOL v5 = (void *)a1[4];
  uint64_t v6 = [v5 dateInterval];
  void v9[4] = v4;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  uint64_t v7 = [v3 collectionCalculator:v5 queryForInterval:v6 error:a2 sampleHandler:v10 mergeHandler:v9];

  return v7;
}

void sub_1BD0AE6A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10 = *(void *)(a1 + 32);
  *(double *)int v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  char v15 = 1;
  uint64_t v11 = [MEMORY[0x1E4F1C9C8] distantFuture];
  [v11 timeIntervalSinceReferenceDate];
  BOOL v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1BD0AE748(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6 = a3;
  uint64_t v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = &unk_1F1723B20;
  double v9 = 900.0;
  if ((v6 & 0x10) == 0) {
    double v9 = 0.0;
  }
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(void *)(v8 + 104) = 0;
  *(void *)(v8 + 112) = 0;
  *(void *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_WORD *)(a1 + 664) = 1;
  *(unsigned char *)(a1 + 666) = 0;
  *(unsigned char *)(a1 + 668) = 0;
  *(void *)(a1 + 672) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(void *)(a1 + 712) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);

  JUMPOUT(0x1C187B8A0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1F1723B20;
  unint64_t v2 = *(void **)(a1 + 696);
  if (v2)
  {
    *(void *)(a1 + 704) = v2;
    operator delete(v2);
  }

  id v3 = *(void **)(a1 + 632);
  if (v3)
  {
    *(void *)(a1 + 640) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(unsigned char *)(result + 664) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::setDateInterval(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 copy];
  uint64_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;

  BOOL v5 = [v6 startDate];
  [v5 timeIntervalSinceReferenceDate];
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_configureForStartTime(a1);
}

void sub_1BD0AE8F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(void *)(a1 + 40))
  {
    id v5 = v3;
    [v3 timeIntervalSinceReferenceDate];
    *(void *)(a1 + 672) = v4;
    id v3 = v5;
  }
}

void sub_1BD0AE96C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::setStatisticsConfiguration(id *a1, void *a2)
{
  objc_storeStrong(a1 + 85, a2);
  id v7 = a2;
  id v4 = a1[85];
  id v5 = a1[82];
  a1[82] = v4;
  id v6 = v4;

  objc_storeStrong(a1 + 19, a1[82]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (*(void *)(a1 + 40)) {
    return 1;
  }
  BOOL v7 = *(void *)(a1 + 224) == *(void *)(a1 + 216) && *(uint64_t *)(a1 + 280) < 1
    || HKIntervalMask<double>::firstDifference(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)a2, *(void *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (v7) {
    return 1;
  }
  double v9 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128);

  return v9(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 copy];
  id v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v3;
}

void sub_1BD0AEB54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::dataSource(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));

  return WeakRetained;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::currentStatistics(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 664))
  {
    uint64_t v1 = 0;
  }
  else
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_updateSourceOrder((uint64_t)v4);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeThroughTime((uint64_t)v4, v4[1]);
    uint64_t v1 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_statisticsFromFinishedBucket(a1, v4);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::~HDStatisticsBucket((uint64_t)v4);
  }

  return v1;
}

void sub_1BD0AEC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(a1 + 64);
  BOOL v7 = v6;
  if (!v6) {
    goto LABEL_4;
  }
  uint64_t v8 = [v6 startDate];
  [v8 timeIntervalSinceReferenceDate];
  if (v9 > *(double *)(a2 + 16))
  {

    goto LABEL_10;
  }
  uint64_t v10 = [v7 endDate];
  [v10 timeIntervalSinceReferenceDate];
  double v12 = v11;
  double v13 = *(double *)(a2 + 8);

  if (v12 >= v13)
  {
LABEL_4:
    if (!*(unsigned char *)(a1 + 666)) {
      goto LABEL_21;
    }
    if (!*(unsigned char *)(a1 + 665))
    {
      if (*(void *)(a1 + 40))
      {
        if (*(unsigned char *)(a1 + 664))
        {
          double v14 = -1.79769313e308;
        }
        else
        {
          double v16 = *(double *)(a1 + 176);
          double v14 = *(double *)(a1 + 120);
          if (v16 <= v14) {
            double v16 = -1.79769313e308;
          }
          if (v16 >= v14) {
            double v14 = v16;
          }
        }
      }
      else
      {
        double v14 = -1.79769313e308;
        if (*(double *)(a1 + 176) > *(double *)(a1 + 120)) {
          double v14 = *(double *)(a1 + 176);
        }
      }
      if (v14 > *(double *)(a2 + 8))
      {
        uint64_t v17 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
        uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v17, a3);

        goto LABEL_22;
      }
      if (*(unsigned char *)(a1 + 667))
      {
LABEL_21:
        uint64_t v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_primitiveAddSample(a1, a2, 1, a3);
        goto LABEL_22;
      }
      unint64_t v19 = *(void *)(a1 + 704);
      unint64_t v20 = *(void *)(a1 + 712);
      if (v19 >= v20)
      {
        uint64_t v24 = *(void *)(a1 + 696);
        unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v24) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - v24) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x333333333333333) {
          unint64_t v28 = 0x666666666666666;
        }
        else {
          unint64_t v28 = v26;
        }
        if (v28) {
          unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v28);
        }
        else {
          uint64_t v29 = 0;
        }
        unint64_t v30 = v28 + 40 * v25;
        unint64_t v31 = v28 + 40 * v29;
        long long v32 = *(_OWORD *)a2;
        long long v33 = *(_OWORD *)(a2 + 16);
        *(void *)(v30 + 32) = *(void *)(a2 + 32);
        *(_OWORD *)unint64_t v30 = v32;
        *(_OWORD *)(v30 + 16) = v33;
        unint64_t v23 = v30 + 40;
        double v34 = *(char **)(a1 + 704);
        long long v35 = *(char **)(a1 + 696);
        if (v34 != v35)
        {
          do
          {
            long long v36 = *(_OWORD *)(v34 - 40);
            long long v37 = *(_OWORD *)(v34 - 24);
            *(_WORD *)(v30 - 8) = *((_WORD *)v34 - 4);
            *(_OWORD *)(v30 - 24) = v37;
            *(_OWORD *)(v30 - 40) = v36;
            v30 -= 40;
            v34 -= 40;
          }
          while (v34 != v35);
          double v34 = *(char **)(a1 + 696);
        }
        *(void *)(a1 + 696) = v30;
        *(void *)(a1 + 704) = v23;
        *(void *)(a1 + 712) = v31;
        if (v34) {
          operator delete(v34);
        }
      }
      else
      {
        long long v21 = *(_OWORD *)a2;
        long long v22 = *(_OWORD *)(a2 + 16);
        *(void *)(v19 + 32) = *(void *)(a2 + 32);
        *(_OWORD *)unint64_t v19 = v21;
        *(_OWORD *)(v19 + 16) = v22;
        unint64_t v23 = v19 + 40;
      }
      *(void *)(a1 + 704) = v23;
    }
  }
LABEL_10:
  uint64_t v15 = 1;
LABEL_22:

  return v15;
}

void sub_1BD0AEEE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = v5;
  if (*(unsigned char *)(a1 + 666))
  {
    uint64_t v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 666) = 1;
  uint64_t v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    uint64_t v7 = 0;
    goto LABEL_82;
  }
  uint64_t v65 = v6;
  if (*(unsigned char *)(a1 + 665)) {
    goto LABEL_5;
  }
  double v9 = *(void **)(a1 + 688);
  if (!v9)
  {
    id v68 = 0;
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 40))
  {
LABEL_5:
    int v8 = 0;
    id v68 = 0;
    goto LABEL_29;
  }
  [v9 sortUsingComparator:&__block_literal_global_753];
  id v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v10 = *(id *)(a1 + 688);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  if (!v11)
  {

    id v12 = 0;
    goto LABEL_27;
  }
  id v12 = 0;
  uint64_t v13 = *(void *)v70;
  do
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (*(void *)v70 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(id *)(*((void *)&v69 + 1) + 8 * i);
      double v16 = v15;
      if (v12)
      {
        uint64_t v17 = [v15 startDate];
        uint64_t v18 = [v12 endDate];
        int v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          unint64_t v20 = [v16 endDate];
          long long v21 = [v12 endDate];
          int v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22) {
            goto LABEL_21;
          }
          id v23 = objc_alloc(MEMORY[0x1E4F28C18]);
          uint64_t v24 = [v12 startDate];
          unint64_t v25 = [v16 endDate];
          id v26 = (id)[v23 initWithStartDate:v24 endDate:v25];
        }
        else
        {
          [v68 addObject:v12];
          id v26 = v16;
        }
        id v12 = v26;
      }
      else
      {
        id v12 = v15;
      }
LABEL_21:
    }
    uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  }
  while (v11);

  if (v12) {
    [v68 addObject:v12];
  }
LABEL_27:

LABEL_28:
  int v8 = 1;
LABEL_29:
  unint64_t v27 = *(void **)(a1 + 688);
  *(void *)(a1 + 688) = 0;

  *(unsigned char *)(a1 + 665) = 0;
  if (!v8)
  {
    unint64_t v38 = *(void *)(a1 + 696);
    *(void *)(a1 + 712) = 0;
    *(void *)(a1 + 704) = 0;
    *(void *)(a1 + 696) = 0;
    unint64_t v39 = v38;
    goto LABEL_47;
  }
  unint64_t v28 = [v68 lastObject];
  if (v28)
  {
    uint64_t v29 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_currentBucketInterval(a1);
    unint64_t v30 = [v29 endDate];
    unint64_t v31 = [v28 endDate];
    int v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      long long v33 = [v28 endDate];
      [v33 timeIntervalSinceReferenceDate];
      double v35 = v34;

      uint64_t v36 = *(void *)(a1 + 696);
      long long v37 = *(long long **)(a1 + 704);
      while ((long long *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((long long *)v36 != v37)
          {
            double v40 = (long long *)(v36 + 40);
            if ((long long *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  long long v41 = *v40;
                  long long v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)uint64_t v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                double v40 = (long long *)((char *)v40 + 40);
              }
              while (v40 != v37);
              long long v37 = *(long long **)(a1 + 704);
            }
          }
          if ((long long *)v36 != v37) {
            *(void *)(a1 + 704) = v36;
          }
          break;
        }
        v36 += 40;
      }
    }
  }
  unint64_t v38 = *(void *)(a1 + 696);
  unint64_t v39 = *(void *)(a1 + 704);
  *(void *)(a1 + 712) = 0;
  *(void *)(a1 + 696) = 0;
  *(void *)(a1 + 704) = 0;
  if (![v68 count]) {
    goto LABEL_60;
  }
LABEL_47:
  id v43 = v68;
  long long __p = (void *)v38;
  if (v43)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v44 = v43;
    uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v70;
      while (2)
      {
        for (uint64_t j = 0; j != v45; ++j)
        {
          if (*(void *)v70 != v46) {
            objc_enumerationMutation(v44);
          }
          id v48 = *(id *)(*((void *)&v69 + 1) + 8 * j);
          int v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_primitiveInvalidateInterval((id *)a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
        if (v45) {
          continue;
        }
        break;
      }
    }

LABEL_59:
    unint64_t v38 = (unint64_t)__p;
LABEL_60:
    unint64_t v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v51;
    }
    int v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    long long __p = (void *)v38;
    if (v39 != v38)
    {
      uint64_t v54 = v38;
      uint64_t v50 = v67;
      do
      {
        int v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_primitiveAddSample(a1, v54, 1, v50);
        int v53 = v55;
        v54 += 40;
        if (v54 == v39) {
          char v56 = 0;
        }
        else {
          char v56 = v55;
        }
        uint64_t v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_primitiveInvalidateInterval((id *)a1, 0, v67))goto LABEL_59; {
LABEL_70:
    }
    int v53 = 0;
  }
  if (*(void *)(a1 + 40) && *(void *)(a1 + 640) != *(void *)(a1 + 632))
  {
    do
    {
      uint64_t v57 = objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(void *)(a1 + 112) + 1, v50, v65);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      unint64_t v58 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_statisticsFromFinishedBucket(a1, (double *)(a1 + 120));
      long long v59 = [v57 startDate];
      [v59 timeIntervalSinceReferenceDate];
      double v61 = v60;
      uint64_t v62 = [v57 endDate];
      [v62 timeIntervalSinceReferenceDate];
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_notifyForCurrentBucket(a1);
    }
    while (*(void *)(a1 + 640) != *(void *)(a1 + 632));
  }
  *(unsigned char *)(a1 + 666) = 0;
  if (__p) {
    operator delete(__p);
  }

  if (v53)
  {
    if (*(unsigned char *)(a1 + 668))
    {
      *(unsigned char *)(a1 + 668) = 0;
      id v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_notifyForCurrentBucket(a1);
      uint64_t v7 = 1;
      goto LABEL_82;
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v6 = v65;
LABEL_82:
  *(unsigned char *)(a1 + 666) = 0;
LABEL_83:

  return v7;
}

void sub_1BD0AF5E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    *(unsigned char *)(v13 + 666) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(unsigned char *)(result + 667) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(unsigned char *)(a1 + 666)) {
      goto LABEL_12;
    }
    uint64_t v7 = 0;
LABEL_14:
    uint64_t v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_primitiveInvalidateInterval((id *)a1, v7, a3);
    goto LABEL_15;
  }
  uint64_t v7 = [v6 dateIntervalForIntervalsContainingInterval:v5];

  if (!*(unsigned char *)(a1 + 666)) {
    goto LABEL_14;
  }
  if (!v7)
  {
LABEL_12:
    id v12 = *(void **)(a1 + 688);
    *(void *)(a1 + 688) = 0;

    uint64_t v7 = 0;
    uint64_t v11 = 1;
    *(unsigned char *)(a1 + 665) = 1;
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 665))
  {
    int v8 = *(void **)(a1 + 688);
    if (!v8)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      id v10 = *(void **)(a1 + 688);
      *(void *)(a1 + 688) = v9;

      int v8 = *(void **)(a1 + 688);
    }
    [v8 addObject:v7];
  }
  uint64_t v11 = 1;
LABEL_15:

  return v11;
}

void sub_1BD0AF8E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    *(unsigned char *)(a1 + 664) = 1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v9[3] = &unk_1E63043E8;
    uint64_t v12 = a1;
    id v10 = v5;
    id v11 = WeakRetained;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 112))(a1, v9, a3);
    if (v7 && *(unsigned char *)(a1 + 664) && !*(void *)(a1 + 40)) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_configureForStartTime(a1);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to query for initial statistics: no data source available.");
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1BD0AFA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::reset(uint64_t result)
{
  *(unsigned char *)(result + 664) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 encodeBool:*(unsigned __int8 *)(a1 + 664) forKey:@"needs_config"];
  id v12 = v3;
  int v32 = &unk_1F1726FA0;
  long long v33 = 0;
  int v38 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
  LOBYTE(v38) = 1;
  uint64_t v34 = v4;
  uint64_t v35 = 0;
  statistics::StatisticsEngine::makeCurrentBucket((uint64_t)&v32);
  uint64_t v13 = &unk_1F171B9C8;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  int v31 = 511;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 0;
  int8x16_t v14 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  uint64_t v5 = *(void *)(a1 + 136);
  char v29 = *(unsigned char *)(a1 + 144);
  char v30 = *(unsigned char *)(a1 + 145);
  BOOL v28 = *(_DWORD *)(a1 + 148) == 0;
  int8x16_t v15 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  uint64_t v7 = *(int8x16_t **)(a1 + 216);
  if (v7 != *(int8x16_t **)(a1 + 224))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v7, *v7, 8uLL);
    int8x16_t v40 = v7[1];
    char v43 = 0;
    HIBYTE(v42) = v7[2].i8[9];
    LOBYTE(v42) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>();
  }
  statistics::StatisticsBucket::makeStatistics((uint64_t)&v13);
  HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::archive((uint64_t)&v39, (int8x16_t *)(a1 + 240));
  statistics::Statistics::operator=(*((statistics **)&v22 + 1), (uint64_t)&v39);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v39);
  uint64_t v8 = *(void *)(a1 + 424);
  if (v8 != a1 + 432)
  {
    HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::archive((uint64_t)&v39, (int8x16_t *)(v8 + 40));
    uint64_t v9 = *(void *)(v8 + 32);
    v46 |= 0x200u;
    uint64_t v45 = v9;
    PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>();
  }
  id v10 = *(int8x16_t **)(a1 + 184);
  if (v10 != *(int8x16_t **)(a1 + 192))
  {
    unint64_t v39 = (char *)&unk_1F1727540;
    v41.i32[0] = 3;
    int8x16_t v40 = vextq_s8(*v10, *v10, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>();
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v13);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v13);
  id v11 = *(int8x16_t **)(a1 + 632);
  if (v11 != *(int8x16_t **)(a1 + 640))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v11, *v11, 8uLL);
    int8x16_t v40 = v11[1];
    __int16 v42 = 0;
    char v43 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>();
  }
  PB::Writer::Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v39);
  [v12 encodeBytes:v40.i64[0] length:&v39[-v40.i64[0]] forKey:@"hdsce_archived_representation"];
  PB::Writer::~Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);
}

void sub_1BD0AFE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v64 = a2;
  *(unsigned char *)(a1 + 664) = [v64 decodeBoolForKey:@"needs_config"];
  id v3 = v64;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::HDStatisticsBucket((uint64_t)v69, 0, -1.79769313e308, 1.79769313e308);
  long long v70 = 0u;
  long long v71 = 0u;
  unint64_t v113 = 0;
  id v67 = v3;
  PB::Reader::Reader((PB::Reader *)v112, (const unsigned __int8 *)[v67 decodeBytesForKey:@"hdsce_archived_representation" returnedLength:&v113]);
  uint64_t v66 = a1;
  long long v105 = &unk_1F1726FA0;
  uint64_t v106 = 0;
  uint64_t v110 = 0;
  uint64_t v108 = 0;
  uint64_t v109 = 0;
  int v111 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v105, (PB::Reader *)v112);
  uint64_t v68 = v107;
  if (v106)
  {
    uint64_t v76 = 0;
    memset(v79, 0, sizeof(v79));
    memset(&v83[88], 0, 34);
    memset(&v83[8], 0, 74);
    long long v85 = 0u;
    long long v86 = 0u;
    long long v84 = 0u;
    LOWORD(v87) = 0;
    uint64_t v90 = 0;
    long long __p = 0;
    *(_DWORD *)uint64_t v83 = 0;
    unint64_t v81 = 0;
    unint64_t v82 = 0;
    long long v89 = 0;
    long long v88 = &v89;
    long long v91 = 0u;
    long long v92 = 0u;
    int v93 = 1065353216;
    uint64_t v97 = 0;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v94 = 0u;
    int v98 = 1065353216;
    long long v99 = 0u;
    long long v100 = 0u;
    int v101 = 1065353216;
    long long v102 = 0u;
    long long v103 = 0u;
    int v104 = 1065353216;
    int8x16_t v72 = vextq_s8(*(int8x16_t *)(v106 + 8), *(int8x16_t *)(v106 + 8), 8uLL);
    uint64_t v4 = *(void *)(v106 + 72);
    uint64_t v73 = *(void *)(v106 + 64);
    char v74 = *(unsigned char *)(v106 + 185);
    char v75 = *(unsigned char *)(v106 + 186);
    int8x16_t v77 = vextq_s8(*(int8x16_t *)(v106 + 24), *(int8x16_t *)(v106 + 24), 8uLL);
    uint64_t v78 = v4;
    uint64_t v5 = *(void *)(v106 + 80);
    uint64_t v6 = *(void *)(v106 + 88);
    uint64_t v65 = (void *)v106;
    if (v5 != v6)
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(*(void *)v5 + 24);
        uint64_t v9 = *(void *)(*(void *)v5 + 32);
        uint64_t v10 = *(void *)(*(void *)v5 + 8);
        uint64_t v11 = *(void *)(*(void *)v5 + 16);
        char v12 = *(unsigned char *)(*(void *)v5 + 41);
        char v13 = *(unsigned char *)(*(void *)v5 + 40);
        if ((unint64_t)v7 >= v82)
        {
          int8x16_t v14 = (char *)__p;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)__p) >> 4);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v82 - (void)__p) >> 4) > v16) {
            unint64_t v16 = 0x5555555555555556 * ((uint64_t)(v82 - (void)__p) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v82 - (void)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v17 = 0x555555555555555;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17)
          {
            unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            uint64_t v7 = v81;
            int8x16_t v14 = (char *)__p;
          }
          else
          {
            uint64_t v18 = 0;
          }
          uint64_t v19 = (void *)(v17 + 48 * v15);
          void *v19 = v9;
          v19[1] = v8;
          v19[2] = v10;
          v19[3] = v11;
          *((_WORD *)v19 + 16) = 1;
          *((unsigned char *)v19 + 40) = 0;
          *((unsigned char *)v19 + 41) = v12;
          *((unsigned char *)v19 + 42) = v13;
          uint64_t v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              long long v21 = *((_OWORD *)v7 - 3);
              long long v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            int8x16_t v14 = (char *)__p;
          }
          uint64_t v7 = (char *)(v19 + 6);
          long long __p = v20;
          unint64_t v81 = (char *)(v19 + 6);
          unint64_t v82 = v17 + 48 * v18;
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)uint64_t v7 = v9;
          *((void *)v7 + 1) = v8;
          *((void *)v7 + 2) = v10;
          *((void *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        unint64_t v81 = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    long long v23 = (void *)v65[13];
    if (v23)
    {
      HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::unarchive((uint64_t)&v114, v23);
      long long v84 = v122;
      long long v85 = v123;
      long long v86 = v124;
      uint64_t v87 = v125;
      *(_OWORD *)&v83[64] = v118;
      *(_OWORD *)&v83[80] = v119;
      *(_OWORD *)&v83[96] = v120;
      *(_OWORD *)&v83[112] = v121;
      *(_OWORD *)uint64_t v83 = v114;
      *(_OWORD *)&v83[16] = v115;
      *(_OWORD *)&v83[32] = v116;
      *(_OWORD *)&v83[48] = v117;
    }
    long long v24 = (void **)v65[17];
    long long v25 = (void **)v65[18];
    while (v24 != v25)
    {
      uint64_t v26 = (uint64_t)*v24;
      HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::unarchive((uint64_t)&v114, *v24);
      uint64_t v27 = *(void *)(v26 + 144);
      BOOL v28 = v89;
      char v29 = &v89;
      char v30 = &v89;
      if (v89)
      {
        do
        {
          while (1)
          {
            char v30 = (uint64_t **)v28;
            uint64_t v31 = v28[4];
            if (v31 <= v27) {
              break;
            }
            BOOL v28 = *v30;
            char v29 = v30;
            if (!*v30) {
              goto LABEL_33;
            }
          }
          if (v31 >= v27)
          {
            long long v33 = (char *)v30;
            goto LABEL_36;
          }
          BOOL v28 = v30[1];
        }
        while (v28);
        char v29 = v30 + 1;
      }
LABEL_33:
      long long v33 = (char *)operator new(0xE0uLL);
      *((void *)v33 + 4) = v27;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *(_OWORD *)(v33 + 120) = 0u;
      *(_OWORD *)(v33 + 136) = 0u;
      *(_OWORD *)(v33 + 152) = 0u;
      *(_OWORD *)(v33 + 168) = 0u;
      *(_OWORD *)(v33 + 184) = 0u;
      *(_OWORD *)(v33 + 200) = 0u;
      *((void *)v33 + 27) = 0;
      *(void *)long long v33 = 0;
      *((void *)v33 + 1) = 0;
      *((void *)v33 + 2) = v30;
      void *v29 = (uint64_t *)v33;
      int v32 = (uint64_t *)v33;
      if (*v88)
      {
        long long v88 = (uint64_t **)*v88;
        int v32 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v89, v32);
      ++v90;
LABEL_36:
      uint64_t v34 = v125;
      long long v35 = v124;
      long long v36 = v123;
      *(_OWORD *)(v33 + 168) = v122;
      *(_OWORD *)(v33 + 184) = v36;
      *(_OWORD *)(v33 + 200) = v35;
      long long v37 = v121;
      long long v38 = v120;
      long long v39 = v119;
      *(_OWORD *)(v33 + 104) = v118;
      *(_OWORD *)(v33 + 120) = v39;
      *(_OWORD *)(v33 + 136) = v38;
      *(_OWORD *)(v33 + 152) = v37;
      long long v40 = v117;
      long long v41 = v116;
      long long v42 = v115;
      *(_OWORD *)(v33 + 40) = v114;
      *((void *)v33 + 27) = v34;
      *(_OWORD *)(v33 + 56) = v42;
      *(_OWORD *)(v33 + 72) = v41;
      ++v24;
      *(_OWORD *)(v33 + 88) = v40;
    }
    uint64_t v43 = v65[5];
    for (uint64_t i = v65[6]; v43 != i; v43 += 8)
    {
      double v46 = *(double *)(*(void *)v43 + 8);
      double v45 = *(double *)(*(void *)v43 + 16);
      if (v46 >= v45) {
        double v47 = *(double *)(*(void *)v43 + 16);
      }
      else {
        double v47 = *(double *)(*(void *)v43 + 8);
      }
      if (v45 < v46) {
        double v45 = *(double *)(*(void *)v43 + 8);
      }
      HKIntervalMask<double>::_insertInterval(v79, v47, v45);
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::operator=((uint64_t)v69, (uint64_t)&v72);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::~HDStatisticsBucket((uint64_t)&v72);
  }
  uint64_t v48 = v108;
  uint64_t v49 = v109;
  if (v108 != v109)
  {
    unint64_t v50 = *((void *)&v70 + 1);
    do
    {
      uint64_t v51 = *(void *)(*(void *)v48 + 24);
      uint64_t v52 = *(void *)(*(void *)v48 + 32);
      uint64_t v53 = *(void *)(*(void *)v48 + 8);
      uint64_t v54 = *(void *)(*(void *)v48 + 16);
      if (v50 >= (unint64_t)v71)
      {
        int v55 = (void *)v70;
        unint64_t v56 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v50 - v70) >> 3);
        unint64_t v57 = v56 + 1;
        if (v56 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(v71 - v70) >> 3) > v57) {
          unint64_t v57 = 0x999999999999999ALL * ((uint64_t)(v71 - v70) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v71 - v70) >> 3) >= 0x333333333333333) {
          unint64_t v58 = 0x666666666666666;
        }
        else {
          unint64_t v58 = v57;
        }
        if (v58)
        {
          unint64_t v58 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v58);
          unint64_t v50 = *((void *)&v70 + 1);
          int v55 = (void *)v70;
        }
        else
        {
          uint64_t v59 = 0;
        }
        unint64_t v60 = v58 + 40 * v56;
        *(void *)unint64_t v60 = v52;
        *(void *)(v60 + 8) = v51;
        *(void *)(v60 + 16) = v53;
        *(void *)(v60 + 24) = v54;
        *(_WORD *)(v60 + 32) = 1;
        unint64_t v61 = v60;
        if ((void *)v50 != v55)
        {
          do
          {
            long long v62 = *(_OWORD *)(v50 - 40);
            long long v63 = *(_OWORD *)(v50 - 24);
            *(_WORD *)(v61 - 8) = *(_WORD *)(v50 - 8);
            *(_OWORD *)(v61 - 24) = v63;
            *(_OWORD *)(v61 - 40) = v62;
            v61 -= 40;
            v50 -= 40;
          }
          while ((void *)v50 != v55);
          int v55 = (void *)v70;
        }
        *(void *)&long long v70 = v61;
        unint64_t v50 = v60 + 40;
        *((void *)&v70 + 1) = v60 + 40;
        *(void *)&long long v71 = v58 + 40 * v59;
        if (v55) {
          operator delete(v55);
        }
      }
      else
      {
        *(void *)unint64_t v50 = v52;
        *(void *)(v50 + 8) = v51;
        *(void *)(v50 + 16) = v53;
        *(void *)(v50 + 24) = v54;
        *(_WORD *)(v50 + 32) = 1;
        v50 += 40;
      }
      *((void *)&v70 + 1) = v50;
      v48 += 8;
    }
    while (v48 != v49);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v105);

  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::operator=((void *)(v66 + 112), (uint64_t)&v68);
  if ((void)v70)
  {
    *((void *)&v70 + 1) = v70;
    operator delete((void *)v70);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::~HDStatisticsBucket((uint64_t)v69);
}

void sub_1BD0B0614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, ...)
{
  va_start(va, a10);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x478]);
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_WORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 186) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_WORD *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 304) = a1 + 312;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_DWORD *)(a1 + 360) = 1065353216;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(void *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 424) = 1065353216;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_DWORD *)(a1 + 464) = 1065353216;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_DWORD *)(a1 + 504) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 520);
  if (v2)
  {
    *(void *)(a1 + 528) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::~HDStatisticsBucket(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 472);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 432);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 392);
  unint64_t v2 = *(void **)(a1 + 368);
  if (v2)
  {
    *(void *)(a1 + 376) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 328);
  std::__tree<long>::destroy(*(void **)(a1 + 312));
  id v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(void *)(a1 + 104) = v3;
    operator delete(v3);
  }
  objc_destroyWeak((id *)(a1 + 88));
  uint64_t v4 = *(void **)(a1 + 64);
  if (v4)
  {
    *(void *)(a1 + 72) = v4;
    operator delete(v4);
  }

  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_configureForStartTime(uint64_t a1)
{
  uint64_t v29 = 0;
  unint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
    uint64_t v4 = [v2 dateIntervalContainingDate:v3 index:&v29];

    uint64_t v5 = [v4 startDate];
    [v5 timeIntervalSinceReferenceDate];
    double v7 = v6;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
LABEL_5:
    double v13 = v9;

    goto LABEL_6;
  }
  id v10 = *(id *)(a1 + 64);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v11 = [v10 startDate];
    [v11 timeIntervalSinceReferenceDate];
    double v7 = v12;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
    goto LABEL_5;
  }
  double v7 = -1.79769313e308;
  double v13 = 1.79769313e308;
LABEL_6:

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::HDStatisticsBucket((uint64_t)v22, WeakRetained, v7, v13);

  if (*(void *)(a1 + 32) == 1) {
    char v24 = 1;
  }
  uint64_t v23 = *(void *)(a1 + 56);
  char v25 = *(unsigned char *)(a1 + 24) & 1;
  if (v28 != (char *)(a1 + 72)) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v28, *(char **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4);
  }
  objc_storeStrong(&v27, *(id *)(a1 + 680));
  if (!*(void *)(a1 + 40)) {
    int v26 = 0;
  }
  uint64_t v15 = v29;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v22);
  uint64_t v18 = v15;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::HDStatisticsBucket((uint64_t)v19, (uint64_t)v17);
  long long __p = 0u;
  long long v21 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::operator=((void *)(a1 + 112), (uint64_t)&v18);

  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::~HDStatisticsBucket((uint64_t)v19);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::~HDStatisticsBucket((uint64_t)v17);
  *(unsigned char *)(a1 + 664) = 0;
  return HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::~HDStatisticsBucket((uint64_t)v22);
}

void sub_1BD0B0B40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::operator=(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::operator=((uint64_t)(a1 + 1), a2 + 8);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 65), (__n128 *)(a2 + 520));
  uint64_t v4 = *(void *)(a2 + 544);
  *(void *)(a2 + 544) = 0;
  uint64_t v5 = (void *)a1[68];
  a1[68] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 96);
  double v7 = *(unsigned char **)(a2 + 104);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(void *)(a1 + 96) = v10;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(void *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  long long v12 = *(_OWORD *)(a2 + 120);
  long long v13 = *(_OWORD *)(a2 + 136);
  long long v14 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v14;
  *(_OWORD *)(a1 + 136) = v13;
  *(_OWORD *)(a1 + 120) = v12;
  long long v15 = *(_OWORD *)(a2 + 184);
  long long v16 = *(_OWORD *)(a2 + 200);
  long long v17 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v17;
  *(_OWORD *)(a1 + 200) = v16;
  *(_OWORD *)(a1 + 184) = v15;
  long long v18 = *(_OWORD *)(a2 + 248);
  long long v19 = *(_OWORD *)(a2 + 280);
  uint64_t v20 = *(void *)(a2 + 296);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v19;
  *(_OWORD *)(a1 + 248) = v18;
  long long v21 = (void *)(a1 + 312);
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 296) = v20;
  *(void *)(a1 + 304) = a1 + 312;
  long long v22 = *(void **)(a2 + 304);
  if (v22 != (void *)(a2 + 312))
  {
    uint64_t v23 = 0;
    char v24 = (void *)(a1 + 312);
    while (1)
    {
      uint64_t v25 = v22[4];
      int v26 = (void *)(a1 + 312);
      if (v24 == v21) {
        goto LABEL_12;
      }
      id v27 = v23;
      BOOL v28 = (void *)(a1 + 312);
      if (v23)
      {
        do
        {
          int v26 = v27;
          id v27 = (void *)v27[1];
        }
        while (v27);
      }
      else
      {
        do
        {
          int v26 = (void *)v28[2];
          BOOL v29 = *v26 == (void)v28;
          BOOL v28 = v26;
        }
        while (v29);
      }
      if (v26[4] < v25)
      {
LABEL_12:
        if (v23) {
          char v30 = (uint64_t **)v26;
        }
        else {
          char v30 = (uint64_t **)(a1 + 312);
        }
        if (v23) {
          uint64_t v31 = (uint64_t **)(v26 + 1);
        }
        else {
          uint64_t v31 = (uint64_t **)(a1 + 312);
        }
        if (!*v31)
        {
LABEL_28:
          uint64_t v34 = (uint64_t *)operator new(0xE0uLL);
          long long v35 = *((_OWORD *)v22 + 2);
          long long v36 = *((_OWORD *)v22 + 3);
          long long v37 = *((_OWORD *)v22 + 5);
          *((_OWORD *)v34 + 4) = *((_OWORD *)v22 + 4);
          *((_OWORD *)v34 + 5) = v37;
          *((_OWORD *)v34 + 2) = v35;
          *((_OWORD *)v34 + 3) = v36;
          long long v38 = *((_OWORD *)v22 + 6);
          long long v39 = *((_OWORD *)v22 + 7);
          long long v40 = *((_OWORD *)v22 + 9);
          *((_OWORD *)v34 + 8) = *((_OWORD *)v22 + 8);
          *((_OWORD *)v34 + 9) = v40;
          *((_OWORD *)v34 + 6) = v38;
          *((_OWORD *)v34 + 7) = v39;
          long long v41 = *((_OWORD *)v22 + 10);
          long long v42 = *((_OWORD *)v22 + 11);
          long long v43 = *((_OWORD *)v22 + 13);
          *((_OWORD *)v34 + 12) = *((_OWORD *)v22 + 12);
          *((_OWORD *)v34 + 13) = v43;
          *((_OWORD *)v34 + 10) = v41;
          *((_OWORD *)v34 + 11) = v42;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 304), (uint64_t)v30, v31, v34);
        }
      }
      else
      {
        uint64_t v31 = (uint64_t **)(a1 + 312);
        char v30 = (uint64_t **)(a1 + 312);
        if (!v23) {
          goto LABEL_28;
        }
        int v32 = v23;
        while (1)
        {
          while (1)
          {
            char v30 = (uint64_t **)v32;
            uint64_t v33 = v32[4];
            if (v33 <= v25) {
              break;
            }
            int v32 = *v30;
            uint64_t v31 = v30;
            if (!*v30) {
              goto LABEL_28;
            }
          }
          if (v33 >= v25) {
            break;
          }
          int v32 = v30[1];
          if (!v32)
          {
            uint64_t v31 = v30 + 1;
            goto LABEL_28;
          }
        }
      }
      int v44 = (void *)v22[1];
      if (v44)
      {
        do
        {
          double v45 = v44;
          int v44 = (void *)*v44;
        }
        while (v44);
      }
      else
      {
        do
        {
          double v45 = (void *)v22[2];
          BOOL v29 = *v45 == (void)v22;
          long long v22 = v45;
        }
        while (!v29);
      }
      if (v45 == (void *)(a2 + 312)) {
        break;
      }
      uint64_t v23 = (void *)*v21;
      char v24 = *(void **)(a1 + 304);
      long long v22 = v45;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 328, a2 + 328);
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 368), *(const void **)(a2 + 368), *(void *)(a2 + 376), (uint64_t)(*(void *)(a2 + 376) - *(void *)(a2 + 368)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 392, a2 + 392);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 432, a2 + 432);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 472, a2 + 472);
  return a1;
}

void sub_1BD0B0F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, id *location, void **a12)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v16);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v15);
  long long v19 = *v14;
  if (*v14)
  {
    *(void *)(v12 + 376) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v13);
  std::__tree<long>::destroy(*v17);
  uint64_t v20 = *a10;
  if (*a10)
  {
    *(void *)(v12 + 104) = v20;
    operator delete(v20);
  }
  objc_destroyWeak(location);
  long long v21 = *a12;
  if (*a12)
  {
    *(void *)(v12 + 72) = v21;
    operator delete(v21);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::operator=(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  long long v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v5;

  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  id WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  uint64_t v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(void *)(a1 + 104) = v9;
    operator delete(v9);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 96) = 0;
  long long v10 = *(_OWORD *)(a2 + 200);
  long long v11 = *(_OWORD *)(a2 + 216);
  long long v12 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 232) = v12;
  *(_OWORD *)(a1 + 216) = v11;
  *(_OWORD *)(a1 + 200) = v10;
  long long v13 = *(_OWORD *)(a2 + 264);
  long long v14 = *(_OWORD *)(a2 + 280);
  uint64_t v15 = *(void *)(a2 + 296);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(void *)(a1 + 296) = v15;
  *(_OWORD *)(a1 + 264) = v13;
  *(_OWORD *)(a1 + 280) = v14;
  long long v16 = *(_OWORD *)(a2 + 120);
  long long v17 = *(_OWORD *)(a2 + 136);
  long long v18 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v18;
  *(_OWORD *)(a1 + 136) = v17;
  *(_OWORD *)(a1 + 120) = v16;
  uint64_t v19 = a1 + 312;
  std::__tree<long>::destroy(*(void **)(a1 + 312));
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  uint64_t v20 = *(void *)(a2 + 312);
  *(void *)(a1 + 312) = v20;
  uint64_t v21 = *(void *)(a2 + 320);
  *(void *)(a1 + 320) = v21;
  if (v21)
  {
    *(void *)(v20 + 16) = v19;
    *(void *)(a2 + 304) = a2 + 312;
    *(void *)(a2 + 312) = 0;
    *(void *)(a2 + 320) = 0;
  }
  else
  {
    *(void *)(a1 + 304) = v19;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 328, (uint64_t *)(a2 + 328));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 368, (__n128 *)(a2 + 368));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 392, (uint64_t *)(a2 + 392));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 432, (uint64_t *)(a2 + 432));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 472, (uint64_t *)(a2 + 472));
  return a1;
}