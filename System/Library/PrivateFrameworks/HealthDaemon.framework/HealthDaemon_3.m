id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_statisticsFromFinishedBucket(uint64_t a1, double *a2)
{
  unint64_t v2;
  int8x8_t prime;
  double v5;
  id v6;
  double *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id WeakRetained;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  id v19;
  void *v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  uint64_t v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  int v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint8x8_t v48;
  unint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  id v52;
  void *v53;
  char v54;
  float v55;
  BOOL v56;
  unint64_t v57;
  unint64_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  void **v62;
  unint64_t v63;
  uint8x8_t v64;
  unint64_t v65;
  uint8x8_t v66;
  uint64_t v67;
  void *i;
  unint64_t v69;
  void *v70;
  uint64_t *v71;
  unint64_t v72;
  long long v73;
  long long v74;
  long long v75;
  long long v76;
  long long v77;
  long long v78;
  long long v79;
  long long v80;
  long long v81;
  void *v82;
  void *v83;
  BOOL v84;
  void *v85;
  uint64_t **v86;
  uint64_t *v87;
  void *v88;
  uint64_t v89;
  double v90;
  void *v91;
  void *v92;
  void *v93;
  uint64_t v94;
  double v95;
  double v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  int v102;
  void *v103;
  void *v104;
  int v105;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  unint64_t v112;
  id v113;
  uint64_t v115;
  id v116;
  id v117;
  void *v118;
  uint64_t v119;
  void *__p[2];
  long long v121;
  long long v122;
  long long v123;
  long long v124;
  long long v125;
  long long v126;
  long long v127;
  long long v128;
  long long v129;
  long long v130;
  uint64_t v131;
  void v132[3];
  void *v133;
  uint64_t v134;
  uint64_t vars8;

  v134 = *MEMORY[0x1E4F143B8];
  v5 = *a2;
  v6 = objc_alloc(MEMORY[0x1E4F1C9C8]);
  v7 = a2 + 5;
  if (v5 != -1.79769313e308) {
    v7 = a2;
  }
  v115 = (uint64_t)a2;
  v116 = (id)[v6 initWithTimeIntervalSinceReferenceDate:*v7];
  if (a2[1] == 1.79769313e308) {
    v8 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:a2[6]];
  }
  else {
    v8 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:a2[1]];
  }
  v9 = (void *)v8;
  v10 = *(id *)(a1 + 16);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    v11 = *(id *)(a1 + 16);
    if ([v11 shouldUseUnderlyingTypeForStatistics])
    {
      v12 = [v11 underlyingSampleType];

      v10 = (id)v12;
    }
  }
  v13 = [objc_alloc(MEMORY[0x1E4F2B5B0]) initWithDataType:v10 startDate:v116 endDate:v9];
  v14 = a1;
  if (*(unsigned char *)(a1 + 24))
  {
    prime = (int8x8_t)(a1 + 48);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      v2 = (unint64_t)objc_alloc_init(MEMORY[0x1E4F1CA48]);
      v16 = *(uint64_t **)(v115 + 368);
      v17 = *(uint64_t **)(v115 + 376);
      while (v16 != v17)
      {
        v18 = *v16;
        v19 = objc_loadWeakRetained(*(id **)&prime);
        v20 = [v19 sourceForSourceID:v18];

        if (v20)
        {
          if (([(id)v2 containsObject:v20] & 1) == 0) {
            [(id)v2 addObject:v20];
          }
        }

        ++v16;
      }
      prime = (int8x8_t)[(id)v2 copy];
      [(id)v13 _setSources:*(void *)&prime];

      v14 = a1;
    }
  }

  v132[0] = &unk_1F1723BF0;
  v133 = v132;
  v117 = (id)v13;
  v119 = *(void *)(v14 + 24);
  v21 = *(_OWORD *)(v115 + 264);
  v22 = *(_OWORD *)(v115 + 280);
  v128 = *(_OWORD *)(v115 + 248);
  v129 = v21;
  v130 = v22;
  v131 = *(void *)(v115 + 296);
  v23 = *(_OWORD *)(v115 + 200);
  v124 = *(_OWORD *)(v115 + 184);
  v125 = v23;
  v24 = *(_OWORD *)(v115 + 232);
  v126 = *(_OWORD *)(v115 + 216);
  v127 = v24;
  v25 = *(_OWORD *)(v115 + 136);
  *(_OWORD *)__p = *(_OWORD *)(v115 + 120);
  v121 = v25;
  v26 = *(_OWORD *)(v115 + 168);
  v122 = *(_OWORD *)(v115 + 152);
  v123 = v26;
  if (!v133) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  v27 = (*(uint64_t (**)(void *, void **))(*v133 + 48))(v133, __p);
  v28 = *(double *)(v27 + 8);
  v29 = *(double *)(v27 + 16);
  v30 = *(void *)(v27 + 32);
  v32 = *(double *)(v27 + 40);
  v31 = *(double *)(v27 + 48);
  v33 = *(double *)(v27 + 56);
  v34 = *(double *)(v27 + 80);
  v35 = *(unsigned __int8 *)(v27 + 112);
  v36 = *(double *)(v27 + 120);
  v37 = *(double *)(v27 + 128);
  v38 = *(void *)(a1 + 24);
  v39 = _HKStatisticsOptionBaselineRelativeQuantities();
  v40 = *(void **)(a1 + 16);
  if ((v39 & v38) != 0) {
    [v40 _unitForChangeInCanonicalUnit];
  }
  else {
  v118 = [v40 canonicalUnit];
  }
  if ((v119 & 2) != 0)
  {
    if (v35) {
      v36 = v36 + (v34 - v36) * 22.5 / (v37 + 22.5);
    }
    v13 = [MEMORY[0x1E4F2B370] quantityWithUnit:v118 doubleValue:v36];
    [v117 setAverageQuantity:v13];
  }
  if ((v119 & 4) != 0)
  {
    v13 = [MEMORY[0x1E4F2B370] quantityWithUnit:v118 doubleValue:v29];
    [v117 setMinimumQuantity:v13];
  }
  if ((v119 & 8) != 0)
  {
    v13 = [MEMORY[0x1E4F2B370] quantityWithUnit:v118 doubleValue:v28];
    [v117 setMaximumQuantity:v13];
  }
  if ((v119 & 0x20) != 0)
  {
    v41 = [MEMORY[0x1E4F2B370] quantityWithUnit:v118 doubleValue:v32];
    [v117 setMostRecentQuantity:v41];

    v13 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v31, v33);
    [v117 setMostRecentQuantityDateInterval:v13];
  }
  [v117 setDataCount:v30];
  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    goto LABEL_168;
  }
  if ((v119 & 2) != 0) {
    v111 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else {
    v111 = 0;
  }
  if ((v119 & 4) != 0) {
    v110 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else {
    v110 = 0;
  }
  if ((v119 & 8) != 0) {
    v108 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else {
    v108 = 0;
  }
  if ((v119 & 0x20) != 0)
  {
    v107 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    v109 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else
  {
    v109 = 0;
    v107 = 0;
  }
  v113 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  *(_OWORD *)__p = 0u;
  v121 = 0u;
  LODWORD(v122) = 1065353216;
  v42 = *(void **)(v115 + 304);
  if (v42 == (void *)(v115 + 312)) {
    goto LABEL_159;
  }
  do
  {
    v43 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_bundleIdentifierForSourceID(v115, v42[4]);
    v44 = v43;
    if (!v43) {
      goto LABEL_123;
    }
    v45 = [v43 hash];
    v46 = v45;
    v47 = (unint64_t)__p[1];
    if (!__p[1]) {
      goto LABEL_66;
    }
    v48 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v48.i16[0] = vaddlv_u8(v48);
    v49 = v48.u32[0];
    if (v48.u32[0] > 1uLL)
    {
      v2 = v45;
      if ((void *)v45 >= __p[1]) {
        v2 = v45 % (unint64_t)__p[1];
      }
    }
    else
    {
      v2 = ((unint64_t)__p[1] - 1) & v45;
    }
    v50 = (uint64_t *)*((void *)__p[0] + v2);
    if (!v50 || (v13 = *v50) == 0)
    {
LABEL_66:
      v13 = (uint64_t)operator new(0xD0uLL);
      *(void *)v13 = 0;
      *(void *)(v13 + 8) = v46;
      *(void *)(v13 + 16) = v44;
      *(_OWORD *)(v13 + 24) = 0u;
      *(_OWORD *)(v13 + 40) = 0u;
      *(_OWORD *)(v13 + 56) = 0u;
      *(_OWORD *)(v13 + 72) = 0u;
      *(_OWORD *)(v13 + 88) = 0u;
      *(_OWORD *)(v13 + 104) = 0u;
      *(_OWORD *)(v13 + 120) = 0u;
      *(_OWORD *)(v13 + 136) = 0u;
      *(_OWORD *)(v13 + 152) = 0u;
      *(_OWORD *)(v13 + 168) = 0u;
      *(_OWORD *)(v13 + 184) = 0u;
      *(void *)(v13 + 200) = 0;
      v55 = (float)(unint64_t)(*((void *)&v121 + 1) + 1);
      if (v47 && (float)(*(float *)&v122 * (float)v47) >= v55)
      {
LABEL_112:
        v70 = __p[0];
        v71 = (uint64_t *)*((void *)__p[0] + v2);
        if (v71)
        {
          *(void *)v13 = *v71;
        }
        else
        {
          *(void *)v13 = v121;
          *(void *)&v121 = v13;
          v70[v2] = &v121;
          if (!*(void *)v13)
          {
LABEL_121:
            ++*((void *)&v121 + 1);
            goto LABEL_122;
          }
          v72 = *(void *)(*(void *)v13 + 8);
          if ((v47 & (v47 - 1)) != 0)
          {
            if (v72 >= v47) {
              v72 %= v47;
            }
          }
          else
          {
            v72 &= v47 - 1;
          }
          v71 = (uint64_t *)((char *)__p[0] + 8 * v72);
        }
        *v71 = v13;
        goto LABEL_121;
      }
      v56 = (v47 & (v47 - 1)) != 0;
      if (v47 < 3) {
        v56 = 1;
      }
      v57 = v56 | (2 * v47);
      v58 = vcvtps_u32_f32(v55 / *(float *)&v122);
      if (v57 <= v58) {
        prime = (int8x8_t)v58;
      }
      else {
        prime = (int8x8_t)v57;
      }
      if (*(void *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      v47 = (unint64_t)__p[1];
      if ((void *)*(void *)&prime > __p[1]) {
        goto LABEL_78;
      }
      if ((void *)*(void *)&prime < __p[1])
      {
        v65 = vcvtps_u32_f32((float)*((unint64_t *)&v121 + 1) / *(float *)&v122);
        if (__p[1] < (void *)3
          || (v66 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v66.i16[0] = vaddlv_u8(v66), v66.u32[0] > 1uLL))
        {
          v65 = std::__next_prime(v65);
        }
        else
        {
          v67 = 1 << -(char)__clz(v65 - 1);
          if (v65 >= 2) {
            v65 = v67;
          }
        }
        if (*(void *)&prime <= v65) {
          prime = (int8x8_t)v65;
        }
        if (*(void *)&prime >= v47)
        {
          v47 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_78:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            v59 = operator new(8 * *(void *)&prime);
            v60 = __p[0];
            __p[0] = v59;
            if (v60) {
              operator delete(v60);
            }
            v61 = 0;
            __p[1] = (void *)prime;
            do
              *((void *)__p[0] + v61++) = 0;
            while (*(void *)&prime != v61);
            v62 = (void **)v121;
            if ((void)v121)
            {
              v63 = *(void *)(v121 + 8);
              v64 = (uint8x8_t)vcnt_s8(prime);
              v64.i16[0] = vaddlv_u8(v64);
              if (v64.u32[0] > 1uLL)
              {
                if (v63 >= *(void *)&prime) {
                  v63 %= *(void *)&prime;
                }
              }
              else
              {
                v63 &= *(void *)&prime - 1;
              }
              *((void *)__p[0] + v63) = &v121;
              for (i = *v62; i; v63 = v69)
              {
                v69 = i[1];
                if (v64.u32[0] > 1uLL)
                {
                  if (v69 >= *(void *)&prime) {
                    v69 %= *(void *)&prime;
                  }
                }
                else
                {
                  v69 &= *(void *)&prime - 1;
                }
                if (v69 != v63)
                {
                  if (!*((void *)__p[0] + v69))
                  {
                    *((void *)__p[0] + v69) = v62;
                    goto LABEL_103;
                  }
                  *v62 = (void *)*i;
                  *i = **((void **)__p[0] + v69);
                  **((void **)__p[0] + v69) = i;
                  i = v62;
                }
                v69 = v63;
LABEL_103:
                v62 = (void **)i;
                i = (void *)*i;
              }
            }
            v47 = (unint64_t)prime;
            goto LABEL_107;
          }
          v85 = __p[0];
          __p[0] = 0;
          if (v85) {
            operator delete(v85);
          }
          v47 = 0;
          __p[1] = 0;
        }
      }
LABEL_107:
      if ((v47 & (v47 - 1)) != 0)
      {
        if (v46 >= v47) {
          v2 = v46 % v47;
        }
        else {
          v2 = v46;
        }
      }
      else
      {
        v2 = (v47 - 1) & v46;
      }
      goto LABEL_112;
    }
    v112 = (unint64_t)__p[1] - 1;
    while (1)
    {
      v51 = *(void *)(v13 + 8);
      if (v51 == v46) {
        break;
      }
      if (v49 > 1)
      {
        if (v51 >= v47) {
          v51 %= v47;
        }
      }
      else
      {
        v51 &= v112;
      }
      if (v51 != v2) {
        goto LABEL_66;
      }
LABEL_65:
      v13 = *(void *)v13;
      if (!v13) {
        goto LABEL_66;
      }
    }
    prime = (int8x8_t)*(id *)(v13 + 16);
    v52 = v44;
    v53 = v52;
    if ((id)prime != v52)
    {
      v54 = [*(id *)&prime isEqualToString:v52];

      if (v54) {
        goto LABEL_122;
      }
      goto LABEL_65;
    }

LABEL_122:
    v73 = *(_OWORD *)(v42 + 5);
    v74 = *(_OWORD *)(v42 + 7);
    v75 = *(_OWORD *)(v42 + 9);
    *(_OWORD *)(v13 + 72) = *(_OWORD *)(v42 + 11);
    *(_OWORD *)(v13 + 56) = v75;
    *(_OWORD *)(v13 + 40) = v74;
    *(_OWORD *)(v13 + 24) = v73;
    v76 = *(_OWORD *)(v42 + 13);
    v77 = *(_OWORD *)(v42 + 15);
    v78 = *(_OWORD *)(v42 + 17);
    *(_OWORD *)(v13 + 136) = *(_OWORD *)(v42 + 19);
    *(_OWORD *)(v13 + 120) = v78;
    *(_OWORD *)(v13 + 104) = v77;
    *(_OWORD *)(v13 + 88) = v76;
    v79 = *(_OWORD *)(v42 + 21);
    v80 = *(_OWORD *)(v42 + 23);
    v81 = *(_OWORD *)(v42 + 25);
    *(void *)(v13 + 200) = v42[27];
    *(_OWORD *)(v13 + 184) = v81;
    *(_OWORD *)(v13 + 168) = v80;
    *(_OWORD *)(v13 + 152) = v79;

LABEL_123:
    v82 = (void *)v42[1];
    if (v82)
    {
      do
      {
        v83 = v82;
        v82 = (void *)*v82;
      }
      while (v82);
    }
    else
    {
      do
      {
        v83 = (void *)v42[2];
        v84 = *v83 == (void)v42;
        v42 = v83;
      }
      while (!v84);
    }
    v42 = v83;
  }
  while (v83 != (void *)(v115 + 312));
  v86 = (uint64_t **)v121;
  if ((void)v121)
  {
    prime = (int8x8_t)0x1E4F28000uLL;
    do
    {
      v87 = v86[2];
      if ((v119 & 2) != 0)
      {
        if (!v133) {
          goto LABEL_186;
        }
        v88 = (void *)MEMORY[0x1E4F2B370];
        v89 = (*(uint64_t (**)(void *, uint64_t *))(*v133 + 48))(v133, (uint64_t *)v86 + 3);
        if (*(unsigned char *)(v89 + 112)) {
          v90 = *(double *)(v89 + 120)
        }
              + (*(double *)(v89 + 80) - *(double *)(v89 + 120)) * 22.5 / (*(double *)(v89 + 128) + 22.5);
        else {
          v90 = *(double *)(v89 + 120);
        }
        v91 = [v88 quantityWithUnit:v118 doubleValue:v90];
        [v111 setObject:v91 forKeyedSubscript:v87];
      }
      if ((v119 & 4) != 0)
      {
        if (!v133) {
          goto LABEL_186;
        }
        v92 = objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v118, *(double *)((*(uint64_t (**)(void *, uint64_t *))(*v133 + 48))(v133, (uint64_t *)v86 + 3) + 16));
        [v110 setObject:v92 forKeyedSubscript:v87];
      }
      if ((v119 & 8) != 0)
      {
        if (!v133) {
          goto LABEL_186;
        }
        v93 = objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v118, *(double *)((*(uint64_t (**)(void *, uint64_t *))(*v133 + 48))(v133, (uint64_t *)v86 + 3) + 8));
        [v108 setObject:v93 forKeyedSubscript:v87];
      }
      if ((v119 & 0x20) != 0)
      {
        if (!v133) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        v94 = (*(uint64_t (**)(void *, uint64_t *))(*v133 + 48))(v133, (uint64_t *)v86 + 3);
        v95 = *(double *)(v94 + 48);
        v96 = *(double *)(v94 + 56);
        v97 = [MEMORY[0x1E4F2B370] quantityWithUnit:v118 doubleValue:*(double *)(v94 + 40)];
        [v107 setObject:v97 forKeyedSubscript:v87];

        v98 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v95, v96);
        [v109 setObject:v98 forKeyedSubscript:v87];
      }
      if (!v133) {
LABEL_186:
      }
        std::__throw_bad_function_call[abi:ne180100]();
      v13 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)((*(uint64_t (**)(void *, uint64_t *))(*v133 + 48))(v133, (uint64_t *)v86 + 3) + 32));
      [v113 setObject:v13 forKeyedSubscript:v87];

      v86 = (uint64_t **)*v86;
    }
    while (v86);
  }
LABEL_159:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>>>::~__hash_table((uint64_t)__p);
  if ((v119 & 2) != 0) {
    [v117 setAverageQuantityBySource:v111];
  }
  if ((v119 & 4) != 0) {
    [v117 setMinimumQuantityBySource:v110];
  }
  if ((v119 & 8) != 0) {
    [v117 setMaximumQuantityBySource:v108];
  }
  if ((v119 & 0x20) != 0)
  {
    [v117 setMostRecentQuantityBySource:v107];
    [v117 setMostRecentQuantityDateIntervalBySource:v109];
  }
  [v117 setDataCountBySource:v113];

LABEL_168:
  std::__function::__value_func<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)>::~__value_func[abi:ne180100](v132);
  v99 = [*(id *)(a1 + 16) _unitForChangeInCanonicalUnit];
  v100 = [v117 averageQuantity];
  if (v100)
  {
    v13 = [v117 averageQuantity];
    if (([(id)v13 isCompatibleWithUnit:v99] & 1) == 0)
    {

      goto LABEL_182;
    }
  }
  v101 = [v117 minimumQuantity];
  if (v101)
  {
    prime = [v117 minimumQuantity];
    if (![*(id *)&prime isCompatibleWithUnit:v99])
    {
      v102 = 1;
      goto LABEL_176;
    }
  }
  v103 = [v117 maximumQuantity];
  if (v103)
  {
    v104 = [v117 maximumQuantity];
    v105 = [v104 isCompatibleWithUnit:v99];

    v102 = v105 ^ 1;
    if (v101) {
      goto LABEL_176;
    }
LABEL_180:
    if (!v100) {
      goto LABEL_181;
    }
LABEL_177:

    if ((v102 & 1) == 0) {
      goto LABEL_183;
    }
LABEL_182:
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8], @"Expected compatibility with %@", v99 format];
    goto LABEL_183;
  }
  v102 = 0;
  if (!v101) {
    goto LABEL_180;
  }
LABEL_176:

  if (v100) {
    goto LABEL_177;
  }
LABEL_181:

  if (v102) {
    goto LABEL_182;
  }
LABEL_183:

  return v117;
}

void sub_1BD0B204C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23)
{
  std::__function::__value_func<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)>::~__value_func[abi:ne180100]((void *)(v23 - 192));
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 352);
  uint64_t v2 = *(void *)(a1 + 368);
  if (v1 != (*(void *)(a1 + 376) - v2) >> 3)
  {
    v4 = (void **)(a1 + 368);
    *(void *)(a1 + 376) = v2;
    std::vector<long long>::reserve((void **)(a1 + 368), v1);
    v5 = *(void **)(a1 + 344);
    if (v5)
    {
      v6 = *(char **)(a1 + 376);
      do
      {
        uint64_t v7 = v5[2];
        unint64_t v8 = *(void *)(a1 + 384);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v4;
          uint64_t v11 = (v6 - (unsigned char *)*v4) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 368);
            v6 = *(char **)(a1 + 376);
          }
          else
          {
            uint64_t v15 = 0;
          }
          v16 = (void *)(v14 + 8 * v11);
          void *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            uint64_t v17 = *((void *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(void *)(a1 + 368) = v16;
          *(void *)(a1 + 376) = v9;
          *(void *)(a1 + 384) = v14 + 8 * v15;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)v6 = v7;
          v9 = v6 + 8;
        }
        *(void *)(a1 + 376) = v9;
        v5 = (void *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    id WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      id v20 = objc_loadWeakRetained(v18);
      [v20 orderSourceIDs:v4];
    }
  }
}

void sub_1BD0B2454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2) {
    a2 = v4 * floor(a2 / v4);
  }
  double v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v121 = (void **)(a1 + 96);
    v117 = (double **)(a1 + 64);
    uint64_t v115 = a1 + 120;
    location = (id *)(a1 + 88);
    v111 = (void *)(a1 + 312);
    while (1)
    {
      uint64_t v6 = *(void *)(a1 + 96);
      uint64_t v7 = *(long long **)(a1 + 104);
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4);
      if (v8) {
        break;
      }
LABEL_127:
      *(double *)(a1 + 56) = a2;
LABEL_128:
      double v108 = *(double *)(a1 + 56);
      if (v108 == v5)
      {
        v109 = [MEMORY[0x1E4F28B00] currentHandler];
        v110 = [NSString stringWithUTF8String:"void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeThroughTime(double) [Statistics = HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>]"];
        [v109 handleFailureInFunction:v110 file:@"HDStatisticsBucket.hpp" lineNumber:234 description:@"Failed to make forward progress during statistics merge."];

        double v108 = *(double *)(a1 + 56);
      }
      double v5 = v108;
      if (v108 >= a2) {
        return;
      }
    }
    if (v8 != 1)
    {
      double v17 = a2;
      double v18 = a2;
      double v19 = v5;
      uint64_t v20 = *(void *)(a1 + 96);
      if ((long long *)v6 != v7)
      {
        do
        {
          double v21 = *(double *)(v20 + 8);
          double v22 = *(double *)(v20 + 16);
          if (v21 > v19 && v21 < v18) {
            double v18 = *(double *)(v20 + 8);
          }
          if (v22 > v5) {
            double v24 = *(double *)(v20 + 16);
          }
          else {
            double v24 = v17;
          }
          if (v22 < v17)
          {
            double v19 = v5;
            double v17 = v24;
          }
          v20 += 48;
        }
        while ((long long *)v20 != v7);
      }
      if (v17 >= v18) {
        double v25 = v18;
      }
      else {
        double v25 = v17;
      }
      double v26 = *(double *)(a1 + 16);
      if (v26 > 0.0)
      {
        double v27 = v26 * floor(v25 / v26);
        double v28 = v26 * floor((v26 + v5) / v26);
        if (v27 >= v28) {
          double v25 = v27;
        }
        else {
          double v25 = v28;
        }
      }
      *v121 = 0;
      v121[1] = 0;
      v121[2] = 0;
      v113 = (long long *)v6;
      if ((long long *)v6 != v7)
      {
        if (v8 > 0x555555555555555) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4));
        v32 = *(char **)(a1 + 96);
        v31 = *(char **)(a1 + 104);
        v33 = v29;
        if (v31 != v32)
        {
          do
          {
            long long v34 = *((_OWORD *)v31 - 3);
            long long v35 = *((_OWORD *)v31 - 2);
            *(_OWORD *)(v33 - 21) = *(_OWORD *)(v31 - 21);
            *((_OWORD *)v33 - 3) = v34;
            *((_OWORD *)v33 - 2) = v35;
            v33 -= 48;
            v31 -= 48;
          }
          while (v31 != v32);
          v31 = (char *)*v121;
        }
        *(void *)(a1 + 96) = v33;
        *(void *)(a1 + 104) = v29;
        *(void *)(a1 + 112) = &v29[48 * v30];
        if (v31) {
          operator delete(v31);
        }
      }
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_updateSourceOrder(a1);
      id WeakRetained = objc_loadWeakRetained(location);

      if (WeakRetained)
      {
        *(void *)&long long v123 = a1;
        unint64_t v37 = 126 - 2 * __clz(v8);
        unint64_t v38 = (unint64_t)v113;
        if (v113 == v7) {
          uint64_t v39 = 0;
        }
        else {
          uint64_t v39 = v37;
        }
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*,false>((unint64_t)v113, v7, (uint64_t)&v123, v39, 1);
      }
      else
      {
        unint64_t v42 = 126 - 2 * __clz(v8);
        unint64_t v38 = (unint64_t)v113;
        if (v113 == v7) {
          uint64_t v39 = 0;
        }
        else {
          uint64_t v39 = v42;
        }
      }
      std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*,false>(v38, v7, v39, 1);
      if (*(unsigned char *)(a1 + 25)) {
        id v114 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      }
      else {
        id v114 = 0;
      }
      if (v113 == v7)
      {
LABEL_109:
        v92 = *(void **)(a1 + 304);
        if (v92 != v111)
        {
          do
          {
            v93 = (void *)v92[1];
            if (v93)
            {
              do
              {
                v94 = v93;
                v93 = (void *)*v93;
              }
              while (v93);
            }
            else
            {
              do
              {
                v94 = (void *)v92[2];
                BOOL v95 = *v94 == (void)v92;
                v92 = v94;
              }
              while (!v95);
            }
            v92 = v94;
          }
          while (v94 != v111);
        }
        *(double *)(a1 + 56) = v25;

        if (v113) {
          operator delete(v113);
        }
        goto LABEL_128;
      }
      uint64_t v116 = 0;
      char v43 = 0;
      v44 = v113;
      while (2)
      {
        long long v45 = v44[1];
        long long v123 = *v44;
        long long v124 = v45;
        uint64_t v125 = *((void *)v44 + 4);
        uint64_t v46 = v123;
        uint64_t v47 = v45;
        if (*(double *)&v45 - *((double *)&v123 + 1) - (v25 - *((double *)&v123 + 1)) < 0.01)
        {
          uint64_t v48 = 0;
          int v49 = 0;
          char v50 = 0;
          double v51 = 0.0;
          uint64_t v47 = 0;
          if (!(_BYTE)v125) {
            goto LABEL_62;
          }
LABEL_57:
          char v119 = v50;
          uint64_t v120 = v48;
          HDRawQuantitySample::applyMask((uint64_t)&v123, v117);
          int v52 = *((unsigned __int8 *)v44 + 42);
          int v53 = *((unsigned __int8 *)v44 + 41);
          char v118 = *((unsigned char *)v44 + 40);
          if (!(_BYTE)v125) {
            goto LABEL_90;
          }
          if (v43)
          {
            unint64_t v54 = *((void *)&v124 + 1);
            if (v116 == *((void *)&v124 + 1) || *(unsigned char *)(a1 + 24))
            {
              HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::addSample(v115, (double *)&v123, v52 == 0);
              int v52 = 1;
            }
          }
          else
          {
            HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::addSample(v115, (double *)&v123, v52 == 0);
            int v52 = 1;
            unint64_t v54 = *((void *)&v124 + 1);
            uint64_t v116 = *((void *)&v124 + 1);
          }
          if (!*(unsigned char *)(a1 + 25)) {
            goto LABEL_89;
          }
          v65 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_bundleIdentifierForSourceID(a1, v54);
          if (!v65) {
            goto LABEL_88;
          }
          v66 = [v114 objectForKeyedSubscript:v65];
          v67 = v66;
          if (v66)
          {
            if ([v66 longLongValue] != v54 && !*(unsigned char *)(a1 + 24))
            {
LABEL_87:

LABEL_88:
LABEL_89:
              char v43 = 1;
LABEL_90:
              if (v49)
              {
                BOOL v80 = v52 != 0;
                v82 = *(char **)(a1 + 104);
                unint64_t v81 = *(void *)(a1 + 112);
                if ((unint64_t)v82 < v81)
                {
                  *(void *)v82 = v46;
                  *((double *)v82 + 1) = v51;
                  *((void *)v82 + 2) = v47;
                  *((void *)v82 + 3) = v120;
                  v82[32] = v49;
                  v82[33] = v119;
                  v82[40] = v118;
                  v82[41] = v53;
                  v59 = v82 + 48;
                  v82[42] = v80;
                  goto LABEL_107;
                }
                v76 = (char *)*v121;
                unint64_t v83 = 0xAAAAAAAAAAAAAAABLL * ((v82 - (unsigned char *)*v121) >> 4);
                unint64_t v84 = v83 + 1;
                if (v83 + 1 > 0x555555555555555) {
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v85 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v81 - (void)v76) >> 4);
                if (2 * v85 > v84) {
                  unint64_t v84 = 2 * v85;
                }
                if (v85 >= 0x2AAAAAAAAAAAAAALL) {
                  unint64_t v86 = 0x555555555555555;
                }
                else {
                  unint64_t v86 = v84;
                }
                if (v86)
                {
                  unint64_t v86 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v86);
                  v76 = *(char **)(a1 + 96);
                  v82 = *(char **)(a1 + 104);
                }
                else
                {
                  uint64_t v87 = 0;
                }
                unint64_t v88 = v86 + 48 * v83;
                *(void *)unint64_t v88 = v46;
                *(double *)(v88 + 8) = v51;
                *(void *)(v88 + 16) = v47;
                *(void *)(v88 + 24) = v120;
                *(unsigned char *)(v88 + 32) = v49;
                *(unsigned char *)(v88 + 33) = v119;
                *(unsigned char *)(v88 + 40) = v118;
                *(unsigned char *)(v88 + 41) = v53;
                *(unsigned char *)(v88 + 42) = v80;
                unint64_t v89 = v88;
                if (v82 != v76)
                {
                  do
                  {
                    long long v90 = *((_OWORD *)v82 - 3);
                    long long v91 = *((_OWORD *)v82 - 2);
                    *(_OWORD *)(v89 - 21) = *(_OWORD *)(v82 - 21);
                    *(_OWORD *)(v89 - 48) = v90;
                    *(_OWORD *)(v89 - 32) = v91;
                    v89 -= 48;
                    v82 -= 48;
                  }
                  while (v82 != v76);
                  v76 = (char *)*v121;
                }
                v59 = (_OWORD *)(v88 + 48);
                *(void *)(a1 + 96) = v89;
                *(void *)(a1 + 104) = v88 + 48;
                *(void *)(a1 + 112) = v86 + 48 * v87;
                if (v76) {
LABEL_106:
                }
                  operator delete(v76);
                goto LABEL_107;
              }
              goto LABEL_108;
            }
          }
          else
          {
            v77 = [NSNumber numberWithLongLong:v54];
            [v114 setObject:v77 forKeyedSubscript:v65];
          }
          unint64_t v78 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_canonicalSourceIDForSourceID(a1, v54);
          v79 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_statisticsForSource(a1, v78);
          HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::addSample((uint64_t)v79, (double *)&v123, v53 == 0);
          LOBYTE(v53) = 1;
          goto LABEL_87;
        }
        if (v25 - *((double *)&v123 + 1) < 0.01)
        {
          LOBYTE(v125) = 0;
          goto LABEL_62;
        }
        uint64_t v48 = *((void *)&v124 + 1);
        char v50 = BYTE1(v125);
        *(double *)&long long v124 = v25;
        double v51 = v25;
        int v49 = v125;
        if ((_BYTE)v125) {
          goto LABEL_57;
        }
LABEL_62:
        v55 = *(long long **)(a1 + 104);
        unint64_t v56 = *(void *)(a1 + 112);
        if ((unint64_t)v55 < v56)
        {
          long long v57 = *v44;
          long long v58 = v44[2];
          v55[1] = v44[1];
          v55[2] = v58;
          long long *v55 = v57;
          v59 = v55 + 3;
          goto LABEL_107;
        }
        unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (unsigned char *)*v121) >> 4);
        unint64_t v61 = v60 + 1;
        if (v60 + 1 > 0x555555555555555) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - (void)*v121) >> 4);
        if (2 * v62 > v61) {
          unint64_t v61 = 2 * v62;
        }
        if (v62 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v63 = 0x555555555555555;
        }
        else {
          unint64_t v63 = v61;
        }
        if (v63) {
          unint64_t v63 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v63);
        }
        else {
          uint64_t v64 = 0;
        }
        v68 = (long long *)(v63 + 48 * v60);
        long long v69 = *v44;
        long long v70 = v44[2];
        v68[1] = v44[1];
        v68[2] = v70;
        long long *v68 = v69;
        v72 = *(char **)(a1 + 96);
        v71 = *(char **)(a1 + 104);
        v73 = v68;
        if (v71 != v72)
        {
          do
          {
            long long v74 = *((_OWORD *)v71 - 3);
            long long v75 = *((_OWORD *)v71 - 2);
            *(long long *)((char *)v73 - 21) = *(_OWORD *)(v71 - 21);
            *(v73 - 3) = v74;
            *(v73 - 2) = v75;
            v73 -= 3;
            v71 -= 48;
          }
          while (v71 != v72);
          v71 = (char *)*v121;
        }
        v59 = v68 + 3;
        *(void *)(a1 + 96) = v73;
        *(void *)(a1 + 104) = v68 + 3;
        *(void *)(a1 + 112) = v63 + 48 * v64;
        if (v71)
        {
          v76 = v71;
          goto LABEL_106;
        }
LABEL_107:
        *(void *)(a1 + 104) = v59;
LABEL_108:
        v44 += 3;
        if (v44 == v7) {
          goto LABEL_109;
        }
        continue;
      }
    }
    double v9 = *(double *)(v6 + 8);
    double v10 = *(double *)(v6 + 16);
    uint64_t v11 = *(void *)(v6 + 24);
    char v12 = *(unsigned char *)(v6 + 32);
    char v13 = *(unsigned char *)(v6 + 33);
    if (a2 - v9 >= 0.01)
    {
      if (v10 - v9 - (a2 - v9) < 0.01)
      {
        uint64_t v40 = 0;
        char v41 = 0;
        double v16 = 0.0;
        double v15 = *(double *)(v6 + 16);
        char v14 = *(unsigned char *)(v6 + 32);
        double v10 = 0.0;
        char v12 = 0;
LABEL_120:
        int v96 = *(unsigned __int8 *)(v6 + 42);
        int v97 = *(unsigned __int8 *)(v6 + 41);
        v98 = *(uint64_t **)(a1 + 96);
        int v99 = *(unsigned __int8 *)(v6 + 40);
        uint64_t v100 = *v98;
        *((double *)&v123 + 1) = v9;
        *(double *)&long long v124 = v15;
        *((void *)&v124 + 1) = v11;
        LOBYTE(v125) = v14;
        BYTE1(v125) = v13;
        *(_DWORD *)((char *)&v125 + 2) = *(_DWORD *)((char *)v98 + 34);
        HIWORD(v125) = *((_WORD *)v98 + 19);
        *((double *)&v126 + 1) = v16;
        *(double *)&long long v127 = v10;
        *((void *)&v127 + 1) = v40;
        LOBYTE(v128) = v12;
        HIBYTE(v128) = v41;
        *(void *)&long long v123 = v100;
        *(void *)&long long v126 = v100;
        HDRawQuantitySample::applyMask((uint64_t)&v123, v117);
        BOOL v101 = v99 != 0;
        BOOL v102 = v97 != 0;
        BOOL v103 = v96 != 0;
        if ((_BYTE)v125)
        {
          HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::addSample(v115, (double *)&v123, v96 == 0);
          if (*(unsigned char *)(a1 + 25))
          {
            unint64_t v104 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_canonicalSourceIDForSourceID(a1, *((unint64_t *)&v124 + 1));
            v105 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_statisticsForSource(a1, v104);
            HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::addSample((uint64_t)v105, (double *)&v123, v97 == 0);
          }
          BOOL v101 = 1;
          BOOL v102 = 1;
          BOOL v103 = 1;
        }
        if ((_BYTE)v128)
        {
          LOWORD(v122) = v128;
          long long v106 = v127;
          v107 = (char *)*v121;
          *(_OWORD *)v107 = v126;
          *((_OWORD *)v107 + 1) = v106;
          *((void *)v107 + 4) = v122;
          v107[40] = v101;
          v107[41] = v102;
          v107[42] = v103;
        }
        else
        {
          *(void *)(a1 + 104) = *(void *)(a1 + 96);
        }
        goto LABEL_127;
      }
      double v15 = a2;
      char v14 = *(unsigned char *)(v6 + 32);
      double v16 = a2;
    }
    else
    {
      char v14 = 0;
      double v15 = *(double *)(v6 + 16);
      double v16 = *(double *)(v6 + 8);
    }
    uint64_t v40 = *(void *)(v6 + 24);
    char v41 = *(unsigned char *)(v6 + 33);
    goto LABEL_120;
  }
}

void sub_1BD0B2DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  _Unwind_Resume(a1);
}

uint64_t HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::addSample(uint64_t result, double *a2, int a3)
{
  int v3 = 2 * (*a2 != -1.79769313e308);
  if (*a2 == 1.79769313e308) {
    int v3 = 1;
  }
  if (v3)
  {
    if (v3 == 1)
    {
      if (!*(_DWORD *)result)
      {
        int v5 = 1;
        goto LABEL_16;
      }
    }
    else if (v3 == 2)
    {
      if (*(_DWORD *)result == 2)
      {
        uint64_t v4 = result + 8;
        a3 = 1;
        return HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::addSample(v4, a2, a3);
      }
      int v5 = 2;
LABEL_16:
      *(_DWORD *)result = v5;
      *(_OWORD *)(result + 72) = 0u;
      *(_OWORD *)(result + 56) = 0u;
      *(_OWORD *)(result + 40) = 0u;
      *(_OWORD *)(result + 24) = 0u;
      *(_OWORD *)(result + 88) = 0u;
      *(_OWORD *)(result + 104) = 0u;
      *(_OWORD *)(result + 120) = 0u;
      *(void *)(result + 136) = 0;
      *(_OWORD *)(result + 8) = 0u;
      *(_WORD *)(result + 80) = *(_WORD *)(result + 176);
      long long v6 = *(_OWORD *)(result + 160);
      *(_OWORD *)(result + 48) = *(_OWORD *)(result + 144);
      *(_OWORD *)(result + 64) = v6;
      uint64_t v4 = result + 8;
      return HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::addSample(v4, a2, a3);
    }
  }
  else if (!*(_DWORD *)result && !*(void *)(result + 40))
  {
    uint64_t v4 = result + 8;
    return HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::addSample(v4, a2, a3);
  }
  return result;
}

uint64_t **HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = a2;
  int v3 = *(void **)(a1 + 312);
  if (!v3) {
    goto LABEL_11;
  }
  uint64_t v4 = (uint64_t **)(a1 + 312);
  do
  {
    uint64_t v5 = v3[4];
    BOOL v6 = v5 < a2;
    if (v5 >= a2) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = v3 + 1;
    }
    if (!v6) {
      uint64_t v4 = (uint64_t **)v3;
    }
    int v3 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t **)(a1 + 312) || (uint64_t)v4[4] > a2)
  {
LABEL_11:
    unint64_t v8 = (uint64_t **)(a1 + 304);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 304), a2, &v10);
    uint64_t v4 = std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v8, a2, &v10);
  }
  return v4 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    uint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((void *)(a1 + 392), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_bundleIdentifierForSourceID(a1, a2);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      id v10 = v6;
      uint64_t v7 = (void *)(a1 + 432);
      unint64_t v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        uint64_t v11 = &v10;
        *((void *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        id v6 = v10;
      }
    }
  }
  return a2;
}

void sub_1BD0B3058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  uint64_t v4 = (id *)(a1 + 88);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    id v6 = (void *)(a1 + 472);
    uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
    if (v7)
    {
      id v8 = (id)v7[3];
    }
    else
    {
      id v9 = objc_loadWeakRetained(v4);
      id v8 = [v9 bundleIdentifierForSourceID:a2];

      if (v8)
      {
        id v10 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
        objc_storeStrong(v10 + 3, v8);
      }
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1BD0B313C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, void *a3)
{
  id v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        uint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        id v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        id v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    id v9 = (char *)operator new(0xE0uLL);
    *((void *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    *(_OWORD *)(v9 + 136) = 0u;
    *(_OWORD *)(v9 + 152) = 0u;
    *(_OWORD *)(v9 + 168) = 0u;
    *(_OWORD *)(v9 + 184) = 0u;
    *(_OWORD *)(v9 + 200) = 0u;
    *((void *)v9 + 27) = 0;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v12 = a2 - 3;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 4);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v103 = *((void *)a2 - 3);
                uint64_t v104 = *(void *)(v13 + 24);
                if (v103 == v104) {
                  return;
                }
                v105 = *(char **)(*(void *)a3 + 368);
                long long v106 = *(char **)(*(void *)a3 + 376);
                v107 = v105;
                double v108 = v105;
                if (v105 == v106) {
                  goto LABEL_171;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>((long long *)v13, (long long *)(v13 + 48), a2 - 3, a3);
                return;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, (uint64_t)(a2 - 3), a3);
                return;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, v13 + 144, (uint64_t)(a2 - 3), a3);
                return;
              default:
                JUMPOUT(0);
            }
            do
            {
              if (*(void *)v108 == v103) {
                goto LABEL_168;
              }
              v108 += 8;
            }
            while (v108 != v106);
            double v108 = *(char **)(*(void *)a3 + 376);
LABEL_168:
            while (*(void *)v107 != v104)
            {
              v107 += 8;
              if (v107 == v106)
              {
                v107 = *(char **)(*(void *)a3 + 376);
                break;
              }
            }
LABEL_171:
            if (v108 - v105 < v107 - v105)
            {
              *(_OWORD *)v226 = *(_OWORD *)(v13 + 16);
              *(_OWORD *)&v226[16] = *(_OWORD *)(v13 + 32);
              long long v218 = *(_OWORD *)v13;
              long long v109 = *v12;
              long long v110 = *(a2 - 2);
              *(_OWORD *)(v13 + 27) = *(long long *)((char *)a2 - 21);
              *(_OWORD *)unint64_t v13 = v109;
              *(_OWORD *)(v13 + 16) = v110;
              *(long long *)((char *)a2 - 21) = *(_OWORD *)&v226[11];
              *unint64_t v12 = v218;
              *(a2 - 2) = *(_OWORD *)v226;
            }
            return;
          }
          if (v14 <= 1151)
          {
            v111 = (long long *)(v13 + 48);
            BOOL v113 = (long long *)v13 == a2 || v111 == a2;
            if (a5)
            {
              if (!v113)
              {
                unint64_t v114 = v13;
                do
                {
                  unint64_t v115 = v114;
                  unint64_t v114 = (unint64_t)v111;
                  uint64_t v116 = *(void *)(v115 + 72);
                  uint64_t v117 = *(void *)(v115 + 24);
                  if (v116 != v117)
                  {
                    char v118 = *(char **)(*(void *)a3 + 368);
                    char v119 = *(char **)(*(void *)a3 + 376);
                    uint64_t v120 = v118;
                    v121 = v118;
                    if (v118 != v119)
                    {
                      do
                      {
                        if (*(void *)v121 == v116) {
                          goto LABEL_196;
                        }
                        v121 += 8;
                      }
                      while (v121 != v119);
                      v121 = *(char **)(*(void *)a3 + 376);
LABEL_196:
                      while (*(void *)v120 != v117)
                      {
                        v120 += 8;
                        if (v120 == v119)
                        {
                          uint64_t v120 = *(char **)(*(void *)a3 + 376);
                          break;
                        }
                      }
                    }
                    if (v121 - v118 < v120 - v118)
                    {
                      uint64_t v227 = *(void *)(v114 + 16);
                      long long v219 = *(_OWORD *)v114;
                      long long v236 = *(_OWORD *)(v115 + 80);
                      unint64_t v122 = v114;
                      while (1)
                      {
                        long long v123 = *(_OWORD *)(v115 + 16);
                        *(_OWORD *)unint64_t v122 = *(_OWORD *)v115;
                        *(_OWORD *)(v122 + 16) = v123;
                        *(_OWORD *)(v122 + 27) = *(_OWORD *)(v115 + 27);
                        if (v115 == v13) {
                          break;
                        }
                        unint64_t v122 = v115;
                        uint64_t v124 = *(void *)(v115 - 24);
                        if (v116 != v124)
                        {
                          uint64_t v125 = *(char **)(*(void *)a3 + 368);
                          long long v126 = *(char **)(*(void *)a3 + 376);
                          long long v127 = v125;
                          __int16 v128 = v125;
                          if (v125 != v126)
                          {
                            do
                            {
                              if (*(void *)v128 == v116) {
                                goto LABEL_208;
                              }
                              v128 += 8;
                            }
                            while (v128 != v126);
                            __int16 v128 = *(char **)(*(void *)a3 + 376);
LABEL_208:
                            while (*(void *)v127 != v124)
                            {
                              v127 += 8;
                              if (v127 == v126)
                              {
                                long long v127 = *(char **)(*(void *)a3 + 376);
                                break;
                              }
                            }
                          }
                          unint64_t v115 = v122 - 48;
                          if (v128 - v125 < v127 - v125) {
                            continue;
                          }
                        }
                        goto LABEL_212;
                      }
                      unint64_t v122 = v13;
LABEL_212:
                      *(_OWORD *)unint64_t v122 = v219;
                      *(void *)(v122 + 16) = v227;
                      *(void *)(v122 + 24) = v116;
                      *(void *)(v122 + 32) = v236;
                      *(_DWORD *)(v122 + 39) = *(_DWORD *)((char *)&v236 + 7);
                    }
                  }
                  v111 = (long long *)(v114 + 48);
                }
                while ((long long *)(v114 + 48) != a2);
              }
            }
            else if (!v113)
            {
              do
              {
                unint64_t v201 = a1;
                a1 = (unint64_t)v111;
                uint64_t v202 = *(void *)(v201 + 72);
                uint64_t v203 = *(void *)(v201 + 24);
                if (v202 != v203)
                {
                  v204 = *(char **)(*(void *)a3 + 368);
                  v205 = *(char **)(*(void *)a3 + 376);
                  v206 = v204;
                  v207 = v204;
                  if (v204 != v205)
                  {
                    do
                    {
                      if (*(void *)v207 == v202) {
                        goto LABEL_312;
                      }
                      v207 += 8;
                    }
                    while (v207 != v205);
                    v207 = *(char **)(*(void *)a3 + 376);
LABEL_312:
                    while (*(void *)v206 != v203)
                    {
                      v206 += 8;
                      if (v206 == v205)
                      {
                        v206 = *(char **)(*(void *)a3 + 376);
                        break;
                      }
                    }
                  }
                  if (v207 - v204 < v206 - v204)
                  {
                    uint64_t v230 = *(void *)(a1 + 16);
                    long long v222 = *(_OWORD *)a1;
                    long long v239 = *(_OWORD *)(v201 + 80);
                    unint64_t v208 = a1;
                    do
                    {
                      v209 = (_OWORD *)v208;
                      unint64_t v208 = v201;
                      long long v210 = *(_OWORD *)(v201 + 16);
                      _OWORD *v209 = *(_OWORD *)v201;
                      v209[1] = v210;
                      *(_OWORD *)((char *)v209 + 27) = *(_OWORD *)(v201 + 27);
                      uint64_t v211 = *(void *)(v201 - 24);
                      if (v202 == v211) {
                        break;
                      }
                      v212 = *(char **)(*(void *)a3 + 368);
                      v213 = *(char **)(*(void *)a3 + 376);
                      v214 = v212;
                      v215 = v212;
                      if (v212 != v213)
                      {
                        do
                        {
                          if (*(void *)v215 == v202) {
                            goto LABEL_322;
                          }
                          v215 += 8;
                        }
                        while (v215 != v213);
                        v215 = *(char **)(*(void *)a3 + 376);
LABEL_322:
                        while (*(void *)v214 != v211)
                        {
                          v214 += 8;
                          if (v214 == v213)
                          {
                            v214 = *(char **)(*(void *)a3 + 376);
                            break;
                          }
                        }
                      }
                      unint64_t v201 = v208 - 48;
                    }
                    while (v215 - v212 < v214 - v212);
                    *(_OWORD *)unint64_t v208 = v222;
                    *(void *)(v208 + 16) = v230;
                    *(void *)(v208 + 24) = v202;
                    *(void *)(v208 + 32) = v239;
                    *(_DWORD *)(v208 + 39) = *(_DWORD *)((char *)&v239 + 7);
                  }
                }
                v111 = (long long *)(a1 + 48);
              }
              while ((long long *)(a1 + 48) != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((long long *)v13 != a2)
            {
              int64_t v129 = (v15 - 2) >> 1;
              int64_t v130 = v129;
              do
              {
                int64_t v131 = v130;
                if (v129 >= v130)
                {
                  uint64_t v132 = (2 * v130) | 1;
                  unint64_t v133 = v13 + 48 * v132;
                  if (2 * v131 + 2 < (uint64_t)v15)
                  {
                    uint64_t v134 = *(void *)(v133 + 24);
                    uint64_t v135 = *(void *)(v133 + 72);
                    if (v134 != v135)
                    {
                      v137 = *(char **)(*(void *)a3 + 368);
                      v136 = *(char **)(*(void *)a3 + 376);
                      v138 = v137;
                      v139 = v137;
                      if (v137 != v136)
                      {
                        do
                        {
                          if (*(void *)v139 == v134) {
                            goto LABEL_224;
                          }
                          v139 += 8;
                        }
                        while (v139 != v136);
                        v139 = *(char **)(*(void *)a3 + 376);
LABEL_224:
                        while (*(void *)v138 != v135)
                        {
                          v138 += 8;
                          if (v138 == v136)
                          {
                            v138 = *(char **)(*(void *)a3 + 376);
                            break;
                          }
                        }
                      }
                      v133 += 48 * (v139 - v137 < v138 - v137);
                      if (v139 - v137 < v138 - v137) {
                        uint64_t v132 = 2 * v131 + 2;
                      }
                    }
                  }
                  unint64_t v140 = v13 + 48 * v131;
                  uint64_t v141 = *(void *)(v133 + 24);
                  uint64_t v142 = *(void *)(v140 + 24);
                  if (v141 == v142) {
                    goto LABEL_238;
                  }
                  v144 = *(char **)(*(void *)a3 + 368);
                  v143 = *(char **)(*(void *)a3 + 376);
                  v145 = v144;
                  v146 = v144;
                  if (v144 != v143)
                  {
                    do
                    {
                      if (*(void *)v146 == v141) {
                        goto LABEL_234;
                      }
                      v146 += 8;
                    }
                    while (v146 != v143);
                    v146 = *(char **)(*(void *)a3 + 376);
LABEL_234:
                    while (*(void *)v145 != v142)
                    {
                      v145 += 8;
                      if (v145 == v143)
                      {
                        v145 = *(char **)(*(void *)a3 + 376);
                        break;
                      }
                    }
                  }
                  if (v146 - v144 >= v145 - v144)
                  {
LABEL_238:
                    uint64_t v228 = *(void *)(v140 + 16);
                    long long v220 = *(_OWORD *)v140;
                    long long v237 = *(_OWORD *)(v140 + 32);
                    long long v147 = *(_OWORD *)v133;
                    long long v148 = *(_OWORD *)(v133 + 16);
                    *(_OWORD *)(v140 + 27) = *(_OWORD *)(v133 + 27);
                    *(_OWORD *)unint64_t v140 = v147;
                    *(_OWORD *)(v140 + 16) = v148;
                    if (v129 >= v132)
                    {
                      while (1)
                      {
                        uint64_t v150 = 2 * v132;
                        uint64_t v132 = (2 * v132) | 1;
                        unint64_t v149 = v13 + 48 * v132;
                        uint64_t v151 = v150 + 2;
                        if (v151 < (uint64_t)v15)
                        {
                          uint64_t v152 = *(void *)(v149 + 24);
                          uint64_t v153 = *(void *)(v149 + 72);
                          if (v152 != v153)
                          {
                            v154 = *(char **)(*(void *)a3 + 368);
                            v155 = *(char **)(*(void *)a3 + 376);
                            v156 = v154;
                            v157 = v154;
                            if (v154 != v155)
                            {
                              do
                              {
                                if (*(void *)v157 == v152) {
                                  goto LABEL_246;
                                }
                                v157 += 8;
                              }
                              while (v157 != v155);
                              v157 = *(char **)(*(void *)a3 + 376);
LABEL_246:
                              while (*(void *)v156 != v153)
                              {
                                v156 += 8;
                                if (v156 == v155)
                                {
                                  v156 = *(char **)(*(void *)a3 + 376);
                                  break;
                                }
                              }
                            }
                            v149 += 48 * (v157 - v154 < v156 - v154);
                            if (v157 - v154 < v156 - v154) {
                              uint64_t v132 = v151;
                            }
                          }
                        }
                        uint64_t v158 = *(void *)(v149 + 24);
                        if (v158 != v142)
                        {
                          v160 = *(char **)(*(void *)a3 + 368);
                          v159 = *(char **)(*(void *)a3 + 376);
                          v161 = v160;
                          v162 = v160;
                          if (v160 != v159)
                          {
                            do
                            {
                              if (*(void *)v162 == v158) {
                                goto LABEL_256;
                              }
                              v162 += 8;
                            }
                            while (v162 != v159);
                            v162 = *(char **)(*(void *)a3 + 376);
LABEL_256:
                            while (*(void *)v161 != v142)
                            {
                              v161 += 8;
                              if (v161 == v159)
                              {
                                v161 = *(char **)(*(void *)a3 + 376);
                                break;
                              }
                            }
                          }
                          if (v162 - v160 < v161 - v160) {
                            break;
                          }
                        }
                        long long v163 = *(_OWORD *)v149;
                        long long v164 = *(_OWORD *)(v149 + 16);
                        *(_OWORD *)(v133 + 27) = *(_OWORD *)(v149 + 27);
                        *(_OWORD *)unint64_t v133 = v163;
                        *(_OWORD *)(v133 + 16) = v164;
                        unint64_t v133 = v149;
                        if (v129 < v132) {
                          goto LABEL_261;
                        }
                      }
                    }
                    unint64_t v149 = v133;
LABEL_261:
                    *(_OWORD *)unint64_t v149 = v220;
                    *(void *)(v149 + 16) = v228;
                    *(void *)(v149 + 24) = v142;
                    *(void *)(v149 + 32) = v237;
                    *(_DWORD *)(v149 + 39) = *(_DWORD *)((char *)&v237 + 7);
                  }
                }
                int64_t v130 = v131 - 1;
              }
              while (v131);
              int64_t v165 = v14 / 0x30uLL;
              do
              {
                uint64_t v166 = 0;
                *(_OWORD *)v229 = *(_OWORD *)(v13 + 16);
                *(_OWORD *)&v229[16] = *(_OWORD *)(v13 + 32);
                long long v221 = *(_OWORD *)v13;
                uint64_t v167 = v165 - 2;
                if (v165 < 2) {
                  uint64_t v167 = v165 - 1;
                }
                uint64_t v168 = v167 >> 1;
                unint64_t v169 = v13;
                do
                {
                  v170 = (_OWORD *)v169;
                  v169 += 48 * v166 + 48;
                  uint64_t v171 = 2 * v166;
                  uint64_t v166 = (2 * v166) | 1;
                  uint64_t v172 = v171 + 2;
                  if (v171 + 2 < v165)
                  {
                    uint64_t v173 = *(void *)(v169 + 24);
                    uint64_t v174 = *(void *)(v169 + 72);
                    if (v173 != v174)
                    {
                      v176 = *(char **)(*(void *)a3 + 368);
                      v175 = *(char **)(*(void *)a3 + 376);
                      v177 = v176;
                      v178 = v176;
                      if (v176 != v175)
                      {
                        do
                        {
                          if (*(void *)v178 == v173) {
                            goto LABEL_273;
                          }
                          v178 += 8;
                        }
                        while (v178 != v175);
                        v178 = *(char **)(*(void *)a3 + 376);
LABEL_273:
                        while (*(void *)v177 != v174)
                        {
                          v177 += 8;
                          if (v177 == v175)
                          {
                            v177 = *(char **)(*(void *)a3 + 376);
                            break;
                          }
                        }
                      }
                      v169 += 48 * (v178 - v176 < v177 - v176);
                      if (v178 - v176 < v177 - v176) {
                        uint64_t v166 = v172;
                      }
                    }
                  }
                  long long v179 = *(_OWORD *)v169;
                  long long v180 = *(_OWORD *)(v169 + 16);
                  *(_OWORD *)((char *)v170 + 27) = *(_OWORD *)(v169 + 27);
                  _OWORD *v170 = v179;
                  v170[1] = v180;
                }
                while (v166 <= v168);
                a2 -= 3;
                if ((long long *)v169 == a2)
                {
                  *(_OWORD *)(v169 + 27) = *(_OWORD *)&v229[11];
                  *(_OWORD *)unint64_t v169 = v221;
                  *(_OWORD *)(v169 + 16) = *(_OWORD *)v229;
                }
                else
                {
                  long long v181 = *a2;
                  long long v182 = a2[1];
                  *(_OWORD *)(v169 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v169 = v181;
                  *(_OWORD *)(v169 + 16) = v182;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v229[11];
                  *a2 = v221;
                  a2[1] = *(_OWORD *)v229;
                  uint64_t v183 = v169 - v13 + 48;
                  if (v183 >= 49)
                  {
                    unint64_t v184 = (v183 / 0x30uLL - 2) >> 1;
                    unint64_t v185 = v13 + 48 * v184;
                    uint64_t v186 = *(void *)(v185 + 24);
                    uint64_t v187 = *(void *)(v169 + 24);
                    if (v186 != v187)
                    {
                      v189 = *(char **)(*(void *)a3 + 368);
                      v188 = *(char **)(*(void *)a3 + 376);
                      v190 = v189;
                      v191 = v189;
                      if (v189 != v188)
                      {
                        do
                        {
                          if (*(void *)v191 == v186) {
                            goto LABEL_286;
                          }
                          v191 += 8;
                        }
                        while (v191 != v188);
                        v191 = *(char **)(*(void *)a3 + 376);
LABEL_286:
                        while (*(void *)v190 != v187)
                        {
                          v190 += 8;
                          if (v190 == v188)
                          {
                            v190 = *(char **)(*(void *)a3 + 376);
                            break;
                          }
                        }
                      }
                      if (v191 - v189 < v190 - v189)
                      {
                        uint64_t v242 = *(void *)(v169 + 16);
                        long long v238 = *(_OWORD *)v169;
                        long long v233 = *(_OWORD *)(v169 + 32);
                        do
                        {
                          v192 = (_OWORD *)v169;
                          unint64_t v169 = v185;
                          long long v193 = *(_OWORD *)v185;
                          long long v194 = *(_OWORD *)(v185 + 16);
                          *(_OWORD *)((char *)v192 + 27) = *(_OWORD *)(v185 + 27);
                          _OWORD *v192 = v193;
                          v192[1] = v194;
                          if (!v184) {
                            break;
                          }
                          unint64_t v184 = (v184 - 1) >> 1;
                          unint64_t v185 = v13 + 48 * v184;
                          uint64_t v195 = *(void *)(v185 + 24);
                          if (v195 == v187) {
                            break;
                          }
                          v197 = *(char **)(*(void *)a3 + 368);
                          v196 = *(char **)(*(void *)a3 + 376);
                          v198 = v197;
                          v199 = v197;
                          if (v197 != v196)
                          {
                            do
                            {
                              if (*(void *)v199 == v195) {
                                goto LABEL_297;
                              }
                              v199 += 8;
                            }
                            while (v199 != v196);
                            v199 = *(char **)(*(void *)a3 + 376);
LABEL_297:
                            while (*(void *)v198 != v187)
                            {
                              v198 += 8;
                              if (v198 == v196)
                              {
                                v198 = *(char **)(*(void *)a3 + 376);
                                break;
                              }
                            }
                          }
                        }
                        while (v199 - v197 < v198 - v197);
                        *(_OWORD *)unint64_t v169 = v238;
                        *(void *)(v169 + 16) = v242;
                        *(void *)(v169 + 24) = v187;
                        *(void *)(v169 + 32) = v233;
                        *(_DWORD *)(v169 + 39) = *(_DWORD *)((char *)&v233 + 7);
                      }
                    }
                  }
                }
              }
              while (v165-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          double v17 = (long long *)(v13 + 48 * (v15 >> 1));
          if ((unint64_t)v14 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v15 >> 1)), a2 - 3, a3);
            uint64_t v18 = 3 * v16;
            double v19 = (long long *)(a1 + 48 * v16 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>((long long *)(a1 + 48), v19, a2 - 6, a3);
            uint64_t v20 = (long long *)(a1 + 48 + 16 * v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>((long long *)(a1 + 96), v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>(v19, v17, v20, a3);
            *(_OWORD *)v223 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v223[16] = *(_OWORD *)(a1 + 32);
            long long v216 = *(_OWORD *)a1;
            long long v21 = *(long long *)((char *)v17 + 27);
            long long v22 = v17[1];
            *(_OWORD *)a1 = *v17;
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(a1 + 27) = v21;
            *(long long *)((char *)v17 + 27) = *(_OWORD *)&v223[11];
            *double v17 = v216;
            v17[1] = *(_OWORD *)v223;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>((long long *)(a1 + 48 * (v15 >> 1)), (long long *)a1, a2 - 3, a3);
          }
          --a4;
          if (a5)
          {
            uint64_t v23 = *(void *)(a1 + 24);
            uint64_t v24 = *(void *)a3;
            break;
          }
          uint64_t v25 = *(void *)(a1 - 24);
          uint64_t v23 = *(void *)(a1 + 24);
          if (v25 != v23)
          {
            uint64_t v24 = *(void *)a3;
            double v26 = *(char **)(*(void *)a3 + 368);
            double v27 = *(char **)(*(void *)a3 + 376);
            double v28 = v26;
            v29 = v26;
            if (v26 != v27)
            {
              do
              {
                if (*(void *)v29 == v25) {
                  goto LABEL_16;
                }
                v29 += 8;
              }
              while (v29 != v27);
              v29 = *(char **)(*(void *)a3 + 376);
LABEL_16:
              while (*(void *)v28 != v23)
              {
                v28 += 8;
                if (v28 == v27)
                {
                  double v28 = *(char **)(*(void *)a3 + 376);
                  break;
                }
              }
            }
            if (v29 - v26 < v28 - v26) {
              break;
            }
          }
          uint64_t v241 = *(void *)(a1 + 16);
          long long v232 = *(_OWORD *)(a1 + 32);
          long long v235 = *(_OWORD *)a1;
          uint64_t v67 = *((void *)a2 - 3);
          if (v23 == v67) {
            goto LABEL_107;
          }
          v68 = *(char **)(*(void *)a3 + 368);
          long long v69 = *(char **)(*(void *)a3 + 376);
          if (v68 == v69)
          {
            v71 = *(char **)(*(void *)a3 + 368);
            long long v70 = v71;
          }
          else
          {
            long long v70 = *(char **)(*(void *)a3 + 368);
            while (*(void *)v70 != v23)
            {
              v70 += 8;
              if (v70 == v69)
              {
                long long v70 = *(char **)(*(void *)a3 + 376);
                break;
              }
            }
            v71 = *(char **)(*(void *)a3 + 368);
            while (*(void *)v71 != v67)
            {
              v71 += 8;
              if (v71 == v69)
              {
                v71 = *(char **)(*(void *)a3 + 376);
                break;
              }
            }
          }
          if (v70 - v68 >= v71 - v68)
          {
LABEL_107:
            unint64_t v13 = a1 + 48;
            if (a1 + 48 < (unint64_t)a2)
            {
              uint64_t v75 = *(void *)a3;
              unint64_t v76 = a1;
              do
              {
                uint64_t v77 = *(void *)(v76 + 72);
                unint64_t v76 = v13;
                if (v23 != v77)
                {
                  unint64_t v78 = *(char **)(v75 + 368);
                  v79 = *(char **)(v75 + 376);
                  BOOL v80 = v78;
                  unint64_t v81 = v78;
                  if (v78 != v79)
                  {
                    do
                    {
                      if (*(void *)v81 == v23) {
                        goto LABEL_114;
                      }
                      v81 += 8;
                    }
                    while (v81 != v79);
                    unint64_t v81 = *(char **)(v75 + 376);
LABEL_114:
                    while (*(void *)v80 != v77)
                    {
                      v80 += 8;
                      if (v80 == v79)
                      {
                        BOOL v80 = *(char **)(v75 + 376);
                        break;
                      }
                    }
                  }
                  if (v81 - v78 < v80 - v78) {
                    break;
                  }
                }
                v13 += 48;
              }
              while (v76 + 48 < (unint64_t)a2);
            }
          }
          else
          {
            unint64_t v13 = a1;
            do
            {
              do
              {
                uint64_t v72 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v72);
              if (v68 == v69)
              {
                long long v74 = *(char **)(*(void *)a3 + 368);
                v73 = v74;
              }
              else
              {
                v73 = *(char **)(*(void *)a3 + 368);
                while (*(void *)v73 != v23)
                {
                  v73 += 8;
                  if (v73 == v69)
                  {
                    v73 = *(char **)(*(void *)a3 + 376);
                    break;
                  }
                }
                long long v74 = *(char **)(*(void *)a3 + 368);
                while (*(void *)v74 != v72)
                {
                  v74 += 8;
                  if (v74 == v69)
                  {
                    long long v74 = *(char **)(*(void *)a3 + 376);
                    break;
                  }
                }
              }
            }
            while (v73 - v68 >= v74 - v68);
          }
          v82 = a2;
          if (v13 < (unint64_t)a2)
          {
            uint64_t v83 = *(void *)a3;
            v82 = a2;
            do
            {
              uint64_t v84 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v84) {
                break;
              }
              unint64_t v85 = *(char **)(v83 + 368);
              unint64_t v86 = *(char **)(v83 + 376);
              uint64_t v87 = v85;
              unint64_t v88 = v85;
              if (v85 != v86)
              {
                do
                {
                  if (*(void *)v88 == v23) {
                    goto LABEL_126;
                  }
                  v88 += 8;
                }
                while (v88 != v86);
                unint64_t v88 = *(char **)(v83 + 376);
LABEL_126:
                while (*(void *)v87 != v84)
                {
                  v87 += 8;
                  if (v87 == v86)
                  {
                    uint64_t v87 = *(char **)(v83 + 376);
                    break;
                  }
                }
              }
            }
            while (v88 - v85 < v87 - v85);
          }
          while (v13 < (unint64_t)v82)
          {
            *(_OWORD *)v225 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v225[16] = *(_OWORD *)(v13 + 32);
            long long v217 = *(_OWORD *)v13;
            long long v89 = *v82;
            long long v90 = v82[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v82 + 27);
            *(_OWORD *)unint64_t v13 = v89;
            *(_OWORD *)(v13 + 16) = v90;
            *(long long *)((char *)v82 + 27) = *(_OWORD *)&v225[11];
            long long *v82 = v217;
            v82[1] = *(_OWORD *)v225;
            uint64_t v91 = *(void *)a3;
            do
            {
              do
              {
                uint64_t v92 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v92);
              v93 = *(char **)(v91 + 368);
              v94 = *(char **)(v91 + 376);
              if (v93 == v94)
              {
                int v96 = *(char **)(v91 + 368);
                BOOL v95 = v96;
              }
              else
              {
                BOOL v95 = *(char **)(v91 + 368);
                while (*(void *)v95 != v23)
                {
                  v95 += 8;
                  if (v95 == v94)
                  {
                    BOOL v95 = *(char **)(v91 + 376);
                    break;
                  }
                }
                int v96 = *(char **)(v91 + 368);
                while (*(void *)v96 != v92)
                {
                  v96 += 8;
                  if (v96 == v94)
                  {
                    int v96 = *(char **)(v91 + 376);
                    break;
                  }
                }
              }
            }
            while (v95 - v93 >= v96 - v93);
            do
            {
              uint64_t v97 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v97) {
                break;
              }
              if (v93 == v94)
              {
                int v99 = v93;
                v98 = v93;
              }
              else
              {
                v98 = v93;
                while (*(void *)v98 != v23)
                {
                  v98 += 8;
                  if (v98 == v94)
                  {
                    v98 = v94;
                    break;
                  }
                }
                int v99 = v93;
                while (*(void *)v99 != v97)
                {
                  v99 += 8;
                  if (v99 == v94)
                  {
                    int v99 = v94;
                    break;
                  }
                }
              }
            }
            while (v98 - v93 < v99 - v93);
          }
          uint64_t v100 = (long long *)(v13 - 48);
          BOOL v5 = v13 - 48 >= a1;
          BOOL v6 = v13 - 48 == a1;
          if (v13 - 48 != a1)
          {
            long long v101 = *v100;
            long long v102 = *(_OWORD *)(v13 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
            *(_OWORD *)a1 = v101;
            *(_OWORD *)(a1 + 16) = v102;
          }
          a5 = 0;
          *uint64_t v100 = v235;
          *(void *)(v13 - 32) = v241;
          *(void *)(v13 - 24) = v23;
          *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v232 + 7);
          *(void *)(v13 - 16) = v232;
        }
        uint64_t v240 = *(void *)(a1 + 16);
        long long v231 = *(_OWORD *)(a1 + 32);
        long long v234 = *(_OWORD *)a1;
        unint64_t v30 = a1;
        do
        {
          unint64_t v31 = v30;
          v30 += 48;
          uint64_t v32 = *(void *)(v31 + 72);
          if (v32 == v23) {
            break;
          }
          v33 = *(char **)(v24 + 368);
          long long v34 = *(char **)(v24 + 376);
          long long v35 = v33;
          v36 = v33;
          if (v33 != v34)
          {
            do
            {
              if (*(void *)v36 == v32) {
                goto LABEL_26;
              }
              v36 += 8;
            }
            while (v36 != v34);
            v36 = *(char **)(v24 + 376);
LABEL_26:
            while (*(void *)v35 != v23)
            {
              v35 += 8;
              if (v35 == v34)
              {
                long long v35 = *(char **)(v24 + 376);
                break;
              }
            }
          }
        }
        while (v36 - v33 < v35 - v33);
        unint64_t v37 = a2;
        if (v31 == a1)
        {
          unint64_t v37 = a2;
          if (v30 < (unint64_t)a2)
          {
            unint64_t v37 = a2;
            do
            {
              uint64_t v43 = *((void *)v37 - 3);
              v37 -= 3;
              if (v43 != v23)
              {
                v44 = *(char **)(v24 + 368);
                long long v45 = *(char **)(v24 + 376);
                uint64_t v46 = v44;
                uint64_t v47 = v44;
                if (v44 != v45)
                {
                  do
                  {
                    if (*(void *)v47 == v43) {
                      goto LABEL_48;
                    }
                    v47 += 8;
                  }
                  while (v47 != v45);
                  uint64_t v47 = *(char **)(v24 + 376);
LABEL_48:
                  while (*(void *)v46 != v23)
                  {
                    v46 += 8;
                    if (v46 == v45)
                    {
                      uint64_t v46 = *(char **)(v24 + 376);
                      break;
                    }
                  }
                }
                if (v47 - v44 < v46 - v44) {
                  break;
                }
              }
            }
            while (v30 < (unint64_t)v37);
          }
        }
        else
        {
          do
          {
            do
            {
              uint64_t v38 = *((void *)v37 - 3);
              v37 -= 3;
            }
            while (v38 == v23);
            uint64_t v39 = *(char **)(v24 + 368);
            uint64_t v40 = *(char **)(v24 + 376);
            char v41 = v39;
            unint64_t v42 = v39;
            if (v39 != v40)
            {
              do
              {
                if (*(void *)v42 == v38) {
                  goto LABEL_36;
                }
                v42 += 8;
              }
              while (v42 != v40);
              unint64_t v42 = *(char **)(v24 + 376);
LABEL_36:
              while (*(void *)v41 != v23)
              {
                v41 += 8;
                if (v41 == v40)
                {
                  char v41 = *(char **)(v24 + 376);
                  break;
                }
              }
            }
          }
          while (v42 - v39 >= v41 - v39);
        }
        unint64_t v13 = v30;
        if (v30 < (unint64_t)v37)
        {
          uint64_t v48 = v37;
          do
          {
            *(_OWORD *)v224 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v224[16] = *(_OWORD *)(v13 + 32);
            long long v49 = *(_OWORD *)v13;
            long long v51 = *v48;
            long long v50 = v48[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v48 + 27);
            *(_OWORD *)unint64_t v13 = v51;
            *(_OWORD *)(v13 + 16) = v50;
            *(long long *)((char *)v48 + 27) = *(_OWORD *)&v224[11];
            *uint64_t v48 = v49;
            v48[1] = *(_OWORD *)v224;
            uint64_t v52 = *(void *)a3;
            do
            {
              uint64_t v53 = *(void *)(v13 + 72);
              v13 += 48;
              if (v53 == v23) {
                break;
              }
              unint64_t v54 = *(char **)(v52 + 368);
              v55 = *(char **)(v52 + 376);
              unint64_t v56 = v54;
              long long v57 = v54;
              if (v54 != v55)
              {
                do
                {
                  if (*(void *)v57 == v53) {
                    goto LABEL_61;
                  }
                  v57 += 8;
                }
                while (v57 != v55);
                long long v57 = *(char **)(v52 + 376);
LABEL_61:
                while (*(void *)v56 != v23)
                {
                  v56 += 8;
                  if (v56 == v55)
                  {
                    unint64_t v56 = *(char **)(v52 + 376);
                    break;
                  }
                }
              }
            }
            while (v57 - v54 < v56 - v54);
            do
            {
              do
              {
                uint64_t v58 = *((void *)v48 - 3);
                v48 -= 3;
              }
              while (v58 == v23);
              v59 = *(char **)(v52 + 368);
              unint64_t v60 = *(char **)(v52 + 376);
              unint64_t v61 = v59;
              unint64_t v62 = v59;
              if (v59 != v60)
              {
                do
                {
                  if (*(void *)v62 == v58) {
                    goto LABEL_70;
                  }
                  v62 += 8;
                }
                while (v62 != v60);
                unint64_t v62 = *(char **)(v52 + 376);
LABEL_70:
                while (*(void *)v61 != v23)
                {
                  v61 += 8;
                  if (v61 == v60)
                  {
                    unint64_t v61 = *(char **)(v52 + 376);
                    break;
                  }
                }
              }
            }
            while (v62 - v59 >= v61 - v59);
          }
          while (v13 < (unint64_t)v48);
        }
        unint64_t v63 = (long long *)(v13 - 48);
        if (v13 - 48 != a1)
        {
          long long v64 = *v63;
          long long v65 = *(_OWORD *)(v13 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
          *(_OWORD *)a1 = v64;
          *(_OWORD *)(a1 + 16) = v65;
        }
        *unint64_t v63 = v234;
        *(void *)(v13 - 32) = v240;
        *(void *)(v13 - 24) = v23;
        *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v231 + 7);
        *(void *)(v13 - 16) = v231;
        if (v30 >= (unint64_t)v37) {
          break;
        }
LABEL_80:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*,false>(a1, v13 - 48, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>(a1, v13 - 48, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>(v13, (uint64_t)a2, a3))
      {
        break;
      }
      if (!v66) {
        goto LABEL_80;
      }
    }
    a2 = (long long *)(v13 - 48);
    if (!v66) {
      continue;
    }
    break;
  }
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>(long long *a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = *((void *)a2 + 3);
  uint64_t v5 = *((void *)a1 + 3);
  if (v4 == v5) {
    goto LABEL_23;
  }
  BOOL v6 = *(char **)(*(void *)a4 + 368);
  uint64_t v7 = *(char **)(*(void *)a4 + 376);
  if (v6 == v7)
  {
    id v9 = *(char **)(*(void *)a4 + 368);
    uint64_t v8 = v9;
  }
  else
  {
    uint64_t v8 = *(char **)(*(void *)a4 + 368);
    while (*(void *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        uint64_t v8 = *(char **)(*(void *)a4 + 376);
        break;
      }
    }
    id v9 = *(char **)(*(void *)a4 + 368);
    while (*(void *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        id v9 = *(char **)(*(void *)a4 + 376);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    uint64_t v13 = *((void *)a3 + 3);
    if (v13 != v4)
    {
      uint64_t v14 = *(char **)(*(void *)a4 + 368);
      unint64_t v15 = *(char **)(*(void *)a4 + 376);
      unint64_t v16 = v14;
      double v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(void *)v17 == v13) {
            goto LABEL_28;
          }
          v17 += 8;
        }
        while (v17 != v15);
        double v17 = *(char **)(*(void *)a4 + 376);
LABEL_28:
        while (*(void *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            unint64_t v16 = *(char **)(*(void *)a4 + 376);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        long long v18 = *a2;
        *(_OWORD *)uint64_t v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        long long v19 = *(long long *)((char *)a3 + 27);
        long long v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(long long *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        __n128 result = *(__n128 *)&v46[11];
        *(long long *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        uint64_t v22 = *((void *)a2 + 3);
        uint64_t v23 = *((void *)a1 + 3);
        if (v22 != v23)
        {
          uint64_t v24 = *(char **)(*(void *)a4 + 368);
          uint64_t v25 = *(char **)(*(void *)a4 + 376);
          double v26 = v24;
          double v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(void *)v27 == v22) {
                goto LABEL_37;
              }
              v27 += 8;
            }
            while (v27 != v25);
            double v27 = *(char **)(*(void *)a4 + 376);
LABEL_37:
            while (*(void *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                double v26 = *(char **)(*(void *)a4 + 376);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            long long v28 = *a1;
            *(_OWORD *)uint64_t v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            long long v29 = *(long long *)((char *)a2 + 27);
            long long v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(long long *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            __n128 result = *(__n128 *)&v47[11];
            *(long long *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    uint64_t v10 = *((void *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        unint64_t v12 = *(char **)(*(void *)a4 + 368);
        uint64_t v11 = v12;
      }
      else
      {
        uint64_t v11 = *(char **)(*(void *)a4 + 368);
        while (*(void *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            uint64_t v11 = *(char **)(*(void *)a4 + 376);
            break;
          }
        }
        unint64_t v12 = *(char **)(*(void *)a4 + 368);
        while (*(void *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            unint64_t v12 = *(char **)(*(void *)a4 + 376);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        long long v31 = a1[1];
        long long v32 = *a1;
        *(void *)long long v49 = *((void *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        long long v33 = *(long long *)((char *)a3 + 27);
        long long v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(long long *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        __n128 result = *(__n128 *)&v49[3];
        *(long long *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    long long v35 = *a1;
    *(_OWORD *)uint64_t v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    long long v36 = *(long long *)((char *)a2 + 27);
    long long v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(long long *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    __n128 result = *(__n128 *)&v48[11];
    *(long long *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    uint64_t v38 = *((void *)a3 + 3);
    uint64_t v39 = *((void *)a2 + 3);
    if (v38 != v39)
    {
      uint64_t v40 = *(char **)(*(void *)a4 + 368);
      char v41 = *(char **)(*(void *)a4 + 376);
      unint64_t v42 = v40;
      uint64_t v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(void *)v43 == v38) {
            goto LABEL_50;
          }
          v43 += 8;
        }
        while (v43 != v41);
        uint64_t v43 = *(char **)(*(void *)a4 + 376);
LABEL_50:
        while (*(void *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            unint64_t v42 = *(char **)(*(void *)a4 + 376);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        long long v31 = a2[1];
        long long v32 = *a2;
        *(void *)long long v49 = *((void *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        long long v44 = *(long long *)((char *)a3 + 27);
        long long v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(long long *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 - 24);
      uint64_t v9 = *(void *)(a1 + 24);
      if (v8 == v9) {
        return result;
      }
      uint64_t v10 = *(char **)(*(void *)a3 + 368);
      uint64_t v11 = *(char **)(*(void *)a3 + 376);
      unint64_t v12 = v10;
      uint64_t v13 = v10;
      if (v10 == v11) {
        goto LABEL_10;
      }
      do
      {
        if (*(void *)v13 == v8) {
          goto LABEL_7;
        }
        v13 += 8;
      }
      while (v13 != v11);
      uint64_t v13 = *(char **)(*(void *)a3 + 376);
      do
      {
LABEL_7:
        if (*(void *)v12 == v9) {
          goto LABEL_10;
        }
        v12 += 8;
      }
      while (v12 != v11);
      unint64_t v12 = *(char **)(*(void *)a3 + 376);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        uint64_t v14 = (long long *)(a2 - 48);
        long long v15 = *(_OWORD *)a1;
        *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        long long v16 = *(_OWORD *)(a2 - 21);
        long long v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *uint64_t v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(long long *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), a3);
      uint64_t v19 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      int v20 = 0;
      break;
  }
  while (1)
  {
    uint64_t v21 = *(void *)(v19 + 24);
    uint64_t v22 = *(void *)(v18 + 24);
    if (v21 != v22)
    {
      uint64_t v23 = *(char **)(*(void *)a3 + 368);
      uint64_t v24 = *(char **)(*(void *)a3 + 376);
      uint64_t v25 = v23;
      double v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(void *)v26 == v21) {
            goto LABEL_19;
          }
          v26 += 8;
        }
        while (v26 != v24);
        double v26 = *(char **)(*(void *)a3 + 376);
LABEL_19:
        while (*(void *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            uint64_t v25 = *(char **)(*(void *)a3 + 376);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        long long v34 = *(_OWORD *)v19;
        uint64_t v36 = *(void *)(v19 + 16);
        long long v37 = *(_OWORD *)(v19 + 32);
        uint64_t v27 = v19;
        while (1)
        {
          long long v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1) {
            break;
          }
          uint64_t v27 = v18;
          uint64_t v29 = *(void *)(v18 - 24);
          if (v21 != v29)
          {
            long long v30 = *(char **)(*(void *)a3 + 368);
            long long v31 = *(char **)(*(void *)a3 + 376);
            long long v32 = v30;
            long long v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(void *)v33 == v21) {
                  goto LABEL_30;
                }
                v33 += 8;
              }
              while (v33 != v31);
              long long v33 = *(char **)(*(void *)a3 + 376);
LABEL_30:
              while (*(void *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  long long v32 = *(char **)(*(void *)a3 + 376);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30) {
              continue;
            }
          }
          goto LABEL_36;
        }
        uint64_t v27 = a1;
LABEL_36:
        *(_OWORD *)uint64_t v27 = v34;
        *(void *)(v27 + 16) = v36;
        *(void *)(v27 + 24) = v21;
        *(void *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8) {
          return v19 + 48 == a2;
        }
      }
    }
    uint64_t v18 = v19;
    v19 += 48;
    if (v19 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>((long long *)a1, (long long *)a2, (long long *)a3, a5).n128_u64[0];
  uint64_t v11 = *(void *)(a4 + 24);
  uint64_t v12 = *(void *)(a3 + 24);
  if (v11 != v12)
  {
    uint64_t v13 = *(char **)(*(void *)a5 + 368);
    uint64_t v14 = *(char **)(*(void *)a5 + 376);
    long long v15 = v13;
    long long v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(void *)v16 == v11) {
          goto LABEL_6;
        }
        v16 += 8;
      }
      while (v16 != v14);
      long long v16 = *(char **)(*(void *)a5 + 376);
LABEL_6:
      while (*(void *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          long long v15 = *(char **)(*(void *)a5 + 376);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      long long v17 = *(_OWORD *)a3;
      *(_OWORD *)uint64_t v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      long long v18 = *(_OWORD *)(a4 + 27);
      long long v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v38;
      __n128 result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      uint64_t v20 = *(void *)(a3 + 24);
      uint64_t v21 = *(void *)(a2 + 24);
      if (v20 != v21)
      {
        uint64_t v22 = *(char **)(*(void *)a5 + 368);
        uint64_t v23 = *(char **)(*(void *)a5 + 376);
        uint64_t v24 = v22;
        uint64_t v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(void *)v25 == v20) {
              goto LABEL_15;
            }
            v25 += 8;
          }
          while (v25 != v23);
          uint64_t v25 = *(char **)(*(void *)a5 + 376);
LABEL_15:
          while (*(void *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              uint64_t v24 = *(char **)(*(void *)a5 + 376);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          long long v26 = *(_OWORD *)a2;
          *(_OWORD *)uint64_t v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          long long v27 = *(_OWORD *)(a3 + 27);
          long long v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 16) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)v39;
          __n128 result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          uint64_t v29 = *(void *)(a2 + 24);
          uint64_t v30 = *(void *)(a1 + 24);
          if (v29 != v30)
          {
            long long v31 = *(char **)(*(void *)a5 + 368);
            long long v32 = *(char **)(*(void *)a5 + 376);
            long long v33 = v31;
            long long v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(void *)v34 == v29) {
                  goto LABEL_24;
                }
                v34 += 8;
              }
              while (v34 != v32);
              long long v34 = *(char **)(*(void *)a5 + 376);
LABEL_24:
              while (*(void *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  long long v33 = *(char **)(*(void *)a5 + 376);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              long long v35 = *(_OWORD *)a1;
              *(_OWORD *)uint64_t v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              long long v36 = *(_OWORD *)(a2 + 27);
              long long v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 16) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 16) = *(_OWORD *)v40;
              __n128 result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  uint64_t v13 = *(void *)(a5 + 24);
  uint64_t v14 = *(void *)(a4 + 24);
  if (v13 != v14)
  {
    long long v15 = *(char **)(*(void *)a6 + 368);
    long long v16 = *(char **)(*(void *)a6 + 376);
    long long v17 = v15;
    long long v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(void *)v18 == v13) {
          goto LABEL_6;
        }
        v18 += 8;
      }
      while (v18 != v16);
      long long v18 = *(char **)(*(void *)a6 + 376);
LABEL_6:
      while (*(void *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          long long v17 = *(char **)(*(void *)a6 + 376);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      long long v19 = *(_OWORD *)a4;
      *(_OWORD *)long long v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      long long v20 = *(_OWORD *)(a5 + 27);
      long long v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 16) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v49;
      __n128 result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      uint64_t v22 = *(void *)(a4 + 24);
      uint64_t v23 = *(void *)(a3 + 24);
      if (v22 != v23)
      {
        uint64_t v24 = *(char **)(*(void *)a6 + 368);
        uint64_t v25 = *(char **)(*(void *)a6 + 376);
        long long v26 = v24;
        long long v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(void *)v27 == v22) {
              goto LABEL_15;
            }
            v27 += 8;
          }
          while (v27 != v25);
          long long v27 = *(char **)(*(void *)a6 + 376);
LABEL_15:
          while (*(void *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              long long v26 = *(char **)(*(void *)a6 + 376);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          long long v28 = *(_OWORD *)a3;
          *(_OWORD *)long long v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          long long v29 = *(_OWORD *)(a4 + 27);
          long long v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 16) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 16) = *(_OWORD *)v50;
          __n128 result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          uint64_t v31 = *(void *)(a3 + 24);
          uint64_t v32 = *(void *)(a2 + 24);
          if (v31 != v32)
          {
            long long v33 = *(char **)(*(void *)a6 + 368);
            long long v34 = *(char **)(*(void *)a6 + 376);
            long long v35 = v33;
            long long v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(void *)v36 == v31) {
                  goto LABEL_24;
                }
                v36 += 8;
              }
              while (v36 != v34);
              long long v36 = *(char **)(*(void *)a6 + 376);
LABEL_24:
              while (*(void *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  long long v35 = *(char **)(*(void *)a6 + 376);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              long long v37 = *(_OWORD *)a2;
              *(_OWORD *)long long v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              long long v38 = *(_OWORD *)(a3 + 27);
              long long v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 16) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 16) = *(_OWORD *)v51;
              __n128 result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              uint64_t v40 = *(void *)(a2 + 24);
              uint64_t v41 = *(void *)(a1 + 24);
              if (v40 != v41)
              {
                unint64_t v42 = *(char **)(*(void *)a6 + 368);
                uint64_t v43 = *(char **)(*(void *)a6 + 376);
                long long v44 = v42;
                long long v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(void *)v45 == v40) {
                      goto LABEL_33;
                    }
                    v45 += 8;
                  }
                  while (v45 != v43);
                  long long v45 = *(char **)(*(void *)a6 + 376);
LABEL_33:
                  while (*(void *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      long long v44 = *(char **)(*(void *)a6 + 376);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  long long v46 = *(_OWORD *)a1;
                  *(_OWORD *)uint64_t v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  long long v47 = *(_OWORD *)(a2 + 27);
                  long long v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 16) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 16) = *(_OWORD *)v52;
                  __n128 result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v10) >> 4);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*((double *)a2 - 5) < *(double *)(v10 + 8))
                {
                  *(_OWORD *)char v118 = *(_OWORD *)(v10 + 16);
                  *(_OWORD *)&v118[16] = *(_OWORD *)(v10 + 32);
                  long long v110 = *(_OWORD *)v10;
                  long long v52 = *(a2 - 3);
                  long long v53 = *(a2 - 2);
                  *(_OWORD *)(v10 + 27) = *(long long *)((char *)a2 - 21);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(long long *)((char *)a2 - 21) = *(_OWORD *)&v118[11];
                  *(a2 - 3) = v110;
                  *(a2 - 2) = *(_OWORD *)v118;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)v10, (long long *)(v10 + 48), a2 - 3);
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v10, v10 + 48, v10 + 96, (uint64_t)(a2 - 3));
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v10, v10 + 48, v10 + 96, v10 + 144, (uint64_t)(a2 - 3));
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 1151)
          {
            unint64_t v54 = (long long *)(v10 + 48);
            BOOL v56 = (long long *)v10 == a2 || v54 == a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  v59 = v54;
                  double v60 = *(double *)(v58 + 56);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *(void *)v54;
                    *(_OWORD *)v111 = *(_OWORD *)(v58 + 64);
                    *(_OWORD *)&v111[16] = *(_OWORD *)(v58 + 80);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      unint64_t v63 = (_OWORD *)(v10 + v62);
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      v63[3] = *(_OWORD *)(v10 + v62);
                      v63[4] = v64;
                      *(_OWORD *)((char *)v63 + 75) = *(_OWORD *)(v10 + v62 + 27);
                      if (!v62) {
                        break;
                      }
                      v62 -= 48;
                      if (v60 >= *((double *)v63 - 5))
                      {
                        uint64_t v65 = v10 + v62 + 48;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = *(_OWORD *)v111;
                    *(_OWORD *)(v65 + 27) = *(_OWORD *)&v111[11];
                  }
                  unint64_t v54 = v59 + 3;
                  v57 += 48;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 3 != a2);
              }
            }
            else if (!v56)
            {
              do
              {
                v98 = v54;
                double v99 = *(double *)(a1 + 56);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *(void *)v54;
                  *(_OWORD *)unint64_t v114 = *(_OWORD *)(a1 + 64);
                  *(_OWORD *)&v114[16] = *(_OWORD *)(a1 + 80);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(v101 - 2);
                    *long long v101 = *(v101 - 3);
                    v101[1] = v102;
                    *(long long *)((char *)v101 + 27) = *(long long *)((char *)v101 - 21);
                    double v103 = *((double *)v101 - 11);
                    v101 -= 3;
                  }
                  while (v99 < v103);
                  *(void *)long long v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *(long long *)((char *)v101 + 27) = *(_OWORD *)&v114[11];
                  v101[1] = *(_OWORD *)v114;
                }
                v54 += 3;
                a1 = (unint64_t)v98;
              }
              while (v98 + 3 != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((long long *)v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 48 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v70 + 8) < *(double *)(v70 + 56))
                  {
                    v70 += 48;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  unint64_t v71 = v10 + 48 * v68;
                  double v72 = *(double *)(v71 + 8);
                  if (*(double *)(v70 + 8) >= v72)
                  {
                    uint64_t v73 = *(void *)v71;
                    *(_OWORD *)v112 = *(_OWORD *)(v71 + 16);
                    *(_OWORD *)&v112[16] = *(_OWORD *)(v71 + 32);
                    do
                    {
                      long long v74 = (_OWORD *)v71;
                      unint64_t v71 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_OWORD *)((char *)v74 + 27) = *(_OWORD *)(v70 + 27);
                      *long long v74 = v75;
                      v74[1] = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = 2 * v69;
                      uint64_t v69 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 48 * v69;
                      uint64_t v78 = v77 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v70 + 8) < *(double *)(v70 + 56))
                      {
                        v70 += 48;
                        uint64_t v69 = v78;
                      }
                    }
                    while (*(double *)(v70 + 8) >= v72);
                    *(void *)unint64_t v71 = v73;
                    *(double *)(v71 + 8) = v72;
                    *(_OWORD *)(v71 + 16) = *(_OWORD *)v112;
                    *(_OWORD *)(v71 + 27) = *(_OWORD *)&v112[11];
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x30uLL;
              do
              {
                uint64_t v80 = 0;
                *(_OWORD *)char v119 = *(_OWORD *)(v10 + 16);
                *(_OWORD *)&v119[16] = *(_OWORD *)(v10 + 32);
                long long v113 = *(_OWORD *)v10;
                unint64_t v81 = v10;
                do
                {
                  v82 = (_OWORD *)v81;
                  v81 += 48 * v80 + 48;
                  uint64_t v83 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v84 = v83 + 2;
                  if (v84 < v79 && *(double *)(v81 + 8) < *(double *)(v81 + 56))
                  {
                    v81 += 48;
                    uint64_t v80 = v84;
                  }
                  long long v85 = *(_OWORD *)v81;
                  long long v86 = *(_OWORD *)(v81 + 16);
                  *(_OWORD *)((char *)v82 + 27) = *(_OWORD *)(v81 + 27);
                  _OWORD *v82 = v85;
                  v82[1] = v86;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 3;
                if ((long long *)v81 == a2)
                {
                  *(_OWORD *)(v81 + 27) = *(_OWORD *)&v119[11];
                  *(_OWORD *)unint64_t v81 = v113;
                  *(_OWORD *)(v81 + 16) = *(_OWORD *)v119;
                }
                else
                {
                  long long v87 = *a2;
                  long long v88 = a2[1];
                  *(_OWORD *)(v81 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v81 = v87;
                  *(_OWORD *)(v81 + 16) = v88;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v119[11];
                  *a2 = v113;
                  a2[1] = *(_OWORD *)v119;
                  uint64_t v89 = v81 - v10 + 48;
                  if (v89 >= 49)
                  {
                    unint64_t v90 = (v89 / 0x30uLL - 2) >> 1;
                    unint64_t v91 = v10 + 48 * v90;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      *(_OWORD *)long long v106 = *(_OWORD *)(v81 + 16);
                      *(_OWORD *)&v106[16] = *(_OWORD *)(v81 + 32);
                      do
                      {
                        v94 = (_OWORD *)v81;
                        unint64_t v81 = v91;
                        long long v95 = *(_OWORD *)v91;
                        long long v96 = *(_OWORD *)(v91 + 16);
                        *(_OWORD *)((char *)v94 + 27) = *(_OWORD *)(v91 + 27);
                        _OWORD *v94 = v95;
                        v94[1] = v96;
                        if (!v90) {
                          break;
                        }
                        unint64_t v90 = (v90 - 1) >> 1;
                        unint64_t v91 = v10 + 48 * v90;
                      }
                      while (*(double *)(v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_OWORD *)(v81 + 16) = *(_OWORD *)v106;
                      *(_OWORD *)(v81 + 27) = *(_OWORD *)&v106[11];
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (long long *)(v10 + 48 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v12 >> 1)), a2 - 3);
            uint64_t v15 = 3 * v13;
            long long v16 = (long long *)(a1 + 48 * v13 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48), v16, a2 - 6);
            long long v17 = (long long *)(a1 + 48 + 16 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 96), v17, a2 - 9);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v16, v14, v17);
            *(_OWORD *)unint64_t v115 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v115[16] = *(_OWORD *)(a1 + 32);
            long long v107 = *(_OWORD *)a1;
            long long v18 = *(long long *)((char *)v14 + 27);
            long long v19 = v14[1];
            *(_OWORD *)a1 = *v14;
            *(_OWORD *)(a1 + 16) = v19;
            *(_OWORD *)(a1 + 27) = v18;
            *(long long *)((char *)v14 + 27) = *(_OWORD *)&v115[11];
            *uint64_t v14 = v107;
            v14[1] = *(_OWORD *)v115;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48 * (v12 >> 1)), (long long *)a1, a2 - 3);
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 40) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          *(_OWORD *)v105 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)&v105[16] = *(_OWORD *)(a1 + 32);
          if (v20 >= *((double *)a2 - 5))
          {
            unint64_t v41 = a1 + 48;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= (unint64_t)a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 48;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 48;
              double v40 = *(double *)(v39 + 56);
              v39 += 48;
            }
            while (v20 >= v40);
          }
          uint64_t v43 = a2;
          if (v10 < (unint64_t)a2)
          {
            long long v44 = a2;
            do
            {
              uint64_t v43 = v44 - 3;
              double v45 = *((double *)v44 - 5);
              v44 -= 3;
            }
            while (v20 < v45);
          }
          while (v10 < (unint64_t)v43)
          {
            *(_OWORD *)uint64_t v117 = *(_OWORD *)(v10 + 16);
            *(_OWORD *)&v117[16] = *(_OWORD *)(v10 + 32);
            long long v109 = *(_OWORD *)v10;
            long long v46 = *v43;
            long long v47 = v43[1];
            *(_OWORD *)(v10 + 27) = *(long long *)((char *)v43 + 27);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(long long *)((char *)v43 + 27) = *(_OWORD *)&v117[11];
            *uint64_t v43 = v109;
            v43[1] = *(_OWORD *)v117;
            do
            {
              double v48 = *(double *)(v10 + 56);
              v10 += 48;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *((double *)v43 - 5);
              v43 -= 3;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 48 >= a1;
          BOOL v5 = v10 - 48 == a1;
          if (v10 - 48 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 48);
            long long v51 = *(_OWORD *)(v10 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v10 - 21);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 48) = v38;
          *(double *)(v10 - 40) = v20;
          *(_OWORD *)(v10 - 21) = *(_OWORD *)&v105[11];
          *(_OWORD *)(v10 - 32) = *(_OWORD *)v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        *(_OWORD *)uint64_t v104 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v104[16] = *(_OWORD *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 56);
          v21 += 48;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        uint64_t v25 = a2;
        if (v21 == 48)
        {
          long long v28 = a2;
          while (v24 < (unint64_t)v28)
          {
            long long v26 = v28 - 3;
            double v29 = *((double *)v28 - 5);
            v28 -= 3;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          long long v26 = v28;
        }
        else
        {
          do
          {
            long long v26 = v25 - 3;
            double v27 = *((double *)v25 - 5);
            v25 -= 3;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < (unint64_t)v26)
        {
          long long v30 = v26;
          do
          {
            *(_OWORD *)uint64_t v116 = *(_OWORD *)(v10 + 16);
            *(_OWORD *)&v116[16] = *(_OWORD *)(v10 + 32);
            long long v108 = *(_OWORD *)v10;
            long long v31 = *v30;
            long long v32 = v30[1];
            *(_OWORD *)(v10 + 27) = *(long long *)((char *)v30 + 27);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(long long *)((char *)v30 + 27) = *(_OWORD *)&v116[11];
            *long long v30 = v108;
            v30[1] = *(_OWORD *)v116;
            do
            {
              double v33 = *(double *)(v10 + 56);
              v10 += 48;
            }
            while (v33 < v20);
            do
            {
              double v34 = *((double *)v30 - 5);
              v30 -= 3;
            }
            while (v34 >= v20);
          }
          while (v10 < (unint64_t)v30);
        }
        if (v10 - 48 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 48);
          long long v36 = *(_OWORD *)(v10 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v10 - 21);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 48) = v22;
        *(double *)(v10 - 40) = v20;
        *(_OWORD *)(v10 - 21) = *(_OWORD *)&v104[11];
        *(_OWORD *)(v10 - 32) = *(_OWORD *)v104;
        if (v24 >= (unint64_t)v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*,false>(a1, v10 - 48, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>(a1, v10 - 48);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>(v10, (uint64_t)a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = (long long *)(v10 - 48);
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 40) < *(double *)(a1 + 8))
      {
        long long v6 = *(_OWORD *)a1;
        *(_OWORD *)double v20 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v20[16] = *(_OWORD *)(a1 + 32);
        long long v7 = *(_OWORD *)(a2 - 21);
        long long v8 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 27) = v7;
        *(_OWORD *)(a2 - 48) = v6;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v20;
        *(_OWORD *)(a2 - 21) = *(_OWORD *)&v20[11];
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48);
      return 1;
    default:
      uint64_t v9 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96));
      uint64_t v10 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    double v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      uint64_t v14 = *(void *)v10;
      *(_OWORD *)long long v19 = *(_OWORD *)(v10 + 16);
      *(_OWORD *)&v19[16] = *(_OWORD *)(v10 + 32);
      uint64_t v15 = v11;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        long long v17 = *(_OWORD *)(a1 + v15 + 112);
        *(_OWORD *)(v16 + 144) = *(_OWORD *)(a1 + v15 + 96);
        *(_OWORD *)(v16 + 160) = v17;
        *(_OWORD *)(v16 + 171) = *(_OWORD *)(a1 + v15 + 123);
        if (v15 == -96) {
          break;
        }
        v15 -= 48;
        if (v13 >= *(double *)(v16 + 56))
        {
          uint64_t v18 = a1 + v15 + 144;
          goto LABEL_12;
        }
      }
      uint64_t v18 = a1;
LABEL_12:
      *(void *)uint64_t v18 = v14;
      *(double *)(v18 + 8) = v13;
      *(_OWORD *)(v18 + 16) = *(_OWORD *)v19;
      *(_OWORD *)(v18 + 27) = *(_OWORD *)&v19[11];
      if (++v12 == 8) {
        return v10 + 48 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 48;
    v10 += 48;
    if (v10 == a2) {
      return 1;
    }
  }
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)#1}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)>::~__func()
{
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)#1}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F1723BF0;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)#1}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1723BF0;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)#1}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)#1}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)#1}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 664))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a4, 3, @"Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date");
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_configureForStartTime(a1);
  }
  double v8 = *(double *)(a2 + 8);
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9)
  {
    if (*(unsigned char *)(a1 + 664))
    {
      double v10 = -1.79769313e308;
    }
    else
    {
      double v10 = *(double *)(a1 + 176);
      double v12 = *(double *)(a1 + 120);
      if (v10 <= v12) {
        double v10 = -1.79769313e308;
      }
      if (v10 < v12) {
        double v10 = *(double *)(a1 + 120);
      }
    }
  }
  else
  {
    double v10 = *(double *)(a1 + 176);
    if (v10 <= *(double *)(a1 + 120)) {
      double v10 = -1.79769313e308;
    }
  }
  if (v10 <= v8)
  {
    if (v9 && a3) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_advanceToTime(a1, v8);
    }
    HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    double v13 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
    uint64_t v11 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v13, a4);
  }
  return v11;
}

void sub_1BD0B5DF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_advanceToTime(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 128) <= a2)
  {
    uint64_t v4 = a1 + 112;
    BOOL v5 = (double *)(a1 + 120);
    do
    {
      uint64_t v6 = *(void *)(a1 + 640);
      uint64_t v7 = *(void *)(a1 + 632);
      if (v6 == v7)
      {
        uint64_t v22 = 0;
        uint64_t v15 = *(void **)(a1 + 40);
        uint64_t v16 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a2];
        double v8 = [v15 dateIntervalContainingDate:v16 index:&v22];

        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v17 = v22;
        double v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v19 = v18;
        double v20 = [v8 endDate];
        [v20 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::resetToBucket(v4, v17, v19, v21);
      }
      else
      {
        double v8 = [*(id *)(a1 + 40) dateIntervalAtIndex:*(void *)(a1 + 112) + 1];
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_statisticsFromFinishedBucket(a1, v5);
        double v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v12 = v11;
        double v13 = [v8 endDate];
        [v13 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::advanceBucket(v4, v12, v14);
      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_didChangeBucket(a1, v9);
      if (v6 != v7) {
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_notifyForCurrentBucket(a1);
      }
    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1BD0B6004(_Unwind_Exception *exception_object)
{
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a1 + 8;
  double v6 = *(double *)(a1 + 8);
  double v7 = *(double *)(a2 + 8);
  double v8 = *(double *)(a2 + 16);
  uint64_t v9 = *(uint64_t **)(a2 + 24);
  unsigned __int8 v10 = *(unsigned char *)(a2 + 32);
  char v11 = *(unsigned char *)(a2 + 33);
  int v12 = v10;
  char v13 = v11;
  unint64_t v14 = (unint64_t)v9;
  double v15 = v8;
  double v16 = v7;
  if (v6 - v7 >= 0.01)
  {
    if (v8 - v7 - (v6 - v7) >= 0.01)
    {
      int v12 = *(unsigned __int8 *)(a2 + 32);
      char v13 = *(unsigned char *)(a2 + 33);
      unint64_t v14 = *(void *)(a2 + 24);
      double v15 = *(double *)(a2 + 16);
      double v16 = *(double *)(a1 + 8);
    }
    else
    {
      int v12 = 0;
      char v13 = 0;
      unint64_t v14 = 0;
      double v15 = 0.0;
      double v16 = 0.0;
    }
  }
  uint64_t v17 = *(uint64_t **)a2;
  double v18 = *(double *)(a1 + 16);
  double v19 = v18 - v16;
  double v20 = v15 - v16 - (v18 - v16);
  if (*(_DWORD *)(a1 + 36))
  {
    if (v19 >= 0.01)
    {
      if (v20 >= 0.01)
      {
LABEL_27:
        double v22 = v15;
        unint64_t v64 = v14;
        int v21 = v12;
        char v65 = v13;
        double v15 = *(double *)(a1 + 16);
        if (!v12) {
          goto LABEL_28;
        }
        goto LABEL_11;
      }
LABEL_10:
      unint64_t v64 = 0;
      int v21 = 0;
      char v65 = 0;
      double v18 = 0.0;
      double v22 = 0.0;
      if (!v12)
      {
LABEL_28:
        char v13 = v65;
        goto LABEL_59;
      }
LABEL_11:
      double v62 = v16;
      double v63 = v15;
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 336, v14, v14);
      unint64_t v23 = *(void *)(a1 + 112);
      if (v23 == *(void *)(a1 + 104) && *(uint64_t *)(a1 + 168) <= 0)
      {
        v28.f64[1] = *(float64_t *)(a1 + 16);
        double v24 = v62;
        double v25 = v63;
        v28.f64[0] = v62;
        v29.f64[0] = *(float64_t *)(a1 + 8);
        v29.f64[1] = v63;
        int8x16_t v30 = (int8x16_t)vcgtq_f64(v29, v28);
        v29.f64[0] = v62;
        *(int8x16_t *)(a1 + 48) = vbslq_s8(v30, *(int8x16_t *)(a1 + 8), (int8x16_t)v29);
        if (!a3)
        {
LABEL_30:
          unint64_t v31 = *(void *)(a1 + 120);
          if (v23 >= v31)
          {
            uint64_t v33 = *(void *)(a1 + 104);
            unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - v33) >> 4);
            unint64_t v35 = v34 + 1;
            if (v34 + 1 > 0x555555555555555) {
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - v33) >> 4);
            if (2 * v36 > v35) {
              unint64_t v35 = 2 * v36;
            }
            if (v36 >= 0x2AAAAAAAAAAAAAALL) {
              unint64_t v37 = 0x555555555555555;
            }
            else {
              unint64_t v37 = v35;
            }
            if (v37)
            {
              unint64_t v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v37);
              double v24 = v62;
              double v25 = v63;
            }
            else
            {
              uint64_t v38 = 0;
            }
            unint64_t v39 = v37 + 48 * v34;
            unint64_t v40 = v37 + 48 * v38;
            *(void *)unint64_t v39 = v17;
            *(double *)(v39 + 8) = v24;
            *(double *)(v39 + 16) = v25;
            *(void *)(v39 + 24) = v14;
            *(unsigned char *)(v39 + 32) = v12;
            *(unsigned char *)(v39 + 33) = v13;
            *(_WORD *)(v39 + 40) = 0;
            *(unsigned char *)(v39 + 42) = 0;
            unint64_t v32 = v39 + 48;
            double v42 = *(char **)(a1 + 104);
            unint64_t v41 = *(char **)(a1 + 112);
            if (v41 == v42)
            {
              char v13 = v65;
            }
            else
            {
              char v13 = v65;
              do
              {
                long long v43 = *((_OWORD *)v41 - 3);
                long long v44 = *((_OWORD *)v41 - 2);
                *(_OWORD *)(v39 - 21) = *(_OWORD *)(v41 - 21);
                *(_OWORD *)(v39 - 48) = v43;
                *(_OWORD *)(v39 - 32) = v44;
                v39 -= 48;
                v41 -= 48;
              }
              while (v41 != v42);
              unint64_t v41 = *(char **)(a1 + 104);
            }
            *(void *)(a1 + 104) = v39;
            *(void *)(a1 + 112) = v32;
            *(void *)(a1 + 120) = v40;
            if (v41) {
              operator delete(v41);
            }
          }
          else
          {
            *(void *)unint64_t v23 = v17;
            *(double *)(v23 + 8) = v24;
            *(double *)(v23 + 16) = v25;
            *(void *)(v23 + 24) = v14;
            *(unsigned char *)(v23 + 32) = v12;
            *(unsigned char *)(v23 + 33) = v13;
            *(_WORD *)(v23 + 40) = 0;
            unint64_t v32 = v23 + 48;
            *(unsigned char *)(v23 + 42) = 0;
            char v13 = v65;
          }
          *(void *)(a1 + 112) = v32;
          if (!*(unsigned char *)(a1 + 304) || *(double *)(a1 + 280) <= v7)
          {
            *(void *)(a1 + 272) = v17;
            *(double *)(a1 + 280) = v7;
            *(double *)(a1 + 288) = v8;
            *(void *)(a1 + 296) = v9;
            *(unsigned char *)(a1 + 304) = v10;
            *(unsigned char *)(a1 + 305) = v11;
            if (!*(unsigned char *)(a1 + 208) || *(double *)(a1 + 184) <= v7)
            {
              *(void *)(a1 + 176) = v17;
              *(double *)(a1 + 184) = v7;
              *(double *)(a1 + 192) = v8;
              *(void *)(a1 + 200) = v9;
              *(unsigned char *)(a1 + 208) = v10;
              *(unsigned char *)(a1 + 209) = v11;
            }
          }
          if (*(unsigned char *)(a1 + 33))
          {
            unint64_t v45 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_canonicalSourceIDForSourceID(v5, v14);
            long long v46 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_statisticsForSource(v5, v45);
            if (!*((unsigned char *)v46 + 176) || *((double *)v46 + 19) <= v7)
            {
              v46[18] = v17;
              *((double *)v46 + 19) = v7;
              *((double *)v46 + 20) = v8;
              v46[21] = v9;
              *((unsigned char *)v46 + 176) = v10;
              *((unsigned char *)v46 + 177) = v11;
              if (!*((unsigned char *)v46 + 80) || *((double *)v46 + 7) <= v7)
              {
                v46[6] = v17;
                *((double *)v46 + 7) = v7;
                *((double *)v46 + 8) = v8;
                v46[9] = v9;
                *((unsigned char *)v46 + 80) = v10;
                *((unsigned char *)v46 + 81) = v11;
              }
            }
          }
LABEL_59:
          unint64_t v14 = v64;
          if (!v21) {
            return;
          }
          goto LABEL_60;
        }
      }
      else
      {
        double v24 = v62;
        double v25 = v63;
        if (v62 < *(double *)(a1 + 48))
        {
          double v26 = *(double *)(a1 + 8);
          if (v62 >= v26) {
            double v26 = v62;
          }
          *(double *)(a1 + 48) = v26;
        }
        if (v63 > *(double *)(a1 + 56))
        {
          double v27 = *(double *)(a1 + 16);
          if (v27 >= v63) {
            double v27 = v63;
          }
          *(double *)(a1 + 56) = v27;
        }
        if (!a3) {
          goto LABEL_30;
        }
      }
      if (v24 < *(double *)(a1 + 16))
      {
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeThroughTime(v5, v24);
        double v24 = v62;
        double v25 = v63;
        unint64_t v23 = *(void *)(a1 + 112);
      }
      goto LABEL_30;
    }
  }
  else
  {
    if (v20 < 0.01) {
      goto LABEL_10;
    }
    if (v19 >= 0.01) {
      goto LABEL_27;
    }
  }
  LOBYTE(v21) = v12;
  double v22 = v15;
  double v18 = v16;
  if (!v12) {
    return;
  }
LABEL_60:
  unint64_t v47 = *(void *)(a1 + 528);
  unint64_t v48 = *(void *)(a1 + 536);
  if (v47 >= v48)
  {
    uint64_t v50 = *(void *)(a1 + 520);
    unint64_t v51 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v47 - v50) >> 3);
    unint64_t v52 = v51 + 1;
    if (v51 + 1 > 0x666666666666666) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v53 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v48 - v50) >> 3);
    if (2 * v53 > v52) {
      unint64_t v52 = 2 * v53;
    }
    if (v53 >= 0x333333333333333) {
      unint64_t v54 = 0x666666666666666;
    }
    else {
      unint64_t v54 = v52;
    }
    if (v54) {
      unint64_t v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v54);
    }
    else {
      uint64_t v55 = 0;
    }
    unint64_t v56 = v54 + 40 * v51;
    unint64_t v57 = v54 + 40 * v55;
    *(void *)unint64_t v56 = v17;
    *(double *)(v56 + 8) = v18;
    *(double *)(v56 + 16) = v22;
    *(void *)(v56 + 24) = v14;
    *(unsigned char *)(v56 + 32) = v21;
    *(unsigned char *)(v56 + 33) = v13;
    unint64_t v49 = v56 + 40;
    unint64_t v58 = *(char **)(a1 + 528);
    v59 = *(char **)(a1 + 520);
    if (v58 != v59)
    {
      do
      {
        long long v60 = *(_OWORD *)(v58 - 40);
        long long v61 = *(_OWORD *)(v58 - 24);
        *(_WORD *)(v56 - 8) = *((_WORD *)v58 - 4);
        *(_OWORD *)(v56 - 24) = v61;
        *(_OWORD *)(v56 - 40) = v60;
        v56 -= 40;
        v58 -= 40;
      }
      while (v58 != v59);
      unint64_t v58 = *(char **)(a1 + 520);
    }
    *(void *)(a1 + 520) = v56;
    *(void *)(a1 + 528) = v49;
    *(void *)(a1 + 536) = v57;
    if (v58) {
      operator delete(v58);
    }
  }
  else
  {
    *(void *)unint64_t v47 = v17;
    *(double *)(v47 + 8) = v18;
    *(double *)(v47 + 16) = v22;
    *(void *)(v47 + 24) = v14;
    *(unsigned char *)(v47 + 32) = v21;
    unint64_t v49 = v47 + 40;
    *(unsigned char *)(v47 + 33) = v13;
  }
  *(void *)(a1 + 528) = v49;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_notifyForCurrentBucket(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 666))
  {
    *(unsigned char *)(a1 + 668) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 668) = 0;
    uint64_t v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      uint64_t v4 = v2;
      int v3 = (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      if (v3) {
        v4[2](v4, v3);
      }

      uint64_t v2 = v4;
    }
  }
}

void sub_1BD0B6638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  uint64_t v9 = 0;
  unsigned __int8 v10 = 0;
  uint64_t v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 520), *(void *)(a1 + 528), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 528) - *(void *)(a1 + 520)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::resetToBucket(a1, *(void *)a1 + 1, a2, a3);
  double v6 = v9;
  double v7 = v10;
  if (v9 != v10)
  {
    uint64_t v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BD0B6738(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8 = (id *)(a1 + 40);
  objc_storeStrong((id *)(a1 + 544), *(id *)(a1 + 40));
  *((double *)v8 - 4) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  memset(v16, 0, sizeof(v16));
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_WORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 210) = *(_OWORD *)((char *)&v16[3] + 8);
  *(_OWORD *)(a1 + 226) = *(_OWORD *)((char *)&v16[4] + 8);
  *(void *)(a1 + 242) = *((void *)&v16[5] + 1);
  *(_OWORD *)(a1 + 250) = v16[0];
  *(_OWORD *)(a1 + 266) = v16[1];
  *(_OWORD *)(a1 + 282) = v16[2];
  *(void *)(a1 + 298) = *(void *)&v16[3];
  *(_WORD *)(a1 + 310) = 0;
  *(_DWORD *)(a1 + 306) = 0;
  if (*(void *)(a1 + 328))
  {
    uint64_t v9 = *(void **)(a1 + 312);
    uint64_t v10 = *(void *)(a1 + 320);
    *(void *)(a1 + 312) = a1 + 320;
    *(void *)(v10 + 16) = 0;
    *(void *)(a1 + 320) = 0;
    *(void *)(a1 + 328) = 0;
    if (v9[1]) {
      uint64_t v11 = (void *)v9[1];
    }
    else {
      uint64_t v11 = v9;
    }
    if (v11)
    {
      int v12 = (void *)v11[2];
      if (v12)
      {
        char v13 = (void *)*v12;
        if ((void *)*v12 == v11)
        {
          *int v12 = 0;
          while (1)
          {
            double v15 = (void *)v12[1];
            if (!v15) {
              break;
            }
            do
            {
              int v12 = v15;
              double v15 = (void *)*v15;
            }
            while (v15);
          }
        }
        else
        {
          for (v12[1] = 0; v13; char v13 = (void *)v12[1])
          {
            do
            {
              int v12 = v13;
              char v13 = (void *)*v13;
            }
            while (v13);
          }
        }
        std::__tree<long>::destroy(v11);
        for (i = (void *)v12[2]; i; i = (void *)i[2])
          int v12 = i;
        uint64_t v11 = v12;
      }
    }
    std::__tree<long>::destroy(v11);
  }
  objc_storeStrong(v8, *(id *)(a1 + 544));
  *(void *)(a1 + 528) = *(void *)(a1 + 520);
  *(void *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 668))
  {
    if (v3)
    {
      id v6 = v3;
      uint64_t v4 = _Block_copy(*(const void **)(a1 + 96));
      uint64_t v5 = v4;
      if (v4) {
        (*((void (**)(void *, id))v4 + 2))(v4, v6);
      }

      id v3 = v6;
    }
    *(unsigned char *)(a1 + 668) = 0;
  }
}

void sub_1BD0B6998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_currentBucketInterval(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 664))
  {
    unint64_t v1 = 0;
  }
  else
  {
    unint64_t v1 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", *(double *)(a1 + 120), *(double *)(a1 + 128));
  }

  return v1;
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 startDate];
  id v6 = [v4 startDate];
  uint64_t v7 = [v5 compare:v6];

  return v7;
}

void sub_1BD0B6A6C(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_primitiveInvalidateInterval(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 13);
  if (WeakRetained)
  {
    if (v5
      && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_currentBucketInterval((uint64_t)a1),
          (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v8 = [v5 endDate];
      uint64_t v9 = [v7 startDate];
      if (objc_msgSend(v8, "hk_isAfterDate:", v9))
      {
        uint64_t v10 = [v5 startDate];
        uint64_t v11 = [v7 endDate];
        char v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);
      }
      else
      {
        char v12 = 0;
      }

      char v13 = _Block_copy(a1[12]);
      if ((v12 & 1) == 0) {
        operator new();
      }
    }
    else
    {
      char v13 = _Block_copy(a1[12]);
    }
    *((unsigned char *)a1 + 664) = 1;
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
    v27[3] = &unk_1E6308FF8;
    id v15 = v5;
    id v28 = v15;
    id v16 = v13;
    id v29 = v16;
    (*((void (**)(id *, void *))*a1 + 9))(a1, v27);
    if (v5)
    {
      uint64_t v17 = [v15 startDate];
      [v17 timeIntervalSinceReferenceDate];
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_configureForStartTime((uint64_t)a1);
    }
    else
    {
      (*((void (**)(id *))*a1 + 4))(a1);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
    v21[3] = &unk_1E6309060;
    double v24 = a1;
    id v5 = v15;
    char v26 = 1;
    id v22 = v5;
    double v25 = a1;
    id v23 = WeakRetained;
    uint64_t v14 = (*((uint64_t (**)(id *, void *, uint64_t))*a1 + 14))(a1, v21, a3);
    double v18 = _Block_copy(v16);
    id v19 = a1[12];
    a1[12] = v18;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to invalidate interval: no data source available.");
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1BD0B6EBC(_Unwind_Exception *a1)
{
  MEMORY[0x1C187B8A0](v4, 0x10F1C408224355FLL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_11;
  }
  id v3 = [v10 endDate];
  uint64_t v4 = [*(id *)(a1 + 32) startDate];
  char v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    id v6 = [v10 startDate];
    uint64_t v7 = [*(id *)(a1 + 32) endDate];
    char v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_11:
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9) {
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
      }
    }
  }
}

void sub_1BD0B70A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = [*(id *)(a1 + 32) startDate];
  [v5 timeIntervalSinceReferenceDate];
  uint64_t v7 = v6;

  char v8 = [*(id *)(a1 + 32) endDate];
  [v8 timeIntervalSinceReferenceDate];
  uint64_t v10 = v9;

  uint64_t v11 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  uint64_t v13 = *(void *)(a1 + 32);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  char v32 = *(unsigned char *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  uint64_t v31 = *(void *)(a1 + 56);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  uint64_t v14 = [v11 collectionCalculator:WeakRetained queryForInterval:v13 error:a2 sampleHandler:v30 mergeHandler:v29];

  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15 != v4)
    {
      id v16 = [*(id *)(a1 + 32) endDate];
      [v16 timeIntervalSinceReferenceDate];
      if (*(void *)(v15 + 40))
      {
        double v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          id v19 = [*(id *)(v15 + 40) dateIntervalAtIndex:*(void *)(v15 + 112) + 1];
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          double v20 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_statisticsFromFinishedBucket(v15, (double *)(v15 + 120));
          int v21 = [v19 startDate];
          [v21 timeIntervalSinceReferenceDate];
          double v23 = v22;
          double v24 = [v19 endDate];
          [v24 timeIntervalSinceReferenceDate];
          HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            char v26 = _Block_copy(*(const void **)(v15 + 96));
            double v27 = v26;
            if (v26) {
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);
            }
          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_didChangeBucket(v15, 0);
        }
      }
    }
  }
  return v14;
}

void sub_1BD0B734C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7 = *(double *)(a1 + 32) - a6;
  if (v7 >= 0.01)
  {
    if (a7 - a6 - v7 >= 0.01)
    {
      int v8 = 1;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      int v8 = 0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    int v8 = 1;
  }
  double v11 = a5;
  double v12 = a6;
  double v13 = a7;
  uint64_t v14 = a2;
  char v15 = v8;
  char v16 = 0;
  if (*(unsigned char *)(a1 + 56))
  {
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v11, a3, a4);
    }
  }
  else
  {
    double v10 = *(double *)(a1 + 40) - a6;
    if (v10 >= 0.01)
    {
      if (a7 - a6 - v10 >= 0.01) {
        a7 = *(double *)(a1 + 40);
      }
    }
    else
    {
      int v8 = 0;
    }
    double v12 = a6;
    double v13 = a7;
    char v15 = v8;
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v11, a3, a4);
    }
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 664)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_configureForStartTime(a1);
  }
  if (*(void *)(a1 + 40)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_advanceToTime(a1, a2);
  }
  if (*(double *)(a1 + 128) > a2)
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeThroughTime(a1 + 120, a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 32) < *(double *)(v10 + 8))
                {
                  uint64_t v129 = *(void *)(v10 + 32);
                  long long v113 = *(_OWORD *)v10;
                  long long v121 = *(_OWORD *)(v10 + 16);
                  long long v52 = *(_OWORD *)(a2 - 40);
                  long long v53 = *(_OWORD *)(a2 - 24);
                  *(_WORD *)(v10 + 32) = *(_WORD *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(_WORD *)(a2 - 8) = v129;
                  *(_OWORD *)(a2 - 24) = v121;
                  *(_OWORD *)(a2 - 40) = v113;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v10, (double *)(v10 + 40), (double *)(a2 - 40));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, v10 + 120, a2 - 40);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            unint64_t v54 = (void *)(v10 + 40);
            BOOL v56 = v10 == a2 || v54 == (void *)a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  v59 = v54;
                  double v60 = *(double *)(v58 + 48);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *v54;
                    long long v114 = *(_OWORD *)(v58 + 56);
                    uint64_t v122 = *(void *)(v58 + 72);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      uint64_t v63 = v10 + v62;
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      *(_OWORD *)(v63 + 40) = *(_OWORD *)(v10 + v62);
                      *(_OWORD *)(v63 + 56) = v64;
                      *(_WORD *)(v63 + 72) = *(_WORD *)(v10 + v62 + 32);
                      if (!v62) {
                        break;
                      }
                      v62 -= 40;
                      if (v60 >= *(double *)(v63 - 32))
                      {
                        uint64_t v65 = v10 + v62 + 40;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = v114;
                    *(_WORD *)(v65 + 32) = v122;
                  }
                  unint64_t v54 = v59 + 5;
                  v57 += 40;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 5 != (void *)a2);
              }
            }
            else if (!v56)
            {
              do
              {
                v98 = v54;
                double v99 = *(double *)(a1 + 48);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *v54;
                  long long v117 = *(_OWORD *)(a1 + 56);
                  uint64_t v125 = *(void *)(a1 + 72);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(_OWORD *)(v101 - 3);
                    *(_OWORD *)long long v101 = *(_OWORD *)(v101 - 5);
                    *((_OWORD *)v101 + 1) = v102;
                    *((_WORD *)v101 + 16) = *((_WORD *)v101 - 4);
                    double v103 = *((double *)v101 - 9);
                    v101 -= 5;
                  }
                  while (v99 < v103);
                  *long long v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *((_WORD *)v101 + 16) = v125;
                  *((_OWORD *)v101 + 1) = v117;
                }
                v54 += 5;
                a1 = (unint64_t)v98;
              }
              while (v98 + 5 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 40 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v10 + 40 * v69 + 8) < *(double *)(v70 + 48))
                  {
                    v70 += 40;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  double v71 = *(double *)(v10 + 40 * v68 + 8);
                  if (*(double *)(v70 + 8) >= v71)
                  {
                    unint64_t v72 = v10 + 40 * v68;
                    uint64_t v73 = *(void *)v72;
                    uint64_t v123 = *(void *)(v72 + 32);
                    long long v115 = *(_OWORD *)(v72 + 16);
                    do
                    {
                      unint64_t v74 = v72;
                      unint64_t v72 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_WORD *)(v74 + 32) = *(_WORD *)(v70 + 32);
                      *(_OWORD *)unint64_t v74 = v75;
                      *(_OWORD *)(v74 + 16) = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 40 * v77;
                      uint64_t v78 = 2 * v69 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v10 + 40 * v77 + 8) < *(double *)(v70 + 48))
                      {
                        v70 += 40;
                        uint64_t v77 = v78;
                      }
                      uint64_t v69 = v77;
                    }
                    while (*(double *)(v70 + 8) >= v71);
                    *(void *)unint64_t v72 = v73;
                    *(double *)(v72 + 8) = v71;
                    *(_OWORD *)(v72 + 16) = v115;
                    *(_WORD *)(v72 + 32) = v123;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x28uLL;
              do
              {
                uint64_t v80 = 0;
                uint64_t v130 = *(void *)(v10 + 32);
                long long v116 = *(_OWORD *)v10;
                long long v124 = *(_OWORD *)(v10 + 16);
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = v81;
                  uint64_t v83 = v80 + 1;
                  v81 += 40 * (v80 + 1);
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v85 = v84 + 2;
                  if (v85 < v79 && *(double *)(v82 + 40 * v83 + 8) < *(double *)(v81 + 48))
                  {
                    v81 += 40;
                    uint64_t v80 = v85;
                  }
                  long long v86 = *(_OWORD *)v81;
                  long long v87 = *(_OWORD *)(v81 + 16);
                  *(_WORD *)(v82 + 32) = *(_WORD *)(v81 + 32);
                  *(_OWORD *)unint64_t v82 = v86;
                  *(_OWORD *)(v82 + 16) = v87;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 40;
                if (v81 == a2)
                {
                  *(_WORD *)(v81 + 32) = v130;
                  *(_OWORD *)unint64_t v81 = v116;
                  *(_OWORD *)(v81 + 16) = v124;
                }
                else
                {
                  long long v88 = *(_OWORD *)a2;
                  long long v89 = *(_OWORD *)(a2 + 16);
                  *(_WORD *)(v81 + 32) = *(_WORD *)(a2 + 32);
                  *(_OWORD *)unint64_t v81 = v88;
                  *(_OWORD *)(v81 + 16) = v89;
                  *(_WORD *)(a2 + 32) = v130;
                  *(_OWORD *)a2 = v116;
                  *(_OWORD *)(a2 + 16) = v124;
                  uint64_t v90 = v81 - v10 + 40;
                  if (v90 >= 41)
                  {
                    unint64_t v91 = (v90 / 0x28uLL - 2) >> 1;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v10 + 40 * v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      uint64_t v109 = *(void *)(v81 + 32);
                      long long v106 = *(_OWORD *)(v81 + 16);
                      do
                      {
                        unint64_t v94 = v81;
                        unint64_t v81 = v10 + 40 * v91;
                        long long v95 = *(_OWORD *)v81;
                        long long v96 = *(_OWORD *)(v81 + 16);
                        *(_WORD *)(v94 + 32) = *(_WORD *)(v81 + 32);
                        *(_OWORD *)unint64_t v94 = v95;
                        *(_OWORD *)(v94 + 16) = v96;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 40 * v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_WORD *)(v81 + 32) = v109;
                      *(_OWORD *)(v81 + 16) = v106;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40 * (v12 >> 1)), (double *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            char v16 = (double *)(a1 + 40 * v13 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40), v16, (double *)(a2 - 80));
            double v17 = (double *)(a1 + 40 + 8 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 80), v17, (double *)(a2 - 120));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v16, (double *)v14, v17);
            uint64_t v126 = *(void *)(a1 + 32);
            long long v110 = *(_OWORD *)a1;
            long long v118 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 16) = v19;
            *(_WORD *)(v14 + 32) = v126;
            *(_OWORD *)unint64_t v14 = v110;
            *(_OWORD *)(v14 + 16) = v118;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40 * (v12 >> 1)), (double *)a1, (double *)(a2 - 40));
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 32) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          long long v105 = *(_OWORD *)(a1 + 16);
          uint64_t v108 = *(void *)(a1 + 32);
          if (v20 >= *(double *)(a2 - 32))
          {
            unint64_t v41 = a1 + 40;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 40;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 40;
              double v40 = *(double *)(v39 + 48);
              v39 += 40;
            }
            while (v20 >= v40);
          }
          unint64_t v43 = a2;
          if (v10 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              unint64_t v43 = v44 - 40;
              double v45 = *(double *)(v44 - 32);
              v44 -= 40;
            }
            while (v20 < v45);
          }
          while (v10 < v43)
          {
            uint64_t v128 = *(void *)(v10 + 32);
            long long v112 = *(_OWORD *)v10;
            long long v120 = *(_OWORD *)(v10 + 16);
            long long v46 = *(_OWORD *)v43;
            long long v47 = *(_OWORD *)(v43 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v43 + 32);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(_WORD *)(v43 + 32) = v128;
            *(_OWORD *)unint64_t v43 = v112;
            *(_OWORD *)(v43 + 16) = v120;
            do
            {
              double v48 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *(double *)(v43 - 32);
              v43 -= 40;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 40);
            long long v51 = *(_OWORD *)(v10 - 24);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 40) = v38;
          *(double *)(v10 - 32) = v20;
          *(_WORD *)(v10 - 8) = v108;
          *(_OWORD *)(v10 - 24) = v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        long long v104 = *(_OWORD *)(a1 + 16);
        uint64_t v107 = *(void *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 48);
          v21 += 40;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        unint64_t v25 = a2;
        if (v21 == 40)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 40;
            double v29 = *(double *)(v28 - 32);
            v28 -= 40;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 40;
            double v27 = *(double *)(v25 - 32);
            v25 -= 40;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v127 = *(void *)(v10 + 32);
            long long v111 = *(_OWORD *)v10;
            long long v119 = *(_OWORD *)(v10 + 16);
            long long v31 = *(_OWORD *)v30;
            long long v32 = *(_OWORD *)(v30 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v30 + 32);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(_WORD *)(v30 + 32) = v127;
            *(_OWORD *)unint64_t v30 = v111;
            *(_OWORD *)(v30 + 16) = v119;
            do
            {
              double v33 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v33 < v20);
            do
            {
              double v34 = *(double *)(v30 - 32);
              v30 -= 40;
            }
            while (v34 >= v20);
          }
          while (v10 < v30);
        }
        if (v10 - 40 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 40);
          long long v36 = *(_OWORD *)(v10 - 24);
          *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 40) = v22;
        *(double *)(v10 - 32) = v20;
        *(_WORD *)(v10 - 8) = v107;
        *(_OWORD *)(v10 - 24) = v104;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 40;
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        __int16 v9 = *(_WORD *)(a2 - 8);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      uint64_t v16 = *(void *)v12;
      long long v21 = *(_OWORD *)(v12 + 16);
      uint64_t v22 = *(void *)(v12 + 32);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(void *)uint64_t v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(void *a1, uint64_t a2)
{
  id v3 = (void *)a1[5];
  uint64_t v4 = a1[6];
  BOOL v5 = (void *)a1[4];
  uint64_t v6 = [v5 dateInterval];
  v9[4] = v4;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  uint64_t v7 = [v3 collectionCalculator:v5 queryForInterval:v6 error:a2 sampleHandler:v10 mergeHandler:v9];

  return v7;
}

void sub_1BD0B80D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10 = *(void *)(a1 + 32);
  *(double *)int v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  char v15 = 1;
  uint64_t v11 = [MEMORY[0x1E4F1C9C8] distantFuture];
  [v11 timeIntervalSinceReferenceDate];
  BOOL v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1BD0B8174(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
}

void HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::archive(uint64_t a1, int8x16_t *a2)
{
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 112);
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F171B978;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  statistics::Statistics::makePrimaryStatistics(a1);
  HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::archive((uint64_t)v6, (uint64_t)&a2->i64[1]);
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v6);
  statistics::Statistics::~Statistics((statistics::Statistics *)v6);
  uint64_t v5 = a2->i32[0];
  *(_DWORD *)(a1 + 204) |= 0x100u;
  *(void *)(a1 + 136) = v5;
  statistics::Statistics::makeMostRecentDatum(a1);
  v6[0] = &unk_1F17206F8;
  int v10 = 127;
  int8x16_t v7 = vextq_s8(a2[9], a2[9], 8uLL);
  v6[1] = a2[10].i64[0];
  v6[2] = a2[10].i64[1];
  __int16 v8 = 0;
  char v9 = 0;
  statistics::RawQuantitySample::operator=(*v4, (uint64_t)v6);
  PB::Base::~Base((PB::Base *)v6);
}

void sub_1BD0B82A4(_Unwind_Exception *a1)
{
  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::unarchive(uint64_t a1, void *a2)
{
  *(void *)&long long v4 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v5 = a1 + 8;
  *(_WORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 66) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_WORD *)(a1 + 176) = 0;
  uint64_t v6 = a2[16];
  if (v6)
  {
    HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::unarchive((uint64_t)v13, v6);
    long long v7 = v13[7];
    *(_OWORD *)(v5 + 96) = v13[6];
    *(_OWORD *)(v5 + 112) = v7;
    *(void *)(v5 + 128) = v14;
    long long v8 = v13[3];
    *(_OWORD *)(v5 + 32) = v13[2];
    *(_OWORD *)(v5 + 48) = v8;
    long long v9 = v13[5];
    *(_OWORD *)(v5 + 64) = v13[4];
    *(_OWORD *)(v5 + 80) = v9;
    long long v4 = v13[1];
    *(_OWORD *)uint64_t v5 = v13[0];
    *(_OWORD *)(v5 + 16) = v4;
  }
  *(_DWORD *)a1 = a2[17];
  uint64_t v10 = a2[14];
  if (v10)
  {
    *(void *)&long long v4 = *(void *)(v10 + 8);
    uint64_t v11 = *(void *)(v10 + 16);
    *(int8x16_t *)(a1 + 144) = vextq_s8(*(int8x16_t *)(v10 + 24), *(int8x16_t *)(v10 + 24), 8uLL);
    *(void *)(a1 + 160) = v4;
    *(void *)(a1 + 168) = v11;
    *(_WORD *)(a1 + 176) = 1;
  }
  return *(double *)&v4;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6 = a3;
  uint64_t v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = &unk_1F1723CA0;
  double v9 = 900.0;
  if ((v6 & 0x10) == 0) {
    double v9 = 0.0;
  }
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(void *)(v8 + 104) = 0;
  *(void *)(v8 + 112) = 0;
  *(void *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_WORD *)(a1 + 616) = 1;
  *(unsigned char *)(a1 + 618) = 0;
  *(unsigned char *)(a1 + 620) = 0;
  *(void *)(a1 + 624) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(void *)(a1 + 664) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);

  JUMPOUT(0x1C187B8A0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1F1723CA0;
  uint64_t v2 = *(void **)(a1 + 648);
  if (v2)
  {
    *(void *)(a1 + 656) = v2;
    operator delete(v2);
  }

  id v3 = *(void **)(a1 + 584);
  if (v3)
  {
    *(void *)(a1 + 592) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  long long v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(unsigned char *)(result + 616) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::setDateInterval(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 copy];
  long long v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;

  uint64_t v5 = [v6 startDate];
  [v5 timeIntervalSinceReferenceDate];
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_configureForStartTime(a1);
}

void sub_1BD0B8534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(void *)(a1 + 40))
  {
    id v5 = v3;
    [v3 timeIntervalSinceReferenceDate];
    *(void *)(a1 + 624) = v4;
    id v3 = v5;
  }
}

void sub_1BD0B85A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::setStatisticsConfiguration(id *a1, void *a2)
{
  objc_storeStrong(a1 + 79, a2);
  id v7 = a2;
  id v4 = a1[79];
  id v5 = a1[76];
  a1[76] = v4;
  id v6 = v4;

  objc_storeStrong(a1 + 19, a1[76]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (*(void *)(a1 + 40)) {
    return 1;
  }
  BOOL v7 = *(void *)(a1 + 224) == *(void *)(a1 + 216) && *(uint64_t *)(a1 + 272) < 1
    || HKIntervalMask<double>::firstDifference(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)a2, *(void *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (v7) {
    return 1;
  }
  double v9 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128);

  return v9(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 copy];
  id v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v3;
}

void sub_1BD0B8790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::dataSource(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));

  return WeakRetained;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::currentStatistics(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 616))
  {
    unint64_t v1 = 0;
  }
  else
  {
    HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
    HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_updateSourceOrder((uint64_t)v4);
    HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeThroughTime((uint64_t)v4, v4[1]);
    unint64_t v1 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_statisticsFromFinishedBucket(a1, v4);
    HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::~HDStatisticsBucket((uint64_t)v4);
  }

  return v1;
}

void sub_1BD0B8860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(a1 + 64);
  BOOL v7 = v6;
  if (!v6) {
    goto LABEL_4;
  }
  uint64_t v8 = [v6 startDate];
  [v8 timeIntervalSinceReferenceDate];
  if (v9 > *(double *)(a2 + 16))
  {

    goto LABEL_10;
  }
  uint64_t v10 = [v7 endDate];
  [v10 timeIntervalSinceReferenceDate];
  double v12 = v11;
  double v13 = *(double *)(a2 + 8);

  if (v12 >= v13)
  {
LABEL_4:
    if (!*(unsigned char *)(a1 + 618)) {
      goto LABEL_21;
    }
    if (!*(unsigned char *)(a1 + 617))
    {
      if (*(void *)(a1 + 40))
      {
        if (*(unsigned char *)(a1 + 616))
        {
          double v14 = -1.79769313e308;
        }
        else
        {
          double v16 = *(double *)(a1 + 176);
          double v14 = *(double *)(a1 + 120);
          if (v16 <= v14) {
            double v16 = -1.79769313e308;
          }
          if (v16 >= v14) {
            double v14 = v16;
          }
        }
      }
      else
      {
        double v14 = -1.79769313e308;
        if (*(double *)(a1 + 176) > *(double *)(a1 + 120)) {
          double v14 = *(double *)(a1 + 176);
        }
      }
      if (v14 > *(double *)(a2 + 8))
      {
        uint64_t v17 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
        uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v17, a3);

        goto LABEL_22;
      }
      if (*(unsigned char *)(a1 + 619))
      {
LABEL_21:
        uint64_t v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_primitiveAddSample(a1, a2, 1, a3);
        goto LABEL_22;
      }
      unint64_t v19 = *(void *)(a1 + 656);
      unint64_t v20 = *(void *)(a1 + 664);
      if (v19 >= v20)
      {
        uint64_t v24 = *(void *)(a1 + 648);
        unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v24) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - v24) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x333333333333333) {
          unint64_t v28 = 0x666666666666666;
        }
        else {
          unint64_t v28 = v26;
        }
        if (v28) {
          unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v28);
        }
        else {
          uint64_t v29 = 0;
        }
        unint64_t v30 = v28 + 40 * v25;
        unint64_t v31 = v28 + 40 * v29;
        long long v32 = *(_OWORD *)a2;
        long long v33 = *(_OWORD *)(a2 + 16);
        *(void *)(v30 + 32) = *(void *)(a2 + 32);
        *(_OWORD *)unint64_t v30 = v32;
        *(_OWORD *)(v30 + 16) = v33;
        unint64_t v23 = v30 + 40;
        double v34 = *(char **)(a1 + 656);
        long long v35 = *(char **)(a1 + 648);
        if (v34 != v35)
        {
          do
          {
            long long v36 = *(_OWORD *)(v34 - 40);
            long long v37 = *(_OWORD *)(v34 - 24);
            *(_WORD *)(v30 - 8) = *((_WORD *)v34 - 4);
            *(_OWORD *)(v30 - 24) = v37;
            *(_OWORD *)(v30 - 40) = v36;
            v30 -= 40;
            v34 -= 40;
          }
          while (v34 != v35);
          double v34 = *(char **)(a1 + 648);
        }
        *(void *)(a1 + 648) = v30;
        *(void *)(a1 + 656) = v23;
        *(void *)(a1 + 664) = v31;
        if (v34) {
          operator delete(v34);
        }
      }
      else
      {
        long long v21 = *(_OWORD *)a2;
        long long v22 = *(_OWORD *)(a2 + 16);
        *(void *)(v19 + 32) = *(void *)(a2 + 32);
        *(_OWORD *)unint64_t v19 = v21;
        *(_OWORD *)(v19 + 16) = v22;
        unint64_t v23 = v19 + 40;
      }
      *(void *)(a1 + 656) = v23;
    }
  }
LABEL_10:
  uint64_t v15 = 1;
LABEL_22:

  return v15;
}

void sub_1BD0B8B1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = v5;
  if (*(unsigned char *)(a1 + 618))
  {
    uint64_t v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 618) = 1;
  uint64_t v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    uint64_t v7 = 0;
    goto LABEL_82;
  }
  uint64_t v65 = v6;
  if (*(unsigned char *)(a1 + 617)) {
    goto LABEL_5;
  }
  double v9 = *(void **)(a1 + 640);
  if (!v9)
  {
    id v68 = 0;
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 40))
  {
LABEL_5:
    int v8 = 0;
    id v68 = 0;
    goto LABEL_29;
  }
  [v9 sortUsingComparator:&__block_literal_global_762];
  id v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v10 = *(id *)(a1 + 640);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  if (!v11)
  {

    id v12 = 0;
    goto LABEL_27;
  }
  id v12 = 0;
  uint64_t v13 = *(void *)v70;
  do
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (*(void *)v70 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(id *)(*((void *)&v69 + 1) + 8 * i);
      double v16 = v15;
      if (v12)
      {
        uint64_t v17 = [v15 startDate];
        uint64_t v18 = [v12 endDate];
        int v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          unint64_t v20 = [v16 endDate];
          long long v21 = [v12 endDate];
          int v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22) {
            goto LABEL_21;
          }
          id v23 = objc_alloc(MEMORY[0x1E4F28C18]);
          uint64_t v24 = [v12 startDate];
          unint64_t v25 = [v16 endDate];
          id v26 = (id)[v23 initWithStartDate:v24 endDate:v25];
        }
        else
        {
          [v68 addObject:v12];
          id v26 = v16;
        }
        id v12 = v26;
      }
      else
      {
        id v12 = v15;
      }
LABEL_21:
    }
    uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  }
  while (v11);

  if (v12) {
    [v68 addObject:v12];
  }
LABEL_27:

LABEL_28:
  int v8 = 1;
LABEL_29:
  unint64_t v27 = *(void **)(a1 + 640);
  *(void *)(a1 + 640) = 0;

  *(unsigned char *)(a1 + 617) = 0;
  if (!v8)
  {
    unint64_t v38 = *(void *)(a1 + 648);
    *(void *)(a1 + 664) = 0;
    *(void *)(a1 + 656) = 0;
    *(void *)(a1 + 648) = 0;
    unint64_t v39 = v38;
    goto LABEL_47;
  }
  unint64_t v28 = [v68 lastObject];
  if (v28)
  {
    uint64_t v29 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_currentBucketInterval(a1);
    unint64_t v30 = [v29 endDate];
    unint64_t v31 = [v28 endDate];
    int v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      long long v33 = [v28 endDate];
      [v33 timeIntervalSinceReferenceDate];
      double v35 = v34;

      uint64_t v36 = *(void *)(a1 + 648);
      long long v37 = *(long long **)(a1 + 656);
      while ((long long *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((long long *)v36 != v37)
          {
            double v40 = (long long *)(v36 + 40);
            if ((long long *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  long long v41 = *v40;
                  long long v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)uint64_t v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                double v40 = (long long *)((char *)v40 + 40);
              }
              while (v40 != v37);
              long long v37 = *(long long **)(a1 + 656);
            }
          }
          if ((long long *)v36 != v37) {
            *(void *)(a1 + 656) = v36;
          }
          break;
        }
        v36 += 40;
      }
    }
  }
  unint64_t v38 = *(void *)(a1 + 648);
  unint64_t v39 = *(void *)(a1 + 656);
  *(void *)(a1 + 664) = 0;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 656) = 0;
  if (![v68 count]) {
    goto LABEL_60;
  }
LABEL_47:
  id v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v44 = v43;
    uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v70;
      while (2)
      {
        for (uint64_t j = 0; j != v45; ++j)
        {
          if (*(void *)v70 != v46) {
            objc_enumerationMutation(v44);
          }
          id v48 = *(id *)(*((void *)&v69 + 1) + 8 * j);
          int v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_primitiveInvalidateInterval((id *)a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
        if (v45) {
          continue;
        }
        break;
      }
    }

LABEL_59:
    unint64_t v38 = (unint64_t)__p;
LABEL_60:
    unint64_t v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v51;
    }
    int v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      uint64_t v54 = v38;
      uint64_t v50 = v67;
      do
      {
        int v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_primitiveAddSample(a1, v54, 1, v50);
        int v53 = v55;
        v54 += 40;
        if (v54 == v39) {
          char v56 = 0;
        }
        else {
          char v56 = v55;
        }
        uint64_t v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_primitiveInvalidateInterval((id *)a1, 0, v67))goto LABEL_59; {
LABEL_70:
    }
    int v53 = 0;
  }
  if (*(void *)(a1 + 40) && *(void *)(a1 + 592) != *(void *)(a1 + 584))
  {
    do
    {
      uint64_t v57 = objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(void *)(a1 + 112) + 1, v50, v65);
      HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      unint64_t v58 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_statisticsFromFinishedBucket(a1, (double *)(a1 + 120));
      v59 = [v57 startDate];
      [v59 timeIntervalSinceReferenceDate];
      double v61 = v60;
      uint64_t v62 = [v57 endDate];
      [v62 timeIntervalSinceReferenceDate];
      HDStatisticsCollectionEngine<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_notifyForCurrentBucket(a1);
    }
    while (*(void *)(a1 + 592) != *(void *)(a1 + 584));
  }
  *(unsigned char *)(a1 + 618) = 0;
  if (__p) {
    operator delete(__p);
  }

  if (v53)
  {
    if (*(unsigned char *)(a1 + 620))
    {
      *(unsigned char *)(a1 + 620) = 0;
      id v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_notifyForCurrentBucket(a1);
      uint64_t v7 = 1;
      goto LABEL_82;
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v6 = v65;
LABEL_82:
  *(unsigned char *)(a1 + 618) = 0;
LABEL_83:

  return v7;
}

void sub_1BD0B9220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    *(unsigned char *)(v13 + 618) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(unsigned char *)(result + 619) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(unsigned char *)(a1 + 618)) {
      goto LABEL_12;
    }
    uint64_t v7 = 0;
LABEL_14:
    uint64_t v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_primitiveInvalidateInterval((id *)a1, v7, a3);
    goto LABEL_15;
  }
  uint64_t v7 = [v6 dateIntervalForIntervalsContainingInterval:v5];

  if (!*(unsigned char *)(a1 + 618)) {
    goto LABEL_14;
  }
  if (!v7)
  {
LABEL_12:
    id v12 = *(void **)(a1 + 640);
    *(void *)(a1 + 640) = 0;

    uint64_t v7 = 0;
    uint64_t v11 = 1;
    *(unsigned char *)(a1 + 617) = 1;
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 617))
  {
    int v8 = *(void **)(a1 + 640);
    if (!v8)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      id v10 = *(void **)(a1 + 640);
      *(void *)(a1 + 640) = v9;

      int v8 = *(void **)(a1 + 640);
    }
    [v8 addObject:v7];
  }
  uint64_t v11 = 1;
LABEL_15:

  return v11;
}

void sub_1BD0B9520(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    *(unsigned char *)(a1 + 616) = 1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v9[3] = &unk_1E63043E8;
    uint64_t v12 = a1;
    id v10 = v5;
    id v11 = WeakRetained;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 112))(a1, v9, a3);
    if (v7 && *(unsigned char *)(a1 + 616) && !*(void *)(a1 + 40)) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_configureForStartTime(a1);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to query for initial statistics: no data source available.");
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1BD0B9674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::reset(uint64_t result)
{
  *(unsigned char *)(result + 616) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 encodeBool:*(unsigned __int8 *)(a1 + 616) forKey:@"needs_config"];
  id v12 = v3;
  int v32 = &unk_1F1726FA0;
  long long v33 = 0;
  int v38 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
  LOBYTE(v38) = 1;
  uint64_t v34 = v4;
  uint64_t v35 = 0;
  statistics::StatisticsEngine::makeCurrentBucket((uint64_t)&v32);
  uint64_t v13 = &unk_1F171B9C8;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  int v31 = 511;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 0;
  int8x16_t v14 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  uint64_t v5 = *(void *)(a1 + 136);
  char v29 = *(unsigned char *)(a1 + 144);
  char v30 = *(unsigned char *)(a1 + 145);
  BOOL v28 = *(_DWORD *)(a1 + 148) == 0;
  int8x16_t v15 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  uint64_t v7 = *(int8x16_t **)(a1 + 216);
  if (v7 != *(int8x16_t **)(a1 + 224))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v7, *v7, 8uLL);
    int8x16_t v40 = v7[1];
    char v43 = 0;
    HIBYTE(v42) = v7[2].i8[9];
    LOBYTE(v42) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>();
  }
  statistics::StatisticsBucket::makeStatistics((uint64_t)&v13);
  HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::archive((uint64_t)&v39, a1 + 240);
  statistics::Statistics::operator=(*((statistics **)&v22 + 1), (uint64_t)&v39);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v39);
  uint64_t v8 = *(void *)(a1 + 376);
  if (v8 != a1 + 384)
  {
    HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::archive((uint64_t)&v39, v8 + 40);
    uint64_t v9 = *(void *)(v8 + 32);
    v46 |= 0x200u;
    uint64_t v45 = v9;
    PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>();
  }
  id v10 = *(int8x16_t **)(a1 + 184);
  if (v10 != *(int8x16_t **)(a1 + 192))
  {
    unint64_t v39 = (char *)&unk_1F1727540;
    v41.i32[0] = 3;
    int8x16_t v40 = vextq_s8(*v10, *v10, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>();
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v13);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v13);
  id v11 = *(int8x16_t **)(a1 + 584);
  if (v11 != *(int8x16_t **)(a1 + 592))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v11, *v11, 8uLL);
    int8x16_t v40 = v11[1];
    __int16 v42 = 0;
    char v43 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>();
  }
  PB::Writer::Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v39);
  [v12 encodeBytes:v40.i64[0] length:&v39[-v40.i64[0]] forKey:@"hdsce_archived_representation"];
  PB::Writer::~Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);
}

void sub_1BD0B9A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v62 = a2;
  *(unsigned char *)(a1 + 616) = [v62 decodeBoolForKey:@"needs_config"];
  id v3 = v62;
  HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::HDStatisticsBucket((uint64_t)v67, 0, -1.79769313e308, 1.79769313e308);
  long long v68 = 0u;
  long long v69 = 0u;
  unint64_t v109 = 0;
  id v65 = v3;
  PB::Reader::Reader((PB::Reader *)v108, (const unsigned __int8 *)[v65 decodeBytesForKey:@"hdsce_archived_representation" returnedLength:&v109]);
  uint64_t v64 = a1;
  long long v101 = &unk_1F1726FA0;
  uint64_t v102 = 0;
  uint64_t v106 = 0;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  int v107 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v101, (PB::Reader *)v108);
  uint64_t v66 = v103;
  if (v102)
  {
    uint64_t v74 = 0;
    memset(v77, 0, sizeof(v77));
    long long v80 = 0u;
    long long v81 = 0u;
    LOWORD(v82) = 0;
    uint64_t v83 = 0;
    *((void *)&v82 + 1) = 0;
    uint64_t v86 = 0;
    long long __p = 0u;
    memset(v79, 0, 82);
    int64_t v85 = 0;
    uint64_t v84 = &v85;
    long long v87 = 0u;
    long long v88 = 0u;
    int v89 = 1065353216;
    long long v90 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    uint64_t v93 = 0;
    int v94 = 1065353216;
    long long v95 = 0u;
    long long v96 = 0u;
    int v97 = 1065353216;
    long long v98 = 0u;
    long long v99 = 0u;
    int v100 = 1065353216;
    int8x16_t v70 = vextq_s8(*(int8x16_t *)(v102 + 8), *(int8x16_t *)(v102 + 8), 8uLL);
    uint64_t v4 = *(void *)(v102 + 72);
    uint64_t v71 = *(void *)(v102 + 64);
    char v72 = *(unsigned char *)(v102 + 185);
    char v73 = *(unsigned char *)(v102 + 186);
    int8x16_t v75 = vextq_s8(*(int8x16_t *)(v102 + 24), *(int8x16_t *)(v102 + 24), 8uLL);
    uint64_t v76 = v4;
    uint64_t v5 = *(void *)(v102 + 80);
    uint64_t v6 = *(void *)(v102 + 88);
    double v63 = (void *)v102;
    if (v5 != v6)
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(*(void *)v5 + 24);
        uint64_t v9 = *(void *)(*(void *)v5 + 32);
        uint64_t v10 = *(void *)(*(void *)v5 + 8);
        uint64_t v11 = *(void *)(*(void *)v5 + 16);
        char v12 = *(unsigned char *)(*(void *)v5 + 41);
        char v13 = *(unsigned char *)(*(void *)v5 + 40);
        if ((unint64_t)v7 >= *(void *)v79)
        {
          int8x16_t v14 = (void *)__p;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v7 - __p) >> 4);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(*(void *)v79 - __p) >> 4) > v16) {
            unint64_t v16 = 0x5555555555555556 * ((uint64_t)(*(void *)v79 - __p) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v79 - __p) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v17 = 0x555555555555555;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17)
          {
            unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            uint64_t v7 = (void *)*((void *)&__p + 1);
            int8x16_t v14 = (void *)__p;
          }
          else
          {
            uint64_t v18 = 0;
          }
          unint64_t v19 = v17 + 48 * v15;
          *(void *)unint64_t v19 = v9;
          *(void *)(v19 + 8) = v8;
          *(void *)(v19 + 16) = v10;
          *(void *)(v19 + 24) = v11;
          *(_WORD *)(v19 + 32) = 1;
          *(unsigned char *)(v19 + 40) = 0;
          *(unsigned char *)(v19 + 41) = v12;
          *(unsigned char *)(v19 + 42) = v13;
          unint64_t v20 = v19;
          if (v7 != v14)
          {
            do
            {
              long long v21 = *((_OWORD *)v7 - 3);
              long long v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)((char *)v7 - 21);
              *(_OWORD *)(v20 - 48) = v21;
              *(_OWORD *)(v20 - 32) = v22;
              v20 -= 48;
              v7 -= 6;
            }
            while (v7 != v14);
            int8x16_t v14 = (void *)__p;
          }
          uint64_t v7 = (void *)(v19 + 48);
          *(void *)&long long __p = v20;
          *((void *)&__p + 1) = v19 + 48;
          *(void *)int64_t v79 = v17 + 48 * v18;
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *uint64_t v7 = v9;
          v7[1] = v8;
          v7[2] = v10;
          v7[3] = v11;
          *((_WORD *)v7 + 16) = 1;
          *((unsigned char *)v7 + 40) = 0;
          *((unsigned char *)v7 + 41) = v12;
          *((unsigned char *)v7 + 42) = v13;
          v7 += 6;
        }
        *((void *)&__p + 1) = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    uint64_t v23 = v63[13];
    if (v23)
    {
      HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::unarchive((uint64_t)&v110, v23);
      long long v81 = v116;
      long long v82 = v117;
      uint64_t v83 = v118;
      *(_OWORD *)&v79[40] = v112;
      *(_OWORD *)&v79[56] = v113;
      *(_OWORD *)&v79[72] = v114;
      long long v80 = v115;
      *(_OWORD *)&v79[8] = v110;
      *(_OWORD *)&v79[24] = v111;
    }
    long long v24 = (uint64_t *)v63[17];
    long long v25 = (uint64_t *)v63[18];
    while (v24 != v25)
    {
      uint64_t v26 = *v24;
      HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::unarchive((uint64_t)&v110, *v24);
      uint64_t v27 = *(void *)(v26 + 144);
      BOOL v28 = v85;
      char v29 = &v85;
      char v30 = &v85;
      if (v85)
      {
        do
        {
          while (1)
          {
            char v30 = (uint64_t **)v28;
            uint64_t v31 = v28[4];
            if (v31 <= v27) {
              break;
            }
            BOOL v28 = *v30;
            char v29 = v30;
            if (!*v30) {
              goto LABEL_33;
            }
          }
          if (v31 >= v27)
          {
            long long v33 = (char *)v30;
            goto LABEL_36;
          }
          BOOL v28 = v30[1];
        }
        while (v28);
        char v29 = v30 + 1;
      }
LABEL_33:
      long long v33 = (char *)operator new(0xB0uLL);
      *((void *)v33 + 4) = v27;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *(_OWORD *)(v33 + 120) = 0u;
      *(_OWORD *)(v33 + 136) = 0u;
      *(_OWORD *)(v33 + 152) = 0u;
      *((void *)v33 + 21) = 0;
      *(void *)long long v33 = 0;
      *((void *)v33 + 1) = 0;
      *((void *)v33 + 2) = v30;
      void *v29 = (uint64_t *)v33;
      int v32 = (uint64_t *)v33;
      if (*v84)
      {
        uint64_t v84 = (uint64_t **)*v84;
        int v32 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v85, v32);
      ++v86;
LABEL_36:
      uint64_t v34 = v118;
      long long v35 = v117;
      long long v36 = v116;
      long long v37 = v114;
      *(_OWORD *)(v33 + 120) = v115;
      *(_OWORD *)(v33 + 136) = v36;
      *(_OWORD *)(v33 + 152) = v35;
      long long v38 = v113;
      long long v39 = v112;
      long long v40 = v110;
      *(_OWORD *)(v33 + 56) = v111;
      *(_OWORD *)(v33 + 72) = v39;
      *((void *)v33 + 21) = v34;
      *(_OWORD *)(v33 + 88) = v38;
      *(_OWORD *)(v33 + 104) = v37;
      ++v24;
      *(_OWORD *)(v33 + 40) = v40;
    }
    uint64_t v41 = v63[5];
    for (uint64_t i = v63[6]; v41 != i; v41 += 8)
    {
      double v44 = *(double *)(*(void *)v41 + 8);
      double v43 = *(double *)(*(void *)v41 + 16);
      if (v44 >= v43) {
        double v45 = *(double *)(*(void *)v41 + 16);
      }
      else {
        double v45 = *(double *)(*(void *)v41 + 8);
      }
      if (v43 < v44) {
        double v43 = *(double *)(*(void *)v41 + 8);
      }
      HKIntervalMask<double>::_insertInterval(v77, v45, v43);
    }
    HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::operator=((uint64_t)v67, (uint64_t)&v70);
    HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::~HDStatisticsBucket((uint64_t)&v70);
  }
  uint64_t v46 = v104;
  uint64_t v47 = v105;
  if (v104 != v105)
  {
    unint64_t v48 = *((void *)&v68 + 1);
    do
    {
      uint64_t v49 = *(void *)(*(void *)v46 + 24);
      uint64_t v50 = *(void *)(*(void *)v46 + 32);
      uint64_t v51 = *(void *)(*(void *)v46 + 8);
      uint64_t v52 = *(void *)(*(void *)v46 + 16);
      if (v48 >= (unint64_t)v69)
      {
        int v53 = (void *)v68;
        unint64_t v54 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v48 - v68) >> 3);
        unint64_t v55 = v54 + 1;
        if (v54 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(v69 - v68) >> 3) > v55) {
          unint64_t v55 = 0x999999999999999ALL * ((uint64_t)(v69 - v68) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v69 - v68) >> 3) >= 0x333333333333333) {
          unint64_t v56 = 0x666666666666666;
        }
        else {
          unint64_t v56 = v55;
        }
        if (v56)
        {
          unint64_t v56 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v56);
          unint64_t v48 = *((void *)&v68 + 1);
          int v53 = (void *)v68;
        }
        else
        {
          uint64_t v57 = 0;
        }
        unint64_t v58 = v56 + 40 * v54;
        *(void *)unint64_t v58 = v50;
        *(void *)(v58 + 8) = v49;
        *(void *)(v58 + 16) = v51;
        *(void *)(v58 + 24) = v52;
        *(_WORD *)(v58 + 32) = 1;
        unint64_t v59 = v58;
        if ((void *)v48 != v53)
        {
          do
          {
            long long v60 = *(_OWORD *)(v48 - 40);
            long long v61 = *(_OWORD *)(v48 - 24);
            *(_WORD *)(v59 - 8) = *(_WORD *)(v48 - 8);
            *(_OWORD *)(v59 - 24) = v61;
            *(_OWORD *)(v59 - 40) = v60;
            v59 -= 40;
            v48 -= 40;
          }
          while ((void *)v48 != v53);
          int v53 = (void *)v68;
        }
        unint64_t v48 = v58 + 40;
        *(void *)&long long v68 = v59;
        *((void *)&v68 + 1) = v58 + 40;
        *(void *)&long long v69 = v56 + 40 * v57;
        if (v53) {
          operator delete(v53);
        }
      }
      else
      {
        *(void *)unint64_t v48 = v50;
        *(void *)(v48 + 8) = v49;
        *(void *)(v48 + 16) = v51;
        *(void *)(v48 + 24) = v52;
        *(_WORD *)(v48 + 32) = 1;
        v48 += 40;
      }
      *((void *)&v68 + 1) = v48;
      v46 += 8;
    }
    while (v46 != v47);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v101);

  HDStatisticsCollectionEngine<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::operator=((void *)(v64 + 112), (uint64_t)&v66);
  if ((void)v68)
  {
    *((void *)&v68 + 1) = v68;
    operator delete((void *)v68);
  }
  HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::~HDStatisticsBucket((uint64_t)v67);
}

void sub_1BD0BA1EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, ...)
{
  va_start(va, a8);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x408]);
  HDStatisticsCollectionEngine<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_WORD *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_WORD *)(a1 + 192) = 0;
  *(void *)(a1 + 256) = a1 + 264;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_DWORD *)(a1 + 312) = 1065353216;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(void *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 376) = 1065353216;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_DWORD *)(a1 + 416) = 1065353216;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_DWORD *)(a1 + 456) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 472);
  if (v2)
  {
    *(void *)(a1 + 480) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::~HDStatisticsBucket(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 424);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 384);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 344);
  uint64_t v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(void *)(a1 + 328) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 280);
  std::__tree<long>::destroy(*(void **)(a1 + 264));
  id v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(void *)(a1 + 104) = v3;
    operator delete(v3);
  }
  objc_destroyWeak((id *)(a1 + 88));
  uint64_t v4 = *(void **)(a1 + 64);
  if (v4)
  {
    *(void *)(a1 + 72) = v4;
    operator delete(v4);
  }

  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_configureForStartTime(uint64_t a1)
{
  uint64_t v29 = 0;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
    uint64_t v4 = [v2 dateIntervalContainingDate:v3 index:&v29];

    uint64_t v5 = [v4 startDate];
    [v5 timeIntervalSinceReferenceDate];
    double v7 = v6;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
LABEL_5:
    double v13 = v9;

    goto LABEL_6;
  }
  id v10 = *(id *)(a1 + 64);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v11 = [v10 startDate];
    [v11 timeIntervalSinceReferenceDate];
    double v7 = v12;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
    goto LABEL_5;
  }
  double v7 = -1.79769313e308;
  double v13 = 1.79769313e308;
LABEL_6:

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::HDStatisticsBucket((uint64_t)v22, WeakRetained, v7, v13);

  if (*(void *)(a1 + 32) == 1) {
    char v24 = 1;
  }
  uint64_t v23 = *(void *)(a1 + 56);
  char v25 = *(unsigned char *)(a1 + 24) & 1;
  if (v28 != (char *)(a1 + 72)) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v28, *(char **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4);
  }
  objc_storeStrong(&v27, *(id *)(a1 + 632));
  if (!*(void *)(a1 + 40)) {
    int v26 = 0;
  }
  uint64_t v15 = v29;
  HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v22);
  uint64_t v18 = v15;
  HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::HDStatisticsBucket((uint64_t)v19, (uint64_t)v17);
  long long __p = 0u;
  long long v21 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::operator=((void *)(a1 + 112), (uint64_t)&v18);

  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::~HDStatisticsBucket((uint64_t)v19);
  HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::~HDStatisticsBucket((uint64_t)v17);
  *(unsigned char *)(a1 + 616) = 0;
  return HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::~HDStatisticsBucket((uint64_t)v22);
}

void sub_1BD0BA708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *HDStatisticsCollectionEngine<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::operator=(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::operator=((uint64_t)(a1 + 1), a2 + 8);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 59), (__n128 *)(a2 + 472));
  uint64_t v4 = *(void *)(a2 + 496);
  *(void *)(a2 + 496) = 0;
  uint64_t v5 = (void *)a1[62];
  a1[62] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 96);
  double v7 = *(unsigned char **)(a2 + 104);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(void *)(a1 + 96) = v10;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(void *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  long long v12 = *(_OWORD *)(a2 + 136);
  long long v13 = *(_OWORD *)(a2 + 152);
  long long v14 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v14;
  *(_OWORD *)(a1 + 152) = v13;
  *(_OWORD *)(a1 + 136) = v12;
  long long v15 = *(_OWORD *)(a2 + 200);
  long long v16 = *(_OWORD *)(a2 + 216);
  uint64_t v17 = *(void *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v16;
  *(_OWORD *)(a1 + 200) = v15;
  uint64_t v18 = (void *)(a1 + 264);
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 248) = v17;
  *(void *)(a1 + 256) = a1 + 264;
  unint64_t v19 = *(void **)(a2 + 256);
  if (v19 != (void *)(a2 + 264))
  {
    unint64_t v20 = 0;
    long long v21 = (void *)(a1 + 264);
    while (1)
    {
      uint64_t v22 = v19[4];
      uint64_t v23 = (void *)(a1 + 264);
      if (v21 == v18) {
        goto LABEL_12;
      }
      char v24 = v20;
      char v25 = (void *)(a1 + 264);
      if (v20)
      {
        do
        {
          uint64_t v23 = v24;
          char v24 = (void *)v24[1];
        }
        while (v24);
      }
      else
      {
        do
        {
          uint64_t v23 = (void *)v25[2];
          BOOL v26 = *v23 == (void)v25;
          char v25 = v23;
        }
        while (v26);
      }
      if (v23[4] < v22)
      {
LABEL_12:
        if (v20) {
          id v27 = (uint64_t **)v23;
        }
        else {
          id v27 = (uint64_t **)(a1 + 264);
        }
        if (v20) {
          BOOL v28 = (uint64_t **)(v23 + 1);
        }
        else {
          BOOL v28 = (uint64_t **)(a1 + 264);
        }
        if (!*v28)
        {
LABEL_28:
          uint64_t v31 = (uint64_t *)operator new(0xB0uLL);
          *((_OWORD *)v31 + 2) = *((_OWORD *)v19 + 2);
          long long v32 = *((_OWORD *)v19 + 3);
          long long v33 = *((_OWORD *)v19 + 4);
          long long v34 = *((_OWORD *)v19 + 6);
          *((_OWORD *)v31 + 5) = *((_OWORD *)v19 + 5);
          *((_OWORD *)v31 + 6) = v34;
          *((_OWORD *)v31 + 3) = v32;
          *((_OWORD *)v31 + 4) = v33;
          long long v35 = *((_OWORD *)v19 + 7);
          long long v36 = *((_OWORD *)v19 + 8);
          long long v37 = *((_OWORD *)v19 + 10);
          *((_OWORD *)v31 + 9) = *((_OWORD *)v19 + 9);
          *((_OWORD *)v31 + 10) = v37;
          *((_OWORD *)v31 + 7) = v35;
          *((_OWORD *)v31 + 8) = v36;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 256), (uint64_t)v27, v28, v31);
        }
      }
      else
      {
        BOOL v28 = (uint64_t **)(a1 + 264);
        id v27 = (uint64_t **)(a1 + 264);
        if (!v20) {
          goto LABEL_28;
        }
        uint64_t v29 = v20;
        while (1)
        {
          while (1)
          {
            id v27 = (uint64_t **)v29;
            uint64_t v30 = v29[4];
            if (v30 <= v22) {
              break;
            }
            uint64_t v29 = *v27;
            BOOL v28 = v27;
            if (!*v27) {
              goto LABEL_28;
            }
          }
          if (v30 >= v22) {
            break;
          }
          uint64_t v29 = v27[1];
          if (!v29)
          {
            BOOL v28 = v27 + 1;
            goto LABEL_28;
          }
        }
      }
      long long v38 = (void *)v19[1];
      if (v38)
      {
        do
        {
          long long v39 = v38;
          long long v38 = (void *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          long long v39 = (void *)v19[2];
          BOOL v26 = *v39 == (void)v19;
          unint64_t v19 = v39;
        }
        while (!v26);
      }
      if (v39 == (void *)(a2 + 264)) {
        break;
      }
      unint64_t v20 = (void *)*v18;
      long long v21 = *(void **)(a1 + 256);
      unint64_t v19 = v39;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 280, a2 + 280);
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 320), *(const void **)(a2 + 320), *(void *)(a2 + 328), (uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 344, a2 + 344);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 384, a2 + 384);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 424, a2 + 424);
  return a1;
}

void sub_1BD0BAAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, id *location, void **a12)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v16);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v15);
  unint64_t v19 = *v14;
  if (*v14)
  {
    *(void *)(v12 + 328) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v13);
  std::__tree<long>::destroy(*v17);
  unint64_t v20 = *a10;
  if (*a10)
  {
    *(void *)(v12 + 104) = v20;
    operator delete(v20);
  }
  objc_destroyWeak(location);
  long long v21 = *a12;
  if (*a12)
  {
    *(void *)(v12 + 72) = v21;
    operator delete(v21);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::operator=(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  long long v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v5;

  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  id WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  uint64_t v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(void *)(a1 + 104) = v9;
    operator delete(v9);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 96) = 0;
  long long v10 = *(_OWORD *)(a2 + 152);
  long long v11 = *(_OWORD *)(a2 + 168);
  long long v12 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 184) = v12;
  *(_OWORD *)(a1 + 168) = v11;
  *(_OWORD *)(a1 + 152) = v10;
  long long v13 = *(_OWORD *)(a2 + 216);
  long long v14 = *(_OWORD *)(a2 + 232);
  uint64_t v15 = *(void *)(a2 + 248);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(void *)(a1 + 248) = v15;
  *(_OWORD *)(a1 + 232) = v14;
  *(_OWORD *)(a1 + 216) = v13;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  uint64_t v16 = a1 + 264;
  std::__tree<long>::destroy(*(void **)(a1 + 264));
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  uint64_t v17 = *(void *)(a2 + 264);
  *(void *)(a1 + 264) = v17;
  uint64_t v18 = *(void *)(a2 + 272);
  *(void *)(a1 + 272) = v18;
  if (v18)
  {
    *(void *)(v17 + 16) = v16;
    *(void *)(a2 + 256) = a2 + 264;
    *(void *)(a2 + 264) = 0;
    *(void *)(a2 + 272) = 0;
  }
  else
  {
    *(void *)(a1 + 256) = v16;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 280, (uint64_t *)(a2 + 280));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 320, (__n128 *)(a2 + 320));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 344, (uint64_t *)(a2 + 344));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 384, (uint64_t *)(a2 + 384));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 424, (uint64_t *)(a2 + 424));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_statisticsFromFinishedBucket(uint64_t a1, double *a2)
{
  uint64_t v126 = *MEMORY[0x1E4F143B8];
  double v4 = *a2;
  id v5 = objc_alloc(MEMORY[0x1E4F1C9C8]);
  long long v6 = a2 + 5;
  if (v4 != -1.79769313e308) {
    long long v6 = a2;
  }
  id v110 = (id)[v5 initWithTimeIntervalSinceReferenceDate:*v6];
  uint64_t v112 = (uint64_t)a2;
  if (a2[1] == 1.79769313e308) {
    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:a2[6]];
  }
  else {
    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:a2[1]];
  }
  uint64_t v8 = (void *)v7;
  id v9 = *(id *)(a1 + 16);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v10 = *(id *)(a1 + 16);
    if ([v10 shouldUseUnderlyingTypeForStatistics])
    {
      uint64_t v11 = [v10 underlyingSampleType];

      id v9 = (id)v11;
    }
  }
  long long v12 = (void *)[objc_alloc(MEMORY[0x1E4F2B5B0]) initWithDataType:v9 startDate:v110 endDate:v8];
  if (*(unsigned char *)(a1 + 24))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      id v14 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      uint64_t v15 = *(uint64_t **)(v112 + 320);
      uint64_t v16 = *(uint64_t **)(v112 + 328);
      while (v15 != v16)
      {
        uint64_t v17 = *v15;
        id v18 = objc_loadWeakRetained((id *)(a1 + 48));
        unint64_t v19 = [v18 sourceForSourceID:v17];

        if (v19)
        {
          if (([v14 containsObject:v19] & 1) == 0) {
            [v14 addObject:v19];
          }
        }

        ++v15;
      }
      unint64_t v20 = (void *)[v14 copy];
      [v12 _setSources:v20];
    }
  }

  v124[0] = &unk_1F1723D70;
  uint64_t v125 = v124;
  id v111 = v12;
  uint64_t v114 = *(void *)(a1 + 24);
  long long v21 = *(_OWORD *)(v112 + 200);
  long long v22 = *(_OWORD *)(v112 + 232);
  long long v121 = *(_OWORD *)(v112 + 216);
  long long v122 = v22;
  uint64_t v123 = *(void *)(v112 + 248);
  long long v23 = *(_OWORD *)(v112 + 136);
  long long v24 = *(_OWORD *)(v112 + 168);
  long long v117 = *(_OWORD *)(v112 + 152);
  long long v118 = v24;
  long long v119 = *(_OWORD *)(v112 + 184);
  long long v120 = v21;
  *(_OWORD *)long long __p = *(_OWORD *)(v112 + 120);
  long long v116 = v23;
  if (!v125) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v25 = (*(uint64_t (**)(void *, void **))(*v125 + 48))(v125, __p);
  double v26 = *(double *)(v25 + 8);
  double v27 = *(double *)(v25 + 16);
  unint64_t v28 = *(void *)(v25 + 32);
  double v30 = *(double *)(v25 + 40);
  double v29 = *(double *)(v25 + 48);
  double v31 = *(double *)(v25 + 56);
  double v32 = *(double *)(v25 + 80);
  int v33 = *(unsigned __int8 *)(v25 + 112);
  double v34 = *(double *)(v25 + 120);
  double v35 = *(double *)(v25 + 128);
  uint64_t v36 = *(void *)(a1 + 24);
  uint64_t v37 = _HKStatisticsOptionBaselineRelativeQuantities();
  long long v38 = *(void **)(a1 + 16);
  if ((v37 & v36) != 0) {
    [v38 _unitForChangeInCanonicalUnit];
  }
  else {
  long long v113 = [v38 canonicalUnit];
  }
  if ((v114 & 2) != 0)
  {
    if (v33) {
      double v34 = v34 + (v32 - v34) * 22.5 / (v35 + 22.5);
    }
    long long v39 = [MEMORY[0x1E4F2B370] quantityWithUnit:v113 doubleValue:v34];
    [v111 setAverageQuantity:v39];
  }
  if ((v114 & 4) != 0)
  {
    long long v40 = [MEMORY[0x1E4F2B370] quantityWithUnit:v113 doubleValue:v27];
    [v111 setMinimumQuantity:v40];
  }
  if ((v114 & 8) != 0)
  {
    uint64_t v41 = [MEMORY[0x1E4F2B370] quantityWithUnit:v113 doubleValue:v26];
    [v111 setMaximumQuantity:v41];
  }
  if ((v114 & 0x20) != 0)
  {
    __int16 v42 = [MEMORY[0x1E4F2B370] quantityWithUnit:v113 doubleValue:v30];
    [v111 setMostRecentQuantity:v42];

    double v43 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v29, v31);
    [v111 setMostRecentQuantityDateInterval:v43];
  }
  [v111 setDataCount:v28];
  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    goto LABEL_167;
  }
  if ((v114 & 2) != 0) {
    id v107 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else {
    id v107 = 0;
  }
  if ((v114 & 4) != 0) {
    id v106 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else {
    id v106 = 0;
  }
  if ((v114 & 8) != 0) {
    id v104 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else {
    id v104 = 0;
  }
  if ((v114 & 0x20) != 0)
  {
    id v103 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v105 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else
  {
    id v105 = 0;
    id v103 = 0;
  }
  id v109 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  *(_OWORD *)long long __p = 0u;
  long long v116 = 0u;
  LODWORD(v117) = 1065353216;
  double v44 = *(void **)(v112 + 256);
  if (v44 == (void *)(v112 + 264)) {
    goto LABEL_158;
  }
  do
  {
    double v45 = HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_bundleIdentifierForSourceID(v112, v44[4]);
    uint64_t v46 = v45;
    if (!v45) {
      goto LABEL_123;
    }
    unint64_t v47 = [v45 hash];
    unint64_t v48 = v47;
    unint64_t v49 = (unint64_t)__p[1];
    if (!__p[1]) {
      goto LABEL_66;
    }
    uint8x8_t v50 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v50.i16[0] = vaddlv_u8(v50);
    unint64_t v51 = v50.u32[0];
    if (v50.u32[0] > 1uLL)
    {
      unint64_t v28 = v47;
      if ((void *)v47 >= __p[1]) {
        unint64_t v28 = v47 % (unint64_t)__p[1];
      }
    }
    else
    {
      unint64_t v28 = ((unint64_t)__p[1] - 1) & v47;
    }
    uint64_t v52 = (void **)*((void *)__p[0] + v28);
    if (!v52 || (int v53 = (char *)*v52) == 0)
    {
LABEL_66:
      int v53 = (char *)operator new(0xA0uLL);
      *(void *)int v53 = 0;
      *((void *)v53 + 1) = v48;
      *((void *)v53 + 2) = v46;
      *(_OWORD *)(v53 + 24) = 0u;
      *(_OWORD *)(v53 + 40) = 0u;
      *(_OWORD *)(v53 + 56) = 0u;
      *(_OWORD *)(v53 + 72) = 0u;
      *(_OWORD *)(v53 + 88) = 0u;
      *(_OWORD *)(v53 + 104) = 0u;
      *(_OWORD *)(v53 + 120) = 0u;
      *(_OWORD *)(v53 + 136) = 0u;
      *((void *)v53 + 19) = 0;
      float v59 = (float)(unint64_t)(*((void *)&v116 + 1) + 1);
      if (v49 && (float)(*(float *)&v117 * (float)v49) >= v59)
      {
LABEL_112:
        int8x16_t v75 = __p[0];
        uint64_t v76 = (void *)*((void *)__p[0] + v28);
        if (v76)
        {
          *(void *)int v53 = *v76;
        }
        else
        {
          *(void *)int v53 = v116;
          *(void *)&long long v116 = v53;
          v75[v28] = &v116;
          if (!*(void *)v53)
          {
LABEL_121:
            ++*((void *)&v116 + 1);
            goto LABEL_122;
          }
          unint64_t v77 = *(void *)(*(void *)v53 + 8);
          if ((v49 & (v49 - 1)) != 0)
          {
            if (v77 >= v49) {
              v77 %= v49;
            }
          }
          else
          {
            v77 &= v49 - 1;
          }
          uint64_t v76 = (char *)__p[0] + 8 * v77;
        }
        void *v76 = v53;
        goto LABEL_121;
      }
      BOOL v60 = (v49 & (v49 - 1)) != 0;
      if (v49 < 3) {
        BOOL v60 = 1;
      }
      unint64_t v61 = v60 | (2 * v49);
      unint64_t v62 = vcvtps_u32_f32(v59 / *(float *)&v117);
      if (v61 <= v62) {
        int8x8_t prime = (int8x8_t)v62;
      }
      else {
        int8x8_t prime = (int8x8_t)v61;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v49 = (unint64_t)__p[1];
      if ((void *)*(void *)&prime > __p[1]) {
        goto LABEL_78;
      }
      if ((void *)*(void *)&prime < __p[1])
      {
        unint64_t v70 = vcvtps_u32_f32((float)*((unint64_t *)&v116 + 1) / *(float *)&v117);
        if (__p[1] < (void *)3
          || (uint8x8_t v71 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v71.i16[0] = vaddlv_u8(v71), v71.u32[0] > 1uLL))
        {
          unint64_t v70 = std::__next_prime(v70);
        }
        else
        {
          uint64_t v72 = 1 << -(char)__clz(v70 - 1);
          if (v70 >= 2) {
            unint64_t v70 = v72;
          }
        }
        if (*(void *)&prime <= v70) {
          int8x8_t prime = (int8x8_t)v70;
        }
        if (*(void *)&prime >= v49)
        {
          unint64_t v49 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_78:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v64 = operator new(8 * *(void *)&prime);
            id v65 = __p[0];
            __p[0] = v64;
            if (v65) {
              operator delete(v65);
            }
            uint64_t v66 = 0;
            __p[1] = (void *)prime;
            do
              *((void *)__p[0] + v66++) = 0;
            while (*(void *)&prime != v66);
            uint64_t v67 = (void **)v116;
            if ((void)v116)
            {
              unint64_t v68 = *(void *)(v116 + 8);
              uint8x8_t v69 = (uint8x8_t)vcnt_s8(prime);
              v69.i16[0] = vaddlv_u8(v69);
              if (v69.u32[0] > 1uLL)
              {
                if (v68 >= *(void *)&prime) {
                  v68 %= *(void *)&prime;
                }
              }
              else
              {
                v68 &= *(void *)&prime - 1;
              }
              *((void *)__p[0] + v68) = &v116;
              for (i = *v67; i; unint64_t v68 = v74)
              {
                unint64_t v74 = i[1];
                if (v69.u32[0] > 1uLL)
                {
                  if (v74 >= *(void *)&prime) {
                    v74 %= *(void *)&prime;
                  }
                }
                else
                {
                  v74 &= *(void *)&prime - 1;
                }
                if (v74 != v68)
                {
                  if (!*((void *)__p[0] + v74))
                  {
                    *((void *)__p[0] + v74) = v67;
                    goto LABEL_103;
                  }
                  void *v67 = (void *)*i;
                  void *i = **((void **)__p[0] + v74);
                  **((void **)__p[0] + v74) = i;
                  uint64_t i = v67;
                }
                unint64_t v74 = v68;
LABEL_103:
                uint64_t v67 = (void **)i;
                uint64_t i = (void *)*i;
              }
            }
            unint64_t v49 = (unint64_t)prime;
            goto LABEL_107;
          }
          long long v87 = __p[0];
          __p[0] = 0;
          if (v87) {
            operator delete(v87);
          }
          unint64_t v49 = 0;
          __p[1] = 0;
        }
      }
LABEL_107:
      if ((v49 & (v49 - 1)) != 0)
      {
        if (v48 >= v49) {
          unint64_t v28 = v48 % v49;
        }
        else {
          unint64_t v28 = v48;
        }
      }
      else
      {
        unint64_t v28 = (v49 - 1) & v48;
      }
      goto LABEL_112;
    }
    unint64_t v108 = (unint64_t)__p[1] - 1;
    while (1)
    {
      unint64_t v54 = *((void *)v53 + 1);
      if (v54 == v48) {
        break;
      }
      if (v51 > 1)
      {
        if (v54 >= v49) {
          v54 %= v49;
        }
      }
      else
      {
        v54 &= v108;
      }
      if (v54 != v28) {
        goto LABEL_66;
      }
LABEL_65:
      int v53 = *(char **)v53;
      if (!v53) {
        goto LABEL_66;
      }
    }
    id v55 = *((id *)v53 + 2);
    id v56 = v46;
    uint64_t v57 = v56;
    if (v55 != v56)
    {
      char v58 = [v55 isEqualToString:v56];

      if (v58) {
        goto LABEL_122;
      }
      goto LABEL_65;
    }

LABEL_122:
    *(_OWORD *)(v53 + 24) = *(_OWORD *)(v44 + 5);
    long long v78 = *(_OWORD *)(v44 + 7);
    long long v79 = *(_OWORD *)(v44 + 9);
    long long v80 = *(_OWORD *)(v44 + 11);
    *(_OWORD *)(v53 + 88) = *(_OWORD *)(v44 + 13);
    *(_OWORD *)(v53 + 72) = v80;
    *(_OWORD *)(v53 + 56) = v79;
    *(_OWORD *)(v53 + 40) = v78;
    long long v81 = *(_OWORD *)(v44 + 15);
    long long v82 = *(_OWORD *)(v44 + 17);
    long long v83 = *(_OWORD *)(v44 + 19);
    *((void *)v53 + 19) = v44[21];
    *(_OWORD *)(v53 + 136) = v83;
    *(_OWORD *)(v53 + 120) = v82;
    *(_OWORD *)(v53 + 104) = v81;

LABEL_123:
    uint64_t v84 = (void *)v44[1];
    if (v84)
    {
      do
      {
        int64_t v85 = v84;
        uint64_t v84 = (void *)*v84;
      }
      while (v84);
    }
    else
    {
      do
      {
        int64_t v85 = (void *)v44[2];
        BOOL v86 = *v85 == (void)v44;
        double v44 = v85;
      }
      while (!v86);
    }
    double v44 = v85;
  }
  while (v85 != (void *)(v112 + 264));
  for (uint64_t j = (uint64_t **)v116; j; uint64_t j = (uint64_t **)*j)
  {
    int v89 = j[2];
    if ((v114 & 2) != 0)
    {
      if (!v125) {
        goto LABEL_170;
      }
      long long v90 = (void *)MEMORY[0x1E4F2B370];
      uint64_t v91 = (*(uint64_t (**)(void *, uint64_t *))(*v125 + 48))(v125, (uint64_t *)j + 3);
      if (*(unsigned char *)(v91 + 112)) {
        double v92 = *(double *)(v91 + 120)
      }
            + (*(double *)(v91 + 80) - *(double *)(v91 + 120)) * 22.5 / (*(double *)(v91 + 128) + 22.5);
      else {
        double v92 = *(double *)(v91 + 120);
      }
      uint64_t v93 = [v90 quantityWithUnit:v113 doubleValue:v92];
      [v107 setObject:v93 forKeyedSubscript:v89];
    }
    if ((v114 & 4) != 0)
    {
      if (!v125) {
        goto LABEL_170;
      }
      int v94 = objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v113, *(double *)((*(uint64_t (**)(void *, uint64_t *))(*v125 + 48))(v125, (uint64_t *)j + 3) + 16));
      [v106 setObject:v94 forKeyedSubscript:v89];
    }
    if ((v114 & 8) != 0)
    {
      if (!v125) {
        goto LABEL_170;
      }
      long long v95 = objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v113, *(double *)((*(uint64_t (**)(void *, uint64_t *))(*v125 + 48))(v125, (uint64_t *)j + 3) + 8));
      [v104 setObject:v95 forKeyedSubscript:v89];
    }
    if ((v114 & 0x20) != 0)
    {
      if (!v125) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v96 = (*(uint64_t (**)(void *, uint64_t *))(*v125 + 48))(v125, (uint64_t *)j + 3);
      double v97 = *(double *)(v96 + 48);
      double v98 = *(double *)(v96 + 56);
      long long v99 = [MEMORY[0x1E4F2B370] quantityWithUnit:v113 doubleValue:*(double *)(v96 + 40)];
      [v103 setObject:v99 forKeyedSubscript:v89];

      int v100 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v97, v98);
      [v105 setObject:v100 forKeyedSubscript:v89];
    }
    if (!v125) {
LABEL_170:
    }
      std::__throw_bad_function_call[abi:ne180100]();
    long long v101 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)((*(uint64_t (**)(void *, uint64_t *))(*v125 + 48))(v125, (uint64_t *)j + 3) + 32));
    [v109 setObject:v101 forKeyedSubscript:v89];
  }
LABEL_158:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>>>::~__hash_table((uint64_t)__p);
  if ((v114 & 2) != 0) {
    [v111 setAverageQuantityBySource:v107];
  }
  if ((v114 & 4) != 0) {
    [v111 setMinimumQuantityBySource:v106];
  }
  if ((v114 & 8) != 0) {
    [v111 setMaximumQuantityBySource:v104];
  }
  if ((v114 & 0x20) != 0)
  {
    [v111 setMostRecentQuantityBySource:v103];
    [v111 setMostRecentQuantityDateIntervalBySource:v105];
  }
  [v111 setDataCountBySource:v109];

LABEL_167:
  std::__function::__value_func<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)>::~__value_func[abi:ne180100](v124);

  return v111;
}

void sub_1BD0BBA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21)
{
  std::__function::__value_func<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)>::~__value_func[abi:ne180100]((void *)(v21 - 192));
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 304);
  uint64_t v2 = *(void *)(a1 + 320);
  if (v1 != (*(void *)(a1 + 328) - v2) >> 3)
  {
    double v4 = (void **)(a1 + 320);
    *(void *)(a1 + 328) = v2;
    std::vector<long long>::reserve((void **)(a1 + 320), v1);
    id v5 = *(void **)(a1 + 296);
    if (v5)
    {
      long long v6 = *(char **)(a1 + 328);
      do
      {
        uint64_t v7 = v5[2];
        unint64_t v8 = *(void *)(a1 + 336);
        if ((unint64_t)v6 >= v8)
        {
          id v10 = (char *)*v4;
          uint64_t v11 = (v6 - (unsigned char *)*v4) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            id v10 = *(char **)(a1 + 320);
            long long v6 = *(char **)(a1 + 328);
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v16 = (void *)(v14 + 8 * v11);
          void *v16 = v7;
          id v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            uint64_t v17 = *((void *)v6 - 1);
            v6 -= 8;
            *--uint64_t v16 = v17;
          }
          *(void *)(a1 + 320) = v16;
          *(void *)(a1 + 328) = v9;
          *(void *)(a1 + 336) = v14 + 8 * v15;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)long long v6 = v7;
          id v9 = v6 + 8;
        }
        *(void *)(a1 + 328) = v9;
        id v5 = (void *)*v5;
        long long v6 = v9;
      }
      while (v5);
    }
    id v18 = (id *)(a1 + 88);
    id WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      id v20 = objc_loadWeakRetained(v18);
      [v20 orderSourceIDs:v4];
    }
  }
}

void sub_1BD0BBDB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2) {
    a2 = v4 * floor(a2 / v4);
  }
  double v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    long long v121 = (void **)(a1 + 96);
    long long v117 = (double **)(a1 + 64);
    uint64_t v115 = a1 + 120;
    location = (id *)(a1 + 88);
    id v111 = (void *)(a1 + 264);
    while (1)
    {
      uint64_t v6 = *(void *)(a1 + 96);
      uint64_t v7 = *(long long **)(a1 + 104);
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4);
      if (v8) {
        break;
      }
LABEL_127:
      *(double *)(a1 + 56) = a2;
LABEL_128:
      double v108 = *(double *)(a1 + 56);
      if (v108 == v5)
      {
        id v109 = [MEMORY[0x1E4F28B00] currentHandler];
        id v110 = [NSString stringWithUTF8String:"void HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeThroughTime(double) [Statistics = HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>]"];
        [v109 handleFailureInFunction:v110 file:@"HDStatisticsBucket.hpp" lineNumber:234 description:@"Failed to make forward progress during statistics merge."];

        double v108 = *(double *)(a1 + 56);
      }
      double v5 = v108;
      if (v108 >= a2) {
        return;
      }
    }
    if (v8 != 1)
    {
      double v17 = a2;
      double v18 = a2;
      double v19 = v5;
      uint64_t v20 = *(void *)(a1 + 96);
      if ((long long *)v6 != v7)
      {
        do
        {
          double v21 = *(double *)(v20 + 8);
          double v22 = *(double *)(v20 + 16);
          if (v21 > v19 && v21 < v18) {
            double v18 = *(double *)(v20 + 8);
          }
          if (v22 > v5) {
            double v24 = *(double *)(v20 + 16);
          }
          else {
            double v24 = v17;
          }
          if (v22 < v17)
          {
            double v19 = v5;
            double v17 = v24;
          }
          v20 += 48;
        }
        while ((long long *)v20 != v7);
      }
      if (v17 >= v18) {
        double v25 = v18;
      }
      else {
        double v25 = v17;
      }
      double v26 = *(double *)(a1 + 16);
      if (v26 > 0.0)
      {
        double v27 = v26 * floor(v25 / v26);
        double v28 = v26 * floor((v26 + v5) / v26);
        if (v27 >= v28) {
          double v25 = v27;
        }
        else {
          double v25 = v28;
        }
      }
      char *v121 = 0;
      v121[1] = 0;
      v121[2] = 0;
      long long v113 = (long long *)v6;
      if ((long long *)v6 != v7)
      {
        if (v8 > 0x555555555555555) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        double v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4));
        double v32 = *(char **)(a1 + 96);
        double v31 = *(char **)(a1 + 104);
        int v33 = v29;
        if (v31 != v32)
        {
          do
          {
            long long v34 = *((_OWORD *)v31 - 3);
            long long v35 = *((_OWORD *)v31 - 2);
            *(_OWORD *)(v33 - 21) = *(_OWORD *)(v31 - 21);
            *((_OWORD *)v33 - 3) = v34;
            *((_OWORD *)v33 - 2) = v35;
            v33 -= 48;
            v31 -= 48;
          }
          while (v31 != v32);
          double v31 = (char *)*v121;
        }
        *(void *)(a1 + 96) = v33;
        *(void *)(a1 + 104) = v29;
        *(void *)(a1 + 112) = &v29[48 * v30];
        if (v31) {
          operator delete(v31);
        }
      }
      HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_updateSourceOrder(a1);
      id WeakRetained = objc_loadWeakRetained(location);

      if (WeakRetained)
      {
        *(void *)&long long v123 = a1;
        unint64_t v37 = 126 - 2 * __clz(v8);
        unint64_t v38 = (unint64_t)v113;
        if (v113 == v7) {
          uint64_t v39 = 0;
        }
        else {
          uint64_t v39 = v37;
        }
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*,false>((unint64_t)v113, v7, (uint64_t)&v123, v39, 1);
      }
      else
      {
        unint64_t v42 = 126 - 2 * __clz(v8);
        unint64_t v38 = (unint64_t)v113;
        if (v113 == v7) {
          uint64_t v39 = 0;
        }
        else {
          uint64_t v39 = v42;
        }
      }
      std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*,false>(v38, v7, v39, 1);
      if (*(unsigned char *)(a1 + 25)) {
        id v114 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      }
      else {
        id v114 = 0;
      }
      if (v113 == v7)
      {
LABEL_109:
        double v92 = *(void **)(a1 + 256);
        if (v92 != v111)
        {
          do
          {
            uint64_t v93 = (void *)v92[1];
            if (v93)
            {
              do
              {
                int v94 = v93;
                uint64_t v93 = (void *)*v93;
              }
              while (v93);
            }
            else
            {
              do
              {
                int v94 = (void *)v92[2];
                BOOL v95 = *v94 == (void)v92;
                double v92 = v94;
              }
              while (!v95);
            }
            double v92 = v94;
          }
          while (v94 != v111);
        }
        *(double *)(a1 + 56) = v25;

        if (v113) {
          operator delete(v113);
        }
        goto LABEL_128;
      }
      uint64_t v116 = 0;
      char v43 = 0;
      double v44 = v113;
      while (2)
      {
        long long v45 = v44[1];
        long long v123 = *v44;
        long long v124 = v45;
        uint64_t v125 = *((void *)v44 + 4);
        uint64_t v46 = v123;
        uint64_t v47 = v45;
        if (*(double *)&v45 - *((double *)&v123 + 1) - (v25 - *((double *)&v123 + 1)) < 0.01)
        {
          uint64_t v48 = 0;
          int v49 = 0;
          char v50 = 0;
          double v51 = 0.0;
          uint64_t v47 = 0;
          if (!(_BYTE)v125) {
            goto LABEL_62;
          }
LABEL_57:
          char v119 = v50;
          uint64_t v120 = v48;
          HDRawQuantitySample::applyMask((uint64_t)&v123, v117);
          int v52 = *((unsigned __int8 *)v44 + 42);
          int v53 = *((unsigned __int8 *)v44 + 41);
          char v118 = *((unsigned char *)v44 + 40);
          if (!(_BYTE)v125) {
            goto LABEL_90;
          }
          if (v43)
          {
            unint64_t v54 = *((void *)&v124 + 1);
            if (v116 == *((void *)&v124 + 1) || *(unsigned char *)(a1 + 24))
            {
              HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::addSample(v115, (double *)&v123, v52 == 0);
              int v52 = 1;
            }
          }
          else
          {
            HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::addSample(v115, (double *)&v123, v52 == 0);
            int v52 = 1;
            unint64_t v54 = *((void *)&v124 + 1);
            uint64_t v116 = *((void *)&v124 + 1);
          }
          if (!*(unsigned char *)(a1 + 25)) {
            goto LABEL_89;
          }
          id v65 = HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_bundleIdentifierForSourceID(a1, v54);
          if (!v65) {
            goto LABEL_88;
          }
          uint64_t v66 = [v114 objectForKeyedSubscript:v65];
          uint64_t v67 = v66;
          if (v66)
          {
            if ([v66 longLongValue] != v54 && !*(unsigned char *)(a1 + 24))
            {
LABEL_87:

LABEL_88:
LABEL_89:
              char v43 = 1;
LABEL_90:
              if (v49)
              {
                BOOL v80 = v52 != 0;
                long long v82 = *(char **)(a1 + 104);
                unint64_t v81 = *(void *)(a1 + 112);
                if ((unint64_t)v82 < v81)
                {
                  *(void *)long long v82 = v46;
                  *((double *)v82 + 1) = v51;
                  *((void *)v82 + 2) = v47;
                  *((void *)v82 + 3) = v120;
                  v82[32] = v49;
                  v82[33] = v119;
                  v82[40] = v118;
                  v82[41] = v53;
                  float v59 = v82 + 48;
                  v82[42] = v80;
                  goto LABEL_107;
                }
                uint64_t v76 = (char *)*v121;
                unint64_t v83 = 0xAAAAAAAAAAAAAAABLL * ((v82 - (unsigned char *)*v121) >> 4);
                unint64_t v84 = v83 + 1;
                if (v83 + 1 > 0x555555555555555) {
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v85 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v81 - (void)v76) >> 4);
                if (2 * v85 > v84) {
                  unint64_t v84 = 2 * v85;
                }
                if (v85 >= 0x2AAAAAAAAAAAAAALL) {
                  unint64_t v86 = 0x555555555555555;
                }
                else {
                  unint64_t v86 = v84;
                }
                if (v86)
                {
                  unint64_t v86 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v86);
                  uint64_t v76 = *(char **)(a1 + 96);
                  long long v82 = *(char **)(a1 + 104);
                }
                else
                {
                  uint64_t v87 = 0;
                }
                unint64_t v88 = v86 + 48 * v83;
                *(void *)unint64_t v88 = v46;
                *(double *)(v88 + 8) = v51;
                *(void *)(v88 + 16) = v47;
                *(void *)(v88 + 24) = v120;
                *(unsigned char *)(v88 + 32) = v49;
                *(unsigned char *)(v88 + 33) = v119;
                *(unsigned char *)(v88 + 40) = v118;
                *(unsigned char *)(v88 + 41) = v53;
                *(unsigned char *)(v88 + 42) = v80;
                unint64_t v89 = v88;
                if (v82 != v76)
                {
                  do
                  {
                    long long v90 = *((_OWORD *)v82 - 3);
                    long long v91 = *((_OWORD *)v82 - 2);
                    *(_OWORD *)(v89 - 21) = *(_OWORD *)(v82 - 21);
                    *(_OWORD *)(v89 - 48) = v90;
                    *(_OWORD *)(v89 - 32) = v91;
                    v89 -= 48;
                    v82 -= 48;
                  }
                  while (v82 != v76);
                  uint64_t v76 = (char *)*v121;
                }
                float v59 = (_OWORD *)(v88 + 48);
                *(void *)(a1 + 96) = v89;
                *(void *)(a1 + 104) = v88 + 48;
                *(void *)(a1 + 112) = v86 + 48 * v87;
                if (v76) {
LABEL_106:
                }
                  operator delete(v76);
                goto LABEL_107;
              }
              goto LABEL_108;
            }
          }
          else
          {
            unint64_t v77 = [NSNumber numberWithLongLong:v54];
            [v114 setObject:v77 forKeyedSubscript:v65];
          }
          unint64_t v78 = HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_canonicalSourceIDForSourceID(a1, v54);
          long long v79 = HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_statisticsForSource(a1, v78);
          HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::addSample((uint64_t)v79, (double *)&v123, v53 == 0);
          LOBYTE(v53) = 1;
          goto LABEL_87;
        }
        if (v25 - *((double *)&v123 + 1) < 0.01)
        {
          LOBYTE(v125) = 0;
          goto LABEL_62;
        }
        uint64_t v48 = *((void *)&v124 + 1);
        char v50 = BYTE1(v125);
        *(double *)&long long v124 = v25;
        double v51 = v25;
        int v49 = v125;
        if ((_BYTE)v125) {
          goto LABEL_57;
        }
LABEL_62:
        id v55 = *(long long **)(a1 + 104);
        unint64_t v56 = *(void *)(a1 + 112);
        if ((unint64_t)v55 < v56)
        {
          long long v57 = *v44;
          long long v58 = v44[2];
          v55[1] = v44[1];
          v55[2] = v58;
          long long *v55 = v57;
          float v59 = v55 + 3;
          goto LABEL_107;
        }
        unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (unsigned char *)*v121) >> 4);
        unint64_t v61 = v60 + 1;
        if (v60 + 1 > 0x555555555555555) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - (void)*v121) >> 4);
        if (2 * v62 > v61) {
          unint64_t v61 = 2 * v62;
        }
        if (v62 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v63 = 0x555555555555555;
        }
        else {
          unint64_t v63 = v61;
        }
        if (v63) {
          unint64_t v63 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v63);
        }
        else {
          uint64_t v64 = 0;
        }
        unint64_t v68 = (long long *)(v63 + 48 * v60);
        long long v69 = *v44;
        long long v70 = v44[2];
        v68[1] = v44[1];
        v68[2] = v70;
        long long *v68 = v69;
        uint64_t v72 = *(char **)(a1 + 96);
        uint8x8_t v71 = *(char **)(a1 + 104);
        char v73 = v68;
        if (v71 != v72)
        {
          do
          {
            long long v74 = *((_OWORD *)v71 - 3);
            long long v75 = *((_OWORD *)v71 - 2);
            *(long long *)((char *)v73 - 21) = *(_OWORD *)(v71 - 21);
            *(v73 - 3) = v74;
            *(v73 - 2) = v75;
            v73 -= 3;
            v71 -= 48;
          }
          while (v71 != v72);
          uint8x8_t v71 = (char *)*v121;
        }
        float v59 = v68 + 3;
        *(void *)(a1 + 96) = v73;
        *(void *)(a1 + 104) = v68 + 3;
        *(void *)(a1 + 112) = v63 + 48 * v64;
        if (v71)
        {
          uint64_t v76 = v71;
          goto LABEL_106;
        }
LABEL_107:
        *(void *)(a1 + 104) = v59;
LABEL_108:
        v44 += 3;
        if (v44 == v7) {
          goto LABEL_109;
        }
        continue;
      }
    }
    double v9 = *(double *)(v6 + 8);
    double v10 = *(double *)(v6 + 16);
    uint64_t v11 = *(void *)(v6 + 24);
    char v12 = *(unsigned char *)(v6 + 32);
    char v13 = *(unsigned char *)(v6 + 33);
    if (a2 - v9 >= 0.01)
    {
      if (v10 - v9 - (a2 - v9) < 0.01)
      {
        uint64_t v40 = 0;
        char v41 = 0;
        double v16 = 0.0;
        double v15 = *(double *)(v6 + 16);
        char v14 = *(unsigned char *)(v6 + 32);
        double v10 = 0.0;
        char v12 = 0;
LABEL_120:
        int v96 = *(unsigned __int8 *)(v6 + 42);
        int v97 = *(unsigned __int8 *)(v6 + 41);
        double v98 = *(uint64_t **)(a1 + 96);
        int v99 = *(unsigned __int8 *)(v6 + 40);
        uint64_t v100 = *v98;
        *((double *)&v123 + 1) = v9;
        *(double *)&long long v124 = v15;
        *((void *)&v124 + 1) = v11;
        LOBYTE(v125) = v14;
        BYTE1(v125) = v13;
        *(_DWORD *)((char *)&v125 + 2) = *(_DWORD *)((char *)v98 + 34);
        HIWORD(v125) = *((_WORD *)v98 + 19);
        *((double *)&v126 + 1) = v16;
        *(double *)&long long v127 = v10;
        *((void *)&v127 + 1) = v40;
        LOBYTE(v128) = v12;
        HIBYTE(v128) = v41;
        *(void *)&long long v123 = v100;
        *(void *)&long long v126 = v100;
        HDRawQuantitySample::applyMask((uint64_t)&v123, v117);
        BOOL v101 = v99 != 0;
        BOOL v102 = v97 != 0;
        BOOL v103 = v96 != 0;
        if ((_BYTE)v125)
        {
          HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::addSample(v115, (double *)&v123, v96 == 0);
          if (*(unsigned char *)(a1 + 25))
          {
            unint64_t v104 = HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_canonicalSourceIDForSourceID(a1, *((unint64_t *)&v124 + 1));
            id v105 = HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_statisticsForSource(a1, v104);
            HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::addSample((uint64_t)v105, (double *)&v123, v97 == 0);
          }
          BOOL v101 = 1;
          BOOL v102 = 1;
          BOOL v103 = 1;
        }
        if ((_BYTE)v128)
        {
          LOWORD(v122) = v128;
          long long v106 = v127;
          id v107 = (char *)*v121;
          *(_OWORD *)id v107 = v126;
          *((_OWORD *)v107 + 1) = v106;
          *((void *)v107 + 4) = v122;
          v107[40] = v101;
          v107[41] = v102;
          v107[42] = v103;
        }
        else
        {
          *(void *)(a1 + 104) = *(void *)(a1 + 96);
        }
        goto LABEL_127;
      }
      double v15 = a2;
      char v14 = *(unsigned char *)(v6 + 32);
      double v16 = a2;
    }
    else
    {
      char v14 = 0;
      double v15 = *(double *)(v6 + 16);
      double v16 = *(double *)(v6 + 8);
    }
    uint64_t v40 = *(void *)(v6 + 24);
    char v41 = *(unsigned char *)(v6 + 33);
    goto LABEL_120;
  }
}

void sub_1BD0BC718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  _Unwind_Resume(a1);
}

uint64_t **HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = a2;
  id v3 = *(void **)(a1 + 264);
  if (!v3) {
    goto LABEL_11;
  }
  double v4 = (uint64_t **)(a1 + 264);
  do
  {
    uint64_t v5 = v3[4];
    BOOL v6 = v5 < a2;
    if (v5 >= a2) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = v3 + 1;
    }
    if (!v6) {
      double v4 = (uint64_t **)v3;
    }
    id v3 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t **)(a1 + 264) || (uint64_t)v4[4] > a2)
  {
LABEL_11:
    unint64_t v8 = (uint64_t **)(a1 + 256);
    std::__tree<std::__value_type<long long,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 256), a2, &v10);
    double v4 = std::__tree<std::__value_type<long long,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v8, a2, &v10);
  }
  return v4 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    uint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((void *)(a1 + 344), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_bundleIdentifierForSourceID(a1, a2);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      id v10 = v6;
      uint64_t v7 = (void *)(a1 + 384);
      unint64_t v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        uint64_t v11 = &v10;
        *((void *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        id v6 = v10;
      }
    }
  }
  return a2;
}

void sub_1BD0BC8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  double v4 = (id *)(a1 + 88);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    id v6 = (void *)(a1 + 424);
    uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
    if (v7)
    {
      id v8 = (id)v7[3];
    }
    else
    {
      id v9 = objc_loadWeakRetained(v4);
      id v8 = [v9 bundleIdentifierForSourceID:a2];

      if (v8)
      {
        id v10 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
        objc_storeStrong(v10 + 3, v8);
      }
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1BD0BC9D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, void *a3)
{
  id v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        uint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        id v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        id v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    id v9 = (char *)operator new(0xB0uLL);
    *((void *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    *(_OWORD *)(v9 + 136) = 0u;
    *(_OWORD *)(v9 + 152) = 0u;
    *((void *)v9 + 21) = 0;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v12 = a2 - 3;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 4);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v103 = *((void *)a2 - 3);
                uint64_t v104 = *(void *)(v13 + 24);
                if (v103 == v104) {
                  return;
                }
                id v105 = *(char **)(*(void *)a3 + 320);
                long long v106 = *(char **)(*(void *)a3 + 328);
                id v107 = v105;
                double v108 = v105;
                if (v105 == v106) {
                  goto LABEL_171;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>((long long *)v13, (long long *)(v13 + 48), a2 - 3, a3);
                return;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, (uint64_t)(a2 - 3), a3);
                return;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, v13 + 144, (uint64_t)(a2 - 3), a3);
                return;
              default:
                JUMPOUT(0);
            }
            do
            {
              if (*(void *)v108 == v103) {
                goto LABEL_168;
              }
              v108 += 8;
            }
            while (v108 != v106);
            double v108 = *(char **)(*(void *)a3 + 328);
LABEL_168:
            while (*(void *)v107 != v104)
            {
              v107 += 8;
              if (v107 == v106)
              {
                id v107 = *(char **)(*(void *)a3 + 328);
                break;
              }
            }
LABEL_171:
            if (v108 - v105 < v107 - v105)
            {
              *(_OWORD *)v226 = *(_OWORD *)(v13 + 16);
              *(_OWORD *)&v226[16] = *(_OWORD *)(v13 + 32);
              long long v218 = *(_OWORD *)v13;
              long long v109 = *v12;
              long long v110 = *(a2 - 2);
              *(_OWORD *)(v13 + 27) = *(long long *)((char *)a2 - 21);
              *(_OWORD *)unint64_t v13 = v109;
              *(_OWORD *)(v13 + 16) = v110;
              *(long long *)((char *)a2 - 21) = *(_OWORD *)&v226[11];
              *unint64_t v12 = v218;
              *(a2 - 2) = *(_OWORD *)v226;
            }
            return;
          }
          if (v14 <= 1151)
          {
            id v111 = (long long *)(v13 + 48);
            BOOL v113 = (long long *)v13 == a2 || v111 == a2;
            if (a5)
            {
              if (!v113)
              {
                unint64_t v114 = v13;
                do
                {
                  unint64_t v115 = v114;
                  unint64_t v114 = (unint64_t)v111;
                  uint64_t v116 = *(void *)(v115 + 72);
                  uint64_t v117 = *(void *)(v115 + 24);
                  if (v116 != v117)
                  {
                    char v118 = *(char **)(*(void *)a3 + 320);
                    char v119 = *(char **)(*(void *)a3 + 328);
                    uint64_t v120 = v118;
                    long long v121 = v118;
                    if (v118 != v119)
                    {
                      do
                      {
                        if (*(void *)v121 == v116) {
                          goto LABEL_196;
                        }
                        v121 += 8;
                      }
                      while (v121 != v119);
                      long long v121 = *(char **)(*(void *)a3 + 328);
LABEL_196:
                      while (*(void *)v120 != v117)
                      {
                        v120 += 8;
                        if (v120 == v119)
                        {
                          uint64_t v120 = *(char **)(*(void *)a3 + 328);
                          break;
                        }
                      }
                    }
                    if (v121 - v118 < v120 - v118)
                    {
                      uint64_t v227 = *(void *)(v114 + 16);
                      long long v219 = *(_OWORD *)v114;
                      long long v236 = *(_OWORD *)(v115 + 80);
                      unint64_t v122 = v114;
                      while (1)
                      {
                        long long v123 = *(_OWORD *)(v115 + 16);
                        *(_OWORD *)unint64_t v122 = *(_OWORD *)v115;
                        *(_OWORD *)(v122 + 16) = v123;
                        *(_OWORD *)(v122 + 27) = *(_OWORD *)(v115 + 27);
                        if (v115 == v13) {
                          break;
                        }
                        unint64_t v122 = v115;
                        uint64_t v124 = *(void *)(v115 - 24);
                        if (v116 != v124)
                        {
                          uint64_t v125 = *(char **)(*(void *)a3 + 320);
                          long long v126 = *(char **)(*(void *)a3 + 328);
                          long long v127 = v125;
                          __int16 v128 = v125;
                          if (v125 != v126)
                          {
                            do
                            {
                              if (*(void *)v128 == v116) {
                                goto LABEL_208;
                              }
                              v128 += 8;
                            }
                            while (v128 != v126);
                            __int16 v128 = *(char **)(*(void *)a3 + 328);
LABEL_208:
                            while (*(void *)v127 != v124)
                            {
                              v127 += 8;
                              if (v127 == v126)
                              {
                                long long v127 = *(char **)(*(void *)a3 + 328);
                                break;
                              }
                            }
                          }
                          unint64_t v115 = v122 - 48;
                          if (v128 - v125 < v127 - v125) {
                            continue;
                          }
                        }
                        goto LABEL_212;
                      }
                      unint64_t v122 = v13;
LABEL_212:
                      *(_OWORD *)unint64_t v122 = v219;
                      *(void *)(v122 + 16) = v227;
                      *(void *)(v122 + 24) = v116;
                      *(void *)(v122 + 32) = v236;
                      *(_DWORD *)(v122 + 39) = *(_DWORD *)((char *)&v236 + 7);
                    }
                  }
                  id v111 = (long long *)(v114 + 48);
                }
                while ((long long *)(v114 + 48) != a2);
              }
            }
            else if (!v113)
            {
              do
              {
                unint64_t v201 = a1;
                a1 = (unint64_t)v111;
                uint64_t v202 = *(void *)(v201 + 72);
                uint64_t v203 = *(void *)(v201 + 24);
                if (v202 != v203)
                {
                  v204 = *(char **)(*(void *)a3 + 320);
                  v205 = *(char **)(*(void *)a3 + 328);
                  v206 = v204;
                  v207 = v204;
                  if (v204 != v205)
                  {
                    do
                    {
                      if (*(void *)v207 == v202) {
                        goto LABEL_312;
                      }
                      v207 += 8;
                    }
                    while (v207 != v205);
                    v207 = *(char **)(*(void *)a3 + 328);
LABEL_312:
                    while (*(void *)v206 != v203)
                    {
                      v206 += 8;
                      if (v206 == v205)
                      {
                        v206 = *(char **)(*(void *)a3 + 328);
                        break;
                      }
                    }
                  }
                  if (v207 - v204 < v206 - v204)
                  {
                    uint64_t v230 = *(void *)(a1 + 16);
                    long long v222 = *(_OWORD *)a1;
                    long long v239 = *(_OWORD *)(v201 + 80);
                    unint64_t v208 = a1;
                    do
                    {
                      v209 = (_OWORD *)v208;
                      unint64_t v208 = v201;
                      long long v210 = *(_OWORD *)(v201 + 16);
                      _OWORD *v209 = *(_OWORD *)v201;
                      v209[1] = v210;
                      *(_OWORD *)((char *)v209 + 27) = *(_OWORD *)(v201 + 27);
                      uint64_t v211 = *(void *)(v201 - 24);
                      if (v202 == v211) {
                        break;
                      }
                      v212 = *(char **)(*(void *)a3 + 320);
                      v213 = *(char **)(*(void *)a3 + 328);
                      v214 = v212;
                      v215 = v212;
                      if (v212 != v213)
                      {
                        do
                        {
                          if (*(void *)v215 == v202) {
                            goto LABEL_322;
                          }
                          v215 += 8;
                        }
                        while (v215 != v213);
                        v215 = *(char **)(*(void *)a3 + 328);
LABEL_322:
                        while (*(void *)v214 != v211)
                        {
                          v214 += 8;
                          if (v214 == v213)
                          {
                            v214 = *(char **)(*(void *)a3 + 328);
                            break;
                          }
                        }
                      }
                      unint64_t v201 = v208 - 48;
                    }
                    while (v215 - v212 < v214 - v212);
                    *(_OWORD *)unint64_t v208 = v222;
                    *(void *)(v208 + 16) = v230;
                    *(void *)(v208 + 24) = v202;
                    *(void *)(v208 + 32) = v239;
                    *(_DWORD *)(v208 + 39) = *(_DWORD *)((char *)&v239 + 7);
                  }
                }
                id v111 = (long long *)(a1 + 48);
              }
              while ((long long *)(a1 + 48) != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((long long *)v13 != a2)
            {
              int64_t v129 = (v15 - 2) >> 1;
              int64_t v130 = v129;
              do
              {
                int64_t v131 = v130;
                if (v129 >= v130)
                {
                  uint64_t v132 = (2 * v130) | 1;
                  unint64_t v133 = v13 + 48 * v132;
                  if (2 * v131 + 2 < (uint64_t)v15)
                  {
                    uint64_t v134 = *(void *)(v133 + 24);
                    uint64_t v135 = *(void *)(v133 + 72);
                    if (v134 != v135)
                    {
                      v137 = *(char **)(*(void *)a3 + 320);
                      v136 = *(char **)(*(void *)a3 + 328);
                      v138 = v137;
                      v139 = v137;
                      if (v137 != v136)
                      {
                        do
                        {
                          if (*(void *)v139 == v134) {
                            goto LABEL_224;
                          }
                          v139 += 8;
                        }
                        while (v139 != v136);
                        v139 = *(char **)(*(void *)a3 + 328);
LABEL_224:
                        while (*(void *)v138 != v135)
                        {
                          v138 += 8;
                          if (v138 == v136)
                          {
                            v138 = *(char **)(*(void *)a3 + 328);
                            break;
                          }
                        }
                      }
                      v133 += 48 * (v139 - v137 < v138 - v137);
                      if (v139 - v137 < v138 - v137) {
                        uint64_t v132 = 2 * v131 + 2;
                      }
                    }
                  }
                  unint64_t v140 = v13 + 48 * v131;
                  uint64_t v141 = *(void *)(v133 + 24);
                  uint64_t v142 = *(void *)(v140 + 24);
                  if (v141 == v142) {
                    goto LABEL_238;
                  }
                  v144 = *(char **)(*(void *)a3 + 320);
                  v143 = *(char **)(*(void *)a3 + 328);
                  v145 = v144;
                  v146 = v144;
                  if (v144 != v143)
                  {
                    do
                    {
                      if (*(void *)v146 == v141) {
                        goto LABEL_234;
                      }
                      v146 += 8;
                    }
                    while (v146 != v143);
                    v146 = *(char **)(*(void *)a3 + 328);
LABEL_234:
                    while (*(void *)v145 != v142)
                    {
                      v145 += 8;
                      if (v145 == v143)
                      {
                        v145 = *(char **)(*(void *)a3 + 328);
                        break;
                      }
                    }
                  }
                  if (v146 - v144 >= v145 - v144)
                  {
LABEL_238:
                    uint64_t v228 = *(void *)(v140 + 16);
                    long long v220 = *(_OWORD *)v140;
                    long long v237 = *(_OWORD *)(v140 + 32);
                    long long v147 = *(_OWORD *)v133;
                    long long v148 = *(_OWORD *)(v133 + 16);
                    *(_OWORD *)(v140 + 27) = *(_OWORD *)(v133 + 27);
                    *(_OWORD *)unint64_t v140 = v147;
                    *(_OWORD *)(v140 + 16) = v148;
                    if (v129 >= v132)
                    {
                      while (1)
                      {
                        uint64_t v150 = 2 * v132;
                        uint64_t v132 = (2 * v132) | 1;
                        unint64_t v149 = v13 + 48 * v132;
                        uint64_t v151 = v150 + 2;
                        if (v151 < (uint64_t)v15)
                        {
                          uint64_t v152 = *(void *)(v149 + 24);
                          uint64_t v153 = *(void *)(v149 + 72);
                          if (v152 != v153)
                          {
                            v154 = *(char **)(*(void *)a3 + 320);
                            v155 = *(char **)(*(void *)a3 + 328);
                            v156 = v154;
                            v157 = v154;
                            if (v154 != v155)
                            {
                              do
                              {
                                if (*(void *)v157 == v152) {
                                  goto LABEL_246;
                                }
                                v157 += 8;
                              }
                              while (v157 != v155);
                              v157 = *(char **)(*(void *)a3 + 328);
LABEL_246:
                              while (*(void *)v156 != v153)
                              {
                                v156 += 8;
                                if (v156 == v155)
                                {
                                  v156 = *(char **)(*(void *)a3 + 328);
                                  break;
                                }
                              }
                            }
                            v149 += 48 * (v157 - v154 < v156 - v154);
                            if (v157 - v154 < v156 - v154) {
                              uint64_t v132 = v151;
                            }
                          }
                        }
                        uint64_t v158 = *(void *)(v149 + 24);
                        if (v158 != v142)
                        {
                          v160 = *(char **)(*(void *)a3 + 320);
                          v159 = *(char **)(*(void *)a3 + 328);
                          v161 = v160;
                          v162 = v160;
                          if (v160 != v159)
                          {
                            do
                            {
                              if (*(void *)v162 == v158) {
                                goto LABEL_256;
                              }
                              v162 += 8;
                            }
                            while (v162 != v159);
                            v162 = *(char **)(*(void *)a3 + 328);
LABEL_256:
                            while (*(void *)v161 != v142)
                            {
                              v161 += 8;
                              if (v161 == v159)
                              {
                                v161 = *(char **)(*(void *)a3 + 328);
                                break;
                              }
                            }
                          }
                          if (v162 - v160 < v161 - v160) {
                            break;
                          }
                        }
                        long long v163 = *(_OWORD *)v149;
                        long long v164 = *(_OWORD *)(v149 + 16);
                        *(_OWORD *)(v133 + 27) = *(_OWORD *)(v149 + 27);
                        *(_OWORD *)unint64_t v133 = v163;
                        *(_OWORD *)(v133 + 16) = v164;
                        unint64_t v133 = v149;
                        if (v129 < v132) {
                          goto LABEL_261;
                        }
                      }
                    }
                    unint64_t v149 = v133;
LABEL_261:
                    *(_OWORD *)unint64_t v149 = v220;
                    *(void *)(v149 + 16) = v228;
                    *(void *)(v149 + 24) = v142;
                    *(void *)(v149 + 32) = v237;
                    *(_DWORD *)(v149 + 39) = *(_DWORD *)((char *)&v237 + 7);
                  }
                }
                int64_t v130 = v131 - 1;
              }
              while (v131);
              int64_t v165 = v14 / 0x30uLL;
              do
              {
                uint64_t v166 = 0;
                *(_OWORD *)v229 = *(_OWORD *)(v13 + 16);
                *(_OWORD *)&v229[16] = *(_OWORD *)(v13 + 32);
                long long v221 = *(_OWORD *)v13;
                uint64_t v167 = v165 - 2;
                if (v165 < 2) {
                  uint64_t v167 = v165 - 1;
                }
                uint64_t v168 = v167 >> 1;
                unint64_t v169 = v13;
                do
                {
                  v170 = (_OWORD *)v169;
                  v169 += 48 * v166 + 48;
                  uint64_t v171 = 2 * v166;
                  uint64_t v166 = (2 * v166) | 1;
                  uint64_t v172 = v171 + 2;
                  if (v171 + 2 < v165)
                  {
                    uint64_t v173 = *(void *)(v169 + 24);
                    uint64_t v174 = *(void *)(v169 + 72);
                    if (v173 != v174)
                    {
                      v176 = *(char **)(*(void *)a3 + 320);
                      v175 = *(char **)(*(void *)a3 + 328);
                      v177 = v176;
                      v178 = v176;
                      if (v176 != v175)
                      {
                        do
                        {
                          if (*(void *)v178 == v173) {
                            goto LABEL_273;
                          }
                          v178 += 8;
                        }
                        while (v178 != v175);
                        v178 = *(char **)(*(void *)a3 + 328);
LABEL_273:
                        while (*(void *)v177 != v174)
                        {
                          v177 += 8;
                          if (v177 == v175)
                          {
                            v177 = *(char **)(*(void *)a3 + 328);
                            break;
                          }
                        }
                      }
                      v169 += 48 * (v178 - v176 < v177 - v176);
                      if (v178 - v176 < v177 - v176) {
                        uint64_t v166 = v172;
                      }
                    }
                  }
                  long long v179 = *(_OWORD *)v169;
                  long long v180 = *(_OWORD *)(v169 + 16);
                  *(_OWORD *)((char *)v170 + 27) = *(_OWORD *)(v169 + 27);
                  _OWORD *v170 = v179;
                  v170[1] = v180;
                }
                while (v166 <= v168);
                a2 -= 3;
                if ((long long *)v169 == a2)
                {
                  *(_OWORD *)(v169 + 27) = *(_OWORD *)&v229[11];
                  *(_OWORD *)unint64_t v169 = v221;
                  *(_OWORD *)(v169 + 16) = *(_OWORD *)v229;
                }
                else
                {
                  long long v181 = *a2;
                  long long v182 = a2[1];
                  *(_OWORD *)(v169 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v169 = v181;
                  *(_OWORD *)(v169 + 16) = v182;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v229[11];
                  *a2 = v221;
                  a2[1] = *(_OWORD *)v229;
                  uint64_t v183 = v169 - v13 + 48;
                  if (v183 >= 49)
                  {
                    unint64_t v184 = (v183 / 0x30uLL - 2) >> 1;
                    unint64_t v185 = v13 + 48 * v184;
                    uint64_t v186 = *(void *)(v185 + 24);
                    uint64_t v187 = *(void *)(v169 + 24);
                    if (v186 != v187)
                    {
                      v189 = *(char **)(*(void *)a3 + 320);
                      v188 = *(char **)(*(void *)a3 + 328);
                      v190 = v189;
                      v191 = v189;
                      if (v189 != v188)
                      {
                        do
                        {
                          if (*(void *)v191 == v186) {
                            goto LABEL_286;
                          }
                          v191 += 8;
                        }
                        while (v191 != v188);
                        v191 = *(char **)(*(void *)a3 + 328);
LABEL_286:
                        while (*(void *)v190 != v187)
                        {
                          v190 += 8;
                          if (v190 == v188)
                          {
                            v190 = *(char **)(*(void *)a3 + 328);
                            break;
                          }
                        }
                      }
                      if (v191 - v189 < v190 - v189)
                      {
                        uint64_t v242 = *(void *)(v169 + 16);
                        long long v238 = *(_OWORD *)v169;
                        long long v233 = *(_OWORD *)(v169 + 32);
                        do
                        {
                          v192 = (_OWORD *)v169;
                          unint64_t v169 = v185;
                          long long v193 = *(_OWORD *)v185;
                          long long v194 = *(_OWORD *)(v185 + 16);
                          *(_OWORD *)((char *)v192 + 27) = *(_OWORD *)(v185 + 27);
                          _OWORD *v192 = v193;
                          v192[1] = v194;
                          if (!v184) {
                            break;
                          }
                          unint64_t v184 = (v184 - 1) >> 1;
                          unint64_t v185 = v13 + 48 * v184;
                          uint64_t v195 = *(void *)(v185 + 24);
                          if (v195 == v187) {
                            break;
                          }
                          v197 = *(char **)(*(void *)a3 + 320);
                          v196 = *(char **)(*(void *)a3 + 328);
                          v198 = v197;
                          v199 = v197;
                          if (v197 != v196)
                          {
                            do
                            {
                              if (*(void *)v199 == v195) {
                                goto LABEL_297;
                              }
                              v199 += 8;
                            }
                            while (v199 != v196);
                            v199 = *(char **)(*(void *)a3 + 328);
LABEL_297:
                            while (*(void *)v198 != v187)
                            {
                              v198 += 8;
                              if (v198 == v196)
                              {
                                v198 = *(char **)(*(void *)a3 + 328);
                                break;
                              }
                            }
                          }
                        }
                        while (v199 - v197 < v198 - v197);
                        *(_OWORD *)unint64_t v169 = v238;
                        *(void *)(v169 + 16) = v242;
                        *(void *)(v169 + 24) = v187;
                        *(void *)(v169 + 32) = v233;
                        *(_DWORD *)(v169 + 39) = *(_DWORD *)((char *)&v233 + 7);
                      }
                    }
                  }
                }
              }
              while (v165-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          double v17 = (long long *)(v13 + 48 * (v15 >> 1));
          if ((unint64_t)v14 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v15 >> 1)), a2 - 3, a3);
            uint64_t v18 = 3 * v16;
            double v19 = (long long *)(a1 + 48 * v16 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>((long long *)(a1 + 48), v19, a2 - 6, a3);
            uint64_t v20 = (long long *)(a1 + 48 + 16 * v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>((long long *)(a1 + 96), v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>(v19, v17, v20, a3);
            *(_OWORD *)v223 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v223[16] = *(_OWORD *)(a1 + 32);
            long long v216 = *(_OWORD *)a1;
            long long v21 = *(long long *)((char *)v17 + 27);
            long long v22 = v17[1];
            *(_OWORD *)a1 = *v17;
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(a1 + 27) = v21;
            *(long long *)((char *)v17 + 27) = *(_OWORD *)&v223[11];
            *double v17 = v216;
            v17[1] = *(_OWORD *)v223;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>((long long *)(a1 + 48 * (v15 >> 1)), (long long *)a1, a2 - 3, a3);
          }
          --a4;
          if (a5)
          {
            uint64_t v23 = *(void *)(a1 + 24);
            uint64_t v24 = *(void *)a3;
            break;
          }
          uint64_t v25 = *(void *)(a1 - 24);
          uint64_t v23 = *(void *)(a1 + 24);
          if (v25 != v23)
          {
            uint64_t v24 = *(void *)a3;
            double v26 = *(char **)(*(void *)a3 + 320);
            double v27 = *(char **)(*(void *)a3 + 328);
            double v28 = v26;
            double v29 = v26;
            if (v26 != v27)
            {
              do
              {
                if (*(void *)v29 == v25) {
                  goto LABEL_16;
                }
                v29 += 8;
              }
              while (v29 != v27);
              double v29 = *(char **)(*(void *)a3 + 328);
LABEL_16:
              while (*(void *)v28 != v23)
              {
                v28 += 8;
                if (v28 == v27)
                {
                  double v28 = *(char **)(*(void *)a3 + 328);
                  break;
                }
              }
            }
            if (v29 - v26 < v28 - v26) {
              break;
            }
          }
          uint64_t v241 = *(void *)(a1 + 16);
          long long v232 = *(_OWORD *)(a1 + 32);
          long long v235 = *(_OWORD *)a1;
          uint64_t v67 = *((void *)a2 - 3);
          if (v23 == v67) {
            goto LABEL_107;
          }
          unint64_t v68 = *(char **)(*(void *)a3 + 320);
          long long v69 = *(char **)(*(void *)a3 + 328);
          if (v68 == v69)
          {
            uint8x8_t v71 = *(char **)(*(void *)a3 + 320);
            long long v70 = v71;
          }
          else
          {
            long long v70 = *(char **)(*(void *)a3 + 320);
            while (*(void *)v70 != v23)
            {
              v70 += 8;
              if (v70 == v69)
              {
                long long v70 = *(char **)(*(void *)a3 + 328);
                break;
              }
            }
            uint8x8_t v71 = *(char **)(*(void *)a3 + 320);
            while (*(void *)v71 != v67)
            {
              v71 += 8;
              if (v71 == v69)
              {
                uint8x8_t v71 = *(char **)(*(void *)a3 + 328);
                break;
              }
            }
          }
          if (v70 - v68 >= v71 - v68)
          {
LABEL_107:
            unint64_t v13 = a1 + 48;
            if (a1 + 48 < (unint64_t)a2)
            {
              uint64_t v75 = *(void *)a3;
              unint64_t v76 = a1;
              do
              {
                uint64_t v77 = *(void *)(v76 + 72);
                unint64_t v76 = v13;
                if (v23 != v77)
                {
                  unint64_t v78 = *(char **)(v75 + 320);
                  long long v79 = *(char **)(v75 + 328);
                  BOOL v80 = v78;
                  unint64_t v81 = v78;
                  if (v78 != v79)
                  {
                    do
                    {
                      if (*(void *)v81 == v23) {
                        goto LABEL_114;
                      }
                      v81 += 8;
                    }
                    while (v81 != v79);
                    unint64_t v81 = *(char **)(v75 + 328);
LABEL_114:
                    while (*(void *)v80 != v77)
                    {
                      v80 += 8;
                      if (v80 == v79)
                      {
                        BOOL v80 = *(char **)(v75 + 328);
                        break;
                      }
                    }
                  }
                  if (v81 - v78 < v80 - v78) {
                    break;
                  }
                }
                v13 += 48;
              }
              while (v76 + 48 < (unint64_t)a2);
            }
          }
          else
          {
            unint64_t v13 = a1;
            do
            {
              do
              {
                uint64_t v72 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v72);
              if (v68 == v69)
              {
                long long v74 = *(char **)(*(void *)a3 + 320);
                char v73 = v74;
              }
              else
              {
                char v73 = *(char **)(*(void *)a3 + 320);
                while (*(void *)v73 != v23)
                {
                  v73 += 8;
                  if (v73 == v69)
                  {
                    char v73 = *(char **)(*(void *)a3 + 328);
                    break;
                  }
                }
                long long v74 = *(char **)(*(void *)a3 + 320);
                while (*(void *)v74 != v72)
                {
                  v74 += 8;
                  if (v74 == v69)
                  {
                    long long v74 = *(char **)(*(void *)a3 + 328);
                    break;
                  }
                }
              }
            }
            while (v73 - v68 >= v74 - v68);
          }
          long long v82 = a2;
          if (v13 < (unint64_t)a2)
          {
            uint64_t v83 = *(void *)a3;
            long long v82 = a2;
            do
            {
              uint64_t v84 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v84) {
                break;
              }
              unint64_t v85 = *(char **)(v83 + 320);
              unint64_t v86 = *(char **)(v83 + 328);
              uint64_t v87 = v85;
              unint64_t v88 = v85;
              if (v85 != v86)
              {
                do
                {
                  if (*(void *)v88 == v23) {
                    goto LABEL_126;
                  }
                  v88 += 8;
                }
                while (v88 != v86);
                unint64_t v88 = *(char **)(v83 + 328);
LABEL_126:
                while (*(void *)v87 != v84)
                {
                  v87 += 8;
                  if (v87 == v86)
                  {
                    uint64_t v87 = *(char **)(v83 + 328);
                    break;
                  }
                }
              }
            }
            while (v88 - v85 < v87 - v85);
          }
          while (v13 < (unint64_t)v82)
          {
            *(_OWORD *)v225 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v225[16] = *(_OWORD *)(v13 + 32);
            long long v217 = *(_OWORD *)v13;
            long long v89 = *v82;
            long long v90 = v82[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v82 + 27);
            *(_OWORD *)unint64_t v13 = v89;
            *(_OWORD *)(v13 + 16) = v90;
            *(long long *)((char *)v82 + 27) = *(_OWORD *)&v225[11];
            long long *v82 = v217;
            v82[1] = *(_OWORD *)v225;
            uint64_t v91 = *(void *)a3;
            do
            {
              do
              {
                uint64_t v92 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v92);
              uint64_t v93 = *(char **)(v91 + 320);
              int v94 = *(char **)(v91 + 328);
              if (v93 == v94)
              {
                int v96 = *(char **)(v91 + 320);
                BOOL v95 = v96;
              }
              else
              {
                BOOL v95 = *(char **)(v91 + 320);
                while (*(void *)v95 != v23)
                {
                  v95 += 8;
                  if (v95 == v94)
                  {
                    BOOL v95 = *(char **)(v91 + 328);
                    break;
                  }
                }
                int v96 = *(char **)(v91 + 320);
                while (*(void *)v96 != v92)
                {
                  v96 += 8;
                  if (v96 == v94)
                  {
                    int v96 = *(char **)(v91 + 328);
                    break;
                  }
                }
              }
            }
            while (v95 - v93 >= v96 - v93);
            do
            {
              uint64_t v97 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v97) {
                break;
              }
              if (v93 == v94)
              {
                int v99 = v93;
                double v98 = v93;
              }
              else
              {
                double v98 = v93;
                while (*(void *)v98 != v23)
                {
                  v98 += 8;
                  if (v98 == v94)
                  {
                    double v98 = v94;
                    break;
                  }
                }
                int v99 = v93;
                while (*(void *)v99 != v97)
                {
                  v99 += 8;
                  if (v99 == v94)
                  {
                    int v99 = v94;
                    break;
                  }
                }
              }
            }
            while (v98 - v93 < v99 - v93);
          }
          uint64_t v100 = (long long *)(v13 - 48);
          BOOL v5 = v13 - 48 >= a1;
          BOOL v6 = v13 - 48 == a1;
          if (v13 - 48 != a1)
          {
            long long v101 = *v100;
            long long v102 = *(_OWORD *)(v13 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
            *(_OWORD *)a1 = v101;
            *(_OWORD *)(a1 + 16) = v102;
          }
          a5 = 0;
          *uint64_t v100 = v235;
          *(void *)(v13 - 32) = v241;
          *(void *)(v13 - 24) = v23;
          *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v232 + 7);
          *(void *)(v13 - 16) = v232;
        }
        uint64_t v240 = *(void *)(a1 + 16);
        long long v231 = *(_OWORD *)(a1 + 32);
        long long v234 = *(_OWORD *)a1;
        unint64_t v30 = a1;
        do
        {
          unint64_t v31 = v30;
          v30 += 48;
          uint64_t v32 = *(void *)(v31 + 72);
          if (v32 == v23) {
            break;
          }
          int v33 = *(char **)(v24 + 320);
          long long v34 = *(char **)(v24 + 328);
          long long v35 = v33;
          uint64_t v36 = v33;
          if (v33 != v34)
          {
            do
            {
              if (*(void *)v36 == v32) {
                goto LABEL_26;
              }
              v36 += 8;
            }
            while (v36 != v34);
            uint64_t v36 = *(char **)(v24 + 328);
LABEL_26:
            while (*(void *)v35 != v23)
            {
              v35 += 8;
              if (v35 == v34)
              {
                long long v35 = *(char **)(v24 + 328);
                break;
              }
            }
          }
        }
        while (v36 - v33 < v35 - v33);
        unint64_t v37 = a2;
        if (v31 == a1)
        {
          unint64_t v37 = a2;
          if (v30 < (unint64_t)a2)
          {
            unint64_t v37 = a2;
            do
            {
              uint64_t v43 = *((void *)v37 - 3);
              v37 -= 3;
              if (v43 != v23)
              {
                double v44 = *(char **)(v24 + 320);
                long long v45 = *(char **)(v24 + 328);
                uint64_t v46 = v44;
                uint64_t v47 = v44;
                if (v44 != v45)
                {
                  do
                  {
                    if (*(void *)v47 == v43) {
                      goto LABEL_48;
                    }
                    v47 += 8;
                  }
                  while (v47 != v45);
                  uint64_t v47 = *(char **)(v24 + 328);
LABEL_48:
                  while (*(void *)v46 != v23)
                  {
                    v46 += 8;
                    if (v46 == v45)
                    {
                      uint64_t v46 = *(char **)(v24 + 328);
                      break;
                    }
                  }
                }
                if (v47 - v44 < v46 - v44) {
                  break;
                }
              }
            }
            while (v30 < (unint64_t)v37);
          }
        }
        else
        {
          do
          {
            do
            {
              uint64_t v38 = *((void *)v37 - 3);
              v37 -= 3;
            }
            while (v38 == v23);
            uint64_t v39 = *(char **)(v24 + 320);
            uint64_t v40 = *(char **)(v24 + 328);
            char v41 = v39;
            unint64_t v42 = v39;
            if (v39 != v40)
            {
              do
              {
                if (*(void *)v42 == v38) {
                  goto LABEL_36;
                }
                v42 += 8;
              }
              while (v42 != v40);
              unint64_t v42 = *(char **)(v24 + 328);
LABEL_36:
              while (*(void *)v41 != v23)
              {
                v41 += 8;
                if (v41 == v40)
                {
                  char v41 = *(char **)(v24 + 328);
                  break;
                }
              }
            }
          }
          while (v42 - v39 >= v41 - v39);
        }
        unint64_t v13 = v30;
        if (v30 < (unint64_t)v37)
        {
          uint64_t v48 = v37;
          do
          {
            *(_OWORD *)v224 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v224[16] = *(_OWORD *)(v13 + 32);
            long long v49 = *(_OWORD *)v13;
            long long v51 = *v48;
            long long v50 = v48[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v48 + 27);
            *(_OWORD *)unint64_t v13 = v51;
            *(_OWORD *)(v13 + 16) = v50;
            *(long long *)((char *)v48 + 27) = *(_OWORD *)&v224[11];
            *uint64_t v48 = v49;
            v48[1] = *(_OWORD *)v224;
            uint64_t v52 = *(void *)a3;
            do
            {
              uint64_t v53 = *(void *)(v13 + 72);
              v13 += 48;
              if (v53 == v23) {
                break;
              }
              unint64_t v54 = *(char **)(v52 + 320);
              id v55 = *(char **)(v52 + 328);
              unint64_t v56 = v54;
              long long v57 = v54;
              if (v54 != v55)
              {
                do
                {
                  if (*(void *)v57 == v53) {
                    goto LABEL_61;
                  }
                  v57 += 8;
                }
                while (v57 != v55);
                long long v57 = *(char **)(v52 + 328);
LABEL_61:
                while (*(void *)v56 != v23)
                {
                  v56 += 8;
                  if (v56 == v55)
                  {
                    unint64_t v56 = *(char **)(v52 + 328);
                    break;
                  }
                }
              }
            }
            while (v57 - v54 < v56 - v54);
            do
            {
              do
              {
                uint64_t v58 = *((void *)v48 - 3);
                v48 -= 3;
              }
              while (v58 == v23);
              float v59 = *(char **)(v52 + 320);
              unint64_t v60 = *(char **)(v52 + 328);
              unint64_t v61 = v59;
              unint64_t v62 = v59;
              if (v59 != v60)
              {
                do
                {
                  if (*(void *)v62 == v58) {
                    goto LABEL_70;
                  }
                  v62 += 8;
                }
                while (v62 != v60);
                unint64_t v62 = *(char **)(v52 + 328);
LABEL_70:
                while (*(void *)v61 != v23)
                {
                  v61 += 8;
                  if (v61 == v60)
                  {
                    unint64_t v61 = *(char **)(v52 + 328);
                    break;
                  }
                }
              }
            }
            while (v62 - v59 >= v61 - v59);
          }
          while (v13 < (unint64_t)v48);
        }
        unint64_t v63 = (long long *)(v13 - 48);
        if (v13 - 48 != a1)
        {
          long long v64 = *v63;
          long long v65 = *(_OWORD *)(v13 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
          *(_OWORD *)a1 = v64;
          *(_OWORD *)(a1 + 16) = v65;
        }
        *unint64_t v63 = v234;
        *(void *)(v13 - 32) = v240;
        *(void *)(v13 - 24) = v23;
        *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v231 + 7);
        *(void *)(v13 - 16) = v231;
        if (v30 >= (unint64_t)v37) {
          break;
        }
LABEL_80:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*,false>(a1, v13 - 48, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>(a1, v13 - 48, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>(v13, (uint64_t)a2, a3))
      {
        break;
      }
      if (!v66) {
        goto LABEL_80;
      }
    }
    a2 = (long long *)(v13 - 48);
    if (!v66) {
      continue;
    }
    break;
  }
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>(long long *a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = *((void *)a2 + 3);
  uint64_t v5 = *((void *)a1 + 3);
  if (v4 == v5) {
    goto LABEL_23;
  }
  BOOL v6 = *(char **)(*(void *)a4 + 320);
  uint64_t v7 = *(char **)(*(void *)a4 + 328);
  if (v6 == v7)
  {
    id v9 = *(char **)(*(void *)a4 + 320);
    uint64_t v8 = v9;
  }
  else
  {
    uint64_t v8 = *(char **)(*(void *)a4 + 320);
    while (*(void *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        uint64_t v8 = *(char **)(*(void *)a4 + 328);
        break;
      }
    }
    id v9 = *(char **)(*(void *)a4 + 320);
    while (*(void *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        id v9 = *(char **)(*(void *)a4 + 328);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    uint64_t v13 = *((void *)a3 + 3);
    if (v13 != v4)
    {
      uint64_t v14 = *(char **)(*(void *)a4 + 320);
      unint64_t v15 = *(char **)(*(void *)a4 + 328);
      unint64_t v16 = v14;
      double v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(void *)v17 == v13) {
            goto LABEL_28;
          }
          v17 += 8;
        }
        while (v17 != v15);
        double v17 = *(char **)(*(void *)a4 + 328);
LABEL_28:
        while (*(void *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            unint64_t v16 = *(char **)(*(void *)a4 + 328);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        long long v18 = *a2;
        *(_OWORD *)uint64_t v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        long long v19 = *(long long *)((char *)a3 + 27);
        long long v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(long long *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        __n128 result = *(__n128 *)&v46[11];
        *(long long *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        uint64_t v22 = *((void *)a2 + 3);
        uint64_t v23 = *((void *)a1 + 3);
        if (v22 != v23)
        {
          uint64_t v24 = *(char **)(*(void *)a4 + 320);
          uint64_t v25 = *(char **)(*(void *)a4 + 328);
          double v26 = v24;
          double v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(void *)v27 == v22) {
                goto LABEL_37;
              }
              v27 += 8;
            }
            while (v27 != v25);
            double v27 = *(char **)(*(void *)a4 + 328);
LABEL_37:
            while (*(void *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                double v26 = *(char **)(*(void *)a4 + 328);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            long long v28 = *a1;
            *(_OWORD *)uint64_t v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            long long v29 = *(long long *)((char *)a2 + 27);
            long long v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(long long *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            __n128 result = *(__n128 *)&v47[11];
            *(long long *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    uint64_t v10 = *((void *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        unint64_t v12 = *(char **)(*(void *)a4 + 320);
        uint64_t v11 = v12;
      }
      else
      {
        uint64_t v11 = *(char **)(*(void *)a4 + 320);
        while (*(void *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            uint64_t v11 = *(char **)(*(void *)a4 + 328);
            break;
          }
        }
        unint64_t v12 = *(char **)(*(void *)a4 + 320);
        while (*(void *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            unint64_t v12 = *(char **)(*(void *)a4 + 328);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        long long v31 = a1[1];
        long long v32 = *a1;
        *(void *)long long v49 = *((void *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        long long v33 = *(long long *)((char *)a3 + 27);
        long long v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(long long *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        __n128 result = *(__n128 *)&v49[3];
        *(long long *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    long long v35 = *a1;
    *(_OWORD *)uint64_t v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    long long v36 = *(long long *)((char *)a2 + 27);
    long long v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(long long *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    __n128 result = *(__n128 *)&v48[11];
    *(long long *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    uint64_t v38 = *((void *)a3 + 3);
    uint64_t v39 = *((void *)a2 + 3);
    if (v38 != v39)
    {
      uint64_t v40 = *(char **)(*(void *)a4 + 320);
      char v41 = *(char **)(*(void *)a4 + 328);
      unint64_t v42 = v40;
      uint64_t v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(void *)v43 == v38) {
            goto LABEL_50;
          }
          v43 += 8;
        }
        while (v43 != v41);
        uint64_t v43 = *(char **)(*(void *)a4 + 328);
LABEL_50:
        while (*(void *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            unint64_t v42 = *(char **)(*(void *)a4 + 328);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        long long v31 = a2[1];
        long long v32 = *a2;
        *(void *)long long v49 = *((void *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        long long v44 = *(long long *)((char *)a3 + 27);
        long long v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(long long *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 - 24);
      uint64_t v9 = *(void *)(a1 + 24);
      if (v8 == v9) {
        return result;
      }
      uint64_t v10 = *(char **)(*(void *)a3 + 320);
      uint64_t v11 = *(char **)(*(void *)a3 + 328);
      unint64_t v12 = v10;
      uint64_t v13 = v10;
      if (v10 == v11) {
        goto LABEL_10;
      }
      do
      {
        if (*(void *)v13 == v8) {
          goto LABEL_7;
        }
        v13 += 8;
      }
      while (v13 != v11);
      uint64_t v13 = *(char **)(*(void *)a3 + 328);
      do
      {
LABEL_7:
        if (*(void *)v12 == v9) {
          goto LABEL_10;
        }
        v12 += 8;
      }
      while (v12 != v11);
      unint64_t v12 = *(char **)(*(void *)a3 + 328);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        uint64_t v14 = (long long *)(a2 - 48);
        long long v15 = *(_OWORD *)a1;
        *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        long long v16 = *(_OWORD *)(a2 - 21);
        long long v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *uint64_t v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(long long *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), a3);
      uint64_t v19 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      int v20 = 0;
      break;
  }
  while (1)
  {
    uint64_t v21 = *(void *)(v19 + 24);
    uint64_t v22 = *(void *)(v18 + 24);
    if (v21 != v22)
    {
      uint64_t v23 = *(char **)(*(void *)a3 + 320);
      uint64_t v24 = *(char **)(*(void *)a3 + 328);
      uint64_t v25 = v23;
      double v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(void *)v26 == v21) {
            goto LABEL_19;
          }
          v26 += 8;
        }
        while (v26 != v24);
        double v26 = *(char **)(*(void *)a3 + 328);
LABEL_19:
        while (*(void *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            uint64_t v25 = *(char **)(*(void *)a3 + 328);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        long long v34 = *(_OWORD *)v19;
        uint64_t v36 = *(void *)(v19 + 16);
        long long v37 = *(_OWORD *)(v19 + 32);
        uint64_t v27 = v19;
        while (1)
        {
          long long v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1) {
            break;
          }
          uint64_t v27 = v18;
          uint64_t v29 = *(void *)(v18 - 24);
          if (v21 != v29)
          {
            long long v30 = *(char **)(*(void *)a3 + 320);
            long long v31 = *(char **)(*(void *)a3 + 328);
            long long v32 = v30;
            long long v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(void *)v33 == v21) {
                  goto LABEL_30;
                }
                v33 += 8;
              }
              while (v33 != v31);
              long long v33 = *(char **)(*(void *)a3 + 328);
LABEL_30:
              while (*(void *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  long long v32 = *(char **)(*(void *)a3 + 328);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30) {
              continue;
            }
          }
          goto LABEL_36;
        }
        uint64_t v27 = a1;
LABEL_36:
        *(_OWORD *)uint64_t v27 = v34;
        *(void *)(v27 + 16) = v36;
        *(void *)(v27 + 24) = v21;
        *(void *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8) {
          return v19 + 48 == a2;
        }
      }
    }
    uint64_t v18 = v19;
    v19 += 48;
    if (v19 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>((long long *)a1, (long long *)a2, (long long *)a3, a5).n128_u64[0];
  uint64_t v11 = *(void *)(a4 + 24);
  uint64_t v12 = *(void *)(a3 + 24);
  if (v11 != v12)
  {
    uint64_t v13 = *(char **)(*(void *)a5 + 320);
    uint64_t v14 = *(char **)(*(void *)a5 + 328);
    long long v15 = v13;
    long long v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(void *)v16 == v11) {
          goto LABEL_6;
        }
        v16 += 8;
      }
      while (v16 != v14);
      long long v16 = *(char **)(*(void *)a5 + 328);
LABEL_6:
      while (*(void *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          long long v15 = *(char **)(*(void *)a5 + 328);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      long long v17 = *(_OWORD *)a3;
      *(_OWORD *)uint64_t v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      long long v18 = *(_OWORD *)(a4 + 27);
      long long v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v38;
      __n128 result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      uint64_t v20 = *(void *)(a3 + 24);
      uint64_t v21 = *(void *)(a2 + 24);
      if (v20 != v21)
      {
        uint64_t v22 = *(char **)(*(void *)a5 + 320);
        uint64_t v23 = *(char **)(*(void *)a5 + 328);
        uint64_t v24 = v22;
        uint64_t v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(void *)v25 == v20) {
              goto LABEL_15;
            }
            v25 += 8;
          }
          while (v25 != v23);
          uint64_t v25 = *(char **)(*(void *)a5 + 328);
LABEL_15:
          while (*(void *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              uint64_t v24 = *(char **)(*(void *)a5 + 328);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          long long v26 = *(_OWORD *)a2;
          *(_OWORD *)uint64_t v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          long long v27 = *(_OWORD *)(a3 + 27);
          long long v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 16) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)v39;
          __n128 result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          uint64_t v29 = *(void *)(a2 + 24);
          uint64_t v30 = *(void *)(a1 + 24);
          if (v29 != v30)
          {
            long long v31 = *(char **)(*(void *)a5 + 320);
            long long v32 = *(char **)(*(void *)a5 + 328);
            long long v33 = v31;
            long long v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(void *)v34 == v29) {
                  goto LABEL_24;
                }
                v34 += 8;
              }
              while (v34 != v32);
              long long v34 = *(char **)(*(void *)a5 + 328);
LABEL_24:
              while (*(void *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  long long v33 = *(char **)(*(void *)a5 + 328);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              long long v35 = *(_OWORD *)a1;
              *(_OWORD *)uint64_t v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              long long v36 = *(_OWORD *)(a2 + 27);
              long long v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 16) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 16) = *(_OWORD *)v40;
              __n128 result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  uint64_t v13 = *(void *)(a5 + 24);
  uint64_t v14 = *(void *)(a4 + 24);
  if (v13 != v14)
  {
    long long v15 = *(char **)(*(void *)a6 + 320);
    long long v16 = *(char **)(*(void *)a6 + 328);
    long long v17 = v15;
    long long v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(void *)v18 == v13) {
          goto LABEL_6;
        }
        v18 += 8;
      }
      while (v18 != v16);
      long long v18 = *(char **)(*(void *)a6 + 328);
LABEL_6:
      while (*(void *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          long long v17 = *(char **)(*(void *)a6 + 328);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      long long v19 = *(_OWORD *)a4;
      *(_OWORD *)long long v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      long long v20 = *(_OWORD *)(a5 + 27);
      long long v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 16) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v49;
      __n128 result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      uint64_t v22 = *(void *)(a4 + 24);
      uint64_t v23 = *(void *)(a3 + 24);
      if (v22 != v23)
      {
        uint64_t v24 = *(char **)(*(void *)a6 + 320);
        uint64_t v25 = *(char **)(*(void *)a6 + 328);
        long long v26 = v24;
        long long v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(void *)v27 == v22) {
              goto LABEL_15;
            }
            v27 += 8;
          }
          while (v27 != v25);
          long long v27 = *(char **)(*(void *)a6 + 328);
LABEL_15:
          while (*(void *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              long long v26 = *(char **)(*(void *)a6 + 328);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          long long v28 = *(_OWORD *)a3;
          *(_OWORD *)long long v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          long long v29 = *(_OWORD *)(a4 + 27);
          long long v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 16) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 16) = *(_OWORD *)v50;
          __n128 result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          uint64_t v31 = *(void *)(a3 + 24);
          uint64_t v32 = *(void *)(a2 + 24);
          if (v31 != v32)
          {
            long long v33 = *(char **)(*(void *)a6 + 320);
            long long v34 = *(char **)(*(void *)a6 + 328);
            long long v35 = v33;
            long long v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(void *)v36 == v31) {
                  goto LABEL_24;
                }
                v36 += 8;
              }
              while (v36 != v34);
              long long v36 = *(char **)(*(void *)a6 + 328);
LABEL_24:
              while (*(void *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  long long v35 = *(char **)(*(void *)a6 + 328);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              long long v37 = *(_OWORD *)a2;
              *(_OWORD *)long long v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              long long v38 = *(_OWORD *)(a3 + 27);
              long long v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 16) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 16) = *(_OWORD *)v51;
              __n128 result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              uint64_t v40 = *(void *)(a2 + 24);
              uint64_t v41 = *(void *)(a1 + 24);
              if (v40 != v41)
              {
                unint64_t v42 = *(char **)(*(void *)a6 + 320);
                uint64_t v43 = *(char **)(*(void *)a6 + 328);
                long long v44 = v42;
                long long v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(void *)v45 == v40) {
                      goto LABEL_33;
                    }
                    v45 += 8;
                  }
                  while (v45 != v43);
                  long long v45 = *(char **)(*(void *)a6 + 328);
LABEL_33:
                  while (*(void *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      long long v44 = *(char **)(*(void *)a6 + 328);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  long long v46 = *(_OWORD *)a1;
                  *(_OWORD *)uint64_t v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  long long v47 = *(_OWORD *)(a2 + 27);
                  long long v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 16) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 16) = *(_OWORD *)v52;
                  __n128 result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v10) >> 4);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*((double *)a2 - 5) < *(double *)(v10 + 8))
                {
                  *(_OWORD *)char v118 = *(_OWORD *)(v10 + 16);
                  *(_OWORD *)&v118[16] = *(_OWORD *)(v10 + 32);
                  long long v110 = *(_OWORD *)v10;
                  long long v52 = *(a2 - 3);
                  long long v53 = *(a2 - 2);
                  *(_OWORD *)(v10 + 27) = *(long long *)((char *)a2 - 21);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(long long *)((char *)a2 - 21) = *(_OWORD *)&v118[11];
                  *(a2 - 3) = v110;
                  *(a2 - 2) = *(_OWORD *)v118;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)v10, (long long *)(v10 + 48), a2 - 3);
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v10, v10 + 48, v10 + 96, (uint64_t)(a2 - 3));
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v10, v10 + 48, v10 + 96, v10 + 144, (uint64_t)(a2 - 3));
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 1151)
          {
            unint64_t v54 = (long long *)(v10 + 48);
            BOOL v56 = (long long *)v10 == a2 || v54 == a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  float v59 = v54;
                  double v60 = *(double *)(v58 + 56);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *(void *)v54;
                    *(_OWORD *)id v111 = *(_OWORD *)(v58 + 64);
                    *(_OWORD *)&v111[16] = *(_OWORD *)(v58 + 80);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      unint64_t v63 = (_OWORD *)(v10 + v62);
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      v63[3] = *(_OWORD *)(v10 + v62);
                      v63[4] = v64;
                      *(_OWORD *)((char *)v63 + 75) = *(_OWORD *)(v10 + v62 + 27);
                      if (!v62) {
                        break;
                      }
                      v62 -= 48;
                      if (v60 >= *((double *)v63 - 5))
                      {
                        uint64_t v65 = v10 + v62 + 48;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = *(_OWORD *)v111;
                    *(_OWORD *)(v65 + 27) = *(_OWORD *)&v111[11];
                  }
                  unint64_t v54 = v59 + 3;
                  v57 += 48;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 3 != a2);
              }
            }
            else if (!v56)
            {
              do
              {
                double v98 = v54;
                double v99 = *(double *)(a1 + 56);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *(void *)v54;
                  *(_OWORD *)unint64_t v114 = *(_OWORD *)(a1 + 64);
                  *(_OWORD *)&v114[16] = *(_OWORD *)(a1 + 80);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(v101 - 2);
                    *long long v101 = *(v101 - 3);
                    v101[1] = v102;
                    *(long long *)((char *)v101 + 27) = *(long long *)((char *)v101 - 21);
                    double v103 = *((double *)v101 - 11);
                    v101 -= 3;
                  }
                  while (v99 < v103);
                  *(void *)long long v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *(long long *)((char *)v101 + 27) = *(_OWORD *)&v114[11];
                  v101[1] = *(_OWORD *)v114;
                }
                v54 += 3;
                a1 = (unint64_t)v98;
              }
              while (v98 + 3 != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((long long *)v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 48 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v70 + 8) < *(double *)(v70 + 56))
                  {
                    v70 += 48;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  unint64_t v71 = v10 + 48 * v68;
                  double v72 = *(double *)(v71 + 8);
                  if (*(double *)(v70 + 8) >= v72)
                  {
                    uint64_t v73 = *(void *)v71;
                    *(_OWORD *)uint64_t v112 = *(_OWORD *)(v71 + 16);
                    *(_OWORD *)&v112[16] = *(_OWORD *)(v71 + 32);
                    do
                    {
                      long long v74 = (_OWORD *)v71;
                      unint64_t v71 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_OWORD *)((char *)v74 + 27) = *(_OWORD *)(v70 + 27);
                      *long long v74 = v75;
                      v74[1] = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = 2 * v69;
                      uint64_t v69 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 48 * v69;
                      uint64_t v78 = v77 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v70 + 8) < *(double *)(v70 + 56))
                      {
                        v70 += 48;
                        uint64_t v69 = v78;
                      }
                    }
                    while (*(double *)(v70 + 8) >= v72);
                    *(void *)unint64_t v71 = v73;
                    *(double *)(v71 + 8) = v72;
                    *(_OWORD *)(v71 + 16) = *(_OWORD *)v112;
                    *(_OWORD *)(v71 + 27) = *(_OWORD *)&v112[11];
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x30uLL;
              do
              {
                uint64_t v80 = 0;
                *(_OWORD *)char v119 = *(_OWORD *)(v10 + 16);
                *(_OWORD *)&v119[16] = *(_OWORD *)(v10 + 32);
                long long v113 = *(_OWORD *)v10;
                unint64_t v81 = v10;
                do
                {
                  long long v82 = (_OWORD *)v81;
                  v81 += 48 * v80 + 48;
                  uint64_t v83 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v84 = v83 + 2;
                  if (v84 < v79 && *(double *)(v81 + 8) < *(double *)(v81 + 56))
                  {
                    v81 += 48;
                    uint64_t v80 = v84;
                  }
                  long long v85 = *(_OWORD *)v81;
                  long long v86 = *(_OWORD *)(v81 + 16);
                  *(_OWORD *)((char *)v82 + 27) = *(_OWORD *)(v81 + 27);
                  _OWORD *v82 = v85;
                  v82[1] = v86;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 3;
                if ((long long *)v81 == a2)
                {
                  *(_OWORD *)(v81 + 27) = *(_OWORD *)&v119[11];
                  *(_OWORD *)unint64_t v81 = v113;
                  *(_OWORD *)(v81 + 16) = *(_OWORD *)v119;
                }
                else
                {
                  long long v87 = *a2;
                  long long v88 = a2[1];
                  *(_OWORD *)(v81 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v81 = v87;
                  *(_OWORD *)(v81 + 16) = v88;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v119[11];
                  *a2 = v113;
                  a2[1] = *(_OWORD *)v119;
                  uint64_t v89 = v81 - v10 + 48;
                  if (v89 >= 49)
                  {
                    unint64_t v90 = (v89 / 0x30uLL - 2) >> 1;
                    unint64_t v91 = v10 + 48 * v90;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      *(_OWORD *)long long v106 = *(_OWORD *)(v81 + 16);
                      *(_OWORD *)&v106[16] = *(_OWORD *)(v81 + 32);
                      do
                      {
                        int v94 = (_OWORD *)v81;
                        unint64_t v81 = v91;
                        long long v95 = *(_OWORD *)v91;
                        long long v96 = *(_OWORD *)(v91 + 16);
                        *(_OWORD *)((char *)v94 + 27) = *(_OWORD *)(v91 + 27);
                        _OWORD *v94 = v95;
                        v94[1] = v96;
                        if (!v90) {
                          break;
                        }
                        unint64_t v90 = (v90 - 1) >> 1;
                        unint64_t v91 = v10 + 48 * v90;
                      }
                      while (*(double *)(v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_OWORD *)(v81 + 16) = *(_OWORD *)v106;
                      *(_OWORD *)(v81 + 27) = *(_OWORD *)&v106[11];
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (long long *)(v10 + 48 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v12 >> 1)), a2 - 3);
            uint64_t v15 = 3 * v13;
            long long v16 = (long long *)(a1 + 48 * v13 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48), v16, a2 - 6);
            long long v17 = (long long *)(a1 + 48 + 16 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 96), v17, a2 - 9);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v16, v14, v17);
            *(_OWORD *)unint64_t v115 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v115[16] = *(_OWORD *)(a1 + 32);
            long long v107 = *(_OWORD *)a1;
            long long v18 = *(long long *)((char *)v14 + 27);
            long long v19 = v14[1];
            *(_OWORD *)a1 = *v14;
            *(_OWORD *)(a1 + 16) = v19;
            *(_OWORD *)(a1 + 27) = v18;
            *(long long *)((char *)v14 + 27) = *(_OWORD *)&v115[11];
            *uint64_t v14 = v107;
            v14[1] = *(_OWORD *)v115;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48 * (v12 >> 1)), (long long *)a1, a2 - 3);
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 40) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          *(_OWORD *)id v105 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)&v105[16] = *(_OWORD *)(a1 + 32);
          if (v20 >= *((double *)a2 - 5))
          {
            unint64_t v41 = a1 + 48;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= (unint64_t)a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 48;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 48;
              double v40 = *(double *)(v39 + 56);
              v39 += 48;
            }
            while (v20 >= v40);
          }
          uint64_t v43 = a2;
          if (v10 < (unint64_t)a2)
          {
            long long v44 = a2;
            do
            {
              uint64_t v43 = v44 - 3;
              double v45 = *((double *)v44 - 5);
              v44 -= 3;
            }
            while (v20 < v45);
          }
          while (v10 < (unint64_t)v43)
          {
            *(_OWORD *)uint64_t v117 = *(_OWORD *)(v10 + 16);
            *(_OWORD *)&v117[16] = *(_OWORD *)(v10 + 32);
            long long v109 = *(_OWORD *)v10;
            long long v46 = *v43;
            long long v47 = v43[1];
            *(_OWORD *)(v10 + 27) = *(long long *)((char *)v43 + 27);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(long long *)((char *)v43 + 27) = *(_OWORD *)&v117[11];
            *uint64_t v43 = v109;
            v43[1] = *(_OWORD *)v117;
            do
            {
              double v48 = *(double *)(v10 + 56);
              v10 += 48;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *((double *)v43 - 5);
              v43 -= 3;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 48 >= a1;
          BOOL v5 = v10 - 48 == a1;
          if (v10 - 48 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 48);
            long long v51 = *(_OWORD *)(v10 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v10 - 21);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 48) = v38;
          *(double *)(v10 - 40) = v20;
          *(_OWORD *)(v10 - 21) = *(_OWORD *)&v105[11];
          *(_OWORD *)(v10 - 32) = *(_OWORD *)v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        *(_OWORD *)uint64_t v104 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v104[16] = *(_OWORD *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 56);
          v21 += 48;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        uint64_t v25 = a2;
        if (v21 == 48)
        {
          long long v28 = a2;
          while (v24 < (unint64_t)v28)
          {
            long long v26 = v28 - 3;
            double v29 = *((double *)v28 - 5);
            v28 -= 3;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          long long v26 = v28;
        }
        else
        {
          do
          {
            long long v26 = v25 - 3;
            double v27 = *((double *)v25 - 5);
            v25 -= 3;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < (unint64_t)v26)
        {
          long long v30 = v26;
          do
          {
            *(_OWORD *)uint64_t v116 = *(_OWORD *)(v10 + 16);
            *(_OWORD *)&v116[16] = *(_OWORD *)(v10 + 32);
            long long v108 = *(_OWORD *)v10;
            long long v31 = *v30;
            long long v32 = v30[1];
            *(_OWORD *)(v10 + 27) = *(long long *)((char *)v30 + 27);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(long long *)((char *)v30 + 27) = *(_OWORD *)&v116[11];
            *long long v30 = v108;
            v30[1] = *(_OWORD *)v116;
            do
            {
              double v33 = *(double *)(v10 + 56);
              v10 += 48;
            }
            while (v33 < v20);
            do
            {
              double v34 = *((double *)v30 - 5);
              v30 -= 3;
            }
            while (v34 >= v20);
          }
          while (v10 < (unint64_t)v30);
        }
        if (v10 - 48 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 48);
          long long v36 = *(_OWORD *)(v10 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v10 - 21);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 48) = v22;
        *(double *)(v10 - 40) = v20;
        *(_OWORD *)(v10 - 21) = *(_OWORD *)&v104[11];
        *(_OWORD *)(v10 - 32) = *(_OWORD *)v104;
        if (v24 >= (unint64_t)v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*,false>(a1, v10 - 48, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>(a1, v10 - 48);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>(v10, (uint64_t)a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = (long long *)(v10 - 48);
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 40) < *(double *)(a1 + 8))
      {
        long long v6 = *(_OWORD *)a1;
        *(_OWORD *)double v20 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v20[16] = *(_OWORD *)(a1 + 32);
        long long v7 = *(_OWORD *)(a2 - 21);
        long long v8 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 27) = v7;
        *(_OWORD *)(a2 - 48) = v6;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v20;
        *(_OWORD *)(a2 - 21) = *(_OWORD *)&v20[11];
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48);
      return 1;
    default:
      uint64_t v9 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96));
      uint64_t v10 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    double v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      uint64_t v14 = *(void *)v10;
      *(_OWORD *)long long v19 = *(_OWORD *)(v10 + 16);
      *(_OWORD *)&v19[16] = *(_OWORD *)(v10 + 32);
      uint64_t v15 = v11;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        long long v17 = *(_OWORD *)(a1 + v15 + 112);
        *(_OWORD *)(v16 + 144) = *(_OWORD *)(a1 + v15 + 96);
        *(_OWORD *)(v16 + 160) = v17;
        *(_OWORD *)(v16 + 171) = *(_OWORD *)(a1 + v15 + 123);
        if (v15 == -96) {
          break;
        }
        v15 -= 48;
        if (v13 >= *(double *)(v16 + 56))
        {
          uint64_t v18 = a1 + v15 + 144;
          goto LABEL_12;
        }
      }
      uint64_t v18 = a1;
LABEL_12:
      *(void *)uint64_t v18 = v14;
      *(double *)(v18 + 8) = v13;
      *(_OWORD *)(v18 + 16) = *(_OWORD *)v19;
      *(_OWORD *)(v18 + 27) = *(_OWORD *)&v19[11];
      if (++v12 == 8) {
        return v10 + 48 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 48;
    v10 += 48;
    if (v10 == a2) {
      return 1;
    }
  }
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)#1}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)>::~__func()
{
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)#1}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F1723D70;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)#1}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1723D70;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)#1}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)#1}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)#1}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 616))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a4, 3, @"Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date");
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_configureForStartTime(a1);
  }
  double v8 = *(double *)(a2 + 8);
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9)
  {
    if (*(unsigned char *)(a1 + 616))
    {
      double v10 = -1.79769313e308;
    }
    else
    {
      double v10 = *(double *)(a1 + 176);
      double v12 = *(double *)(a1 + 120);
      if (v10 <= v12) {
        double v10 = -1.79769313e308;
      }
      if (v10 < v12) {
        double v10 = *(double *)(a1 + 120);
      }
    }
  }
  else
  {
    double v10 = *(double *)(a1 + 176);
    if (v10 <= *(double *)(a1 + 120)) {
      double v10 = -1.79769313e308;
    }
  }
  if (v10 <= v8)
  {
    if (v9 && a3) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_advanceToTime(a1, v8);
    }
    HDStatisticsCollectionEngine<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    double v13 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
    uint64_t v11 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v13, a4);
  }
  return v11;
}

void sub_1BD0BF684(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_advanceToTime(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 128) <= a2)
  {
    uint64_t v4 = a1 + 112;
    BOOL v5 = (double *)(a1 + 120);
    do
    {
      uint64_t v6 = *(void *)(a1 + 592);
      uint64_t v7 = *(void *)(a1 + 584);
      if (v6 == v7)
      {
        uint64_t v22 = 0;
        uint64_t v15 = *(void **)(a1 + 40);
        uint64_t v16 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a2];
        double v8 = [v15 dateIntervalContainingDate:v16 index:&v22];

        HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v17 = v22;
        double v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v19 = v18;
        double v20 = [v8 endDate];
        [v20 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::resetToBucket(v4, v17, v19, v21);
      }
      else
      {
        double v8 = [*(id *)(a1 + 40) dateIntervalAtIndex:*(void *)(a1 + 112) + 1];
        HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_statisticsFromFinishedBucket(a1, v5);
        double v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v12 = v11;
        double v13 = [v8 endDate];
        [v13 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::advanceBucket(v4, v12, v14);
      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_didChangeBucket(a1, v9);
      if (v6 != v7) {
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_notifyForCurrentBucket(a1);
      }
    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1BD0BF890(_Unwind_Exception *exception_object)
{
}

void HDStatisticsCollectionEngine<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a1 + 8;
  double v6 = *(double *)(a1 + 8);
  double v7 = *(double *)(a2 + 8);
  double v8 = *(double *)(a2 + 16);
  uint64_t v9 = *(uint64_t **)(a2 + 24);
  unsigned __int8 v10 = *(unsigned char *)(a2 + 32);
  char v11 = *(unsigned char *)(a2 + 33);
  int v12 = v10;
  char v13 = v11;
  unint64_t v14 = (unint64_t)v9;
  double v15 = v8;
  double v16 = v7;
  if (v6 - v7 >= 0.01)
  {
    if (v8 - v7 - (v6 - v7) >= 0.01)
    {
      int v12 = *(unsigned __int8 *)(a2 + 32);
      char v13 = *(unsigned char *)(a2 + 33);
      unint64_t v14 = *(void *)(a2 + 24);
      double v15 = *(double *)(a2 + 16);
      double v16 = *(double *)(a1 + 8);
    }
    else
    {
      int v12 = 0;
      char v13 = 0;
      unint64_t v14 = 0;
      double v15 = 0.0;
      double v16 = 0.0;
    }
  }
  uint64_t v17 = *(uint64_t **)a2;
  double v18 = *(double *)(a1 + 16);
  double v19 = v18 - v16;
  double v20 = v15 - v16 - (v18 - v16);
  if (!*(_DWORD *)(a1 + 36))
  {
    if (v20 < 0.01)
    {
LABEL_10:
      unint64_t v65 = 0;
      int v21 = 0;
      char v66 = 0;
      double v18 = 0.0;
      double v22 = 0.0;
      if (!v12) {
        goto LABEL_28;
      }
      goto LABEL_11;
    }
    if (v19 >= 0.01) {
      goto LABEL_27;
    }
LABEL_25:
    int v21 = v12;
    unint64_t v28 = v14;
    double v22 = v15;
    double v18 = v16;
    if (!v21) {
      return;
    }
    goto LABEL_56;
  }
  if (v19 < 0.01) {
    goto LABEL_25;
  }
  if (v20 < 0.01) {
    goto LABEL_10;
  }
LABEL_27:
  double v22 = v15;
  unint64_t v65 = v14;
  int v21 = v12;
  char v66 = v13;
  double v15 = *(double *)(a1 + 16);
  if (!v12)
  {
LABEL_28:
    char v13 = v66;
    unint64_t v28 = v65;
    if (!v21) {
      return;
    }
    goto LABEL_56;
  }
LABEL_11:
  double v63 = v16;
  double v64 = v15;
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 288, v14, v14);
  unint64_t v23 = *(void *)(a1 + 112);
  if (v23 == *(void *)(a1 + 104) && *(uint64_t *)(a1 + 160) <= 0)
  {
    v29.f64[1] = *(float64_t *)(a1 + 16);
    double v24 = v63;
    double v25 = v64;
    v29.f64[0] = v63;
    v30.f64[0] = *(float64_t *)(a1 + 8);
    v30.f64[1] = v64;
    int8x16_t v31 = (int8x16_t)vcgtq_f64(v30, v29);
    v30.f64[0] = v63;
    *(int8x16_t *)(a1 + 48) = vbslq_s8(v31, *(int8x16_t *)(a1 + 8), (int8x16_t)v30);
    if (!a3) {
      goto LABEL_31;
    }
    goto LABEL_22;
  }
  double v24 = v63;
  double v25 = v64;
  if (v63 < *(double *)(a1 + 48))
  {
    double v26 = *(double *)(a1 + 8);
    if (v63 >= v26) {
      double v26 = v63;
    }
    *(double *)(a1 + 48) = v26;
  }
  if (v64 > *(double *)(a1 + 56))
  {
    double v27 = *(double *)(a1 + 16);
    if (v27 >= v64) {
      double v27 = v64;
    }
    *(double *)(a1 + 56) = v27;
  }
  if (a3)
  {
LABEL_22:
    if (v24 < *(double *)(a1 + 16))
    {
      HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeThroughTime(v5, v24);
      double v24 = v63;
      double v25 = v64;
      unint64_t v23 = *(void *)(a1 + 112);
    }
  }
LABEL_31:
  unint64_t v32 = *(void *)(a1 + 120);
  if (v23 >= v32)
  {
    uint64_t v34 = *(void *)(a1 + 104);
    unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - v34) >> 4);
    unint64_t v36 = v35 + 1;
    if (v35 + 1 > 0x555555555555555) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - v34) >> 4);
    if (2 * v37 > v36) {
      unint64_t v36 = 2 * v37;
    }
    if (v37 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v38 = 0x555555555555555;
    }
    else {
      unint64_t v38 = v36;
    }
    if (v38)
    {
      unint64_t v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v38);
      double v24 = v63;
      double v25 = v64;
    }
    else
    {
      uint64_t v39 = 0;
    }
    unint64_t v40 = v38 + 48 * v35;
    unint64_t v41 = v38 + 48 * v39;
    *(void *)unint64_t v40 = v17;
    *(double *)(v40 + 8) = v24;
    *(double *)(v40 + 16) = v25;
    *(void *)(v40 + 24) = v14;
    *(unsigned char *)(v40 + 32) = v12;
    *(unsigned char *)(v40 + 33) = v13;
    *(_WORD *)(v40 + 40) = 0;
    *(unsigned char *)(v40 + 42) = 0;
    unint64_t v33 = v40 + 48;
    uint64_t v43 = *(char **)(a1 + 104);
    double v42 = *(char **)(a1 + 112);
    if (v42 == v43)
    {
      char v13 = v66;
      unint64_t v28 = v65;
    }
    else
    {
      char v13 = v66;
      unint64_t v28 = v65;
      do
      {
        long long v44 = *((_OWORD *)v42 - 3);
        long long v45 = *((_OWORD *)v42 - 2);
        *(_OWORD *)(v40 - 21) = *(_OWORD *)(v42 - 21);
        *(_OWORD *)(v40 - 48) = v44;
        *(_OWORD *)(v40 - 32) = v45;
        v40 -= 48;
        v42 -= 48;
      }
      while (v42 != v43);
      double v42 = *(char **)(a1 + 104);
    }
    *(void *)(a1 + 104) = v40;
    *(void *)(a1 + 112) = v33;
    *(void *)(a1 + 120) = v41;
    if (v42) {
      operator delete(v42);
    }
  }
  else
  {
    *(void *)unint64_t v23 = v17;
    *(double *)(v23 + 8) = v24;
    *(double *)(v23 + 16) = v25;
    *(void *)(v23 + 24) = v14;
    *(unsigned char *)(v23 + 32) = v12;
    *(unsigned char *)(v23 + 33) = v13;
    *(_WORD *)(v23 + 40) = 0;
    unint64_t v33 = v23 + 48;
    *(unsigned char *)(v23 + 42) = 0;
    char v13 = v66;
    unint64_t v28 = v65;
  }
  *(void *)(a1 + 112) = v33;
  if (!*(unsigned char *)(a1 + 200) || *(double *)(a1 + 176) <= v7)
  {
    *(void *)(a1 + 168) = v17;
    *(double *)(a1 + 176) = v7;
    *(double *)(a1 + 184) = v8;
    *(void *)(a1 + 192) = v9;
    *(unsigned char *)(a1 + 200) = v10;
    *(unsigned char *)(a1 + 201) = v11;
  }
  if (*(unsigned char *)(a1 + 33)
    && ((unint64_t v46 = HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_canonicalSourceIDForSourceID(v5, v14), v47 = HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_statisticsForSource(v5, v46), !*((unsigned char *)v47 + 72))|| *((double *)v47 + 6) <= v7))
  {
    v47[5] = v17;
    *((double *)v47 + 6) = v7;
    *((double *)v47 + 7) = v8;
    v47[8] = v9;
    *((unsigned char *)v47 + 72) = v10;
    *((unsigned char *)v47 + 73) = v11;
    if (!v21) {
      return;
    }
  }
  else if (!v21)
  {
    return;
  }
LABEL_56:
  unint64_t v48 = *(void *)(a1 + 480);
  unint64_t v49 = *(void *)(a1 + 488);
  if (v48 >= v49)
  {
    uint64_t v51 = *(void *)(a1 + 472);
    unint64_t v52 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v48 - v51) >> 3);
    unint64_t v53 = v52 + 1;
    if (v52 + 1 > 0x666666666666666) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v54 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v49 - v51) >> 3);
    if (2 * v54 > v53) {
      unint64_t v53 = 2 * v54;
    }
    if (v54 >= 0x333333333333333) {
      unint64_t v55 = 0x666666666666666;
    }
    else {
      unint64_t v55 = v53;
    }
    if (v55) {
      unint64_t v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v55);
    }
    else {
      uint64_t v56 = 0;
    }
    unint64_t v57 = v55 + 40 * v52;
    unint64_t v58 = v55 + 40 * v56;
    *(void *)unint64_t v57 = v17;
    *(double *)(v57 + 8) = v18;
    *(double *)(v57 + 16) = v22;
    *(void *)(v57 + 24) = v28;
    *(unsigned char *)(v57 + 32) = v21;
    *(unsigned char *)(v57 + 33) = v13;
    unint64_t v50 = v57 + 40;
    double v60 = *(char **)(a1 + 472);
    float v59 = *(char **)(a1 + 480);
    if (v59 != v60)
    {
      do
      {
        long long v61 = *(_OWORD *)(v59 - 40);
        long long v62 = *(_OWORD *)(v59 - 24);
        *(_WORD *)(v57 - 8) = *((_WORD *)v59 - 4);
        *(_OWORD *)(v57 - 24) = v62;
        *(_OWORD *)(v57 - 40) = v61;
        v57 -= 40;
        v59 -= 40;
      }
      while (v59 != v60);
      float v59 = *(char **)(a1 + 472);
    }
    *(void *)(a1 + 472) = v57;
    *(void *)(a1 + 480) = v50;
    *(void *)(a1 + 488) = v58;
    if (v59) {
      operator delete(v59);
    }
  }
  else
  {
    *(void *)unint64_t v48 = v17;
    *(double *)(v48 + 8) = v18;
    *(double *)(v48 + 16) = v22;
    *(void *)(v48 + 24) = v28;
    *(unsigned char *)(v48 + 32) = v21;
    unint64_t v50 = v48 + 40;
    *(unsigned char *)(v48 + 33) = v13;
  }
  *(void *)(a1 + 480) = v50;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_notifyForCurrentBucket(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 618))
  {
    *(unsigned char *)(a1 + 620) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 620) = 0;
    uint64_t v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      uint64_t v4 = v2;
      id v3 = (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      if (v3) {
        v4[2](v4, v3);
      }

      uint64_t v2 = v4;
    }
  }
}

void sub_1BD0BFE84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  uint64_t v9 = 0;
  unsigned __int8 v10 = 0;
  uint64_t v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 472), *(void *)(a1 + 480), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 480) - *(void *)(a1 + 472)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::resetToBucket(a1, *(void *)a1 + 1, a2, a3);
  double v6 = v9;
  double v7 = v10;
  if (v9 != v10)
  {
    uint64_t v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BD0BFF80(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8 = a1 + 40;
  objc_storeStrong((id *)(a1 + 496), *(id *)(a1 + 40));
  *(double *)(v8 - 32) = a3;
  *(double *)(v8 - 24) = a4;
  *(double *)(v8 + 24) = a3;
  *(void *)(v8 + 72) = *(void *)(v8 + 64);
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(void *)(v8 + 216) = 0;
  if (*(void *)(v8 + 240))
  {
    uint64_t v9 = *(void **)(a1 + 264);
    uint64_t v10 = *(void *)(a1 + 272);
    *(void *)(a1 + 264) = a1 + 272;
    *(void *)(v10 + 16) = 0;
    *(void *)(a1 + 272) = 0;
    *(void *)(a1 + 280) = 0;
    if (v9[1]) {
      uint64_t v11 = (void *)v9[1];
    }
    else {
      uint64_t v11 = v9;
    }
    if (v11)
    {
      int v12 = (void *)v11[2];
      if (v12)
      {
        char v13 = (void *)*v12;
        if ((void *)*v12 == v11)
        {
          *int v12 = 0;
          while (1)
          {
            double v15 = (void *)v12[1];
            if (!v15) {
              break;
            }
            do
            {
              int v12 = v15;
              double v15 = (void *)*v15;
            }
            while (v15);
          }
        }
        else
        {
          for (v12[1] = 0; v13; char v13 = (void *)v12[1])
          {
            do
            {
              int v12 = v13;
              char v13 = (void *)*v13;
            }
            while (v13);
          }
        }
        std::__tree<long>::destroy(v11);
        for (uint64_t i = (void *)v12[2]; i; uint64_t i = (void *)i[2])
          int v12 = i;
        uint64_t v11 = v12;
      }
    }
    std::__tree<long>::destroy(v11);
  }
  objc_storeStrong((id *)v8, *(id *)(a1 + 496));
  *(void *)(a1 + 480) = *(void *)(a1 + 472);
  *(void *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 620))
  {
    if (v3)
    {
      id v6 = v3;
      uint64_t v4 = _Block_copy(*(const void **)(a1 + 96));
      uint64_t v5 = v4;
      if (v4) {
        (*((void (**)(void *, id))v4 + 2))(v4, v6);
      }

      id v3 = v6;
    }
    *(unsigned char *)(a1 + 620) = 0;
  }
}

void sub_1BD0C0148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_currentBucketInterval(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 616))
  {
    unint64_t v1 = 0;
  }
  else
  {
    unint64_t v1 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", *(double *)(a1 + 120), *(double *)(a1 + 128));
  }

  return v1;
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 startDate];
  id v6 = [v4 startDate];
  uint64_t v7 = [v5 compare:v6];

  return v7;
}

void sub_1BD0C021C(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_primitiveInvalidateInterval(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 13);
  if (WeakRetained)
  {
    if (v5
      && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_currentBucketInterval((uint64_t)a1),
          (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v8 = [v5 endDate];
      uint64_t v9 = [v7 startDate];
      if (objc_msgSend(v8, "hk_isAfterDate:", v9))
      {
        uint64_t v10 = [v5 startDate];
        uint64_t v11 = [v7 endDate];
        char v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);
      }
      else
      {
        char v12 = 0;
      }

      char v13 = _Block_copy(a1[12]);
      if ((v12 & 1) == 0) {
        operator new();
      }
    }
    else
    {
      char v13 = _Block_copy(a1[12]);
    }
    *((unsigned char *)a1 + 616) = 1;
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
    v27[3] = &unk_1E6308FF8;
    id v15 = v5;
    id v28 = v15;
    id v16 = v13;
    id v29 = v16;
    (*((void (**)(id *, void *))*a1 + 9))(a1, v27);
    if (v5)
    {
      uint64_t v17 = [v15 startDate];
      [v17 timeIntervalSinceReferenceDate];
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_configureForStartTime((uint64_t)a1);
    }
    else
    {
      (*((void (**)(id *))*a1 + 4))(a1);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
    v21[3] = &unk_1E6309060;
    double v24 = a1;
    id v5 = v15;
    char v26 = 1;
    id v22 = v5;
    double v25 = a1;
    id v23 = WeakRetained;
    uint64_t v14 = (*((uint64_t (**)(id *, void *, uint64_t))*a1 + 14))(a1, v21, a3);
    double v18 = _Block_copy(v16);
    id v19 = a1[12];
    a1[12] = v18;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to invalidate interval: no data source available.");
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1BD0C066C(_Unwind_Exception *a1)
{
  MEMORY[0x1C187B8A0](v4, 0x10F1C40D51310DCLL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_11;
  }
  id v3 = [v10 endDate];
  uint64_t v4 = [*(id *)(a1 + 32) startDate];
  char v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    id v6 = [v10 startDate];
    uint64_t v7 = [*(id *)(a1 + 32) endDate];
    char v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_11:
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9) {
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
      }
    }
  }
}

void sub_1BD0C0850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = [*(id *)(a1 + 32) startDate];
  [v5 timeIntervalSinceReferenceDate];
  uint64_t v7 = v6;

  char v8 = [*(id *)(a1 + 32) endDate];
  [v8 timeIntervalSinceReferenceDate];
  uint64_t v10 = v9;

  uint64_t v11 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  uint64_t v13 = *(void *)(a1 + 32);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  char v32 = *(unsigned char *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  uint64_t v31 = *(void *)(a1 + 56);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  uint64_t v14 = [v11 collectionCalculator:WeakRetained queryForInterval:v13 error:a2 sampleHandler:v30 mergeHandler:v29];

  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15 != v4)
    {
      id v16 = [*(id *)(a1 + 32) endDate];
      [v16 timeIntervalSinceReferenceDate];
      if (*(void *)(v15 + 40))
      {
        double v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          id v19 = [*(id *)(v15 + 40) dateIntervalAtIndex:*(void *)(v15 + 112) + 1];
          HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          double v20 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_statisticsFromFinishedBucket(v15, (double *)(v15 + 120));
          int v21 = [v19 startDate];
          [v21 timeIntervalSinceReferenceDate];
          double v23 = v22;
          double v24 = [v19 endDate];
          [v24 timeIntervalSinceReferenceDate];
          HDStatisticsCollectionEngine<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            char v26 = _Block_copy(*(const void **)(v15 + 96));
            double v27 = v26;
            if (v26) {
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);
            }
          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_didChangeBucket(v15, 0);
        }
      }
    }
  }
  return v14;
}

void sub_1BD0C0AFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7 = *(double *)(a1 + 32) - a6;
  if (v7 >= 0.01)
  {
    if (a7 - a6 - v7 >= 0.01)
    {
      int v8 = 1;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      int v8 = 0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    int v8 = 1;
  }
  double v11 = a5;
  double v12 = a6;
  double v13 = a7;
  uint64_t v14 = a2;
  char v15 = v8;
  char v16 = 0;
  if (*(unsigned char *)(a1 + 56))
  {
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v11, a3, a4);
    }
  }
  else
  {
    double v10 = *(double *)(a1 + 40) - a6;
    if (v10 >= 0.01)
    {
      if (a7 - a6 - v10 >= 0.01) {
        a7 = *(double *)(a1 + 40);
      }
    }
    else
    {
      int v8 = 0;
    }
    double v12 = a6;
    double v13 = a7;
    char v15 = v8;
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v11, a3, a4);
    }
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 616)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_configureForStartTime(a1);
  }
  if (*(void *)(a1 + 40)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_advanceToTime(a1, a2);
  }
  if (*(double *)(a1 + 128) > a2)
  {
    HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeThroughTime(a1 + 120, a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 32) < *(double *)(v10 + 8))
                {
                  uint64_t v129 = *(void *)(v10 + 32);
                  long long v113 = *(_OWORD *)v10;
                  long long v121 = *(_OWORD *)(v10 + 16);
                  long long v52 = *(_OWORD *)(a2 - 40);
                  long long v53 = *(_OWORD *)(a2 - 24);
                  *(_WORD *)(v10 + 32) = *(_WORD *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(_WORD *)(a2 - 8) = v129;
                  *(_OWORD *)(a2 - 24) = v121;
                  *(_OWORD *)(a2 - 40) = v113;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v10, (double *)(v10 + 40), (double *)(a2 - 40));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, v10 + 120, a2 - 40);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            unint64_t v54 = (void *)(v10 + 40);
            BOOL v56 = v10 == a2 || v54 == (void *)a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  float v59 = v54;
                  double v60 = *(double *)(v58 + 48);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *v54;
                    long long v114 = *(_OWORD *)(v58 + 56);
                    uint64_t v122 = *(void *)(v58 + 72);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      uint64_t v63 = v10 + v62;
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      *(_OWORD *)(v63 + 40) = *(_OWORD *)(v10 + v62);
                      *(_OWORD *)(v63 + 56) = v64;
                      *(_WORD *)(v63 + 72) = *(_WORD *)(v10 + v62 + 32);
                      if (!v62) {
                        break;
                      }
                      v62 -= 40;
                      if (v60 >= *(double *)(v63 - 32))
                      {
                        uint64_t v65 = v10 + v62 + 40;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = v114;
                    *(_WORD *)(v65 + 32) = v122;
                  }
                  unint64_t v54 = v59 + 5;
                  v57 += 40;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 5 != (void *)a2);
              }
            }
            else if (!v56)
            {
              do
              {
                double v98 = v54;
                double v99 = *(double *)(a1 + 48);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *v54;
                  long long v117 = *(_OWORD *)(a1 + 56);
                  uint64_t v125 = *(void *)(a1 + 72);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(_OWORD *)(v101 - 3);
                    *(_OWORD *)long long v101 = *(_OWORD *)(v101 - 5);
                    *((_OWORD *)v101 + 1) = v102;
                    *((_WORD *)v101 + 16) = *((_WORD *)v101 - 4);
                    double v103 = *((double *)v101 - 9);
                    v101 -= 5;
                  }
                  while (v99 < v103);
                  *long long v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *((_WORD *)v101 + 16) = v125;
                  *((_OWORD *)v101 + 1) = v117;
                }
                v54 += 5;
                a1 = (unint64_t)v98;
              }
              while (v98 + 5 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 40 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v10 + 40 * v69 + 8) < *(double *)(v70 + 48))
                  {
                    v70 += 40;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  double v71 = *(double *)(v10 + 40 * v68 + 8);
                  if (*(double *)(v70 + 8) >= v71)
                  {
                    unint64_t v72 = v10 + 40 * v68;
                    uint64_t v73 = *(void *)v72;
                    uint64_t v123 = *(void *)(v72 + 32);
                    long long v115 = *(_OWORD *)(v72 + 16);
                    do
                    {
                      unint64_t v74 = v72;
                      unint64_t v72 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_WORD *)(v74 + 32) = *(_WORD *)(v70 + 32);
                      *(_OWORD *)unint64_t v74 = v75;
                      *(_OWORD *)(v74 + 16) = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 40 * v77;
                      uint64_t v78 = 2 * v69 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v10 + 40 * v77 + 8) < *(double *)(v70 + 48))
                      {
                        v70 += 40;
                        uint64_t v77 = v78;
                      }
                      uint64_t v69 = v77;
                    }
                    while (*(double *)(v70 + 8) >= v71);
                    *(void *)unint64_t v72 = v73;
                    *(double *)(v72 + 8) = v71;
                    *(_OWORD *)(v72 + 16) = v115;
                    *(_WORD *)(v72 + 32) = v123;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x28uLL;
              do
              {
                uint64_t v80 = 0;
                uint64_t v130 = *(void *)(v10 + 32);
                long long v116 = *(_OWORD *)v10;
                long long v124 = *(_OWORD *)(v10 + 16);
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = v81;
                  uint64_t v83 = v80 + 1;
                  v81 += 40 * (v80 + 1);
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v85 = v84 + 2;
                  if (v85 < v79 && *(double *)(v82 + 40 * v83 + 8) < *(double *)(v81 + 48))
                  {
                    v81 += 40;
                    uint64_t v80 = v85;
                  }
                  long long v86 = *(_OWORD *)v81;
                  long long v87 = *(_OWORD *)(v81 + 16);
                  *(_WORD *)(v82 + 32) = *(_WORD *)(v81 + 32);
                  *(_OWORD *)unint64_t v82 = v86;
                  *(_OWORD *)(v82 + 16) = v87;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 40;
                if (v81 == a2)
                {
                  *(_WORD *)(v81 + 32) = v130;
                  *(_OWORD *)unint64_t v81 = v116;
                  *(_OWORD *)(v81 + 16) = v124;
                }
                else
                {
                  long long v88 = *(_OWORD *)a2;
                  long long v89 = *(_OWORD *)(a2 + 16);
                  *(_WORD *)(v81 + 32) = *(_WORD *)(a2 + 32);
                  *(_OWORD *)unint64_t v81 = v88;
                  *(_OWORD *)(v81 + 16) = v89;
                  *(_WORD *)(a2 + 32) = v130;
                  *(_OWORD *)a2 = v116;
                  *(_OWORD *)(a2 + 16) = v124;
                  uint64_t v90 = v81 - v10 + 40;
                  if (v90 >= 41)
                  {
                    unint64_t v91 = (v90 / 0x28uLL - 2) >> 1;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v10 + 40 * v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      uint64_t v109 = *(void *)(v81 + 32);
                      long long v106 = *(_OWORD *)(v81 + 16);
                      do
                      {
                        unint64_t v94 = v81;
                        unint64_t v81 = v10 + 40 * v91;
                        long long v95 = *(_OWORD *)v81;
                        long long v96 = *(_OWORD *)(v81 + 16);
                        *(_WORD *)(v94 + 32) = *(_WORD *)(v81 + 32);
                        *(_OWORD *)unint64_t v94 = v95;
                        *(_OWORD *)(v94 + 16) = v96;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 40 * v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_WORD *)(v81 + 32) = v109;
                      *(_OWORD *)(v81 + 16) = v106;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40 * (v12 >> 1)), (double *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            char v16 = (double *)(a1 + 40 * v13 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40), v16, (double *)(a2 - 80));
            double v17 = (double *)(a1 + 40 + 8 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 80), v17, (double *)(a2 - 120));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v16, (double *)v14, v17);
            uint64_t v126 = *(void *)(a1 + 32);
            long long v110 = *(_OWORD *)a1;
            long long v118 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 16) = v19;
            *(_WORD *)(v14 + 32) = v126;
            *(_OWORD *)unint64_t v14 = v110;
            *(_OWORD *)(v14 + 16) = v118;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40 * (v12 >> 1)), (double *)a1, (double *)(a2 - 40));
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 32) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          long long v105 = *(_OWORD *)(a1 + 16);
          uint64_t v108 = *(void *)(a1 + 32);
          if (v20 >= *(double *)(a2 - 32))
          {
            unint64_t v41 = a1 + 40;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 40;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 40;
              double v40 = *(double *)(v39 + 48);
              v39 += 40;
            }
            while (v20 >= v40);
          }
          unint64_t v43 = a2;
          if (v10 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              unint64_t v43 = v44 - 40;
              double v45 = *(double *)(v44 - 32);
              v44 -= 40;
            }
            while (v20 < v45);
          }
          while (v10 < v43)
          {
            uint64_t v128 = *(void *)(v10 + 32);
            long long v112 = *(_OWORD *)v10;
            long long v120 = *(_OWORD *)(v10 + 16);
            long long v46 = *(_OWORD *)v43;
            long long v47 = *(_OWORD *)(v43 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v43 + 32);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(_WORD *)(v43 + 32) = v128;
            *(_OWORD *)unint64_t v43 = v112;
            *(_OWORD *)(v43 + 16) = v120;
            do
            {
              double v48 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *(double *)(v43 - 32);
              v43 -= 40;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 40);
            long long v51 = *(_OWORD *)(v10 - 24);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 40) = v38;
          *(double *)(v10 - 32) = v20;
          *(_WORD *)(v10 - 8) = v108;
          *(_OWORD *)(v10 - 24) = v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        long long v104 = *(_OWORD *)(a1 + 16);
        uint64_t v107 = *(void *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 48);
          v21 += 40;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        unint64_t v25 = a2;
        if (v21 == 40)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 40;
            double v29 = *(double *)(v28 - 32);
            v28 -= 40;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 40;
            double v27 = *(double *)(v25 - 32);
            v25 -= 40;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v127 = *(void *)(v10 + 32);
            long long v111 = *(_OWORD *)v10;
            long long v119 = *(_OWORD *)(v10 + 16);
            long long v31 = *(_OWORD *)v30;
            long long v32 = *(_OWORD *)(v30 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v30 + 32);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(_WORD *)(v30 + 32) = v127;
            *(_OWORD *)unint64_t v30 = v111;
            *(_OWORD *)(v30 + 16) = v119;
            do
            {
              double v33 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v33 < v20);
            do
            {
              double v34 = *(double *)(v30 - 32);
              v30 -= 40;
            }
            while (v34 >= v20);
          }
          while (v10 < v30);
        }
        if (v10 - 40 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 40);
          long long v36 = *(_OWORD *)(v10 - 24);
          *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 40) = v22;
        *(double *)(v10 - 32) = v20;
        *(_WORD *)(v10 - 8) = v107;
        *(_OWORD *)(v10 - 24) = v104;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 40;
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        __int16 v9 = *(_WORD *)(a2 - 8);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      uint64_t v16 = *(void *)v12;
      long long v21 = *(_OWORD *)(v12 + 16);
      uint64_t v22 = *(void *)(v12 + 32);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(void *)uint64_t v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(void *a1, uint64_t a2)
{
  id v3 = (void *)a1[5];
  uint64_t v4 = a1[6];
  BOOL v5 = (void *)a1[4];
  uint64_t v6 = [v5 dateInterval];
  void v9[4] = v4;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  uint64_t v7 = [v3 collectionCalculator:v5 queryForInterval:v6 error:a2 sampleHandler:v10 mergeHandler:v9];

  return v7;
}

void sub_1BD0C1880(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10 = *(void *)(a1 + 32);
  *(double *)int v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  char v15 = 1;
  uint64_t v11 = [MEMORY[0x1E4F1C9C8] distantFuture];
  [v11 timeIntervalSinceReferenceDate];
  BOOL v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1BD0C1924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6 = a3;
  uint64_t v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = &unk_1F1723E20;
  double v9 = 900.0;
  if ((v6 & 0x10) == 0) {
    double v9 = 0.0;
  }
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(void *)(v8 + 104) = 0;
  *(void *)(v8 + 112) = 0;
  *(void *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_WORD *)(a1 + 608) = 1;
  *(unsigned char *)(a1 + 610) = 0;
  *(unsigned char *)(a1 + 612) = 0;
  *(void *)(a1 + 616) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(void *)(a1 + 656) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);

  JUMPOUT(0x1C187B8A0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1F1723E20;
  uint64_t v2 = *(void **)(a1 + 640);
  if (v2)
  {
    *(void *)(a1 + 648) = v2;
    operator delete(v2);
  }

  id v3 = *(void **)(a1 + 576);
  if (v3)
  {
    *(void *)(a1 + 584) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(unsigned char *)(result + 608) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::setDateInterval(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 copy];
  uint64_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;

  BOOL v5 = [v6 startDate];
  [v5 timeIntervalSinceReferenceDate];
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
}

void sub_1BD0C1ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(void *)(a1 + 40))
  {
    id v5 = v3;
    [v3 timeIntervalSinceReferenceDate];
    *(void *)(a1 + 616) = v4;
    id v3 = v5;
  }
}

void sub_1BD0C1B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::setStatisticsConfiguration(id *a1, void *a2)
{
  objc_storeStrong(a1 + 78, a2);
  id v7 = a2;
  id v4 = a1[78];
  id v5 = a1[75];
  a1[75] = v4;
  id v6 = v4;

  objc_storeStrong(a1 + 19, a1[75]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (*(void *)(a1 + 40)) {
    return 1;
  }
  BOOL v7 = *(void *)(a1 + 224) == *(void *)(a1 + 216) && *(uint64_t *)(a1 + 248) < 1
    || HKIntervalMask<double>::firstDifference(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)a2, *(void *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (v7) {
    return 1;
  }
  double v9 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128);

  return v9(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 copy];
  id v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v3;
}

void sub_1BD0C1D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::dataSource(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));

  return WeakRetained;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::currentStatistics(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 608))
  {
    unint64_t v1 = 0;
  }
  else
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v4);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v4, v5);
    unint64_t v1 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v4);
  }

  return v1;
}

void sub_1BD0C1DF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(a1 + 64);
  BOOL v7 = v6;
  if (v6)
  {
    uint64_t v8 = [v6 startDate];
    [v8 timeIntervalSinceReferenceDate];
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    uint64_t v10 = [v7 endDate];
    [v10 timeIntervalSinceReferenceDate];
    double v12 = v11;
    double v13 = *(double *)(a2 + 8);

    if (v12 < v13) {
      goto LABEL_9;
    }
  }
  if (!*(unsigned char *)(a1 + 610))
  {
LABEL_11:
    uint64_t v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 609))
  {
LABEL_9:
    uint64_t v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(unsigned char *)(a1 + 611)) {
      goto LABEL_11;
    }
    unint64_t v17 = *(void *)(a1 + 648);
    unint64_t v18 = *(void *)(a1 + 656);
    if (v17 >= v18)
    {
      uint64_t v22 = *(void *)(a1 + 640);
      unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      unint64_t v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24) {
        unint64_t v24 = 2 * v25;
      }
      if (v25 >= 0x333333333333333) {
        unint64_t v26 = 0x666666666666666;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26) {
        unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      }
      else {
        uint64_t v27 = 0;
      }
      unint64_t v28 = v26 + 40 * v23;
      unint64_t v29 = v26 + 40 * v27;
      long long v30 = *(_OWORD *)a2;
      long long v31 = *(_OWORD *)(a2 + 16);
      *(void *)(v28 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      unint64_t v21 = v28 + 40;
      long long v32 = *(char **)(a1 + 648);
      double v33 = *(char **)(a1 + 640);
      if (v32 != v33)
      {
        do
        {
          long long v34 = *(_OWORD *)(v32 - 40);
          long long v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        long long v32 = *(char **)(a1 + 640);
      }
      *(void *)(a1 + 640) = v28;
      *(void *)(a1 + 648) = v21;
      *(void *)(a1 + 656) = v29;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      long long v19 = *(_OWORD *)a2;
      long long v20 = *(_OWORD *)(a2 + 16);
      *(void *)(v17 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      unint64_t v21 = v17 + 40;
    }
    *(void *)(a1 + 648) = v21;
    goto LABEL_9;
  }
  int v14 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
  uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1BD0C2068(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = v5;
  if (*(unsigned char *)(a1 + 610))
  {
    uint64_t v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 610) = 1;
  uint64_t v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    uint64_t v7 = 0;
    goto LABEL_82;
  }
  uint64_t v65 = v6;
  if (*(unsigned char *)(a1 + 609)) {
    goto LABEL_5;
  }
  double v9 = *(void **)(a1 + 632);
  if (!v9)
  {
    id v68 = 0;
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 40))
  {
LABEL_5:
    int v8 = 0;
    id v68 = 0;
    goto LABEL_29;
  }
  [v9 sortUsingComparator:&__block_literal_global_778];
  id v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v10 = *(id *)(a1 + 632);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  if (!v11)
  {

    id v12 = 0;
    goto LABEL_27;
  }
  id v12 = 0;
  uint64_t v13 = *(void *)v70;
  do
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (*(void *)v70 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(id *)(*((void *)&v69 + 1) + 8 * i);
      BOOL v16 = v15;
      if (v12)
      {
        unint64_t v17 = [v15 startDate];
        unint64_t v18 = [v12 endDate];
        int v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          long long v20 = [v16 endDate];
          unint64_t v21 = [v12 endDate];
          int v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22) {
            goto LABEL_21;
          }
          id v23 = objc_alloc(MEMORY[0x1E4F28C18]);
          unint64_t v24 = [v12 startDate];
          unint64_t v25 = [v16 endDate];
          id v26 = (id)[v23 initWithStartDate:v24 endDate:v25];
        }
        else
        {
          [v68 addObject:v12];
          id v26 = v16;
        }
        id v12 = v26;
      }
      else
      {
        id v12 = v15;
      }
LABEL_21:
    }
    uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  }
  while (v11);

  if (v12) {
    [v68 addObject:v12];
  }
LABEL_27:

LABEL_28:
  int v8 = 1;
LABEL_29:
  uint64_t v27 = *(void **)(a1 + 632);
  *(void *)(a1 + 632) = 0;

  *(unsigned char *)(a1 + 609) = 0;
  if (!v8)
  {
    unint64_t v38 = *(void *)(a1 + 640);
    *(void *)(a1 + 656) = 0;
    *(void *)(a1 + 648) = 0;
    *(void *)(a1 + 640) = 0;
    unint64_t v39 = v38;
    goto LABEL_47;
  }
  unint64_t v28 = [v68 lastObject];
  if (v28)
  {
    unint64_t v29 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_currentBucketInterval(a1);
    long long v30 = [v29 endDate];
    long long v31 = [v28 endDate];
    int v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      double v33 = [v28 endDate];
      [v33 timeIntervalSinceReferenceDate];
      double v35 = v34;

      uint64_t v36 = *(void *)(a1 + 640);
      BOOL v37 = *(long long **)(a1 + 648);
      while ((long long *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((long long *)v36 != v37)
          {
            double v40 = (long long *)(v36 + 40);
            if ((long long *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  long long v41 = *v40;
                  long long v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)uint64_t v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                double v40 = (long long *)((char *)v40 + 40);
              }
              while (v40 != v37);
              BOOL v37 = *(long long **)(a1 + 648);
            }
          }
          if ((long long *)v36 != v37) {
            *(void *)(a1 + 648) = v36;
          }
          break;
        }
        v36 += 40;
      }
    }
  }
  unint64_t v38 = *(void *)(a1 + 640);
  unint64_t v39 = *(void *)(a1 + 648);
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 640) = 0;
  *(void *)(a1 + 648) = 0;
  if (![v68 count]) {
    goto LABEL_60;
  }
LABEL_47:
  id v43 = v68;
  long long __p = (void *)v38;
  if (v43)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v44 = v43;
    uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v70;
      while (2)
      {
        for (uint64_t j = 0; j != v45; ++j)
        {
          if (*(void *)v70 != v46) {
            objc_enumerationMutation(v44);
          }
          id v48 = *(id *)(*((void *)&v69 + 1) + 8 * j);
          int v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval((id *)a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
        if (v45) {
          continue;
        }
        break;
      }
    }

LABEL_59:
    unint64_t v38 = (unint64_t)__p;
LABEL_60:
    unint64_t v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v51;
    }
    int v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    long long __p = (void *)v38;
    if (v39 != v38)
    {
      uint64_t v54 = v38;
      uint64_t v50 = v67;
      do
      {
        int v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_primitiveAddSample(a1, v54, 1, v50);
        int v53 = v55;
        v54 += 40;
        if (v54 == v39) {
          char v56 = 0;
        }
        else {
          char v56 = v55;
        }
        uint64_t v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval((id *)a1, 0, v67))goto LABEL_59; {
LABEL_70:
    }
    int v53 = 0;
  }
  if (*(void *)(a1 + 40) && *(void *)(a1 + 584) != *(void *)(a1 + 576))
  {
    do
    {
      uint64_t v57 = objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(void *)(a1 + 112) + 1, v50, v65);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      unint64_t v58 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, a1 + 120);
      float v59 = [v57 startDate];
      [v59 timeIntervalSinceReferenceDate];
      double v61 = v60;
      uint64_t v62 = [v57 endDate];
      [v62 timeIntervalSinceReferenceDate];
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
    }
    while (*(void *)(a1 + 584) != *(void *)(a1 + 576));
  }
  *(unsigned char *)(a1 + 610) = 0;
  if (__p) {
    operator delete(__p);
  }

  if (v53)
  {
    if (*(unsigned char *)(a1 + 612))
    {
      *(unsigned char *)(a1 + 612) = 0;
      id v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
      uint64_t v7 = 1;
      goto LABEL_82;
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v6 = v65;
LABEL_82:
  *(unsigned char *)(a1 + 610) = 0;
LABEL_83:

  return v7;
}

void sub_1BD0C276C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    *(unsigned char *)(v13 + 610) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(unsigned char *)(result + 611) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(unsigned char *)(a1 + 610)) {
      goto LABEL_12;
    }
    uint64_t v7 = 0;
LABEL_14:
    uint64_t v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval((id *)a1, v7, a3);
    goto LABEL_15;
  }
  uint64_t v7 = [v6 dateIntervalForIntervalsContainingInterval:v5];

  if (!*(unsigned char *)(a1 + 610)) {
    goto LABEL_14;
  }
  if (!v7)
  {
LABEL_12:
    id v12 = *(void **)(a1 + 632);
    *(void *)(a1 + 632) = 0;

    uint64_t v7 = 0;
    uint64_t v11 = 1;
    *(unsigned char *)(a1 + 609) = 1;
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 609))
  {
    int v8 = *(void **)(a1 + 632);
    if (!v8)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      id v10 = *(void **)(a1 + 632);
      *(void *)(a1 + 632) = v9;

      int v8 = *(void **)(a1 + 632);
    }
    [v8 addObject:v7];
  }
  uint64_t v11 = 1;
LABEL_15:

  return v11;
}

void sub_1BD0C2A6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    *(unsigned char *)(a1 + 608) = 1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS2_EEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v9[3] = &unk_1E63043E8;
    uint64_t v12 = a1;
    id v10 = v5;
    id v11 = WeakRetained;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 112))(a1, v9, a3);
    if (v7 && *(unsigned char *)(a1 + 608) && !*(void *)(a1 + 40)) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to query for initial statistics: no data source available.");
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1BD0C2BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::reset(uint64_t result)
{
  *(unsigned char *)(result + 608) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 encodeBool:*(unsigned __int8 *)(a1 + 608) forKey:@"needs_config"];
  id v12 = v3;
  int v32 = &unk_1F1726FA0;
  double v33 = 0;
  int v38 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
  LOBYTE(v38) = 1;
  uint64_t v34 = v4;
  uint64_t v35 = 0;
  statistics::StatisticsEngine::makeCurrentBucket((uint64_t)&v32);
  uint64_t v13 = &unk_1F171B9C8;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  int v31 = 511;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 0;
  int8x16_t v14 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  uint64_t v5 = *(void *)(a1 + 136);
  char v29 = *(unsigned char *)(a1 + 144);
  char v30 = *(unsigned char *)(a1 + 145);
  BOOL v28 = *(_DWORD *)(a1 + 148) == 0;
  int8x16_t v15 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  uint64_t v7 = *(int8x16_t **)(a1 + 216);
  if (v7 != *(int8x16_t **)(a1 + 224))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v7, *v7, 8uLL);
    int8x16_t v40 = v7[1];
    char v43 = 0;
    HIBYTE(v42) = v7[2].i8[9];
    LOBYTE(v42) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>();
  }
  statistics::StatisticsBucket::makeStatistics((uint64_t)&v13);
  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::archive((uint64_t)&v39, (int *)(a1 + 240));
  statistics::Statistics::operator=(*((statistics **)&v22 + 1), (uint64_t)&v39);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v39);
  uint64_t v8 = *(void *)(a1 + 368);
  if (v8 != a1 + 376)
  {
    HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::archive((uint64_t)&v39, (int *)(v8 + 40));
    uint64_t v9 = *(void *)(v8 + 32);
    v46 |= 0x200u;
    uint64_t v45 = v9;
    PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>();
  }
  id v10 = *(int8x16_t **)(a1 + 184);
  if (v10 != *(int8x16_t **)(a1 + 192))
  {
    unint64_t v39 = (char *)&unk_1F1727540;
    v41.i32[0] = 3;
    int8x16_t v40 = vextq_s8(*v10, *v10, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>();
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v13);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v13);
  id v11 = *(int8x16_t **)(a1 + 576);
  if (v11 != *(int8x16_t **)(a1 + 584))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v11, *v11, 8uLL);
    int8x16_t v40 = v11[1];
    __int16 v42 = 0;
    char v43 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>();
  }
  PB::Writer::Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v39);
  [v12 encodeBytes:v40.i64[0] length:&v39[-v40.i64[0]] forKey:@"hdsce_archived_representation"];
  PB::Writer::~Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);
}

void sub_1BD0C2FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v59 = a2;
  *(unsigned char *)(a1 + 608) = [v59 decodeBoolForKey:@"needs_config"];
  id v3 = v59;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)&v63.n128_i64[1], 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)long long v64 = 0u;
  long long v65 = 0u;
  unint64_t v110 = 0;
  id v62 = v3;
  PB::Reader::Reader((PB::Reader *)v109, (const unsigned __int8 *)[v62 decodeBytesForKey:@"hdsce_archived_representation" returnedLength:&v110]);
  uint64_t v61 = a1;
  long long v102 = &unk_1F1726FA0;
  uint64_t v103 = 0;
  uint64_t v107 = 0;
  uint64_t v105 = 0;
  uint64_t v106 = 0;
  int v108 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v102, (PB::Reader *)v109);
  v63.n128_u64[0] = v104;
  if (v103)
  {
    uint64_t v70 = 0;
    memset(v73, 0, sizeof(v73));
    long long __p = 0;
    memset(v78, 0, sizeof(v78));
    long long v79 = 0u;
    *(_OWORD *)uint64_t v80 = 0u;
    long long v81 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    __int16 v84 = 0;
    uint64_t v87 = 0;
    unint64_t v76 = 0;
    long long v75 = 0;
    int v77 = 0;
    long long v86 = 0;
    int64_t v85 = &v86;
    long long v88 = 0u;
    long long v89 = 0u;
    int v90 = 1065353216;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v93 = 0u;
    uint64_t v94 = 0;
    int v95 = 1065353216;
    long long v96 = 0u;
    long long v97 = 0u;
    int v98 = 1065353216;
    long long v99 = 0u;
    long long v100 = 0u;
    int v101 = 1065353216;
    int8x16_t v66 = vextq_s8(*(int8x16_t *)(v103 + 8), *(int8x16_t *)(v103 + 8), 8uLL);
    uint64_t v4 = *(void *)(v103 + 72);
    uint64_t v67 = *(void *)(v103 + 64);
    char v68 = *(unsigned char *)(v103 + 185);
    char v69 = *(unsigned char *)(v103 + 186);
    int8x16_t v71 = vextq_s8(*(int8x16_t *)(v103 + 24), *(int8x16_t *)(v103 + 24), 8uLL);
    uint64_t v72 = v4;
    uint64_t v5 = *(void *)(v103 + 80);
    uint64_t v6 = *(void *)(v103 + 88);
    double v60 = (void *)v103;
    if (v5 != v6)
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(*(void *)v5 + 24);
        uint64_t v9 = *(void *)(*(void *)v5 + 32);
        uint64_t v10 = *(void *)(*(void *)v5 + 8);
        uint64_t v11 = *(void *)(*(void *)v5 + 16);
        char v12 = *(unsigned char *)(*(void *)v5 + 41);
        char v13 = *(unsigned char *)(*(void *)v5 + 40);
        if ((unint64_t)v7 >= v76)
        {
          int8x16_t v14 = (char *)__p;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)__p) >> 4);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v76 - (void)__p) >> 4) > v16) {
            unint64_t v16 = 0x5555555555555556 * ((uint64_t)(v76 - (void)__p) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v76 - (void)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v17 = 0x555555555555555;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17)
          {
            unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            uint64_t v7 = v75;
            int8x16_t v14 = (char *)__p;
          }
          else
          {
            uint64_t v18 = 0;
          }
          uint64_t v19 = (void *)(v17 + 48 * v15);
          *uint64_t v19 = v9;
          v19[1] = v8;
          v19[2] = v10;
          v19[3] = v11;
          *((_WORD *)v19 + 16) = 1;
          *((unsigned char *)v19 + 40) = 0;
          *((unsigned char *)v19 + 41) = v12;
          *((unsigned char *)v19 + 42) = v13;
          uint64_t v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              long long v21 = *((_OWORD *)v7 - 3);
              long long v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            int8x16_t v14 = (char *)__p;
          }
          uint64_t v7 = (char *)(v19 + 6);
          long long __p = v20;
          long long v75 = (char *)(v19 + 6);
          unint64_t v76 = v17 + 48 * v18;
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)uint64_t v7 = v9;
          *((void *)v7 + 1) = v8;
          *((void *)v7 + 2) = v10;
          *((void *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        long long v75 = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    long long v23 = (void *)v60[13];
    if (v23)
    {
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::unarchive((uint64_t)&v111, v23);
      int v77 = v111;
      v78[0] = v112;
      if (v78[1])
      {
        v78[2] = v78[1];
        operator delete(v78[1]);
      }
      *(_OWORD *)&v78[1] = v113;
      v78[3] = v114;
      long long v114 = 0;
      long long v113 = 0uLL;
      long long v79 = v115;
      long long v24 = v80[0];
      if (v80[0])
      {
        v80[1] = v80[0];
        operator delete(v80[0]);
        long long v24 = (void *)v113;
      }
      *(_OWORD *)uint64_t v80 = v116;
      long long v81 = v117;
      *(void *)&long long v117 = 0;
      long long v116 = 0uLL;
      long long v82 = v118;
      long long v83 = v119;
      __int16 v84 = v120;
      if (v24)
      {
        *((void *)&v113 + 1) = v24;
        operator delete(v24);
      }
    }
    long long v26 = (void **)v60[17];
    for (uint64_t i = (void **)v60[18]; v26 != i; ++v26)
    {
      uint64_t v27 = (uint64_t)*v26;
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::unarchive((uint64_t)&v111, *v26);
      uint64_t v28 = *(void *)(v27 + 144);
      char v29 = v86;
      char v30 = &v86;
      int v31 = &v86;
      if (v86)
      {
        do
        {
          while (1)
          {
            int v31 = (uint64_t **)v29;
            uint64_t v32 = v29[4];
            if (v32 <= v28) {
              break;
            }
            char v29 = *v31;
            char v30 = v31;
            if (!*v31) {
              goto LABEL_37;
            }
          }
          if (v32 >= v28)
          {
            uint64_t v34 = (char *)v31;
            goto LABEL_40;
          }
          char v29 = v31[1];
        }
        while (v29);
        char v30 = v31 + 1;
      }
LABEL_37:
      uint64_t v34 = (char *)operator new(0xA8uLL);
      v121[1] = &v86;
      *((void *)v34 + 4) = v28;
      *(_OWORD *)(v34 + 40) = 0u;
      *(_OWORD *)(v34 + 56) = 0u;
      *(_OWORD *)(v34 + 72) = 0u;
      *(_OWORD *)(v34 + 88) = 0u;
      *(_OWORD *)(v34 + 104) = 0u;
      *(_OWORD *)(v34 + 120) = 0u;
      *(_OWORD *)(v34 + 136) = 0u;
      *(_OWORD *)(v34 + 152) = 0u;
      char v122 = 1;
      *(void *)uint64_t v34 = 0;
      *((void *)v34 + 1) = 0;
      *((void *)v34 + 2) = v31;
      *char v30 = (uint64_t *)v34;
      double v33 = (uint64_t *)v34;
      if (*v85)
      {
        int64_t v85 = (uint64_t **)*v85;
        double v33 = *v30;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v86, v33);
      ++v87;
      v121[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v121);
LABEL_40:
      uint64_t v35 = (void *)*((void *)v34 + 7);
      *((_DWORD *)v34 + 10) = v111;
      *((void *)v34 + 6) = v112;
      if (v35)
      {
        *((void *)v34 + 8) = v35;
        operator delete(v35);
        *((void *)v34 + 7) = 0;
        *((void *)v34 + 8) = 0;
        *((void *)v34 + 9) = 0;
      }
      uint64_t v36 = (void *)*((void *)v34 + 12);
      *(_OWORD *)(v34 + 56) = v113;
      *((void *)v34 + 9) = v114;
      long long v114 = 0;
      long long v113 = 0uLL;
      *((_OWORD *)v34 + 5) = v115;
      if (v36)
      {
        *((void *)v34 + 13) = v36;
        operator delete(v36);
        *((void *)v34 + 12) = 0;
        *((void *)v34 + 13) = 0;
        *((void *)v34 + 14) = 0;
        uint64_t v36 = (void *)v113;
      }
      *((_OWORD *)v34 + 6) = v116;
      *((void *)v34 + 14) = v117;
      *(void *)&long long v117 = 0;
      long long v116 = 0uLL;
      *((void *)v34 + 15) = *((void *)&v117 + 1);
      long long v37 = v119;
      *((_OWORD *)v34 + 8) = v118;
      *((_OWORD *)v34 + 9) = v37;
      *((_WORD *)v34 + 80) = v120;
      if (v36)
      {
        *((void *)&v113 + 1) = v36;
        operator delete(v36);
      }
    }
    uint64_t v38 = v60[5];
    for (uint64_t j = v60[6]; v38 != j; v38 += 8)
    {
      double v41 = *(double *)(*(void *)v38 + 8);
      double v40 = *(double *)(*(void *)v38 + 16);
      if (v41 >= v40) {
        double v42 = *(double *)(*(void *)v38 + 16);
      }
      else {
        double v42 = *(double *)(*(void *)v38 + 8);
      }
      if (v40 < v41) {
        double v40 = *(double *)(*(void *)v38 + 8);
      }
      HKIntervalMask<double>::_insertInterval(v73, v42, v40);
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::operator=((uint64_t)&v63.n128_i64[1], (uint64_t)&v66);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v66);
  }
  uint64_t v43 = v105;
  uint64_t v44 = v106;
  if (v105 != v106)
  {
    uint64_t v45 = (char *)v64[1];
    do
    {
      uint64_t v46 = *(void *)(*(void *)v43 + 24);
      uint64_t v47 = *(void *)(*(void *)v43 + 32);
      uint64_t v48 = *(void *)(*(void *)v43 + 8);
      uint64_t v49 = *(void *)(*(void *)v43 + 16);
      if ((unint64_t)v45 >= (unint64_t)v65)
      {
        uint64_t v50 = (char *)v64[0];
        unint64_t v51 = 0xCCCCCCCCCCCCCCCDLL * ((v45 - (char *)v64[0]) >> 3);
        unint64_t v52 = v51 + 1;
        if (v51 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(v65 - (unint64_t)v64[0]) >> 3) > v52) {
          unint64_t v52 = 0x999999999999999ALL * ((uint64_t)(v65 - (unint64_t)v64[0]) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v65 - (unint64_t)v64[0]) >> 3) >= 0x333333333333333) {
          unint64_t v53 = 0x666666666666666;
        }
        else {
          unint64_t v53 = v52;
        }
        if (v53)
        {
          unint64_t v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v53);
          uint64_t v45 = (char *)v64[1];
          uint64_t v50 = (char *)v64[0];
        }
        else
        {
          uint64_t v54 = 0;
        }
        unint64_t v55 = v53 + 40 * v51;
        *(void *)unint64_t v55 = v47;
        *(void *)(v55 + 8) = v46;
        *(void *)(v55 + 16) = v48;
        *(void *)(v55 + 24) = v49;
        *(_WORD *)(v55 + 32) = 1;
        char v56 = (char *)v55;
        if (v45 != v50)
        {
          do
          {
            long long v57 = *(_OWORD *)(v45 - 40);
            long long v58 = *(_OWORD *)(v45 - 24);
            *((_WORD *)v56 - 4) = *((_WORD *)v45 - 4);
            *(_OWORD *)(v56 - 24) = v58;
            *(_OWORD *)(v56 - 40) = v57;
            v56 -= 40;
            v45 -= 40;
          }
          while (v45 != v50);
          uint64_t v50 = (char *)v64[0];
        }
        uint64_t v45 = (char *)(v55 + 40);
        v64[0] = v56;
        v64[1] = (void *)(v55 + 40);
        *(void *)&long long v65 = v53 + 40 * v54;
        if (v50) {
          operator delete(v50);
        }
      }
      else
      {
        *(void *)uint64_t v45 = v47;
        *((void *)v45 + 1) = v46;
        *((void *)v45 + 2) = v48;
        *((void *)v45 + 3) = v49;
        *((_WORD *)v45 + 16) = 1;
        v45 += 40;
      }
      v64[1] = v45;
      v43 += 8;
    }
    while (v43 != v44);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v102);

  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::operator=((void *)(v61 + 112), &v63);
  if (v64[0])
  {
    v64[1] = v64[0];
    operator delete(v64[0]);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v63.n128_i64[1]);
}

void sub_1BD0C3800(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table((uint64_t)&STACK[0x3C0]);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a2);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x370]);
  uint64_t v8 = (void *)STACK[0x358];
  if (STACK[0x358])
  {
    STACK[0x360] = (unint64_t)v8;
    operator delete(v8);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x330]);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>>::destroy((void *)STACK[0x320]);
  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::~HDStatisticsRelative(&STACK[0x298]);
  uint64_t v9 = (void *)STACK[0x280];
  if (STACK[0x280])
  {
    STACK[0x288] = (unint64_t)v9;
    operator delete(v9);
  }
  objc_destroyWeak((id *)&STACK[0x278]);
  uint64_t v10 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v10;
    operator delete(v10);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x3E8]);
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 256;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_WORD *)(a1 + 240) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(void *)(a1 + 248) = a1 + 256;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_DWORD *)(a1 + 304) = 1065353216;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 368) = 1065353216;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_DWORD *)(a1 + 408) = 1065353216;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_DWORD *)(a1 + 448) = 1065353216;
  return a1;
}

void *HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>::~HDStatisticsCombined(void *a1)
{
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  id v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 464);
  if (v2)
  {
    *(void *)(a1 + 472) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 416);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 376);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 336);
  uint64_t v2 = *(void **)(a1 + 312);
  if (v2)
  {
    *(void *)(a1 + 320) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 272);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>>::destroy(*(void **)(a1 + 256));
  id v3 = *(void **)(a1 + 176);
  if (v3)
  {
    *(void *)(a1 + 184) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 136);
  if (v4)
  {
    *(void *)(a1 + 144) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 96);
  if (v5)
  {
    *(void *)(a1 + 104) = v5;
    operator delete(v5);
  }
  objc_destroyWeak((id *)(a1 + 88));
  uint64_t v6 = *(void **)(a1 + 64);
  if (v6)
  {
    *(void *)(a1 + 72) = v6;
    operator delete(v6);
  }

  return a1;
}

void *HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::~HDStatisticsRelative(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  id v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<long long const,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,0>(a1 + 4);
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<long long const,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,0>(void *a1)
{
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  id v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_configureForStartTime(uint64_t a1)
{
  unint64_t v28 = 0;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
    uint64_t v4 = [v2 dateIntervalContainingDate:v3 index:&v28];

    uint64_t v5 = [v4 startDate];
    [v5 timeIntervalSinceReferenceDate];
    double v7 = v6;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
LABEL_5:
    double v13 = v9;

    goto LABEL_6;
  }
  id v10 = *(id *)(a1 + 64);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v11 = [v10 startDate];
    [v11 timeIntervalSinceReferenceDate];
    double v7 = v12;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
    goto LABEL_5;
  }
  double v7 = -1.79769313e308;
  double v13 = 1.79769313e308;
LABEL_6:

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v21, WeakRetained, v7, v13);

  if (*(void *)(a1 + 32) == 1) {
    char v23 = 1;
  }
  uint64_t v22 = *(void *)(a1 + 56);
  char v24 = *(unsigned char *)(a1 + 24) & 1;
  if (v27 != (char *)(a1 + 72)) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27, *(char **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4);
  }
  objc_storeStrong(&v26, *(id *)(a1 + 624));
  if (!*(void *)(a1 + 40)) {
    int v25 = 0;
  }
  unint64_t v15 = v28;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v21);
  v18.n128_u64[0] = v15;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)&v18.n128_i64[1], (uint64_t)v17);
  long long __p = 0u;
  long long v20 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::operator=((void *)(a1 + 112), &v18);

  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v18.n128_i64[1]);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v17);
  *(unsigned char *)(a1 + 608) = 0;
  return HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v21);
}

void sub_1BD0C3E90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::operator=(void *a1, __n128 *a2)
{
  *a1 = a2->n128_u64[0];
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::operator=((uint64_t)(a1 + 1), (uint64_t)&a2->n128_i64[1]);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 58), a2 + 29);
  unint64_t v4 = a2[30].n128_u64[1];
  a2[30].n128_u64[1] = 0;
  uint64_t v5 = (void *)a1[61];
  a1[61] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 96);
  double v7 = *(unsigned char **)(a2 + 104);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(void *)(a1 + 96) = v10;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(void *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  int v12 = *(_DWORD *)(a2 + 120);
  uint64_t v13 = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 120) = v12;
  *(void *)(a1 + 128) = v13;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 136), *(const void **)(a2 + 136), *(void *)(a2 + 144), (uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 4);
  uint64_t v14 = *(void *)(a2 + 160);
  uint64_t v15 = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 160) = v14;
  *(void *)(a1 + 168) = v15;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 176), *(const void **)(a2 + 176), *(void *)(a2 + 184), (uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 4);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  long long v16 = *(_OWORD *)(a2 + 208);
  long long v17 = *(_OWORD *)(a2 + 224);
  uint64_t v18 = *(void *)(a2 + 240);
  uint64_t v19 = (uint64_t **)(a1 + 256);
  *(void *)(a1 + 248) = a1 + 256;
  *(void *)(a1 + 240) = v18;
  *(_OWORD *)(a1 + 224) = v17;
  *(_OWORD *)(a1 + 208) = v16;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  long long v20 = *(void **)(a2 + 248);
  if (v20 != (void *)(a2 + 256))
  {
    do
    {
      long long v21 = *v19;
      uint64_t v22 = (uint64_t *)(a1 + 256);
      if (*(uint64_t ***)(a1 + 248) == v19) {
        goto LABEL_11;
      }
      char v23 = *v19;
      char v24 = (uint64_t *)(a1 + 256);
      if (v21)
      {
        do
        {
          uint64_t v22 = v23;
          char v23 = (uint64_t *)v23[1];
        }
        while (v23);
      }
      else
      {
        do
        {
          uint64_t v22 = (uint64_t *)v24[2];
          BOOL v25 = *v22 == (void)v24;
          char v24 = v22;
        }
        while (v25);
      }
      uint64_t v26 = v20[4];
      if (v22[4] < v26)
      {
LABEL_11:
        if (v21) {
          uint64_t v27 = (uint64_t **)v22;
        }
        else {
          uint64_t v27 = (uint64_t **)(a1 + 256);
        }
        if (v21) {
          unint64_t v28 = (uint64_t **)(v22 + 1);
        }
        else {
          unint64_t v28 = (uint64_t **)(a1 + 256);
        }
        if (*v28) {
          goto LABEL_28;
        }
      }
      else
      {
        unint64_t v28 = (uint64_t **)(a1 + 256);
        uint64_t v27 = (uint64_t **)(a1 + 256);
        if (v21)
        {
          char v29 = *v19;
          while (1)
          {
            while (1)
            {
              uint64_t v27 = (uint64_t **)v29;
              uint64_t v30 = v29[4];
              if (v30 <= v26) {
                break;
              }
              char v29 = *v27;
              unint64_t v28 = v27;
              if (!*v27) {
                goto LABEL_27;
              }
            }
            if (v30 >= v26) {
              goto LABEL_28;
            }
            char v29 = v27[1];
            if (!v29)
            {
              unint64_t v28 = v27 + 1;
              break;
            }
          }
        }
      }
LABEL_27:
      int v31 = operator new(0xA8uLL);
      v39[0] = v31;
      v39[1] = a1 + 256;
      char v40 = 0;
      v31[4] = v20[4];
      *((_DWORD *)v31 + 10) = *((_DWORD *)v20 + 10);
      v31[6] = v20[6];
      v31[7] = 0;
      v31[8] = 0;
      v31[9] = 0;
      std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v31 + 7, (const void *)v20[7], v20[8], (uint64_t)(v20[8] - v20[7]) >> 4);
      uint64_t v32 = v20[10];
      uint64_t v33 = v20[11];
      v31[12] = 0;
      v31[10] = v32;
      v31[11] = v33;
      v31[13] = 0;
      v31[14] = 0;
      std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v31 + 12, (const void *)v20[12], v20[13], (uint64_t)(v20[13] - v20[12]) >> 4);
      v31[15] = v20[15];
      long long v34 = *((_OWORD *)v20 + 8);
      long long v35 = *((_OWORD *)v20 + 9);
      v31[20] = v20[20];
      *((_OWORD *)v31 + 8) = v34;
      *((_OWORD *)v31 + 9) = v35;
      char v40 = 1;
      std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 248), (uint64_t)v27, v28, v31);
      v39[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v39);
LABEL_28:
      uint64_t v36 = (void *)v20[1];
      if (v36)
      {
        do
        {
          long long v37 = v36;
          uint64_t v36 = (void *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          long long v37 = (void *)v20[2];
          BOOL v25 = *v37 == (void)v20;
          long long v20 = v37;
        }
        while (!v25);
      }
      long long v20 = v37;
    }
    while (v37 != (void *)(a2 + 256));
  }
  std::unordered_set<long long>::unordered_set(a1 + 272, a2 + 272);
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 312), *(const void **)(a2 + 312), *(void *)(a2 + 320), (uint64_t)(*(void *)(a2 + 320) - *(void *)(a2 + 312)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 336, a2 + 336);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 376, a2 + 376);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 416, a2 + 416);
  return a1;
}

void sub_1BD0C42FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void **a11, id *location, void **a13, char a14)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v19);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v18);
  long long v21 = *v17;
  if (*v17)
  {
    *(void *)(v14 + 320) = v21;
    operator delete(v21);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>>::destroy(*v15);
  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::~HDStatisticsRelative(a10);
  uint64_t v22 = *a11;
  if (*a11)
  {
    *(void *)(v14 + 104) = v22;
    operator delete(v22);
  }
  objc_destroyWeak(location);
  char v23 = *a13;
  if (*a13)
  {
    *(void *)(v14 + 72) = v23;
    operator delete(v23);
  }

  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  unint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<long long const,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,0>(v1 + 4);
    }
    operator delete(v1);
  }
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::operator=(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  long long v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v5;

  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  id WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  uint64_t v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(void *)(a1 + 104) = v9;
    operator delete(v9);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 96) = 0;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 136, (__n128 *)(a2 + 136));
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 176, (__n128 *)(a2 + 176));
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  long long v10 = *(_OWORD *)(a2 + 208);
  long long v11 = *(_OWORD *)(a2 + 224);
  *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
  *(_OWORD *)(a1 + 208) = v10;
  *(_OWORD *)(a1 + 224) = v11;
  uint64_t v12 = a1 + 256;
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>>::destroy(*(void **)(a1 + 256));
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  uint64_t v13 = *(void *)(a2 + 256);
  *(void *)(a1 + 256) = v13;
  uint64_t v14 = *(void *)(a2 + 264);
  *(void *)(a1 + 264) = v14;
  if (v14)
  {
    *(void *)(v13 + 16) = v12;
    *(void *)(a2 + 248) = a2 + 256;
    *(void *)(a2 + 256) = 0;
    *(void *)(a2 + 264) = 0;
  }
  else
  {
    *(void *)(a1 + 248) = v12;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 272, (uint64_t *)(a2 + 272));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 312, (__n128 *)(a2 + 312));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 336, (uint64_t *)(a2 + 336));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 376, (uint64_t *)(a2 + 376));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 416, (uint64_t *)(a2 + 416));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  double v4 = *(double *)a2;
  id v5 = objc_alloc(MEMORY[0x1E4F1C9C8]);
  long long v6 = (double *)(a2 + 40);
  if (v4 != -1.79769313e308) {
    long long v6 = (double *)a2;
  }
  long long v7 = (void *)[v5 initWithTimeIntervalSinceReferenceDate:*v6];
  if (*(double *)(a2 + 8) == 1.79769313e308) {
    uint64_t v8 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 48)];
  }
  else {
    uint64_t v8 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 8)];
  }
  uint64_t v9 = (void *)v8;
  id v10 = *(id *)(a1 + 16);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v11 = *(id *)(a1 + 16);
    if ([v11 shouldUseUnderlyingTypeForStatistics])
    {
      uint64_t v12 = [v11 underlyingSampleType];

      id v10 = (id)v12;
    }
  }
  uint64_t v13 = (void *)[objc_alloc(MEMORY[0x1E4F2B5B0]) initWithDataType:v10 startDate:v7 endDate:v9];
  if (*(unsigned char *)(a1 + 24))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      id v33 = v10;
      long long v34 = v9;
      id v15 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      uint64_t v16 = *(uint64_t **)(a2 + 312);
      long long v17 = *(uint64_t **)(a2 + 320);
      while (v16 != v17)
      {
        uint64_t v18 = *v16;
        id v19 = objc_loadWeakRetained((id *)(a1 + 48));
        long long v20 = [v19 sourceForSourceID:v18];

        if (v20)
        {
          if (([v15 containsObject:v20] & 1) == 0) {
            [v15 addObject:v20];
          }
        }

        ++v16;
      }
      long long v21 = (void *)[v15 copy];
      id v10 = v33;
      uint64_t v9 = v34;
      [v13 _setSources:v21];
    }
  }

  v35[0] = &unk_1F1724000;
  v35[3] = v35;
  id v22 = v13;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)v37, (uint64_t)v35);
  unint64_t v39 = 0;
  char v23 = operator new(0x28uLL);
  *char v23 = &unk_1F1723EF0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(v23 + 1), (uint64_t)v37);
  unint64_t v39 = v23;
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket(a1, v22, a2, (uint64_t)v38);
  std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v38);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v37);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)v36, (uint64_t)v35);
  unint64_t v39 = 0;
  char v24 = operator new(0x28uLL);
  *char v24 = &unk_1F1723F80;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(v24 + 1), (uint64_t)v36);
  unint64_t v39 = v24;
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket(a1, v22, a2, (uint64_t)v38);
  std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v38);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v36);

  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v35);
  BOOL v25 = [*(id *)(a1 + 16) _unitForChangeInCanonicalUnit];
  uint64_t v26 = [v22 averageQuantity];
  if (v26)
  {
    char v24 = [v22 averageQuantity];
    if (([v24 isCompatibleWithUnit:v25] & 1) == 0)
    {

LABEL_33:
      [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8], @"Expected compatibility with %@", v25 format];
      goto LABEL_34;
    }
  }
  uint64_t v27 = [v22 minimumQuantity];
  if (v27)
  {
    uint64_t v13 = [v22 minimumQuantity];
    if (![v13 isCompatibleWithUnit:v25])
    {
      int v28 = 1;
      goto LABEL_27;
    }
  }
  char v29 = [v22 maximumQuantity];
  if (v29)
  {
    uint64_t v30 = [v22 maximumQuantity];
    int v31 = [v30 isCompatibleWithUnit:v25];

    int v28 = v31 ^ 1;
    if (v27) {
      goto LABEL_27;
    }
  }
  else
  {
    int v28 = 0;
    if (v27)
    {
LABEL_27:

      if (v26) {
        goto LABEL_28;
      }
LABEL_32:

      if (!v28) {
        goto LABEL_34;
      }
      goto LABEL_33;
    }
  }
  if (!v26) {
    goto LABEL_32;
  }
LABEL_28:

  if (v28) {
    goto LABEL_33;
  }
LABEL_34:

  return v22;
}

void sub_1BD0C4A4C(_Unwind_Exception *a1)
{
  if (v5) {
  if (v3)
  }

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 296);
  uint64_t v2 = *(void *)(a1 + 312);
  if (v1 != (*(void *)(a1 + 320) - v2) >> 3)
  {
    double v4 = (void **)(a1 + 312);
    *(void *)(a1 + 320) = v2;
    std::vector<long long>::reserve((void **)(a1 + 312), v1);
    id v5 = *(void **)(a1 + 288);
    if (v5)
    {
      long long v6 = *(char **)(a1 + 320);
      do
      {
        uint64_t v7 = v5[2];
        unint64_t v8 = *(void *)(a1 + 328);
        if ((unint64_t)v6 >= v8)
        {
          id v10 = (char *)*v4;
          uint64_t v11 = (v6 - (unsigned char *)*v4) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            id v10 = *(char **)(a1 + 312);
            long long v6 = *(char **)(a1 + 320);
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v16 = (void *)(v14 + 8 * v11);
          void *v16 = v7;
          uint64_t v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            uint64_t v17 = *((void *)v6 - 1);
            v6 -= 8;
            *--uint64_t v16 = v17;
          }
          *(void *)(a1 + 312) = v16;
          *(void *)(a1 + 320) = v9;
          *(void *)(a1 + 328) = v14 + 8 * v15;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)long long v6 = v7;
          uint64_t v9 = v6 + 8;
        }
        *(void *)(a1 + 320) = v9;
        id v5 = (void *)*v5;
        long long v6 = v9;
      }
      while (v5);
    }
    uint64_t v18 = (id *)(a1 + 88);
    id WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      id v20 = objc_loadWeakRetained(v18);
      [v20 orderSourceIDs:v4];
    }
  }
}

void sub_1BD0C4D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2) {
    a2 = v4 * floor(a2 / v4);
  }
  double v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    uint64_t v126 = (void **)(a1 + 96);
    char v122 = (double **)(a1 + 64);
    __int16 v120 = (uint64_t *)(a1 + 120);
    location = (id *)(a1 + 88);
    long long v115 = (double **)(a1 + 176);
    long long v116 = (double **)(a1 + 136);
    long long v114 = (void *)(a1 + 256);
    while (1)
    {
      unint64_t v6 = *(void *)(a1 + 96);
      uint64_t v7 = *(long long **)(a1 + 104);
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v7 - v6) >> 4);
      if (v8) {
        break;
      }
LABEL_124:
      *(double *)(a1 + 56) = a2;
LABEL_125:
      double v111 = *(double *)(a1 + 56);
      if (v111 == v5)
      {
        long long v112 = [MEMORY[0x1E4F28B00] currentHandler];
        long long v113 = objc_msgSend(NSString, "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval, HDStatisticsTimeInterval>>>::_mergeThroughTime(double) [Statistics = HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval, HDStatisticsTimeInterval>>]");
        [v112 handleFailureInFunction:v113 file:@"HDStatisticsBucket.hpp" lineNumber:234 description:@"Failed to make forward progress during statistics merge."];

        double v111 = *(double *)(a1 + 56);
      }
      double v5 = v111;
      if (v111 >= a2) {
        return;
      }
    }
    if (v8 != 1)
    {
      double v20 = a2;
      double v21 = a2;
      double v22 = v5;
      uint64_t v23 = *(void *)(a1 + 96);
      if ((long long *)v6 != v7)
      {
        do
        {
          double v24 = *(double *)(v23 + 8);
          double v25 = *(double *)(v23 + 16);
          if (v24 > v22 && v24 < v21) {
            double v21 = *(double *)(v23 + 8);
          }
          if (v25 > v5) {
            double v27 = *(double *)(v23 + 16);
          }
          else {
            double v27 = v20;
          }
          if (v25 < v20)
          {
            double v22 = v5;
            double v20 = v27;
          }
          v23 += 48;
        }
        while ((long long *)v23 != v7);
      }
      if (v20 >= v21) {
        double v28 = v21;
      }
      else {
        double v28 = v20;
      }
      double v29 = *(double *)(a1 + 16);
      if (v29 > 0.0)
      {
        double v30 = v29 * floor(v28 / v29);
        double v31 = v29 * floor((v29 + v5) / v29);
        if (v30 >= v31) {
          double v28 = v30;
        }
        else {
          double v28 = v31;
        }
      }
      *uint64_t v126 = 0;
      v126[1] = 0;
      v126[2] = 0;
      if ((long long *)v6 != v7)
      {
        if (v8 > 0x555555555555555) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v8);
        long long v35 = *(char **)(a1 + 96);
        long long v34 = *(char **)(a1 + 104);
        uint64_t v36 = v32;
        if (v34 != v35)
        {
          do
          {
            long long v37 = *((_OWORD *)v34 - 3);
            long long v38 = *((_OWORD *)v34 - 2);
            *(_OWORD *)(v36 - 21) = *(_OWORD *)(v34 - 21);
            *((_OWORD *)v36 - 3) = v37;
            *((_OWORD *)v36 - 2) = v38;
            v36 -= 48;
            v34 -= 48;
          }
          while (v34 != v35);
          long long v34 = (char *)*v126;
        }
        *(void *)(a1 + 96) = v36;
        *(void *)(a1 + 104) = v32;
        *(void *)(a1 + 112) = &v32[48 * v33];
        if (v34) {
          operator delete(v34);
        }
      }
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_updateSourceOrder(a1);
      id WeakRetained = objc_loadWeakRetained(location);

      if (WeakRetained)
      {
        *(void *)&v128.var0 = a1;
        unint64_t v40 = 126 - 2 * __clz(v8);
        if ((long long *)v6 == v7) {
          uint64_t v41 = 0;
        }
        else {
          uint64_t v41 = v40;
        }
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(v6, v7, (uint64_t)&v128, v41, 1);
      }
      if (*(unsigned char *)(a1 + 25)) {
        id v119 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      }
      else {
        id v119 = 0;
      }
      long long v118 = (void *)v6;
      if ((long long *)v6 == v7)
      {
LABEL_106:
        *(double *)(a1 + 160) = HKIntervalMask<double>::removeIntervalsBefore(v116, v28) + *(double *)(a1 + 160);
        *(double *)(a1 + 200) = HKIntervalMask<double>::removeIntervalsBefore(v115, v28) + *(double *)(a1 + 200);
        long long v96 = *(void **)(a1 + 248);
        if (v96 != v114)
        {
          do
          {
            *((double *)v96 + 10) = HKIntervalMask<double>::removeIntervalsBefore((double **)v96 + 7, v28)
                                  + *((double *)v96 + 10);
            *((double *)v96 + 15) = HKIntervalMask<double>::removeIntervalsBefore((double **)v96 + 12, v28)
                                  + *((double *)v96 + 15);
            long long v97 = (void *)v96[1];
            if (v97)
            {
              do
              {
                int v98 = v97;
                long long v97 = (void *)*v97;
              }
              while (v97);
            }
            else
            {
              do
              {
                int v98 = (void *)v96[2];
                BOOL v99 = *v98 == (void)v96;
                long long v96 = v98;
              }
              while (!v99);
            }
            long long v96 = v98;
          }
          while (v98 != v114);
        }
        *(double *)(a1 + 56) = v28;

        if (v118) {
          operator delete(v118);
        }
        goto LABEL_125;
      }
      int64_t v121 = 0;
      char v44 = 0;
      unint64_t v45 = v6;
      while (2)
      {
        long long v46 = *(_OWORD *)(v45 + 16);
        *(_OWORD *)&v128.var0 = *(_OWORD *)v45;
        *(_OWORD *)&v128.var2 = v46;
        *(void *)&v128.BOOL var4 = *(void *)(v45 + 32);
        uint64_t v47 = v46;
        double v48 = v28 - v128.var1;
        double v49 = *(double *)&v46 - v128.var1;
        if (v49 - (v28 - v128.var1) < 0.01)
        {
          int64_t v50 = 0;
          BOOL var4 = 0;
          BOOL var5 = 0;
          double v53 = 0.0;
          uint64_t v47 = 0;
          double v54 = 0.0;
          if (!v128.var4) {
            goto LABEL_59;
          }
LABEL_54:
          BOOL v124 = var5;
          int64_t v125 = v50;
          HDRawQuantitySample::applyMask((uint64_t)&v128, v122);
          int v56 = *(unsigned __int8 *)(v45 + 42);
          int v57 = *(unsigned __int8 *)(v45 + 41);
          char v123 = *(unsigned char *)(v45 + 40);
          if (!v128.var4) {
            goto LABEL_87;
          }
          if (v44)
          {
            unint64_t var3 = v128.var3;
            if (v121 == v128.var3 || *(unsigned char *)(a1 + 24))
            {
              HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::addSample(v120, &v128, v56 == 0);
              int v56 = 1;
            }
          }
          else
          {
            HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::addSample(v120, &v128, v56 == 0);
            int v56 = 1;
            unint64_t var3 = v128.var3;
            int64_t v121 = v128.var3;
          }
          if (!*(unsigned char *)(a1 + 25)) {
            goto LABEL_86;
          }
          char v69 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a1, var3);
          if (!v69) {
            goto LABEL_85;
          }
          uint64_t v70 = [v119 objectForKeyedSubscript:v69];
          int8x16_t v71 = v70;
          if (v70)
          {
            if ([v70 longLongValue] != var3 && !*(unsigned char *)(a1 + 24))
            {
LABEL_84:

LABEL_85:
LABEL_86:
              char v44 = 1;
LABEL_87:
              if (var4)
              {
                BOOL v84 = v56 != 0;
                long long v86 = *(char **)(a1 + 104);
                unint64_t v85 = *(void *)(a1 + 112);
                if ((unint64_t)v86 < v85)
                {
                  *(double *)long long v86 = v54;
                  *((double *)v86 + 1) = v53;
                  *((void *)v86 + 2) = v47;
                  *((void *)v86 + 3) = v125;
                  v86[32] = var4;
                  v86[33] = v124;
                  v86[40] = v123;
                  v86[41] = v57;
                  __n128 v63 = v86 + 48;
                  v86[42] = v84;
                  goto LABEL_104;
                }
                uint64_t v80 = (char *)*v126;
                unint64_t v87 = 0xAAAAAAAAAAAAAAABLL * ((v86 - (unsigned char *)*v126) >> 4);
                unint64_t v88 = v87 + 1;
                if (v87 + 1 > 0x555555555555555) {
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v89 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v85 - (void)v80) >> 4);
                if (2 * v89 > v88) {
                  unint64_t v88 = 2 * v89;
                }
                if (v89 >= 0x2AAAAAAAAAAAAAALL) {
                  unint64_t v90 = 0x555555555555555;
                }
                else {
                  unint64_t v90 = v88;
                }
                if (v90)
                {
                  unint64_t v90 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v90);
                  uint64_t v80 = *(char **)(a1 + 96);
                  long long v86 = *(char **)(a1 + 104);
                }
                else
                {
                  uint64_t v91 = 0;
                }
                unint64_t v92 = v90 + 48 * v87;
                *(double *)unint64_t v92 = v54;
                *(double *)(v92 + 8) = v53;
                *(void *)(v92 + 16) = v47;
                *(void *)(v92 + 24) = v125;
                *(unsigned char *)(v92 + 32) = var4;
                *(unsigned char *)(v92 + 33) = v124;
                *(unsigned char *)(v92 + 40) = v123;
                *(unsigned char *)(v92 + 41) = v57;
                *(unsigned char *)(v92 + 42) = v84;
                unint64_t v93 = v92;
                if (v86 != v80)
                {
                  do
                  {
                    long long v94 = *((_OWORD *)v86 - 3);
                    long long v95 = *((_OWORD *)v86 - 2);
                    *(_OWORD *)(v93 - 21) = *(_OWORD *)(v86 - 21);
                    *(_OWORD *)(v93 - 48) = v94;
                    *(_OWORD *)(v93 - 32) = v95;
                    v93 -= 48;
                    v86 -= 48;
                  }
                  while (v86 != v80);
                  uint64_t v80 = (char *)*v126;
                }
                __n128 v63 = (_OWORD *)(v92 + 48);
                *(void *)(a1 + 96) = v93;
                *(void *)(a1 + 104) = v92 + 48;
                *(void *)(a1 + 112) = v90 + 48 * v91;
                if (v80) {
LABEL_103:
                }
                  operator delete(v80);
                goto LABEL_104;
              }
              goto LABEL_105;
            }
          }
          else
          {
            long long v81 = [NSNumber numberWithLongLong:var3];
            [v119 setObject:v81 forKeyedSubscript:v69];
          }
          unint64_t v82 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(a1, var3);
          long long v83 = (uint64_t *)HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_statisticsForSource(a1, v82);
          HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::addSample(v83, &v128, v57 == 0);
          LOBYTE(v57) = 1;
          goto LABEL_84;
        }
        if (v48 < 0.01)
        {
          v128.BOOL var4 = 0;
          goto LABEL_59;
        }
        double v55 = v48 / v49 * v128.var0;
        int64_t v50 = v128.var3;
        BOOL var5 = v128.var5;
        double v54 = v128.var0 - v55;
        v128.var0 = v55;
        v128.var2 = v28;
        double v53 = v28;
        BOOL var4 = v128.var4;
        if (v128.var4) {
          goto LABEL_54;
        }
LABEL_59:
        id v59 = *(_OWORD **)(a1 + 104);
        unint64_t v60 = *(void *)(a1 + 112);
        if ((unint64_t)v59 < v60)
        {
          long long v61 = *(_OWORD *)v45;
          long long v62 = *(_OWORD *)(v45 + 32);
          v59[1] = *(_OWORD *)(v45 + 16);
          v59[2] = v62;
          _OWORD *v59 = v61;
          __n128 v63 = v59 + 3;
          goto LABEL_104;
        }
        unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * (((char *)v59 - (unsigned char *)*v126) >> 4);
        unint64_t v65 = v64 + 1;
        if (v64 + 1 > 0x555555555555555) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - (void)*v126) >> 4);
        if (2 * v66 > v65) {
          unint64_t v65 = 2 * v66;
        }
        if (v66 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v67 = 0x555555555555555;
        }
        else {
          unint64_t v67 = v65;
        }
        if (v67) {
          unint64_t v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v67);
        }
        else {
          uint64_t v68 = 0;
        }
        uint64_t v72 = (_OWORD *)(v67 + 48 * v64);
        long long v73 = *(_OWORD *)v45;
        long long v74 = *(_OWORD *)(v45 + 32);
        v72[1] = *(_OWORD *)(v45 + 16);
        v72[2] = v74;
        _OWORD *v72 = v73;
        unint64_t v76 = *(char **)(a1 + 96);
        long long v75 = *(char **)(a1 + 104);
        int v77 = v72;
        if (v75 != v76)
        {
          do
          {
            long long v78 = *((_OWORD *)v75 - 3);
            long long v79 = *((_OWORD *)v75 - 2);
            *(_OWORD *)((char *)v77 - 21) = *(_OWORD *)(v75 - 21);
            *(v77 - 3) = v78;
            *(v77 - 2) = v79;
            v77 -= 3;
            v75 -= 48;
          }
          while (v75 != v76);
          long long v75 = (char *)*v126;
        }
        __n128 v63 = v72 + 3;
        *(void *)(a1 + 96) = v77;
        *(void *)(a1 + 104) = v72 + 3;
        *(void *)(a1 + 112) = v67 + 48 * v68;
        if (v75)
        {
          uint64_t v80 = v75;
          goto LABEL_103;
        }
LABEL_104:
        *(void *)(a1 + 104) = v63;
LABEL_105:
        v45 += 48;
        if ((long long *)v45 == v7) {
          goto LABEL_106;
        }
        continue;
      }
    }
    double v10 = *(double *)v6;
    double v9 = *(double *)(v6 + 8);
    double v11 = *(double *)(v6 + 16);
    int64_t v12 = *(void *)(v6 + 24);
    char v13 = *(unsigned char *)(v6 + 32);
    char v14 = *(unsigned char *)(v6 + 33);
    double v15 = a2 - v9;
    if (a2 - v9 >= 0.01)
    {
      if (v11 - v9 - v15 < 0.01)
      {
        uint64_t v42 = 0;
        char v43 = 0;
        double v18 = 0.0;
        double v17 = *(double *)(v6 + 16);
        char v16 = *(unsigned char *)(v6 + 32);
        double v19 = 0.0;
        double v11 = 0.0;
        char v13 = 0;
LABEL_117:
        int v101 = *(unsigned __int8 *)(v6 + 42);
        int v102 = *(unsigned __int8 *)(v6 + 41);
        int v103 = *(unsigned __int8 *)(v6 + 40);
        v128.var0 = v10;
        v128.var1 = v9;
        v128.var2 = v17;
        v128.unint64_t var3 = v12;
        v128.BOOL var4 = v16;
        v128.BOOL var5 = v14;
        *(_DWORD *)(&v128.var5 + 1) = *(_DWORD *)(v6 + 34);
        *(_WORD *)(&v128.var5 + 5) = *(_WORD *)(v6 + 38);
        *(double *)&long long v129 = v18;
        *((double *)&v129 + 1) = v19;
        *(double *)&long long v130 = v11;
        *((void *)&v130 + 1) = v42;
        LOBYTE(v131) = v13;
        HIBYTE(v131) = v43;
        HDRawQuantitySample::applyMask((uint64_t)&v128, v122);
        BOOL v104 = v103 != 0;
        BOOL v105 = v102 != 0;
        BOOL v106 = v101 != 0;
        if (v128.var4)
        {
          HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::addSample(v120, &v128, v101 == 0);
          if (*(unsigned char *)(a1 + 25))
          {
            unint64_t v107 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(a1, v128.var3);
            int v108 = (uint64_t *)HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_statisticsForSource(a1, v107);
            HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::addSample(v108, &v128, v102 == 0);
          }
          BOOL v104 = 1;
          BOOL v105 = 1;
          BOOL v106 = 1;
        }
        if ((_BYTE)v131)
        {
          LOWORD(v127) = v131;
          long long v109 = v130;
          unint64_t v110 = (char *)*v126;
          *(_OWORD *)unint64_t v110 = v129;
          *((_OWORD *)v110 + 1) = v109;
          *((void *)v110 + 4) = v127;
          v110[40] = v104;
          v110[41] = v105;
          v110[42] = v106;
        }
        else
        {
          *(void *)(a1 + 104) = *(void *)(a1 + 96);
        }
        goto LABEL_124;
      }
      double v100 = v10 * (v15 / (v11 - v9));
      double v17 = a2;
      char v16 = *(unsigned char *)(v6 + 32);
      double v18 = v10 - v100;
      double v10 = v100;
      double v19 = a2;
    }
    else
    {
      char v16 = 0;
      double v17 = *(double *)(v6 + 16);
      double v18 = *(double *)v6;
      double v19 = *(double *)(v6 + 8);
    }
    uint64_t v42 = *(void *)(v6 + 24);
    char v43 = *(unsigned char *)(v6 + 33);
    goto LABEL_117;
  }
}

void sub_1BD0C5704(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::addSample(uint64_t *result, HDRawQuantitySample *a2, int a3)
{
  double v5 = result;
  int v6 = 2 * (a2->var0 != -1.79769313e308);
  if (a2->var0 == 1.79769313e308) {
    int v6 = 1;
  }
  if (!v6)
  {
    if (*(_DWORD *)result) {
      return result;
    }
    ++result;
    if (v5[1]) {
      return result;
    }
    HDStatisticsTimeInterval::addSample(result, a2, a3);
    uint64_t v7 = v5 + 6;
    goto LABEL_20;
  }
  if (v6 == 1)
  {
    if (*(_DWORD *)result) {
      return result;
    }
    int v10 = 1;
    goto LABEL_15;
  }
  if (v6 != 2) {
    return result;
  }
  if (*(_DWORD *)result != 2)
  {
    int v10 = 2;
LABEL_15:
    *(_DWORD *)BOOL result = v10;
    result[1] = 0;
    int64_t v12 = result + 2;
    double v11 = (void *)result[2];
    if (v11)
    {
      v5[3] = (uint64_t)v11;
      operator delete(v11);
    }
    char v13 = (void *)v5[7];
    v5[6] = 0;
    long long v14 = 0uLL;
    *int64_t v12 = 0u;
    *((_OWORD *)v5 + 2) = 0u;
    if (v13)
    {
      v5[8] = (uint64_t)v13;
      operator delete(v13);
      long long v14 = 0uLL;
    }
    *(_OWORD *)(v5 + 7) = v14;
    *(_OWORD *)(v5 + 9) = v14;
    HDStatisticsTimeInterval::addSample(v5 + 1, a2, a3);
    uint64_t v7 = v5 + 6;
LABEL_20:
    unint64_t v8 = a2;
    int v9 = a3;
    goto LABEL_21;
  }
  HDStatisticsTimeInterval::addSample(result + 1, a2, 1);
  uint64_t v7 = v5 + 6;
  unint64_t v8 = a2;
  int v9 = 1;
LABEL_21:

  return HDStatisticsTimeInterval::addSample(v7, v8, v9);
}

uint64_t **HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = a2;
  id v3 = *(void **)(a1 + 256);
  if (!v3) {
    goto LABEL_11;
  }
  double v4 = (uint64_t **)(a1 + 256);
  do
  {
    uint64_t v5 = v3[4];
    BOOL v6 = v5 < a2;
    if (v5 >= a2) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = v3 + 1;
    }
    if (!v6) {
      double v4 = (uint64_t **)v3;
    }
    id v3 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t **)(a1 + 256) || (uint64_t)v4[4] > a2)
  {
LABEL_11:
    unint64_t v8 = (uint64_t **)(a1 + 248);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 248), a2, &v10);
    double v4 = std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v8, a2, &v10);
  }
  return v4 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    uint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((void *)(a1 + 336), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a1, a2);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      id v10 = v6;
      uint64_t v7 = (void *)(a1 + 376);
      unint64_t v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        double v11 = &v10;
        *((void *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        id v6 = v10;
      }
    }
  }
  return a2;
}

void sub_1BD0C5A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  double v4 = (id *)(a1 + 88);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    id v6 = (void *)(a1 + 416);
    uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
    if (v7)
    {
      id v8 = (id)v7[3];
    }
    else
    {
      id v9 = objc_loadWeakRetained(v4);
      id v8 = [v9 bundleIdentifierForSourceID:a2];

      if (v8)
      {
        id v10 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
        objc_storeStrong(v10 + 3, v8);
      }
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1BD0C5B40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, void *a3)
{
  id v6 = a1 + 1;
  uint64_t v5 = a1[1];
  uint64_t v7 = a1 + 1;
  id v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        id v8 = (uint64_t **)v5;
        uint64_t v9 = v5[4];
        if (v9 <= a2) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v7 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a2) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    id v10 = (char *)operator new(0xA8uLL);
    v12[1] = v6;
    *((void *)v10 + 4) = *a3;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    *(_OWORD *)(v10 + 120) = 0u;
    *(_OWORD *)(v10 + 136) = 0u;
    *(_OWORD *)(v10 + 152) = 0u;
    char v13 = 1;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v8, v7, (uint64_t *)v10);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
    return (uint64_t **)v10;
  }
  return v8;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v12 = a2 - 3;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 4);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v103 = *((void *)a2 - 3);
                uint64_t v104 = *(void *)(v13 + 24);
                if (v103 == v104) {
                  return;
                }
                BOOL v105 = *(char **)(*(void *)a3 + 312);
                BOOL v106 = *(char **)(*(void *)a3 + 320);
                unint64_t v107 = v105;
                int v108 = v105;
                if (v105 == v106) {
                  goto LABEL_171;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)v13, (long long *)(v13 + 48), a2 - 3, a3);
                return;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, (uint64_t)(a2 - 3), a3);
                return;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, v13 + 144, (uint64_t)(a2 - 3), a3);
                return;
              default:
                JUMPOUT(0);
            }
            do
            {
              if (*(void *)v108 == v103) {
                goto LABEL_168;
              }
              v108 += 8;
            }
            while (v108 != v106);
            int v108 = *(char **)(*(void *)a3 + 320);
LABEL_168:
            while (*(void *)v107 != v104)
            {
              v107 += 8;
              if (v107 == v106)
              {
                unint64_t v107 = *(char **)(*(void *)a3 + 320);
                break;
              }
            }
LABEL_171:
            if (v108 - v105 < v107 - v105)
            {
              *(_OWORD *)v226 = *(_OWORD *)(v13 + 16);
              *(_OWORD *)&v226[16] = *(_OWORD *)(v13 + 32);
              long long v218 = *(_OWORD *)v13;
              long long v109 = *v12;
              long long v110 = *(a2 - 2);
              *(_OWORD *)(v13 + 27) = *(long long *)((char *)a2 - 21);
              *(_OWORD *)unint64_t v13 = v109;
              *(_OWORD *)(v13 + 16) = v110;
              *(long long *)((char *)a2 - 21) = *(_OWORD *)&v226[11];
              *unint64_t v12 = v218;
              *(a2 - 2) = *(_OWORD *)v226;
            }
            return;
          }
          if (v14 <= 1151)
          {
            double v111 = (long long *)(v13 + 48);
            BOOL v113 = (long long *)v13 == a2 || v111 == a2;
            if (a5)
            {
              if (!v113)
              {
                unint64_t v114 = v13;
                do
                {
                  unint64_t v115 = v114;
                  unint64_t v114 = (unint64_t)v111;
                  uint64_t v116 = *(void *)(v115 + 72);
                  uint64_t v117 = *(void *)(v115 + 24);
                  if (v116 != v117)
                  {
                    long long v118 = *(char **)(*(void *)a3 + 312);
                    id v119 = *(char **)(*(void *)a3 + 320);
                    __int16 v120 = v118;
                    int64_t v121 = v118;
                    if (v118 != v119)
                    {
                      do
                      {
                        if (*(void *)v121 == v116) {
                          goto LABEL_196;
                        }
                        v121 += 8;
                      }
                      while (v121 != v119);
                      int64_t v121 = *(char **)(*(void *)a3 + 320);
LABEL_196:
                      while (*(void *)v120 != v117)
                      {
                        v120 += 8;
                        if (v120 == v119)
                        {
                          __int16 v120 = *(char **)(*(void *)a3 + 320);
                          break;
                        }
                      }
                    }
                    if (v121 - v118 < v120 - v118)
                    {
                      uint64_t v227 = *(void *)(v114 + 16);
                      long long v219 = *(_OWORD *)v114;
                      long long v236 = *(_OWORD *)(v115 + 80);
                      unint64_t v122 = v114;
                      while (1)
                      {
                        long long v123 = *(_OWORD *)(v115 + 16);
                        *(_OWORD *)unint64_t v122 = *(_OWORD *)v115;
                        *(_OWORD *)(v122 + 16) = v123;
                        *(_OWORD *)(v122 + 27) = *(_OWORD *)(v115 + 27);
                        if (v115 == v13) {
                          break;
                        }
                        unint64_t v122 = v115;
                        uint64_t v124 = *(void *)(v115 - 24);
                        if (v116 != v124)
                        {
                          int64_t v125 = *(char **)(*(void *)a3 + 312);
                          uint64_t v126 = *(char **)(*(void *)a3 + 320);
                          uint64_t v127 = v125;
                          HDRawQuantitySample v128 = v125;
                          if (v125 != v126)
                          {
                            do
                            {
                              if (*(void *)v128 == v116) {
                                goto LABEL_208;
                              }
                              v128 += 8;
                            }
                            while (v128 != v126);
                            HDRawQuantitySample v128 = *(char **)(*(void *)a3 + 320);
LABEL_208:
                            while (*(void *)v127 != v124)
                            {
                              v127 += 8;
                              if (v127 == v126)
                              {
                                uint64_t v127 = *(char **)(*(void *)a3 + 320);
                                break;
                              }
                            }
                          }
                          unint64_t v115 = v122 - 48;
                          if (v128 - v125 < v127 - v125) {
                            continue;
                          }
                        }
                        goto LABEL_212;
                      }
                      unint64_t v122 = v13;
LABEL_212:
                      *(_OWORD *)unint64_t v122 = v219;
                      *(void *)(v122 + 16) = v227;
                      *(void *)(v122 + 24) = v116;
                      *(void *)(v122 + 32) = v236;
                      *(_DWORD *)(v122 + 39) = *(_DWORD *)((char *)&v236 + 7);
                    }
                  }
                  double v111 = (long long *)(v114 + 48);
                }
                while ((long long *)(v114 + 48) != a2);
              }
            }
            else if (!v113)
            {
              do
              {
                unint64_t v201 = a1;
                a1 = (unint64_t)v111;
                uint64_t v202 = *(void *)(v201 + 72);
                uint64_t v203 = *(void *)(v201 + 24);
                if (v202 != v203)
                {
                  v204 = *(char **)(*(void *)a3 + 312);
                  v205 = *(char **)(*(void *)a3 + 320);
                  v206 = v204;
                  v207 = v204;
                  if (v204 != v205)
                  {
                    do
                    {
                      if (*(void *)v207 == v202) {
                        goto LABEL_312;
                      }
                      v207 += 8;
                    }
                    while (v207 != v205);
                    v207 = *(char **)(*(void *)a3 + 320);
LABEL_312:
                    while (*(void *)v206 != v203)
                    {
                      v206 += 8;
                      if (v206 == v205)
                      {
                        v206 = *(char **)(*(void *)a3 + 320);
                        break;
                      }
                    }
                  }
                  if (v207 - v204 < v206 - v204)
                  {
                    uint64_t v230 = *(void *)(a1 + 16);
                    long long v222 = *(_OWORD *)a1;
                    long long v239 = *(_OWORD *)(v201 + 80);
                    unint64_t v208 = a1;
                    do
                    {
                      v209 = (_OWORD *)v208;
                      unint64_t v208 = v201;
                      long long v210 = *(_OWORD *)(v201 + 16);
                      _OWORD *v209 = *(_OWORD *)v201;
                      v209[1] = v210;
                      *(_OWORD *)((char *)v209 + 27) = *(_OWORD *)(v201 + 27);
                      uint64_t v211 = *(void *)(v201 - 24);
                      if (v202 == v211) {
                        break;
                      }
                      v212 = *(char **)(*(void *)a3 + 312);
                      v213 = *(char **)(*(void *)a3 + 320);
                      v214 = v212;
                      v215 = v212;
                      if (v212 != v213)
                      {
                        do
                        {
                          if (*(void *)v215 == v202) {
                            goto LABEL_322;
                          }
                          v215 += 8;
                        }
                        while (v215 != v213);
                        v215 = *(char **)(*(void *)a3 + 320);
LABEL_322:
                        while (*(void *)v214 != v211)
                        {
                          v214 += 8;
                          if (v214 == v213)
                          {
                            v214 = *(char **)(*(void *)a3 + 320);
                            break;
                          }
                        }
                      }
                      unint64_t v201 = v208 - 48;
                    }
                    while (v215 - v212 < v214 - v212);
                    *(_OWORD *)unint64_t v208 = v222;
                    *(void *)(v208 + 16) = v230;
                    *(void *)(v208 + 24) = v202;
                    *(void *)(v208 + 32) = v239;
                    *(_DWORD *)(v208 + 39) = *(_DWORD *)((char *)&v239 + 7);
                  }
                }
                double v111 = (long long *)(a1 + 48);
              }
              while ((long long *)(a1 + 48) != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((long long *)v13 != a2)
            {
              int64_t v129 = (v15 - 2) >> 1;
              int64_t v130 = v129;
              do
              {
                int64_t v131 = v130;
                if (v129 >= v130)
                {
                  uint64_t v132 = (2 * v130) | 1;
                  unint64_t v133 = v13 + 48 * v132;
                  if (2 * v131 + 2 < (uint64_t)v15)
                  {
                    uint64_t v134 = *(void *)(v133 + 24);
                    uint64_t v135 = *(void *)(v133 + 72);
                    if (v134 != v135)
                    {
                      v137 = *(char **)(*(void *)a3 + 312);
                      v136 = *(char **)(*(void *)a3 + 320);
                      v138 = v137;
                      v139 = v137;
                      if (v137 != v136)
                      {
                        do
                        {
                          if (*(void *)v139 == v134) {
                            goto LABEL_224;
                          }
                          v139 += 8;
                        }
                        while (v139 != v136);
                        v139 = *(char **)(*(void *)a3 + 320);
LABEL_224:
                        while (*(void *)v138 != v135)
                        {
                          v138 += 8;
                          if (v138 == v136)
                          {
                            v138 = *(char **)(*(void *)a3 + 320);
                            break;
                          }
                        }
                      }
                      v133 += 48 * (v139 - v137 < v138 - v137);
                      if (v139 - v137 < v138 - v137) {
                        uint64_t v132 = 2 * v131 + 2;
                      }
                    }
                  }
                  unint64_t v140 = v13 + 48 * v131;
                  uint64_t v141 = *(void *)(v133 + 24);
                  uint64_t v142 = *(void *)(v140 + 24);
                  if (v141 == v142) {
                    goto LABEL_238;
                  }
                  v144 = *(char **)(*(void *)a3 + 312);
                  v143 = *(char **)(*(void *)a3 + 320);
                  v145 = v144;
                  v146 = v144;
                  if (v144 != v143)
                  {
                    do
                    {
                      if (*(void *)v146 == v141) {
                        goto LABEL_234;
                      }
                      v146 += 8;
                    }
                    while (v146 != v143);
                    v146 = *(char **)(*(void *)a3 + 320);
LABEL_234:
                    while (*(void *)v145 != v142)
                    {
                      v145 += 8;
                      if (v145 == v143)
                      {
                        v145 = *(char **)(*(void *)a3 + 320);
                        break;
                      }
                    }
                  }
                  if (v146 - v144 >= v145 - v144)
                  {
LABEL_238:
                    uint64_t v228 = *(void *)(v140 + 16);
                    long long v220 = *(_OWORD *)v140;
                    long long v237 = *(_OWORD *)(v140 + 32);
                    long long v147 = *(_OWORD *)v133;
                    long long v148 = *(_OWORD *)(v133 + 16);
                    *(_OWORD *)(v140 + 27) = *(_OWORD *)(v133 + 27);
                    *(_OWORD *)unint64_t v140 = v147;
                    *(_OWORD *)(v140 + 16) = v148;
                    if (v129 >= v132)
                    {
                      while (1)
                      {
                        uint64_t v150 = 2 * v132;
                        uint64_t v132 = (2 * v132) | 1;
                        unint64_t v149 = v13 + 48 * v132;
                        uint64_t v151 = v150 + 2;
                        if (v151 < (uint64_t)v15)
                        {
                          uint64_t v152 = *(void *)(v149 + 24);
                          uint64_t v153 = *(void *)(v149 + 72);
                          if (v152 != v153)
                          {
                            v154 = *(char **)(*(void *)a3 + 312);
                            v155 = *(char **)(*(void *)a3 + 320);
                            v156 = v154;
                            v157 = v154;
                            if (v154 != v155)
                            {
                              do
                              {
                                if (*(void *)v157 == v152) {
                                  goto LABEL_246;
                                }
                                v157 += 8;
                              }
                              while (v157 != v155);
                              v157 = *(char **)(*(void *)a3 + 320);
LABEL_246:
                              while (*(void *)v156 != v153)
                              {
                                v156 += 8;
                                if (v156 == v155)
                                {
                                  v156 = *(char **)(*(void *)a3 + 320);
                                  break;
                                }
                              }
                            }
                            v149 += 48 * (v157 - v154 < v156 - v154);
                            if (v157 - v154 < v156 - v154) {
                              uint64_t v132 = v151;
                            }
                          }
                        }
                        uint64_t v158 = *(void *)(v149 + 24);
                        if (v158 != v142)
                        {
                          v160 = *(char **)(*(void *)a3 + 312);
                          v159 = *(char **)(*(void *)a3 + 320);
                          v161 = v160;
                          v162 = v160;
                          if (v160 != v159)
                          {
                            do
                            {
                              if (*(void *)v162 == v158) {
                                goto LABEL_256;
                              }
                              v162 += 8;
                            }
                            while (v162 != v159);
                            v162 = *(char **)(*(void *)a3 + 320);
LABEL_256:
                            while (*(void *)v161 != v142)
                            {
                              v161 += 8;
                              if (v161 == v159)
                              {
                                v161 = *(char **)(*(void *)a3 + 320);
                                break;
                              }
                            }
                          }
                          if (v162 - v160 < v161 - v160) {
                            break;
                          }
                        }
                        long long v163 = *(_OWORD *)v149;
                        long long v164 = *(_OWORD *)(v149 + 16);
                        *(_OWORD *)(v133 + 27) = *(_OWORD *)(v149 + 27);
                        *(_OWORD *)unint64_t v133 = v163;
                        *(_OWORD *)(v133 + 16) = v164;
                        unint64_t v133 = v149;
                        if (v129 < v132) {
                          goto LABEL_261;
                        }
                      }
                    }
                    unint64_t v149 = v133;
LABEL_261:
                    *(_OWORD *)unint64_t v149 = v220;
                    *(void *)(v149 + 16) = v228;
                    *(void *)(v149 + 24) = v142;
                    *(void *)(v149 + 32) = v237;
                    *(_DWORD *)(v149 + 39) = *(_DWORD *)((char *)&v237 + 7);
                  }
                }
                int64_t v130 = v131 - 1;
              }
              while (v131);
              int64_t v165 = v14 / 0x30uLL;
              do
              {
                uint64_t v166 = 0;
                *(_OWORD *)v229 = *(_OWORD *)(v13 + 16);
                *(_OWORD *)&v229[16] = *(_OWORD *)(v13 + 32);
                long long v221 = *(_OWORD *)v13;
                uint64_t v167 = v165 - 2;
                if (v165 < 2) {
                  uint64_t v167 = v165 - 1;
                }
                uint64_t v168 = v167 >> 1;
                unint64_t v169 = v13;
                do
                {
                  v170 = (_OWORD *)v169;
                  v169 += 48 * v166 + 48;
                  uint64_t v171 = 2 * v166;
                  uint64_t v166 = (2 * v166) | 1;
                  uint64_t v172 = v171 + 2;
                  if (v171 + 2 < v165)
                  {
                    uint64_t v173 = *(void *)(v169 + 24);
                    uint64_t v174 = *(void *)(v169 + 72);
                    if (v173 != v174)
                    {
                      v176 = *(char **)(*(void *)a3 + 312);
                      v175 = *(char **)(*(void *)a3 + 320);
                      v177 = v176;
                      v178 = v176;
                      if (v176 != v175)
                      {
                        do
                        {
                          if (*(void *)v178 == v173) {
                            goto LABEL_273;
                          }
                          v178 += 8;
                        }
                        while (v178 != v175);
                        v178 = *(char **)(*(void *)a3 + 320);
LABEL_273:
                        while (*(void *)v177 != v174)
                        {
                          v177 += 8;
                          if (v177 == v175)
                          {
                            v177 = *(char **)(*(void *)a3 + 320);
                            break;
                          }
                        }
                      }
                      v169 += 48 * (v178 - v176 < v177 - v176);
                      if (v178 - v176 < v177 - v176) {
                        uint64_t v166 = v172;
                      }
                    }
                  }
                  long long v179 = *(_OWORD *)v169;
                  long long v180 = *(_OWORD *)(v169 + 16);
                  *(_OWORD *)((char *)v170 + 27) = *(_OWORD *)(v169 + 27);
                  _OWORD *v170 = v179;
                  v170[1] = v180;
                }
                while (v166 <= v168);
                a2 -= 3;
                if ((long long *)v169 == a2)
                {
                  *(_OWORD *)(v169 + 27) = *(_OWORD *)&v229[11];
                  *(_OWORD *)unint64_t v169 = v221;
                  *(_OWORD *)(v169 + 16) = *(_OWORD *)v229;
                }
                else
                {
                  long long v181 = *a2;
                  long long v182 = a2[1];
                  *(_OWORD *)(v169 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v169 = v181;
                  *(_OWORD *)(v169 + 16) = v182;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v229[11];
                  *a2 = v221;
                  a2[1] = *(_OWORD *)v229;
                  uint64_t v183 = v169 - v13 + 48;
                  if (v183 >= 49)
                  {
                    unint64_t v184 = (v183 / 0x30uLL - 2) >> 1;
                    unint64_t v185 = v13 + 48 * v184;
                    uint64_t v186 = *(void *)(v185 + 24);
                    uint64_t v187 = *(void *)(v169 + 24);
                    if (v186 != v187)
                    {
                      v189 = *(char **)(*(void *)a3 + 312);
                      v188 = *(char **)(*(void *)a3 + 320);
                      v190 = v189;
                      v191 = v189;
                      if (v189 != v188)
                      {
                        do
                        {
                          if (*(void *)v191 == v186) {
                            goto LABEL_286;
                          }
                          v191 += 8;
                        }
                        while (v191 != v188);
                        v191 = *(char **)(*(void *)a3 + 320);
LABEL_286:
                        while (*(void *)v190 != v187)
                        {
                          v190 += 8;
                          if (v190 == v188)
                          {
                            v190 = *(char **)(*(void *)a3 + 320);
                            break;
                          }
                        }
                      }
                      if (v191 - v189 < v190 - v189)
                      {
                        uint64_t v242 = *(void *)(v169 + 16);
                        long long v238 = *(_OWORD *)v169;
                        long long v233 = *(_OWORD *)(v169 + 32);
                        do
                        {
                          v192 = (_OWORD *)v169;
                          unint64_t v169 = v185;
                          long long v193 = *(_OWORD *)v185;
                          long long v194 = *(_OWORD *)(v185 + 16);
                          *(_OWORD *)((char *)v192 + 27) = *(_OWORD *)(v185 + 27);
                          _OWORD *v192 = v193;
                          v192[1] = v194;
                          if (!v184) {
                            break;
                          }
                          unint64_t v184 = (v184 - 1) >> 1;
                          unint64_t v185 = v13 + 48 * v184;
                          uint64_t v195 = *(void *)(v185 + 24);
                          if (v195 == v187) {
                            break;
                          }
                          v197 = *(char **)(*(void *)a3 + 312);
                          v196 = *(char **)(*(void *)a3 + 320);
                          v198 = v197;
                          v199 = v197;
                          if (v197 != v196)
                          {
                            do
                            {
                              if (*(void *)v199 == v195) {
                                goto LABEL_297;
                              }
                              v199 += 8;
                            }
                            while (v199 != v196);
                            v199 = *(char **)(*(void *)a3 + 320);
LABEL_297:
                            while (*(void *)v198 != v187)
                            {
                              v198 += 8;
                              if (v198 == v196)
                              {
                                v198 = *(char **)(*(void *)a3 + 320);
                                break;
                              }
                            }
                          }
                        }
                        while (v199 - v197 < v198 - v197);
                        *(_OWORD *)unint64_t v169 = v238;
                        *(void *)(v169 + 16) = v242;
                        *(void *)(v169 + 24) = v187;
                        *(void *)(v169 + 32) = v233;
                        *(_DWORD *)(v169 + 39) = *(_DWORD *)((char *)&v233 + 7);
                      }
                    }
                  }
                }
              }
              while (v165-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          double v17 = (long long *)(v13 + 48 * (v15 >> 1));
          if ((unint64_t)v14 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v15 >> 1)), a2 - 3, a3);
            uint64_t v18 = 3 * v16;
            double v19 = (long long *)(a1 + 48 * v16 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48), v19, a2 - 6, a3);
            double v20 = (long long *)(a1 + 48 + 16 * v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 96), v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v19, v17, v20, a3);
            *(_OWORD *)v223 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v223[16] = *(_OWORD *)(a1 + 32);
            long long v216 = *(_OWORD *)a1;
            long long v21 = *(long long *)((char *)v17 + 27);
            long long v22 = v17[1];
            *(_OWORD *)a1 = *v17;
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(a1 + 27) = v21;
            *(long long *)((char *)v17 + 27) = *(_OWORD *)&v223[11];
            *double v17 = v216;
            v17[1] = *(_OWORD *)v223;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48 * (v15 >> 1)), (long long *)a1, a2 - 3, a3);
          }
          --a4;
          if (a5)
          {
            uint64_t v23 = *(void *)(a1 + 24);
            uint64_t v24 = *(void *)a3;
            break;
          }
          uint64_t v25 = *(void *)(a1 - 24);
          uint64_t v23 = *(void *)(a1 + 24);
          if (v25 != v23)
          {
            uint64_t v24 = *(void *)a3;
            uint64_t v26 = *(char **)(*(void *)a3 + 312);
            double v27 = *(char **)(*(void *)a3 + 320);
            double v28 = v26;
            double v29 = v26;
            if (v26 != v27)
            {
              do
              {
                if (*(void *)v29 == v25) {
                  goto LABEL_16;
                }
                v29 += 8;
              }
              while (v29 != v27);
              double v29 = *(char **)(*(void *)a3 + 320);
LABEL_16:
              while (*(void *)v28 != v23)
              {
                v28 += 8;
                if (v28 == v27)
                {
                  double v28 = *(char **)(*(void *)a3 + 320);
                  break;
                }
              }
            }
            if (v29 - v26 < v28 - v26) {
              break;
            }
          }
          uint64_t v241 = *(void *)(a1 + 16);
          long long v232 = *(_OWORD *)(a1 + 32);
          long long v235 = *(_OWORD *)a1;
          uint64_t v67 = *((void *)a2 - 3);
          if (v23 == v67) {
            goto LABEL_107;
          }
          uint64_t v68 = *(char **)(*(void *)a3 + 312);
          char v69 = *(char **)(*(void *)a3 + 320);
          if (v68 == v69)
          {
            int8x16_t v71 = *(char **)(*(void *)a3 + 312);
            uint64_t v70 = v71;
          }
          else
          {
            uint64_t v70 = *(char **)(*(void *)a3 + 312);
            while (*(void *)v70 != v23)
            {
              v70 += 8;
              if (v70 == v69)
              {
                uint64_t v70 = *(char **)(*(void *)a3 + 320);
                break;
              }
            }
            int8x16_t v71 = *(char **)(*(void *)a3 + 312);
            while (*(void *)v71 != v67)
            {
              v71 += 8;
              if (v71 == v69)
              {
                int8x16_t v71 = *(char **)(*(void *)a3 + 320);
                break;
              }
            }
          }
          if (v70 - v68 >= v71 - v68)
          {
LABEL_107:
            unint64_t v13 = a1 + 48;
            if (a1 + 48 < (unint64_t)a2)
            {
              uint64_t v75 = *(void *)a3;
              unint64_t v76 = a1;
              do
              {
                uint64_t v77 = *(void *)(v76 + 72);
                unint64_t v76 = v13;
                if (v23 != v77)
                {
                  long long v78 = *(char **)(v75 + 312);
                  long long v79 = *(char **)(v75 + 320);
                  uint64_t v80 = v78;
                  long long v81 = v78;
                  if (v78 != v79)
                  {
                    do
                    {
                      if (*(void *)v81 == v23) {
                        goto LABEL_114;
                      }
                      v81 += 8;
                    }
                    while (v81 != v79);
                    long long v81 = *(char **)(v75 + 320);
LABEL_114:
                    while (*(void *)v80 != v77)
                    {
                      v80 += 8;
                      if (v80 == v79)
                      {
                        uint64_t v80 = *(char **)(v75 + 320);
                        break;
                      }
                    }
                  }
                  if (v81 - v78 < v80 - v78) {
                    break;
                  }
                }
                v13 += 48;
              }
              while (v76 + 48 < (unint64_t)a2);
            }
          }
          else
          {
            unint64_t v13 = a1;
            do
            {
              do
              {
                uint64_t v72 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v72);
              if (v68 == v69)
              {
                long long v74 = *(char **)(*(void *)a3 + 312);
                long long v73 = v74;
              }
              else
              {
                long long v73 = *(char **)(*(void *)a3 + 312);
                while (*(void *)v73 != v23)
                {
                  v73 += 8;
                  if (v73 == v69)
                  {
                    long long v73 = *(char **)(*(void *)a3 + 320);
                    break;
                  }
                }
                long long v74 = *(char **)(*(void *)a3 + 312);
                while (*(void *)v74 != v72)
                {
                  v74 += 8;
                  if (v74 == v69)
                  {
                    long long v74 = *(char **)(*(void *)a3 + 320);
                    break;
                  }
                }
              }
            }
            while (v73 - v68 >= v74 - v68);
          }
          unint64_t v82 = a2;
          if (v13 < (unint64_t)a2)
          {
            uint64_t v83 = *(void *)a3;
            unint64_t v82 = a2;
            do
            {
              uint64_t v84 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v84) {
                break;
              }
              unint64_t v85 = *(char **)(v83 + 312);
              long long v86 = *(char **)(v83 + 320);
              unint64_t v87 = v85;
              unint64_t v88 = v85;
              if (v85 != v86)
              {
                do
                {
                  if (*(void *)v88 == v23) {
                    goto LABEL_126;
                  }
                  v88 += 8;
                }
                while (v88 != v86);
                unint64_t v88 = *(char **)(v83 + 320);
LABEL_126:
                while (*(void *)v87 != v84)
                {
                  v87 += 8;
                  if (v87 == v86)
                  {
                    unint64_t v87 = *(char **)(v83 + 320);
                    break;
                  }
                }
              }
            }
            while (v88 - v85 < v87 - v85);
          }
          while (v13 < (unint64_t)v82)
          {
            *(_OWORD *)v225 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v225[16] = *(_OWORD *)(v13 + 32);
            long long v217 = *(_OWORD *)v13;
            long long v89 = *v82;
            long long v90 = v82[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v82 + 27);
            *(_OWORD *)unint64_t v13 = v89;
            *(_OWORD *)(v13 + 16) = v90;
            *(long long *)((char *)v82 + 27) = *(_OWORD *)&v225[11];
            long long *v82 = v217;
            v82[1] = *(_OWORD *)v225;
            uint64_t v91 = *(void *)a3;
            do
            {
              do
              {
                uint64_t v92 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v92);
              unint64_t v93 = *(char **)(v91 + 312);
              long long v94 = *(char **)(v91 + 320);
              if (v93 == v94)
              {
                long long v96 = *(char **)(v91 + 312);
                long long v95 = v96;
              }
              else
              {
                long long v95 = *(char **)(v91 + 312);
                while (*(void *)v95 != v23)
                {
                  v95 += 8;
                  if (v95 == v94)
                  {
                    long long v95 = *(char **)(v91 + 320);
                    break;
                  }
                }
                long long v96 = *(char **)(v91 + 312);
                while (*(void *)v96 != v92)
                {
                  v96 += 8;
                  if (v96 == v94)
                  {
                    long long v96 = *(char **)(v91 + 320);
                    break;
                  }
                }
              }
            }
            while (v95 - v93 >= v96 - v93);
            do
            {
              uint64_t v97 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v97) {
                break;
              }
              if (v93 == v94)
              {
                BOOL v99 = v93;
                int v98 = v93;
              }
              else
              {
                int v98 = v93;
                while (*(void *)v98 != v23)
                {
                  v98 += 8;
                  if (v98 == v94)
                  {
                    int v98 = v94;
                    break;
                  }
                }
                BOOL v99 = v93;
                while (*(void *)v99 != v97)
                {
                  v99 += 8;
                  if (v99 == v94)
                  {
                    BOOL v99 = v94;
                    break;
                  }
                }
              }
            }
            while (v98 - v93 < v99 - v93);
          }
          double v100 = (long long *)(v13 - 48);
          BOOL v5 = v13 - 48 >= a1;
          BOOL v6 = v13 - 48 == a1;
          if (v13 - 48 != a1)
          {
            long long v101 = *v100;
            long long v102 = *(_OWORD *)(v13 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
            *(_OWORD *)a1 = v101;
            *(_OWORD *)(a1 + 16) = v102;
          }
          a5 = 0;
          *double v100 = v235;
          *(void *)(v13 - 32) = v241;
          *(void *)(v13 - 24) = v23;
          *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v232 + 7);
          *(void *)(v13 - 16) = v232;
        }
        uint64_t v240 = *(void *)(a1 + 16);
        long long v231 = *(_OWORD *)(a1 + 32);
        long long v234 = *(_OWORD *)a1;
        unint64_t v30 = a1;
        do
        {
          unint64_t v31 = v30;
          v30 += 48;
          uint64_t v32 = *(void *)(v31 + 72);
          if (v32 == v23) {
            break;
          }
          uint64_t v33 = *(char **)(v24 + 312);
          long long v34 = *(char **)(v24 + 320);
          long long v35 = v33;
          uint64_t v36 = v33;
          if (v33 != v34)
          {
            do
            {
              if (*(void *)v36 == v32) {
                goto LABEL_26;
              }
              v36 += 8;
            }
            while (v36 != v34);
            uint64_t v36 = *(char **)(v24 + 320);
LABEL_26:
            while (*(void *)v35 != v23)
            {
              v35 += 8;
              if (v35 == v34)
              {
                long long v35 = *(char **)(v24 + 320);
                break;
              }
            }
          }
        }
        while (v36 - v33 < v35 - v33);
        long long v37 = a2;
        if (v31 == a1)
        {
          long long v37 = a2;
          if (v30 < (unint64_t)a2)
          {
            long long v37 = a2;
            do
            {
              uint64_t v43 = *((void *)v37 - 3);
              v37 -= 3;
              if (v43 != v23)
              {
                char v44 = *(char **)(v24 + 312);
                unint64_t v45 = *(char **)(v24 + 320);
                long long v46 = v44;
                uint64_t v47 = v44;
                if (v44 != v45)
                {
                  do
                  {
                    if (*(void *)v47 == v43) {
                      goto LABEL_48;
                    }
                    v47 += 8;
                  }
                  while (v47 != v45);
                  uint64_t v47 = *(char **)(v24 + 320);
LABEL_48:
                  while (*(void *)v46 != v23)
                  {
                    v46 += 8;
                    if (v46 == v45)
                    {
                      long long v46 = *(char **)(v24 + 320);
                      break;
                    }
                  }
                }
                if (v47 - v44 < v46 - v44) {
                  break;
                }
              }
            }
            while (v30 < (unint64_t)v37);
          }
        }
        else
        {
          do
          {
            do
            {
              uint64_t v38 = *((void *)v37 - 3);
              v37 -= 3;
            }
            while (v38 == v23);
            unint64_t v39 = *(char **)(v24 + 312);
            unint64_t v40 = *(char **)(v24 + 320);
            uint64_t v41 = v39;
            uint64_t v42 = v39;
            if (v39 != v40)
            {
              do
              {
                if (*(void *)v42 == v38) {
                  goto LABEL_36;
                }
                v42 += 8;
              }
              while (v42 != v40);
              uint64_t v42 = *(char **)(v24 + 320);
LABEL_36:
              while (*(void *)v41 != v23)
              {
                v41 += 8;
                if (v41 == v40)
                {
                  uint64_t v41 = *(char **)(v24 + 320);
                  break;
                }
              }
            }
          }
          while (v42 - v39 >= v41 - v39);
        }
        unint64_t v13 = v30;
        if (v30 < (unint64_t)v37)
        {
          double v48 = v37;
          do
          {
            *(_OWORD *)v224 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v224[16] = *(_OWORD *)(v13 + 32);
            long long v49 = *(_OWORD *)v13;
            long long v51 = *v48;
            long long v50 = v48[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v48 + 27);
            *(_OWORD *)unint64_t v13 = v51;
            *(_OWORD *)(v13 + 16) = v50;
            *(long long *)((char *)v48 + 27) = *(_OWORD *)&v224[11];
            *double v48 = v49;
            v48[1] = *(_OWORD *)v224;
            uint64_t v52 = *(void *)a3;
            do
            {
              uint64_t v53 = *(void *)(v13 + 72);
              v13 += 48;
              if (v53 == v23) {
                break;
              }
              double v54 = *(char **)(v52 + 312);
              double v55 = *(char **)(v52 + 320);
              int v56 = v54;
              int v57 = v54;
              if (v54 != v55)
              {
                do
                {
                  if (*(void *)v57 == v53) {
                    goto LABEL_61;
                  }
                  v57 += 8;
                }
                while (v57 != v55);
                int v57 = *(char **)(v52 + 320);
LABEL_61:
                while (*(void *)v56 != v23)
                {
                  v56 += 8;
                  if (v56 == v55)
                  {
                    int v56 = *(char **)(v52 + 320);
                    break;
                  }
                }
              }
            }
            while (v57 - v54 < v56 - v54);
            do
            {
              do
              {
                uint64_t v58 = *((void *)v48 - 3);
                v48 -= 3;
              }
              while (v58 == v23);
              id v59 = *(char **)(v52 + 312);
              unint64_t v60 = *(char **)(v52 + 320);
              long long v61 = v59;
              long long v62 = v59;
              if (v59 != v60)
              {
                do
                {
                  if (*(void *)v62 == v58) {
                    goto LABEL_70;
                  }
                  v62 += 8;
                }
                while (v62 != v60);
                long long v62 = *(char **)(v52 + 320);
LABEL_70:
                while (*(void *)v61 != v23)
                {
                  v61 += 8;
                  if (v61 == v60)
                  {
                    long long v61 = *(char **)(v52 + 320);
                    break;
                  }
                }
              }
            }
            while (v62 - v59 >= v61 - v59);
          }
          while (v13 < (unint64_t)v48);
        }
        __n128 v63 = (long long *)(v13 - 48);
        if (v13 - 48 != a1)
        {
          long long v64 = *v63;
          long long v65 = *(_OWORD *)(v13 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
          *(_OWORD *)a1 = v64;
          *(_OWORD *)(a1 + 16) = v65;
        }
        *__n128 v63 = v234;
        *(void *)(v13 - 32) = v240;
        *(void *)(v13 - 24) = v23;
        *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v231 + 7);
        *(void *)(v13 - 16) = v231;
        if (v30 >= (unint64_t)v37) {
          break;
        }
LABEL_80:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(a1, v13 - 48, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, v13 - 48, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v13, (uint64_t)a2, a3))
      {
        break;
      }
      if (!v66) {
        goto LABEL_80;
      }
    }
    a2 = (long long *)(v13 - 48);
    if (!v66) {
      continue;
    }
    break;
  }
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder*>(long long *a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = *((void *)a2 + 3);
  uint64_t v5 = *((void *)a1 + 3);
  if (v4 == v5) {
    goto LABEL_23;
  }
  BOOL v6 = *(char **)(*(void *)a4 + 312);
  uint64_t v7 = *(char **)(*(void *)a4 + 320);
  if (v6 == v7)
  {
    uint64_t v9 = *(char **)(*(void *)a4 + 312);
    id v8 = v9;
  }
  else
  {
    id v8 = *(char **)(*(void *)a4 + 312);
    while (*(void *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        id v8 = *(char **)(*(void *)a4 + 320);
        break;
      }
    }
    uint64_t v9 = *(char **)(*(void *)a4 + 312);
    while (*(void *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        uint64_t v9 = *(char **)(*(void *)a4 + 320);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    uint64_t v13 = *((void *)a3 + 3);
    if (v13 != v4)
    {
      uint64_t v14 = *(char **)(*(void *)a4 + 312);
      unint64_t v15 = *(char **)(*(void *)a4 + 320);
      unint64_t v16 = v14;
      double v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(void *)v17 == v13) {
            goto LABEL_28;
          }
          v17 += 8;
        }
        while (v17 != v15);
        double v17 = *(char **)(*(void *)a4 + 320);
LABEL_28:
        while (*(void *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            unint64_t v16 = *(char **)(*(void *)a4 + 320);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        long long v18 = *a2;
        *(_OWORD *)long long v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        long long v19 = *(long long *)((char *)a3 + 27);
        long long v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(long long *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        __n128 result = *(__n128 *)&v46[11];
        *(long long *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        uint64_t v22 = *((void *)a2 + 3);
        uint64_t v23 = *((void *)a1 + 3);
        if (v22 != v23)
        {
          uint64_t v24 = *(char **)(*(void *)a4 + 312);
          uint64_t v25 = *(char **)(*(void *)a4 + 320);
          uint64_t v26 = v24;
          double v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(void *)v27 == v22) {
                goto LABEL_37;
              }
              v27 += 8;
            }
            while (v27 != v25);
            double v27 = *(char **)(*(void *)a4 + 320);
LABEL_37:
            while (*(void *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                uint64_t v26 = *(char **)(*(void *)a4 + 320);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            long long v28 = *a1;
            *(_OWORD *)uint64_t v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            long long v29 = *(long long *)((char *)a2 + 27);
            long long v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(long long *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            __n128 result = *(__n128 *)&v47[11];
            *(long long *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    uint64_t v10 = *((void *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        unint64_t v12 = *(char **)(*(void *)a4 + 312);
        double v11 = v12;
      }
      else
      {
        double v11 = *(char **)(*(void *)a4 + 312);
        while (*(void *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            double v11 = *(char **)(*(void *)a4 + 320);
            break;
          }
        }
        unint64_t v12 = *(char **)(*(void *)a4 + 312);
        while (*(void *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            unint64_t v12 = *(char **)(*(void *)a4 + 320);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        long long v31 = a1[1];
        long long v32 = *a1;
        *(void *)long long v49 = *((void *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        long long v33 = *(long long *)((char *)a3 + 27);
        long long v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(long long *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        __n128 result = *(__n128 *)&v49[3];
        *(long long *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    long long v35 = *a1;
    *(_OWORD *)double v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    long long v36 = *(long long *)((char *)a2 + 27);
    long long v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(long long *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    __n128 result = *(__n128 *)&v48[11];
    *(long long *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    uint64_t v38 = *((void *)a3 + 3);
    uint64_t v39 = *((void *)a2 + 3);
    if (v38 != v39)
    {
      unint64_t v40 = *(char **)(*(void *)a4 + 312);
      uint64_t v41 = *(char **)(*(void *)a4 + 320);
      uint64_t v42 = v40;
      uint64_t v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(void *)v43 == v38) {
            goto LABEL_50;
          }
          v43 += 8;
        }
        while (v43 != v41);
        uint64_t v43 = *(char **)(*(void *)a4 + 320);
LABEL_50:
        while (*(void *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            uint64_t v42 = *(char **)(*(void *)a4 + 320);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        long long v31 = a2[1];
        long long v32 = *a2;
        *(void *)long long v49 = *((void *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        long long v44 = *(long long *)((char *)a3 + 27);
        long long v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(long long *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 - 24);
      uint64_t v9 = *(void *)(a1 + 24);
      if (v8 == v9) {
        return result;
      }
      uint64_t v10 = *(char **)(*(void *)a3 + 312);
      double v11 = *(char **)(*(void *)a3 + 320);
      unint64_t v12 = v10;
      uint64_t v13 = v10;
      if (v10 == v11) {
        goto LABEL_10;
      }
      do
      {
        if (*(void *)v13 == v8) {
          goto LABEL_7;
        }
        v13 += 8;
      }
      while (v13 != v11);
      uint64_t v13 = *(char **)(*(void *)a3 + 320);
      do
      {
LABEL_7:
        if (*(void *)v12 == v9) {
          goto LABEL_10;
        }
        v12 += 8;
      }
      while (v12 != v11);
      unint64_t v12 = *(char **)(*(void *)a3 + 320);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        uint64_t v14 = (long long *)(a2 - 48);
        long long v15 = *(_OWORD *)a1;
        *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        long long v16 = *(_OWORD *)(a2 - 21);
        long long v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *uint64_t v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(long long *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), a3);
      uint64_t v19 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      int v20 = 0;
      break;
  }
  while (1)
  {
    uint64_t v21 = *(void *)(v19 + 24);
    uint64_t v22 = *(void *)(v18 + 24);
    if (v21 != v22)
    {
      uint64_t v23 = *(char **)(*(void *)a3 + 312);
      uint64_t v24 = *(char **)(*(void *)a3 + 320);
      uint64_t v25 = v23;
      uint64_t v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(void *)v26 == v21) {
            goto LABEL_19;
          }
          v26 += 8;
        }
        while (v26 != v24);
        uint64_t v26 = *(char **)(*(void *)a3 + 320);
LABEL_19:
        while (*(void *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            uint64_t v25 = *(char **)(*(void *)a3 + 320);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        long long v34 = *(_OWORD *)v19;
        uint64_t v36 = *(void *)(v19 + 16);
        long long v37 = *(_OWORD *)(v19 + 32);
        uint64_t v27 = v19;
        while (1)
        {
          long long v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1) {
            break;
          }
          uint64_t v27 = v18;
          uint64_t v29 = *(void *)(v18 - 24);
          if (v21 != v29)
          {
            long long v30 = *(char **)(*(void *)a3 + 312);
            long long v31 = *(char **)(*(void *)a3 + 320);
            long long v32 = v30;
            long long v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(void *)v33 == v21) {
                  goto LABEL_30;
                }
                v33 += 8;
              }
              while (v33 != v31);
              long long v33 = *(char **)(*(void *)a3 + 320);
LABEL_30:
              while (*(void *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  long long v32 = *(char **)(*(void *)a3 + 320);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30) {
              continue;
            }
          }
          goto LABEL_36;
        }
        uint64_t v27 = a1;
LABEL_36:
        *(_OWORD *)uint64_t v27 = v34;
        *(void *)(v27 + 16) = v36;
        *(void *)(v27 + 24) = v21;
        *(void *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8) {
          return v19 + 48 == a2;
        }
      }
    }
    uint64_t v18 = v19;
    v19 += 48;
    if (v19 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)a2, (long long *)a3, a5).n128_u64[0];
  uint64_t v11 = *(void *)(a4 + 24);
  uint64_t v12 = *(void *)(a3 + 24);
  if (v11 != v12)
  {
    uint64_t v13 = *(char **)(*(void *)a5 + 312);
    uint64_t v14 = *(char **)(*(void *)a5 + 320);
    long long v15 = v13;
    long long v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(void *)v16 == v11) {
          goto LABEL_6;
        }
        v16 += 8;
      }
      while (v16 != v14);
      long long v16 = *(char **)(*(void *)a5 + 320);
LABEL_6:
      while (*(void *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          long long v15 = *(char **)(*(void *)a5 + 320);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      long long v17 = *(_OWORD *)a3;
      *(_OWORD *)uint64_t v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      long long v18 = *(_OWORD *)(a4 + 27);
      long long v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v38;
      __n128 result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      uint64_t v20 = *(void *)(a3 + 24);
      uint64_t v21 = *(void *)(a2 + 24);
      if (v20 != v21)
      {
        uint64_t v22 = *(char **)(*(void *)a5 + 312);
        uint64_t v23 = *(char **)(*(void *)a5 + 320);
        uint64_t v24 = v22;
        uint64_t v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(void *)v25 == v20) {
              goto LABEL_15;
            }
            v25 += 8;
          }
          while (v25 != v23);
          uint64_t v25 = *(char **)(*(void *)a5 + 320);
LABEL_15:
          while (*(void *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              uint64_t v24 = *(char **)(*(void *)a5 + 320);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          long long v26 = *(_OWORD *)a2;
          *(_OWORD *)uint64_t v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          long long v27 = *(_OWORD *)(a3 + 27);
          long long v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 16) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)v39;
          __n128 result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          uint64_t v29 = *(void *)(a2 + 24);
          uint64_t v30 = *(void *)(a1 + 24);
          if (v29 != v30)
          {
            long long v31 = *(char **)(*(void *)a5 + 312);
            long long v32 = *(char **)(*(void *)a5 + 320);
            long long v33 = v31;
            long long v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(void *)v34 == v29) {
                  goto LABEL_24;
                }
                v34 += 8;
              }
              while (v34 != v32);
              long long v34 = *(char **)(*(void *)a5 + 320);
LABEL_24:
              while (*(void *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  long long v33 = *(char **)(*(void *)a5 + 320);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              long long v35 = *(_OWORD *)a1;
              *(_OWORD *)unint64_t v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              long long v36 = *(_OWORD *)(a2 + 27);
              long long v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 16) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 16) = *(_OWORD *)v40;
              __n128 result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  uint64_t v13 = *(void *)(a5 + 24);
  uint64_t v14 = *(void *)(a4 + 24);
  if (v13 != v14)
  {
    long long v15 = *(char **)(*(void *)a6 + 312);
    long long v16 = *(char **)(*(void *)a6 + 320);
    long long v17 = v15;
    long long v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(void *)v18 == v13) {
          goto LABEL_6;
        }
        v18 += 8;
      }
      while (v18 != v16);
      long long v18 = *(char **)(*(void *)a6 + 320);
LABEL_6:
      while (*(void *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          long long v17 = *(char **)(*(void *)a6 + 320);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      long long v19 = *(_OWORD *)a4;
      *(_OWORD *)long long v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      long long v20 = *(_OWORD *)(a5 + 27);
      long long v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 16) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v49;
      __n128 result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      uint64_t v22 = *(void *)(a4 + 24);
      uint64_t v23 = *(void *)(a3 + 24);
      if (v22 != v23)
      {
        uint64_t v24 = *(char **)(*(void *)a6 + 312);
        uint64_t v25 = *(char **)(*(void *)a6 + 320);
        long long v26 = v24;
        long long v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(void *)v27 == v22) {
              goto LABEL_15;
            }
            v27 += 8;
          }
          while (v27 != v25);
          long long v27 = *(char **)(*(void *)a6 + 320);
LABEL_15:
          while (*(void *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              long long v26 = *(char **)(*(void *)a6 + 320);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          long long v28 = *(_OWORD *)a3;
          *(_OWORD *)long long v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          long long v29 = *(_OWORD *)(a4 + 27);
          long long v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 16) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 16) = *(_OWORD *)v50;
          __n128 result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          uint64_t v31 = *(void *)(a3 + 24);
          uint64_t v32 = *(void *)(a2 + 24);
          if (v31 != v32)
          {
            long long v33 = *(char **)(*(void *)a6 + 312);
            long long v34 = *(char **)(*(void *)a6 + 320);
            long long v35 = v33;
            long long v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(void *)v36 == v31) {
                  goto LABEL_24;
                }
                v36 += 8;
              }
              while (v36 != v34);
              long long v36 = *(char **)(*(void *)a6 + 320);
LABEL_24:
              while (*(void *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  long long v35 = *(char **)(*(void *)a6 + 320);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              long long v37 = *(_OWORD *)a2;
              *(_OWORD *)long long v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              long long v38 = *(_OWORD *)(a3 + 27);
              long long v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 16) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 16) = *(_OWORD *)v51;
              __n128 result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              uint64_t v40 = *(void *)(a2 + 24);
              uint64_t v41 = *(void *)(a1 + 24);
              if (v40 != v41)
              {
                uint64_t v42 = *(char **)(*(void *)a6 + 312);
                uint64_t v43 = *(char **)(*(void *)a6 + 320);
                long long v44 = v42;
                long long v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(void *)v45 == v40) {
                      goto LABEL_33;
                    }
                    v45 += 8;
                  }
                  while (v45 != v43);
                  long long v45 = *(char **)(*(void *)a6 + 320);
LABEL_33:
                  while (*(void *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      long long v44 = *(char **)(*(void *)a6 + 320);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  long long v46 = *(_OWORD *)a1;
                  *(_OWORD *)uint64_t v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  long long v47 = *(_OWORD *)(a2 + 27);
                  long long v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 16) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 16) = *(_OWORD *)v52;
                  __n128 result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  uint64_t v8 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v9 = [MEMORY[0x1E4F2B618] secondUnit];
  uint64_t v77 = a3;
  __n128 v10 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v80, a3);
  uint64_t v11 = *(void *)(a4 + 24);
  if (!v11) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t, void **, __n128))(*(void *)v11 + 48))(v11, v80, v10);
  uint64_t v13 = *(double **)(v12 + 8);
  double v14 = 0.0;
  while (v13 != *(double **)(v12 + 16))
  {
    double v16 = *v13;
    double v15 = v13[1];
    v13 += 2;
    double v14 = v14 + v15 - v16;
  }
  long long v17 = [v8 quantityWithUnit:v9 doubleValue:v14 + *(double *)(v12 + 32)];
  [v7 setDuration:v17];

  if (__p)
  {
    uint64_t v84 = __p;
    operator delete(__p);
  }
  if (v81[0])
  {
    v81[1] = v81[0];
    operator delete(v81[0]);
  }

  __n128 v18 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v80, a3);
  uint64_t v19 = *(void *)(a4 + 24);
  if (!v19) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  objc_msgSend(v7, "setDataCount:", *(void *)(*(uint64_t (**)(uint64_t, void **, __n128))(*(void *)v19 + 48))(v19, v80, v18));
  if (__p)
  {
    uint64_t v84 = __p;
    operator delete(__p);
  }
  if (v81[0])
  {
    v81[1] = v81[0];
    operator delete(v81[0]);
  }
  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    goto LABEL_119;
  }
  long long v73 = v7;
  id v76 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v75 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  *(_OWORD *)uint64_t v80 = 0u;
  *(_OWORD *)long long v81 = 0u;
  float v82 = 1.0;
  long long v20 = *(void **)(a3 + 248);
  long long v78 = (void *)(a3 + 256);
  if (v20 == (void *)(a3 + 256)) {
    goto LABEL_118;
  }
  do
  {
    long long v21 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a3, v20[4]);
    uint64_t v22 = v21;
    if (!v21) {
      goto LABEL_94;
    }
    unint64_t v23 = [v21 hash];
    unint64_t v24 = v23;
    unint64_t v25 = (unint64_t)v80[1];
    if (!v80[1]) {
      goto LABEL_35;
    }
    uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v80[1]);
    v26.i16[0] = vaddlv_u8(v26);
    unint64_t v27 = v26.u32[0];
    if (v26.u32[0] > 1uLL)
    {
      unint64_t v4 = v23;
      if ((void *)v23 >= v80[1]) {
        unint64_t v4 = v23 % (unint64_t)v80[1];
      }
    }
    else
    {
      unint64_t v4 = ((unint64_t)v80[1] - 1) & v23;
    }
    long long v28 = (char **)*((void *)v80[0] + v4);
    if (!v28 || (long long v29 = *v28) == 0)
    {
LABEL_35:
      long long v35 = (char *)operator new(0x98uLL);
      v85[0] = v35;
      v85[1] = v81;
      *(void *)long long v35 = 0;
      *((void *)v35 + 1) = v24;
      *((void *)v35 + 2) = v22;
      *(_OWORD *)(v35 + 24) = 0u;
      *(_OWORD *)(v35 + 40) = 0u;
      *(_OWORD *)(v35 + 56) = 0u;
      *(_OWORD *)(v35 + 72) = 0u;
      *(_OWORD *)(v35 + 88) = 0u;
      *(_OWORD *)(v35 + 104) = 0u;
      *(_OWORD *)(v35 + 120) = 0u;
      *(_OWORD *)(v35 + 136) = 0u;
      char v86 = 1;
      float v36 = (float)((unint64_t)v81[1] + 1);
      if (v25 && (float)(v82 * (float)v25) >= v36)
      {
LABEL_81:
        uint64_t v52 = (char **)*((void *)v80[0] + v4);
        long long v29 = (char *)v85[0];
        if (v52)
        {
          *(void *)v85[0] = *v52;
        }
        else
        {
          *(void *)v85[0] = v81[0];
          v81[0] = v29;
          *((void *)v80[0] + v4) = v81;
          if (!*(void *)v29)
          {
LABEL_90:
            v85[0] = 0;
            ++v81[1];
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v85);
            goto LABEL_91;
          }
          unint64_t v53 = *(void *)(*(void *)v29 + 8);
          if ((v25 & (v25 - 1)) != 0)
          {
            if (v53 >= v25) {
              v53 %= v25;
            }
          }
          else
          {
            v53 &= v25 - 1;
          }
          uint64_t v52 = (char **)((char *)v80[0] + 8 * v53);
        }
        *uint64_t v52 = v29;
        goto LABEL_90;
      }
      BOOL v37 = (v25 & (v25 - 1)) != 0;
      if (v25 < 3) {
        BOOL v37 = 1;
      }
      unint64_t v38 = v37 | (2 * v25);
      unint64_t v39 = vcvtps_u32_f32(v36 / v82);
      if (v38 <= v39) {
        int8x8_t prime = (int8x8_t)v39;
      }
      else {
        int8x8_t prime = (int8x8_t)v38;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v25 = (unint64_t)v80[1];
      if ((void *)*(void *)&prime > v80[1]) {
        goto LABEL_47;
      }
      if ((void *)*(void *)&prime < v80[1])
      {
        unint64_t v47 = vcvtps_u32_f32((float)(unint64_t)v81[1] / v82);
        if (v80[1] < (void *)3
          || (uint8x8_t v48 = (uint8x8_t)vcnt_s8((int8x8_t)v80[1]), v48.i16[0] = vaddlv_u8(v48), v48.u32[0] > 1uLL))
        {
          unint64_t v47 = std::__next_prime(v47);
        }
        else
        {
          uint64_t v49 = 1 << -(char)__clz(v47 - 1);
          if (v47 >= 2) {
            unint64_t v47 = v49;
          }
        }
        if (*(void *)&prime <= v47) {
          int8x8_t prime = (int8x8_t)v47;
        }
        if (*(void *)&prime >= v25)
        {
          unint64_t v25 = (unint64_t)v80[1];
        }
        else
        {
          if (prime)
          {
LABEL_47:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v41 = operator new(8 * *(void *)&prime);
            uint64_t v42 = v80[0];
            v80[0] = v41;
            if (v42) {
              operator delete(v42);
            }
            uint64_t v43 = 0;
            v80[1] = (void *)prime;
            do
              *((void *)v80[0] + v43++) = 0;
            while (*(void *)&prime != v43);
            long long v44 = (void **)v81[0];
            if (v81[0])
            {
              unint64_t v45 = *((void *)v81[0] + 1);
              uint8x8_t v46 = (uint8x8_t)vcnt_s8(prime);
              v46.i16[0] = vaddlv_u8(v46);
              if (v46.u32[0] > 1uLL)
              {
                if (v45 >= *(void *)&prime) {
                  v45 %= *(void *)&prime;
                }
              }
              else
              {
                v45 &= *(void *)&prime - 1;
              }
              *((void *)v80[0] + v45) = v81;
              for (i = *v44; i; unint64_t v45 = v51)
              {
                unint64_t v51 = i[1];
                if (v46.u32[0] > 1uLL)
                {
                  if (v51 >= *(void *)&prime) {
                    v51 %= *(void *)&prime;
                  }
                }
                else
                {
                  v51 &= *(void *)&prime - 1;
                }
                if (v51 != v45)
                {
                  if (!*((void *)v80[0] + v51))
                  {
                    *((void *)v80[0] + v51) = v44;
                    goto LABEL_72;
                  }
                  char *v44 = (void *)*i;
                  void *i = **((void **)v80[0] + v51);
                  **((void **)v80[0] + v51) = i;
                  uint64_t i = v44;
                }
                unint64_t v51 = v45;
LABEL_72:
                long long v44 = (void **)i;
                uint64_t i = (void *)*i;
              }
            }
            unint64_t v25 = (unint64_t)prime;
            goto LABEL_76;
          }
          id v59 = v80[0];
          v80[0] = 0;
          if (v59) {
            operator delete(v59);
          }
          unint64_t v25 = 0;
          v80[1] = 0;
        }
      }
LABEL_76:
      if ((v25 & (v25 - 1)) != 0)
      {
        if (v24 >= v25) {
          unint64_t v4 = v24 % v25;
        }
        else {
          unint64_t v4 = v24;
        }
      }
      else
      {
        unint64_t v4 = (v25 - 1) & v24;
      }
      goto LABEL_81;
    }
    unint64_t v74 = (unint64_t)v80[1] - 1;
    while (1)
    {
      unint64_t v30 = *((void *)v29 + 1);
      if (v30 == v24) {
        break;
      }
      if (v27 > 1)
      {
        if (v30 >= v25) {
          v30 %= v25;
        }
      }
      else
      {
        v30 &= v74;
      }
      if (v30 != v4) {
        goto LABEL_35;
      }
LABEL_34:
      long long v29 = *(char **)v29;
      if (!v29) {
        goto LABEL_35;
      }
    }
    id v31 = *((id *)v29 + 2);
    id v32 = v22;
    long long v33 = v32;
    if (v31 != v32)
    {
      char v34 = [v31 isEqualToString:v32];

      if (v34) {
        goto LABEL_91;
      }
      goto LABEL_34;
    }

LABEL_91:
    *((_DWORD *)v29 + 6) = *((_DWORD *)v20 + 10);
    *((void *)v29 + 4) = v20[6];
    if (v29 + 16 != (char *)(v20 + 4))
    {
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v29 + 40, (char *)v20[7], v20[8], (uint64_t)(v20[8] - v20[7]) >> 4);
      *((void *)v29 + 8) = v20[10];
      *((void *)v29 + 9) = v20[11];
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v29 + 80, (char *)v20[12], v20[13], (uint64_t)(v20[13] - v20[12]) >> 4);
    }
    *((void *)v29 + 13) = v20[15];
    long long v54 = *((_OWORD *)v20 + 8);
    long long v55 = *((_OWORD *)v20 + 9);
    *((_WORD *)v29 + 72) = *((_WORD *)v20 + 80);
    *((_OWORD *)v29 + 7) = v54;
    *((_OWORD *)v29 + 8) = v55;

    a3 = v77;
LABEL_94:
    int v56 = (void *)v20[1];
    if (v56)
    {
      do
      {
        int v57 = v56;
        int v56 = (void *)*v56;
      }
      while (v56);
    }
    else
    {
      do
      {
        int v57 = (void *)v20[2];
        BOOL v58 = *v57 == (void)v20;
        long long v20 = v57;
      }
      while (!v58);
    }
    long long v20 = v57;
  }
  while (v57 != v78);
  unint64_t v60 = (id *)v81[0];
  if (v81[0])
  {
    do
    {
      id v61 = v60[2];
      long long v62 = (void *)MEMORY[0x1E4F2B370];
      __n128 v63 = [MEMORY[0x1E4F2B618] secondUnit];
      uint64_t v64 = *(void *)(a4 + 24);
      if (!v64) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v65 = (*(uint64_t (**)(uint64_t, id *))(*(void *)v64 + 48))(v64, v60 + 3);
      BOOL v66 = *(double **)(v65 + 8);
      double v67 = 0.0;
      while (v66 != *(double **)(v65 + 16))
      {
        double v69 = *v66;
        double v68 = v66[1];
        v66 += 2;
        double v67 = v67 + v68 - v69;
      }
      uint64_t v70 = [v62 quantityWithUnit:v63 doubleValue:v67 + *(double *)(v65 + 32)];
      [v76 setObject:v70 forKeyedSubscript:v61];

      uint64_t v71 = *(void *)(a4 + 24);
      if (!v71) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v72 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)(*(uint64_t (**)(uint64_t, id *))(*(void *)v71 + 48))(v71, v60 + 3));
      [v75 setObject:v72 forKeyedSubscript:v61];

      unint64_t v60 = (id *)*v60;
    }
    while (v60);
  }
LABEL_118:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>>::~__hash_table((uint64_t)v80);
  id v7 = v73;
  [v73 setDurationBySource:v76];
  [v73 setDataCountBySource:v75];

LABEL_119:
}

void sub_1BD0C82C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

__n128 HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::overallStatistics(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 120);
  *(void *)(a1 + 16) = 0;
  uint64_t v5 = *(void *)(a2 + 128);
  unint64_t v4 = *(const void **)(a2 + 136);
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 16), v4, *(void *)(a2 + 144), (uint64_t)(*(void *)(a2 + 144) - (void)v4) >> 4);
  uint64_t v6 = *(void *)(a2 + 160);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = v6;
  id v7 = *(const void **)(a2 + 176);
  *(void *)(a1 + 48) = *(void *)(a2 + 168);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 56), v7, *(void *)(a2 + 184), (uint64_t)(*(void *)(a2 + 184) - (void)v7) >> 4);
  *(void *)(a1 + 80) = *(void *)(a2 + 200);
  __n128 result = *(__n128 *)(a2 + 208);
  long long v9 = *(_OWORD *)(a2 + 224);
  *(__n128 *)(a1 + 88) = result;
  *(_OWORD *)(a1 + 104) = v9;
  *(void *)(a1 + 120) = *(void *)(a2 + 240);
  return result;
}

void sub_1BD0C8464(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsCombined>>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsCombined>>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
  id v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  unint64_t v4 = *(void **)a1;
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      id v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsCombined>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1723EF0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1723EF0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C187B8A0);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_1F1723EF0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BD0C8720(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1723EF0;
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48))(v1) + 40;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1723F80;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1723F80;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C187B8A0);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_1F1723F80;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BD0C89B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1723F80;
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::~__func()
{
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F1724000;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1724000;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 608))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a4, 3, @"Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date");
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
  }
  double v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(void *)(a1 + 40) && a3) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_advanceToTime(a1, v8);
    }
    HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    long long v9 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    uint64_t v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v9, a4);
  }
  return v10;
}

void sub_1BD0C8D44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_earliestStartTimeWithoutInvalidation(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    if (!*(unsigned char *)(a1 + 608))
    {
      double v1 = *(double *)(a1 + 176);
      double result = *(double *)(a1 + 120);
      if (v1 <= result)
      {
        double v1 = -1.79769313e308;
      }
      else if (*(unsigned char *)(a1 + 144))
      {
        double v1 = -1.79769313e308;
      }
      if (v1 >= result) {
        return v1;
      }
      return result;
    }
    return -1.79769313e308;
  }
  double result = *(double *)(a1 + 176);
  if (result <= *(double *)(a1 + 120)) {
    return -1.79769313e308;
  }
  if (*(unsigned char *)(a1 + 144)) {
    return -1.79769313e308;
  }
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_advanceToTime(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 128) <= a2)
  {
    uint64_t v4 = a1 + 112;
    uint64_t v5 = a1 + 120;
    do
    {
      uint64_t v6 = *(void *)(a1 + 584);
      uint64_t v7 = *(void *)(a1 + 576);
      if (v6 == v7)
      {
        uint64_t v22 = 0;
        double v15 = *(void **)(a1 + 40);
        double v16 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a2];
        double v8 = [v15 dateIntervalContainingDate:v16 index:&v22];

        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        long long v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v17 = v22;
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v19 = v18;
        long long v20 = [v8 endDate];
        [v20 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::resetToBucket(v4, v17, v19, v21);
      }
      else
      {
        double v8 = [*(id *)(a1 + 40) dateIntervalAtIndex:*(void *)(a1 + 112) + 1];
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        long long v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v12 = v11;
        uint64_t v13 = [v8 endDate];
        [v13 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::advanceBucket(v4, v12, v14);
      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_didChangeBucket(a1, v9);
      if (v6 != v7) {
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
      }
    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1BD0C8FD0(_Unwind_Exception *exception_object)
{
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a1 + 8;
  double v6 = *(double *)a2;
  double v7 = *(double *)(a2 + 8);
  double v8 = *(double *)(a2 + 16);
  long long v9 = *(uint64_t **)(a2 + 24);
  unsigned __int8 v10 = *(unsigned char *)(a2 + 32);
  char v11 = *(unsigned char *)(a2 + 33);
  double v12 = *(double *)(a1 + 8) - v7;
  int v13 = v10;
  unint64_t v14 = (unint64_t)v9;
  char v15 = v11;
  double v16 = v8;
  double v17 = v7;
  double v18 = *(double *)a2;
  if (v12 >= 0.01)
  {
    if (v8 - v7 - v12 >= 0.01)
    {
      int v13 = *(unsigned __int8 *)(a2 + 32);
      double v18 = v6 - v6 * (v12 / (v8 - v7));
      unint64_t v14 = *(void *)(a2 + 24);
      char v15 = *(unsigned char *)(a2 + 33);
      double v16 = *(double *)(a2 + 16);
      double v17 = *(double *)(a1 + 8);
    }
    else
    {
      int v13 = 0;
      unint64_t v14 = 0;
      char v15 = 0;
      double v16 = 0.0;
      double v17 = 0.0;
      double v18 = 0.0;
    }
  }
  double v19 = *(double *)(a1 + 16);
  double v20 = v19 - v17;
  double v21 = v16 - v17;
  double v22 = v16 - v17 - (v19 - v17);
  if (!*(_DWORD *)(a1 + 36))
  {
    if (v22 < 0.01) {
      goto LABEL_10;
    }
    if (v20 >= 0.01) {
      goto LABEL_24;
    }
LABEL_22:
    int v23 = v13;
    unint64_t v31 = v14;
    double v25 = v16;
    double v19 = v17;
    double v24 = v18;
    if (!v23) {
      return;
    }
    goto LABEL_60;
  }
  if (v20 < 0.01) {
    goto LABEL_22;
  }
  if (v22 >= 0.01)
  {
LABEL_24:
    double v25 = v16;
    unint64_t v69 = v14;
    double v24 = v18 - v18 * (v20 / v21);
    int v23 = v13;
    char v70 = v15;
    double v16 = *(double *)(a1 + 16);
    double v18 = v18 * (v20 / v21);
    if (!v13)
    {
LABEL_25:
      char v15 = v70;
      unint64_t v31 = v69;
      if (!v23) {
        return;
      }
      goto LABEL_60;
    }
    goto LABEL_11;
  }
LABEL_10:
  unint64_t v69 = 0;
  int v23 = 0;
  char v70 = 0;
  double v24 = 0.0;
  double v19 = 0.0;
  double v25 = 0.0;
  if (!v13) {
    goto LABEL_25;
  }
LABEL_11:
  double v67 = v17;
  double v68 = v16;
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 280, v14, v14);
  unint64_t v26 = *(void *)(a1 + 112);
  if (v26 == *(void *)(a1 + 104) && *(uint64_t *)(a1 + 136) <= 0)
  {
    v32.f64[1] = *(float64_t *)(a1 + 16);
    double v28 = v67;
    double v27 = v68;
    v32.f64[0] = v67;
    v33.f64[0] = *(float64_t *)(a1 + 8);
    v33.f64[1] = v68;
    int8x16_t v34 = (int8x16_t)vcgtq_f64(v33, v32);
    v33.f64[0] = v67;
    *(int8x16_t *)(a1 + 48) = vbslq_s8(v34, *(int8x16_t *)(a1 + 8), (int8x16_t)v33);
  }
  else
  {
    double v28 = v67;
    double v27 = v68;
    if (v67 < *(double *)(a1 + 48))
    {
      double v29 = *(double *)(a1 + 8);
      if (v67 >= v29) {
        double v29 = v67;
      }
      *(double *)(a1 + 48) = v29;
    }
    if (v68 > *(double *)(a1 + 56))
    {
      double v30 = *(double *)(a1 + 16);
      if (v30 >= v68) {
        double v30 = v68;
      }
      *(double *)(a1 + 56) = v30;
    }
  }
  if (*(unsigned char *)(a1 + 32))
  {
    double v35 = *(double *)(a1 + 64);
    if (v28 < v35) {
      double v35 = v28;
    }
    *(double *)(a1 + 64) = v35;
  }
  if (a3 && v28 < *(double *)(a1 + 16))
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeThroughTime(v5, v28);
    double v28 = v67;
    double v27 = v68;
    unint64_t v26 = *(void *)(a1 + 112);
  }
  unint64_t v36 = *(void *)(a1 + 120);
  if (v26 >= v36)
  {
    uint64_t v38 = *(void *)(a1 + 104);
    unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - v38) >> 4);
    unint64_t v40 = v39 + 1;
    if (v39 + 1 > 0x555555555555555) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - v38) >> 4);
    if (2 * v41 > v40) {
      unint64_t v40 = 2 * v41;
    }
    if (v41 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v42 = 0x555555555555555;
    }
    else {
      unint64_t v42 = v40;
    }
    if (v42)
    {
      unint64_t v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v42);
      double v28 = v67;
      double v27 = v68;
    }
    else
    {
      uint64_t v43 = 0;
    }
    unint64_t v44 = v42 + 48 * v39;
    unint64_t v45 = v42 + 48 * v43;
    *(double *)unint64_t v44 = v18;
    *(double *)(v44 + 8) = v28;
    *(double *)(v44 + 16) = v27;
    *(void *)(v44 + 24) = v14;
    *(unsigned char *)(v44 + 32) = v13;
    *(unsigned char *)(v44 + 33) = v15;
    *(_WORD *)(v44 + 40) = 0;
    *(unsigned char *)(v44 + 42) = 0;
    unint64_t v37 = v44 + 48;
    unint64_t v47 = *(char **)(a1 + 104);
    uint8x8_t v46 = *(char **)(a1 + 112);
    if (v46 == v47)
    {
      char v15 = v70;
      unint64_t v31 = v69;
    }
    else
    {
      char v15 = v70;
      unint64_t v31 = v69;
      do
      {
        long long v48 = *((_OWORD *)v46 - 3);
        long long v49 = *((_OWORD *)v46 - 2);
        *(_OWORD *)(v44 - 21) = *(_OWORD *)(v46 - 21);
        *(_OWORD *)(v44 - 48) = v48;
        *(_OWORD *)(v44 - 32) = v49;
        v44 -= 48;
        v46 -= 48;
      }
      while (v46 != v47);
      uint8x8_t v46 = *(char **)(a1 + 104);
    }
    *(void *)(a1 + 104) = v44;
    *(void *)(a1 + 112) = v37;
    *(void *)(a1 + 120) = v45;
    if (v46) {
      operator delete(v46);
    }
  }
  else
  {
    *(double *)unint64_t v26 = v18;
    *(double *)(v26 + 8) = v28;
    *(double *)(v26 + 16) = v27;
    *(void *)(v26 + 24) = v14;
    *(unsigned char *)(v26 + 32) = v13;
    *(unsigned char *)(v26 + 33) = v15;
    *(_WORD *)(v26 + 40) = 0;
    unint64_t v37 = v26 + 48;
    *(unsigned char *)(v26 + 42) = 0;
    char v15 = v70;
    unint64_t v31 = v69;
  }
  *(void *)(a1 + 112) = v37;
  if (!*(unsigned char *)(a1 + 248) || *(double *)(a1 + 224) <= v7)
  {
    *(double *)(a1 + 216) = v6;
    *(double *)(a1 + 224) = v7;
    *(double *)(a1 + 232) = v8;
    *(void *)(a1 + 240) = v9;
    *(unsigned char *)(a1 + 248) = v10;
    *(unsigned char *)(a1 + 249) = v11;
  }
  if (*(unsigned char *)(a1 + 33)
    && ((unint64_t v50 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(v5, v14), v51 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_statisticsForSource(v5, v50), !*((unsigned char *)v51 + 120))|| *((double *)v51 + 12) <= v7))
  {
    *((double *)v51 + 11) = v6;
    *((double *)v51 + 12) = v7;
    *((double *)v51 + 13) = v8;
    v51[14] = v9;
    *((unsigned char *)v51 + 120) = v10;
    *((unsigned char *)v51 + 121) = v11;
    if (!v23) {
      return;
    }
  }
  else if (!v23)
  {
    return;
  }
LABEL_60:
  unint64_t v52 = *(void *)(a1 + 472);
  unint64_t v53 = *(void *)(a1 + 480);
  if (v52 >= v53)
  {
    uint64_t v55 = *(void *)(a1 + 464);
    unint64_t v56 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v52 - v55) >> 3);
    unint64_t v57 = v56 + 1;
    if (v56 + 1 > 0x666666666666666) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v58 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v53 - v55) >> 3);
    if (2 * v58 > v57) {
      unint64_t v57 = 2 * v58;
    }
    if (v58 >= 0x333333333333333) {
      unint64_t v59 = 0x666666666666666;
    }
    else {
      unint64_t v59 = v57;
    }
    if (v59) {
      unint64_t v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v59);
    }
    else {
      uint64_t v60 = 0;
    }
    unint64_t v61 = v59 + 40 * v56;
    unint64_t v62 = v59 + 40 * v60;
    *(double *)unint64_t v61 = v24;
    *(double *)(v61 + 8) = v19;
    *(double *)(v61 + 16) = v25;
    *(void *)(v61 + 24) = v31;
    *(unsigned char *)(v61 + 32) = v23;
    *(unsigned char *)(v61 + 33) = v15;
    unint64_t v54 = v61 + 40;
    uint64_t v64 = *(char **)(a1 + 464);
    __n128 v63 = *(char **)(a1 + 472);
    if (v63 != v64)
    {
      do
      {
        long long v65 = *(_OWORD *)(v63 - 40);
        long long v66 = *(_OWORD *)(v63 - 24);
        *(_WORD *)(v61 - 8) = *((_WORD *)v63 - 4);
        *(_OWORD *)(v61 - 24) = v66;
        *(_OWORD *)(v61 - 40) = v65;
        v61 -= 40;
        v63 -= 40;
      }
      while (v63 != v64);
      __n128 v63 = *(char **)(a1 + 464);
    }
    *(void *)(a1 + 464) = v61;
    *(void *)(a1 + 472) = v54;
    *(void *)(a1 + 480) = v62;
    if (v63) {
      operator delete(v63);
    }
  }
  else
  {
    *(double *)unint64_t v52 = v24;
    *(double *)(v52 + 8) = v19;
    *(double *)(v52 + 16) = v25;
    *(void *)(v52 + 24) = v31;
    *(unsigned char *)(v52 + 32) = v23;
    unint64_t v54 = v52 + 40;
    *(unsigned char *)(v52 + 33) = v15;
  }
  *(void *)(a1 + 472) = v54;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 610))
  {
    *(unsigned char *)(a1 + 612) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 612) = 0;
    uint64_t v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      uint64_t v4 = v2;
      uint64_t v3 = (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      if (v3) {
        v4[2](v4, v3);
      }

      uint64_t v2 = v4;
    }
  }
}

void sub_1BD0C9610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  long long v9 = 0;
  unsigned __int8 v10 = 0;
  uint64_t v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 464), *(void *)(a1 + 472), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 472) - *(void *)(a1 + 464)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::resetToBucket(a1, *(void *)a1 + 1, a2, a3);
  double v6 = v9;
  double v7 = v10;
  if (v9 != v10)
  {
    uint64_t v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BD0C970C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8 = (id *)(a1 + 40);
  objc_storeStrong((id *)(a1 + 488), *(id *)(a1 + 40));
  long long v9 = *(void **)(a1 + 144);
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  if (v9)
  {
    *(void *)(a1 + 152) = v9;
    operator delete(v9);
  }
  unsigned __int8 v10 = *(void **)(a1 + 184);
  *(void *)(a1 + 176) = 0;
  long long v11 = 0uLL;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  if (v10)
  {
    *(void *)(a1 + 192) = v10;
    operator delete(v10);
    long long v11 = 0uLL;
  }
  *(_WORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 216) = v11;
  *(_OWORD *)(a1 + 232) = v11;
  *(_OWORD *)(a1 + 184) = v11;
  *(_OWORD *)(a1 + 200) = v11;
  if (*(void *)(a1 + 272))
  {
    double v12 = *(void **)(a1 + 256);
    uint64_t v13 = *(void *)(a1 + 264);
    *(void *)(a1 + 256) = a1 + 264;
    *(void *)(v13 + 16) = 0;
    *(void *)(a1 + 264) = 0;
    *(void *)(a1 + 272) = 0;
    if (v12[1]) {
      unint64_t v14 = (void *)v12[1];
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      char v15 = (void *)v14[2];
      if (v15)
      {
        double v16 = (void *)*v15;
        if ((void *)*v15 == v14)
        {
          *char v15 = 0;
          while (1)
          {
            double v18 = (void *)v15[1];
            if (!v18) {
              break;
            }
            do
            {
              char v15 = v18;
              double v18 = (void *)*v18;
            }
            while (v18);
          }
        }
        else
        {
          for (v15[1] = 0; v16; double v16 = (void *)v15[1])
          {
            do
            {
              char v15 = v16;
              double v16 = (void *)*v16;
            }
            while (v16);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>>::destroy(v14);
        for (uint64_t i = (void *)v15[2]; i; uint64_t i = (void *)i[2])
          char v15 = i;
        unint64_t v14 = v15;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>>::destroy(v14);
  }
  objc_storeStrong(v8, *(id *)(a1 + 488));
  *(void *)(a1 + 472) = *(void *)(a1 + 464);
  *(void *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 612))
  {
    if (v3)
    {
      id v6 = v3;
      uint64_t v4 = _Block_copy(*(const void **)(a1 + 96));
      uint64_t v5 = v4;
      if (v4) {
        (*((void (**)(void *, id))v4 + 2))(v4, v6);
      }

      id v3 = v6;
    }
    *(unsigned char *)(a1 + 612) = 0;
  }
}

void sub_1BD0C9900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_currentBucketInterval(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 608))
  {
    double v1 = 0;
  }
  else
  {
    double v1 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", *(double *)(a1 + 120), *(double *)(a1 + 128));
  }

  return v1;
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS2_EEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 startDate];
  id v6 = [v4 startDate];
  uint64_t v7 = [v5 compare:v6];

  return v7;
}

void sub_1BD0C99D4(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 13);
  if (WeakRetained)
  {
    if (v5
      && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_currentBucketInterval((uint64_t)a1),
          (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v8 = [v5 endDate];
      long long v9 = [v7 startDate];
      if (objc_msgSend(v8, "hk_isAfterDate:", v9))
      {
        unsigned __int8 v10 = [v5 startDate];
        long long v11 = [v7 endDate];
        char v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);
      }
      else
      {
        char v12 = 0;
      }

      uint64_t v13 = _Block_copy(a1[12]);
      if ((v12 & 1) == 0) {
        operator new();
      }
    }
    else
    {
      uint64_t v13 = _Block_copy(a1[12]);
    }
    *((unsigned char *)a1 + 608) = 1;
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS2_EEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
    v27[3] = &unk_1E6308FF8;
    id v15 = v5;
    id v28 = v15;
    id v16 = v13;
    id v29 = v16;
    (*((void (**)(id *, void *))*a1 + 9))(a1, v27);
    if (v5)
    {
      double v17 = [v15 startDate];
      [v17 timeIntervalSinceReferenceDate];
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_configureForStartTime((uint64_t)a1);
    }
    else
    {
      (*((void (**)(id *))*a1 + 4))(a1);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS2_EEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
    v21[3] = &unk_1E6309060;
    double v24 = a1;
    id v5 = v15;
    char v26 = 1;
    id v22 = v5;
    double v25 = a1;
    id v23 = WeakRetained;
    uint64_t v14 = (*((uint64_t (**)(id *, void *, uint64_t))*a1 + 14))(a1, v21, a3);
    double v18 = _Block_copy(v16);
    id v19 = a1[12];
    a1[12] = v18;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to invalidate interval: no data source available.");
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1BD0C9E24(_Unwind_Exception *a1)
{
  MEMORY[0x1C187B8A0](v4, 0x10F1C4035A84447);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS2_EEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_11;
  }
  id v3 = [v10 endDate];
  uint64_t v4 = [*(id *)(a1 + 32) startDate];
  char v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    id v6 = [v10 startDate];
    uint64_t v7 = [*(id *)(a1 + 32) endDate];
    char v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_11:
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9) {
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
      }
    }
  }
}

void sub_1BD0CA008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS2_EEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = [*(id *)(a1 + 32) startDate];
  [v5 timeIntervalSinceReferenceDate];
  uint64_t v7 = v6;

  char v8 = [*(id *)(a1 + 32) endDate];
  [v8 timeIntervalSinceReferenceDate];
  uint64_t v10 = v9;

  long long v11 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  uint64_t v13 = *(void *)(a1 + 32);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS2_EEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  char v32 = *(unsigned char *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  uint64_t v31 = *(void *)(a1 + 56);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS2_EEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  uint64_t v14 = [v11 collectionCalculator:WeakRetained queryForInterval:v13 error:a2 sampleHandler:v30 mergeHandler:v29];

  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15 != v4)
    {
      id v16 = [*(id *)(a1 + 32) endDate];
      [v16 timeIntervalSinceReferenceDate];
      if (*(void *)(v15 + 40))
      {
        double v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          id v19 = [*(id *)(v15 + 40) dateIntervalAtIndex:*(void *)(v15 + 112) + 1];
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          double v20 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(v15, v15 + 120);
          double v21 = [v19 startDate];
          [v21 timeIntervalSinceReferenceDate];
          double v23 = v22;
          double v24 = [v19 endDate];
          [v24 timeIntervalSinceReferenceDate];
          HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            char v26 = _Block_copy(*(const void **)(v15 + 96));
            double v27 = v26;
            if (v26) {
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);
            }
          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_didChangeBucket(v15, 0);
        }
      }
    }
  }
  return v14;
}

void sub_1BD0CA2B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS2_EEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7 = *(double *)(a1 + 32) - a6;
  if (v7 >= 0.01)
  {
    double v9 = a7 - a6;
    if (v9 - v7 >= 0.01)
    {
      a5 = a5 - v7 / v9 * a5;
      int v8 = 1;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      int v8 = 0;
      a5 = 0.0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    int v8 = 1;
  }
  *(double *)uint64_t v13 = a5;
  *(double *)&v13[1] = a6;
  double v14 = a7;
  uint64_t v15 = a2;
  char v16 = v8;
  char v17 = 0;
  if (*(unsigned char *)(a1 + 56))
  {
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)v13, a3, a4);
    }
  }
  else
  {
    double v11 = *(double *)(a1 + 40) - a6;
    if (v11 >= 0.01)
    {
      double v12 = a7 - a6;
      if (v12 - v11 >= 0.01)
      {
        a5 = a5 * (v11 / v12);
        a7 = *(double *)(a1 + 40);
      }
    }
    else
    {
      int v8 = 0;
    }
    *(double *)uint64_t v13 = a5;
    double v14 = a7;
    char v16 = v8;
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)v13, a3, a4);
    }
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS2_EEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 608)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
  }
  if (*(void *)(a1 + 40)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_advanceToTime(a1, a2);
  }
  if (*(double *)(a1 + 128) > a2)
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeThroughTime(a1 + 120, a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 32) < *(double *)(v10 + 8))
                {
                  uint64_t v129 = *(void *)(v10 + 32);
                  long long v113 = *(_OWORD *)v10;
                  long long v121 = *(_OWORD *)(v10 + 16);
                  long long v52 = *(_OWORD *)(a2 - 40);
                  long long v53 = *(_OWORD *)(a2 - 24);
                  *(_WORD *)(v10 + 32) = *(_WORD *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(_WORD *)(a2 - 8) = v129;
                  *(_OWORD *)(a2 - 24) = v121;
                  *(_OWORD *)(a2 - 40) = v113;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v10, (double *)(v10 + 40), (double *)(a2 - 40));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, v10 + 120, a2 - 40);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            unint64_t v54 = (void *)(v10 + 40);
            BOOL v56 = v10 == a2 || v54 == (void *)a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  unint64_t v59 = v54;
                  double v60 = *(double *)(v58 + 48);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *v54;
                    long long v114 = *(_OWORD *)(v58 + 56);
                    uint64_t v122 = *(void *)(v58 + 72);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      uint64_t v63 = v10 + v62;
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      *(_OWORD *)(v63 + 40) = *(_OWORD *)(v10 + v62);
                      *(_OWORD *)(v63 + 56) = v64;
                      *(_WORD *)(v63 + 72) = *(_WORD *)(v10 + v62 + 32);
                      if (!v62) {
                        break;
                      }
                      v62 -= 40;
                      if (v60 >= *(double *)(v63 - 32))
                      {
                        uint64_t v65 = v10 + v62 + 40;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = v114;
                    *(_WORD *)(v65 + 32) = v122;
                  }
                  unint64_t v54 = v59 + 5;
                  v57 += 40;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 5 != (void *)a2);
              }
            }
            else if (!v56)
            {
              do
              {
                int v98 = v54;
                double v99 = *(double *)(a1 + 48);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *v54;
                  long long v117 = *(_OWORD *)(a1 + 56);
                  uint64_t v125 = *(void *)(a1 + 72);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(_OWORD *)(v101 - 3);
                    *(_OWORD *)long long v101 = *(_OWORD *)(v101 - 5);
                    *((_OWORD *)v101 + 1) = v102;
                    *((_WORD *)v101 + 16) = *((_WORD *)v101 - 4);
                    double v103 = *((double *)v101 - 9);
                    v101 -= 5;
                  }
                  while (v99 < v103);
                  *long long v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *((_WORD *)v101 + 16) = v125;
                  *((_OWORD *)v101 + 1) = v117;
                }
                v54 += 5;
                a1 = (unint64_t)v98;
              }
              while (v98 + 5 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 40 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v10 + 40 * v69 + 8) < *(double *)(v70 + 48))
                  {
                    v70 += 40;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  double v71 = *(double *)(v10 + 40 * v68 + 8);
                  if (*(double *)(v70 + 8) >= v71)
                  {
                    unint64_t v72 = v10 + 40 * v68;
                    uint64_t v73 = *(void *)v72;
                    uint64_t v123 = *(void *)(v72 + 32);
                    long long v115 = *(_OWORD *)(v72 + 16);
                    do
                    {
                      unint64_t v74 = v72;
                      unint64_t v72 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_WORD *)(v74 + 32) = *(_WORD *)(v70 + 32);
                      *(_OWORD *)unint64_t v74 = v75;
                      *(_OWORD *)(v74 + 16) = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 40 * v77;
                      uint64_t v78 = 2 * v69 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v10 + 40 * v77 + 8) < *(double *)(v70 + 48))
                      {
                        v70 += 40;
                        uint64_t v77 = v78;
                      }
                      uint64_t v69 = v77;
                    }
                    while (*(double *)(v70 + 8) >= v71);
                    *(void *)unint64_t v72 = v73;
                    *(double *)(v72 + 8) = v71;
                    *(_OWORD *)(v72 + 16) = v115;
                    *(_WORD *)(v72 + 32) = v123;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x28uLL;
              do
              {
                uint64_t v80 = 0;
                uint64_t v130 = *(void *)(v10 + 32);
                long long v116 = *(_OWORD *)v10;
                long long v124 = *(_OWORD *)(v10 + 16);
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = v81;
                  uint64_t v83 = v80 + 1;
                  v81 += 40 * (v80 + 1);
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v85 = v84 + 2;
                  if (v85 < v79 && *(double *)(v82 + 40 * v83 + 8) < *(double *)(v81 + 48))
                  {
                    v81 += 40;
                    uint64_t v80 = v85;
                  }
                  long long v86 = *(_OWORD *)v81;
                  long long v87 = *(_OWORD *)(v81 + 16);
                  *(_WORD *)(v82 + 32) = *(_WORD *)(v81 + 32);
                  *(_OWORD *)unint64_t v82 = v86;
                  *(_OWORD *)(v82 + 16) = v87;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 40;
                if (v81 == a2)
                {
                  *(_WORD *)(v81 + 32) = v130;
                  *(_OWORD *)unint64_t v81 = v116;
                  *(_OWORD *)(v81 + 16) = v124;
                }
                else
                {
                  long long v88 = *(_OWORD *)a2;
                  long long v89 = *(_OWORD *)(a2 + 16);
                  *(_WORD *)(v81 + 32) = *(_WORD *)(a2 + 32);
                  *(_OWORD *)unint64_t v81 = v88;
                  *(_OWORD *)(v81 + 16) = v89;
                  *(_WORD *)(a2 + 32) = v130;
                  *(_OWORD *)a2 = v116;
                  *(_OWORD *)(a2 + 16) = v124;
                  uint64_t v90 = v81 - v10 + 40;
                  if (v90 >= 41)
                  {
                    unint64_t v91 = (v90 / 0x28uLL - 2) >> 1;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v10 + 40 * v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      uint64_t v109 = *(void *)(v81 + 32);
                      long long v106 = *(_OWORD *)(v81 + 16);
                      do
                      {
                        unint64_t v94 = v81;
                        unint64_t v81 = v10 + 40 * v91;
                        long long v95 = *(_OWORD *)v81;
                        long long v96 = *(_OWORD *)(v81 + 16);
                        *(_WORD *)(v94 + 32) = *(_WORD *)(v81 + 32);
                        *(_OWORD *)unint64_t v94 = v95;
                        *(_OWORD *)(v94 + 16) = v96;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 40 * v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_WORD *)(v81 + 32) = v109;
                      *(_OWORD *)(v81 + 16) = v106;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40 * (v12 >> 1)), (double *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            char v16 = (double *)(a1 + 40 * v13 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40), v16, (double *)(a2 - 80));
            char v17 = (double *)(a1 + 40 + 8 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 80), v17, (double *)(a2 - 120));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v16, (double *)v14, v17);
            uint64_t v126 = *(void *)(a1 + 32);
            long long v110 = *(_OWORD *)a1;
            long long v118 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 16) = v19;
            *(_WORD *)(v14 + 32) = v126;
            *(_OWORD *)unint64_t v14 = v110;
            *(_OWORD *)(v14 + 16) = v118;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40 * (v12 >> 1)), (double *)a1, (double *)(a2 - 40));
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 32) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          long long v105 = *(_OWORD *)(a1 + 16);
          uint64_t v108 = *(void *)(a1 + 32);
          if (v20 >= *(double *)(a2 - 32))
          {
            unint64_t v41 = a1 + 40;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 40;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 40;
              double v40 = *(double *)(v39 + 48);
              v39 += 40;
            }
            while (v20 >= v40);
          }
          unint64_t v43 = a2;
          if (v10 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              unint64_t v43 = v44 - 40;
              double v45 = *(double *)(v44 - 32);
              v44 -= 40;
            }
            while (v20 < v45);
          }
          while (v10 < v43)
          {
            uint64_t v128 = *(void *)(v10 + 32);
            long long v112 = *(_OWORD *)v10;
            long long v120 = *(_OWORD *)(v10 + 16);
            long long v46 = *(_OWORD *)v43;
            long long v47 = *(_OWORD *)(v43 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v43 + 32);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(_WORD *)(v43 + 32) = v128;
            *(_OWORD *)unint64_t v43 = v112;
            *(_OWORD *)(v43 + 16) = v120;
            do
            {
              double v48 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *(double *)(v43 - 32);
              v43 -= 40;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 40);
            long long v51 = *(_OWORD *)(v10 - 24);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 40) = v38;
          *(double *)(v10 - 32) = v20;
          *(_WORD *)(v10 - 8) = v108;
          *(_OWORD *)(v10 - 24) = v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        long long v104 = *(_OWORD *)(a1 + 16);
        uint64_t v107 = *(void *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 48);
          v21 += 40;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        unint64_t v25 = a2;
        if (v21 == 40)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 40;
            double v29 = *(double *)(v28 - 32);
            v28 -= 40;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 40;
            double v27 = *(double *)(v25 - 32);
            v25 -= 40;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v127 = *(void *)(v10 + 32);
            long long v111 = *(_OWORD *)v10;
            long long v119 = *(_OWORD *)(v10 + 16);
            long long v31 = *(_OWORD *)v30;
            long long v32 = *(_OWORD *)(v30 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v30 + 32);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(_WORD *)(v30 + 32) = v127;
            *(_OWORD *)unint64_t v30 = v111;
            *(_OWORD *)(v30 + 16) = v119;
            do
            {
              double v33 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v33 < v20);
            do
            {
              double v34 = *(double *)(v30 - 32);
              v30 -= 40;
            }
            while (v34 >= v20);
          }
          while (v10 < v30);
        }
        if (v10 - 40 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 40);
          long long v36 = *(_OWORD *)(v10 - 24);
          *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 40) = v22;
        *(double *)(v10 - 32) = v20;
        *(_WORD *)(v10 - 8) = v107;
        *(_OWORD *)(v10 - 24) = v104;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 40;
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        __int16 v9 = *(_WORD *)(a2 - 8);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      uint64_t v16 = *(void *)v12;
      long long v21 = *(_OWORD *)(v12 + 16);
      uint64_t v22 = *(void *)(v12 + 32);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(void *)uint64_t v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS2_EEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(void *a1, uint64_t a2)
{
  id v3 = (void *)a1[5];
  uint64_t v4 = a1[6];
  BOOL v5 = (void *)a1[4];
  uint64_t v6 = [v5 dateInterval];
  void v9[4] = v4;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS2_EEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS2_EEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  uint64_t v7 = [v3 collectionCalculator:v5 queryForInterval:v6 error:a2 sampleHandler:v10 mergeHandler:v9];

  return v7;
}

void sub_1BD0CB054(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS2_EEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10 = *(void *)(a1 + 32);
  *(double *)int v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  char v15 = 1;
  uint64_t v11 = [MEMORY[0x1E4F1C9C8] distantFuture];
  [v11 timeIntervalSinceReferenceDate];
  BOOL v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1BD0CB0F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS2_EEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
}

void HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::archive(uint64_t a1, int *a2)
{
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 112);
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F171B978;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  statistics::Statistics::makePrimaryStatistics(a1);
  HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>::archive((uint64_t)v6, (uint64_t)(a2 + 2));
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v6);
  statistics::Statistics::~Statistics((statistics::Statistics *)v6);
  uint64_t v5 = *a2;
  *(_DWORD *)(a1 + 204) |= 0x100u;
  *(void *)(a1 + 136) = v5;
  statistics::Statistics::makeMostRecentDatum(a1);
  v6[0] = &unk_1F17206F8;
  int v10 = 127;
  int8x16_t v7 = vextq_s8(*(int8x16_t *)(a2 + 22), *(int8x16_t *)(a2 + 22), 8uLL);
  v6[1] = *((void *)a2 + 13);
  v6[2] = *((void *)a2 + 14);
  __int16 v8 = 0;
  char v9 = 0;
  statistics::RawQuantitySample::operator=(*v4, (uint64_t)v6);
  PB::Base::~Base((PB::Base *)v6);
}

void sub_1BD0CB228(_Unwind_Exception *a1)
{
  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

void HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>::archive(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F171B978;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (statistics **)(a1 + 8);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = 0;
  statistics::Statistics::makePrimaryStatistics(a1);
  HDStatisticsTimeInterval::archive((HDStatisticsTimeInterval *)a2, (uint64_t)v5);
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v5);
  statistics::Statistics::~Statistics((statistics::Statistics *)v5);
  statistics::Statistics::makeAuxiliaryStatistics(a1);
  HDStatisticsTimeInterval::archive((HDStatisticsTimeInterval *)(a2 + 40), (uint64_t)v5);
  statistics::Statistics::operator=(*v4, (uint64_t)v5);
  statistics::Statistics::~Statistics((statistics::Statistics *)v5);
}

void sub_1BD0CB300(_Unwind_Exception *a1)
{
  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::unarchive(uint64_t a1, void *a2)
{
  *(_DWORD *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_WORD *)(a1 + 120) = 0;
  uint64_t v5 = a2[16];
  if (v5)
  {
    HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>::unarchive((uint64_t)&v12, v5);
    *(void *)(a1 + 8) = v12;
    uint64_t v6 = v16;
    uint64_t v7 = v15;
    uint64_t v8 = v14;
    *(_OWORD *)(a1 + 16) = v13;
    *(void *)(a1 + 32) = v8;
    *(void *)(a1 + 40) = v7;
    *(void *)(a1 + 48) = v6;
    double result = v19;
    uint64_t v9 = v18;
    *(_OWORD *)(a1 + 56) = v17;
    *(void *)(a1 + 72) = v9;
    *(double *)(a1 + 80) = result;
  }
  *(_DWORD *)a1 = a2[17];
  uint64_t v10 = a2[14];
  if (v10)
  {
    double result = *(double *)(v10 + 8);
    uint64_t v11 = *(void *)(v10 + 16);
    *(int8x16_t *)(a1 + 88) = vextq_s8(*(int8x16_t *)(v10 + 24), *(int8x16_t *)(v10 + 24), 8uLL);
    *(double *)(a1 + 104) = result;
    *(void *)(a1 + 112) = v11;
    *(_WORD *)(a1 + 120) = 1;
  }
  return result;
}

void sub_1BD0CB3F4(_Unwind_Exception *a1)
{
  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::~HDStatisticsRelative(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>::unarchive(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t v5 = *(HDStatisticsTimeInterval **)(a2 + 128);
  if (v5)
  {
    HDStatisticsTimeInterval::unarchive(v5, (uint64_t)&v9);
    *(void *)a1 = v9;
    double result = v12;
    uint64_t v6 = v11;
    *(_OWORD *)(a1 + 8) = v10;
    *(void *)(a1 + 24) = v6;
    *(double *)(a1 + 32) = result;
  }
  uint64_t v7 = *(HDStatisticsTimeInterval **)(a2 + 8);
  if (v7)
  {
    HDStatisticsTimeInterval::unarchive(v7, (uint64_t)&v9);
    *(void *)(a1 + 40) = v9;
    double result = v12;
    uint64_t v8 = v11;
    *(_OWORD *)(a1 + 48) = v10;
    *(void *)(a1 + 64) = v8;
    *(double *)(a1 + 72) = result;
  }
  return result;
}

void sub_1BD0CB4A4(_Unwind_Exception *a1)
{
  HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>::~HDStatisticsCombined(v1);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6 = a3;
  uint64_t v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = &unk_1F17240B0;
  double v9 = 900.0;
  if ((v6 & 0x10) == 0) {
    double v9 = 0.0;
  }
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(void *)(v8 + 104) = 0;
  *(void *)(v8 + 112) = 0;
  *(void *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_WORD *)(a1 + 560) = 1;
  *(unsigned char *)(a1 + 562) = 0;
  *(unsigned char *)(a1 + 564) = 0;
  *(void *)(a1 + 568) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(void *)(a1 + 608) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);

  JUMPOUT(0x1C187B8A0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1F17240B0;
  uint64_t v2 = *(void **)(a1 + 592);
  if (v2)
  {
    *(void *)(a1 + 600) = v2;
    operator delete(v2);
  }

  id v3 = *(void **)(a1 + 528);
  if (v3)
  {
    *(void *)(a1 + 536) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(unsigned char *)(result + 560) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::setDateInterval(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 copy];
  uint64_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;

  uint64_t v5 = [v6 startDate];
  [v5 timeIntervalSinceReferenceDate];
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
}

void sub_1BD0CB64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(void *)(a1 + 40))
  {
    id v5 = v3;
    [v3 timeIntervalSinceReferenceDate];
    *(void *)(a1 + 568) = v4;
    id v3 = v5;
  }
}

void sub_1BD0CB6C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::setStatisticsConfiguration(id *a1, void *a2)
{
  objc_storeStrong(a1 + 72, a2);
  id v7 = a2;
  id v4 = a1[72];
  id v5 = a1[69];
  a1[69] = v4;
  id v6 = v4;

  objc_storeStrong(a1 + 19, a1[69]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (*(void *)(a1 + 40)) {
    return 1;
  }
  BOOL v7 = *(void *)(a1 + 224) == *(void *)(a1 + 216) && *(uint64_t *)(a1 + 240) < 1
    || HKIntervalMask<double>::firstDifference(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)a2, *(void *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (v7) {
    return 1;
  }
  double v9 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128);

  return v9(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 copy];
  id v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v3;
}

void sub_1BD0CB8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::dataSource(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));

  return WeakRetained;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::currentStatistics(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 560))
  {
    double v1 = 0;
  }
  else
  {
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_updateSourceOrder((uint64_t)v4);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeThroughTime((uint64_t)v4, v5);
    double v1 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v4);
  }

  return v1;
}

void sub_1BD0CB978(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(a1 + 64);
  BOOL v7 = v6;
  if (v6)
  {
    uint64_t v8 = [v6 startDate];
    [v8 timeIntervalSinceReferenceDate];
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    long long v10 = [v7 endDate];
    [v10 timeIntervalSinceReferenceDate];
    double v12 = v11;
    double v13 = *(double *)(a2 + 8);

    if (v12 < v13) {
      goto LABEL_9;
    }
  }
  if (!*(unsigned char *)(a1 + 562))
  {
LABEL_11:
    uint64_t v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 561))
  {
LABEL_9:
    uint64_t v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(unsigned char *)(a1 + 563)) {
      goto LABEL_11;
    }
    unint64_t v17 = *(void *)(a1 + 600);
    unint64_t v18 = *(void *)(a1 + 608);
    if (v17 >= v18)
    {
      uint64_t v22 = *(void *)(a1 + 592);
      unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      unint64_t v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24) {
        unint64_t v24 = 2 * v25;
      }
      if (v25 >= 0x333333333333333) {
        unint64_t v26 = 0x666666666666666;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26) {
        unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      }
      else {
        uint64_t v27 = 0;
      }
      unint64_t v28 = v26 + 40 * v23;
      unint64_t v29 = v26 + 40 * v27;
      long long v30 = *(_OWORD *)a2;
      long long v31 = *(_OWORD *)(a2 + 16);
      *(void *)(v28 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      unint64_t v21 = v28 + 40;
      long long v32 = *(char **)(a1 + 600);
      double v33 = *(char **)(a1 + 592);
      if (v32 != v33)
      {
        do
        {
          long long v34 = *(_OWORD *)(v32 - 40);
          long long v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        long long v32 = *(char **)(a1 + 592);
      }
      *(void *)(a1 + 592) = v28;
      *(void *)(a1 + 600) = v21;
      *(void *)(a1 + 608) = v29;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      long long v19 = *(_OWORD *)a2;
      long long v20 = *(_OWORD *)(a2 + 16);
      *(void *)(v17 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      unint64_t v21 = v17 + 40;
    }
    *(void *)(a1 + 600) = v21;
    goto LABEL_9;
  }
  uint64_t v14 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
  uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1BD0CBBE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = v5;
  if (*(unsigned char *)(a1 + 562))
  {
    uint64_t v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 562) = 1;
  uint64_t v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    uint64_t v7 = 0;
    goto LABEL_82;
  }
  uint64_t v65 = v6;
  if (*(unsigned char *)(a1 + 561)) {
    goto LABEL_5;
  }
  double v9 = *(void **)(a1 + 584);
  if (!v9)
  {
    id v68 = 0;
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 40))
  {
LABEL_5:
    int v8 = 0;
    id v68 = 0;
    goto LABEL_29;
  }
  [v9 sortUsingComparator:&__block_literal_global_794];
  id v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v10 = *(id *)(a1 + 584);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  if (!v11)
  {

    id v12 = 0;
    goto LABEL_27;
  }
  id v12 = 0;
  uint64_t v13 = *(void *)v70;
  do
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (*(void *)v70 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(id *)(*((void *)&v69 + 1) + 8 * i);
      uint64_t v16 = v15;
      if (v12)
      {
        unint64_t v17 = [v15 startDate];
        unint64_t v18 = [v12 endDate];
        int v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          long long v20 = [v16 endDate];
          unint64_t v21 = [v12 endDate];
          int v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22) {
            goto LABEL_21;
          }
          id v23 = objc_alloc(MEMORY[0x1E4F28C18]);
          unint64_t v24 = [v12 startDate];
          unint64_t v25 = [v16 endDate];
          id v26 = (id)[v23 initWithStartDate:v24 endDate:v25];
        }
        else
        {
          [v68 addObject:v12];
          id v26 = v16;
        }
        id v12 = v26;
      }
      else
      {
        id v12 = v15;
      }
LABEL_21:
    }
    uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  }
  while (v11);

  if (v12) {
    [v68 addObject:v12];
  }
LABEL_27:

LABEL_28:
  int v8 = 1;
LABEL_29:
  uint64_t v27 = *(void **)(a1 + 584);
  *(void *)(a1 + 584) = 0;

  *(unsigned char *)(a1 + 561) = 0;
  if (!v8)
  {
    unint64_t v38 = *(void *)(a1 + 592);
    *(void *)(a1 + 608) = 0;
    *(void *)(a1 + 600) = 0;
    *(void *)(a1 + 592) = 0;
    unint64_t v39 = v38;
    goto LABEL_47;
  }
  unint64_t v28 = [v68 lastObject];
  if (v28)
  {
    unint64_t v29 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_currentBucketInterval(a1);
    long long v30 = [v29 endDate];
    long long v31 = [v28 endDate];
    int v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      double v33 = [v28 endDate];
      [v33 timeIntervalSinceReferenceDate];
      double v35 = v34;

      uint64_t v36 = *(void *)(a1 + 592);
      BOOL v37 = *(long long **)(a1 + 600);
      while ((long long *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((long long *)v36 != v37)
          {
            double v40 = (long long *)(v36 + 40);
            if ((long long *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  long long v41 = *v40;
                  long long v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)uint64_t v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                double v40 = (long long *)((char *)v40 + 40);
              }
              while (v40 != v37);
              BOOL v37 = *(long long **)(a1 + 600);
            }
          }
          if ((long long *)v36 != v37) {
            *(void *)(a1 + 600) = v36;
          }
          break;
        }
        v36 += 40;
      }
    }
  }
  unint64_t v38 = *(void *)(a1 + 592);
  unint64_t v39 = *(void *)(a1 + 600);
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 600) = 0;
  if (![v68 count]) {
    goto LABEL_60;
  }
LABEL_47:
  id v43 = v68;
  long long __p = (void *)v38;
  if (v43)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v44 = v43;
    uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v70;
      while (2)
      {
        for (uint64_t j = 0; j != v45; ++j)
        {
          if (*(void *)v70 != v46) {
            objc_enumerationMutation(v44);
          }
          id v48 = *(id *)(*((void *)&v69 + 1) + 8 * j);
          int v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval((id *)a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
        if (v45) {
          continue;
        }
        break;
      }
    }

LABEL_59:
    unint64_t v38 = (unint64_t)__p;
LABEL_60:
    unint64_t v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v51;
    }
    int v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    long long __p = (void *)v38;
    if (v39 != v38)
    {
      uint64_t v54 = v38;
      uint64_t v50 = v67;
      do
      {
        int v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_primitiveAddSample(a1, v54, 1, v50);
        int v53 = v55;
        v54 += 40;
        if (v54 == v39) {
          char v56 = 0;
        }
        else {
          char v56 = v55;
        }
        uint64_t v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval((id *)a1, 0, v67))goto LABEL_59; {
LABEL_70:
    }
    int v53 = 0;
  }
  if (*(void *)(a1 + 40) && *(void *)(a1 + 536) != *(void *)(a1 + 528))
  {
    do
    {
      uint64_t v57 = objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(void *)(a1 + 112) + 1, v50, v65);
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      unint64_t v58 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, a1 + 120);
      unint64_t v59 = [v57 startDate];
      [v59 timeIntervalSinceReferenceDate];
      double v61 = v60;
      uint64_t v62 = [v57 endDate];
      [v62 timeIntervalSinceReferenceDate];
      HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
    }
    while (*(void *)(a1 + 536) != *(void *)(a1 + 528));
  }
  *(unsigned char *)(a1 + 562) = 0;
  if (__p) {
    operator delete(__p);
  }

  if (v53)
  {
    if (*(unsigned char *)(a1 + 564))
    {
      *(unsigned char *)(a1 + 564) = 0;
      id v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
      uint64_t v7 = 1;
      goto LABEL_82;
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v6 = v65;
LABEL_82:
  *(unsigned char *)(a1 + 562) = 0;
LABEL_83:

  return v7;
}

void sub_1BD0CC2EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    *(unsigned char *)(v13 + 562) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(unsigned char *)(result + 563) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(unsigned char *)(a1 + 562)) {
      goto LABEL_12;
    }
    uint64_t v7 = 0;
LABEL_14:
    uint64_t v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval((id *)a1, v7, a3);
    goto LABEL_15;
  }
  uint64_t v7 = [v6 dateIntervalForIntervalsContainingInterval:v5];

  if (!*(unsigned char *)(a1 + 562)) {
    goto LABEL_14;
  }
  if (!v7)
  {
LABEL_12:
    id v12 = *(void **)(a1 + 584);
    *(void *)(a1 + 584) = 0;

    uint64_t v7 = 0;
    uint64_t v11 = 1;
    *(unsigned char *)(a1 + 561) = 1;
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 561))
  {
    int v8 = *(void **)(a1 + 584);
    if (!v8)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      id v10 = *(void **)(a1 + 584);
      *(void *)(a1 + 584) = v9;

      int v8 = *(void **)(a1 + 584);
    }
    [v8 addObject:v7];
  }
  uint64_t v11 = 1;
LABEL_15:

  return v11;
}

void sub_1BD0CC5EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    *(unsigned char *)(a1 + 560) = 1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS1_EE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v9[3] = &unk_1E63043E8;
    uint64_t v12 = a1;
    id v10 = v5;
    id v11 = WeakRetained;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 112))(a1, v9, a3);
    if (v7 && *(unsigned char *)(a1 + 560) && !*(void *)(a1 + 40)) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to query for initial statistics: no data source available.");
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1BD0CC740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::reset(uint64_t result)
{
  *(unsigned char *)(result + 560) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 encodeBool:*(unsigned __int8 *)(a1 + 560) forKey:@"needs_config"];
  id v12 = v3;
  int v32 = &unk_1F1726FA0;
  double v33 = 0;
  int v38 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
  LOBYTE(v38) = 1;
  uint64_t v34 = v4;
  uint64_t v35 = 0;
  statistics::StatisticsEngine::makeCurrentBucket((uint64_t)&v32);
  uint64_t v13 = &unk_1F171B9C8;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  int v31 = 511;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 0;
  int8x16_t v14 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  uint64_t v5 = *(void *)(a1 + 136);
  char v29 = *(unsigned char *)(a1 + 144);
  char v30 = *(unsigned char *)(a1 + 145);
  BOOL v28 = *(_DWORD *)(a1 + 148) == 0;
  int8x16_t v15 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  uint64_t v7 = *(int8x16_t **)(a1 + 216);
  if (v7 != *(int8x16_t **)(a1 + 224))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v7, *v7, 8uLL);
    int8x16_t v40 = v7[1];
    char v43 = 0;
    HIBYTE(v42) = v7[2].i8[9];
    LOBYTE(v42) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>();
  }
  statistics::StatisticsBucket::makeStatistics((uint64_t)&v13);
  HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>::archive((uint64_t)&v39, a1 + 240);
  statistics::Statistics::operator=(*((statistics **)&v22 + 1), (uint64_t)&v39);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v39);
  uint64_t v8 = *(void *)(a1 + 320);
  if (v8 != a1 + 328)
  {
    HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>::archive((uint64_t)&v39, v8 + 40);
    uint64_t v9 = *(void *)(v8 + 32);
    v46 |= 0x200u;
    uint64_t v45 = v9;
    PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>();
  }
  id v10 = *(int8x16_t **)(a1 + 184);
  if (v10 != *(int8x16_t **)(a1 + 192))
  {
    unint64_t v39 = (char *)&unk_1F1727540;
    v41.i32[0] = 3;
    int8x16_t v40 = vextq_s8(*v10, *v10, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>();
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v13);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v13);
  id v11 = *(int8x16_t **)(a1 + 528);
  if (v11 != *(int8x16_t **)(a1 + 536))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v11, *v11, 8uLL);
    int8x16_t v40 = v11[1];
    __int16 v42 = 0;
    char v43 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>();
  }
  PB::Writer::Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v39);
  [v12 encodeBytes:v40.i64[0] length:&v39[-v40.i64[0]] forKey:@"hdsce_archived_representation"];
  PB::Writer::~Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);
}

void sub_1BD0CCB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v58 = a2;
  *(unsigned char *)(a1 + 560) = [v58 decodeBoolForKey:@"needs_config"];
  id v3 = v58;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)&v62.n128_i64[1], 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)double v63 = 0u;
  long long v64 = 0u;
  uint64_t v104 = 0;
  id v61 = v3;
  PB::Reader::Reader((PB::Reader *)v103, (const unsigned __int8 *)[v61 decodeBytesForKey:@"hdsce_archived_representation" returnedLength:&v104]);
  uint64_t v60 = a1;
  long long v96 = &unk_1F1726FA0;
  uint64_t v97 = 0;
  uint64_t v101 = 0;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  int v102 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v96, (PB::Reader *)v103);
  v62.n128_u64[0] = v98;
  if (v97)
  {
    uint64_t v69 = 0;
    memset(v72, 0, sizeof(v72));
    uint64_t v81 = 0;
    uint64_t v80 = 0;
    *(_OWORD *)long long __p = 0u;
    long long v74 = 0u;
    *(_OWORD *)long long v75 = 0u;
    long long v76 = 0u;
    memset(v77, 0, sizeof(v77));
    uint64_t v78 = 0;
    int64_t v79 = &v80;
    long long v82 = 0u;
    long long v83 = 0u;
    int v84 = 1065353216;
    long long v86 = 0u;
    long long v87 = 0u;
    long long v85 = 0u;
    uint64_t v88 = 0;
    int v89 = 1065353216;
    long long v90 = 0u;
    long long v91 = 0u;
    int v92 = 1065353216;
    long long v93 = 0u;
    long long v94 = 0u;
    int v95 = 1065353216;
    int8x16_t v65 = vextq_s8(*(int8x16_t *)(v97 + 8), *(int8x16_t *)(v97 + 8), 8uLL);
    uint64_t v4 = *(void *)(v97 + 72);
    uint64_t v66 = *(void *)(v97 + 64);
    char v67 = *(unsigned char *)(v97 + 185);
    char v68 = *(unsigned char *)(v97 + 186);
    int8x16_t v70 = vextq_s8(*(int8x16_t *)(v97 + 24), *(int8x16_t *)(v97 + 24), 8uLL);
    uint64_t v71 = v4;
    uint64_t v5 = *(void *)(v97 + 80);
    uint64_t v6 = *(void *)(v97 + 88);
    unint64_t v59 = (void *)v97;
    if (v5 != v6)
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(*(void *)v5 + 24);
        uint64_t v9 = *(void *)(*(void *)v5 + 32);
        uint64_t v10 = *(void *)(*(void *)v5 + 8);
        uint64_t v11 = *(void *)(*(void *)v5 + 16);
        char v12 = *(unsigned char *)(*(void *)v5 + 41);
        char v13 = *(unsigned char *)(*(void *)v5 + 40);
        if ((unint64_t)v7 >= (unint64_t)v74)
        {
          int8x16_t v14 = (char *)__p[0];
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (char *)__p[0]) >> 4);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v74 - (unint64_t)__p[0]) >> 4) > v16) {
            unint64_t v16 = 0x5555555555555556 * ((uint64_t)(v74 - (unint64_t)__p[0]) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v74 - (unint64_t)__p[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v17 = 0x555555555555555;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17)
          {
            unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            uint64_t v7 = (char *)__p[1];
            int8x16_t v14 = (char *)__p[0];
          }
          else
          {
            uint64_t v18 = 0;
          }
          unint64_t v19 = v17 + 48 * v15;
          *(void *)unint64_t v19 = v9;
          *(void *)(v19 + 8) = v8;
          *(void *)(v19 + 16) = v10;
          *(void *)(v19 + 24) = v11;
          *(_WORD *)(v19 + 32) = 1;
          *(unsigned char *)(v19 + 40) = 0;
          *(unsigned char *)(v19 + 41) = v12;
          *(unsigned char *)(v19 + 42) = v13;
          uint64_t v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              long long v21 = *((_OWORD *)v7 - 3);
              long long v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            int8x16_t v14 = (char *)__p[0];
          }
          uint64_t v7 = (char *)(v19 + 48);
          __p[0] = v20;
          __p[1] = (void *)(v19 + 48);
          *(void *)&long long v74 = v17 + 48 * v18;
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)uint64_t v7 = v9;
          *((void *)v7 + 1) = v8;
          *((void *)v7 + 2) = v10;
          *((void *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        __p[1] = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    uint64_t v23 = v59[13];
    if (v23)
    {
      HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>::unarchive((uint64_t)&v105, v23);
      *((void *)&v74 + 1) = v105;
      if (v75[0])
      {
        v75[1] = v75[0];
        operator delete(v75[0]);
      }
      *(_OWORD *)long long v75 = v106;
      long long v76 = v107;
      *(void *)&long long v107 = 0;
      long long v106 = 0uLL;
      v77[0] = v108;
      long long v24 = v77[1];
      if (v77[1])
      {
        v77[2] = v77[1];
        operator delete(v77[1]);
        long long v24 = (void *)v106;
      }
      *(_OWORD *)&v77[1] = v109;
      v77[3] = v110;
      long long v110 = 0;
      long long v109 = 0uLL;
      uint64_t v78 = v111;
      if (v24)
      {
        *((void *)&v106 + 1) = v24;
        operator delete(v24);
      }
    }
    long long v26 = (uint64_t *)v59[17];
    for (uint64_t i = (uint64_t *)v59[18]; v26 != i; ++v26)
    {
      uint64_t v27 = *v26;
      HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>::unarchive((uint64_t)&v105, *v26);
      uint64_t v28 = *(void *)(v27 + 144);
      char v29 = v80;
      for (j = &v80; ; char v29 = *j)
      {
        int v31 = j;
        if (!v29) {
          break;
        }
        while (1)
        {
          uint64_t j = (uint64_t **)v29;
          uint64_t v32 = v29[4];
          if (v32 > v28) {
            break;
          }
          if (v32 >= v28)
          {
            double v33 = (char *)j;
            goto LABEL_40;
          }
          char v29 = j[1];
          if (!v29)
          {
            int v31 = j + 1;
            goto LABEL_37;
          }
        }
      }
LABEL_37:
      double v33 = (char *)operator new(0x78uLL);
      v112[1] = &v80;
      *((void *)v33 + 4) = v28;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      char v113 = 1;
      *(void *)double v33 = 0;
      *((void *)v33 + 1) = 0;
      *((void *)v33 + 2) = j;
      void *v31 = (uint64_t *)v33;
      uint64_t v34 = (uint64_t *)v33;
      if (*v79)
      {
        int64_t v79 = (uint64_t **)*v79;
        uint64_t v34 = *v31;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v80, v34);
      ++v81;
      v112[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v112);
LABEL_40:
      uint64_t v35 = (void *)*((void *)v33 + 6);
      *((void *)v33 + 5) = v105;
      if (v35)
      {
        *((void *)v33 + 7) = v35;
        operator delete(v35);
        *((void *)v33 + 6) = 0;
        *((void *)v33 + 7) = 0;
        *((void *)v33 + 8) = 0;
      }
      uint64_t v36 = (void *)*((void *)v33 + 11);
      *((_OWORD *)v33 + 3) = v106;
      *((void *)v33 + 8) = v107;
      *(void *)&long long v107 = 0;
      long long v106 = 0uLL;
      *((void *)v33 + 9) = *((void *)&v107 + 1);
      *((void *)v33 + 10) = v108;
      if (v36)
      {
        *((void *)v33 + 12) = v36;
        operator delete(v36);
        *((void *)v33 + 11) = 0;
        *((void *)v33 + 12) = 0;
        *((void *)v33 + 13) = 0;
        uint64_t v36 = (void *)v106;
      }
      *(_OWORD *)(v33 + 88) = v109;
      *((void *)v33 + 13) = v110;
      long long v110 = 0;
      long long v109 = 0uLL;
      *((void *)v33 + 14) = v111;
      if (v36)
      {
        *((void *)&v106 + 1) = v36;
        operator delete(v36);
      }
    }
    uint64_t v37 = v59[5];
    for (uint64_t k = v59[6]; v37 != k; v37 += 8)
    {
      double v40 = *(double *)(*(void *)v37 + 8);
      double v39 = *(double *)(*(void *)v37 + 16);
      if (v40 >= v39) {
        double v41 = *(double *)(*(void *)v37 + 16);
      }
      else {
        double v41 = *(double *)(*(void *)v37 + 8);
      }
      if (v39 < v40) {
        double v39 = *(double *)(*(void *)v37 + 8);
      }
      HKIntervalMask<double>::_insertInterval(v72, v41, v39);
    }
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::operator=((uint64_t)&v62.n128_i64[1], (uint64_t)&v65);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v65);
  }
  uint64_t v42 = v99;
  uint64_t v43 = v100;
  if (v99 != v100)
  {
    int v44 = (char *)v63[1];
    do
    {
      uint64_t v45 = *(void *)(*(void *)v42 + 24);
      uint64_t v46 = *(void *)(*(void *)v42 + 32);
      uint64_t v47 = *(void *)(*(void *)v42 + 8);
      uint64_t v48 = *(void *)(*(void *)v42 + 16);
      if ((unint64_t)v44 >= (unint64_t)v64)
      {
        int v49 = (char *)v63[0];
        unint64_t v50 = 0xCCCCCCCCCCCCCCCDLL * ((v44 - (char *)v63[0]) >> 3);
        unint64_t v51 = v50 + 1;
        if (v50 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(v64 - (unint64_t)v63[0]) >> 3) > v51) {
          unint64_t v51 = 0x999999999999999ALL * ((uint64_t)(v64 - (unint64_t)v63[0]) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v64 - (unint64_t)v63[0]) >> 3) >= 0x333333333333333) {
          unint64_t v52 = 0x666666666666666;
        }
        else {
          unint64_t v52 = v51;
        }
        if (v52)
        {
          unint64_t v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v52);
          int v49 = (char *)v63[0];
          int v44 = (char *)v63[1];
        }
        else
        {
          uint64_t v53 = 0;
        }
        unint64_t v54 = v52 + 40 * v50;
        *(void *)unint64_t v54 = v46;
        *(void *)(v54 + 8) = v45;
        *(void *)(v54 + 16) = v47;
        *(void *)(v54 + 24) = v48;
        *(_WORD *)(v54 + 32) = 1;
        int v55 = (char *)v54;
        if (v44 != v49)
        {
          do
          {
            long long v56 = *(_OWORD *)(v44 - 40);
            long long v57 = *(_OWORD *)(v44 - 24);
            *((_WORD *)v55 - 4) = *((_WORD *)v44 - 4);
            *(_OWORD *)(v55 - 24) = v57;
            *(_OWORD *)(v55 - 40) = v56;
            v55 -= 40;
            v44 -= 40;
          }
          while (v44 != v49);
          int v49 = (char *)v63[0];
        }
        int v44 = (char *)(v54 + 40);
        v63[0] = v55;
        v63[1] = (void *)(v54 + 40);
        *(void *)&long long v64 = v52 + 40 * v53;
        if (v49) {
          operator delete(v49);
        }
      }
      else
      {
        *(void *)int v44 = v46;
        *((void *)v44 + 1) = v45;
        *((void *)v44 + 2) = v47;
        *((void *)v44 + 3) = v48;
        *((_WORD *)v44 + 16) = 1;
        v44 += 40;
      }
      v63[1] = v44;
      v42 += 8;
    }
    while (v42 != v43);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v96);

  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::operator=((void *)(v60 + 112), &v62);
  if (v63[0])
  {
    v63[1] = v63[0];
    operator delete(v63[0]);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v62.n128_i64[1]);
}

void sub_1BD0CD320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table((uint64_t)&STACK[0x370]);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a3);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x320]);
  uint64_t v10 = (void *)STACK[0x308];
  if (STACK[0x308])
  {
    STACK[0x310] = (unint64_t)v10;
    operator delete(v10);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x2E0]);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>::destroy((void *)STACK[0x2D0]);
  HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>::~HDStatisticsCombined(&STACK[0x278]);
  uint64_t v11 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v11;
    operator delete(v11);
  }
  objc_destroyWeak((id *)&STACK[0x258]);
  char v12 = (void *)STACK[0x240];
  if (STACK[0x240])
  {
    STACK[0x248] = (unint64_t)v12;
    operator delete(v12);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x398]);
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 256;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = a1 + 208;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_DWORD *)(a1 + 256) = 1065353216;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(void *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 320) = 1065353216;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_DWORD *)(a1 + 360) = 1065353216;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_DWORD *)(a1 + 400) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 416);
  if (v2)
  {
    *(void *)(a1 + 424) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::~HDStatisticsBucket(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 368);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 328);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 288);
  uint64_t v2 = *(void **)(a1 + 264);
  if (v2)
  {
    *(void *)(a1 + 272) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 224);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>::destroy(*(void **)(a1 + 208));
  id v3 = *(void **)(a1 + 168);
  if (v3)
  {
    *(void *)(a1 + 176) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 128);
  if (v4)
  {
    *(void *)(a1 + 136) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 96);
  if (v5)
  {
    *(void *)(a1 + 104) = v5;
    operator delete(v5);
  }
  objc_destroyWeak((id *)(a1 + 88));
  uint64_t v6 = *(void **)(a1 + 64);
  if (v6)
  {
    *(void *)(a1 + 72) = v6;
    operator delete(v6);
  }

  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<long long const,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,0>(a1 + 4);
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<long long const,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,0>(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  id v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_configureForStartTime(uint64_t a1)
{
  unint64_t v28 = 0;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
    uint64_t v4 = [v2 dateIntervalContainingDate:v3 index:&v28];

    uint64_t v5 = [v4 startDate];
    [v5 timeIntervalSinceReferenceDate];
    double v7 = v6;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
LABEL_5:
    double v13 = v9;

    goto LABEL_6;
  }
  id v10 = *(id *)(a1 + 64);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v11 = [v10 startDate];
    [v11 timeIntervalSinceReferenceDate];
    double v7 = v12;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
    goto LABEL_5;
  }
  double v7 = -1.79769313e308;
  double v13 = 1.79769313e308;
LABEL_6:

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v21, WeakRetained, v7, v13);

  if (*(void *)(a1 + 32) == 1) {
    char v23 = 1;
  }
  uint64_t v22 = *(void *)(a1 + 56);
  char v24 = *(unsigned char *)(a1 + 24) & 1;
  if (v27 != (char *)(a1 + 72)) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27, *(char **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4);
  }
  objc_storeStrong(&v26, *(id *)(a1 + 576));
  if (!*(void *)(a1 + 40)) {
    int v25 = 0;
  }
  unint64_t v15 = v28;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v21);
  v18.n128_u64[0] = v15;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)&v18.n128_i64[1], (uint64_t)v17);
  long long __p = 0u;
  long long v20 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::operator=((void *)(a1 + 112), &v18);

  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v18.n128_i64[1]);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v17);
  *(unsigned char *)(a1 + 560) = 0;
  return HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v21);
}

void sub_1BD0CD918(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::operator=(void *a1, __n128 *a2)
{
  *a1 = a2->n128_u64[0];
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::operator=((uint64_t)(a1 + 1), (uint64_t)&a2->n128_i64[1]);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 52), a2 + 26);
  unint64_t v4 = a2[27].n128_u64[1];
  a2[27].n128_u64[1] = 0;
  uint64_t v5 = (void *)a1[55];
  a1[55] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 96);
  double v7 = *(unsigned char **)(a2 + 104);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(void *)(a1 + 96) = v10;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(void *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 128), *(const void **)(a2 + 128), *(void *)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 4);
  uint64_t v12 = *(void *)(a2 + 152);
  uint64_t v13 = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 152) = v12;
  *(void *)(a1 + 160) = v13;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 168), *(const void **)(a2 + 168), *(void *)(a2 + 176), (uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 4);
  uint64_t v14 = *(void *)(a2 + 192);
  *(void *)(a1 + 208) = 0;
  unint64_t v15 = (uint64_t **)(a1 + 208);
  *(void *)(a1 + 192) = v14;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 200) = a1 + 208;
  unint64_t v16 = *(void **)(a2 + 200);
  if (v16 != (void *)(a2 + 208))
  {
    do
    {
      unint64_t v17 = *v15;
      __n128 v18 = (uint64_t *)(a1 + 208);
      if (*(uint64_t ***)(a1 + 200) == v15) {
        goto LABEL_11;
      }
      unint64_t v19 = *v15;
      long long v20 = (uint64_t *)(a1 + 208);
      if (v17)
      {
        do
        {
          __n128 v18 = v19;
          unint64_t v19 = (uint64_t *)v19[1];
        }
        while (v19);
      }
      else
      {
        do
        {
          __n128 v18 = (uint64_t *)v20[2];
          BOOL v21 = *v18 == (void)v20;
          long long v20 = v18;
        }
        while (v21);
      }
      uint64_t v22 = v16[4];
      if (v18[4] < v22)
      {
LABEL_11:
        if (v17) {
          char v23 = (uint64_t **)v18;
        }
        else {
          char v23 = (uint64_t **)(a1 + 208);
        }
        if (v17) {
          char v24 = (uint64_t **)(v18 + 1);
        }
        else {
          char v24 = (uint64_t **)(a1 + 208);
        }
        if (*v24) {
          goto LABEL_28;
        }
      }
      else
      {
        char v24 = (uint64_t **)(a1 + 208);
        char v23 = (uint64_t **)(a1 + 208);
        if (v17)
        {
          int v25 = *v15;
          while (1)
          {
            while (1)
            {
              char v23 = (uint64_t **)v25;
              uint64_t v26 = v25[4];
              if (v26 <= v22) {
                break;
              }
              int v25 = *v23;
              char v24 = v23;
              if (!*v23) {
                goto LABEL_27;
              }
            }
            if (v26 >= v22) {
              goto LABEL_28;
            }
            int v25 = v23[1];
            if (!v25)
            {
              char v24 = v23 + 1;
              break;
            }
          }
        }
      }
LABEL_27:
      uint64_t v27 = operator new(0x78uLL);
      v33[0] = v27;
      v33[1] = a1 + 208;
      char v34 = 0;
      v27[2] = *((_OWORD *)v16 + 2);
      *((void *)v27 + 6) = 0;
      *((void *)v27 + 7) = 0;
      *((void *)v27 + 8) = 0;
      std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)v27 + 6, (const void *)v16[6], v16[7], (uint64_t)(v16[7] - v16[6]) >> 4);
      uint64_t v28 = v16[9];
      uint64_t v29 = v16[10];
      *((void *)v27 + 11) = 0;
      *((void *)v27 + 9) = v28;
      *((void *)v27 + 10) = v29;
      *((void *)v27 + 12) = 0;
      *((void *)v27 + 13) = 0;
      std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)v27 + 11, (const void *)v16[11], v16[12], (uint64_t)(v16[12] - v16[11]) >> 4);
      *((void *)v27 + 14) = v16[14];
      char v34 = 1;
      std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 200), (uint64_t)v23, v24, (uint64_t *)v27);
      v33[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v33);
LABEL_28:
      char v30 = (void *)v16[1];
      if (v30)
      {
        do
        {
          int v31 = v30;
          char v30 = (void *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          int v31 = (void *)v16[2];
          BOOL v21 = *v31 == (void)v16;
          unint64_t v16 = v31;
        }
        while (!v21);
      }
      unint64_t v16 = v31;
    }
    while (v31 != (void *)(a2 + 208));
  }
  std::unordered_set<long long>::unordered_set(a1 + 224, a2 + 224);
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 264), *(const void **)(a2 + 264), *(void *)(a2 + 272), (uint64_t)(*(void *)(a2 + 272) - *(void *)(a2 + 264)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 288, a2 + 288);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 328, a2 + 328);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 368, a2 + 368);
  return a1;
}

void sub_1BD0CDD48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void **a11, id *location, void **a13, char a14)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v19);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v18);
  BOOL v21 = *v17;
  if (*v17)
  {
    *(void *)(v15 + 272) = v21;
    operator delete(v21);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>::destroy(*v14);
  HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>::~HDStatisticsCombined(a10);
  uint64_t v22 = *a11;
  if (*a11)
  {
    *(void *)(v15 + 104) = v22;
    operator delete(v22);
  }
  objc_destroyWeak(location);
  char v23 = *a13;
  if (*a13)
  {
    *(void *)(v15 + 72) = v23;
    operator delete(v23);
  }

  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  double v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<long long const,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,0>(v1 + 4);
    }
    operator delete(v1);
  }
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::operator=(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  long long v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v5;

  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  id WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  uint64_t v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(void *)(a1 + 104) = v9;
    operator delete(v9);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a1 + 120) = v10;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 128, (__n128 *)(a2 + 128));
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 168, (__n128 *)(a2 + 168));
  uint64_t v12 = a1 + 208;
  uint64_t v11 = *(void **)(a1 + 208);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>::destroy(v11);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  uint64_t v13 = (void *)(a2 + 208);
  uint64_t v14 = *(void *)(a2 + 208);
  *(void *)(a1 + 208) = v14;
  uint64_t v15 = *(void *)(a2 + 216);
  *(void *)(a1 + 216) = v15;
  if (v15)
  {
    *(void *)(v14 + 16) = v12;
    *(void *)(a2 + 200) = v13;
    *uint64_t v13 = 0;
    *(void *)(a2 + 216) = 0;
  }
  else
  {
    *(void *)(a1 + 200) = v12;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 224, (uint64_t *)(a2 + 224));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 264, (__n128 *)(a2 + 264));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 288, (uint64_t *)(a2 + 288));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 328, (uint64_t *)(a2 + 328));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 368, (uint64_t *)(a2 + 368));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  double v4 = *(double *)a2;
  id v5 = objc_alloc(MEMORY[0x1E4F1C9C8]);
  long long v6 = (double *)(a2 + 40);
  if (v4 != -1.79769313e308) {
    long long v6 = (double *)a2;
  }
  long long v7 = (void *)[v5 initWithTimeIntervalSinceReferenceDate:*v6];
  if (*(double *)(a2 + 8) == 1.79769313e308) {
    uint64_t v8 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 48)];
  }
  else {
    uint64_t v8 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 8)];
  }
  uint64_t v9 = (void *)v8;
  id v10 = *(id *)(a1 + 16);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v11 = *(id *)(a1 + 16);
    if ([v11 shouldUseUnderlyingTypeForStatistics])
    {
      uint64_t v12 = [v11 underlyingSampleType];

      id v10 = (id)v12;
    }
  }
  uint64_t v13 = (void *)[objc_alloc(MEMORY[0x1E4F2B5B0]) initWithDataType:v10 startDate:v7 endDate:v9];
  if (*(unsigned char *)(a1 + 24))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      uint64_t v26 = v13;
      uint64_t v27 = v9;
      id v15 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      uint64_t v16 = *(uint64_t **)(a2 + 264);
      unint64_t v17 = *(uint64_t **)(a2 + 272);
      while (v16 != v17)
      {
        uint64_t v18 = *v16;
        id v19 = objc_loadWeakRetained((id *)(a1 + 48));
        long long v20 = [v19 sourceForSourceID:v18];

        if (v20)
        {
          if (([v15 containsObject:v20] & 1) == 0) {
            [v15 addObject:v20];
          }
        }

        ++v16;
      }
      BOOL v21 = (void *)[v15 copy];
      uint64_t v13 = v26;
      uint64_t v9 = v27;
      [v26 _setSources:v21];
    }
  }

  v28[0] = &unk_1F1724290;
  v28[3] = v28;
  id v22 = v13;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)v30, (uint64_t)v28);
  uint64_t v32 = 0;
  char v23 = operator new(0x28uLL);
  *char v23 = &unk_1F1724180;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(v23 + 1), (uint64_t)v30);
  uint64_t v32 = v23;
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket(a1, v22, a2, (uint64_t)v31);
  std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v31);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v30);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)v29, (uint64_t)v28);
  uint64_t v32 = 0;
  char v24 = operator new(0x28uLL);
  *char v24 = &unk_1F1724210;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(v24 + 1), (uint64_t)v29);
  uint64_t v32 = v24;
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket(a1, v22, a2, (uint64_t)v31);
  std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v31);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v29);

  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v28);

  return v22;
}

void sub_1BD0CE348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 248);
  uint64_t v2 = *(void *)(a1 + 264);
  if (v1 != (*(void *)(a1 + 272) - v2) >> 3)
  {
    double v4 = (void **)(a1 + 264);
    *(void *)(a1 + 272) = v2;
    std::vector<long long>::reserve((void **)(a1 + 264), v1);
    id v5 = *(void **)(a1 + 240);
    if (v5)
    {
      long long v6 = *(char **)(a1 + 272);
      do
      {
        uint64_t v7 = v5[2];
        unint64_t v8 = *(void *)(a1 + 280);
        if ((unint64_t)v6 >= v8)
        {
          id v10 = (char *)*v4;
          uint64_t v11 = (v6 - (unsigned char *)*v4) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            id v10 = *(char **)(a1 + 264);
            long long v6 = *(char **)(a1 + 272);
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v16 = (void *)(v14 + 8 * v11);
          void *v16 = v7;
          uint64_t v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            uint64_t v17 = *((void *)v6 - 1);
            v6 -= 8;
            *--uint64_t v16 = v17;
          }
          *(void *)(a1 + 264) = v16;
          *(void *)(a1 + 272) = v9;
          *(void *)(a1 + 280) = v14 + 8 * v15;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)long long v6 = v7;
          uint64_t v9 = v6 + 8;
        }
        *(void *)(a1 + 272) = v9;
        id v5 = (void *)*v5;
        long long v6 = v9;
      }
      while (v5);
    }
    uint64_t v18 = (id *)(a1 + 88);
    id WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      id v20 = objc_loadWeakRetained(v18);
      [v20 orderSourceIDs:v4];
    }
  }
}

void sub_1BD0CE5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2) {
    a2 = v4 * floor(a2 / v4);
  }
  double v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    uint64_t v129 = (void *)(a1 + 96);
    uint64_t v125 = (double **)(a1 + 64);
    uint64_t v122 = (uint64_t *)(a1 + 160);
    uint64_t v123 = (uint64_t *)(a1 + 120);
    location = (id *)(a1 + 88);
    long long v117 = (double **)(a1 + 168);
    long long v118 = (double **)(a1 + 128);
    long long v116 = (void *)(a1 + 208);
    while (1)
    {
      unint64_t v6 = *(void *)(a1 + 96);
      uint64_t v7 = *(long long **)(a1 + 104);
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v7 - v6) >> 4);
      if (v8) {
        break;
      }
LABEL_125:
      *(double *)(a1 + 56) = a2;
LABEL_126:
      double v113 = *(double *)(a1 + 56);
      if (v113 == v5)
      {
        long long v114 = [MEMORY[0x1E4F28B00] currentHandler];
        long long v115 = objc_msgSend(NSString, "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval, HDStatisticsTimeInterval>>::_mergeThroughTime(double) [Statistics = HDStatisticsCombined<HDStatisticsTimeInterval, HDStatisticsTimeInterval>]");
        [v114 handleFailureInFunction:v115 file:@"HDStatisticsBucket.hpp" lineNumber:234 description:@"Failed to make forward progress during statistics merge."];

        double v113 = *(double *)(a1 + 56);
      }
      double v5 = v113;
      if (v113 >= a2) {
        return;
      }
    }
    if (v8 != 1)
    {
      double v20 = a2;
      double v21 = a2;
      double v22 = v5;
      uint64_t v23 = *(void *)(a1 + 96);
      if ((long long *)v6 != v7)
      {
        do
        {
          double v24 = *(double *)(v23 + 8);
          double v25 = *(double *)(v23 + 16);
          if (v24 > v22 && v24 < v21) {
            double v21 = *(double *)(v23 + 8);
          }
          if (v25 > v5) {
            double v27 = *(double *)(v23 + 16);
          }
          else {
            double v27 = v20;
          }
          if (v25 < v20)
          {
            double v22 = v5;
            double v20 = v27;
          }
          v23 += 48;
        }
        while ((long long *)v23 != v7);
      }
      if (v20 >= v21) {
        double v28 = v21;
      }
      else {
        double v28 = v20;
      }
      double v29 = *(double *)(a1 + 16);
      if (v29 > 0.0)
      {
        double v30 = v29 * floor(v28 / v29);
        double v31 = v29 * floor((v29 + v5) / v29);
        if (v30 >= v31) {
          double v28 = v30;
        }
        else {
          double v28 = v31;
        }
      }
      *uint64_t v129 = 0;
      v129[1] = 0;
      v129[2] = 0;
      if ((long long *)v6 != v7)
      {
        if (v8 > 0x555555555555555) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v8);
        uint64_t v35 = *(char **)(a1 + 96);
        char v34 = *(char **)(a1 + 104);
        uint64_t v36 = v32;
        if (v34 != v35)
        {
          do
          {
            long long v37 = *((_OWORD *)v34 - 3);
            long long v38 = *((_OWORD *)v34 - 2);
            *(_OWORD *)(v36 - 21) = *(_OWORD *)(v34 - 21);
            *((_OWORD *)v36 - 3) = v37;
            *((_OWORD *)v36 - 2) = v38;
            v36 -= 48;
            v34 -= 48;
          }
          while (v34 != v35);
          char v34 = (char *)*v129;
        }
        *(void *)(a1 + 96) = v36;
        *(void *)(a1 + 104) = v32;
        *(void *)(a1 + 112) = &v32[48 * v33];
        if (v34) {
          operator delete(v34);
        }
      }
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_updateSourceOrder(a1);
      id WeakRetained = objc_loadWeakRetained(location);

      if (WeakRetained)
      {
        *(void *)&v131.var0 = a1;
        unint64_t v40 = 126 - 2 * __clz(v8);
        if ((long long *)v6 == v7) {
          uint64_t v41 = 0;
        }
        else {
          uint64_t v41 = v40;
        }
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(v6, v7, (uint64_t)&v131, v41, 1);
      }
      if (*(unsigned char *)(a1 + 25)) {
        id v121 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      }
      else {
        id v121 = 0;
      }
      long long v120 = (void *)v6;
      if ((long long *)v6 == v7)
      {
LABEL_107:
        *(double *)(a1 + 152) = HKIntervalMask<double>::removeIntervalsBefore(v118, v28) + *(double *)(a1 + 152);
        *(double *)(a1 + 192) = HKIntervalMask<double>::removeIntervalsBefore(v117, v28) + *(double *)(a1 + 192);
        uint64_t v97 = *(void **)(a1 + 200);
        if (v97 != v116)
        {
          do
          {
            *((double *)v97 + 9) = HKIntervalMask<double>::removeIntervalsBefore((double **)v97 + 6, v28)
                                 + *((double *)v97 + 9);
            *((double *)v97 + 14) = HKIntervalMask<double>::removeIntervalsBefore((double **)v97 + 11, v28)
                                  + *((double *)v97 + 14);
            unint64_t v98 = (void *)v97[1];
            if (v98)
            {
              do
              {
                uint64_t v99 = v98;
                unint64_t v98 = (void *)*v98;
              }
              while (v98);
            }
            else
            {
              do
              {
                uint64_t v99 = (void *)v97[2];
                BOOL v100 = *v99 == (void)v97;
                uint64_t v97 = v99;
              }
              while (!v100);
            }
            uint64_t v97 = v99;
          }
          while (v99 != v116);
        }
        *(double *)(a1 + 56) = v28;

        if (v120) {
          operator delete(v120);
        }
        goto LABEL_126;
      }
      int64_t v124 = 0;
      char v44 = 0;
      unint64_t v45 = v6;
      while (2)
      {
        long long v46 = *(_OWORD *)(v45 + 16);
        *(_OWORD *)&v131.var0 = *(_OWORD *)v45;
        *(_OWORD *)&v131.var2 = v46;
        *(void *)&v131.BOOL var4 = *(void *)(v45 + 32);
        uint64_t v47 = v46;
        double v48 = v28 - v131.var1;
        double v49 = *(double *)&v46 - v131.var1;
        if (v49 - (v28 - v131.var1) >= 0.01)
        {
          if (v48 < 0.01)
          {
            v131.BOOL var4 = 0;
            goto LABEL_59;
          }
          double v55 = v48 / v49 * v131.var0;
          int64_t var3 = v131.var3;
          BOOL var5 = v131.var5;
          double v54 = v131.var0 - v55;
          v131.var0 = v55;
          v131.var2 = v28;
          double v53 = v28;
          BOOL var4 = v131.var4;
          if (v131.var4) {
            goto LABEL_54;
          }
LABEL_59:
          unint64_t v59 = *(_OWORD **)(a1 + 104);
          unint64_t v60 = *(void *)(a1 + 112);
          if ((unint64_t)v59 < v60)
          {
            long long v61 = *(_OWORD *)v45;
            long long v62 = *(_OWORD *)(v45 + 32);
            v59[1] = *(_OWORD *)(v45 + 16);
            v59[2] = v62;
            _OWORD *v59 = v61;
            double v63 = v59 + 3;
            goto LABEL_105;
          }
          unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v59 - *v129) >> 4);
          unint64_t v65 = v64 + 1;
          if (v64 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - *v129) >> 4);
          if (2 * v66 > v65) {
            unint64_t v65 = 2 * v66;
          }
          if (v66 >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v67 = 0x555555555555555;
          }
          else {
            unint64_t v67 = v65;
          }
          if (v67) {
            unint64_t v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v67);
          }
          else {
            uint64_t v68 = 0;
          }
          long long v74 = (_OWORD *)(v67 + 48 * v64);
          long long v75 = *(_OWORD *)v45;
          long long v76 = *(_OWORD *)(v45 + 32);
          v74[1] = *(_OWORD *)(v45 + 16);
          v74[2] = v76;
          *long long v74 = v75;
          uint64_t v78 = *(char **)(a1 + 96);
          uint64_t v77 = *(char **)(a1 + 104);
          int64_t v79 = v74;
          if (v77 != v78)
          {
            do
            {
              long long v80 = *((_OWORD *)v77 - 3);
              long long v81 = *((_OWORD *)v77 - 2);
              *(_OWORD *)((char *)v79 - 21) = *(_OWORD *)(v77 - 21);
              *(v79 - 3) = v80;
              *(v79 - 2) = v81;
              v79 -= 3;
              v77 -= 48;
            }
            while (v77 != v78);
            uint64_t v77 = (char *)*v129;
          }
          double v63 = v74 + 3;
          *(void *)(a1 + 96) = v79;
          *(void *)(a1 + 104) = v74 + 3;
          *(void *)(a1 + 112) = v67 + 48 * v68;
          if (v77)
          {
            long long v82 = v77;
            goto LABEL_104;
          }
LABEL_105:
          *(void *)(a1 + 104) = v63;
        }
        else
        {
          int64_t var3 = 0;
          BOOL var4 = 0;
          BOOL var5 = 0;
          double v53 = 0.0;
          uint64_t v47 = 0;
          double v54 = 0.0;
          if (!v131.var4) {
            goto LABEL_59;
          }
LABEL_54:
          BOOL v127 = var5;
          int64_t v128 = var3;
          HDRawQuantitySample::applyMask((uint64_t)&v131, v125);
          int v56 = *(unsigned __int8 *)(v45 + 42);
          int v57 = *(unsigned __int8 *)(v45 + 41);
          char v126 = *(unsigned char *)(v45 + 40);
          if (v131.var4)
          {
            if (v44)
            {
              unint64_t v58 = v131.var3;
              if (v124 == v131.var3 || *(unsigned char *)(a1 + 24))
              {
                HDStatisticsTimeInterval::addSample(v123, &v131, v56 == 0);
                HDStatisticsTimeInterval::addSample(v122, &v131, v56 == 0);
                int v56 = 1;
              }
            }
            else
            {
              HDStatisticsTimeInterval::addSample(v123, &v131, v56 == 0);
              HDStatisticsTimeInterval::addSample(v122, &v131, v56 == 0);
              int v56 = 1;
              unint64_t v58 = v131.var3;
              int64_t v124 = v131.var3;
            }
            if (*(unsigned char *)(a1 + 25))
            {
              uint64_t v69 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, v58);
              if (v69)
              {
                int8x16_t v70 = [v121 objectForKeyedSubscript:v69];
                uint64_t v71 = v70;
                if (v70)
                {
                  if ([v70 longLongValue] == v58 || *(unsigned char *)(a1 + 24))
                  {
                    unint64_t v72 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v58);
                    uint64_t v73 = (uint64_t *)HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v72);
                    HDStatisticsTimeInterval::addSample(v73, &v131, v57 == 0);
                    goto LABEL_83;
                  }
                }
                else
                {
                  long long v83 = [NSNumber numberWithLongLong:v58];
                  [v121 setObject:v83 forKeyedSubscript:v69];

                  unint64_t v84 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v58);
                  uint64_t v73 = (uint64_t *)HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v84);
                  HDStatisticsTimeInterval::addSample(v73, &v131, v57 == 0);
LABEL_83:
                  HDStatisticsTimeInterval::addSample(v73 + 5, &v131, v57 == 0);
                  LOBYTE(v57) = 1;
                }
              }
            }
            char v44 = 1;
          }
          if (var4)
          {
            BOOL v85 = v56 != 0;
            long long v87 = *(char **)(a1 + 104);
            unint64_t v86 = *(void *)(a1 + 112);
            if ((unint64_t)v87 < v86)
            {
              *(double *)long long v87 = v54;
              *((double *)v87 + 1) = v53;
              *((void *)v87 + 2) = v47;
              *((void *)v87 + 3) = v128;
              v87[32] = var4;
              v87[33] = v127;
              v87[40] = v126;
              v87[41] = v57;
              double v63 = v87 + 48;
              v87[42] = v85;
              goto LABEL_105;
            }
            long long v82 = (char *)*v129;
            unint64_t v88 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v87[-*v129] >> 4);
            unint64_t v89 = v88 + 1;
            if (v88 + 1 > 0x555555555555555) {
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v90 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v86 - (void)v82) >> 4);
            if (2 * v90 > v89) {
              unint64_t v89 = 2 * v90;
            }
            if (v90 >= 0x2AAAAAAAAAAAAAALL) {
              unint64_t v91 = 0x555555555555555;
            }
            else {
              unint64_t v91 = v89;
            }
            if (v91)
            {
              unint64_t v91 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v91);
              long long v82 = *(char **)(a1 + 96);
              long long v87 = *(char **)(a1 + 104);
            }
            else
            {
              uint64_t v92 = 0;
            }
            unint64_t v93 = v91 + 48 * v88;
            *(double *)unint64_t v93 = v54;
            *(double *)(v93 + 8) = v53;
            *(void *)(v93 + 16) = v47;
            *(void *)(v93 + 24) = v128;
            *(unsigned char *)(v93 + 32) = var4;
            *(unsigned char *)(v93 + 33) = v127;
            *(unsigned char *)(v93 + 40) = v126;
            *(unsigned char *)(v93 + 41) = v57;
            *(unsigned char *)(v93 + 42) = v85;
            unint64_t v94 = v93;
            if (v87 != v82)
            {
              do
              {
                long long v95 = *((_OWORD *)v87 - 3);
                long long v96 = *((_OWORD *)v87 - 2);
                *(_OWORD *)(v94 - 21) = *(_OWORD *)(v87 - 21);
                *(_OWORD *)(v94 - 48) = v95;
                *(_OWORD *)(v94 - 32) = v96;
                v94 -= 48;
                v87 -= 48;
              }
              while (v87 != v82);
              long long v82 = (char *)*v129;
            }
            double v63 = (_OWORD *)(v93 + 48);
            *(void *)(a1 + 96) = v94;
            *(void *)(a1 + 104) = v93 + 48;
            *(void *)(a1 + 112) = v91 + 48 * v92;
            if (v82) {
LABEL_104:
            }
              operator delete(v82);
            goto LABEL_105;
          }
        }
        v45 += 48;
        if ((long long *)v45 == v7) {
          goto LABEL_107;
        }
        continue;
      }
    }
    double v10 = *(double *)v6;
    double v9 = *(double *)(v6 + 8);
    double v11 = *(double *)(v6 + 16);
    int64_t v12 = *(void *)(v6 + 24);
    char v13 = *(unsigned char *)(v6 + 32);
    char v14 = *(unsigned char *)(v6 + 33);
    double v15 = a2 - v9;
    if (a2 - v9 >= 0.01)
    {
      if (v11 - v9 - v15 < 0.01)
      {
        uint64_t v42 = 0;
        char v43 = 0;
        double v18 = 0.0;
        double v17 = *(double *)(v6 + 16);
        char v16 = *(unsigned char *)(v6 + 32);
        double v19 = 0.0;
        double v11 = 0.0;
        char v13 = 0;
LABEL_118:
        int v102 = *(unsigned __int8 *)(v6 + 42);
        int v103 = *(unsigned __int8 *)(v6 + 41);
        int v104 = *(unsigned __int8 *)(v6 + 40);
        v131.var0 = v10;
        v131.var1 = v9;
        v131.var2 = v17;
        v131.int64_t var3 = v12;
        v131.BOOL var4 = v16;
        v131.BOOL var5 = v14;
        *(_DWORD *)(&v131.var5 + 1) = *(_DWORD *)(v6 + 34);
        *(_WORD *)(&v131.var5 + 5) = *(_WORD *)(v6 + 38);
        *(double *)&long long v132 = v18;
        *((double *)&v132 + 1) = v19;
        *(double *)&long long v133 = v11;
        *((void *)&v133 + 1) = v42;
        LOBYTE(v134) = v13;
        HIBYTE(v134) = v43;
        HDRawQuantitySample::applyMask((uint64_t)&v131, v125);
        BOOL v105 = v104 != 0;
        BOOL v106 = v103 != 0;
        BOOL v107 = v102 != 0;
        if (v131.var4)
        {
          BOOL v108 = v102 == 0;
          HDStatisticsTimeInterval::addSample(v123, &v131, v108);
          HDStatisticsTimeInterval::addSample(v122, &v131, v108);
          if (*(unsigned char *)(a1 + 25))
          {
            unint64_t v109 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v131.var3);
            long long v110 = (uint64_t *)HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v109);
            HDStatisticsTimeInterval::addSample(v110, &v131, v103 == 0);
            HDStatisticsTimeInterval::addSample(v110 + 5, &v131, v103 == 0);
          }
          BOOL v105 = 1;
          BOOL v106 = 1;
          BOOL v107 = 1;
        }
        if ((_BYTE)v134)
        {
          LOWORD(v130) = v134;
          long long v111 = v133;
          long long v112 = (char *)*v129;
          *(_OWORD *)long long v112 = v132;
          *((_OWORD *)v112 + 1) = v111;
          *((void *)v112 + 4) = v130;
          v112[40] = v105;
          v112[41] = v106;
          v112[42] = v107;
        }
        else
        {
          *(void *)(a1 + 104) = *(void *)(a1 + 96);
        }
        goto LABEL_125;
      }
      double v101 = v10 * (v15 / (v11 - v9));
      double v17 = a2;
      char v16 = *(unsigned char *)(v6 + 32);
      double v18 = v10 - v101;
      double v10 = v101;
      double v19 = a2;
    }
    else
    {
      char v16 = 0;
      double v17 = *(double *)(v6 + 16);
      double v18 = *(double *)v6;
      double v19 = *(double *)(v6 + 8);
    }
    uint64_t v42 = *(void *)(v6 + 24);
    char v43 = *(unsigned char *)(v6 + 33);
    goto LABEL_118;
  }
}

void sub_1BD0CF01C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = a2;
  double v5 = *(void **)(a1 + 208);
  id v3 = (uint64_t **)(a1 + 208);
  double v4 = v5;
  if (!v5) {
    goto LABEL_11;
  }
  unint64_t v6 = v3;
  do
  {
    uint64_t v7 = v4[4];
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      double v9 = v4;
    }
    else {
      double v9 = v4 + 1;
    }
    if (!v8) {
      unint64_t v6 = (uint64_t **)v4;
    }
    double v4 = (void *)*v9;
  }
  while (*v9);
  if (v6 == v3 || (uint64_t)v6[4] > a2)
  {
LABEL_11:
    double v10 = v3 - 1;
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v3 - 1, a2, &v12);
    unint64_t v6 = std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v10, a2, &v12);
  }
  return v6 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    double v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((void *)(a1 + 288), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, a2);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      id v10 = v6;
      uint64_t v7 = (void *)(a1 + 328);
      BOOL v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        double v11 = &v10;
        *((void *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        id v6 = v10;
      }
    }
  }
  return a2;
}

void sub_1BD0CF1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  double v4 = (id *)(a1 + 88);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    id v6 = (void *)(a1 + 368);
    uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
    if (v7)
    {
      id v8 = (id)v7[3];
    }
    else
    {
      id v9 = objc_loadWeakRetained(v4);
      id v8 = [v9 bundleIdentifierForSourceID:a2];

      if (v8)
      {
        id v10 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
        objc_storeStrong(v10 + 3, v8);
      }
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1BD0CF2E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, void *a3)
{
  id v6 = a1 + 1;
  double v5 = a1[1];
  uint64_t v7 = a1 + 1;
  id v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        id v8 = (uint64_t **)v5;
        uint64_t v9 = v5[4];
        if (v9 <= a2) {
          break;
        }
        double v5 = *v8;
        uint64_t v7 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a2) {
        break;
      }
      double v5 = v8[1];
      if (!v5)
      {
        uint64_t v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    id v10 = (char *)operator new(0x78uLL);
    v12[1] = v6;
    *((void *)v10 + 4) = *a3;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    char v13 = 1;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v8, v7, (uint64_t *)v10);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
    return (uint64_t **)v10;
  }
  return v8;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v12 = a2 - 3;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 4);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v103 = *((void *)a2 - 3);
                uint64_t v104 = *(void *)(v13 + 24);
                if (v103 == v104) {
                  return;
                }
                BOOL v105 = *(char **)(*(void *)a3 + 264);
                BOOL v106 = *(char **)(*(void *)a3 + 272);
                BOOL v107 = v105;
                BOOL v108 = v105;
                if (v105 == v106) {
                  goto LABEL_171;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)v13, (long long *)(v13 + 48), a2 - 3, a3);
                return;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, (uint64_t)(a2 - 3), a3);
                return;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, v13 + 144, (uint64_t)(a2 - 3), a3);
                return;
              default:
                JUMPOUT(0);
            }
            do
            {
              if (*(void *)v108 == v103) {
                goto LABEL_168;
              }
              v108 += 8;
            }
            while (v108 != v106);
            BOOL v108 = *(char **)(*(void *)a3 + 272);
LABEL_168:
            while (*(void *)v107 != v104)
            {
              v107 += 8;
              if (v107 == v106)
              {
                BOOL v107 = *(char **)(*(void *)a3 + 272);
                break;
              }
            }
LABEL_171:
            if (v108 - v105 < v107 - v105)
            {
              *(_OWORD *)v226 = *(_OWORD *)(v13 + 16);
              *(_OWORD *)&v226[16] = *(_OWORD *)(v13 + 32);
              long long v218 = *(_OWORD *)v13;
              long long v109 = *v12;
              long long v110 = *(a2 - 2);
              *(_OWORD *)(v13 + 27) = *(long long *)((char *)a2 - 21);
              *(_OWORD *)unint64_t v13 = v109;
              *(_OWORD *)(v13 + 16) = v110;
              *(long long *)((char *)a2 - 21) = *(_OWORD *)&v226[11];
              *unint64_t v12 = v218;
              *(a2 - 2) = *(_OWORD *)v226;
            }
            return;
          }
          if (v14 <= 1151)
          {
            long long v111 = (long long *)(v13 + 48);
            BOOL v113 = (long long *)v13 == a2 || v111 == a2;
            if (a5)
            {
              if (!v113)
              {
                unint64_t v114 = v13;
                do
                {
                  unint64_t v115 = v114;
                  unint64_t v114 = (unint64_t)v111;
                  uint64_t v116 = *(void *)(v115 + 72);
                  uint64_t v117 = *(void *)(v115 + 24);
                  if (v116 != v117)
                  {
                    long long v118 = *(char **)(*(void *)a3 + 264);
                    long long v119 = *(char **)(*(void *)a3 + 272);
                    long long v120 = v118;
                    id v121 = v118;
                    if (v118 != v119)
                    {
                      do
                      {
                        if (*(void *)v121 == v116) {
                          goto LABEL_196;
                        }
                        v121 += 8;
                      }
                      while (v121 != v119);
                      id v121 = *(char **)(*(void *)a3 + 272);
LABEL_196:
                      while (*(void *)v120 != v117)
                      {
                        v120 += 8;
                        if (v120 == v119)
                        {
                          long long v120 = *(char **)(*(void *)a3 + 272);
                          break;
                        }
                      }
                    }
                    if (v121 - v118 < v120 - v118)
                    {
                      uint64_t v227 = *(void *)(v114 + 16);
                      long long v219 = *(_OWORD *)v114;
                      long long v236 = *(_OWORD *)(v115 + 80);
                      unint64_t v122 = v114;
                      while (1)
                      {
                        long long v123 = *(_OWORD *)(v115 + 16);
                        *(_OWORD *)unint64_t v122 = *(_OWORD *)v115;
                        *(_OWORD *)(v122 + 16) = v123;
                        *(_OWORD *)(v122 + 27) = *(_OWORD *)(v115 + 27);
                        if (v115 == v13) {
                          break;
                        }
                        unint64_t v122 = v115;
                        uint64_t v124 = *(void *)(v115 - 24);
                        if (v116 != v124)
                        {
                          uint64_t v125 = *(char **)(*(void *)a3 + 264);
                          char v126 = *(char **)(*(void *)a3 + 272);
                          BOOL v127 = v125;
                          int64_t v128 = v125;
                          if (v125 != v126)
                          {
                            do
                            {
                              if (*(void *)v128 == v116) {
                                goto LABEL_208;
                              }
                              v128 += 8;
                            }
                            while (v128 != v126);
                            int64_t v128 = *(char **)(*(void *)a3 + 272);
LABEL_208:
                            while (*(void *)v127 != v124)
                            {
                              v127 += 8;
                              if (v127 == v126)
                              {
                                BOOL v127 = *(char **)(*(void *)a3 + 272);
                                break;
                              }
                            }
                          }
                          unint64_t v115 = v122 - 48;
                          if (v128 - v125 < v127 - v125) {
                            continue;
                          }
                        }
                        goto LABEL_212;
                      }
                      unint64_t v122 = v13;
LABEL_212:
                      *(_OWORD *)unint64_t v122 = v219;
                      *(void *)(v122 + 16) = v227;
                      *(void *)(v122 + 24) = v116;
                      *(void *)(v122 + 32) = v236;
                      *(_DWORD *)(v122 + 39) = *(_DWORD *)((char *)&v236 + 7);
                    }
                  }
                  long long v111 = (long long *)(v114 + 48);
                }
                while ((long long *)(v114 + 48) != a2);
              }
            }
            else if (!v113)
            {
              do
              {
                unint64_t v201 = a1;
                a1 = (unint64_t)v111;
                uint64_t v202 = *(void *)(v201 + 72);
                uint64_t v203 = *(void *)(v201 + 24);
                if (v202 != v203)
                {
                  v204 = *(char **)(*(void *)a3 + 264);
                  v205 = *(char **)(*(void *)a3 + 272);
                  v206 = v204;
                  v207 = v204;
                  if (v204 != v205)
                  {
                    do
                    {
                      if (*(void *)v207 == v202) {
                        goto LABEL_312;
                      }
                      v207 += 8;
                    }
                    while (v207 != v205);
                    v207 = *(char **)(*(void *)a3 + 272);
LABEL_312:
                    while (*(void *)v206 != v203)
                    {
                      v206 += 8;
                      if (v206 == v205)
                      {
                        v206 = *(char **)(*(void *)a3 + 272);
                        break;
                      }
                    }
                  }
                  if (v207 - v204 < v206 - v204)
                  {
                    uint64_t v230 = *(void *)(a1 + 16);
                    long long v222 = *(_OWORD *)a1;
                    long long v239 = *(_OWORD *)(v201 + 80);
                    unint64_t v208 = a1;
                    do
                    {
                      v209 = (_OWORD *)v208;
                      unint64_t v208 = v201;
                      long long v210 = *(_OWORD *)(v201 + 16);
                      _OWORD *v209 = *(_OWORD *)v201;
                      v209[1] = v210;
                      *(_OWORD *)((char *)v209 + 27) = *(_OWORD *)(v201 + 27);
                      uint64_t v211 = *(void *)(v201 - 24);
                      if (v202 == v211) {
                        break;
                      }
                      v212 = *(char **)(*(void *)a3 + 264);
                      v213 = *(char **)(*(void *)a3 + 272);
                      v214 = v212;
                      v215 = v212;
                      if (v212 != v213)
                      {
                        do
                        {
                          if (*(void *)v215 == v202) {
                            goto LABEL_322;
                          }
                          v215 += 8;
                        }
                        while (v215 != v213);
                        v215 = *(char **)(*(void *)a3 + 272);
LABEL_322:
                        while (*(void *)v214 != v211)
                        {
                          v214 += 8;
                          if (v214 == v213)
                          {
                            v214 = *(char **)(*(void *)a3 + 272);
                            break;
                          }
                        }
                      }
                      unint64_t v201 = v208 - 48;
                    }
                    while (v215 - v212 < v214 - v212);
                    *(_OWORD *)unint64_t v208 = v222;
                    *(void *)(v208 + 16) = v230;
                    *(void *)(v208 + 24) = v202;
                    *(void *)(v208 + 32) = v239;
                    *(_DWORD *)(v208 + 39) = *(_DWORD *)((char *)&v239 + 7);
                  }
                }
                long long v111 = (long long *)(a1 + 48);
              }
              while ((long long *)(a1 + 48) != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((long long *)v13 != a2)
            {
              int64_t v129 = (v15 - 2) >> 1;
              int64_t v130 = v129;
              do
              {
                int64_t v131 = v130;
                if (v129 >= v130)
                {
                  uint64_t v132 = (2 * v130) | 1;
                  unint64_t v133 = v13 + 48 * v132;
                  if (2 * v131 + 2 < (uint64_t)v15)
                  {
                    uint64_t v134 = *(void *)(v133 + 24);
                    uint64_t v135 = *(void *)(v133 + 72);
                    if (v134 != v135)
                    {
                      v137 = *(char **)(*(void *)a3 + 264);
                      v136 = *(char **)(*(void *)a3 + 272);
                      v138 = v137;
                      v139 = v137;
                      if (v137 != v136)
                      {
                        do
                        {
                          if (*(void *)v139 == v134) {
                            goto LABEL_224;
                          }
                          v139 += 8;
                        }
                        while (v139 != v136);
                        v139 = *(char **)(*(void *)a3 + 272);
LABEL_224:
                        while (*(void *)v138 != v135)
                        {
                          v138 += 8;
                          if (v138 == v136)
                          {
                            v138 = *(char **)(*(void *)a3 + 272);
                            break;
                          }
                        }
                      }
                      v133 += 48 * (v139 - v137 < v138 - v137);
                      if (v139 - v137 < v138 - v137) {
                        uint64_t v132 = 2 * v131 + 2;
                      }
                    }
                  }
                  unint64_t v140 = v13 + 48 * v131;
                  uint64_t v141 = *(void *)(v133 + 24);
                  uint64_t v142 = *(void *)(v140 + 24);
                  if (v141 == v142) {
                    goto LABEL_238;
                  }
                  v144 = *(char **)(*(void *)a3 + 264);
                  v143 = *(char **)(*(void *)a3 + 272);
                  v145 = v144;
                  v146 = v144;
                  if (v144 != v143)
                  {
                    do
                    {
                      if (*(void *)v146 == v141) {
                        goto LABEL_234;
                      }
                      v146 += 8;
                    }
                    while (v146 != v143);
                    v146 = *(char **)(*(void *)a3 + 272);
LABEL_234:
                    while (*(void *)v145 != v142)
                    {
                      v145 += 8;
                      if (v145 == v143)
                      {
                        v145 = *(char **)(*(void *)a3 + 272);
                        break;
                      }
                    }
                  }
                  if (v146 - v144 >= v145 - v144)
                  {
LABEL_238:
                    uint64_t v228 = *(void *)(v140 + 16);
                    long long v220 = *(_OWORD *)v140;
                    long long v237 = *(_OWORD *)(v140 + 32);
                    long long v147 = *(_OWORD *)v133;
                    long long v148 = *(_OWORD *)(v133 + 16);
                    *(_OWORD *)(v140 + 27) = *(_OWORD *)(v133 + 27);
                    *(_OWORD *)unint64_t v140 = v147;
                    *(_OWORD *)(v140 + 16) = v148;
                    if (v129 >= v132)
                    {
                      while (1)
                      {
                        uint64_t v150 = 2 * v132;
                        uint64_t v132 = (2 * v132) | 1;
                        unint64_t v149 = v13 + 48 * v132;
                        uint64_t v151 = v150 + 2;
                        if (v151 < (uint64_t)v15)
                        {
                          uint64_t v152 = *(void *)(v149 + 24);
                          uint64_t v153 = *(void *)(v149 + 72);
                          if (v152 != v153)
                          {
                            v154 = *(char **)(*(void *)a3 + 264);
                            v155 = *(char **)(*(void *)a3 + 272);
                            v156 = v154;
                            v157 = v154;
                            if (v154 != v155)
                            {
                              do
                              {
                                if (*(void *)v157 == v152) {
                                  goto LABEL_246;
                                }
                                v157 += 8;
                              }
                              while (v157 != v155);
                              v157 = *(char **)(*(void *)a3 + 272);
LABEL_246:
                              while (*(void *)v156 != v153)
                              {
                                v156 += 8;
                                if (v156 == v155)
                                {
                                  v156 = *(char **)(*(void *)a3 + 272);
                                  break;
                                }
                              }
                            }
                            v149 += 48 * (v157 - v154 < v156 - v154);
                            if (v157 - v154 < v156 - v154) {
                              uint64_t v132 = v151;
                            }
                          }
                        }
                        uint64_t v158 = *(void *)(v149 + 24);
                        if (v158 != v142)
                        {
                          v160 = *(char **)(*(void *)a3 + 264);
                          v159 = *(char **)(*(void *)a3 + 272);
                          v161 = v160;
                          v162 = v160;
                          if (v160 != v159)
                          {
                            do
                            {
                              if (*(void *)v162 == v158) {
                                goto LABEL_256;
                              }
                              v162 += 8;
                            }
                            while (v162 != v159);
                            v162 = *(char **)(*(void *)a3 + 272);
LABEL_256:
                            while (*(void *)v161 != v142)
                            {
                              v161 += 8;
                              if (v161 == v159)
                              {
                                v161 = *(char **)(*(void *)a3 + 272);
                                break;
                              }
                            }
                          }
                          if (v162 - v160 < v161 - v160) {
                            break;
                          }
                        }
                        long long v163 = *(_OWORD *)v149;
                        long long v164 = *(_OWORD *)(v149 + 16);
                        *(_OWORD *)(v133 + 27) = *(_OWORD *)(v149 + 27);
                        *(_OWORD *)unint64_t v133 = v163;
                        *(_OWORD *)(v133 + 16) = v164;
                        unint64_t v133 = v149;
                        if (v129 < v132) {
                          goto LABEL_261;
                        }
                      }
                    }
                    unint64_t v149 = v133;
LABEL_261:
                    *(_OWORD *)unint64_t v149 = v220;
                    *(void *)(v149 + 16) = v228;
                    *(void *)(v149 + 24) = v142;
                    *(void *)(v149 + 32) = v237;
                    *(_DWORD *)(v149 + 39) = *(_DWORD *)((char *)&v237 + 7);
                  }
                }
                int64_t v130 = v131 - 1;
              }
              while (v131);
              int64_t v165 = v14 / 0x30uLL;
              do
              {
                uint64_t v166 = 0;
                *(_OWORD *)v229 = *(_OWORD *)(v13 + 16);
                *(_OWORD *)&v229[16] = *(_OWORD *)(v13 + 32);
                long long v221 = *(_OWORD *)v13;
                uint64_t v167 = v165 - 2;
                if (v165 < 2) {
                  uint64_t v167 = v165 - 1;
                }
                uint64_t v168 = v167 >> 1;
                unint64_t v169 = v13;
                do
                {
                  v170 = (_OWORD *)v169;
                  v169 += 48 * v166 + 48;
                  uint64_t v171 = 2 * v166;
                  uint64_t v166 = (2 * v166) | 1;
                  uint64_t v172 = v171 + 2;
                  if (v171 + 2 < v165)
                  {
                    uint64_t v173 = *(void *)(v169 + 24);
                    uint64_t v174 = *(void *)(v169 + 72);
                    if (v173 != v174)
                    {
                      v176 = *(char **)(*(void *)a3 + 264);
                      v175 = *(char **)(*(void *)a3 + 272);
                      v177 = v176;
                      v178 = v176;
                      if (v176 != v175)
                      {
                        do
                        {
                          if (*(void *)v178 == v173) {
                            goto LABEL_273;
                          }
                          v178 += 8;
                        }
                        while (v178 != v175);
                        v178 = *(char **)(*(void *)a3 + 272);
LABEL_273:
                        while (*(void *)v177 != v174)
                        {
                          v177 += 8;
                          if (v177 == v175)
                          {
                            v177 = *(char **)(*(void *)a3 + 272);
                            break;
                          }
                        }
                      }
                      v169 += 48 * (v178 - v176 < v177 - v176);
                      if (v178 - v176 < v177 - v176) {
                        uint64_t v166 = v172;
                      }
                    }
                  }
                  long long v179 = *(_OWORD *)v169;
                  long long v180 = *(_OWORD *)(v169 + 16);
                  *(_OWORD *)((char *)v170 + 27) = *(_OWORD *)(v169 + 27);
                  _OWORD *v170 = v179;
                  v170[1] = v180;
                }
                while (v166 <= v168);
                a2 -= 3;
                if ((long long *)v169 == a2)
                {
                  *(_OWORD *)(v169 + 27) = *(_OWORD *)&v229[11];
                  *(_OWORD *)unint64_t v169 = v221;
                  *(_OWORD *)(v169 + 16) = *(_OWORD *)v229;
                }
                else
                {
                  long long v181 = *a2;
                  long long v182 = a2[1];
                  *(_OWORD *)(v169 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v169 = v181;
                  *(_OWORD *)(v169 + 16) = v182;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v229[11];
                  *a2 = v221;
                  a2[1] = *(_OWORD *)v229;
                  uint64_t v183 = v169 - v13 + 48;
                  if (v183 >= 49)
                  {
                    unint64_t v184 = (v183 / 0x30uLL - 2) >> 1;
                    unint64_t v185 = v13 + 48 * v184;
                    uint64_t v186 = *(void *)(v185 + 24);
                    uint64_t v187 = *(void *)(v169 + 24);
                    if (v186 != v187)
                    {
                      v189 = *(char **)(*(void *)a3 + 264);
                      v188 = *(char **)(*(void *)a3 + 272);
                      v190 = v189;
                      v191 = v189;
                      if (v189 != v188)
                      {
                        do
                        {
                          if (*(void *)v191 == v186) {
                            goto LABEL_286;
                          }
                          v191 += 8;
                        }
                        while (v191 != v188);
                        v191 = *(char **)(*(void *)a3 + 272);
LABEL_286:
                        while (*(void *)v190 != v187)
                        {
                          v190 += 8;
                          if (v190 == v188)
                          {
                            v190 = *(char **)(*(void *)a3 + 272);
                            break;
                          }
                        }
                      }
                      if (v191 - v189 < v190 - v189)
                      {
                        uint64_t v242 = *(void *)(v169 + 16);
                        long long v238 = *(_OWORD *)v169;
                        long long v233 = *(_OWORD *)(v169 + 32);
                        do
                        {
                          v192 = (_OWORD *)v169;
                          unint64_t v169 = v185;
                          long long v193 = *(_OWORD *)v185;
                          long long v194 = *(_OWORD *)(v185 + 16);
                          *(_OWORD *)((char *)v192 + 27) = *(_OWORD *)(v185 + 27);
                          _OWORD *v192 = v193;
                          v192[1] = v194;
                          if (!v184) {
                            break;
                          }
                          unint64_t v184 = (v184 - 1) >> 1;
                          unint64_t v185 = v13 + 48 * v184;
                          uint64_t v195 = *(void *)(v185 + 24);
                          if (v195 == v187) {
                            break;
                          }
                          v197 = *(char **)(*(void *)a3 + 264);
                          v196 = *(char **)(*(void *)a3 + 272);
                          v198 = v197;
                          v199 = v197;
                          if (v197 != v196)
                          {
                            do
                            {
                              if (*(void *)v199 == v195) {
                                goto LABEL_297;
                              }
                              v199 += 8;
                            }
                            while (v199 != v196);
                            v199 = *(char **)(*(void *)a3 + 272);
LABEL_297:
                            while (*(void *)v198 != v187)
                            {
                              v198 += 8;
                              if (v198 == v196)
                              {
                                v198 = *(char **)(*(void *)a3 + 272);
                                break;
                              }
                            }
                          }
                        }
                        while (v199 - v197 < v198 - v197);
                        *(_OWORD *)unint64_t v169 = v238;
                        *(void *)(v169 + 16) = v242;
                        *(void *)(v169 + 24) = v187;
                        *(void *)(v169 + 32) = v233;
                        *(_DWORD *)(v169 + 39) = *(_DWORD *)((char *)&v233 + 7);
                      }
                    }
                  }
                }
              }
              while (v165-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          double v17 = (long long *)(v13 + 48 * (v15 >> 1));
          if ((unint64_t)v14 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v15 >> 1)), a2 - 3, a3);
            uint64_t v18 = 3 * v16;
            double v19 = (long long *)(a1 + 48 * v16 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)(a1 + 48), v19, a2 - 6, a3);
            double v20 = (long long *)(a1 + 48 + 16 * v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)(a1 + 96), v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder*>(v19, v17, v20, a3);
            *(_OWORD *)v223 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v223[16] = *(_OWORD *)(a1 + 32);
            long long v216 = *(_OWORD *)a1;
            long long v21 = *(long long *)((char *)v17 + 27);
            long long v22 = v17[1];
            *(_OWORD *)a1 = *v17;
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(a1 + 27) = v21;
            *(long long *)((char *)v17 + 27) = *(_OWORD *)&v223[11];
            *double v17 = v216;
            v17[1] = *(_OWORD *)v223;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)(a1 + 48 * (v15 >> 1)), (long long *)a1, a2 - 3, a3);
          }
          --a4;
          if (a5)
          {
            uint64_t v23 = *(void *)(a1 + 24);
            uint64_t v24 = *(void *)a3;
            break;
          }
          uint64_t v25 = *(void *)(a1 - 24);
          uint64_t v23 = *(void *)(a1 + 24);
          if (v25 != v23)
          {
            uint64_t v24 = *(void *)a3;
            uint64_t v26 = *(char **)(*(void *)a3 + 264);
            double v27 = *(char **)(*(void *)a3 + 272);
            double v28 = v26;
            double v29 = v26;
            if (v26 != v27)
            {
              do
              {
                if (*(void *)v29 == v25) {
                  goto LABEL_16;
                }
                v29 += 8;
              }
              while (v29 != v27);
              double v29 = *(char **)(*(void *)a3 + 272);
LABEL_16:
              while (*(void *)v28 != v23)
              {
                v28 += 8;
                if (v28 == v27)
                {
                  double v28 = *(char **)(*(void *)a3 + 272);
                  break;
                }
              }
            }
            if (v29 - v26 < v28 - v26) {
              break;
            }
          }
          uint64_t v241 = *(void *)(a1 + 16);
          long long v232 = *(_OWORD *)(a1 + 32);
          long long v235 = *(_OWORD *)a1;
          uint64_t v67 = *((void *)a2 - 3);
          if (v23 == v67) {
            goto LABEL_107;
          }
          uint64_t v68 = *(char **)(*(void *)a3 + 264);
          uint64_t v69 = *(char **)(*(void *)a3 + 272);
          if (v68 == v69)
          {
            uint64_t v71 = *(char **)(*(void *)a3 + 264);
            int8x16_t v70 = v71;
          }
          else
          {
            int8x16_t v70 = *(char **)(*(void *)a3 + 264);
            while (*(void *)v70 != v23)
            {
              v70 += 8;
              if (v70 == v69)
              {
                int8x16_t v70 = *(char **)(*(void *)a3 + 272);
                break;
              }
            }
            uint64_t v71 = *(char **)(*(void *)a3 + 264);
            while (*(void *)v71 != v67)
            {
              v71 += 8;
              if (v71 == v69)
              {
                uint64_t v71 = *(char **)(*(void *)a3 + 272);
                break;
              }
            }
          }
          if (v70 - v68 >= v71 - v68)
          {
LABEL_107:
            unint64_t v13 = a1 + 48;
            if (a1 + 48 < (unint64_t)a2)
            {
              uint64_t v75 = *(void *)a3;
              unint64_t v76 = a1;
              do
              {
                uint64_t v77 = *(void *)(v76 + 72);
                unint64_t v76 = v13;
                if (v23 != v77)
                {
                  uint64_t v78 = *(char **)(v75 + 264);
                  int64_t v79 = *(char **)(v75 + 272);
                  long long v80 = v78;
                  long long v81 = v78;
                  if (v78 != v79)
                  {
                    do
                    {
                      if (*(void *)v81 == v23) {
                        goto LABEL_114;
                      }
                      v81 += 8;
                    }
                    while (v81 != v79);
                    long long v81 = *(char **)(v75 + 272);
LABEL_114:
                    while (*(void *)v80 != v77)
                    {
                      v80 += 8;
                      if (v80 == v79)
                      {
                        long long v80 = *(char **)(v75 + 272);
                        break;
                      }
                    }
                  }
                  if (v81 - v78 < v80 - v78) {
                    break;
                  }
                }
                v13 += 48;
              }
              while (v76 + 48 < (unint64_t)a2);
            }
          }
          else
          {
            unint64_t v13 = a1;
            do
            {
              do
              {
                uint64_t v72 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v72);
              if (v68 == v69)
              {
                long long v74 = *(char **)(*(void *)a3 + 264);
                uint64_t v73 = v74;
              }
              else
              {
                uint64_t v73 = *(char **)(*(void *)a3 + 264);
                while (*(void *)v73 != v23)
                {
                  v73 += 8;
                  if (v73 == v69)
                  {
                    uint64_t v73 = *(char **)(*(void *)a3 + 272);
                    break;
                  }
                }
                long long v74 = *(char **)(*(void *)a3 + 264);
                while (*(void *)v74 != v72)
                {
                  v74 += 8;
                  if (v74 == v69)
                  {
                    long long v74 = *(char **)(*(void *)a3 + 272);
                    break;
                  }
                }
              }
            }
            while (v73 - v68 >= v74 - v68);
          }
          long long v82 = a2;
          if (v13 < (unint64_t)a2)
          {
            uint64_t v83 = *(void *)a3;
            long long v82 = a2;
            do
            {
              uint64_t v84 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v84) {
                break;
              }
              BOOL v85 = *(char **)(v83 + 264);
              unint64_t v86 = *(char **)(v83 + 272);
              long long v87 = v85;
              unint64_t v88 = v85;
              if (v85 != v86)
              {
                do
                {
                  if (*(void *)v88 == v23) {
                    goto LABEL_126;
                  }
                  v88 += 8;
                }
                while (v88 != v86);
                unint64_t v88 = *(char **)(v83 + 272);
LABEL_126:
                while (*(void *)v87 != v84)
                {
                  v87 += 8;
                  if (v87 == v86)
                  {
                    long long v87 = *(char **)(v83 + 272);
                    break;
                  }
                }
              }
            }
            while (v88 - v85 < v87 - v85);
          }
          while (v13 < (unint64_t)v82)
          {
            *(_OWORD *)v225 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v225[16] = *(_OWORD *)(v13 + 32);
            long long v217 = *(_OWORD *)v13;
            long long v89 = *v82;
            long long v90 = v82[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v82 + 27);
            *(_OWORD *)unint64_t v13 = v89;
            *(_OWORD *)(v13 + 16) = v90;
            *(long long *)((char *)v82 + 27) = *(_OWORD *)&v225[11];
            long long *v82 = v217;
            v82[1] = *(_OWORD *)v225;
            uint64_t v91 = *(void *)a3;
            do
            {
              do
              {
                uint64_t v92 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v92);
              unint64_t v93 = *(char **)(v91 + 264);
              unint64_t v94 = *(char **)(v91 + 272);
              if (v93 == v94)
              {
                long long v96 = *(char **)(v91 + 264);
                long long v95 = v96;
              }
              else
              {
                long long v95 = *(char **)(v91 + 264);
                while (*(void *)v95 != v23)
                {
                  v95 += 8;
                  if (v95 == v94)
                  {
                    long long v95 = *(char **)(v91 + 272);
                    break;
                  }
                }
                long long v96 = *(char **)(v91 + 264);
                while (*(void *)v96 != v92)
                {
                  v96 += 8;
                  if (v96 == v94)
                  {
                    long long v96 = *(char **)(v91 + 272);
                    break;
                  }
                }
              }
            }
            while (v95 - v93 >= v96 - v93);
            do
            {
              uint64_t v97 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v97) {
                break;
              }
              if (v93 == v94)
              {
                uint64_t v99 = v93;
                unint64_t v98 = v93;
              }
              else
              {
                unint64_t v98 = v93;
                while (*(void *)v98 != v23)
                {
                  v98 += 8;
                  if (v98 == v94)
                  {
                    unint64_t v98 = v94;
                    break;
                  }
                }
                uint64_t v99 = v93;
                while (*(void *)v99 != v97)
                {
                  v99 += 8;
                  if (v99 == v94)
                  {
                    uint64_t v99 = v94;
                    break;
                  }
                }
              }
            }
            while (v98 - v93 < v99 - v93);
          }
          BOOL v100 = (long long *)(v13 - 48);
          BOOL v5 = v13 - 48 >= a1;
          BOOL v6 = v13 - 48 == a1;
          if (v13 - 48 != a1)
          {
            long long v101 = *v100;
            long long v102 = *(_OWORD *)(v13 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
            *(_OWORD *)a1 = v101;
            *(_OWORD *)(a1 + 16) = v102;
          }
          a5 = 0;
          *BOOL v100 = v235;
          *(void *)(v13 - 32) = v241;
          *(void *)(v13 - 24) = v23;
          *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v232 + 7);
          *(void *)(v13 - 16) = v232;
        }
        uint64_t v240 = *(void *)(a1 + 16);
        long long v231 = *(_OWORD *)(a1 + 32);
        long long v234 = *(_OWORD *)a1;
        unint64_t v30 = a1;
        do
        {
          unint64_t v31 = v30;
          v30 += 48;
          uint64_t v32 = *(void *)(v31 + 72);
          if (v32 == v23) {
            break;
          }
          uint64_t v33 = *(char **)(v24 + 264);
          char v34 = *(char **)(v24 + 272);
          uint64_t v35 = v33;
          uint64_t v36 = v33;
          if (v33 != v34)
          {
            do
            {
              if (*(void *)v36 == v32) {
                goto LABEL_26;
              }
              v36 += 8;
            }
            while (v36 != v34);
            uint64_t v36 = *(char **)(v24 + 272);
LABEL_26:
            while (*(void *)v35 != v23)
            {
              v35 += 8;
              if (v35 == v34)
              {
                uint64_t v35 = *(char **)(v24 + 272);
                break;
              }
            }
          }
        }
        while (v36 - v33 < v35 - v33);
        long long v37 = a2;
        if (v31 == a1)
        {
          long long v37 = a2;
          if (v30 < (unint64_t)a2)
          {
            long long v37 = a2;
            do
            {
              uint64_t v43 = *((void *)v37 - 3);
              v37 -= 3;
              if (v43 != v23)
              {
                char v44 = *(char **)(v24 + 264);
                unint64_t v45 = *(char **)(v24 + 272);
                long long v46 = v44;
                uint64_t v47 = v44;
                if (v44 != v45)
                {
                  do
                  {
                    if (*(void *)v47 == v43) {
                      goto LABEL_48;
                    }
                    v47 += 8;
                  }
                  while (v47 != v45);
                  uint64_t v47 = *(char **)(v24 + 272);
LABEL_48:
                  while (*(void *)v46 != v23)
                  {
                    v46 += 8;
                    if (v46 == v45)
                    {
                      long long v46 = *(char **)(v24 + 272);
                      break;
                    }
                  }
                }
                if (v47 - v44 < v46 - v44) {
                  break;
                }
              }
            }
            while (v30 < (unint64_t)v37);
          }
        }
        else
        {
          do
          {
            do
            {
              uint64_t v38 = *((void *)v37 - 3);
              v37 -= 3;
            }
            while (v38 == v23);
            double v39 = *(char **)(v24 + 264);
            unint64_t v40 = *(char **)(v24 + 272);
            uint64_t v41 = v39;
            uint64_t v42 = v39;
            if (v39 != v40)
            {
              do
              {
                if (*(void *)v42 == v38) {
                  goto LABEL_36;
                }
                v42 += 8;
              }
              while (v42 != v40);
              uint64_t v42 = *(char **)(v24 + 272);
LABEL_36:
              while (*(void *)v41 != v23)
              {
                v41 += 8;
                if (v41 == v40)
                {
                  uint64_t v41 = *(char **)(v24 + 272);
                  break;
                }
              }
            }
          }
          while (v42 - v39 >= v41 - v39);
        }
        unint64_t v13 = v30;
        if (v30 < (unint64_t)v37)
        {
          double v48 = v37;
          do
          {
            *(_OWORD *)v224 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v224[16] = *(_OWORD *)(v13 + 32);
            long long v49 = *(_OWORD *)v13;
            long long v51 = *v48;
            long long v50 = v48[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v48 + 27);
            *(_OWORD *)unint64_t v13 = v51;
            *(_OWORD *)(v13 + 16) = v50;
            *(long long *)((char *)v48 + 27) = *(_OWORD *)&v224[11];
            *double v48 = v49;
            v48[1] = *(_OWORD *)v224;
            uint64_t v52 = *(void *)a3;
            do
            {
              uint64_t v53 = *(void *)(v13 + 72);
              v13 += 48;
              if (v53 == v23) {
                break;
              }
              double v54 = *(char **)(v52 + 264);
              double v55 = *(char **)(v52 + 272);
              int v56 = v54;
              int v57 = v54;
              if (v54 != v55)
              {
                do
                {
                  if (*(void *)v57 == v53) {
                    goto LABEL_61;
                  }
                  v57 += 8;
                }
                while (v57 != v55);
                int v57 = *(char **)(v52 + 272);
LABEL_61:
                while (*(void *)v56 != v23)
                {
                  v56 += 8;
                  if (v56 == v55)
                  {
                    int v56 = *(char **)(v52 + 272);
                    break;
                  }
                }
              }
            }
            while (v57 - v54 < v56 - v54);
            do
            {
              do
              {
                uint64_t v58 = *((void *)v48 - 3);
                v48 -= 3;
              }
              while (v58 == v23);
              unint64_t v59 = *(char **)(v52 + 264);
              unint64_t v60 = *(char **)(v52 + 272);
              long long v61 = v59;
              long long v62 = v59;
              if (v59 != v60)
              {
                do
                {
                  if (*(void *)v62 == v58) {
                    goto LABEL_70;
                  }
                  v62 += 8;
                }
                while (v62 != v60);
                long long v62 = *(char **)(v52 + 272);
LABEL_70:
                while (*(void *)v61 != v23)
                {
                  v61 += 8;
                  if (v61 == v60)
                  {
                    long long v61 = *(char **)(v52 + 272);
                    break;
                  }
                }
              }
            }
            while (v62 - v59 >= v61 - v59);
          }
          while (v13 < (unint64_t)v48);
        }
        double v63 = (long long *)(v13 - 48);
        if (v13 - 48 != a1)
        {
          long long v64 = *v63;
          long long v65 = *(_OWORD *)(v13 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
          *(_OWORD *)a1 = v64;
          *(_OWORD *)(a1 + 16) = v65;
        }
        *double v63 = v234;
        *(void *)(v13 - 32) = v240;
        *(void *)(v13 - 24) = v23;
        *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v231 + 7);
        *(void *)(v13 - 16) = v231;
        if (v30 >= (unint64_t)v37) {
          break;
        }
LABEL_80:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(a1, v13 - 48, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, v13 - 48, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder*>(v13, (uint64_t)a2, a3))
      {
        break;
      }
      if (!v66) {
        goto LABEL_80;
      }
    }
    a2 = (long long *)(v13 - 48);
    if (!v66) {
      continue;
    }
    break;
  }
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder*>(long long *a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = *((void *)a2 + 3);
  uint64_t v5 = *((void *)a1 + 3);
  if (v4 == v5) {
    goto LABEL_23;
  }
  BOOL v6 = *(char **)(*(void *)a4 + 264);
  uint64_t v7 = *(char **)(*(void *)a4 + 272);
  if (v6 == v7)
  {
    uint64_t v9 = *(char **)(*(void *)a4 + 264);
    id v8 = v9;
  }
  else
  {
    id v8 = *(char **)(*(void *)a4 + 264);
    while (*(void *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        id v8 = *(char **)(*(void *)a4 + 272);
        break;
      }
    }
    uint64_t v9 = *(char **)(*(void *)a4 + 264);
    while (*(void *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        uint64_t v9 = *(char **)(*(void *)a4 + 272);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    uint64_t v13 = *((void *)a3 + 3);
    if (v13 != v4)
    {
      uint64_t v14 = *(char **)(*(void *)a4 + 264);
      unint64_t v15 = *(char **)(*(void *)a4 + 272);
      unint64_t v16 = v14;
      double v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(void *)v17 == v13) {
            goto LABEL_28;
          }
          v17 += 8;
        }
        while (v17 != v15);
        double v17 = *(char **)(*(void *)a4 + 272);
LABEL_28:
        while (*(void *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            unint64_t v16 = *(char **)(*(void *)a4 + 272);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        long long v18 = *a2;
        *(_OWORD *)long long v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        long long v19 = *(long long *)((char *)a3 + 27);
        long long v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(long long *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        __n128 result = *(__n128 *)&v46[11];
        *(long long *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        uint64_t v22 = *((void *)a2 + 3);
        uint64_t v23 = *((void *)a1 + 3);
        if (v22 != v23)
        {
          uint64_t v24 = *(char **)(*(void *)a4 + 264);
          uint64_t v25 = *(char **)(*(void *)a4 + 272);
          uint64_t v26 = v24;
          double v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(void *)v27 == v22) {
                goto LABEL_37;
              }
              v27 += 8;
            }
            while (v27 != v25);
            double v27 = *(char **)(*(void *)a4 + 272);
LABEL_37:
            while (*(void *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                uint64_t v26 = *(char **)(*(void *)a4 + 272);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            long long v28 = *a1;
            *(_OWORD *)uint64_t v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            long long v29 = *(long long *)((char *)a2 + 27);
            long long v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(long long *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            __n128 result = *(__n128 *)&v47[11];
            *(long long *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    uint64_t v10 = *((void *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        unint64_t v12 = *(char **)(*(void *)a4 + 264);
        double v11 = v12;
      }
      else
      {
        double v11 = *(char **)(*(void *)a4 + 264);
        while (*(void *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            double v11 = *(char **)(*(void *)a4 + 272);
            break;
          }
        }
        unint64_t v12 = *(char **)(*(void *)a4 + 264);
        while (*(void *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            unint64_t v12 = *(char **)(*(void *)a4 + 272);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        long long v31 = a1[1];
        long long v32 = *a1;
        *(void *)long long v49 = *((void *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        long long v33 = *(long long *)((char *)a3 + 27);
        long long v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(long long *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        __n128 result = *(__n128 *)&v49[3];
        *(long long *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    long long v35 = *a1;
    *(_OWORD *)double v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    long long v36 = *(long long *)((char *)a2 + 27);
    long long v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(long long *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    __n128 result = *(__n128 *)&v48[11];
    *(long long *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    uint64_t v38 = *((void *)a3 + 3);
    uint64_t v39 = *((void *)a2 + 3);
    if (v38 != v39)
    {
      unint64_t v40 = *(char **)(*(void *)a4 + 264);
      uint64_t v41 = *(char **)(*(void *)a4 + 272);
      uint64_t v42 = v40;
      uint64_t v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(void *)v43 == v38) {
            goto LABEL_50;
          }
          v43 += 8;
        }
        while (v43 != v41);
        uint64_t v43 = *(char **)(*(void *)a4 + 272);
LABEL_50:
        while (*(void *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            uint64_t v42 = *(char **)(*(void *)a4 + 272);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        long long v31 = a2[1];
        long long v32 = *a2;
        *(void *)long long v49 = *((void *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        long long v44 = *(long long *)((char *)a3 + 27);
        long long v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(long long *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 - 24);
      uint64_t v9 = *(void *)(a1 + 24);
      if (v8 == v9) {
        return result;
      }
      uint64_t v10 = *(char **)(*(void *)a3 + 264);
      double v11 = *(char **)(*(void *)a3 + 272);
      unint64_t v12 = v10;
      uint64_t v13 = v10;
      if (v10 == v11) {
        goto LABEL_10;
      }
      do
      {
        if (*(void *)v13 == v8) {
          goto LABEL_7;
        }
        v13 += 8;
      }
      while (v13 != v11);
      uint64_t v13 = *(char **)(*(void *)a3 + 272);
      do
      {
LABEL_7:
        if (*(void *)v12 == v9) {
          goto LABEL_10;
        }
        v12 += 8;
      }
      while (v12 != v11);
      unint64_t v12 = *(char **)(*(void *)a3 + 272);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        uint64_t v14 = (long long *)(a2 - 48);
        long long v15 = *(_OWORD *)a1;
        *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        long long v16 = *(_OWORD *)(a2 - 21);
        long long v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *uint64_t v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(long long *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), a3);
      uint64_t v19 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      int v20 = 0;
      break;
  }
  while (1)
  {
    uint64_t v21 = *(void *)(v19 + 24);
    uint64_t v22 = *(void *)(v18 + 24);
    if (v21 != v22)
    {
      uint64_t v23 = *(char **)(*(void *)a3 + 264);
      uint64_t v24 = *(char **)(*(void *)a3 + 272);
      uint64_t v25 = v23;
      uint64_t v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(void *)v26 == v21) {
            goto LABEL_19;
          }
          v26 += 8;
        }
        while (v26 != v24);
        uint64_t v26 = *(char **)(*(void *)a3 + 272);
LABEL_19:
        while (*(void *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            uint64_t v25 = *(char **)(*(void *)a3 + 272);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        long long v34 = *(_OWORD *)v19;
        uint64_t v36 = *(void *)(v19 + 16);
        long long v37 = *(_OWORD *)(v19 + 32);
        uint64_t v27 = v19;
        while (1)
        {
          long long v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1) {
            break;
          }
          uint64_t v27 = v18;
          uint64_t v29 = *(void *)(v18 - 24);
          if (v21 != v29)
          {
            long long v30 = *(char **)(*(void *)a3 + 264);
            long long v31 = *(char **)(*(void *)a3 + 272);
            long long v32 = v30;
            long long v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(void *)v33 == v21) {
                  goto LABEL_30;
                }
                v33 += 8;
              }
              while (v33 != v31);
              long long v33 = *(char **)(*(void *)a3 + 272);
LABEL_30:
              while (*(void *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  long long v32 = *(char **)(*(void *)a3 + 272);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30) {
              continue;
            }
          }
          goto LABEL_36;
        }
        uint64_t v27 = a1;
LABEL_36:
        *(_OWORD *)uint64_t v27 = v34;
        *(void *)(v27 + 16) = v36;
        *(void *)(v27 + 24) = v21;
        *(void *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8) {
          return v19 + 48 == a2;
        }
      }
    }
    uint64_t v18 = v19;
    v19 += 48;
    if (v19 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)a2, (long long *)a3, a5).n128_u64[0];
  uint64_t v11 = *(void *)(a4 + 24);
  uint64_t v12 = *(void *)(a3 + 24);
  if (v11 != v12)
  {
    uint64_t v13 = *(char **)(*(void *)a5 + 264);
    uint64_t v14 = *(char **)(*(void *)a5 + 272);
    long long v15 = v13;
    long long v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(void *)v16 == v11) {
          goto LABEL_6;
        }
        v16 += 8;
      }
      while (v16 != v14);
      long long v16 = *(char **)(*(void *)a5 + 272);
LABEL_6:
      while (*(void *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          long long v15 = *(char **)(*(void *)a5 + 272);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      long long v17 = *(_OWORD *)a3;
      *(_OWORD *)uint64_t v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      long long v18 = *(_OWORD *)(a4 + 27);
      long long v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v38;
      __n128 result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      uint64_t v20 = *(void *)(a3 + 24);
      uint64_t v21 = *(void *)(a2 + 24);
      if (v20 != v21)
      {
        uint64_t v22 = *(char **)(*(void *)a5 + 264);
        uint64_t v23 = *(char **)(*(void *)a5 + 272);
        uint64_t v24 = v22;
        uint64_t v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(void *)v25 == v20) {
              goto LABEL_15;
            }
            v25 += 8;
          }
          while (v25 != v23);
          uint64_t v25 = *(char **)(*(void *)a5 + 272);
LABEL_15:
          while (*(void *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              uint64_t v24 = *(char **)(*(void *)a5 + 272);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          long long v26 = *(_OWORD *)a2;
          *(_OWORD *)uint64_t v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          long long v27 = *(_OWORD *)(a3 + 27);
          long long v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 16) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)v39;
          __n128 result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          uint64_t v29 = *(void *)(a2 + 24);
          uint64_t v30 = *(void *)(a1 + 24);
          if (v29 != v30)
          {
            long long v31 = *(char **)(*(void *)a5 + 264);
            long long v32 = *(char **)(*(void *)a5 + 272);
            long long v33 = v31;
            long long v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(void *)v34 == v29) {
                  goto LABEL_24;
                }
                v34 += 8;
              }
              while (v34 != v32);
              long long v34 = *(char **)(*(void *)a5 + 272);
LABEL_24:
              while (*(void *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  long long v33 = *(char **)(*(void *)a5 + 272);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              long long v35 = *(_OWORD *)a1;
              *(_OWORD *)unint64_t v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              long long v36 = *(_OWORD *)(a2 + 27);
              long long v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 16) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 16) = *(_OWORD *)v40;
              __n128 result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  uint64_t v13 = *(void *)(a5 + 24);
  uint64_t v14 = *(void *)(a4 + 24);
  if (v13 != v14)
  {
    long long v15 = *(char **)(*(void *)a6 + 264);
    long long v16 = *(char **)(*(void *)a6 + 272);
    long long v17 = v15;
    long long v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(void *)v18 == v13) {
          goto LABEL_6;
        }
        v18 += 8;
      }
      while (v18 != v16);
      long long v18 = *(char **)(*(void *)a6 + 272);
LABEL_6:
      while (*(void *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          long long v17 = *(char **)(*(void *)a6 + 272);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      long long v19 = *(_OWORD *)a4;
      *(_OWORD *)long long v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      long long v20 = *(_OWORD *)(a5 + 27);
      long long v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 16) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v49;
      __n128 result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      uint64_t v22 = *(void *)(a4 + 24);
      uint64_t v23 = *(void *)(a3 + 24);
      if (v22 != v23)
      {
        uint64_t v24 = *(char **)(*(void *)a6 + 264);
        uint64_t v25 = *(char **)(*(void *)a6 + 272);
        long long v26 = v24;
        long long v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(void *)v27 == v22) {
              goto LABEL_15;
            }
            v27 += 8;
          }
          while (v27 != v25);
          long long v27 = *(char **)(*(void *)a6 + 272);
LABEL_15:
          while (*(void *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              long long v26 = *(char **)(*(void *)a6 + 272);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          long long v28 = *(_OWORD *)a3;
          *(_OWORD *)long long v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          long long v29 = *(_OWORD *)(a4 + 27);
          long long v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 16) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 16) = *(_OWORD *)v50;
          __n128 result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          uint64_t v31 = *(void *)(a3 + 24);
          uint64_t v32 = *(void *)(a2 + 24);
          if (v31 != v32)
          {
            long long v33 = *(char **)(*(void *)a6 + 264);
            long long v34 = *(char **)(*(void *)a6 + 272);
            long long v35 = v33;
            long long v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(void *)v36 == v31) {
                  goto LABEL_24;
                }
                v36 += 8;
              }
              while (v36 != v34);
              long long v36 = *(char **)(*(void *)a6 + 272);
LABEL_24:
              while (*(void *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  long long v35 = *(char **)(*(void *)a6 + 272);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              long long v37 = *(_OWORD *)a2;
              *(_OWORD *)long long v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              long long v38 = *(_OWORD *)(a3 + 27);
              long long v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 16) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 16) = *(_OWORD *)v51;
              __n128 result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              uint64_t v40 = *(void *)(a2 + 24);
              uint64_t v41 = *(void *)(a1 + 24);
              if (v40 != v41)
              {
                uint64_t v42 = *(char **)(*(void *)a6 + 264);
                uint64_t v43 = *(char **)(*(void *)a6 + 272);
                long long v44 = v42;
                long long v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(void *)v45 == v40) {
                      goto LABEL_33;
                    }
                    v45 += 8;
                  }
                  while (v45 != v43);
                  long long v45 = *(char **)(*(void *)a6 + 272);
LABEL_33:
                  while (*(void *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      long long v44 = *(char **)(*(void *)a6 + 272);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  long long v46 = *(_OWORD *)a1;
                  *(_OWORD *)uint64_t v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  long long v47 = *(_OWORD *)(a2 + 27);
                  long long v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 16) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 16) = *(_OWORD *)v52;
                  __n128 result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  uint64_t v8 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v9 = [MEMORY[0x1E4F2B618] secondUnit];
  uint64_t v75 = a3;
  double v10 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::overallStatistics((uint64_t)v78, a3);
  uint64_t v11 = *(void *)(a4 + 24);
  if (!v11) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t, void **, double))(*(void *)v11 + 48))(v11, v78, v10);
  uint64_t v13 = *(double **)(v12 + 8);
  double v14 = 0.0;
  while (v13 != *(double **)(v12 + 16))
  {
    double v16 = *v13;
    double v15 = v13[1];
    v13 += 2;
    double v14 = v14 + v15 - v16;
  }
  long long v17 = [v8 quantityWithUnit:v9 doubleValue:v14 + *(double *)(v12 + 32)];
  [v7 setDuration:v17];

  if (__p)
  {
    long long v82 = __p;
    operator delete(__p);
  }
  if (v78[1])
  {
    *(void **)&long long v79 = v78[1];
    operator delete(v78[1]);
  }

  double v18 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::overallStatistics((uint64_t)v78, a3);
  uint64_t v19 = *(void *)(a4 + 24);
  if (!v19) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  objc_msgSend(v7, "setDataCount:", *(void *)(*(uint64_t (**)(uint64_t, void **, double))(*(void *)v19 + 48))(v19, v78, v18));
  if (__p)
  {
    long long v82 = __p;
    operator delete(__p);
  }
  if (v78[1])
  {
    *(void **)&long long v79 = v78[1];
    operator delete(v78[1]);
  }
  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    goto LABEL_120;
  }
  uint64_t v71 = v7;
  id v74 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v73 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  *(_OWORD *)uint64_t v78 = 0u;
  long long v79 = 0u;
  float v80 = 1.0;
  long long v20 = *(void **)(a3 + 200);
  unint64_t v76 = (void *)(a3 + 208);
  if (v20 == (void *)(a3 + 208)) {
    goto LABEL_119;
  }
  do
  {
    long long v21 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a3, v20[4]);
    uint64_t v22 = v21;
    if (!v21) {
      goto LABEL_95;
    }
    unint64_t v23 = [v21 hash];
    unint64_t v24 = v23;
    unint64_t v25 = (unint64_t)v78[1];
    if (!v78[1]) {
      goto LABEL_35;
    }
    uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v78[1]);
    v26.i16[0] = vaddlv_u8(v26);
    unint64_t v27 = v26.u32[0];
    if (v26.u32[0] > 1uLL)
    {
      unint64_t v4 = v23;
      if ((void *)v23 >= v78[1]) {
        unint64_t v4 = v23 % (unint64_t)v78[1];
      }
    }
    else
    {
      unint64_t v4 = ((unint64_t)v78[1] - 1) & v23;
    }
    long long v28 = (char **)*((void *)v78[0] + v4);
    if (!v28 || (long long v29 = *v28) == 0)
    {
LABEL_35:
      long long v35 = (char *)operator new(0x68uLL);
      v83[0] = v35;
      v83[1] = &v79;
      *(void *)long long v35 = 0;
      *((void *)v35 + 1) = v24;
      *((void *)v35 + 2) = v22;
      *(_OWORD *)(v35 + 24) = 0u;
      *(_OWORD *)(v35 + 40) = 0u;
      *(_OWORD *)(v35 + 56) = 0u;
      *(_OWORD *)(v35 + 72) = 0u;
      *(_OWORD *)(v35 + 88) = 0u;
      char v84 = 1;
      float v36 = (float)(unint64_t)(*((void *)&v79 + 1) + 1);
      if (v25 && (float)(v80 * (float)v25) >= v36)
      {
LABEL_81:
        uint64_t v52 = (char **)*((void *)v78[0] + v4);
        long long v29 = (char *)v83[0];
        if (v52)
        {
          *(void *)v83[0] = *v52;
        }
        else
        {
          *(void *)v83[0] = v79;
          *(void *)&long long v79 = v29;
          *((void *)v78[0] + v4) = &v79;
          if (!*(void *)v29)
          {
LABEL_90:
            v83[0] = 0;
            ++*((void *)&v79 + 1);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v83);
            goto LABEL_91;
          }
          unint64_t v53 = *(void *)(*(void *)v29 + 8);
          if ((v25 & (v25 - 1)) != 0)
          {
            if (v53 >= v25) {
              v53 %= v25;
            }
          }
          else
          {
            v53 &= v25 - 1;
          }
          uint64_t v52 = (char **)((char *)v78[0] + 8 * v53);
        }
        *uint64_t v52 = v29;
        goto LABEL_90;
      }
      BOOL v37 = (v25 & (v25 - 1)) != 0;
      if (v25 < 3) {
        BOOL v37 = 1;
      }
      unint64_t v38 = v37 | (2 * v25);
      unint64_t v39 = vcvtps_u32_f32(v36 / v80);
      if (v38 <= v39) {
        int8x8_t prime = (int8x8_t)v39;
      }
      else {
        int8x8_t prime = (int8x8_t)v38;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v25 = (unint64_t)v78[1];
      if ((void *)*(void *)&prime > v78[1]) {
        goto LABEL_47;
      }
      if ((void *)*(void *)&prime < v78[1])
      {
        unint64_t v47 = vcvtps_u32_f32((float)*((unint64_t *)&v79 + 1) / v80);
        if (v78[1] < (void *)3
          || (uint8x8_t v48 = (uint8x8_t)vcnt_s8((int8x8_t)v78[1]), v48.i16[0] = vaddlv_u8(v48), v48.u32[0] > 1uLL))
        {
          unint64_t v47 = std::__next_prime(v47);
        }
        else
        {
          uint64_t v49 = 1 << -(char)__clz(v47 - 1);
          if (v47 >= 2) {
            unint64_t v47 = v49;
          }
        }
        if (*(void *)&prime <= v47) {
          int8x8_t prime = (int8x8_t)v47;
        }
        if (*(void *)&prime >= v25)
        {
          unint64_t v25 = (unint64_t)v78[1];
        }
        else
        {
          if (prime)
          {
LABEL_47:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v41 = operator new(8 * *(void *)&prime);
            uint64_t v42 = v78[0];
            v78[0] = v41;
            if (v42) {
              operator delete(v42);
            }
            uint64_t v43 = 0;
            v78[1] = (void *)prime;
            do
              *((void *)v78[0] + v43++) = 0;
            while (*(void *)&prime != v43);
            long long v44 = (void **)v79;
            if ((void)v79)
            {
              unint64_t v45 = *(void *)(v79 + 8);
              uint8x8_t v46 = (uint8x8_t)vcnt_s8(prime);
              v46.i16[0] = vaddlv_u8(v46);
              if (v46.u32[0] > 1uLL)
              {
                if (v45 >= *(void *)&prime) {
                  v45 %= *(void *)&prime;
                }
              }
              else
              {
                v45 &= *(void *)&prime - 1;
              }
              *((void *)v78[0] + v45) = &v79;
              for (i = *v44; i; unint64_t v45 = v51)
              {
                unint64_t v51 = i[1];
                if (v46.u32[0] > 1uLL)
                {
                  if (v51 >= *(void *)&prime) {
                    v51 %= *(void *)&prime;
                  }
                }
                else
                {
                  v51 &= *(void *)&prime - 1;
                }
                if (v51 != v45)
                {
                  if (!*((void *)v78[0] + v51))
                  {
                    *((void *)v78[0] + v51) = v44;
                    goto LABEL_72;
                  }
                  char *v44 = (void *)*i;
                  void *i = **((void **)v78[0] + v51);
                  **((void **)v78[0] + v51) = i;
                  uint64_t i = v44;
                }
                unint64_t v51 = v45;
LABEL_72:
                long long v44 = (void **)i;
                uint64_t i = (void *)*i;
              }
            }
            unint64_t v25 = (unint64_t)prime;
            goto LABEL_76;
          }
          int v57 = v78[0];
          v78[0] = 0;
          if (v57) {
            operator delete(v57);
          }
          unint64_t v25 = 0;
          v78[1] = 0;
        }
      }
LABEL_76:
      if ((v25 & (v25 - 1)) != 0)
      {
        if (v24 >= v25) {
          unint64_t v4 = v24 % v25;
        }
        else {
          unint64_t v4 = v24;
        }
      }
      else
      {
        unint64_t v4 = (v25 - 1) & v24;
      }
      goto LABEL_81;
    }
    unint64_t v72 = (unint64_t)v78[1] - 1;
    while (1)
    {
      unint64_t v30 = *((void *)v29 + 1);
      if (v30 == v24) {
        break;
      }
      if (v27 > 1)
      {
        if (v30 >= v25) {
          v30 %= v25;
        }
      }
      else
      {
        v30 &= v72;
      }
      if (v30 != v4) {
        goto LABEL_35;
      }
LABEL_34:
      long long v29 = *(char **)v29;
      if (!v29) {
        goto LABEL_35;
      }
    }
    id v31 = *((id *)v29 + 2);
    id v32 = v22;
    long long v33 = v32;
    if (v31 != v32)
    {
      char v34 = [v31 isEqualToString:v32];

      if (v34) {
        goto LABEL_91;
      }
      goto LABEL_34;
    }

LABEL_91:
    *((void *)v29 + 3) = v20[5];
    if (v29 + 16 == (char *)(v20 + 4))
    {
      *((void *)v29 + 7) = v20[9];
      *((void *)v29 + 8) = v20[10];
    }
    else
    {
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v29 + 32, (char *)v20[6], v20[7], (uint64_t)(v20[7] - v20[6]) >> 4);
      *((void *)v29 + 7) = v20[9];
      *((void *)v29 + 8) = v20[10];
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v29 + 72, (char *)v20[11], v20[12], (uint64_t)(v20[12] - v20[11]) >> 4);
    }
    *((void *)v29 + 12) = v20[14];

    a3 = v75;
LABEL_95:
    double v54 = (void *)v20[1];
    if (v54)
    {
      do
      {
        double v55 = v54;
        double v54 = (void *)*v54;
      }
      while (v54);
    }
    else
    {
      do
      {
        double v55 = (void *)v20[2];
        BOOL v56 = *v55 == (void)v20;
        long long v20 = v55;
      }
      while (!v56);
    }
    long long v20 = v55;
  }
  while (v55 != v76);
  for (uint64_t j = (uint64_t **)v79; j; uint64_t j = (uint64_t **)*j)
  {
    unint64_t v59 = j[2];
    unint64_t v60 = (void *)MEMORY[0x1E4F2B370];
    long long v61 = [MEMORY[0x1E4F2B618] secondUnit];
    uint64_t v62 = *(void *)(a4 + 24);
    if (!v62) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v63 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v62 + 48))(v62, (uint64_t *)j + 3);
    long long v64 = *(double **)(v63 + 8);
    double v65 = 0.0;
    while (v64 != *(double **)(v63 + 16))
    {
      double v67 = *v64;
      double v66 = v64[1];
      v64 += 2;
      double v65 = v65 + v66 - v67;
    }
    uint64_t v68 = [v60 quantityWithUnit:v61 doubleValue:v65 + *(double *)(v63 + 32)];
    [v74 setObject:v68 forKeyedSubscript:v59];

    uint64_t v69 = *(void *)(a4 + 24);
    if (!v69) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    int8x16_t v70 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v69 + 48))(v69, (uint64_t *)j + 3));
    [v73 setObject:v70 forKeyedSubscript:v59];
  }
LABEL_119:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)v78);
  id v7 = v71;
  [v71 setDurationBySource:v74];
  [v71 setDataCountBySource:v73];

LABEL_120:
}

void sub_1BD0D1A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

double HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::overallStatistics(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v5 = *(void *)(a2 + 120);
  unint64_t v4 = *(const void **)(a2 + 128);
  *(void *)a1 = v5;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 8), v4, *(void *)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - (void)v4) >> 4);
  uint64_t v6 = *(void *)(a2 + 152);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = v6;
  id v7 = *(const void **)(a2 + 168);
  *(void *)(a1 + 40) = *(void *)(a2 + 160);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 48), v7, *(void *)(a2 + 176), (uint64_t)(*(void *)(a2 + 176) - (void)v7) >> 4);
  double result = *(double *)(a2 + 192);
  *(double *)(a1 + 72) = result;
  return result;
}

void sub_1BD0D1BCC(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsCombined>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsCombined>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  id v3 = *(void **)(a1 + 16);
  if (v3)
  {
    *(void *)(a1 + 24) = v3;
    operator delete(v3);
  }
  unint64_t v4 = *(void **)a1;
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      id v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsCombined>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1724180;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1724180;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C187B8A0);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_1F1724180;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BD0D1E88(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1724180;
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48))(v1) + 40;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1724210;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1724210;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C187B8A0);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_1F1724210;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BD0D2120(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1724210;
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::target_type()
{
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::~__func()
{
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1F1724290;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1724290;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 560))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a4, 3, @"Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date");
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  }
  double v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(void *)(a1 + 40) && a3) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_advanceToTime(a1, v8);
    }
    HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    uint64_t v9 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    uint64_t v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v9, a4);
  }
  return v10;
}

void sub_1BD0D24AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    if (!*(unsigned char *)(a1 + 560))
    {
      double v1 = *(double *)(a1 + 176);
      double result = *(double *)(a1 + 120);
      if (v1 <= result)
      {
        double v1 = -1.79769313e308;
      }
      else if (*(unsigned char *)(a1 + 144))
      {
        double v1 = -1.79769313e308;
      }
      if (v1 >= result) {
        return v1;
      }
      return result;
    }
    return -1.79769313e308;
  }
  double result = *(double *)(a1 + 176);
  if (result <= *(double *)(a1 + 120)) {
    return -1.79769313e308;
  }
  if (*(unsigned char *)(a1 + 144)) {
    return -1.79769313e308;
  }
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_advanceToTime(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 128) <= a2)
  {
    uint64_t v4 = a1 + 112;
    uint64_t v5 = a1 + 120;
    do
    {
      uint64_t v6 = *(void *)(a1 + 536);
      uint64_t v7 = *(void *)(a1 + 528);
      if (v6 == v7)
      {
        uint64_t v22 = 0;
        double v15 = *(void **)(a1 + 40);
        double v16 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a2];
        double v8 = [v15 dateIntervalContainingDate:v16 index:&v22];

        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v17 = v22;
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v19 = v18;
        long long v20 = [v8 endDate];
        [v20 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::resetToBucket(v4, v17, v19, v21);
      }
      else
      {
        double v8 = [*(id *)(a1 + 40) dateIntervalAtIndex:*(void *)(a1 + 112) + 1];
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v12 = v11;
        uint64_t v13 = [v8 endDate];
        [v13 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::advanceBucket(v4, v12, v14);
      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_didChangeBucket(a1, v9);
      if (v6 != v7) {
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
      }
    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1BD0D2738(_Unwind_Exception *exception_object)
{
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a1 + 8;
  double v6 = *(double *)(a1 + 8);
  double v8 = *(double *)a2;
  double v7 = *(double *)(a2 + 8);
  double v9 = *(double *)(a2 + 16);
  unint64_t v10 = *(void *)(a2 + 24);
  int v11 = *(unsigned __int8 *)(a2 + 32);
  char v12 = *(unsigned char *)(a2 + 33);
  double v13 = v6 - v7;
  if (v6 - v7 >= 0.01)
  {
    double v14 = v9 - v7;
    if (v14 - v13 >= 0.01)
    {
      double v8 = v8 - v8 * (v13 / v14);
    }
    else
    {
      int v11 = 0;
      unint64_t v10 = 0;
      char v12 = 0;
      double v9 = 0.0;
      double v6 = 0.0;
      double v8 = 0.0;
    }
  }
  else
  {
    double v6 = *(double *)(a2 + 8);
  }
  double v15 = *(double *)(a1 + 16);
  double v16 = v15 - v6;
  double v17 = v9 - v6;
  double v18 = v9 - v6 - (v15 - v6);
  if (!*(_DWORD *)(a1 + 36))
  {
    if (v18 < 0.01)
    {
LABEL_11:
      unint64_t v19 = 0;
      int v20 = 0;
      char v21 = 0;
      double v22 = 0.0;
      double v15 = 0.0;
      double v23 = 0.0;
      if (!v11) {
        goto LABEL_52;
      }
      goto LABEL_16;
    }
    if (v16 >= 0.01) {
      goto LABEL_15;
    }
LABEL_14:
    char v21 = v12;
    int v20 = v11;
    unint64_t v19 = v10;
    double v23 = v9;
    double v15 = v6;
    double v22 = v8;
    goto LABEL_52;
  }
  if (v16 < 0.01) {
    goto LABEL_14;
  }
  if (v18 < 0.01) {
    goto LABEL_11;
  }
LABEL_15:
  double v23 = v9;
  unint64_t v19 = v10;
  double v22 = v8 - v8 * (v16 / v17);
  int v20 = v11;
  char v21 = v12;
  double v9 = *(double *)(a1 + 16);
  double v8 = v8 * (v16 / v17);
  if (!v11) {
    goto LABEL_52;
  }
LABEL_16:
  double v63 = v6;
  double v64 = v9;
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 232, v10, v10);
  unint64_t v24 = *(void *)(a1 + 112);
  if (v24 == *(void *)(a1 + 104) && *(uint64_t *)(a1 + 128) <= 0)
  {
    v29.f64[1] = *(float64_t *)(a1 + 16);
    double v26 = v63;
    double v25 = v64;
    v29.f64[0] = v63;
    v30.f64[0] = *(float64_t *)(a1 + 8);
    v30.f64[1] = v64;
    int8x16_t v31 = (int8x16_t)vcgtq_f64(v30, v29);
    v30.f64[0] = v63;
    *(int8x16_t *)(a1 + 48) = vbslq_s8(v31, *(int8x16_t *)(a1 + 8), (int8x16_t)v30);
  }
  else
  {
    double v26 = v63;
    double v25 = v64;
    if (v63 < *(double *)(a1 + 48))
    {
      double v27 = *(double *)(a1 + 8);
      if (v63 >= v27) {
        double v27 = v63;
      }
      *(double *)(a1 + 48) = v27;
    }
    if (v64 > *(double *)(a1 + 56))
    {
      double v28 = *(double *)(a1 + 16);
      if (v28 >= v64) {
        double v28 = v64;
      }
      *(double *)(a1 + 56) = v28;
    }
  }
  if (*(unsigned char *)(a1 + 32))
  {
    double v32 = *(double *)(a1 + 64);
    if (v26 < v32) {
      double v32 = v26;
    }
    *(double *)(a1 + 64) = v32;
  }
  if (a3 && v26 < *(double *)(a1 + 16))
  {
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, v26);
    double v26 = v63;
    double v25 = v64;
    unint64_t v24 = *(void *)(a1 + 112);
  }
  unint64_t v33 = *(void *)(a1 + 120);
  if (v24 >= v33)
  {
    uint64_t v35 = *(void *)(a1 + 104);
    unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - v35) >> 4);
    unint64_t v37 = v36 + 1;
    if (v36 + 1 > 0x555555555555555) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - v35) >> 4);
    if (2 * v38 > v37) {
      unint64_t v37 = 2 * v38;
    }
    if (v38 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v39 = 0x555555555555555;
    }
    else {
      unint64_t v39 = v37;
    }
    if (v39)
    {
      unint64_t v39 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v39);
      double v26 = v63;
      double v25 = v64;
    }
    else
    {
      uint64_t v40 = 0;
    }
    unint64_t v41 = v39 + 48 * v36;
    unint64_t v42 = v39 + 48 * v40;
    *(double *)unint64_t v41 = v8;
    *(double *)(v41 + 8) = v26;
    *(double *)(v41 + 16) = v25;
    *(void *)(v41 + 24) = v10;
    *(unsigned char *)(v41 + 32) = v11;
    *(unsigned char *)(v41 + 33) = v12;
    *(_WORD *)(v41 + 40) = 0;
    *(unsigned char *)(v41 + 42) = 0;
    unint64_t v34 = v41 + 48;
    long long v44 = *(char **)(a1 + 104);
    uint64_t v43 = *(char **)(a1 + 112);
    if (v43 != v44)
    {
      do
      {
        long long v45 = *((_OWORD *)v43 - 3);
        long long v46 = *((_OWORD *)v43 - 2);
        *(_OWORD *)(v41 - 21) = *(_OWORD *)(v43 - 21);
        *(_OWORD *)(v41 - 48) = v45;
        *(_OWORD *)(v41 - 32) = v46;
        v41 -= 48;
        v43 -= 48;
      }
      while (v43 != v44);
      uint64_t v43 = *(char **)(a1 + 104);
    }
    *(void *)(a1 + 104) = v41;
    *(void *)(a1 + 112) = v34;
    *(void *)(a1 + 120) = v42;
    if (v43) {
      operator delete(v43);
    }
  }
  else
  {
    *(double *)unint64_t v24 = v8;
    *(double *)(v24 + 8) = v26;
    *(double *)(v24 + 16) = v25;
    *(void *)(v24 + 24) = v10;
    *(unsigned char *)(v24 + 32) = v11;
    *(unsigned char *)(v24 + 33) = v12;
    *(_WORD *)(v24 + 40) = 0;
    unint64_t v34 = v24 + 48;
    *(unsigned char *)(v24 + 42) = 0;
  }
  *(void *)(a1 + 112) = v34;
  if (*(unsigned char *)(a1 + 33))
  {
    unint64_t v47 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(v5, v10);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_statisticsForSource(v5, v47);
  }
LABEL_52:
  if (v20)
  {
    unint64_t v48 = *(void *)(a1 + 424);
    unint64_t v49 = *(void *)(a1 + 432);
    if (v48 >= v49)
    {
      uint64_t v51 = *(void *)(a1 + 416);
      unint64_t v52 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v48 - v51) >> 3);
      unint64_t v53 = v52 + 1;
      if (v52 + 1 > 0x666666666666666) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v54 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v49 - v51) >> 3);
      if (2 * v54 > v53) {
        unint64_t v53 = 2 * v54;
      }
      if (v54 >= 0x333333333333333) {
        unint64_t v55 = 0x666666666666666;
      }
      else {
        unint64_t v55 = v53;
      }
      if (v55) {
        unint64_t v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v55);
      }
      else {
        uint64_t v56 = 0;
      }
      unint64_t v57 = v55 + 40 * v52;
      unint64_t v58 = v55 + 40 * v56;
      *(double *)unint64_t v57 = v22;
      *(double *)(v57 + 8) = v15;
      *(double *)(v57 + 16) = v23;
      *(void *)(v57 + 24) = v19;
      *(unsigned char *)(v57 + 32) = v20;
      *(unsigned char *)(v57 + 33) = v21;
      unint64_t v50 = v57 + 40;
      unint64_t v60 = *(char **)(a1 + 416);
      unint64_t v59 = *(char **)(a1 + 424);
      if (v59 != v60)
      {
        do
        {
          long long v61 = *(_OWORD *)(v59 - 40);
          long long v62 = *(_OWORD *)(v59 - 24);
          *(_WORD *)(v57 - 8) = *((_WORD *)v59 - 4);
          *(_OWORD *)(v57 - 24) = v62;
          *(_OWORD *)(v57 - 40) = v61;
          v57 -= 40;
          v59 -= 40;
        }
        while (v59 != v60);
        unint64_t v59 = *(char **)(a1 + 416);
      }
      *(void *)(a1 + 416) = v57;
      *(void *)(a1 + 424) = v50;
      *(void *)(a1 + 432) = v58;
      if (v59) {
        operator delete(v59);
      }
    }
    else
    {
      *(double *)unint64_t v48 = v22;
      *(double *)(v48 + 8) = v15;
      *(double *)(v48 + 16) = v23;
      *(void *)(v48 + 24) = v19;
      *(unsigned char *)(v48 + 32) = v20;
      unint64_t v50 = v48 + 40;
      *(unsigned char *)(v48 + 33) = v21;
    }
    *(void *)(a1 + 424) = v50;
  }
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 562))
  {
    *(unsigned char *)(a1 + 564) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 564) = 0;
    uint64_t v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      uint64_t v4 = v2;
      uint64_t v3 = (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      if (v3) {
        v4[2](v4, v3);
      }

      uint64_t v2 = v4;
    }
  }
}

void sub_1BD0D2CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  double v9 = 0;
  unint64_t v10 = 0;
  uint64_t v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 416), *(void *)(a1 + 424), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 424) - *(void *)(a1 + 416)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::resetToBucket(a1, *(void *)a1 + 1, a2, a3);
  double v6 = v9;
  double v7 = v10;
  if (v9 != v10)
  {
    uint64_t v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BD0D2DC0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8 = (id *)(a1 + 40);
  objc_storeStrong((id *)(a1 + 440), *(id *)(a1 + 40));
  double v9 = *(void **)(a1 + 136);
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  *(void *)(a1 + 128) = 0;
  if (v9)
  {
    *(void *)(a1 + 144) = v9;
    operator delete(v9);
  }
  unint64_t v10 = *(void **)(a1 + 176);
  *(void *)(a1 + 168) = 0;
  long long v11 = 0uLL;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  if (v10)
  {
    *(void *)(a1 + 184) = v10;
    operator delete(v10);
    long long v11 = 0uLL;
  }
  *(_OWORD *)(a1 + 176) = v11;
  *(_OWORD *)(a1 + 192) = v11;
  if (*(void *)(a1 + 224))
  {
    uint64_t v12 = *(void *)(a1 + 216);
    double v13 = *(void **)(a1 + 208);
    *(void *)(a1 + 208) = a1 + 216;
    *(void *)(v12 + 16) = 0;
    *(void *)(a1 + 216) = 0;
    *(void *)(a1 + 224) = 0;
    if (v13[1]) {
      double v14 = (void *)v13[1];
    }
    else {
      double v14 = v13;
    }
    if (v14)
    {
      double v15 = (void *)v14[2];
      if (v15)
      {
        double v16 = (void *)*v15;
        if ((void *)*v15 == v14)
        {
          *double v15 = 0;
          while (1)
          {
            double v18 = (void *)v15[1];
            if (!v18) {
              break;
            }
            do
            {
              double v15 = v18;
              double v18 = (void *)*v18;
            }
            while (v18);
          }
        }
        else
        {
          for (v15[1] = 0; v16; double v16 = (void *)v15[1])
          {
            do
            {
              double v15 = v16;
              double v16 = (void *)*v16;
            }
            while (v16);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>::destroy(v14);
        for (uint64_t i = (void *)v15[2]; i; uint64_t i = (void *)i[2])
          double v15 = i;
        double v14 = v15;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>::destroy(v14);
  }
  objc_storeStrong(v8, *(id *)(a1 + 440));
  *(void *)(a1 + 424) = *(void *)(a1 + 416);
  *(void *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 564))
  {
    if (v3)
    {
      id v6 = v3;
      uint64_t v4 = _Block_copy(*(const void **)(a1 + 96));
      uint64_t v5 = v4;
      if (v4) {
        (*((void (**)(void *, id))v4 + 2))(v4, v6);
      }

      id v3 = v6;
    }
    *(unsigned char *)(a1 + 564) = 0;
  }
}

void sub_1BD0D2FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_currentBucketInterval(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 560))
  {
    double v1 = 0;
  }
  else
  {
    double v1 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", *(double *)(a1 + 120), *(double *)(a1 + 128));
  }

  return v1;
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS1_EE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 startDate];
  id v6 = [v4 startDate];
  uint64_t v7 = [v5 compare:v6];

  return v7;
}

void sub_1BD0D3080(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 13);
  if (WeakRetained)
  {
    if (v5
      && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_currentBucketInterval((uint64_t)a1),
          (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v8 = [v5 endDate];
      double v9 = [v7 startDate];
      if (objc_msgSend(v8, "hk_isAfterDate:", v9))
      {
        unint64_t v10 = [v5 startDate];
        long long v11 = [v7 endDate];
        char v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);
      }
      else
      {
        char v12 = 0;
      }

      double v13 = _Block_copy(a1[12]);
      if ((v12 & 1) == 0) {
        operator new();
      }
    }
    else
    {
      double v13 = _Block_copy(a1[12]);
    }
    *((unsigned char *)a1 + 560) = 1;
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS1_EE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
    v27[3] = &unk_1E6308FF8;
    id v15 = v5;
    id v28 = v15;
    id v16 = v13;
    id v29 = v16;
    (*((void (**)(id *, void *))*a1 + 9))(a1, v27);
    if (v5)
    {
      double v17 = [v15 startDate];
      [v17 timeIntervalSinceReferenceDate];
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_configureForStartTime((uint64_t)a1);
    }
    else
    {
      (*((void (**)(id *))*a1 + 4))(a1);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS1_EE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
    v21[3] = &unk_1E6309060;
    unint64_t v24 = a1;
    id v5 = v15;
    char v26 = 1;
    id v22 = v5;
    double v25 = a1;
    id v23 = WeakRetained;
    uint64_t v14 = (*((uint64_t (**)(id *, void *, uint64_t))*a1 + 14))(a1, v21, a3);
    double v18 = _Block_copy(v16);
    id v19 = a1[12];
    a1[12] = v18;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to invalidate interval: no data source available.");
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1BD0D34D0(_Unwind_Exception *a1)
{
  MEMORY[0x1C187B8A0](v4, 0x10F1C402E380188);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS1_EE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_11;
  }
  id v3 = [v10 endDate];
  uint64_t v4 = [*(id *)(a1 + 32) startDate];
  char v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    id v6 = [v10 startDate];
    uint64_t v7 = [*(id *)(a1 + 32) endDate];
    char v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_11:
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9) {
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
      }
    }
  }
}

void sub_1BD0D36B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS1_EE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = [*(id *)(a1 + 32) startDate];
  [v5 timeIntervalSinceReferenceDate];
  uint64_t v7 = v6;

  char v8 = [*(id *)(a1 + 32) endDate];
  [v8 timeIntervalSinceReferenceDate];
  uint64_t v10 = v9;

  long long v11 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  uint64_t v13 = *(void *)(a1 + 32);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS1_EE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  char v32 = *(unsigned char *)(a1 + 64);
  void v30[4] = v7;
  v30[5] = v10;
  uint64_t v31 = *(void *)(a1 + 56);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS1_EE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  void v29[4] = v31;
  uint64_t v14 = [v11 collectionCalculator:WeakRetained queryForInterval:v13 error:a2 sampleHandler:v30 mergeHandler:v29];

  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15 != v4)
    {
      id v16 = [*(id *)(a1 + 32) endDate];
      [v16 timeIntervalSinceReferenceDate];
      if (*(void *)(v15 + 40))
      {
        double v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          id v19 = [*(id *)(v15 + 40) dateIntervalAtIndex:*(void *)(v15 + 112) + 1];
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          int v20 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(v15, v15 + 120);
          char v21 = [v19 startDate];
          [v21 timeIntervalSinceReferenceDate];
          double v23 = v22;
          unint64_t v24 = [v19 endDate];
          [v24 timeIntervalSinceReferenceDate];
          HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            char v26 = _Block_copy(*(const void **)(v15 + 96));
            double v27 = v26;
            if (v26) {
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);
            }
          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_didChangeBucket(v15, 0);
        }
      }
    }
  }
  return v14;
}

void sub_1BD0D3960(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS1_EE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7 = *(double *)(a1 + 32) - a6;
  if (v7 >= 0.01)
  {
    double v9 = a7 - a6;
    if (v9 - v7 >= 0.01)
    {
      a5 = a5 - v7 / v9 * a5;
      int v8 = 1;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      int v8 = 0;
      a5 = 0.0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    int v8 = 1;
  }
  *(double *)uint64_t v13 = a5;
  *(double *)&v13[1] = a6;
  double v14 = a7;
  uint64_t v15 = a2;
  char v16 = v8;
  char v17 = 0;
  if (*(unsigned char *)(a1 + 56))
  {
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)v13, a3, a4);
    }
  }
  else
  {
    double v11 = *(double *)(a1 + 40) - a6;
    if (v11 >= 0.01)
    {
      double v12 = a7 - a6;
      if (v12 - v11 >= 0.01)
      {
        a5 = a5 * (v11 / v12);
        a7 = *(double *)(a1 + 40);
      }
    }
    else
    {
      int v8 = 0;
    }
    *(double *)uint64_t v13 = a5;
    double v14 = a7;
    char v16 = v8;
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)v13, a3, a4);
    }
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS1_EE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 560)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  }
  if (*(void *)(a1 + 40)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_advanceToTime(a1, a2);
  }
  if (*(double *)(a1 + 128) > a2)
  {
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 32) < *(double *)(v10 + 8))
                {
                  uint64_t v129 = *(void *)(v10 + 32);
                  long long v113 = *(_OWORD *)v10;
                  long long v121 = *(_OWORD *)(v10 + 16);
                  long long v52 = *(_OWORD *)(a2 - 40);
                  long long v53 = *(_OWORD *)(a2 - 24);
                  *(_WORD *)(v10 + 32) = *(_WORD *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(_WORD *)(a2 - 8) = v129;
                  *(_OWORD *)(a2 - 24) = v121;
                  *(_OWORD *)(a2 - 40) = v113;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v10, (double *)(v10 + 40), (double *)(a2 - 40));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, v10 + 120, a2 - 40);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            unint64_t v54 = (void *)(v10 + 40);
            BOOL v56 = v10 == a2 || v54 == (void *)a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  unint64_t v59 = v54;
                  double v60 = *(double *)(v58 + 48);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *v54;
                    long long v114 = *(_OWORD *)(v58 + 56);
                    uint64_t v122 = *(void *)(v58 + 72);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      uint64_t v63 = v10 + v62;
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      *(_OWORD *)(v63 + 40) = *(_OWORD *)(v10 + v62);
                      *(_OWORD *)(v63 + 56) = v64;
                      *(_WORD *)(v63 + 72) = *(_WORD *)(v10 + v62 + 32);
                      if (!v62) {
                        break;
                      }
                      v62 -= 40;
                      if (v60 >= *(double *)(v63 - 32))
                      {
                        uint64_t v65 = v10 + v62 + 40;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = v114;
                    *(_WORD *)(v65 + 32) = v122;
                  }
                  unint64_t v54 = v59 + 5;
                  v57 += 40;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 5 != (void *)a2);
              }
            }
            else if (!v56)
            {
              do
              {
                unint64_t v98 = v54;
                double v99 = *(double *)(a1 + 48);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *v54;
                  long long v117 = *(_OWORD *)(a1 + 56);
                  uint64_t v125 = *(void *)(a1 + 72);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(_OWORD *)(v101 - 3);
                    *(_OWORD *)long long v101 = *(_OWORD *)(v101 - 5);
                    *((_OWORD *)v101 + 1) = v102;
                    *((_WORD *)v101 + 16) = *((_WORD *)v101 - 4);
                    double v103 = *((double *)v101 - 9);
                    v101 -= 5;
                  }
                  while (v99 < v103);
                  *long long v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *((_WORD *)v101 + 16) = v125;
                  *((_OWORD *)v101 + 1) = v117;
                }
                v54 += 5;
                a1 = (unint64_t)v98;
              }
              while (v98 + 5 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 40 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v10 + 40 * v69 + 8) < *(double *)(v70 + 48))
                  {
                    v70 += 40;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  double v71 = *(double *)(v10 + 40 * v68 + 8);
                  if (*(double *)(v70 + 8) >= v71)
                  {
                    unint64_t v72 = v10 + 40 * v68;
                    uint64_t v73 = *(void *)v72;
                    uint64_t v123 = *(void *)(v72 + 32);
                    long long v115 = *(_OWORD *)(v72 + 16);
                    do
                    {
                      unint64_t v74 = v72;
                      unint64_t v72 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_WORD *)(v74 + 32) = *(_WORD *)(v70 + 32);
                      *(_OWORD *)unint64_t v74 = v75;
                      *(_OWORD *)(v74 + 16) = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 40 * v77;
                      uint64_t v78 = 2 * v69 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v10 + 40 * v77 + 8) < *(double *)(v70 + 48))
                      {
                        v70 += 40;
                        uint64_t v77 = v78;
                      }
                      uint64_t v69 = v77;
                    }
                    while (*(double *)(v70 + 8) >= v71);
                    *(void *)unint64_t v72 = v73;
                    *(double *)(v72 + 8) = v71;
                    *(_OWORD *)(v72 + 16) = v115;
                    *(_WORD *)(v72 + 32) = v123;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x28uLL;
              do
              {
                uint64_t v80 = 0;
                uint64_t v130 = *(void *)(v10 + 32);
                long long v116 = *(_OWORD *)v10;
                long long v124 = *(_OWORD *)(v10 + 16);
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = v81;
                  uint64_t v83 = v80 + 1;
                  v81 += 40 * (v80 + 1);
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v85 = v84 + 2;
                  if (v85 < v79 && *(double *)(v82 + 40 * v83 + 8) < *(double *)(v81 + 48))
                  {
                    v81 += 40;
                    uint64_t v80 = v85;
                  }
                  long long v86 = *(_OWORD *)v81;
                  long long v87 = *(_OWORD *)(v81 + 16);
                  *(_WORD *)(v82 + 32) = *(_WORD *)(v81 + 32);
                  *(_OWORD *)unint64_t v82 = v86;
                  *(_OWORD *)(v82 + 16) = v87;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 40;
                if (v81 == a2)
                {
                  *(_WORD *)(v81 + 32) = v130;
                  *(_OWORD *)unint64_t v81 = v116;
                  *(_OWORD *)(v81 + 16) = v124;
                }
                else
                {
                  long long v88 = *(_OWORD *)a2;
                  long long v89 = *(_OWORD *)(a2 + 16);
                  *(_WORD *)(v81 + 32) = *(_WORD *)(a2 + 32);
                  *(_OWORD *)unint64_t v81 = v88;
                  *(_OWORD *)(v81 + 16) = v89;
                  *(_WORD *)(a2 + 32) = v130;
                  *(_OWORD *)a2 = v116;
                  *(_OWORD *)(a2 + 16) = v124;
                  uint64_t v90 = v81 - v10 + 40;
                  if (v90 >= 41)
                  {
                    unint64_t v91 = (v90 / 0x28uLL - 2) >> 1;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v10 + 40 * v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      uint64_t v109 = *(void *)(v81 + 32);
                      long long v106 = *(_OWORD *)(v81 + 16);
                      do
                      {
                        unint64_t v94 = v81;
                        unint64_t v81 = v10 + 40 * v91;
                        long long v95 = *(_OWORD *)v81;
                        long long v96 = *(_OWORD *)(v81 + 16);
                        *(_WORD *)(v94 + 32) = *(_WORD *)(v81 + 32);
                        *(_OWORD *)unint64_t v94 = v95;
                        *(_OWORD *)(v94 + 16) = v96;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 40 * v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_WORD *)(v81 + 32) = v109;
                      *(_OWORD *)(v81 + 16) = v106;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40 * (v12 >> 1)), (double *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            char v16 = (double *)(a1 + 40 * v13 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40), v16, (double *)(a2 - 80));
            char v17 = (double *)(a1 + 40 + 8 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 80), v17, (double *)(a2 - 120));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v16, (double *)v14, v17);
            uint64_t v126 = *(void *)(a1 + 32);
            long long v110 = *(_OWORD *)a1;
            long long v118 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 16) = v19;
            *(_WORD *)(v14 + 32) = v126;
            *(_OWORD *)unint64_t v14 = v110;
            *(_OWORD *)(v14 + 16) = v118;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40 * (v12 >> 1)), (double *)a1, (double *)(a2 - 40));
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 32) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          long long v105 = *(_OWORD *)(a1 + 16);
          uint64_t v108 = *(void *)(a1 + 32);
          if (v20 >= *(double *)(a2 - 32))
          {
            unint64_t v41 = a1 + 40;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 40;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 40;
              double v40 = *(double *)(v39 + 48);
              v39 += 40;
            }
            while (v20 >= v40);
          }
          unint64_t v43 = a2;
          if (v10 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              unint64_t v43 = v44 - 40;
              double v45 = *(double *)(v44 - 32);
              v44 -= 40;
            }
            while (v20 < v45);
          }
          while (v10 < v43)
          {
            uint64_t v128 = *(void *)(v10 + 32);
            long long v112 = *(_OWORD *)v10;
            long long v120 = *(_OWORD *)(v10 + 16);
            long long v46 = *(_OWORD *)v43;
            long long v47 = *(_OWORD *)(v43 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v43 + 32);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(_WORD *)(v43 + 32) = v128;
            *(_OWORD *)unint64_t v43 = v112;
            *(_OWORD *)(v43 + 16) = v120;
            do
            {
              double v48 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *(double *)(v43 - 32);
              v43 -= 40;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 40);
            long long v51 = *(_OWORD *)(v10 - 24);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 40) = v38;
          *(double *)(v10 - 32) = v20;
          *(_WORD *)(v10 - 8) = v108;
          *(_OWORD *)(v10 - 24) = v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        long long v104 = *(_OWORD *)(a1 + 16);
        uint64_t v107 = *(void *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 48);
          v21 += 40;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        unint64_t v25 = a2;
        if (v21 == 40)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 40;
            double v29 = *(double *)(v28 - 32);
            v28 -= 40;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 40;
            double v27 = *(double *)(v25 - 32);
            v25 -= 40;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v127 = *(void *)(v10 + 32);
            long long v111 = *(_OWORD *)v10;
            long long v119 = *(_OWORD *)(v10 + 16);
            long long v31 = *(_OWORD *)v30;
            long long v32 = *(_OWORD *)(v30 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v30 + 32);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(_WORD *)(v30 + 32) = v127;
            *(_OWORD *)unint64_t v30 = v111;
            *(_OWORD *)(v30 + 16) = v119;
            do
            {
              double v33 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v33 < v20);
            do
            {
              double v34 = *(double *)(v30 - 32);
              v30 -= 40;
            }
            while (v34 >= v20);
          }
          while (v10 < v30);
        }
        if (v10 - 40 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 40);
          long long v36 = *(_OWORD *)(v10 - 24);
          *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 40) = v22;
        *(double *)(v10 - 32) = v20;
        *(_WORD *)(v10 - 8) = v107;
        *(_OWORD *)(v10 - 24) = v104;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 40;
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        __int16 v9 = *(_WORD *)(a2 - 8);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      uint64_t v16 = *(void *)v12;
      long long v21 = *(_OWORD *)(v12 + 16);
      uint64_t v22 = *(void *)(v12 + 32);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(void *)uint64_t v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS1_EE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(void *a1, uint64_t a2)
{
  id v3 = (void *)a1[5];
  uint64_t v4 = a1[6];
  BOOL v5 = (void *)a1[4];
  uint64_t v6 = [v5 dateInterval];
  void v9[4] = v4;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS1_EE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS1_EE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  uint64_t v7 = [v3 collectionCalculator:v5 queryForInterval:v6 error:a2 sampleHandler:v10 mergeHandler:v9];

  return v7;
}

void sub_1BD0D4700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS1_EE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10 = *(void *)(a1 + 32);
  *(double *)int v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  char v15 = 1;
  uint64_t v11 = [MEMORY[0x1E4F1C9C8] distantFuture];
  [v11 timeIntervalSinceReferenceDate];
  BOOL v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1BD0D47A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS1_EE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6 = a3;
  uint64_t v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = &unk_1F1724340;
  double v9 = 900.0;
  if ((v6 & 0x10) == 0) {
    double v9 = 0.0;
  }
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(void *)(v8 + 104) = 0;
  *(void *)(v8 + 112) = 0;
  *(void *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_WORD *)(a1 + 568) = 1;
  *(unsigned char *)(a1 + 570) = 0;
  *(unsigned char *)(a1 + 572) = 0;
  *(void *)(a1 + 576) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(void *)(a1 + 616) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);

  JUMPOUT(0x1C187B8A0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1F1724340;
  uint64_t v2 = *(void **)(a1 + 600);
  if (v2)
  {
    *(void *)(a1 + 608) = v2;
    operator delete(v2);
  }

  id v3 = *(void **)(a1 + 536);
  if (v3)
  {
    *(void *)(a1 + 544) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(unsigned char *)(result + 568) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::setDateInterval(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 copy];
  uint64_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;

  BOOL v5 = [v6 startDate];
  [v5 timeIntervalSinceReferenceDate];
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_configureForStartTime(a1);
}

void sub_1BD0D4954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(void *)(a1 + 40))
  {
    id v5 = v3;
    [v3 timeIntervalSinceReferenceDate];
    *(void *)(a1 + 576) = v4;
    id v3 = v5;
  }
}

void sub_1BD0D49C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::setStatisticsConfiguration(id *a1, void *a2)
{
  objc_storeStrong(a1 + 73, a2);
  id v7 = a2;
  id v4 = a1[73];
  id v5 = a1[70];
  a1[70] = v4;
  id v6 = v4;

  objc_storeStrong(a1 + 19, a1[70]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (*(void *)(a1 + 40)) {
    return 1;
  }
  BOOL v7 = *(void *)(a1 + 224) == *(void *)(a1 + 216) && *(uint64_t *)(a1 + 248) < 1
    || HKIntervalMask<double>::firstDifference(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)a2, *(void *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (v7) {
    return 1;
  }
  double v9 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128);

  return v9(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 copy];
  id v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v3;
}

void sub_1BD0D4BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::dataSource(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));

  return WeakRetained;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::currentStatistics(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 568))
  {
    double v1 = 0;
  }
  else
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_updateSourceOrder((uint64_t)v4);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeThroughTime((uint64_t)v4, v4[1]);
    double v1 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v4);
  }

  return v1;
}

void sub_1BD0D4C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(a1 + 64);
  BOOL v7 = v6;
  if (v6)
  {
    uint64_t v8 = [v6 startDate];
    [v8 timeIntervalSinceReferenceDate];
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    uint64_t v10 = [v7 endDate];
    [v10 timeIntervalSinceReferenceDate];
    double v12 = v11;
    double v13 = *(double *)(a2 + 8);

    if (v12 < v13) {
      goto LABEL_9;
    }
  }
  if (!*(unsigned char *)(a1 + 570))
  {
LABEL_11:
    uint64_t v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 569))
  {
LABEL_9:
    uint64_t v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(unsigned char *)(a1 + 571)) {
      goto LABEL_11;
    }
    unint64_t v17 = *(void *)(a1 + 608);
    unint64_t v18 = *(void *)(a1 + 616);
    if (v17 >= v18)
    {
      uint64_t v22 = *(void *)(a1 + 600);
      unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      unint64_t v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24) {
        unint64_t v24 = 2 * v25;
      }
      if (v25 >= 0x333333333333333) {
        unint64_t v26 = 0x666666666666666;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26) {
        unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      }
      else {
        uint64_t v27 = 0;
      }
      unint64_t v28 = v26 + 40 * v23;
      unint64_t v29 = v26 + 40 * v27;
      long long v30 = *(_OWORD *)a2;
      long long v31 = *(_OWORD *)(a2 + 16);
      *(void *)(v28 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      unint64_t v21 = v28 + 40;
      long long v32 = *(char **)(a1 + 608);
      double v33 = *(char **)(a1 + 600);
      if (v32 != v33)
      {
        do
        {
          long long v34 = *(_OWORD *)(v32 - 40);
          long long v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        long long v32 = *(char **)(a1 + 600);
      }
      *(void *)(a1 + 600) = v28;
      *(void *)(a1 + 608) = v21;
      *(void *)(a1 + 616) = v29;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      long long v19 = *(_OWORD *)a2;
      long long v20 = *(_OWORD *)(a2 + 16);
      *(void *)(v17 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      unint64_t v21 = v17 + 40;
    }
    *(void *)(a1 + 608) = v21;
    goto LABEL_9;
  }
  int v14 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
  uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1BD0D4EF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = v5;
  if (*(unsigned char *)(a1 + 570))
  {
    uint64_t v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 570) = 1;
  uint64_t v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    uint64_t v7 = 0;
    goto LABEL_82;
  }
  uint64_t v65 = v6;
  if (*(unsigned char *)(a1 + 569)) {
    goto LABEL_5;
  }
  double v9 = *(void **)(a1 + 592);
  if (!v9)
  {
    id v68 = 0;
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 40))
  {
LABEL_5:
    int v8 = 0;
    id v68 = 0;
    goto LABEL_29;
  }
  [v9 sortUsingComparator:&__block_literal_global_803];
  id v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v10 = *(id *)(a1 + 592);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  if (!v11)
  {

    id v12 = 0;
    goto LABEL_27;
  }
  id v12 = 0;
  uint64_t v13 = *(void *)v70;
  do
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (*(void *)v70 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(id *)(*((void *)&v69 + 1) + 8 * i);
      BOOL v16 = v15;
      if (v12)
      {
        unint64_t v17 = [v15 startDate];
        unint64_t v18 = [v12 endDate];
        int v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          long long v20 = [v16 endDate];
          unint64_t v21 = [v12 endDate];
          int v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22) {
            goto LABEL_21;
          }
          id v23 = objc_alloc(MEMORY[0x1E4F28C18]);
          unint64_t v24 = [v12 startDate];
          unint64_t v25 = [v16 endDate];
          id v26 = (id)[v23 initWithStartDate:v24 endDate:v25];
        }
        else
        {
          [v68 addObject:v12];
          id v26 = v16;
        }
        id v12 = v26;
      }
      else
      {
        id v12 = v15;
      }
LABEL_21:
    }
    uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  }
  while (v11);

  if (v12) {
    [v68 addObject:v12];
  }
LABEL_27:

LABEL_28:
  int v8 = 1;
LABEL_29:
  uint64_t v27 = *(void **)(a1 + 592);
  *(void *)(a1 + 592) = 0;

  *(unsigned char *)(a1 + 569) = 0;
  if (!v8)
  {
    unint64_t v38 = *(void *)(a1 + 600);
    *(void *)(a1 + 616) = 0;
    *(void *)(a1 + 608) = 0;
    *(void *)(a1 + 600) = 0;
    unint64_t v39 = v38;
    goto LABEL_47;
  }
  unint64_t v28 = [v68 lastObject];
  if (v28)
  {
    unint64_t v29 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_currentBucketInterval(a1);
    long long v30 = [v29 endDate];
    long long v31 = [v28 endDate];
    int v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      double v33 = [v28 endDate];
      [v33 timeIntervalSinceReferenceDate];
      double v35 = v34;

      uint64_t v36 = *(void *)(a1 + 600);
      BOOL v37 = *(long long **)(a1 + 608);
      while ((long long *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((long long *)v36 != v37)
          {
            double v40 = (long long *)(v36 + 40);
            if ((long long *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  long long v41 = *v40;
                  long long v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)uint64_t v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                double v40 = (long long *)((char *)v40 + 40);
              }
              while (v40 != v37);
              BOOL v37 = *(long long **)(a1 + 608);
            }
          }
          if ((long long *)v36 != v37) {
            *(void *)(a1 + 608) = v36;
          }
          break;
        }
        v36 += 40;
      }
    }
  }
  unint64_t v38 = *(void *)(a1 + 600);
  unint64_t v39 = *(void *)(a1 + 608);
  *(void *)(a1 + 616) = 0;
  *(void *)(a1 + 600) = 0;
  *(void *)(a1 + 608) = 0;
  if (![v68 count]) {
    goto LABEL_60;
  }
LABEL_47:
  id v43 = v68;
  long long __p = (void *)v38;
  if (v43)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v44 = v43;
    uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v70;
      while (2)
      {
        for (uint64_t j = 0; j != v45; ++j)
        {
          if (*(void *)v70 != v46) {
            objc_enumerationMutation(v44);
          }
          id v48 = *(id *)(*((void *)&v69 + 1) + 8 * j);
          int v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_primitiveInvalidateInterval((id *)a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
        if (v45) {
          continue;
        }
        break;
      }
    }

LABEL_59:
    unint64_t v38 = (unint64_t)__p;
LABEL_60:
    unint64_t v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v51;
    }
    int v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    long long __p = (void *)v38;
    if (v39 != v38)
    {
      uint64_t v54 = v38;
      uint64_t v50 = v67;
      do
      {
        int v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_primitiveAddSample(a1, v54, 1, v50);
        int v53 = v55;
        v54 += 40;
        if (v54 == v39) {
          char v56 = 0;
        }
        else {
          char v56 = v55;
        }
        uint64_t v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_primitiveInvalidateInterval((id *)a1, 0, v67))goto LABEL_59; {
LABEL_70:
    }
    int v53 = 0;
  }
  if (*(void *)(a1 + 40) && *(void *)(a1 + 544) != *(void *)(a1 + 536))
  {
    do
    {
      uint64_t v57 = objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(void *)(a1 + 112) + 1, v50, v65);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      unint64_t v58 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, a1 + 120);
      unint64_t v59 = [v57 startDate];
      [v59 timeIntervalSinceReferenceDate];
      double v61 = v60;
      uint64_t v62 = [v57 endDate];
      [v62 timeIntervalSinceReferenceDate];
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTimeInterval>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
    }
    while (*(void *)(a1 + 544) != *(void *)(a1 + 536));
  }
  *(unsigned char *)(a1 + 570) = 0;
  if (__p) {
    operator delete(__p);
  }

  if (v53)
  {
    if (*(unsigned char *)(a1 + 572))
    {
      *(unsigned char *)(a1 + 572) = 0;
      id v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
      uint64_t v7 = 1;
      goto LABEL_82;
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v6 = v65;
LABEL_82:
  *(unsigned char *)(a1 + 570) = 0;
LABEL_83:

  return v7;
}

void sub_1BD0D55F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    *(unsigned char *)(v13 + 570) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(unsigned char *)(result + 571) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(unsigned char *)(a1 + 570)) {
      goto LABEL_12;
    }
    uint64_t v7 = 0;
LABEL_14:
    uint64_t v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_primitiveInvalidateInterval((id *)a1, v7, a3);
    goto LABEL_15;
  }
  uint64_t v7 = [v6 dateIntervalForIntervalsContainingInterval:v5];

  if (!*(unsigned char *)(a1 + 570)) {
    goto LABEL_14;
  }
  if (!v7)
  {
LABEL_12:
    id v12 = *(void **)(a1 + 592);
    *(void *)(a1 + 592) = 0;

    uint64_t v7 = 0;
    uint64_t v11 = 1;
    *(unsigned char *)(a1 + 569) = 1;
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 569))
  {
    int v8 = *(void **)(a1 + 592);
    if (!v8)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      id v10 = *(void **)(a1 + 592);
      *(void *)(a1 + 592) = v9;

      int v8 = *(void **)(a1 + 592);
    }
    [v8 addObject:v7];
  }
  uint64_t v11 = 1;
LABEL_15:

  return v11;
}

void sub_1BD0D58F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    *(unsigned char *)(a1 + 568) = 1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v9[3] = &unk_1E63043E8;
    uint64_t v12 = a1;
    id v10 = v5;
    id v11 = WeakRetained;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 112))(a1, v9, a3);
    if (v7 && *(unsigned char *)(a1 + 568) && !*(void *)(a1 + 40)) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_configureForStartTime(a1);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to query for initial statistics: no data source available.");
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1BD0D5A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::reset(uint64_t result)
{
  *(unsigned char *)(result + 568) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 encodeBool:*(unsigned __int8 *)(a1 + 568) forKey:@"needs_config"];
  id v12 = v3;
  int v32 = &unk_1F1726FA0;
  double v33 = 0;
  int v38 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
  LOBYTE(v38) = 1;
  uint64_t v34 = v4;
  uint64_t v35 = 0;
  statistics::StatisticsEngine::makeCurrentBucket((uint64_t)&v32);
  uint64_t v13 = &unk_1F171B9C8;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  int v31 = 511;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 0;
  int8x16_t v14 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  uint64_t v5 = *(void *)(a1 + 136);
  char v29 = *(unsigned char *)(a1 + 144);
  char v30 = *(unsigned char *)(a1 + 145);
  BOOL v28 = *(_DWORD *)(a1 + 148) == 0;
  int8x16_t v15 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  uint64_t v7 = *(int8x16_t **)(a1 + 216);
  if (v7 != *(int8x16_t **)(a1 + 224))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v7, *v7, 8uLL);
    int8x16_t v40 = v7[1];
    char v43 = 0;
    HIBYTE(v42) = v7[2].i8[9];
    LOBYTE(v42) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>();
  }
  statistics::StatisticsBucket::makeStatistics((uint64_t)&v13);
  HDStatisticsRelative<HDStatisticsTimeInterval>::archive((uint64_t)&v39, (int8x16_t *)(a1 + 240));
  statistics::Statistics::operator=(*((statistics **)&v22 + 1), (uint64_t)&v39);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v39);
  uint64_t v8 = *(void *)(a1 + 328);
  if (v8 != a1 + 336)
  {
    HDStatisticsRelative<HDStatisticsTimeInterval>::archive((uint64_t)&v39, (int8x16_t *)(v8 + 40));
    uint64_t v9 = *(void *)(v8 + 32);
    v46 |= 0x200u;
    uint64_t v45 = v9;
    PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>();
  }
  id v10 = *(int8x16_t **)(a1 + 184);
  if (v10 != *(int8x16_t **)(a1 + 192))
  {
    unint64_t v39 = (char *)&unk_1F1727540;
    v41.i32[0] = 3;
    int8x16_t v40 = vextq_s8(*v10, *v10, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>();
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v13);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v13);
  id v11 = *(int8x16_t **)(a1 + 536);
  if (v11 != *(int8x16_t **)(a1 + 544))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v11, *v11, 8uLL);
    int8x16_t v40 = v11[1];
    __int16 v42 = 0;
    char v43 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>();
  }
  PB::Writer::Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v39);
  [v12 encodeBytes:v40.i64[0] length:&v39[-v40.i64[0]] forKey:@"hdsce_archived_representation"];
  PB::Writer::~Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);
}

void sub_1BD0D5E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v57 = a2;
  *(unsigned char *)(a1 + 568) = [v57 decodeBoolForKey:@"needs_config"];
  id v3 = v57;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v61, 0, -1.79769313e308, 1.79769313e308);
  long long v62 = 0u;
  long long v63 = 0u;
  uint64_t v102 = 0;
  id v59 = v3;
  PB::Reader::Reader((PB::Reader *)v101, (const unsigned __int8 *)[v59 decodeBytesForKey:@"hdsce_archived_representation" returnedLength:&v102]);
  unint64_t v94 = &unk_1F1726FA0;
  uint64_t v95 = 0;
  uint64_t v99 = 0;
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  int v100 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v94, (PB::Reader *)v101);
  uint64_t v60 = v96;
  if (v95)
  {
    uint64_t v68 = 0;
    memset(v71, 0, sizeof(v71));
    long long __p = 0;
    memset(v76, 0, 74);
    uint64_t v79 = 0;
    unint64_t v74 = 0;
    uint64_t v73 = 0;
    int v75 = 0;
    uint64_t v78 = 0;
    uint64_t v77 = &v78;
    long long v81 = 0u;
    long long v80 = 0u;
    int v82 = 1065353216;
    long long v83 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    uint64_t v86 = 0;
    int v87 = 1065353216;
    long long v88 = 0u;
    long long v89 = 0u;
    int v90 = 1065353216;
    long long v91 = 0u;
    long long v92 = 0u;
    int v93 = 1065353216;
    int8x16_t v64 = vextq_s8(*(int8x16_t *)(v95 + 8), *(int8x16_t *)(v95 + 8), 8uLL);
    uint64_t v4 = *(void *)(v95 + 72);
    uint64_t v65 = *(void *)(v95 + 64);
    char v66 = *(unsigned char *)(v95 + 185);
    char v67 = *(unsigned char *)(v95 + 186);
    int8x16_t v69 = vextq_s8(*(int8x16_t *)(v95 + 24), *(int8x16_t *)(v95 + 24), 8uLL);
    uint64_t v70 = v4;
    uint64_t v6 = *(void *)(v95 + 80);
    uint64_t v5 = *(void *)(v95 + 88);
    unint64_t v58 = (void *)v95;
    if (v6 != v5)
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(*(void *)v6 + 24);
        uint64_t v9 = *(void *)(*(void *)v6 + 32);
        uint64_t v10 = *(void *)(*(void *)v6 + 8);
        uint64_t v11 = *(void *)(*(void *)v6 + 16);
        char v12 = *(unsigned char *)(*(void *)v6 + 41);
        char v13 = *(unsigned char *)(*(void *)v6 + 40);
        if ((unint64_t)v7 >= v74)
        {
          int8x16_t v14 = (char *)__p;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)__p) >> 4);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v74 - (void)__p) >> 4) > v16) {
            unint64_t v16 = 0x5555555555555556 * ((uint64_t)(v74 - (void)__p) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v74 - (void)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v17 = 0x555555555555555;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17)
          {
            unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            uint64_t v7 = v73;
            int8x16_t v14 = (char *)__p;
          }
          else
          {
            uint64_t v18 = 0;
          }
          uint64_t v19 = (void *)(v17 + 48 * v15);
          *uint64_t v19 = v9;
          v19[1] = v8;
          v19[2] = v10;
          v19[3] = v11;
          *((_WORD *)v19 + 16) = 1;
          *((unsigned char *)v19 + 40) = 0;
          *((unsigned char *)v19 + 41) = v12;
          *((unsigned char *)v19 + 42) = v13;
          uint64_t v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              long long v21 = *((_OWORD *)v7 - 3);
              long long v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            int8x16_t v14 = (char *)__p;
          }
          uint64_t v7 = (char *)(v19 + 6);
          long long __p = v20;
          uint64_t v73 = (char *)(v19 + 6);
          unint64_t v74 = v17 + 48 * v18;
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)uint64_t v7 = v9;
          *((void *)v7 + 1) = v8;
          *((void *)v7 + 2) = v10;
          *((void *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        uint64_t v73 = v7;
        v6 += 8;
      }
      while (v6 != v5);
    }
    long long v23 = (void *)v58[13];
    if (v23)
    {
      HDStatisticsRelative<HDStatisticsTimeInterval>::unarchive((uint64_t)&v103, v23);
      int v75 = v103;
      v76[0] = v104;
      if (v76[1])
      {
        v76[2] = v76[1];
        operator delete((void *)v76[1]);
      }
      *(_OWORD *)&v76[1] = v105;
      v76[4] = v107;
      *(_OWORD *)&v76[5] = v108;
      v76[3] = v106;
      uint64_t v106 = 0;
      long long v105 = 0uLL;
      *(_OWORD *)&v76[7] = v109;
      LOWORD(v76[9]) = v110;
    }
    long long v24 = (void **)v58[17];
    for (uint64_t i = (void **)v58[18]; v24 != i; ++v24)
    {
      uint64_t v26 = (uint64_t)*v24;
      HDStatisticsRelative<HDStatisticsTimeInterval>::unarchive((uint64_t)&v103, *v24);
      uint64_t v27 = *(void *)(v26 + 144);
      BOOL v28 = v78;
      char v29 = &v78;
      char v30 = &v78;
      if (v78)
      {
        do
        {
          while (1)
          {
            char v30 = (uint64_t **)v28;
            uint64_t v31 = v28[4];
            if (v31 <= v27) {
              break;
            }
            BOOL v28 = *v30;
            char v29 = v30;
            if (!*v30) {
              goto LABEL_34;
            }
          }
          if (v31 >= v27)
          {
            double v33 = (char *)v30;
            goto LABEL_37;
          }
          BOOL v28 = v30[1];
        }
        while (v28);
        char v29 = v30 + 1;
      }
LABEL_34:
      double v33 = (char *)operator new(0x80uLL);
      *((void *)v33 + 4) = v27;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *((void *)v33 + 15) = 0;
      *(void *)double v33 = 0;
      *((void *)v33 + 1) = 0;
      *((void *)v33 + 2) = v30;
      void *v29 = (uint64_t *)v33;
      int v32 = (uint64_t *)v33;
      if (*v77)
      {
        uint64_t v77 = (uint64_t **)*v77;
        int v32 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v78, v32);
      ++v79;
LABEL_37:
      uint64_t v34 = (void *)*((void *)v33 + 7);
      *((_DWORD *)v33 + 10) = v103;
      *((void *)v33 + 6) = v104;
      if (v34)
      {
        *((void *)v33 + 8) = v34;
        operator delete(v34);
        *((void *)v33 + 7) = 0;
        *((void *)v33 + 8) = 0;
        *((void *)v33 + 9) = 0;
      }
      *(_OWORD *)(v33 + 56) = v105;
      *((void *)v33 + 9) = v106;
      *((void *)v33 + 10) = v107;
      long long v35 = v109;
      *(_OWORD *)(v33 + 88) = v108;
      uint64_t v106 = 0;
      long long v105 = 0uLL;
      *(_OWORD *)(v33 + 104) = v35;
      *((_WORD *)v33 + 60) = v110;
    }
    uint64_t v36 = v58[5];
    for (uint64_t j = v58[6]; v36 != j; v36 += 8)
    {
      double v39 = *(double *)(*(void *)v36 + 8);
      double v38 = *(double *)(*(void *)v36 + 16);
      if (v39 >= v38) {
        double v40 = *(double *)(*(void *)v36 + 16);
      }
      else {
        double v40 = *(double *)(*(void *)v36 + 8);
      }
      if (v38 < v39) {
        double v38 = *(double *)(*(void *)v36 + 8);
      }
      HKIntervalMask<double>::_insertInterval(v71, v40, v38);
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::operator=((uint64_t)v61, (uint64_t)&v64);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v64);
  }
  uint64_t v41 = v97;
  uint64_t v42 = v98;
  if (v97 != v98)
  {
    unint64_t v43 = *((void *)&v62 + 1);
    do
    {
      uint64_t v44 = *(void *)(*(void *)v41 + 24);
      uint64_t v45 = *(void *)(*(void *)v41 + 32);
      uint64_t v46 = *(void *)(*(void *)v41 + 8);
      uint64_t v47 = *(void *)(*(void *)v41 + 16);
      if (v43 >= (unint64_t)v63)
      {
        id v48 = (void *)v62;
        unint64_t v49 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v43 - v62) >> 3);
        unint64_t v50 = v49 + 1;
        if (v49 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(v63 - v62) >> 3) > v50) {
          unint64_t v50 = 0x999999999999999ALL * ((uint64_t)(v63 - v62) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v63 - v62) >> 3) >= 0x333333333333333) {
          unint64_t v51 = 0x666666666666666;
        }
        else {
          unint64_t v51 = v50;
        }
        if (v51)
        {
          unint64_t v51 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v51);
          unint64_t v43 = *((void *)&v62 + 1);
          id v48 = (void *)v62;
        }
        else
        {
          uint64_t v52 = 0;
        }
        unint64_t v53 = v51 + 40 * v49;
        *(void *)unint64_t v53 = v45;
        *(void *)(v53 + 8) = v44;
        *(void *)(v53 + 16) = v46;
        *(void *)(v53 + 24) = v47;
        *(_WORD *)(v53 + 32) = 1;
        unint64_t v54 = v53;
        if ((void *)v43 != v48)
        {
          do
          {
            long long v55 = *(_OWORD *)(v43 - 40);
            long long v56 = *(_OWORD *)(v43 - 24);
            *(_WORD *)(v54 - 8) = *(_WORD *)(v43 - 8);
            *(_OWORD *)(v54 - 24) = v56;
            *(_OWORD *)(v54 - 40) = v55;
            v54 -= 40;
            v43 -= 40;
          }
          while ((void *)v43 != v48);
          id v48 = (void *)v62;
        }
        unint64_t v43 = v53 + 40;
        *(void *)&long long v62 = v54;
        *((void *)&v62 + 1) = v53 + 40;
        *(void *)&long long v63 = v51 + 40 * v52;
        if (v48) {
          operator delete(v48);
        }
      }
      else
      {
        *(void *)unint64_t v43 = v45;
        *(void *)(v43 + 8) = v44;
        *(void *)(v43 + 16) = v46;
        *(void *)(v43 + 24) = v47;
        *(_WORD *)(v43 + 32) = 1;
        v43 += 40;
      }
      *((void *)&v62 + 1) = v43;
      v41 += 8;
    }
    while (v41 != v42);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v94);

  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTimeInterval>>::operator=((void *)(a1 + 112), (uint64_t)&v60);
  if ((void)v62)
  {
    *((void *)&v62 + 1) = v62;
    operator delete((void *)v62);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v61);
}

void sub_1BD0D65B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a3);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table((uint64_t)&STACK[0x350]);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x328]);
  uint64_t v9 = (void *)STACK[0x310];
  if (STACK[0x310])
  {
    STACK[0x318] = (unint64_t)v9;
    operator delete(v9);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x2E8]);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>>>::destroy((void *)STACK[0x2D8]);
  uint64_t v10 = (void *)STACK[0x288];
  if (STACK[0x288])
  {
    STACK[0x290] = (unint64_t)v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v11;
    operator delete(v11);
  }
  objc_destroyWeak((id *)&STACK[0x258]);
  char v12 = (void *)STACK[0x240];
  if (STACK[0x240])
  {
    STACK[0x248] = (unint64_t)v12;
    operator delete(v12);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x3A8]);
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 256;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 186) = 0u;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(void *)(a1 + 208) = a1 + 216;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 264) = 1065353216;
  *(void *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_DWORD *)(a1 + 328) = 1065353216;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_DWORD *)(a1 + 368) = 1065353216;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_DWORD *)(a1 + 408) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 424);
  if (v2)
  {
    *(void *)(a1 + 432) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::~HDStatisticsBucket(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 376);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 336);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 296);
  uint64_t v2 = *(void **)(a1 + 272);
  if (v2)
  {
    *(void *)(a1 + 280) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 232);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>>>::destroy(*(void **)(a1 + 216));
  id v3 = *(void **)(a1 + 136);
  if (v3)
  {
    *(void *)(a1 + 144) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(void *)(a1 + 104) = v4;
    operator delete(v4);
  }
  objc_destroyWeak((id *)(a1 + 88));
  uint64_t v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(void *)(a1 + 72) = v5;
    operator delete(v5);
  }

  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>>>::destroy(a1[1]);
    uint64_t v2 = (void *)a1[7];
    if (v2)
    {
      a1[8] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_configureForStartTime(uint64_t a1)
{
  uint64_t v29 = 0;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
    uint64_t v4 = [v2 dateIntervalContainingDate:v3 index:&v29];

    uint64_t v5 = [v4 startDate];
    [v5 timeIntervalSinceReferenceDate];
    double v7 = v6;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
LABEL_5:
    double v13 = v9;

    goto LABEL_6;
  }
  id v10 = *(id *)(a1 + 64);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v11 = [v10 startDate];
    [v11 timeIntervalSinceReferenceDate];
    double v7 = v12;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
    goto LABEL_5;
  }
  double v7 = -1.79769313e308;
  double v13 = 1.79769313e308;
LABEL_6:

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v22, WeakRetained, v7, v13);

  if (*(void *)(a1 + 32) == 1) {
    char v24 = 1;
  }
  uint64_t v23 = *(void *)(a1 + 56);
  char v25 = *(unsigned char *)(a1 + 24) & 1;
  if (v28 != (char *)(a1 + 72)) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v28, *(char **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4);
  }
  objc_storeStrong(&v27, *(id *)(a1 + 584));
  if (!*(void *)(a1 + 40)) {
    int v26 = 0;
  }
  uint64_t v15 = v29;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v22);
  uint64_t v18 = v15;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v19, (uint64_t)v17);
  long long __p = 0u;
  long long v21 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTimeInterval>>::operator=((void *)(a1 + 112), (uint64_t)&v18);

  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v19);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v17);
  *(unsigned char *)(a1 + 568) = 0;
  return HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v22);
}

void sub_1BD0D6B64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTimeInterval>>::operator=(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::operator=((uint64_t)(a1 + 1), a2 + 8);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 53), (__n128 *)(a2 + 424));
  uint64_t v4 = *(void *)(a2 + 448);
  *(void *)(a2 + 448) = 0;
  uint64_t v5 = (void *)a1[56];
  a1[56] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 96);
  double v7 = *(unsigned char **)(a2 + 104);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(void *)(a1 + 96) = v10;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(void *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  int v12 = *(_DWORD *)(a2 + 120);
  uint64_t v13 = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 120) = v12;
  *(void *)(a1 + 128) = v13;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 136), *(const void **)(a2 + 136), *(void *)(a2 + 144), (uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 4);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  long long v14 = *(_OWORD *)(a2 + 168);
  long long v15 = *(_OWORD *)(a2 + 184);
  uint64_t v16 = *(void *)(a2 + 200);
  *(void *)(a1 + 216) = 0;
  unint64_t v17 = (void *)(a1 + 216);
  *(void *)(a1 + 208) = a1 + 216;
  *(void *)(a1 + 200) = v16;
  *(_OWORD *)(a1 + 184) = v15;
  *(_OWORD *)(a1 + 168) = v14;
  *(void *)(a1 + 224) = 0;
  uint64_t v18 = *(void **)(a2 + 208);
  if (v18 != (void *)(a2 + 216))
  {
    uint64_t v19 = 0;
    uint64_t v20 = (void *)(a1 + 216);
    while (1)
    {
      long long v21 = (void *)(a1 + 216);
      if (v20 == v17) {
        goto LABEL_12;
      }
      long long v22 = v19;
      uint64_t v23 = (void *)(a1 + 216);
      if (v19)
      {
        do
        {
          long long v21 = v22;
          long long v22 = (void *)v22[1];
        }
        while (v22);
      }
      else
      {
        do
        {
          long long v21 = (void *)v23[2];
          BOOL v24 = *v21 == (void)v23;
          uint64_t v23 = v21;
        }
        while (v24);
      }
      uint64_t v25 = v18[4];
      if (v21[4] < v25)
      {
LABEL_12:
        if (v19) {
          int v26 = (uint64_t **)v21;
        }
        else {
          int v26 = (uint64_t **)(a1 + 216);
        }
        if (v19) {
          id v27 = (uint64_t **)(v21 + 1);
        }
        else {
          id v27 = (uint64_t **)(a1 + 216);
        }
        if (!*v27)
        {
LABEL_28:
          char v30 = (char *)operator new(0x80uLL);
          uint64_t v31 = v18[4];
          int v32 = *((_DWORD *)v18 + 10);
          uint64_t v33 = v18[6];
          *((void *)v30 + 7) = 0;
          *((void *)v30 + 4) = v31;
          *((_DWORD *)v30 + 10) = v32;
          *((void *)v30 + 6) = v33;
          *((void *)v30 + 8) = 0;
          *((void *)v30 + 9) = 0;
          std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)v30 + 7, (const void *)v18[7], v18[8], (uint64_t)(v18[8] - v18[7]) >> 4);
          *((void *)v30 + 10) = v18[10];
          long long v34 = *(_OWORD *)(v18 + 11);
          long long v35 = *(_OWORD *)(v18 + 13);
          *((void *)v30 + 15) = v18[15];
          *(_OWORD *)(v30 + 104) = v35;
          *(_OWORD *)(v30 + 88) = v34;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 208), (uint64_t)v26, v27, (uint64_t *)v30);
        }
      }
      else
      {
        id v27 = (uint64_t **)(a1 + 216);
        int v26 = (uint64_t **)(a1 + 216);
        if (!v19) {
          goto LABEL_28;
        }
        BOOL v28 = v19;
        while (1)
        {
          while (1)
          {
            int v26 = (uint64_t **)v28;
            uint64_t v29 = v28[4];
            if (v29 <= v25) {
              break;
            }
            BOOL v28 = *v26;
            id v27 = v26;
            if (!*v26) {
              goto LABEL_28;
            }
          }
          if (v29 >= v25) {
            break;
          }
          BOOL v28 = v26[1];
          if (!v28)
          {
            id v27 = v26 + 1;
            goto LABEL_28;
          }
        }
      }
      uint64_t v36 = (void *)v18[1];
      if (v36)
      {
        do
        {
          uint64_t v37 = v36;
          uint64_t v36 = (void *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          uint64_t v37 = (void *)v18[2];
          BOOL v24 = *v37 == (void)v18;
          uint64_t v18 = v37;
        }
        while (!v24);
      }
      if (v37 == (void *)(a2 + 216)) {
        break;
      }
      uint64_t v19 = (void *)*v17;
      uint64_t v20 = *(void **)(a1 + 208);
      uint64_t v18 = v37;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 232, a2 + 232);
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 272), *(const void **)(a2 + 272), *(void *)(a2 + 280), (uint64_t)(*(void *)(a2 + 280) - *(void *)(a2 + 272)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 296, a2 + 296);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 336, a2 + 336);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 376, a2 + 376);
  return a1;
}

void sub_1BD0D6F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, id *location, void **a12)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v17);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  uint64_t v19 = *v15;
  if (*v15)
  {
    *(void *)(v13 + 280) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>>>::destroy(*v12);
  uint64_t v20 = *a9;
  if (*a9)
  {
    *(void *)(v13 + 144) = v20;
    operator delete(v20);
  }
  long long v21 = *a10;
  if (*a10)
  {
    *(void *)(v13 + 104) = v21;
    operator delete(v21);
  }
  objc_destroyWeak(location);
  long long v22 = *a12;
  if (*a12)
  {
    *(void *)(v13 + 72) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::operator=(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  long long v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v5;

  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  id WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  uint64_t v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(void *)(a1 + 104) = v9;
    operator delete(v9);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 96) = 0;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 136, (__n128 *)(a2 + 136));
  uint64_t v11 = a1 + 216;
  id v10 = *(void **)(a1 + 216);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  long long v12 = *(_OWORD *)(a2 + 168);
  long long v13 = *(_OWORD *)(a2 + 184);
  *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
  *(_OWORD *)(a1 + 168) = v12;
  *(_OWORD *)(a1 + 184) = v13;
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>>>::destroy(v10);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  uint64_t v14 = (void *)(a2 + 216);
  uint64_t v15 = *(void *)(a2 + 216);
  *(void *)(a1 + 216) = v15;
  uint64_t v16 = *(void *)(a2 + 224);
  *(void *)(a1 + 224) = v16;
  if (v16)
  {
    *(void *)(v15 + 16) = v11;
    *(void *)(a2 + 208) = v14;
    *uint64_t v14 = 0;
    *(void *)(a2 + 224) = 0;
  }
  else
  {
    *(void *)(a1 + 208) = v11;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 232, (uint64_t *)(a2 + 232));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 272, (__n128 *)(a2 + 272));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 296, (uint64_t *)(a2 + 296));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 336, (uint64_t *)(a2 + 336));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 376, (uint64_t *)(a2 + 376));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  double v4 = *(double *)a2;
  id v5 = objc_alloc(MEMORY[0x1E4F1C9C8]);
  long long v6 = (double *)(a2 + 40);
  if (v4 != -1.79769313e308) {
    long long v6 = (double *)a2;
  }
  id v92 = (id)[v5 initWithTimeIntervalSinceReferenceDate:*v6];
  uint64_t v94 = a2;
  if (*(double *)(a2 + 8) == 1.79769313e308) {
    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 48)];
  }
  else {
    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 8)];
  }
  uint64_t v8 = (void *)v7;
  id v9 = *(id *)(a1 + 16);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v10 = *(id *)(a1 + 16);
    if ([v10 shouldUseUnderlyingTypeForStatistics])
    {
      unint64_t WeakRetained = [v10 underlyingSampleType];

      id v9 = (id)WeakRetained;
    }
  }
  uint64_t v11 = (void *)[objc_alloc(MEMORY[0x1E4F2B5B0]) initWithDataType:v9 startDate:v92 endDate:v8];
  if (*(unsigned char *)(a1 + 24))
  {
    unint64_t WeakRetained = (unint64_t)objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      unint64_t WeakRetained = (unint64_t)objc_alloc_init(MEMORY[0x1E4F1CA48]);
      long long v12 = *(uint64_t **)(a2 + 272);
      long long v13 = *(uint64_t **)(a2 + 280);
      while (v12 != v13)
      {
        uint64_t v14 = *v12;
        id v15 = objc_loadWeakRetained((id *)(a1 + 48));
        uint64_t v16 = [v15 sourceForSourceID:v14];

        if (v16)
        {
          if (([(id)WeakRetained containsObject:v16] & 1) == 0) {
            [(id)WeakRetained addObject:v16];
          }
        }

        ++v12;
      }
      uint64_t v17 = (void *)[(id)WeakRetained copy];
      [v11 _setSources:v17];
    }
  }

  v104[0] = &unk_1F1724410;
  long long v105 = v104;
  id v93 = v11;
  uint64_t v18 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v19 = [MEMORY[0x1E4F2B618] secondUnit];
  LODWORD(v95[0]) = *(_DWORD *)(v94 + 120);
  uint64_t v20 = *(const void **)(v94 + 136);
  v95[1] = *(void **)(v94 + 128);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v97 = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(__p, v20, *(void *)(v94 + 144), (uint64_t)(*(void *)(v94 + 144) - (void)v20) >> 4);
  uint64_t v98 = *(void *)(v94 + 160);
  long long v21 = *(_OWORD *)(v94 + 184);
  long long v99 = *(_OWORD *)(v94 + 168);
  long long v100 = v21;
  uint64_t v101 = *(void *)(v94 + 200);
  if (!v105) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v22 = (*(uint64_t (**)(void *, void **))(*v105 + 48))(v105, v95);
  uint64_t v23 = *(double **)(v22 + 8);
  double v24 = 0.0;
  while (v23 != *(double **)(v22 + 16))
  {
    double v26 = *v23;
    double v25 = v23[1];
    v23 += 2;
    double v24 = v24 + v25 - v26;
  }
  unint64_t v27 = [v18 quantityWithUnit:v19 doubleValue:v24 + *(double *)(v22 + 32)];
  [v93 setDuration:v27];

  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  LODWORD(v95[0]) = *(_DWORD *)(v94 + 120);
  BOOL v28 = *(const void **)(v94 + 136);
  v95[1] = *(void **)(v94 + 128);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v97 = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(__p, v28, *(void *)(v94 + 144), (uint64_t)(*(void *)(v94 + 144) - (void)v28) >> 4);
  uint64_t v98 = *(void *)(v94 + 160);
  long long v29 = *(_OWORD *)(v94 + 184);
  long long v99 = *(_OWORD *)(v94 + 168);
  long long v100 = v29;
  uint64_t v101 = *(void *)(v94 + 200);
  if (!v105) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  objc_msgSend(v93, "setDataCount:", *(void *)(*(uint64_t (**)(void *, void **))(*v105 + 48))(v105, v95));
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    goto LABEL_133;
  }
  id v91 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v90 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  *(_OWORD *)uint64_t v95 = 0u;
  *(_OWORD *)long long __p = 0u;
  LODWORD(v97) = 1065353216;
  char v30 = *(void **)(v94 + 208);
  if (v30 == (void *)(v94 + 216)) {
    goto LABEL_132;
  }
  do
  {
    uint64_t v31 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(v94, v30[4]);
    int v32 = v31;
    if (!v31) {
      goto LABEL_108;
    }
    unint64_t v33 = [v31 hash];
    unint64_t v34 = v33;
    unint64_t v27 = (unint64_t)v95[1];
    if (!v95[1]) {
      goto LABEL_49;
    }
    uint8x8_t v35 = (uint8x8_t)vcnt_s8((int8x8_t)v95[1]);
    v35.i16[0] = vaddlv_u8(v35);
    unint64_t v36 = v35.u32[0];
    if (v35.u32[0] > 1uLL)
    {
      unint64_t WeakRetained = v33;
      if ((void *)v33 >= v95[1]) {
        unint64_t WeakRetained = v33 % (unint64_t)v95[1];
      }
    }
    else
    {
      unint64_t WeakRetained = ((unint64_t)v95[1] - 1) & v33;
    }
    uint64_t v37 = (uint64_t **)*((void *)v95[0] + WeakRetained);
    if (!v37 || (double v38 = *v37) == 0)
    {
LABEL_49:
      uint64_t v44 = (char *)operator new(0x70uLL);
      v102[0] = v44;
      v102[1] = __p;
      *(void *)uint64_t v44 = 0;
      *((void *)v44 + 1) = v34;
      *((void *)v44 + 2) = v32;
      *(_OWORD *)(v44 + 24) = 0u;
      *(_OWORD *)(v44 + 40) = 0u;
      *(_OWORD *)(v44 + 56) = 0u;
      *(_OWORD *)(v44 + 72) = 0u;
      *(_OWORD *)(v44 + 88) = 0u;
      *((void *)v44 + 13) = 0;
      char v103 = 1;
      float v45 = (float)((unint64_t)__p[1] + 1);
      if (v27 && (float)(*(float *)&v97 * (float)v27) >= v45)
      {
LABEL_95:
        double v61 = (void *)*((void *)v95[0] + WeakRetained);
        double v38 = (uint64_t *)v102[0];
        if (v61)
        {
          *(void *)v102[0] = *v61;
        }
        else
        {
          *(void *)v102[0] = __p[0];
          __p[0] = v38;
          *((void *)v95[0] + WeakRetained) = __p;
          if (!*v38)
          {
LABEL_104:
            v102[0] = 0;
            ++__p[1];
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v102);
            goto LABEL_105;
          }
          unint64_t v62 = *(void *)(*v38 + 8);
          if ((v27 & (v27 - 1)) != 0)
          {
            if (v62 >= v27) {
              v62 %= v27;
            }
          }
          else
          {
            v62 &= v27 - 1;
          }
          double v61 = (char *)v95[0] + 8 * v62;
        }
        *double v61 = v38;
        goto LABEL_104;
      }
      BOOL v46 = (v27 & (v27 - 1)) != 0;
      if (v27 < 3) {
        BOOL v46 = 1;
      }
      unint64_t v47 = v46 | (2 * v27);
      unint64_t v48 = vcvtps_u32_f32(v45 / *(float *)&v97);
      if (v47 <= v48) {
        int8x8_t prime = (int8x8_t)v48;
      }
      else {
        int8x8_t prime = (int8x8_t)v47;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v27 = (unint64_t)v95[1];
      if ((void *)*(void *)&prime > v95[1]) {
        goto LABEL_61;
      }
      if ((void *)*(void *)&prime < v95[1])
      {
        unint64_t v56 = vcvtps_u32_f32((float)(unint64_t)__p[1] / *(float *)&v97);
        if (v95[1] < (void *)3
          || (uint8x8_t v57 = (uint8x8_t)vcnt_s8((int8x8_t)v95[1]), v57.i16[0] = vaddlv_u8(v57), v57.u32[0] > 1uLL))
        {
          unint64_t v56 = std::__next_prime(v56);
        }
        else
        {
          uint64_t v58 = 1 << -(char)__clz(v56 - 1);
          if (v56 >= 2) {
            unint64_t v56 = v58;
          }
        }
        if (*(void *)&prime <= v56) {
          int8x8_t prime = (int8x8_t)v56;
        }
        if (*(void *)&prime >= v27)
        {
          unint64_t v27 = (unint64_t)v95[1];
        }
        else
        {
          if (prime)
          {
LABEL_61:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v50 = operator new(8 * *(void *)&prime);
            unint64_t v51 = v95[0];
            v95[0] = v50;
            if (v51) {
              operator delete(v51);
            }
            uint64_t v52 = 0;
            v95[1] = (void *)prime;
            do
              *((void *)v95[0] + v52++) = 0;
            while (*(void *)&prime != v52);
            unint64_t v53 = (void **)__p[0];
            if (__p[0])
            {
              unint64_t v54 = *((void *)__p[0] + 1);
              uint8x8_t v55 = (uint8x8_t)vcnt_s8(prime);
              v55.i16[0] = vaddlv_u8(v55);
              if (v55.u32[0] > 1uLL)
              {
                if (v54 >= *(void *)&prime) {
                  v54 %= *(void *)&prime;
                }
              }
              else
              {
                v54 &= *(void *)&prime - 1;
              }
              *((void *)v95[0] + v54) = __p;
              for (i = *v53; i; unint64_t v54 = v60)
              {
                unint64_t v60 = i[1];
                if (v55.u32[0] > 1uLL)
                {
                  if (v60 >= *(void *)&prime) {
                    v60 %= *(void *)&prime;
                  }
                }
                else
                {
                  v60 &= *(void *)&prime - 1;
                }
                if (v60 != v54)
                {
                  if (!*((void *)v95[0] + v60))
                  {
                    *((void *)v95[0] + v60) = v53;
                    goto LABEL_86;
                  }
                  *unint64_t v53 = (void *)*i;
                  void *i = **((void **)v95[0] + v60);
                  **((void **)v95[0] + v60) = i;
                  uint64_t i = v53;
                }
                unint64_t v60 = v54;
LABEL_86:
                unint64_t v53 = (void **)i;
                uint64_t i = (void *)*i;
              }
            }
            unint64_t v27 = (unint64_t)prime;
            goto LABEL_90;
          }
          uint64_t v68 = v95[0];
          v95[0] = 0;
          if (v68) {
            operator delete(v68);
          }
          unint64_t v27 = 0;
          v95[1] = 0;
        }
      }
LABEL_90:
      if ((v27 & (v27 - 1)) != 0)
      {
        if (v34 >= v27) {
          unint64_t WeakRetained = v34 % v27;
        }
        else {
          unint64_t WeakRetained = v34;
        }
      }
      else
      {
        unint64_t WeakRetained = (v27 - 1) & v34;
      }
      goto LABEL_95;
    }
    unint64_t v89 = (unint64_t)v95[1] - 1;
    while (1)
    {
      unint64_t v39 = v38[1];
      if (v39 == v34) {
        break;
      }
      if (v36 > 1)
      {
        if (v39 >= v27) {
          v39 %= v27;
        }
      }
      else
      {
        v39 &= v89;
      }
      if (v39 != WeakRetained) {
        goto LABEL_49;
      }
LABEL_48:
      double v38 = (uint64_t *)*v38;
      if (!v38) {
        goto LABEL_49;
      }
    }
    id v40 = (id)v38[2];
    id v41 = v32;
    uint64_t v42 = v41;
    if (v40 != v41)
    {
      char v43 = [v40 isEqualToString:v41];

      if (v43) {
        goto LABEL_105;
      }
      goto LABEL_48;
    }

LABEL_105:
    *((_DWORD *)v38 + 6) = *((_DWORD *)v30 + 10);
    v38[4] = v30[6];
    if (v38 + 2 != v30 + 4) {
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)v38 + 40, (char *)v30[7], v30[8], (uint64_t)(v30[8] - v30[7]) >> 4);
    }
    v38[8] = v30[10];
    long long v63 = *(_OWORD *)(v30 + 11);
    long long v64 = *(_OWORD *)(v30 + 13);
    *((_WORD *)v38 + 52) = *((_WORD *)v30 + 60);
    *(_OWORD *)(v38 + 11) = v64;
    *(_OWORD *)(v38 + 9) = v63;

LABEL_108:
    uint64_t v65 = (void *)v30[1];
    if (v65)
    {
      do
      {
        char v66 = v65;
        uint64_t v65 = (void *)*v65;
      }
      while (v65);
    }
    else
    {
      do
      {
        char v66 = (void *)v30[2];
        BOOL v67 = *v66 == (void)v30;
        char v30 = v66;
      }
      while (!v67);
    }
    char v30 = v66;
  }
  while (v66 != (void *)(v94 + 216));
  int8x16_t v69 = (id *)__p[0];
  if (__p[0])
  {
    do
    {
      id v70 = v69[2];
      long long v71 = (void *)MEMORY[0x1E4F2B370];
      long long v72 = [MEMORY[0x1E4F2B618] secondUnit];
      if (!v105) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      unint64_t WeakRetained = (unint64_t)(v69 + 3);
      uint64_t v73 = (*(uint64_t (**)(void *, id *))(*v105 + 48))(v105, v69 + 3);
      unint64_t v74 = *(double **)(v73 + 8);
      double v75 = 0.0;
      while (v74 != *(double **)(v73 + 16))
      {
        double v77 = *v74;
        double v76 = v74[1];
        v74 += 2;
        double v75 = v75 + v76 - v77;
      }
      uint64_t v78 = [v71 quantityWithUnit:v72 doubleValue:v75 + *(double *)(v73 + 32)];
      [v91 setObject:v78 forKeyedSubscript:v70];

      if (!v105) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v79 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)(*(uint64_t (**)(void *, id *))(*v105 + 48))(v105, v69 + 3));
      [v90 setObject:v79 forKeyedSubscript:v70];

      int8x16_t v69 = (id *)*v69;
    }
    while (v69);
  }
LABEL_132:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)v95);
  [v93 setDurationBySource:v91];
  [v93 setDataCountBySource:v90];

LABEL_133:
  std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v104);
  long long v80 = [*(id *)(a1 + 16) _unitForChangeInCanonicalUnit];
  long long v81 = [v93 averageQuantity];
  if (v81)
  {
    unint64_t v27 = [v93 averageQuantity];
    if (([(id)v27 isCompatibleWithUnit:v80] & 1) == 0)
    {

      goto LABEL_147;
    }
  }
  int v82 = [v93 minimumQuantity];
  if (v82)
  {
    unint64_t WeakRetained = [v93 minimumQuantity];
    if (![(id)WeakRetained isCompatibleWithUnit:v80])
    {
      int v83 = 1;
      goto LABEL_141;
    }
  }
  long long v84 = [v93 maximumQuantity];
  if (v84)
  {
    long long v85 = [v93 maximumQuantity];
    int v86 = [v85 isCompatibleWithUnit:v80];

    int v83 = v86 ^ 1;
    if (v82) {
      goto LABEL_141;
    }
LABEL_145:
    if (!v81) {
      goto LABEL_146;
    }
LABEL_142:

    if ((v83 & 1) == 0) {
      goto LABEL_148;
    }
LABEL_147:
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8], @"Expected compatibility with %@", v80 format];
    goto LABEL_148;
  }
  int v83 = 0;
  if (!v82) {
    goto LABEL_145;
  }
LABEL_141:

  if (v81) {
    goto LABEL_142;
  }
LABEL_146:

  if (v83) {
    goto LABEL_147;
  }
LABEL_148:

  return v93;
}

void sub_1BD0D7DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if (v33) {
  if (v31)
  }

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 256);
  uint64_t v2 = *(void *)(a1 + 272);
  if (v1 != (*(void *)(a1 + 280) - v2) >> 3)
  {
    double v4 = (void **)(a1 + 272);
    *(void *)(a1 + 280) = v2;
    std::vector<long long>::reserve((void **)(a1 + 272), v1);
    id v5 = *(void **)(a1 + 248);
    if (v5)
    {
      long long v6 = *(char **)(a1 + 280);
      do
      {
        uint64_t v7 = v5[2];
        unint64_t v8 = *(void *)(a1 + 288);
        if ((unint64_t)v6 >= v8)
        {
          id v10 = (char *)*v4;
          uint64_t v11 = (v6 - (unsigned char *)*v4) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            id v10 = *(char **)(a1 + 272);
            long long v6 = *(char **)(a1 + 280);
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v16 = (void *)(v14 + 8 * v11);
          void *v16 = v7;
          id v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            uint64_t v17 = *((void *)v6 - 1);
            v6 -= 8;
            *--uint64_t v16 = v17;
          }
          *(void *)(a1 + 272) = v16;
          *(void *)(a1 + 280) = v9;
          *(void *)(a1 + 288) = v14 + 8 * v15;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)long long v6 = v7;
          id v9 = v6 + 8;
        }
        *(void *)(a1 + 280) = v9;
        id v5 = (void *)*v5;
        long long v6 = v9;
      }
      while (v5);
    }
    uint64_t v18 = (id *)(a1 + 88);
    id WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      id v20 = objc_loadWeakRetained(v18);
      [v20 orderSourceIDs:v4];
    }
  }
}

void sub_1BD0D8134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2) {
    a2 = v4 * floor(a2 / v4);
  }
  double v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    uint64_t v125 = (void **)(a1 + 96);
    long long v121 = (double **)(a1 + 64);
    long long v119 = (uint64_t *)(a1 + 120);
    location = (id *)(a1 + 88);
    long long v115 = (double **)(a1 + 136);
    long long v114 = (void *)(a1 + 216);
    while (1)
    {
      unint64_t v6 = *(void *)(a1 + 96);
      uint64_t v7 = *(long long **)(a1 + 104);
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v7 - v6) >> 4);
      if (v8) {
        break;
      }
LABEL_124:
      *(double *)(a1 + 56) = a2;
LABEL_125:
      double v111 = *(double *)(a1 + 56);
      if (v111 == v5)
      {
        long long v112 = [MEMORY[0x1E4F28B00] currentHandler];
        long long v113 = [NSString stringWithUTF8String:"void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeThroughTime(double) [Statistics = HDStatisticsRelative<HDStatisticsTimeInterval>]"];
        [v112 handleFailureInFunction:v113 file:@"HDStatisticsBucket.hpp" lineNumber:234 description:@"Failed to make forward progress during statistics merge."];

        double v111 = *(double *)(a1 + 56);
      }
      double v5 = v111;
      if (v111 >= a2) {
        return;
      }
    }
    if (v8 != 1)
    {
      double v20 = a2;
      double v21 = a2;
      double v22 = v5;
      uint64_t v23 = *(void *)(a1 + 96);
      if ((long long *)v6 != v7)
      {
        do
        {
          double v24 = *(double *)(v23 + 8);
          double v25 = *(double *)(v23 + 16);
          if (v24 > v22 && v24 < v21) {
            double v21 = *(double *)(v23 + 8);
          }
          if (v25 > v5) {
            double v27 = *(double *)(v23 + 16);
          }
          else {
            double v27 = v20;
          }
          if (v25 < v20)
          {
            double v22 = v5;
            double v20 = v27;
          }
          v23 += 48;
        }
        while ((long long *)v23 != v7);
      }
      if (v20 >= v21) {
        double v28 = v21;
      }
      else {
        double v28 = v20;
      }
      double v29 = *(double *)(a1 + 16);
      if (v29 > 0.0)
      {
        double v30 = v29 * floor(v28 / v29);
        double v31 = v29 * floor((v29 + v5) / v29);
        if (v30 >= v31) {
          double v28 = v30;
        }
        else {
          double v28 = v31;
        }
      }
      *uint64_t v125 = 0;
      v125[1] = 0;
      v125[2] = 0;
      if ((long long *)v6 != v7)
      {
        if (v8 > 0x555555555555555) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        int v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v8);
        uint8x8_t v35 = *(char **)(a1 + 96);
        unint64_t v34 = *(char **)(a1 + 104);
        unint64_t v36 = v32;
        if (v34 != v35)
        {
          do
          {
            long long v37 = *((_OWORD *)v34 - 3);
            long long v38 = *((_OWORD *)v34 - 2);
            *(_OWORD *)(v36 - 21) = *(_OWORD *)(v34 - 21);
            *((_OWORD *)v36 - 3) = v37;
            *((_OWORD *)v36 - 2) = v38;
            v36 -= 48;
            v34 -= 48;
          }
          while (v34 != v35);
          unint64_t v34 = (char *)*v125;
        }
        *(void *)(a1 + 96) = v36;
        *(void *)(a1 + 104) = v32;
        *(void *)(a1 + 112) = &v32[48 * v33];
        if (v34) {
          operator delete(v34);
        }
      }
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_updateSourceOrder(a1);
      id WeakRetained = objc_loadWeakRetained(location);

      if (WeakRetained)
      {
        *(void *)&v127.var0 = a1;
        unint64_t v40 = 126 - 2 * __clz(v8);
        if ((long long *)v6 == v7) {
          uint64_t v41 = 0;
        }
        else {
          uint64_t v41 = v40;
        }
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*,false>(v6, v7, (uint64_t)&v127, v41, 1);
      }
      if (*(unsigned char *)(a1 + 25)) {
        id v118 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      }
      else {
        id v118 = 0;
      }
      long long v117 = (void *)v6;
      if ((long long *)v6 == v7)
      {
LABEL_106:
        *(double *)(a1 + 160) = HKIntervalMask<double>::removeIntervalsBefore(v115, v28) + *(double *)(a1 + 160);
        uint64_t v96 = *(void **)(a1 + 208);
        if (v96 != v114)
        {
          do
          {
            *((double *)v96 + 10) = HKIntervalMask<double>::removeIntervalsBefore((double **)v96 + 7, v28)
                                  + *((double *)v96 + 10);
            uint64_t v97 = (void *)v96[1];
            if (v97)
            {
              do
              {
                uint64_t v98 = v97;
                uint64_t v97 = (void *)*v97;
              }
              while (v97);
            }
            else
            {
              do
              {
                uint64_t v98 = (void *)v96[2];
                BOOL v99 = *v98 == (void)v96;
                uint64_t v96 = v98;
              }
              while (!v99);
            }
            uint64_t v96 = v98;
          }
          while (v98 != v114);
        }
        *(double *)(a1 + 56) = v28;

        if (v117) {
          operator delete(v117);
        }
        goto LABEL_125;
      }
      int64_t v120 = 0;
      char v44 = 0;
      unint64_t v45 = v6;
      while (2)
      {
        long long v46 = *(_OWORD *)(v45 + 16);
        *(_OWORD *)&v127.var0 = *(_OWORD *)v45;
        *(_OWORD *)&v127.var2 = v46;
        *(void *)&v127.BOOL var4 = *(void *)(v45 + 32);
        uint64_t v47 = v46;
        double v48 = v28 - v127.var1;
        double v49 = *(double *)&v46 - v127.var1;
        if (v49 - (v28 - v127.var1) < 0.01)
        {
          int64_t v50 = 0;
          BOOL var4 = 0;
          BOOL var5 = 0;
          double v53 = 0.0;
          uint64_t v47 = 0;
          double v54 = 0.0;
          if (!v127.var4) {
            goto LABEL_59;
          }
LABEL_54:
          BOOL v123 = var5;
          int64_t v124 = v50;
          HDRawQuantitySample::applyMask((uint64_t)&v127, v121);
          int v56 = *(unsigned __int8 *)(v45 + 42);
          int v57 = *(unsigned __int8 *)(v45 + 41);
          char v122 = *(unsigned char *)(v45 + 40);
          if (!v127.var4) {
            goto LABEL_87;
          }
          if (v44)
          {
            unint64_t var3 = v127.var3;
            if (v120 == v127.var3 || *(unsigned char *)(a1 + 24))
            {
              HDStatisticsRelative<HDStatisticsTimeInterval>::addSample(v119, &v127, v56 == 0);
              int v56 = 1;
            }
          }
          else
          {
            HDStatisticsRelative<HDStatisticsTimeInterval>::addSample(v119, &v127, v56 == 0);
            int v56 = 1;
            unint64_t var3 = v127.var3;
            int64_t v120 = v127.var3;
          }
          if (!*(unsigned char *)(a1 + 25)) {
            goto LABEL_86;
          }
          int8x16_t v69 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, var3);
          if (!v69) {
            goto LABEL_85;
          }
          id v70 = [v118 objectForKeyedSubscript:v69];
          long long v71 = v70;
          if (v70)
          {
            if ([v70 longLongValue] != var3 && !*(unsigned char *)(a1 + 24))
            {
LABEL_84:

LABEL_85:
LABEL_86:
              char v44 = 1;
LABEL_87:
              if (var4)
              {
                BOOL v84 = v56 != 0;
                int v86 = *(char **)(a1 + 104);
                unint64_t v85 = *(void *)(a1 + 112);
                if ((unint64_t)v86 < v85)
                {
                  *(double *)int v86 = v54;
                  *((double *)v86 + 1) = v53;
                  *((void *)v86 + 2) = v47;
                  *((void *)v86 + 3) = v124;
                  v86[32] = var4;
                  v86[33] = v123;
                  v86[40] = v122;
                  v86[41] = v57;
                  long long v63 = v86 + 48;
                  v86[42] = v84;
                  goto LABEL_104;
                }
                long long v80 = (char *)*v125;
                unint64_t v87 = 0xAAAAAAAAAAAAAAABLL * ((v86 - (unsigned char *)*v125) >> 4);
                unint64_t v88 = v87 + 1;
                if (v87 + 1 > 0x555555555555555) {
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v89 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v85 - (void)v80) >> 4);
                if (2 * v89 > v88) {
                  unint64_t v88 = 2 * v89;
                }
                if (v89 >= 0x2AAAAAAAAAAAAAALL) {
                  unint64_t v90 = 0x555555555555555;
                }
                else {
                  unint64_t v90 = v88;
                }
                if (v90)
                {
                  unint64_t v90 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v90);
                  long long v80 = *(char **)(a1 + 96);
                  int v86 = *(char **)(a1 + 104);
                }
                else
                {
                  uint64_t v91 = 0;
                }
                unint64_t v92 = v90 + 48 * v87;
                *(double *)unint64_t v92 = v54;
                *(double *)(v92 + 8) = v53;
                *(void *)(v92 + 16) = v47;
                *(void *)(v92 + 24) = v124;
                *(unsigned char *)(v92 + 32) = var4;
                *(unsigned char *)(v92 + 33) = v123;
                *(unsigned char *)(v92 + 40) = v122;
                *(unsigned char *)(v92 + 41) = v57;
                *(unsigned char *)(v92 + 42) = v84;
                unint64_t v93 = v92;
                if (v86 != v80)
                {
                  do
                  {
                    long long v94 = *((_OWORD *)v86 - 3);
                    long long v95 = *((_OWORD *)v86 - 2);
                    *(_OWORD *)(v93 - 21) = *(_OWORD *)(v86 - 21);
                    *(_OWORD *)(v93 - 48) = v94;
                    *(_OWORD *)(v93 - 32) = v95;
                    v93 -= 48;
                    v86 -= 48;
                  }
                  while (v86 != v80);
                  long long v80 = (char *)*v125;
                }
                long long v63 = (_OWORD *)(v92 + 48);
                *(void *)(a1 + 96) = v93;
                *(void *)(a1 + 104) = v92 + 48;
                *(void *)(a1 + 112) = v90 + 48 * v91;
                if (v80) {
LABEL_103:
                }
                  operator delete(v80);
                goto LABEL_104;
              }
              goto LABEL_105;
            }
          }
          else
          {
            long long v81 = [NSNumber numberWithLongLong:var3];
            [v118 setObject:v81 forKeyedSubscript:v69];
          }
          unint64_t v82 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, var3);
          int v83 = (uint64_t *)HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_statisticsForSource(a1, v82);
          HDStatisticsRelative<HDStatisticsTimeInterval>::addSample(v83, &v127, v57 == 0);
          LOBYTE(v57) = 1;
          goto LABEL_84;
        }
        if (v48 < 0.01)
        {
          v127.BOOL var4 = 0;
          goto LABEL_59;
        }
        double v55 = v48 / v49 * v127.var0;
        int64_t v50 = v127.var3;
        BOOL var5 = v127.var5;
        double v54 = v127.var0 - v55;
        v127.var0 = v55;
        v127.var2 = v28;
        double v53 = v28;
        BOOL var4 = v127.var4;
        if (v127.var4) {
          goto LABEL_54;
        }
LABEL_59:
        id v59 = *(_OWORD **)(a1 + 104);
        unint64_t v60 = *(void *)(a1 + 112);
        if ((unint64_t)v59 < v60)
        {
          long long v61 = *(_OWORD *)v45;
          long long v62 = *(_OWORD *)(v45 + 32);
          v59[1] = *(_OWORD *)(v45 + 16);
          v59[2] = v62;
          _OWORD *v59 = v61;
          long long v63 = v59 + 3;
          goto LABEL_104;
        }
        unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * (((char *)v59 - (unsigned char *)*v125) >> 4);
        unint64_t v65 = v64 + 1;
        if (v64 + 1 > 0x555555555555555) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - (void)*v125) >> 4);
        if (2 * v66 > v65) {
          unint64_t v65 = 2 * v66;
        }
        if (v66 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v67 = 0x555555555555555;
        }
        else {
          unint64_t v67 = v65;
        }
        if (v67) {
          unint64_t v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v67);
        }
        else {
          uint64_t v68 = 0;
        }
        long long v72 = (_OWORD *)(v67 + 48 * v64);
        long long v73 = *(_OWORD *)v45;
        long long v74 = *(_OWORD *)(v45 + 32);
        v72[1] = *(_OWORD *)(v45 + 16);
        v72[2] = v74;
        _OWORD *v72 = v73;
        double v76 = *(char **)(a1 + 96);
        double v75 = *(char **)(a1 + 104);
        double v77 = v72;
        if (v75 != v76)
        {
          do
          {
            long long v78 = *((_OWORD *)v75 - 3);
            long long v79 = *((_OWORD *)v75 - 2);
            *(_OWORD *)((char *)v77 - 21) = *(_OWORD *)(v75 - 21);
            *(v77 - 3) = v78;
            *(v77 - 2) = v79;
            v77 -= 3;
            v75 -= 48;
          }
          while (v75 != v76);
          double v75 = (char *)*v125;
        }
        long long v63 = v72 + 3;
        *(void *)(a1 + 96) = v77;
        *(void *)(a1 + 104) = v72 + 3;
        *(void *)(a1 + 112) = v67 + 48 * v68;
        if (v75)
        {
          long long v80 = v75;
          goto LABEL_103;
        }
LABEL_104:
        *(void *)(a1 + 104) = v63;
LABEL_105:
        v45 += 48;
        if ((long long *)v45 == v7) {
          goto LABEL_106;
        }
        continue;
      }
    }
    double v10 = *(double *)v6;
    double v9 = *(double *)(v6 + 8);
    double v11 = *(double *)(v6 + 16);
    int64_t v12 = *(void *)(v6 + 24);
    char v13 = *(unsigned char *)(v6 + 32);
    char v14 = *(unsigned char *)(v6 + 33);
    double v15 = a2 - v9;
    if (a2 - v9 >= 0.01)
    {
      if (v11 - v9 - v15 < 0.01)
      {
        uint64_t v42 = 0;
        char v43 = 0;
        double v18 = 0.0;
        double v17 = *(double *)(v6 + 16);
        char v16 = *(unsigned char *)(v6 + 32);
        double v19 = 0.0;
        double v11 = 0.0;
        char v13 = 0;
LABEL_117:
        int v101 = *(unsigned __int8 *)(v6 + 42);
        int v102 = *(unsigned __int8 *)(v6 + 41);
        int v103 = *(unsigned __int8 *)(v6 + 40);
        v127.var0 = v10;
        v127.var1 = v9;
        v127.var2 = v17;
        v127.unint64_t var3 = v12;
        v127.BOOL var4 = v16;
        v127.BOOL var5 = v14;
        *(_DWORD *)(&v127.var5 + 1) = *(_DWORD *)(v6 + 34);
        *(_WORD *)(&v127.var5 + 5) = *(_WORD *)(v6 + 38);
        *(double *)&long long v128 = v18;
        *((double *)&v128 + 1) = v19;
        *(double *)&long long v129 = v11;
        *((void *)&v129 + 1) = v42;
        LOBYTE(v130) = v13;
        HIBYTE(v130) = v43;
        HDRawQuantitySample::applyMask((uint64_t)&v127, v121);
        BOOL v104 = v103 != 0;
        BOOL v105 = v102 != 0;
        BOOL v106 = v101 != 0;
        if (v127.var4)
        {
          HDStatisticsRelative<HDStatisticsTimeInterval>::addSample(v119, &v127, v101 == 0);
          if (*(unsigned char *)(a1 + 25))
          {
            unint64_t v107 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v127.var3);
            long long v108 = (uint64_t *)HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_statisticsForSource(a1, v107);
            HDStatisticsRelative<HDStatisticsTimeInterval>::addSample(v108, &v127, v102 == 0);
          }
          BOOL v104 = 1;
          BOOL v105 = 1;
          BOOL v106 = 1;
        }
        if ((_BYTE)v130)
        {
          LOWORD(v126) = v130;
          long long v109 = v129;
          __int16 v110 = (char *)*v125;
          *(_OWORD *)__int16 v110 = v128;
          *((_OWORD *)v110 + 1) = v109;
          *((void *)v110 + 4) = v126;
          v110[40] = v104;
          v110[41] = v105;
          v110[42] = v106;
        }
        else
        {
          *(void *)(a1 + 104) = *(void *)(a1 + 96);
        }
        goto LABEL_124;
      }
      double v100 = v10 * (v15 / (v11 - v9));
      double v17 = a2;
      char v16 = *(unsigned char *)(v6 + 32);
      double v18 = v10 - v100;
      double v10 = v100;
      double v19 = a2;
    }
    else
    {
      char v16 = 0;
      double v17 = *(double *)(v6 + 16);
      double v18 = *(double *)v6;
      double v19 = *(double *)(v6 + 8);
    }
    uint64_t v42 = *(void *)(v6 + 24);
    char v43 = *(unsigned char *)(v6 + 33);
    goto LABEL_117;
  }
}

void sub_1BD0D8AB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *HDStatisticsRelative<HDStatisticsTimeInterval>::addSample(uint64_t *result, HDRawQuantitySample *a2, int a3)
{
  double v4 = a2;
  int v5 = 2 * (a2->var0 != -1.79769313e308);
  if (a2->var0 == 1.79769313e308) {
    int v5 = 1;
  }
  if (!v5)
  {
    if (*(_DWORD *)result) {
      return result;
    }
    uint64_t v7 = result[1];
    ++result;
    if (v7) {
      return result;
    }
    goto LABEL_18;
  }
  if (v5 == 1)
  {
    if (*(_DWORD *)result) {
      return result;
    }
    int v8 = 1;
    goto LABEL_15;
  }
  if (v5 != 2) {
    return result;
  }
  if (*(_DWORD *)result != 2)
  {
    int v8 = 2;
LABEL_15:
    *(_DWORD *)BOOL result = v8;
    result[1] = 0;
    double v9 = result + 1;
    double v11 = result + 2;
    double v10 = (void *)result[2];
    if (v10)
    {
      result[3] = (uint64_t)v10;
      operator delete(v10);
    }
    *double v11 = 0u;
    v11[1] = 0u;
    BOOL result = v9;
LABEL_18:
    a2 = v4;
    int v6 = a3;
    goto LABEL_19;
  }
  ++result;
  int v6 = 1;
LABEL_19:

  return HDStatisticsTimeInterval::addSample(result, a2, v6);
}

uint64_t **HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = a2;
  int v5 = *(void **)(a1 + 216);
  id v3 = (uint64_t **)(a1 + 216);
  double v4 = v5;
  if (!v5) {
    goto LABEL_11;
  }
  int v6 = v3;
  do
  {
    uint64_t v7 = v4[4];
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      double v9 = v4;
    }
    else {
      double v9 = v4 + 1;
    }
    if (!v8) {
      int v6 = (uint64_t **)v4;
    }
    double v4 = (void *)*v9;
  }
  while (*v9);
  if (v6 == v3 || (uint64_t)v6[4] > a2)
  {
LABEL_11:
    double v10 = v3 - 1;
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v3 - 1, a2, &v12);
    int v6 = std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v10, a2, &v12);
  }
  return v6 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    int v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((void *)(a1 + 296), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, a2);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      id v10 = v6;
      uint64_t v7 = (void *)(a1 + 336);
      BOOL v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        double v11 = &v10;
        *((void *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        id v6 = v10;
      }
    }
  }
  return a2;
}

void sub_1BD0D8D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  double v4 = (id *)(a1 + 88);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    id v6 = (void *)(a1 + 376);
    uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
    if (v7)
    {
      id v8 = (id)v7[3];
    }
    else
    {
      id v9 = objc_loadWeakRetained(v4);
      id v8 = [v9 bundleIdentifierForSourceID:a2];

      if (v8)
      {
        id v10 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
        objc_storeStrong(v10 + 3, v8);
      }
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1BD0D8E80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, void *a3)
{
  id v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        uint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        int v5 = *v7;
        id v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      int v5 = v7[1];
      if (!v5)
      {
        id v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    id v9 = (char *)operator new(0x80uLL);
    *((void *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *((void *)v9 + 15) = 0;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v12 = a2 - 3;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 4);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v103 = *((void *)a2 - 3);
                uint64_t v104 = *(void *)(v13 + 24);
                if (v103 == v104) {
                  return;
                }
                BOOL v105 = *(char **)(*(void *)a3 + 272);
                BOOL v106 = *(char **)(*(void *)a3 + 280);
                unint64_t v107 = v105;
                long long v108 = v105;
                if (v105 == v106) {
                  goto LABEL_171;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)v13, (long long *)(v13 + 48), a2 - 3, a3);
                return;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, (uint64_t)(a2 - 3), a3);
                return;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, v13 + 144, (uint64_t)(a2 - 3), a3);
                return;
              default:
                JUMPOUT(0);
            }
            do
            {
              if (*(void *)v108 == v103) {
                goto LABEL_168;
              }
              v108 += 8;
            }
            while (v108 != v106);
            long long v108 = *(char **)(*(void *)a3 + 280);
LABEL_168:
            while (*(void *)v107 != v104)
            {
              v107 += 8;
              if (v107 == v106)
              {
                unint64_t v107 = *(char **)(*(void *)a3 + 280);
                break;
              }
            }
LABEL_171:
            if (v108 - v105 < v107 - v105)
            {
              *(_OWORD *)v226 = *(_OWORD *)(v13 + 16);
              *(_OWORD *)&v226[16] = *(_OWORD *)(v13 + 32);
              long long v218 = *(_OWORD *)v13;
              long long v109 = *v12;
              long long v110 = *(a2 - 2);
              *(_OWORD *)(v13 + 27) = *(long long *)((char *)a2 - 21);
              *(_OWORD *)unint64_t v13 = v109;
              *(_OWORD *)(v13 + 16) = v110;
              *(long long *)((char *)a2 - 21) = *(_OWORD *)&v226[11];
              *unint64_t v12 = v218;
              *(a2 - 2) = *(_OWORD *)v226;
            }
            return;
          }
          if (v14 <= 1151)
          {
            double v111 = (long long *)(v13 + 48);
            BOOL v113 = (long long *)v13 == a2 || v111 == a2;
            if (a5)
            {
              if (!v113)
              {
                unint64_t v114 = v13;
                do
                {
                  unint64_t v115 = v114;
                  unint64_t v114 = (unint64_t)v111;
                  uint64_t v116 = *(void *)(v115 + 72);
                  uint64_t v117 = *(void *)(v115 + 24);
                  if (v116 != v117)
                  {
                    id v118 = *(char **)(*(void *)a3 + 272);
                    long long v119 = *(char **)(*(void *)a3 + 280);
                    int64_t v120 = v118;
                    long long v121 = v118;
                    if (v118 != v119)
                    {
                      do
                      {
                        if (*(void *)v121 == v116) {
                          goto LABEL_196;
                        }
                        v121 += 8;
                      }
                      while (v121 != v119);
                      long long v121 = *(char **)(*(void *)a3 + 280);
LABEL_196:
                      while (*(void *)v120 != v117)
                      {
                        v120 += 8;
                        if (v120 == v119)
                        {
                          int64_t v120 = *(char **)(*(void *)a3 + 280);
                          break;
                        }
                      }
                    }
                    if (v121 - v118 < v120 - v118)
                    {
                      uint64_t v227 = *(void *)(v114 + 16);
                      long long v219 = *(_OWORD *)v114;
                      long long v236 = *(_OWORD *)(v115 + 80);
                      unint64_t v122 = v114;
                      while (1)
                      {
                        long long v123 = *(_OWORD *)(v115 + 16);
                        *(_OWORD *)unint64_t v122 = *(_OWORD *)v115;
                        *(_OWORD *)(v122 + 16) = v123;
                        *(_OWORD *)(v122 + 27) = *(_OWORD *)(v115 + 27);
                        if (v115 == v13) {
                          break;
                        }
                        unint64_t v122 = v115;
                        uint64_t v124 = *(void *)(v115 - 24);
                        if (v116 != v124)
                        {
                          uint64_t v125 = *(char **)(*(void *)a3 + 272);
                          uint64_t v126 = *(char **)(*(void *)a3 + 280);
                          HDRawQuantitySample v127 = v125;
                          long long v128 = v125;
                          if (v125 != v126)
                          {
                            do
                            {
                              if (*(void *)v128 == v116) {
                                goto LABEL_208;
                              }
                              v128 += 8;
                            }
                            while (v128 != v126);
                            long long v128 = *(char **)(*(void *)a3 + 280);
LABEL_208:
                            while (*(void *)v127 != v124)
                            {
                              v127 += 8;
                              if (v127 == v126)
                              {
                                HDRawQuantitySample v127 = *(char **)(*(void *)a3 + 280);
                                break;
                              }
                            }
                          }
                          unint64_t v115 = v122 - 48;
                          if (v128 - v125 < v127 - v125) {
                            continue;
                          }
                        }
                        goto LABEL_212;
                      }
                      unint64_t v122 = v13;
LABEL_212:
                      *(_OWORD *)unint64_t v122 = v219;
                      *(void *)(v122 + 16) = v227;
                      *(void *)(v122 + 24) = v116;
                      *(void *)(v122 + 32) = v236;
                      *(_DWORD *)(v122 + 39) = *(_DWORD *)((char *)&v236 + 7);
                    }
                  }
                  double v111 = (long long *)(v114 + 48);
                }
                while ((long long *)(v114 + 48) != a2);
              }
            }
            else if (!v113)
            {
              do
              {
                unint64_t v201 = a1;
                a1 = (unint64_t)v111;
                uint64_t v202 = *(void *)(v201 + 72);
                uint64_t v203 = *(void *)(v201 + 24);
                if (v202 != v203)
                {
                  v204 = *(char **)(*(void *)a3 + 272);
                  v205 = *(char **)(*(void *)a3 + 280);
                  v206 = v204;
                  v207 = v204;
                  if (v204 != v205)
                  {
                    do
                    {
                      if (*(void *)v207 == v202) {
                        goto LABEL_312;
                      }
                      v207 += 8;
                    }
                    while (v207 != v205);
                    v207 = *(char **)(*(void *)a3 + 280);
LABEL_312:
                    while (*(void *)v206 != v203)
                    {
                      v206 += 8;
                      if (v206 == v205)
                      {
                        v206 = *(char **)(*(void *)a3 + 280);
                        break;
                      }
                    }
                  }
                  if (v207 - v204 < v206 - v204)
                  {
                    uint64_t v230 = *(void *)(a1 + 16);
                    long long v222 = *(_OWORD *)a1;
                    long long v239 = *(_OWORD *)(v201 + 80);
                    unint64_t v208 = a1;
                    do
                    {
                      v209 = (_OWORD *)v208;
                      unint64_t v208 = v201;
                      long long v210 = *(_OWORD *)(v201 + 16);
                      _OWORD *v209 = *(_OWORD *)v201;
                      v209[1] = v210;
                      *(_OWORD *)((char *)v209 + 27) = *(_OWORD *)(v201 + 27);
                      uint64_t v211 = *(void *)(v201 - 24);
                      if (v202 == v211) {
                        break;
                      }
                      v212 = *(char **)(*(void *)a3 + 272);
                      v213 = *(char **)(*(void *)a3 + 280);
                      v214 = v212;
                      v215 = v212;
                      if (v212 != v213)
                      {
                        do
                        {
                          if (*(void *)v215 == v202) {
                            goto LABEL_322;
                          }
                          v215 += 8;
                        }
                        while (v215 != v213);
                        v215 = *(char **)(*(void *)a3 + 280);
LABEL_322:
                        while (*(void *)v214 != v211)
                        {
                          v214 += 8;
                          if (v214 == v213)
                          {
                            v214 = *(char **)(*(void *)a3 + 280);
                            break;
                          }
                        }
                      }
                      unint64_t v201 = v208 - 48;
                    }
                    while (v215 - v212 < v214 - v212);
                    *(_OWORD *)unint64_t v208 = v222;
                    *(void *)(v208 + 16) = v230;
                    *(void *)(v208 + 24) = v202;
                    *(void *)(v208 + 32) = v239;
                    *(_DWORD *)(v208 + 39) = *(_DWORD *)((char *)&v239 + 7);
                  }
                }
                double v111 = (long long *)(a1 + 48);
              }
              while ((long long *)(a1 + 48) != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((long long *)v13 != a2)
            {
              int64_t v129 = (v15 - 2) >> 1;
              int64_t v130 = v129;
              do
              {
                int64_t v131 = v130;
                if (v129 >= v130)
                {
                  uint64_t v132 = (2 * v130) | 1;
                  unint64_t v133 = v13 + 48 * v132;
                  if (2 * v131 + 2 < (uint64_t)v15)
                  {
                    uint64_t v134 = *(void *)(v133 + 24);
                    uint64_t v135 = *(void *)(v133 + 72);
                    if (v134 != v135)
                    {
                      v137 = *(char **)(*(void *)a3 + 272);
                      v136 = *(char **)(*(void *)a3 + 280);
                      v138 = v137;
                      v139 = v137;
                      if (v137 != v136)
                      {
                        do
                        {
                          if (*(void *)v139 == v134) {
                            goto LABEL_224;
                          }
                          v139 += 8;
                        }
                        while (v139 != v136);
                        v139 = *(char **)(*(void *)a3 + 280);
LABEL_224:
                        while (*(void *)v138 != v135)
                        {
                          v138 += 8;
                          if (v138 == v136)
                          {
                            v138 = *(char **)(*(void *)a3 + 280);
                            break;
                          }
                        }
                      }
                      v133 += 48 * (v139 - v137 < v138 - v137);
                      if (v139 - v137 < v138 - v137) {
                        uint64_t v132 = 2 * v131 + 2;
                      }
                    }
                  }
                  unint64_t v140 = v13 + 48 * v131;
                  uint64_t v141 = *(void *)(v133 + 24);
                  uint64_t v142 = *(void *)(v140 + 24);
                  if (v141 == v142) {
                    goto LABEL_238;
                  }
                  v144 = *(char **)(*(void *)a3 + 272);
                  v143 = *(char **)(*(void *)a3 + 280);
                  v145 = v144;
                  v146 = v144;
                  if (v144 != v143)
                  {
                    do
                    {
                      if (*(void *)v146 == v141) {
                        goto LABEL_234;
                      }
                      v146 += 8;
                    }
                    while (v146 != v143);
                    v146 = *(char **)(*(void *)a3 + 280);
LABEL_234:
                    while (*(void *)v145 != v142)
                    {
                      v145 += 8;
                      if (v145 == v143)
                      {
                        v145 = *(char **)(*(void *)a3 + 280);
                        break;
                      }
                    }
                  }
                  if (v146 - v144 >= v145 - v144)
                  {
LABEL_238:
                    uint64_t v228 = *(void *)(v140 + 16);
                    long long v220 = *(_OWORD *)v140;
                    long long v237 = *(_OWORD *)(v140 + 32);
                    long long v147 = *(_OWORD *)v133;
                    long long v148 = *(_OWORD *)(v133 + 16);
                    *(_OWORD *)(v140 + 27) = *(_OWORD *)(v133 + 27);
                    *(_OWORD *)unint64_t v140 = v147;
                    *(_OWORD *)(v140 + 16) = v148;
                    if (v129 >= v132)
                    {
                      while (1)
                      {
                        uint64_t v150 = 2 * v132;
                        uint64_t v132 = (2 * v132) | 1;
                        unint64_t v149 = v13 + 48 * v132;
                        uint64_t v151 = v150 + 2;
                        if (v151 < (uint64_t)v15)
                        {
                          uint64_t v152 = *(void *)(v149 + 24);
                          uint64_t v153 = *(void *)(v149 + 72);
                          if (v152 != v153)
                          {
                            v154 = *(char **)(*(void *)a3 + 272);
                            v155 = *(char **)(*(void *)a3 + 280);
                            v156 = v154;
                            v157 = v154;
                            if (v154 != v155)
                            {
                              do
                              {
                                if (*(void *)v157 == v152) {
                                  goto LABEL_246;
                                }
                                v157 += 8;
                              }
                              while (v157 != v155);
                              v157 = *(char **)(*(void *)a3 + 280);
LABEL_246:
                              while (*(void *)v156 != v153)
                              {
                                v156 += 8;
                                if (v156 == v155)
                                {
                                  v156 = *(char **)(*(void *)a3 + 280);
                                  break;
                                }
                              }
                            }
                            v149 += 48 * (v157 - v154 < v156 - v154);
                            if (v157 - v154 < v156 - v154) {
                              uint64_t v132 = v151;
                            }
                          }
                        }
                        uint64_t v158 = *(void *)(v149 + 24);
                        if (v158 != v142)
                        {
                          v160 = *(char **)(*(void *)a3 + 272);
                          v159 = *(char **)(*(void *)a3 + 280);
                          v161 = v160;
                          v162 = v160;
                          if (v160 != v159)
                          {
                            do
                            {
                              if (*(void *)v162 == v158) {
                                goto LABEL_256;
                              }
                              v162 += 8;
                            }
                            while (v162 != v159);
                            v162 = *(char **)(*(void *)a3 + 280);
LABEL_256:
                            while (*(void *)v161 != v142)
                            {
                              v161 += 8;
                              if (v161 == v159)
                              {
                                v161 = *(char **)(*(void *)a3 + 280);
                                break;
                              }
                            }
                          }
                          if (v162 - v160 < v161 - v160) {
                            break;
                          }
                        }
                        long long v163 = *(_OWORD *)v149;
                        long long v164 = *(_OWORD *)(v149 + 16);
                        *(_OWORD *)(v133 + 27) = *(_OWORD *)(v149 + 27);
                        *(_OWORD *)unint64_t v133 = v163;
                        *(_OWORD *)(v133 + 16) = v164;
                        unint64_t v133 = v149;
                        if (v129 < v132) {
                          goto LABEL_261;
                        }
                      }
                    }
                    unint64_t v149 = v133;
LABEL_261:
                    *(_OWORD *)unint64_t v149 = v220;
                    *(void *)(v149 + 16) = v228;
                    *(void *)(v149 + 24) = v142;
                    *(void *)(v149 + 32) = v237;
                    *(_DWORD *)(v149 + 39) = *(_DWORD *)((char *)&v237 + 7);
                  }
                }
                int64_t v130 = v131 - 1;
              }
              while (v131);
              int64_t v165 = v14 / 0x30uLL;
              do
              {
                uint64_t v166 = 0;
                *(_OWORD *)v229 = *(_OWORD *)(v13 + 16);
                *(_OWORD *)&v229[16] = *(_OWORD *)(v13 + 32);
                long long v221 = *(_OWORD *)v13;
                uint64_t v167 = v165 - 2;
                if (v165 < 2) {
                  uint64_t v167 = v165 - 1;
                }
                uint64_t v168 = v167 >> 1;
                unint64_t v169 = v13;
                do
                {
                  v170 = (_OWORD *)v169;
                  v169 += 48 * v166 + 48;
                  uint64_t v171 = 2 * v166;
                  uint64_t v166 = (2 * v166) | 1;
                  uint64_t v172 = v171 + 2;
                  if (v171 + 2 < v165)
                  {
                    uint64_t v173 = *(void *)(v169 + 24);
                    uint64_t v174 = *(void *)(v169 + 72);
                    if (v173 != v174)
                    {
                      v176 = *(char **)(*(void *)a3 + 272);
                      v175 = *(char **)(*(void *)a3 + 280);
                      v177 = v176;
                      v178 = v176;
                      if (v176 != v175)
                      {
                        do
                        {
                          if (*(void *)v178 == v173) {
                            goto LABEL_273;
                          }
                          v178 += 8;
                        }
                        while (v178 != v175);
                        v178 = *(char **)(*(void *)a3 + 280);
LABEL_273:
                        while (*(void *)v177 != v174)
                        {
                          v177 += 8;
                          if (v177 == v175)
                          {
                            v177 = *(char **)(*(void *)a3 + 280);
                            break;
                          }
                        }
                      }
                      v169 += 48 * (v178 - v176 < v177 - v176);
                      if (v178 - v176 < v177 - v176) {
                        uint64_t v166 = v172;
                      }
                    }
                  }
                  long long v179 = *(_OWORD *)v169;
                  long long v180 = *(_OWORD *)(v169 + 16);
                  *(_OWORD *)((char *)v170 + 27) = *(_OWORD *)(v169 + 27);
                  _OWORD *v170 = v179;
                  v170[1] = v180;
                }
                while (v166 <= v168);
                a2 -= 3;
                if ((long long *)v169 == a2)
                {
                  *(_OWORD *)(v169 + 27) = *(_OWORD *)&v229[11];
                  *(_OWORD *)unint64_t v169 = v221;
                  *(_OWORD *)(v169 + 16) = *(_OWORD *)v229;
                }
                else
                {
                  long long v181 = *a2;
                  long long v182 = a2[1];
                  *(_OWORD *)(v169 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v169 = v181;
                  *(_OWORD *)(v169 + 16) = v182;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v229[11];
                  *a2 = v221;
                  a2[1] = *(_OWORD *)v229;
                  uint64_t v183 = v169 - v13 + 48;
                  if (v183 >= 49)
                  {
                    unint64_t v184 = (v183 / 0x30uLL - 2) >> 1;
                    unint64_t v185 = v13 + 48 * v184;
                    uint64_t v186 = *(void *)(v185 + 24);
                    uint64_t v187 = *(void *)(v169 + 24);
                    if (v186 != v187)
                    {
                      v189 = *(char **)(*(void *)a3 + 272);
                      v188 = *(char **)(*(void *)a3 + 280);
                      v190 = v189;
                      v191 = v189;
                      if (v189 != v188)
                      {
                        do
                        {
                          if (*(void *)v191 == v186) {
                            goto LABEL_286;
                          }
                          v191 += 8;
                        }
                        while (v191 != v188);
                        v191 = *(char **)(*(void *)a3 + 280);
LABEL_286:
                        while (*(void *)v190 != v187)
                        {
                          v190 += 8;
                          if (v190 == v188)
                          {
                            v190 = *(char **)(*(void *)a3 + 280);
                            break;
                          }
                        }
                      }
                      if (v191 - v189 < v190 - v189)
                      {
                        uint64_t v242 = *(void *)(v169 + 16);
                        long long v238 = *(_OWORD *)v169;
                        long long v233 = *(_OWORD *)(v169 + 32);
                        do
                        {
                          v192 = (_OWORD *)v169;
                          unint64_t v169 = v185;
                          long long v193 = *(_OWORD *)v185;
                          long long v194 = *(_OWORD *)(v185 + 16);
                          *(_OWORD *)((char *)v192 + 27) = *(_OWORD *)(v185 + 27);
                          _OWORD *v192 = v193;
                          v192[1] = v194;
                          if (!v184) {
                            break;
                          }
                          unint64_t v184 = (v184 - 1) >> 1;
                          unint64_t v185 = v13 + 48 * v184;
                          uint64_t v195 = *(void *)(v185 + 24);
                          if (v195 == v187) {
                            break;
                          }
                          v197 = *(char **)(*(void *)a3 + 272);
                          v196 = *(char **)(*(void *)a3 + 280);
                          v198 = v197;
                          v199 = v197;
                          if (v197 != v196)
                          {
                            do
                            {
                              if (*(void *)v199 == v195) {
                                goto LABEL_297;
                              }
                              v199 += 8;
                            }
                            while (v199 != v196);
                            v199 = *(char **)(*(void *)a3 + 280);
LABEL_297:
                            while (*(void *)v198 != v187)
                            {
                              v198 += 8;
                              if (v198 == v196)
                              {
                                v198 = *(char **)(*(void *)a3 + 280);
                                break;
                              }
                            }
                          }
                        }
                        while (v199 - v197 < v198 - v197);
                        *(_OWORD *)unint64_t v169 = v238;
                        *(void *)(v169 + 16) = v242;
                        *(void *)(v169 + 24) = v187;
                        *(void *)(v169 + 32) = v233;
                        *(_DWORD *)(v169 + 39) = *(_DWORD *)((char *)&v233 + 7);
                      }
                    }
                  }
                }
              }
              while (v165-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          double v17 = (long long *)(v13 + 48 * (v15 >> 1));
          if ((unint64_t)v14 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v15 >> 1)), a2 - 3, a3);
            uint64_t v18 = 3 * v16;
            double v19 = (long long *)(a1 + 48 * v16 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)(a1 + 48), v19, a2 - 6, a3);
            double v20 = (long long *)(a1 + 48 + 16 * v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)(a1 + 96), v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>(v19, v17, v20, a3);
            *(_OWORD *)v223 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v223[16] = *(_OWORD *)(a1 + 32);
            long long v216 = *(_OWORD *)a1;
            long long v21 = *(long long *)((char *)v17 + 27);
            long long v22 = v17[1];
            *(_OWORD *)a1 = *v17;
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(a1 + 27) = v21;
            *(long long *)((char *)v17 + 27) = *(_OWORD *)&v223[11];
            *double v17 = v216;
            v17[1] = *(_OWORD *)v223;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)(a1 + 48 * (v15 >> 1)), (long long *)a1, a2 - 3, a3);
          }
          --a4;
          if (a5)
          {
            uint64_t v23 = *(void *)(a1 + 24);
            uint64_t v24 = *(void *)a3;
            break;
          }
          uint64_t v25 = *(void *)(a1 - 24);
          uint64_t v23 = *(void *)(a1 + 24);
          if (v25 != v23)
          {
            uint64_t v24 = *(void *)a3;
            double v26 = *(char **)(*(void *)a3 + 272);
            double v27 = *(char **)(*(void *)a3 + 280);
            double v28 = v26;
            double v29 = v26;
            if (v26 != v27)
            {
              do
              {
                if (*(void *)v29 == v25) {
                  goto LABEL_16;
                }
                v29 += 8;
              }
              while (v29 != v27);
              double v29 = *(char **)(*(void *)a3 + 280);
LABEL_16:
              while (*(void *)v28 != v23)
              {
                v28 += 8;
                if (v28 == v27)
                {
                  double v28 = *(char **)(*(void *)a3 + 280);
                  break;
                }
              }
            }
            if (v29 - v26 < v28 - v26) {
              break;
            }
          }
          uint64_t v241 = *(void *)(a1 + 16);
          long long v232 = *(_OWORD *)(a1 + 32);
          long long v235 = *(_OWORD *)a1;
          uint64_t v67 = *((void *)a2 - 3);
          if (v23 == v67) {
            goto LABEL_107;
          }
          uint64_t v68 = *(char **)(*(void *)a3 + 272);
          int8x16_t v69 = *(char **)(*(void *)a3 + 280);
          if (v68 == v69)
          {
            long long v71 = *(char **)(*(void *)a3 + 272);
            id v70 = v71;
          }
          else
          {
            id v70 = *(char **)(*(void *)a3 + 272);
            while (*(void *)v70 != v23)
            {
              v70 += 8;
              if (v70 == v69)
              {
                id v70 = *(char **)(*(void *)a3 + 280);
                break;
              }
            }
            long long v71 = *(char **)(*(void *)a3 + 272);
            while (*(void *)v71 != v67)
            {
              v71 += 8;
              if (v71 == v69)
              {
                long long v71 = *(char **)(*(void *)a3 + 280);
                break;
              }
            }
          }
          if (v70 - v68 >= v71 - v68)
          {
LABEL_107:
            unint64_t v13 = a1 + 48;
            if (a1 + 48 < (unint64_t)a2)
            {
              uint64_t v75 = *(void *)a3;
              unint64_t v76 = a1;
              do
              {
                uint64_t v77 = *(void *)(v76 + 72);
                unint64_t v76 = v13;
                if (v23 != v77)
                {
                  long long v78 = *(char **)(v75 + 272);
                  long long v79 = *(char **)(v75 + 280);
                  long long v80 = v78;
                  long long v81 = v78;
                  if (v78 != v79)
                  {
                    do
                    {
                      if (*(void *)v81 == v23) {
                        goto LABEL_114;
                      }
                      v81 += 8;
                    }
                    while (v81 != v79);
                    long long v81 = *(char **)(v75 + 280);
LABEL_114:
                    while (*(void *)v80 != v77)
                    {
                      v80 += 8;
                      if (v80 == v79)
                      {
                        long long v80 = *(char **)(v75 + 280);
                        break;
                      }
                    }
                  }
                  if (v81 - v78 < v80 - v78) {
                    break;
                  }
                }
                v13 += 48;
              }
              while (v76 + 48 < (unint64_t)a2);
            }
          }
          else
          {
            unint64_t v13 = a1;
            do
            {
              do
              {
                uint64_t v72 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v72);
              if (v68 == v69)
              {
                long long v74 = *(char **)(*(void *)a3 + 272);
                long long v73 = v74;
              }
              else
              {
                long long v73 = *(char **)(*(void *)a3 + 272);
                while (*(void *)v73 != v23)
                {
                  v73 += 8;
                  if (v73 == v69)
                  {
                    long long v73 = *(char **)(*(void *)a3 + 280);
                    break;
                  }
                }
                long long v74 = *(char **)(*(void *)a3 + 272);
                while (*(void *)v74 != v72)
                {
                  v74 += 8;
                  if (v74 == v69)
                  {
                    long long v74 = *(char **)(*(void *)a3 + 280);
                    break;
                  }
                }
              }
            }
            while (v73 - v68 >= v74 - v68);
          }
          unint64_t v82 = a2;
          if (v13 < (unint64_t)a2)
          {
            uint64_t v83 = *(void *)a3;
            unint64_t v82 = a2;
            do
            {
              uint64_t v84 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v84) {
                break;
              }
              unint64_t v85 = *(char **)(v83 + 272);
              int v86 = *(char **)(v83 + 280);
              unint64_t v87 = v85;
              unint64_t v88 = v85;
              if (v85 != v86)
              {
                do
                {
                  if (*(void *)v88 == v23) {
                    goto LABEL_126;
                  }
                  v88 += 8;
                }
                while (v88 != v86);
                unint64_t v88 = *(char **)(v83 + 280);
LABEL_126:
                while (*(void *)v87 != v84)
                {
                  v87 += 8;
                  if (v87 == v86)
                  {
                    unint64_t v87 = *(char **)(v83 + 280);
                    break;
                  }
                }
              }
            }
            while (v88 - v85 < v87 - v85);
          }
          while (v13 < (unint64_t)v82)
          {
            *(_OWORD *)v225 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v225[16] = *(_OWORD *)(v13 + 32);
            long long v217 = *(_OWORD *)v13;
            long long v89 = *v82;
            long long v90 = v82[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v82 + 27);
            *(_OWORD *)unint64_t v13 = v89;
            *(_OWORD *)(v13 + 16) = v90;
            *(long long *)((char *)v82 + 27) = *(_OWORD *)&v225[11];
            long long *v82 = v217;
            v82[1] = *(_OWORD *)v225;
            uint64_t v91 = *(void *)a3;
            do
            {
              do
              {
                uint64_t v92 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v92);
              unint64_t v93 = *(char **)(v91 + 272);
              long long v94 = *(char **)(v91 + 280);
              if (v93 == v94)
              {
                uint64_t v96 = *(char **)(v91 + 272);
                long long v95 = v96;
              }
              else
              {
                long long v95 = *(char **)(v91 + 272);
                while (*(void *)v95 != v23)
                {
                  v95 += 8;
                  if (v95 == v94)
                  {
                    long long v95 = *(char **)(v91 + 280);
                    break;
                  }
                }
                uint64_t v96 = *(char **)(v91 + 272);
                while (*(void *)v96 != v92)
                {
                  v96 += 8;
                  if (v96 == v94)
                  {
                    uint64_t v96 = *(char **)(v91 + 280);
                    break;
                  }
                }
              }
            }
            while (v95 - v93 >= v96 - v93);
            do
            {
              uint64_t v97 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v97) {
                break;
              }
              if (v93 == v94)
              {
                BOOL v99 = v93;
                uint64_t v98 = v93;
              }
              else
              {
                uint64_t v98 = v93;
                while (*(void *)v98 != v23)
                {
                  v98 += 8;
                  if (v98 == v94)
                  {
                    uint64_t v98 = v94;
                    break;
                  }
                }
                BOOL v99 = v93;
                while (*(void *)v99 != v97)
                {
                  v99 += 8;
                  if (v99 == v94)
                  {
                    BOOL v99 = v94;
                    break;
                  }
                }
              }
            }
            while (v98 - v93 < v99 - v93);
          }
          double v100 = (long long *)(v13 - 48);
          BOOL v5 = v13 - 48 >= a1;
          BOOL v6 = v13 - 48 == a1;
          if (v13 - 48 != a1)
          {
            long long v101 = *v100;
            long long v102 = *(_OWORD *)(v13 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
            *(_OWORD *)a1 = v101;
            *(_OWORD *)(a1 + 16) = v102;
          }
          a5 = 0;
          *double v100 = v235;
          *(void *)(v13 - 32) = v241;
          *(void *)(v13 - 24) = v23;
          *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v232 + 7);
          *(void *)(v13 - 16) = v232;
        }
        uint64_t v240 = *(void *)(a1 + 16);
        long long v231 = *(_OWORD *)(a1 + 32);
        long long v234 = *(_OWORD *)a1;
        unint64_t v30 = a1;
        do
        {
          unint64_t v31 = v30;
          v30 += 48;
          uint64_t v32 = *(void *)(v31 + 72);
          if (v32 == v23) {
            break;
          }
          uint64_t v33 = *(char **)(v24 + 272);
          unint64_t v34 = *(char **)(v24 + 280);
          uint8x8_t v35 = v33;
          unint64_t v36 = v33;
          if (v33 != v34)
          {
            do
            {
              if (*(void *)v36 == v32) {
                goto LABEL_26;
              }
              v36 += 8;
            }
            while (v36 != v34);
            unint64_t v36 = *(char **)(v24 + 280);
LABEL_26:
            while (*(void *)v35 != v23)
            {
              v35 += 8;
              if (v35 == v34)
              {
                uint8x8_t v35 = *(char **)(v24 + 280);
                break;
              }
            }
          }
        }
        while (v36 - v33 < v35 - v33);
        long long v37 = a2;
        if (v31 == a1)
        {
          long long v37 = a2;
          if (v30 < (unint64_t)a2)
          {
            long long v37 = a2;
            do
            {
              uint64_t v43 = *((void *)v37 - 3);
              v37 -= 3;
              if (v43 != v23)
              {
                char v44 = *(char **)(v24 + 272);
                unint64_t v45 = *(char **)(v24 + 280);
                long long v46 = v44;
                uint64_t v47 = v44;
                if (v44 != v45)
                {
                  do
                  {
                    if (*(void *)v47 == v43) {
                      goto LABEL_48;
                    }
                    v47 += 8;
                  }
                  while (v47 != v45);
                  uint64_t v47 = *(char **)(v24 + 280);
LABEL_48:
                  while (*(void *)v46 != v23)
                  {
                    v46 += 8;
                    if (v46 == v45)
                    {
                      long long v46 = *(char **)(v24 + 280);
                      break;
                    }
                  }
                }
                if (v47 - v44 < v46 - v44) {
                  break;
                }
              }
            }
            while (v30 < (unint64_t)v37);
          }
        }
        else
        {
          do
          {
            do
            {
              uint64_t v38 = *((void *)v37 - 3);
              v37 -= 3;
            }
            while (v38 == v23);
            unint64_t v39 = *(char **)(v24 + 272);
            unint64_t v40 = *(char **)(v24 + 280);
            uint64_t v41 = v39;
            uint64_t v42 = v39;
            if (v39 != v40)
            {
              do
              {
                if (*(void *)v42 == v38) {
                  goto LABEL_36;
                }
                v42 += 8;
              }
              while (v42 != v40);
              uint64_t v42 = *(char **)(v24 + 280);
LABEL_36:
              while (*(void *)v41 != v23)
              {
                v41 += 8;
                if (v41 == v40)
                {
                  uint64_t v41 = *(char **)(v24 + 280);
                  break;
                }
              }
            }
          }
          while (v42 - v39 >= v41 - v39);
        }
        unint64_t v13 = v30;
        if (v30 < (unint64_t)v37)
        {
          double v48 = v37;
          do
          {
            *(_OWORD *)v224 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v224[16] = *(_OWORD *)(v13 + 32);
            long long v49 = *(_OWORD *)v13;
            long long v51 = *v48;
            long long v50 = v48[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v48 + 27);
            *(_OWORD *)unint64_t v13 = v51;
            *(_OWORD *)(v13 + 16) = v50;
            *(long long *)((char *)v48 + 27) = *(_OWORD *)&v224[11];
            *double v48 = v49;
            v48[1] = *(_OWORD *)v224;
            uint64_t v52 = *(void *)a3;
            do
            {
              uint64_t v53 = *(void *)(v13 + 72);
              v13 += 48;
              if (v53 == v23) {
                break;
              }
              double v54 = *(char **)(v52 + 272);
              double v55 = *(char **)(v52 + 280);
              int v56 = v54;
              int v57 = v54;
              if (v54 != v55)
              {
                do
                {
                  if (*(void *)v57 == v53) {
                    goto LABEL_61;
                  }
                  v57 += 8;
                }
                while (v57 != v55);
                int v57 = *(char **)(v52 + 280);
LABEL_61:
                while (*(void *)v56 != v23)
                {
                  v56 += 8;
                  if (v56 == v55)
                  {
                    int v56 = *(char **)(v52 + 280);
                    break;
                  }
                }
              }
            }
            while (v57 - v54 < v56 - v54);
            do
            {
              do
              {
                uint64_t v58 = *((void *)v48 - 3);
                v48 -= 3;
              }
              while (v58 == v23);
              id v59 = *(char **)(v52 + 272);
              unint64_t v60 = *(char **)(v52 + 280);
              long long v61 = v59;
              long long v62 = v59;
              if (v59 != v60)
              {
                do
                {
                  if (*(void *)v62 == v58) {
                    goto LABEL_70;
                  }
                  v62 += 8;
                }
                while (v62 != v60);
                long long v62 = *(char **)(v52 + 280);
LABEL_70:
                while (*(void *)v61 != v23)
                {
                  v61 += 8;
                  if (v61 == v60)
                  {
                    long long v61 = *(char **)(v52 + 280);
                    break;
                  }
                }
              }
            }
            while (v62 - v59 >= v61 - v59);
          }
          while (v13 < (unint64_t)v48);
        }
        long long v63 = (long long *)(v13 - 48);
        if (v13 - 48 != a1)
        {
          long long v64 = *v63;
          long long v65 = *(_OWORD *)(v13 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
          *(_OWORD *)a1 = v64;
          *(_OWORD *)(a1 + 16) = v65;
        }
        *long long v63 = v234;
        *(void *)(v13 - 32) = v240;
        *(void *)(v13 - 24) = v23;
        *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v231 + 7);
        *(void *)(v13 - 16) = v231;
        if (v30 >= (unint64_t)v37) {
          break;
        }
LABEL_80:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*,false>(a1, v13 - 48, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, v13 - 48, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>(v13, (uint64_t)a2, a3))
      {
        break;
      }
      if (!v66) {
        goto LABEL_80;
      }
    }
    a2 = (long long *)(v13 - 48);
    if (!v66) {
      continue;
    }
    break;
  }
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>(long long *a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = *((void *)a2 + 3);
  uint64_t v5 = *((void *)a1 + 3);
  if (v4 == v5) {
    goto LABEL_23;
  }
  BOOL v6 = *(char **)(*(void *)a4 + 272);
  uint64_t v7 = *(char **)(*(void *)a4 + 280);
  if (v6 == v7)
  {
    id v9 = *(char **)(*(void *)a4 + 272);
    uint64_t v8 = v9;
  }
  else
  {
    uint64_t v8 = *(char **)(*(void *)a4 + 272);
    while (*(void *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        uint64_t v8 = *(char **)(*(void *)a4 + 280);
        break;
      }
    }
    id v9 = *(char **)(*(void *)a4 + 272);
    while (*(void *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        id v9 = *(char **)(*(void *)a4 + 280);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    uint64_t v13 = *((void *)a3 + 3);
    if (v13 != v4)
    {
      uint64_t v14 = *(char **)(*(void *)a4 + 272);
      unint64_t v15 = *(char **)(*(void *)a4 + 280);
      unint64_t v16 = v14;
      double v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(void *)v17 == v13) {
            goto LABEL_28;
          }
          v17 += 8;
        }
        while (v17 != v15);
        double v17 = *(char **)(*(void *)a4 + 280);
LABEL_28:
        while (*(void *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            unint64_t v16 = *(char **)(*(void *)a4 + 280);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        long long v18 = *a2;
        *(_OWORD *)long long v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        long long v19 = *(long long *)((char *)a3 + 27);
        long long v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(long long *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        __n128 result = *(__n128 *)&v46[11];
        *(long long *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        uint64_t v22 = *((void *)a2 + 3);
        uint64_t v23 = *((void *)a1 + 3);
        if (v22 != v23)
        {
          uint64_t v24 = *(char **)(*(void *)a4 + 272);
          uint64_t v25 = *(char **)(*(void *)a4 + 280);
          double v26 = v24;
          double v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(void *)v27 == v22) {
                goto LABEL_37;
              }
              v27 += 8;
            }
            while (v27 != v25);
            double v27 = *(char **)(*(void *)a4 + 280);
LABEL_37:
            while (*(void *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                double v26 = *(char **)(*(void *)a4 + 280);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            long long v28 = *a1;
            *(_OWORD *)uint64_t v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            long long v29 = *(long long *)((char *)a2 + 27);
            long long v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(long long *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            __n128 result = *(__n128 *)&v47[11];
            *(long long *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    uint64_t v10 = *((void *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        unint64_t v12 = *(char **)(*(void *)a4 + 272);
        double v11 = v12;
      }
      else
      {
        double v11 = *(char **)(*(void *)a4 + 272);
        while (*(void *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            double v11 = *(char **)(*(void *)a4 + 280);
            break;
          }
        }
        unint64_t v12 = *(char **)(*(void *)a4 + 272);
        while (*(void *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            unint64_t v12 = *(char **)(*(void *)a4 + 280);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        long long v31 = a1[1];
        long long v32 = *a1;
        *(void *)long long v49 = *((void *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        long long v33 = *(long long *)((char *)a3 + 27);
        long long v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(long long *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        __n128 result = *(__n128 *)&v49[3];
        *(long long *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    long long v35 = *a1;
    *(_OWORD *)double v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    long long v36 = *(long long *)((char *)a2 + 27);
    long long v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(long long *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    __n128 result = *(__n128 *)&v48[11];
    *(long long *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    uint64_t v38 = *((void *)a3 + 3);
    uint64_t v39 = *((void *)a2 + 3);
    if (v38 != v39)
    {
      unint64_t v40 = *(char **)(*(void *)a4 + 272);
      uint64_t v41 = *(char **)(*(void *)a4 + 280);
      uint64_t v42 = v40;
      uint64_t v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(void *)v43 == v38) {
            goto LABEL_50;
          }
          v43 += 8;
        }
        while (v43 != v41);
        uint64_t v43 = *(char **)(*(void *)a4 + 280);
LABEL_50:
        while (*(void *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            uint64_t v42 = *(char **)(*(void *)a4 + 280);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        long long v31 = a2[1];
        long long v32 = *a2;
        *(void *)long long v49 = *((void *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        long long v44 = *(long long *)((char *)a3 + 27);
        long long v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(long long *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 - 24);
      uint64_t v9 = *(void *)(a1 + 24);
      if (v8 == v9) {
        return result;
      }
      uint64_t v10 = *(char **)(*(void *)a3 + 272);
      double v11 = *(char **)(*(void *)a3 + 280);
      unint64_t v12 = v10;
      uint64_t v13 = v10;
      if (v10 == v11) {
        goto LABEL_10;
      }
      do
      {
        if (*(void *)v13 == v8) {
          goto LABEL_7;
        }
        v13 += 8;
      }
      while (v13 != v11);
      uint64_t v13 = *(char **)(*(void *)a3 + 280);
      do
      {
LABEL_7:
        if (*(void *)v12 == v9) {
          goto LABEL_10;
        }
        v12 += 8;
      }
      while (v12 != v11);
      unint64_t v12 = *(char **)(*(void *)a3 + 280);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        uint64_t v14 = (long long *)(a2 - 48);
        long long v15 = *(_OWORD *)a1;
        *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        long long v16 = *(_OWORD *)(a2 - 21);
        long long v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *uint64_t v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(long long *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), a3);
      uint64_t v19 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      int v20 = 0;
      break;
  }
  while (1)
  {
    uint64_t v21 = *(void *)(v19 + 24);
    uint64_t v22 = *(void *)(v18 + 24);
    if (v21 != v22)
    {
      uint64_t v23 = *(char **)(*(void *)a3 + 272);
      uint64_t v24 = *(char **)(*(void *)a3 + 280);
      uint64_t v25 = v23;
      double v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(void *)v26 == v21) {
            goto LABEL_19;
          }
          v26 += 8;
        }
        while (v26 != v24);
        double v26 = *(char **)(*(void *)a3 + 280);
LABEL_19:
        while (*(void *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            uint64_t v25 = *(char **)(*(void *)a3 + 280);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        long long v34 = *(_OWORD *)v19;
        uint64_t v36 = *(void *)(v19 + 16);
        long long v37 = *(_OWORD *)(v19 + 32);
        uint64_t v27 = v19;
        while (1)
        {
          long long v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1) {
            break;
          }
          uint64_t v27 = v18;
          uint64_t v29 = *(void *)(v18 - 24);
          if (v21 != v29)
          {
            long long v30 = *(char **)(*(void *)a3 + 272);
            long long v31 = *(char **)(*(void *)a3 + 280);
            long long v32 = v30;
            long long v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(void *)v33 == v21) {
                  goto LABEL_30;
                }
                v33 += 8;
              }
              while (v33 != v31);
              long long v33 = *(char **)(*(void *)a3 + 280);
LABEL_30:
              while (*(void *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  long long v32 = *(char **)(*(void *)a3 + 280);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30) {
              continue;
            }
          }
          goto LABEL_36;
        }
        uint64_t v27 = a1;
LABEL_36:
        *(_OWORD *)uint64_t v27 = v34;
        *(void *)(v27 + 16) = v36;
        *(void *)(v27 + 24) = v21;
        *(void *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8) {
          return v19 + 48 == a2;
        }
      }
    }
    uint64_t v18 = v19;
    v19 += 48;
    if (v19 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)a2, (long long *)a3, a5).n128_u64[0];
  uint64_t v11 = *(void *)(a4 + 24);
  uint64_t v12 = *(void *)(a3 + 24);
  if (v11 != v12)
  {
    uint64_t v13 = *(char **)(*(void *)a5 + 272);
    uint64_t v14 = *(char **)(*(void *)a5 + 280);
    long long v15 = v13;
    long long v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(void *)v16 == v11) {
          goto LABEL_6;
        }
        v16 += 8;
      }
      while (v16 != v14);
      long long v16 = *(char **)(*(void *)a5 + 280);
LABEL_6:
      while (*(void *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          long long v15 = *(char **)(*(void *)a5 + 280);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      long long v17 = *(_OWORD *)a3;
      *(_OWORD *)uint64_t v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      long long v18 = *(_OWORD *)(a4 + 27);
      long long v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v38;
      __n128 result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      uint64_t v20 = *(void *)(a3 + 24);
      uint64_t v21 = *(void *)(a2 + 24);
      if (v20 != v21)
      {
        uint64_t v22 = *(char **)(*(void *)a5 + 272);
        uint64_t v23 = *(char **)(*(void *)a5 + 280);
        uint64_t v24 = v22;
        uint64_t v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(void *)v25 == v20) {
              goto LABEL_15;
            }
            v25 += 8;
          }
          while (v25 != v23);
          uint64_t v25 = *(char **)(*(void *)a5 + 280);
LABEL_15:
          while (*(void *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              uint64_t v24 = *(char **)(*(void *)a5 + 280);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          long long v26 = *(_OWORD *)a2;
          *(_OWORD *)uint64_t v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          long long v27 = *(_OWORD *)(a3 + 27);
          long long v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 16) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)v39;
          __n128 result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          uint64_t v29 = *(void *)(a2 + 24);
          uint64_t v30 = *(void *)(a1 + 24);
          if (v29 != v30)
          {
            long long v31 = *(char **)(*(void *)a5 + 272);
            long long v32 = *(char **)(*(void *)a5 + 280);
            long long v33 = v31;
            long long v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(void *)v34 == v29) {
                  goto LABEL_24;
                }
                v34 += 8;
              }
              while (v34 != v32);
              long long v34 = *(char **)(*(void *)a5 + 280);
LABEL_24:
              while (*(void *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  long long v33 = *(char **)(*(void *)a5 + 280);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              long long v35 = *(_OWORD *)a1;
              *(_OWORD *)unint64_t v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              long long v36 = *(_OWORD *)(a2 + 27);
              long long v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 16) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 16) = *(_OWORD *)v40;
              __n128 result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  uint64_t v13 = *(void *)(a5 + 24);
  uint64_t v14 = *(void *)(a4 + 24);
  if (v13 != v14)
  {
    long long v15 = *(char **)(*(void *)a6 + 272);
    long long v16 = *(char **)(*(void *)a6 + 280);
    long long v17 = v15;
    long long v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(void *)v18 == v13) {
          goto LABEL_6;
        }
        v18 += 8;
      }
      while (v18 != v16);
      long long v18 = *(char **)(*(void *)a6 + 280);
LABEL_6:
      while (*(void *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          long long v17 = *(char **)(*(void *)a6 + 280);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      long long v19 = *(_OWORD *)a4;
      *(_OWORD *)long long v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      long long v20 = *(_OWORD *)(a5 + 27);
      long long v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 16) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v49;
      __n128 result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      uint64_t v22 = *(void *)(a4 + 24);
      uint64_t v23 = *(void *)(a3 + 24);
      if (v22 != v23)
      {
        uint64_t v24 = *(char **)(*(void *)a6 + 272);
        uint64_t v25 = *(char **)(*(void *)a6 + 280);
        long long v26 = v24;
        long long v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(void *)v27 == v22) {
              goto LABEL_15;
            }
            v27 += 8;
          }
          while (v27 != v25);
          long long v27 = *(char **)(*(void *)a6 + 280);
LABEL_15:
          while (*(void *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              long long v26 = *(char **)(*(void *)a6 + 280);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          long long v28 = *(_OWORD *)a3;
          *(_OWORD *)long long v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          long long v29 = *(_OWORD *)(a4 + 27);
          long long v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 16) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 16) = *(_OWORD *)v50;
          __n128 result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          uint64_t v31 = *(void *)(a3 + 24);
          uint64_t v32 = *(void *)(a2 + 24);
          if (v31 != v32)
          {
            long long v33 = *(char **)(*(void *)a6 + 272);
            long long v34 = *(char **)(*(void *)a6 + 280);
            long long v35 = v33;
            long long v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(void *)v36 == v31) {
                  goto LABEL_24;
                }
                v36 += 8;
              }
              while (v36 != v34);
              long long v36 = *(char **)(*(void *)a6 + 280);
LABEL_24:
              while (*(void *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  long long v35 = *(char **)(*(void *)a6 + 280);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              long long v37 = *(_OWORD *)a2;
              *(_OWORD *)long long v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              long long v38 = *(_OWORD *)(a3 + 27);
              long long v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 16) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 16) = *(_OWORD *)v51;
              __n128 result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              uint64_t v40 = *(void *)(a2 + 24);
              uint64_t v41 = *(void *)(a1 + 24);
              if (v40 != v41)
              {
                uint64_t v42 = *(char **)(*(void *)a6 + 272);
                uint64_t v43 = *(char **)(*(void *)a6 + 280);
                long long v44 = v42;
                long long v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(void *)v45 == v40) {
                      goto LABEL_33;
                    }
                    v45 += 8;
                  }
                  while (v45 != v43);
                  long long v45 = *(char **)(*(void *)a6 + 280);
LABEL_33:
                  while (*(void *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      long long v44 = *(char **)(*(void *)a6 + 280);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  long long v46 = *(_OWORD *)a1;
                  *(_OWORD *)uint64_t v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  long long v47 = *(_OWORD *)(a2 + 27);
                  long long v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 16) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 16) = *(_OWORD *)v52;
                  __n128 result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  unint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsTimeInterval>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsTimeInterval>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  id v3 = *(void **)a1;
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsTimeInterval>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      id v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsTimeInterval>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsTimeInterval> const&)>::~__func()
{
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsTimeInterval> const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F1724410;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1724410;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsTimeInterval> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 568))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a4, 3, @"Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date");
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  }
  double v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(void *)(a1 + 40) && a3) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_advanceToTime(a1, v8);
    }
    HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTimeInterval>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    uint64_t v9 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    uint64_t v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v9, a4);
  }
  return v10;
}

void sub_1BD0DB0DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    if (!*(unsigned char *)(a1 + 568))
    {
      double v1 = *(double *)(a1 + 176);
      double result = *(double *)(a1 + 120);
      if (v1 <= result)
      {
        double v1 = -1.79769313e308;
      }
      else if (*(unsigned char *)(a1 + 144))
      {
        double v1 = -1.79769313e308;
      }
      if (v1 >= result) {
        return v1;
      }
      return result;
    }
    return -1.79769313e308;
  }
  double result = *(double *)(a1 + 176);
  if (result <= *(double *)(a1 + 120)) {
    return -1.79769313e308;
  }
  if (*(unsigned char *)(a1 + 144)) {
    return -1.79769313e308;
  }
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_advanceToTime(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 128) <= a2)
  {
    uint64_t v4 = a1 + 112;
    uint64_t v5 = a1 + 120;
    do
    {
      uint64_t v6 = *(void *)(a1 + 544);
      uint64_t v7 = *(void *)(a1 + 536);
      if (v6 == v7)
      {
        uint64_t v22 = 0;
        long long v15 = *(void **)(a1 + 40);
        long long v16 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a2];
        double v8 = [v15 dateIntervalContainingDate:v16 index:&v22];

        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v17 = v22;
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v19 = v18;
        long long v20 = [v8 endDate];
        [v20 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTimeInterval>>::resetToBucket(v4, v17, v19, v21);
      }
      else
      {
        double v8 = [*(id *)(a1 + 40) dateIntervalAtIndex:*(void *)(a1 + 112) + 1];
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v12 = v11;
        uint64_t v13 = [v8 endDate];
        [v13 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTimeInterval>>::advanceBucket(v4, v12, v14);
      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_didChangeBucket(a1, v9);
      if (v6 != v7) {
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
      }
    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1BD0DB368(_Unwind_Exception *exception_object)
{
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a1 + 8;
  double v6 = *(double *)a2;
  double v7 = *(double *)(a2 + 8);
  double v8 = *(double *)(a2 + 16);
  uint64_t v9 = *(uint64_t **)(a2 + 24);
  unsigned __int8 v10 = *(unsigned char *)(a2 + 32);
  char v11 = *(unsigned char *)(a2 + 33);
  double v12 = *(double *)(a1 + 8) - v7;
  int v13 = v10;
  unint64_t v14 = (unint64_t)v9;
  char v15 = v11;
  double v16 = v8;
  double v17 = v7;
  double v18 = *(double *)a2;
  if (v12 >= 0.01)
  {
    if (v8 - v7 - v12 >= 0.01)
    {
      int v13 = *(unsigned __int8 *)(a2 + 32);
      double v18 = v6 - v6 * (v12 / (v8 - v7));
      unint64_t v14 = *(void *)(a2 + 24);
      char v15 = *(unsigned char *)(a2 + 33);
      double v16 = *(double *)(a2 + 16);
      double v17 = *(double *)(a1 + 8);
    }
    else
    {
      int v13 = 0;
      unint64_t v14 = 0;
      char v15 = 0;
      double v16 = 0.0;
      double v17 = 0.0;
      double v18 = 0.0;
    }
  }
  double v19 = *(double *)(a1 + 16);
  double v20 = v19 - v17;
  double v21 = v16 - v17;
  double v22 = v16 - v17 - (v19 - v17);
  if (!*(_DWORD *)(a1 + 36))
  {
    if (v22 < 0.01) {
      goto LABEL_10;
    }
    if (v20 >= 0.01) {
      goto LABEL_24;
    }
LABEL_22:
    int v23 = v13;
    unint64_t v31 = v14;
    double v25 = v16;
    double v19 = v17;
    double v24 = v18;
    if (!v23) {
      return;
    }
    goto LABEL_60;
  }
  if (v20 < 0.01) {
    goto LABEL_22;
  }
  if (v22 >= 0.01)
  {
LABEL_24:
    double v25 = v16;
    unint64_t v69 = v14;
    double v24 = v18 - v18 * (v20 / v21);
    int v23 = v13;
    char v70 = v15;
    double v16 = *(double *)(a1 + 16);
    double v18 = v18 * (v20 / v21);
    if (!v13)
    {
LABEL_25:
      char v15 = v70;
      unint64_t v31 = v69;
      if (!v23) {
        return;
      }
      goto LABEL_60;
    }
    goto LABEL_11;
  }
LABEL_10:
  unint64_t v69 = 0;
  int v23 = 0;
  char v70 = 0;
  double v24 = 0.0;
  double v19 = 0.0;
  double v25 = 0.0;
  if (!v13) {
    goto LABEL_25;
  }
LABEL_11:
  double v67 = v17;
  double v68 = v16;
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 240, v14, v14);
  unint64_t v26 = *(void *)(a1 + 112);
  if (v26 == *(void *)(a1 + 104) && *(uint64_t *)(a1 + 136) <= 0)
  {
    v32.f64[1] = *(float64_t *)(a1 + 16);
    double v28 = v67;
    double v27 = v68;
    v32.f64[0] = v67;
    v33.f64[0] = *(float64_t *)(a1 + 8);
    v33.f64[1] = v68;
    int8x16_t v34 = (int8x16_t)vcgtq_f64(v33, v32);
    v33.f64[0] = v67;
    *(int8x16_t *)(a1 + 48) = vbslq_s8(v34, *(int8x16_t *)(a1 + 8), (int8x16_t)v33);
  }
  else
  {
    double v28 = v67;
    double v27 = v68;
    if (v67 < *(double *)(a1 + 48))
    {
      double v29 = *(double *)(a1 + 8);
      if (v67 >= v29) {
        double v29 = v67;
      }
      *(double *)(a1 + 48) = v29;
    }
    if (v68 > *(double *)(a1 + 56))
    {
      double v30 = *(double *)(a1 + 16);
      if (v30 >= v68) {
        double v30 = v68;
      }
      *(double *)(a1 + 56) = v30;
    }
  }
  if (*(unsigned char *)(a1 + 32))
  {
    double v35 = *(double *)(a1 + 64);
    if (v28 < v35) {
      double v35 = v28;
    }
    *(double *)(a1 + 64) = v35;
  }
  if (a3 && v28 < *(double *)(a1 + 16))
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeThroughTime(v5, v28);
    double v28 = v67;
    double v27 = v68;
    unint64_t v26 = *(void *)(a1 + 112);
  }
  unint64_t v36 = *(void *)(a1 + 120);
  if (v26 >= v36)
  {
    uint64_t v38 = *(void *)(a1 + 104);
    unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - v38) >> 4);
    unint64_t v40 = v39 + 1;
    if (v39 + 1 > 0x555555555555555) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - v38) >> 4);
    if (2 * v41 > v40) {
      unint64_t v40 = 2 * v41;
    }
    if (v41 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v42 = 0x555555555555555;
    }
    else {
      unint64_t v42 = v40;
    }
    if (v42)
    {
      unint64_t v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v42);
      double v28 = v67;
      double v27 = v68;
    }
    else
    {
      uint64_t v43 = 0;
    }
    unint64_t v44 = v42 + 48 * v39;
    unint64_t v45 = v42 + 48 * v43;
    *(double *)unint64_t v44 = v18;
    *(double *)(v44 + 8) = v28;
    *(double *)(v44 + 16) = v27;
    *(void *)(v44 + 24) = v14;
    *(unsigned char *)(v44 + 32) = v13;
    *(unsigned char *)(v44 + 33) = v15;
    *(_WORD *)(v44 + 40) = 0;
    *(unsigned char *)(v44 + 42) = 0;
    unint64_t v37 = v44 + 48;
    long long v47 = *(char **)(a1 + 104);
    long long v46 = *(char **)(a1 + 112);
    if (v46 == v47)
    {
      char v15 = v70;
      unint64_t v31 = v69;
    }
    else
    {
      char v15 = v70;
      unint64_t v31 = v69;
      do
      {
        long long v48 = *((_OWORD *)v46 - 3);
        long long v49 = *((_OWORD *)v46 - 2);
        *(_OWORD *)(v44 - 21) = *(_OWORD *)(v46 - 21);
        *(_OWORD *)(v44 - 48) = v48;
        *(_OWORD *)(v44 - 32) = v49;
        v44 -= 48;
        v46 -= 48;
      }
      while (v46 != v47);
      long long v46 = *(char **)(a1 + 104);
    }
    *(void *)(a1 + 104) = v44;
    *(void *)(a1 + 112) = v37;
    *(void *)(a1 + 120) = v45;
    if (v46) {
      operator delete(v46);
    }
  }
  else
  {
    *(double *)unint64_t v26 = v18;
    *(double *)(v26 + 8) = v28;
    *(double *)(v26 + 16) = v27;
    *(void *)(v26 + 24) = v14;
    *(unsigned char *)(v26 + 32) = v13;
    *(unsigned char *)(v26 + 33) = v15;
    *(_WORD *)(v26 + 40) = 0;
    unint64_t v37 = v26 + 48;
    *(unsigned char *)(v26 + 42) = 0;
    char v15 = v70;
    unint64_t v31 = v69;
  }
  *(void *)(a1 + 112) = v37;
  if (!*(unsigned char *)(a1 + 208) || *(double *)(a1 + 184) <= v7)
  {
    *(double *)(a1 + 176) = v6;
    *(double *)(a1 + 184) = v7;
    *(double *)(a1 + 192) = v8;
    *(void *)(a1 + 200) = v9;
    *(unsigned char *)(a1 + 208) = v10;
    *(unsigned char *)(a1 + 209) = v11;
  }
  if (*(unsigned char *)(a1 + 33)
    && ((unint64_t v50 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(v5, v14), v51 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_statisticsForSource(v5, v50), !*((unsigned char *)v51 + 80))|| *((double *)v51 + 7) <= v7))
  {
    *((double *)v51 + 6) = v6;
    *((double *)v51 + 7) = v7;
    *((double *)v51 + 8) = v8;
    v51[9] = v9;
    *((unsigned char *)v51 + 80) = v10;
    *((unsigned char *)v51 + 81) = v11;
    if (!v23) {
      return;
    }
  }
  else if (!v23)
  {
    return;
  }
LABEL_60:
  unint64_t v52 = *(void *)(a1 + 432);
  unint64_t v53 = *(void *)(a1 + 440);
  if (v52 >= v53)
  {
    uint64_t v55 = *(void *)(a1 + 424);
    unint64_t v56 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v52 - v55) >> 3);
    unint64_t v57 = v56 + 1;
    if (v56 + 1 > 0x666666666666666) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v58 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v53 - v55) >> 3);
    if (2 * v58 > v57) {
      unint64_t v57 = 2 * v58;
    }
    if (v58 >= 0x333333333333333) {
      unint64_t v59 = 0x666666666666666;
    }
    else {
      unint64_t v59 = v57;
    }
    if (v59) {
      unint64_t v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v59);
    }
    else {
      uint64_t v60 = 0;
    }
    unint64_t v61 = v59 + 40 * v56;
    unint64_t v62 = v59 + 40 * v60;
    *(double *)unint64_t v61 = v24;
    *(double *)(v61 + 8) = v19;
    *(double *)(v61 + 16) = v25;
    *(void *)(v61 + 24) = v31;
    *(unsigned char *)(v61 + 32) = v23;
    *(unsigned char *)(v61 + 33) = v15;
    unint64_t v54 = v61 + 40;
    long long v64 = *(char **)(a1 + 424);
    long long v63 = *(char **)(a1 + 432);
    if (v63 != v64)
    {
      do
      {
        long long v65 = *(_OWORD *)(v63 - 40);
        long long v66 = *(_OWORD *)(v63 - 24);
        *(_WORD *)(v61 - 8) = *((_WORD *)v63 - 4);
        *(_OWORD *)(v61 - 24) = v66;
        *(_OWORD *)(v61 - 40) = v65;
        v61 -= 40;
        v63 -= 40;
      }
      while (v63 != v64);
      long long v63 = *(char **)(a1 + 424);
    }
    *(void *)(a1 + 424) = v61;
    *(void *)(a1 + 432) = v54;
    *(void *)(a1 + 440) = v62;
    if (v63) {
      operator delete(v63);
    }
  }
  else
  {
    *(double *)unint64_t v52 = v24;
    *(double *)(v52 + 8) = v19;
    *(double *)(v52 + 16) = v25;
    *(void *)(v52 + 24) = v31;
    *(unsigned char *)(v52 + 32) = v23;
    unint64_t v54 = v52 + 40;
    *(unsigned char *)(v52 + 33) = v15;
  }
  *(void *)(a1 + 432) = v54;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_notifyForCurrentBucket(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 570))
  {
    *(unsigned char *)(a1 + 572) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 572) = 0;
    uint64_t v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      uint64_t v4 = v2;
      id v3 = (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      if (v3) {
        v4[2](v4, v3);
      }

      uint64_t v2 = v4;
    }
  }
}

void sub_1BD0DB9A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTimeInterval>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  uint64_t v9 = 0;
  unsigned __int8 v10 = 0;
  uint64_t v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 424), *(void *)(a1 + 432), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 432) - *(void *)(a1 + 424)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTimeInterval>>::resetToBucket(a1, *(void *)a1 + 1, a2, a3);
  double v6 = v9;
  double v7 = v10;
  if (v9 != v10)
  {
    uint64_t v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTimeInterval>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BD0DBAA4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTimeInterval>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8 = (id *)(a1 + 40);
  objc_storeStrong((id *)(a1 + 448), *(id *)(a1 + 40));
  uint64_t v9 = *(void **)(a1 + 144);
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  if (v9)
  {
    *(void *)(a1 + 152) = v9;
    operator delete(v9);
  }
  *(_WORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  if (*(void *)(a1 + 232))
  {
    uint64_t v10 = *(void *)(a1 + 224);
    uint64_t v11 = *(void **)(a1 + 216);
    *(void *)(a1 + 216) = a1 + 224;
    *(void *)(v10 + 16) = 0;
    *(void *)(a1 + 224) = 0;
    *(void *)(a1 + 232) = 0;
    if (v11[1]) {
      double v12 = (void *)v11[1];
    }
    else {
      double v12 = v11;
    }
    if (v12)
    {
      int v13 = (void *)v12[2];
      if (v13)
      {
        unint64_t v14 = (void *)*v13;
        if ((void *)*v13 == v12)
        {
          *int v13 = 0;
          while (1)
          {
            double v16 = (void *)v13[1];
            if (!v16) {
              break;
            }
            do
            {
              int v13 = v16;
              double v16 = (void *)*v16;
            }
            while (v16);
          }
        }
        else
        {
          for (v13[1] = 0; v14; unint64_t v14 = (void *)v13[1])
          {
            do
            {
              int v13 = v14;
              unint64_t v14 = (void *)*v14;
            }
            while (v14);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>>>::destroy(v12);
        for (uint64_t i = (void *)v13[2]; i; uint64_t i = (void *)i[2])
          int v13 = i;
        double v12 = v13;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>>>::destroy(v12);
  }
  objc_storeStrong(v8, *(id *)(a1 + 448));
  *(void *)(a1 + 432) = *(void *)(a1 + 424);
  *(void *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 572))
  {
    if (v3)
    {
      id v6 = v3;
      uint64_t v4 = _Block_copy(*(const void **)(a1 + 96));
      uint64_t v5 = v4;
      if (v4) {
        (*((void (**)(void *, id))v4 + 2))(v4, v6);
      }

      id v3 = v6;
    }
    *(unsigned char *)(a1 + 572) = 0;
  }
}

void sub_1BD0DBC74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_currentBucketInterval(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 568))
  {
    double v1 = 0;
  }
  else
  {
    double v1 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", *(double *)(a1 + 120), *(double *)(a1 + 128));
  }

  return v1;
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI24HDStatisticsTimeIntervalEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 startDate];
  id v6 = [v4 startDate];
  uint64_t v7 = [v5 compare:v6];

  return v7;
}

void sub_1BD0DBD48(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 13);
  if (WeakRetained)
  {
    if (v5
      && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_currentBucketInterval((uint64_t)a1),
          (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v8 = [v5 endDate];
      uint64_t v9 = [v7 startDate];
      if (objc_msgSend(v8, "hk_isAfterDate:", v9))
      {
        uint64_t v10 = [v5 startDate];
        uint64_t v11 = [v7 endDate];
        char v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);
      }
      else
      {
        char v12 = 0;
      }

      int v13 = _Block_copy(a1[12]);
      if ((v12 & 1) == 0) {
        operator new();
      }
    }
    else
    {
      int v13 = _Block_copy(a1[12]);
    }
    *((unsigned char *)a1 + 568) = 1;
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
    v27[3] = &unk_1E6308FF8;
    id v15 = v5;
    id v28 = v15;
    id v16 = v13;
    id v29 = v16;
    (*((void (**)(id *, void *))*a1 + 9))(a1, v27);
    if (v5)
    {
      double v17 = [v15 startDate];
      [v17 timeIntervalSinceReferenceDate];
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_configureForStartTime((uint64_t)a1);
    }
    else
    {
      (*((void (**)(id *))*a1 + 4))(a1);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
    v21[3] = &unk_1E6309060;
    double v24 = a1;
    id v5 = v15;
    char v26 = 1;
    id v22 = v5;
    double v25 = a1;
    id v23 = WeakRetained;
    uint64_t v14 = (*((uint64_t (**)(id *, void *, uint64_t))*a1 + 14))(a1, v21, a3);
    double v18 = _Block_copy(v16);
    id v19 = a1[12];
    a1[12] = v18;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to invalidate interval: no data source available.");
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1BD0DC198(_Unwind_Exception *a1)
{
  MEMORY[0x1C187B8A0](v4, 0x10F1C40B37A3886);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_11;
  }
  id v3 = [v10 endDate];
  uint64_t v4 = [*(id *)(a1 + 32) startDate];
  char v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    id v6 = [v10 startDate];
    uint64_t v7 = [*(id *)(a1 + 32) endDate];
    char v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_11:
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9) {
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
      }
    }
  }
}

void sub_1BD0DC37C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = [*(id *)(a1 + 32) startDate];
  [v5 timeIntervalSinceReferenceDate];
  uint64_t v7 = v6;

  char v8 = [*(id *)(a1 + 32) endDate];
  [v8 timeIntervalSinceReferenceDate];
  uint64_t v10 = v9;

  uint64_t v11 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  uint64_t v13 = *(void *)(a1 + 32);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  char v32 = *(unsigned char *)(a1 + 64);
  void v30[4] = v7;
  v30[5] = v10;
  uint64_t v31 = *(void *)(a1 + 56);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  void v29[4] = v31;
  uint64_t v14 = [v11 collectionCalculator:WeakRetained queryForInterval:v13 error:a2 sampleHandler:v30 mergeHandler:v29];

  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15 != v4)
    {
      id v16 = [*(id *)(a1 + 32) endDate];
      [v16 timeIntervalSinceReferenceDate];
      if (*(void *)(v15 + 40))
      {
        double v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          id v19 = [*(id *)(v15 + 40) dateIntervalAtIndex:*(void *)(v15 + 112) + 1];
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          double v20 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(v15, v15 + 120);
          double v21 = [v19 startDate];
          [v21 timeIntervalSinceReferenceDate];
          double v23 = v22;
          double v24 = [v19 endDate];
          [v24 timeIntervalSinceReferenceDate];
          HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTimeInterval>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            char v26 = _Block_copy(*(const void **)(v15 + 96));
            double v27 = v26;
            if (v26) {
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);
            }
          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_didChangeBucket(v15, 0);
        }
      }
    }
  }
  return v14;
}

void sub_1BD0DC628(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7 = *(double *)(a1 + 32) - a6;
  if (v7 >= 0.01)
  {
    double v9 = a7 - a6;
    if (v9 - v7 >= 0.01)
    {
      a5 = a5 - v7 / v9 * a5;
      int v8 = 1;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      int v8 = 0;
      a5 = 0.0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    int v8 = 1;
  }
  *(double *)uint64_t v13 = a5;
  *(double *)&v13[1] = a6;
  double v14 = a7;
  uint64_t v15 = a2;
  char v16 = v8;
  char v17 = 0;
  if (*(unsigned char *)(a1 + 56))
  {
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)v13, a3, a4);
    }
  }
  else
  {
    double v11 = *(double *)(a1 + 40) - a6;
    if (v11 >= 0.01)
    {
      double v12 = a7 - a6;
      if (v12 - v11 >= 0.01)
      {
        a5 = a5 * (v11 / v12);
        a7 = *(double *)(a1 + 40);
      }
    }
    else
    {
      int v8 = 0;
    }
    *(double *)uint64_t v13 = a5;
    double v14 = a7;
    char v16 = v8;
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)v13, a3, a4);
    }
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 568)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  }
  if (*(void *)(a1 + 40)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_advanceToTime(a1, a2);
  }
  if (*(double *)(a1 + 128) > a2)
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 32) < *(double *)(v10 + 8))
                {
                  uint64_t v129 = *(void *)(v10 + 32);
                  long long v113 = *(_OWORD *)v10;
                  long long v121 = *(_OWORD *)(v10 + 16);
                  long long v52 = *(_OWORD *)(a2 - 40);
                  long long v53 = *(_OWORD *)(a2 - 24);
                  *(_WORD *)(v10 + 32) = *(_WORD *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(_WORD *)(a2 - 8) = v129;
                  *(_OWORD *)(a2 - 24) = v121;
                  *(_OWORD *)(a2 - 40) = v113;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v10, (double *)(v10 + 40), (double *)(a2 - 40));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, v10 + 120, a2 - 40);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            unint64_t v54 = (void *)(v10 + 40);
            BOOL v56 = v10 == a2 || v54 == (void *)a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  unint64_t v59 = v54;
                  double v60 = *(double *)(v58 + 48);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *v54;
                    long long v114 = *(_OWORD *)(v58 + 56);
                    uint64_t v122 = *(void *)(v58 + 72);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      uint64_t v63 = v10 + v62;
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      *(_OWORD *)(v63 + 40) = *(_OWORD *)(v10 + v62);
                      *(_OWORD *)(v63 + 56) = v64;
                      *(_WORD *)(v63 + 72) = *(_WORD *)(v10 + v62 + 32);
                      if (!v62) {
                        break;
                      }
                      v62 -= 40;
                      if (v60 >= *(double *)(v63 - 32))
                      {
                        uint64_t v65 = v10 + v62 + 40;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = v114;
                    *(_WORD *)(v65 + 32) = v122;
                  }
                  unint64_t v54 = v59 + 5;
                  v57 += 40;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 5 != (void *)a2);
              }
            }
            else if (!v56)
            {
              do
              {
                uint64_t v98 = v54;
                double v99 = *(double *)(a1 + 48);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *v54;
                  long long v117 = *(_OWORD *)(a1 + 56);
                  uint64_t v125 = *(void *)(a1 + 72);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(_OWORD *)(v101 - 3);
                    *(_OWORD *)long long v101 = *(_OWORD *)(v101 - 5);
                    *((_OWORD *)v101 + 1) = v102;
                    *((_WORD *)v101 + 16) = *((_WORD *)v101 - 4);
                    double v103 = *((double *)v101 - 9);
                    v101 -= 5;
                  }
                  while (v99 < v103);
                  *long long v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *((_WORD *)v101 + 16) = v125;
                  *((_OWORD *)v101 + 1) = v117;
                }
                v54 += 5;
                a1 = (unint64_t)v98;
              }
              while (v98 + 5 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 40 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v10 + 40 * v69 + 8) < *(double *)(v70 + 48))
                  {
                    v70 += 40;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  double v71 = *(double *)(v10 + 40 * v68 + 8);
                  if (*(double *)(v70 + 8) >= v71)
                  {
                    unint64_t v72 = v10 + 40 * v68;
                    uint64_t v73 = *(void *)v72;
                    uint64_t v123 = *(void *)(v72 + 32);
                    long long v115 = *(_OWORD *)(v72 + 16);
                    do
                    {
                      unint64_t v74 = v72;
                      unint64_t v72 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_WORD *)(v74 + 32) = *(_WORD *)(v70 + 32);
                      *(_OWORD *)unint64_t v74 = v75;
                      *(_OWORD *)(v74 + 16) = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 40 * v77;
                      uint64_t v78 = 2 * v69 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v10 + 40 * v77 + 8) < *(double *)(v70 + 48))
                      {
                        v70 += 40;
                        uint64_t v77 = v78;
                      }
                      uint64_t v69 = v77;
                    }
                    while (*(double *)(v70 + 8) >= v71);
                    *(void *)unint64_t v72 = v73;
                    *(double *)(v72 + 8) = v71;
                    *(_OWORD *)(v72 + 16) = v115;
                    *(_WORD *)(v72 + 32) = v123;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x28uLL;
              do
              {
                uint64_t v80 = 0;
                uint64_t v130 = *(void *)(v10 + 32);
                long long v116 = *(_OWORD *)v10;
                long long v124 = *(_OWORD *)(v10 + 16);
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = v81;
                  uint64_t v83 = v80 + 1;
                  v81 += 40 * (v80 + 1);
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v85 = v84 + 2;
                  if (v85 < v79 && *(double *)(v82 + 40 * v83 + 8) < *(double *)(v81 + 48))
                  {
                    v81 += 40;
                    uint64_t v80 = v85;
                  }
                  long long v86 = *(_OWORD *)v81;
                  long long v87 = *(_OWORD *)(v81 + 16);
                  *(_WORD *)(v82 + 32) = *(_WORD *)(v81 + 32);
                  *(_OWORD *)unint64_t v82 = v86;
                  *(_OWORD *)(v82 + 16) = v87;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 40;
                if (v81 == a2)
                {
                  *(_WORD *)(v81 + 32) = v130;
                  *(_OWORD *)unint64_t v81 = v116;
                  *(_OWORD *)(v81 + 16) = v124;
                }
                else
                {
                  long long v88 = *(_OWORD *)a2;
                  long long v89 = *(_OWORD *)(a2 + 16);
                  *(_WORD *)(v81 + 32) = *(_WORD *)(a2 + 32);
                  *(_OWORD *)unint64_t v81 = v88;
                  *(_OWORD *)(v81 + 16) = v89;
                  *(_WORD *)(a2 + 32) = v130;
                  *(_OWORD *)a2 = v116;
                  *(_OWORD *)(a2 + 16) = v124;
                  uint64_t v90 = v81 - v10 + 40;
                  if (v90 >= 41)
                  {
                    unint64_t v91 = (v90 / 0x28uLL - 2) >> 1;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v10 + 40 * v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      uint64_t v109 = *(void *)(v81 + 32);
                      long long v106 = *(_OWORD *)(v81 + 16);
                      do
                      {
                        unint64_t v94 = v81;
                        unint64_t v81 = v10 + 40 * v91;
                        long long v95 = *(_OWORD *)v81;
                        long long v96 = *(_OWORD *)(v81 + 16);
                        *(_WORD *)(v94 + 32) = *(_WORD *)(v81 + 32);
                        *(_OWORD *)unint64_t v94 = v95;
                        *(_OWORD *)(v94 + 16) = v96;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 40 * v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_WORD *)(v81 + 32) = v109;
                      *(_OWORD *)(v81 + 16) = v106;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40 * (v12 >> 1)), (double *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            char v16 = (double *)(a1 + 40 * v13 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40), v16, (double *)(a2 - 80));
            char v17 = (double *)(a1 + 40 + 8 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 80), v17, (double *)(a2 - 120));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v16, (double *)v14, v17);
            uint64_t v126 = *(void *)(a1 + 32);
            long long v110 = *(_OWORD *)a1;
            long long v118 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 16) = v19;
            *(_WORD *)(v14 + 32) = v126;
            *(_OWORD *)unint64_t v14 = v110;
            *(_OWORD *)(v14 + 16) = v118;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40 * (v12 >> 1)), (double *)a1, (double *)(a2 - 40));
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 32) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          long long v105 = *(_OWORD *)(a1 + 16);
          uint64_t v108 = *(void *)(a1 + 32);
          if (v20 >= *(double *)(a2 - 32))
          {
            unint64_t v41 = a1 + 40;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 40;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 40;
              double v40 = *(double *)(v39 + 48);
              v39 += 40;
            }
            while (v20 >= v40);
          }
          unint64_t v43 = a2;
          if (v10 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              unint64_t v43 = v44 - 40;
              double v45 = *(double *)(v44 - 32);
              v44 -= 40;
            }
            while (v20 < v45);
          }
          while (v10 < v43)
          {
            uint64_t v128 = *(void *)(v10 + 32);
            long long v112 = *(_OWORD *)v10;
            long long v120 = *(_OWORD *)(v10 + 16);
            long long v46 = *(_OWORD *)v43;
            long long v47 = *(_OWORD *)(v43 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v43 + 32);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(_WORD *)(v43 + 32) = v128;
            *(_OWORD *)unint64_t v43 = v112;
            *(_OWORD *)(v43 + 16) = v120;
            do
            {
              double v48 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *(double *)(v43 - 32);
              v43 -= 40;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 40);
            long long v51 = *(_OWORD *)(v10 - 24);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 40) = v38;
          *(double *)(v10 - 32) = v20;
          *(_WORD *)(v10 - 8) = v108;
          *(_OWORD *)(v10 - 24) = v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        long long v104 = *(_OWORD *)(a1 + 16);
        uint64_t v107 = *(void *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 48);
          v21 += 40;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        unint64_t v25 = a2;
        if (v21 == 40)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 40;
            double v29 = *(double *)(v28 - 32);
            v28 -= 40;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 40;
            double v27 = *(double *)(v25 - 32);
            v25 -= 40;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v127 = *(void *)(v10 + 32);
            long long v111 = *(_OWORD *)v10;
            long long v119 = *(_OWORD *)(v10 + 16);
            long long v31 = *(_OWORD *)v30;
            long long v32 = *(_OWORD *)(v30 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v30 + 32);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(_WORD *)(v30 + 32) = v127;
            *(_OWORD *)unint64_t v30 = v111;
            *(_OWORD *)(v30 + 16) = v119;
            do
            {
              double v33 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v33 < v20);
            do
            {
              double v34 = *(double *)(v30 - 32);
              v30 -= 40;
            }
            while (v34 >= v20);
          }
          while (v10 < v30);
        }
        if (v10 - 40 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 40);
          long long v36 = *(_OWORD *)(v10 - 24);
          *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 40) = v22;
        *(double *)(v10 - 32) = v20;
        *(_WORD *)(v10 - 8) = v107;
        *(_OWORD *)(v10 - 24) = v104;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 40;
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        __int16 v9 = *(_WORD *)(a2 - 8);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      uint64_t v16 = *(void *)v12;
      long long v21 = *(_OWORD *)(v12 + 16);
      uint64_t v22 = *(void *)(v12 + 32);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(void *)uint64_t v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(void *a1, uint64_t a2)
{
  id v3 = (void *)a1[5];
  uint64_t v4 = a1[6];
  BOOL v5 = (void *)a1[4];
  uint64_t v6 = [v5 dateInterval];
  void v9[4] = v4;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  uint64_t v7 = [v3 collectionCalculator:v5 queryForInterval:v6 error:a2 sampleHandler:v10 mergeHandler:v9];

  return v7;
}

void sub_1BD0DD3C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10 = *(void *)(a1 + 32);
  *(double *)int v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  char v15 = 1;
  uint64_t v11 = [MEMORY[0x1E4F1C9C8] distantFuture];
  [v11 timeIntervalSinceReferenceDate];
  BOOL v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1BD0DD46C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
}

void HDStatisticsRelative<HDStatisticsTimeInterval>::archive(uint64_t a1, int8x16_t *a2)
{
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 112);
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F171B978;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  statistics::Statistics::makePrimaryStatistics(a1);
  HDStatisticsTimeInterval::archive((HDStatisticsTimeInterval *)&a2->u64[1], (uint64_t)v6);
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v6);
  statistics::Statistics::~Statistics((statistics::Statistics *)v6);
  uint64_t v5 = a2->i32[0];
  *(_DWORD *)(a1 + 204) |= 0x100u;
  *(void *)(a1 + 136) = v5;
  statistics::Statistics::makeMostRecentDatum(a1);
  v6[0] = &unk_1F17206F8;
  int v10 = 127;
  int8x16_t v7 = vextq_s8(a2[3], a2[3], 8uLL);
  v6[1] = a2[4].i64[0];
  v6[2] = a2[4].i64[1];
  __int16 v8 = 0;
  char v9 = 0;
  statistics::RawQuantitySample::operator=(*v4, (uint64_t)v6);
  PB::Base::~Base((PB::Base *)v6);
}

void sub_1BD0DD59C(_Unwind_Exception *a1)
{
  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsTimeInterval>::unarchive(uint64_t a1, void *a2)
{
  *(_DWORD *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 66) = 0u;
  uint64_t v5 = (HDStatisticsTimeInterval *)a2[16];
  if (v5)
  {
    HDStatisticsTimeInterval::unarchive(v5, (uint64_t)&v9);
    *(void *)(a1 + 8) = v9;
    double result = v12;
    uint64_t v6 = v11;
    *(_OWORD *)(a1 + 16) = v10;
    *(void *)(a1 + 32) = v6;
    *(double *)(a1 + 40) = result;
  }
  *(_DWORD *)a1 = a2[17];
  uint64_t v7 = a2[14];
  if (v7)
  {
    double result = *(double *)(v7 + 8);
    uint64_t v8 = *(void *)(v7 + 16);
    *(int8x16_t *)(a1 + 48) = vextq_s8(*(int8x16_t *)(v7 + 24), *(int8x16_t *)(v7 + 24), 8uLL);
    *(double *)(a1 + 64) = result;
    *(void *)(a1 + 72) = v8;
    *(_WORD *)(a1 + 80) = 1;
  }
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6 = a3;
  uint64_t v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = &unk_1F17244C0;
  double v9 = 900.0;
  if ((v6 & 0x10) == 0) {
    double v9 = 0.0;
  }
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(void *)(v8 + 104) = 0;
  *(void *)(v8 + 112) = 0;
  *(void *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsTimeInterval>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_WORD *)(a1 + 520) = 1;
  *(unsigned char *)(a1 + 522) = 0;
  *(unsigned char *)(a1 + 524) = 0;
  *(void *)(a1 + 528) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(void *)(a1 + 568) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);

  JUMPOUT(0x1C187B8A0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1F17244C0;
  uint64_t v2 = *(void **)(a1 + 552);
  if (v2)
  {
    *(void *)(a1 + 560) = v2;
    operator delete(v2);
  }

  id v3 = *(void **)(a1 + 488);
  if (v3)
  {
    *(void *)(a1 + 496) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsTimeInterval>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(unsigned char *)(result + 520) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::setDateInterval(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 copy];
  uint64_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;

  uint64_t v5 = [v6 startDate];
  [v5 timeIntervalSinceReferenceDate];
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_configureForStartTime(a1);
}

void sub_1BD0DD7F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(void *)(a1 + 40))
  {
    id v5 = v3;
    [v3 timeIntervalSinceReferenceDate];
    *(void *)(a1 + 528) = v4;
    id v3 = v5;
  }
}

void sub_1BD0DD86C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::setStatisticsConfiguration(id *a1, void *a2)
{
  objc_storeStrong(a1 + 67, a2);
  id v7 = a2;
  id v4 = a1[67];
  id v5 = a1[64];
  a1[64] = v4;
  id v6 = v4;

  objc_storeStrong(a1 + 19, a1[64]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (*(void *)(a1 + 40)) {
    return 1;
  }
  BOOL v7 = *(void *)(a1 + 224) == *(void *)(a1 + 216) && *(uint64_t *)(a1 + 240) < 1
    || HKIntervalMask<double>::firstDifference(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)a2, *(void *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (v7) {
    return 1;
  }
  double v9 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128);

  return v9(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::setStatisticsHandler(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 copy];
  id v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v3;
}

void sub_1BD0DDA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::dataSource(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));

  return WeakRetained;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::currentStatistics(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 520))
  {
    double v1 = 0;
  }
  else
  {
    HDStatisticsBucket<HDStatisticsTimeInterval>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
    HDStatisticsBucket<HDStatisticsTimeInterval>::_updateSourceOrder((uint64_t)v4);
    HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeThroughTime((uint64_t)v4, v4[1]);
    double v1 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
    HDStatisticsBucket<HDStatisticsTimeInterval>::~HDStatisticsBucket((uint64_t)v4);
  }

  return v1;
}

void sub_1BD0DDB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(a1 + 64);
  BOOL v7 = v6;
  if (v6)
  {
    uint64_t v8 = [v6 startDate];
    [v8 timeIntervalSinceReferenceDate];
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    long long v10 = [v7 endDate];
    [v10 timeIntervalSinceReferenceDate];
    double v12 = v11;
    double v13 = *(double *)(a2 + 8);

    if (v12 < v13) {
      goto LABEL_9;
    }
  }
  if (!*(unsigned char *)(a1 + 522))
  {
LABEL_11:
    uint64_t v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 521))
  {
LABEL_9:
    uint64_t v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(unsigned char *)(a1 + 523)) {
      goto LABEL_11;
    }
    unint64_t v17 = *(void *)(a1 + 560);
    unint64_t v18 = *(void *)(a1 + 568);
    if (v17 >= v18)
    {
      uint64_t v22 = *(void *)(a1 + 552);
      unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      unint64_t v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24) {
        unint64_t v24 = 2 * v25;
      }
      if (v25 >= 0x333333333333333) {
        unint64_t v26 = 0x666666666666666;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26) {
        unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      }
      else {
        uint64_t v27 = 0;
      }
      unint64_t v28 = v26 + 40 * v23;
      unint64_t v29 = v26 + 40 * v27;
      long long v30 = *(_OWORD *)a2;
      long long v31 = *(_OWORD *)(a2 + 16);
      *(void *)(v28 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      unint64_t v21 = v28 + 40;
      long long v32 = *(char **)(a1 + 560);
      double v33 = *(char **)(a1 + 552);
      if (v32 != v33)
      {
        do
        {
          long long v34 = *(_OWORD *)(v32 - 40);
          long long v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        long long v32 = *(char **)(a1 + 552);
      }
      *(void *)(a1 + 552) = v28;
      *(void *)(a1 + 560) = v21;
      *(void *)(a1 + 568) = v29;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      long long v19 = *(_OWORD *)a2;
      long long v20 = *(_OWORD *)(a2 + 16);
      *(void *)(v17 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      unint64_t v21 = v17 + 40;
    }
    *(void *)(a1 + 560) = v21;
    goto LABEL_9;
  }
  int v14 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
  uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1BD0DDD94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = v5;
  if (*(unsigned char *)(a1 + 522))
  {
    uint64_t v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 522) = 1;
  uint64_t v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    uint64_t v7 = 0;
    goto LABEL_82;
  }
  uint64_t v65 = v6;
  if (*(unsigned char *)(a1 + 521)) {
    goto LABEL_5;
  }
  double v9 = *(void **)(a1 + 544);
  if (!v9)
  {
    id v68 = 0;
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 40))
  {
LABEL_5:
    int v8 = 0;
    id v68 = 0;
    goto LABEL_29;
  }
  [v9 sortUsingComparator:&__block_literal_global_812];
  id v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v10 = *(id *)(a1 + 544);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  if (!v11)
  {

    id v12 = 0;
    goto LABEL_27;
  }
  id v12 = 0;
  uint64_t v13 = *(void *)v70;
  do
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (*(void *)v70 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(id *)(*((void *)&v69 + 1) + 8 * i);
      BOOL v16 = v15;
      if (v12)
      {
        unint64_t v17 = [v15 startDate];
        unint64_t v18 = [v12 endDate];
        int v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          long long v20 = [v16 endDate];
          unint64_t v21 = [v12 endDate];
          int v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22) {
            goto LABEL_21;
          }
          id v23 = objc_alloc(MEMORY[0x1E4F28C18]);
          unint64_t v24 = [v12 startDate];
          unint64_t v25 = [v16 endDate];
          id v26 = (id)[v23 initWithStartDate:v24 endDate:v25];
        }
        else
        {
          [v68 addObject:v12];
          id v26 = v16;
        }
        id v12 = v26;
      }
      else
      {
        id v12 = v15;
      }
LABEL_21:
    }
    uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  }
  while (v11);

  if (v12) {
    [v68 addObject:v12];
  }
LABEL_27:

LABEL_28:
  int v8 = 1;
LABEL_29:
  uint64_t v27 = *(void **)(a1 + 544);
  *(void *)(a1 + 544) = 0;

  *(unsigned char *)(a1 + 521) = 0;
  if (!v8)
  {
    unint64_t v38 = *(void *)(a1 + 552);
    *(void *)(a1 + 568) = 0;
    *(void *)(a1 + 560) = 0;
    *(void *)(a1 + 552) = 0;
    unint64_t v39 = v38;
    goto LABEL_47;
  }
  unint64_t v28 = [v68 lastObject];
  if (v28)
  {
    unint64_t v29 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_currentBucketInterval(a1);
    long long v30 = [v29 endDate];
    long long v31 = [v28 endDate];
    int v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      double v33 = [v28 endDate];
      [v33 timeIntervalSinceReferenceDate];
      double v35 = v34;

      uint64_t v36 = *(void *)(a1 + 552);
      BOOL v37 = *(long long **)(a1 + 560);
      while ((long long *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((long long *)v36 != v37)
          {
            double v40 = (long long *)(v36 + 40);
            if ((long long *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  long long v41 = *v40;
                  long long v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)uint64_t v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                double v40 = (long long *)((char *)v40 + 40);
              }
              while (v40 != v37);
              BOOL v37 = *(long long **)(a1 + 560);
            }
          }
          if ((long long *)v36 != v37) {
            *(void *)(a1 + 560) = v36;
          }
          break;
        }
        v36 += 40;
      }
    }
  }
  unint64_t v38 = *(void *)(a1 + 552);
  unint64_t v39 = *(void *)(a1 + 560);
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 560) = 0;
  if (![v68 count]) {
    goto LABEL_60;
  }
LABEL_47:
  id v43 = v68;
  long long __p = (void *)v38;
  if (v43)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v44 = v43;
    uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v70;
      while (2)
      {
        for (uint64_t j = 0; j != v45; ++j)
        {
          if (*(void *)v70 != v46) {
            objc_enumerationMutation(v44);
          }
          id v48 = *(id *)(*((void *)&v69 + 1) + 8 * j);
          int v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_primitiveInvalidateInterval((id *)a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
        if (v45) {
          continue;
        }
        break;
      }
    }

LABEL_59:
    unint64_t v38 = (unint64_t)__p;
LABEL_60:
    unint64_t v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v51;
    }
    int v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    long long __p = (void *)v38;
    if (v39 != v38)
    {
      uint64_t v54 = v38;
      uint64_t v50 = v67;
      do
      {
        int v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_primitiveAddSample(a1, v54, 1, v50);
        int v53 = v55;
        v54 += 40;
        if (v54 == v39) {
          char v56 = 0;
        }
        else {
          char v56 = v55;
        }
        uint64_t v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_primitiveInvalidateInterval((id *)a1, 0, v67))goto LABEL_59; {
LABEL_70:
    }
    int v53 = 0;
  }
  if (*(void *)(a1 + 40) && *(void *)(a1 + 496) != *(void *)(a1 + 488))
  {
    do
    {
      uint64_t v57 = objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(void *)(a1 + 112) + 1, v50, v65);
      HDStatisticsBucket<HDStatisticsTimeInterval>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      unint64_t v58 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_statisticsFromFinishedBucket(a1, a1 + 120);
      unint64_t v59 = [v57 startDate];
      [v59 timeIntervalSinceReferenceDate];
      double v61 = v60;
      uint64_t v62 = [v57 endDate];
      [v62 timeIntervalSinceReferenceDate];
      HDStatisticsCollectionEngine<HDStatisticsTimeInterval>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_notifyForCurrentBucket(a1);
    }
    while (*(void *)(a1 + 496) != *(void *)(a1 + 488));
  }
  *(unsigned char *)(a1 + 522) = 0;
  if (__p) {
    operator delete(__p);
  }

  if (v53)
  {
    if (*(unsigned char *)(a1 + 524))
    {
      *(unsigned char *)(a1 + 524) = 0;
      id v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_notifyForCurrentBucket(a1);
      uint64_t v7 = 1;
      goto LABEL_82;
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v6 = v65;
LABEL_82:
  *(unsigned char *)(a1 + 522) = 0;
LABEL_83:

  return v7;
}

void sub_1BD0DE490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    *(unsigned char *)(v13 + 522) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::enableImmediateSampleInsertion(uint64_t result)
{
  *(unsigned char *)(result + 523) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(unsigned char *)(a1 + 522)) {
      goto LABEL_12;
    }
    uint64_t v7 = 0;
LABEL_14:
    uint64_t v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_primitiveInvalidateInterval((id *)a1, v7, a3);
    goto LABEL_15;
  }
  uint64_t v7 = [v6 dateIntervalForIntervalsContainingInterval:v5];

  if (!*(unsigned char *)(a1 + 522)) {
    goto LABEL_14;
  }
  if (!v7)
  {
LABEL_12:
    id v12 = *(void **)(a1 + 544);
    *(void *)(a1 + 544) = 0;

    uint64_t v7 = 0;
    uint64_t v11 = 1;
    *(unsigned char *)(a1 + 521) = 1;
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 521))
  {
    int v8 = *(void **)(a1 + 544);
    if (!v8)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      id v10 = *(void **)(a1 + 544);
      *(void *)(a1 + 544) = v9;

      int v8 = *(void **)(a1 + 544);
    }
    [v8 addObject:v7];
  }
  uint64_t v11 = 1;
LABEL_15:

  return v11;
}

void sub_1BD0DE790(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    *(unsigned char *)(a1 + 520) = 1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI24HDStatisticsTimeIntervalE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v9[3] = &unk_1E63043E8;
    uint64_t v12 = a1;
    id v10 = v5;
    id v11 = WeakRetained;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 112))(a1, v9, a3);
    if (v7 && *(unsigned char *)(a1 + 520) && !*(void *)(a1 + 40)) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_configureForStartTime(a1);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to query for initial statistics: no data source available.");
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1BD0DE8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::reset(uint64_t result)
{
  *(unsigned char *)(result + 520) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 encodeBool:*(unsigned __int8 *)(a1 + 520) forKey:@"needs_config"];
  id v12 = v3;
  int v32 = &unk_1F1726FA0;
  double v33 = 0;
  int v38 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
  LOBYTE(v38) = 1;
  uint64_t v34 = v4;
  uint64_t v35 = 0;
  statistics::StatisticsEngine::makeCurrentBucket((uint64_t)&v32);
  uint64_t v13 = &unk_1F171B9C8;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  int v31 = 511;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 0;
  int8x16_t v14 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  uint64_t v5 = *(void *)(a1 + 136);
  char v29 = *(unsigned char *)(a1 + 144);
  char v30 = *(unsigned char *)(a1 + 145);
  BOOL v28 = *(_DWORD *)(a1 + 148) == 0;
  int8x16_t v15 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  uint64_t v7 = *(int8x16_t **)(a1 + 216);
  if (v7 != *(int8x16_t **)(a1 + 224))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v7, *v7, 8uLL);
    int8x16_t v40 = v7[1];
    char v43 = 0;
    HIBYTE(v42) = v7[2].i8[9];
    LOBYTE(v42) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>();
  }
  statistics::StatisticsBucket::makeStatistics((uint64_t)&v13);
  HDStatisticsTimeInterval::archive((HDStatisticsTimeInterval *)(a1 + 240), (uint64_t)&v39);
  statistics::Statistics::operator=(*((statistics **)&v22 + 1), (uint64_t)&v39);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v39);
  uint64_t v8 = *(void *)(a1 + 280);
  if (v8 != a1 + 288)
  {
    HDStatisticsTimeInterval::archive((HDStatisticsTimeInterval *)(v8 + 40), (uint64_t)&v39);
    uint64_t v9 = *(void *)(v8 + 32);
    v46 |= 0x200u;
    uint64_t v45 = v9;
    PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>();
  }
  id v10 = *(int8x16_t **)(a1 + 184);
  if (v10 != *(int8x16_t **)(a1 + 192))
  {
    unint64_t v39 = (char *)&unk_1F1727540;
    v41.i32[0] = 3;
    int8x16_t v40 = vextq_s8(*v10, *v10, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>();
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v13);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v13);
  id v11 = *(int8x16_t **)(a1 + 488);
  if (v11 != *(int8x16_t **)(a1 + 496))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v11, *v11, 8uLL);
    int8x16_t v40 = v11[1];
    __int16 v42 = 0;
    char v43 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>();
  }
  PB::Writer::Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v39);
  [v12 encodeBytes:v40.i64[0] length:&v39[-v40.i64[0]] forKey:@"hdsce_archived_representation"];
  PB::Writer::~Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);
}

void sub_1BD0DECE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v56 = a2;
  *(unsigned char *)(a1 + 520) = [v56 decodeBoolForKey:@"needs_config"];
  id v3 = v56;
  HDStatisticsBucket<HDStatisticsTimeInterval>::HDStatisticsBucket((uint64_t)v61, 0, -1.79769313e308, 1.79769313e308);
  long long v62 = 0u;
  long long v63 = 0u;
  uint64_t v100 = 0;
  id v59 = v3;
  PB::Reader::Reader((PB::Reader *)v99, (const unsigned __int8 *)[v59 decodeBytesForKey:@"hdsce_archived_representation" returnedLength:&v100]);
  uint64_t v58 = a1;
  double v92 = &unk_1F1726FA0;
  uint64_t v93 = 0;
  uint64_t v97 = 0;
  uint64_t v95 = 0;
  uint64_t v96 = 0;
  int v98 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v92, (PB::Reader *)v99);
  uint64_t v60 = v94;
  if (v93)
  {
    uint64_t v67 = 0;
    memset(v70, 0, sizeof(v70));
    uint64_t v77 = 0;
    long long v76 = 0;
    long long __p = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v75 = &v76;
    long long v78 = 0u;
    long long v79 = 0u;
    int v80 = 1065353216;
    long long v81 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    uint64_t v84 = 0;
    int v85 = 1065353216;
    long long v86 = 0u;
    long long v87 = 0u;
    int v88 = 1065353216;
    long long v89 = 0u;
    long long v90 = 0u;
    int v91 = 1065353216;
    int8x16_t v64 = vextq_s8(*(int8x16_t *)(v93 + 8), *(int8x16_t *)(v93 + 8), 8uLL);
    uint64_t v4 = *(void *)(v93 + 72);
    uint64_t v65 = *(void *)(v93 + 64);
    __int16 v66 = *(_WORD *)(v93 + 185);
    int8x16_t v68 = vextq_s8(*(int8x16_t *)(v93 + 24), *(int8x16_t *)(v93 + 24), 8uLL);
    uint64_t v69 = v4;
    uint64_t v6 = *(void *)(v93 + 80);
    uint64_t v5 = *(void *)(v93 + 88);
    uint64_t v57 = (void *)v93;
    if (v6 != v5)
    {
      unint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(*(void *)v6 + 24);
        uint64_t v9 = *(void *)(*(void *)v6 + 32);
        uint64_t v10 = *(void *)(*(void *)v6 + 8);
        uint64_t v11 = *(void *)(*(void *)v6 + 16);
        char v12 = *(unsigned char *)(*(void *)v6 + 41);
        char v13 = *(unsigned char *)(*(void *)v6 + 40);
        if (v7 >= (unint64_t)v72)
        {
          int8x16_t v14 = (void *)__p;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - __p) >> 4);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v72 - __p) >> 4) > v16) {
            unint64_t v16 = 0x5555555555555556 * ((uint64_t)(v72 - __p) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72 - __p) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v17 = 0x555555555555555;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17)
          {
            unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            unint64_t v7 = *((void *)&__p + 1);
            int8x16_t v14 = (void *)__p;
          }
          else
          {
            uint64_t v18 = 0;
          }
          unint64_t v19 = v17 + 48 * v15;
          *(void *)unint64_t v19 = v9;
          *(void *)(v19 + 8) = v8;
          *(void *)(v19 + 16) = v10;
          *(void *)(v19 + 24) = v11;
          *(_WORD *)(v19 + 32) = 1;
          *(unsigned char *)(v19 + 40) = 0;
          *(unsigned char *)(v19 + 41) = v12;
          *(unsigned char *)(v19 + 42) = v13;
          unint64_t v20 = v19;
          if ((void *)v7 != v14)
          {
            do
            {
              long long v21 = *(_OWORD *)(v7 - 48);
              long long v22 = *(_OWORD *)(v7 - 32);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *(_OWORD *)(v20 - 48) = v21;
              *(_OWORD *)(v20 - 32) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while ((void *)v7 != v14);
            int8x16_t v14 = (void *)__p;
          }
          unint64_t v7 = v19 + 48;
          *(void *)&long long __p = v20;
          *((void *)&__p + 1) = v19 + 48;
          *(void *)&long long v72 = v17 + 48 * v18;
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)unint64_t v7 = v9;
          *(void *)(v7 + 8) = v8;
          *(void *)(v7 + 16) = v10;
          *(void *)(v7 + 24) = v11;
          *(_WORD *)(v7 + 32) = 1;
          *(unsigned char *)(v7 + 40) = 0;
          *(unsigned char *)(v7 + 41) = v12;
          *(unsigned char *)(v7 + 42) = v13;
          v7 += 48;
        }
        *((void *)&__p + 1) = v7;
        v6 += 8;
      }
      while (v6 != v5);
    }
    long long v23 = (HDStatisticsTimeInterval *)v57[13];
    if (v23)
    {
      HDStatisticsTimeInterval::unarchive(v23, (uint64_t)&v101);
      *((void *)&v72 + 1) = v101;
      if ((void)v73)
      {
        *((void *)&v73 + 1) = v73;
        operator delete((void *)v73);
      }
      long long v73 = v102;
      long long v74 = v103;
      *(void *)&long long v103 = 0;
      long long v102 = 0uLL;
    }
    long long v24 = (HDStatisticsTimeInterval **)v57[17];
    for (uint64_t i = (HDStatisticsTimeInterval **)v57[18]; v24 != i; ++v24)
    {
      long long v26 = *v24;
      HDStatisticsTimeInterval::unarchive(*v24, (uint64_t)&v101);
      uint64_t v27 = *((void *)v26 + 18);
      BOOL v28 = v76;
      char v29 = &v76;
      char v30 = &v76;
      if (v76)
      {
        do
        {
          while (1)
          {
            char v30 = (uint64_t **)v28;
            uint64_t v31 = v28[4];
            if (v31 <= v27) {
              break;
            }
            BOOL v28 = *v30;
            char v29 = v30;
            if (!*v30) {
              goto LABEL_34;
            }
          }
          if (v31 >= v27)
          {
            double v33 = (char *)v30;
            goto LABEL_37;
          }
          BOOL v28 = v30[1];
        }
        while (v28);
        char v29 = v30 + 1;
      }
LABEL_34:
      double v33 = (char *)operator new(0x50uLL);
      *((void *)v33 + 4) = v27;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *((void *)v33 + 9) = 0;
      *(void *)double v33 = 0;
      *((void *)v33 + 1) = 0;
      *((void *)v33 + 2) = v30;
      void *v29 = (uint64_t *)v33;
      int v32 = (uint64_t *)v33;
      if (*v75)
      {
        long long v75 = (uint64_t **)*v75;
        int v32 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v76, v32);
      ++v77;
LABEL_37:
      uint64_t v34 = (void *)*((void *)v33 + 6);
      *((void *)v33 + 5) = v101;
      if (v34)
      {
        *((void *)v33 + 7) = v34;
        operator delete(v34);
        *((void *)v33 + 6) = 0;
        *((void *)v33 + 7) = 0;
        *((void *)v33 + 8) = 0;
      }
      *((_OWORD *)v33 + 3) = v102;
      *((void *)v33 + 8) = v103;
      *(void *)&long long v103 = 0;
      long long v102 = 0uLL;
      *((void *)v33 + 9) = *((void *)&v103 + 1);
    }
    uint64_t v35 = v57[5];
    for (uint64_t j = v57[6]; v35 != j; v35 += 8)
    {
      double v38 = *(double *)(*(void *)v35 + 8);
      double v37 = *(double *)(*(void *)v35 + 16);
      if (v38 >= v37) {
        double v39 = *(double *)(*(void *)v35 + 16);
      }
      else {
        double v39 = *(double *)(*(void *)v35 + 8);
      }
      if (v37 < v38) {
        double v37 = *(double *)(*(void *)v35 + 8);
      }
      HKIntervalMask<double>::_insertInterval(v70, v39, v37);
    }
    HDStatisticsBucket<HDStatisticsTimeInterval>::operator=((uint64_t)v61, (uint64_t)&v64);
    HDStatisticsBucket<HDStatisticsTimeInterval>::~HDStatisticsBucket((uint64_t)&v64);
  }
  uint64_t v40 = v95;
  uint64_t v41 = v96;
  if (v95 != v96)
  {
    unint64_t v42 = *((void *)&v62 + 1);
    do
    {
      uint64_t v43 = *(void *)(*(void *)v40 + 24);
      uint64_t v44 = *(void *)(*(void *)v40 + 32);
      uint64_t v45 = *(void *)(*(void *)v40 + 8);
      uint64_t v46 = *(void *)(*(void *)v40 + 16);
      if (v42 >= (unint64_t)v63)
      {
        long long v47 = (void *)v62;
        unint64_t v48 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v42 - v62) >> 3);
        unint64_t v49 = v48 + 1;
        if (v48 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(v63 - v62) >> 3) > v49) {
          unint64_t v49 = 0x999999999999999ALL * ((uint64_t)(v63 - v62) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v63 - v62) >> 3) >= 0x333333333333333) {
          unint64_t v50 = 0x666666666666666;
        }
        else {
          unint64_t v50 = v49;
        }
        if (v50)
        {
          unint64_t v50 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v50);
          unint64_t v42 = *((void *)&v62 + 1);
          long long v47 = (void *)v62;
        }
        else
        {
          uint64_t v51 = 0;
        }
        unint64_t v52 = v50 + 40 * v48;
        *(void *)unint64_t v52 = v44;
        *(void *)(v52 + 8) = v43;
        *(void *)(v52 + 16) = v45;
        *(void *)(v52 + 24) = v46;
        *(_WORD *)(v52 + 32) = 1;
        unint64_t v53 = v52;
        if ((void *)v42 != v47)
        {
          do
          {
            long long v54 = *(_OWORD *)(v42 - 40);
            long long v55 = *(_OWORD *)(v42 - 24);
            *(_WORD *)(v53 - 8) = *(_WORD *)(v42 - 8);
            *(_OWORD *)(v53 - 24) = v55;
            *(_OWORD *)(v53 - 40) = v54;
            v53 -= 40;
            v42 -= 40;
          }
          while ((void *)v42 != v47);
          long long v47 = (void *)v62;
        }
        unint64_t v42 = v52 + 40;
        *(void *)&long long v62 = v53;
        *((void *)&v62 + 1) = v52 + 40;
        *(void *)&long long v63 = v50 + 40 * v51;
        if (v47) {
          operator delete(v47);
        }
      }
      else
      {
        *(void *)unint64_t v42 = v44;
        *(void *)(v42 + 8) = v43;
        *(void *)(v42 + 16) = v45;
        *(void *)(v42 + 24) = v46;
        *(_WORD *)(v42 + 32) = 1;
        v42 += 40;
      }
      *((void *)&v62 + 1) = v42;
      v40 += 8;
    }
    while (v40 != v41);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v92);

  HDStatisticsCollectionEngine<HDStatisticsTimeInterval>::operator=((void *)(v58 + 112), (uint64_t)&v60);
  if ((void)v62)
  {
    *((void *)&v62 + 1) = v62;
    operator delete((void *)v62);
  }
  HDStatisticsBucket<HDStatisticsTimeInterval>::~HDStatisticsBucket((uint64_t)v61);
}

void sub_1BD0DF3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a10);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table((uint64_t)&STACK[0x2F0]);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x2C8]);
  long long v72 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v72;
    operator delete(v72);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x288]);
  std::__tree<std::__value_type<long long,HDStatisticsTimeInterval>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTimeInterval>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTimeInterval>>>::destroy((void *)STACK[0x278]);
  long long v73 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v73;
    operator delete(v73);
  }
  long long v74 = (void *)STACK[0x230];
  if (STACK[0x230])
  {
    STACK[0x238] = (unint64_t)v74;
    operator delete(v74);
  }
  objc_destroyWeak((id *)&STACK[0x228]);
  long long v75 = (void *)STACK[0x210];
  if (STACK[0x210])
  {
    STACK[0x218] = (unint64_t)v75;
    operator delete(v75);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x348]);
  HDStatisticsCollectionEngine<HDStatisticsTimeInterval>::~HDStatisticsCollectionEngine((uint64_t)&a16);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsTimeInterval>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 256;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 160) = a1 + 168;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 216) = 1065353216;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 280) = 1065353216;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_DWORD *)(a1 + 320) = 1065353216;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_DWORD *)(a1 + 360) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsTimeInterval>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 376);
  if (v2)
  {
    *(void *)(a1 + 384) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsTimeInterval>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsTimeInterval>::~HDStatisticsBucket(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 328);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 288);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 248);
  uint64_t v2 = *(void **)(a1 + 224);
  if (v2)
  {
    *(void *)(a1 + 232) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 184);
  std::__tree<std::__value_type<long long,HDStatisticsTimeInterval>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTimeInterval>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTimeInterval>>>::destroy(*(void **)(a1 + 168));
  id v3 = *(void **)(a1 + 128);
  if (v3)
  {
    *(void *)(a1 + 136) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(void *)(a1 + 104) = v4;
    operator delete(v4);
  }
  objc_destroyWeak((id *)(a1 + 88));
  uint64_t v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(void *)(a1 + 72) = v5;
    operator delete(v5);
  }

  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsTimeInterval>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTimeInterval>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTimeInterval>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsTimeInterval>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTimeInterval>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTimeInterval>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsTimeInterval>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTimeInterval>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTimeInterval>>>::destroy(a1[1]);
    uint64_t v2 = (void *)a1[6];
    if (v2)
    {
      a1[7] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_configureForStartTime(uint64_t a1)
{
  uint64_t v29 = 0;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
    uint64_t v4 = [v2 dateIntervalContainingDate:v3 index:&v29];

    uint64_t v5 = [v4 startDate];
    [v5 timeIntervalSinceReferenceDate];
    double v7 = v6;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
LABEL_5:
    double v13 = v9;

    goto LABEL_6;
  }
  id v10 = *(id *)(a1 + 64);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v11 = [v10 startDate];
    [v11 timeIntervalSinceReferenceDate];
    double v7 = v12;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
    goto LABEL_5;
  }
  double v7 = -1.79769313e308;
  double v13 = 1.79769313e308;
LABEL_6:

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsTimeInterval>::HDStatisticsBucket((uint64_t)v22, WeakRetained, v7, v13);

  if (*(void *)(a1 + 32) == 1) {
    char v24 = 1;
  }
  uint64_t v23 = *(void *)(a1 + 56);
  char v25 = *(unsigned char *)(a1 + 24) & 1;
  if (v28 != (char *)(a1 + 72)) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v28, *(char **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4);
  }
  objc_storeStrong(&v27, *(id *)(a1 + 536));
  if (!*(void *)(a1 + 40)) {
    int v26 = 0;
  }
  uint64_t v15 = v29;
  HDStatisticsBucket<HDStatisticsTimeInterval>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v22);
  uint64_t v18 = v15;
  HDStatisticsBucket<HDStatisticsTimeInterval>::HDStatisticsBucket((uint64_t)v19, (uint64_t)v17);
  long long __p = 0u;
  long long v21 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsTimeInterval>::operator=((void *)(a1 + 112), (uint64_t)&v18);

  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsTimeInterval>::~HDStatisticsBucket((uint64_t)v19);
  HDStatisticsBucket<HDStatisticsTimeInterval>::~HDStatisticsBucket((uint64_t)v17);
  *(unsigned char *)(a1 + 520) = 0;
  return HDStatisticsBucket<HDStatisticsTimeInterval>::~HDStatisticsBucket((uint64_t)v22);
}

void sub_1BD0DF98C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *HDStatisticsCollectionEngine<HDStatisticsTimeInterval>::operator=(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  HDStatisticsBucket<HDStatisticsTimeInterval>::operator=((uint64_t)(a1 + 1), a2 + 8);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 47), (__n128 *)(a2 + 376));
  uint64_t v4 = *(void *)(a2 + 400);
  *(void *)(a2 + 400) = 0;
  uint64_t v5 = (void *)a1[50];
  a1[50] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsTimeInterval>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 96);
  double v7 = *(unsigned char **)(a2 + 104);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(void *)(a1 + 96) = v10;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(void *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  uint64_t v12 = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 120) = v12;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 128), *(const void **)(a2 + 128), *(void *)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 4);
  uint64_t v13 = *(void *)(a2 + 152);
  *(void *)(a1 + 168) = 0;
  int8x16_t v14 = (void *)(a1 + 168);
  *(void *)(a1 + 152) = v13;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 160) = a1 + 168;
  uint64_t v15 = *(void **)(a2 + 160);
  if (v15 != (void *)(a2 + 168))
  {
    unint64_t v16 = 0;
    unint64_t v17 = (void *)(a1 + 168);
    while (1)
    {
      uint64_t v18 = (void *)(a1 + 168);
      if (v17 == v14) {
        goto LABEL_12;
      }
      unint64_t v19 = v16;
      unint64_t v20 = (void *)(a1 + 168);
      if (v16)
      {
        do
        {
          uint64_t v18 = v19;
          unint64_t v19 = (void *)v19[1];
        }
        while (v19);
      }
      else
      {
        do
        {
          uint64_t v18 = (void *)v20[2];
          BOOL v21 = *v18 == (void)v20;
          unint64_t v20 = v18;
        }
        while (v21);
      }
      uint64_t v22 = v15[4];
      if (v18[4] < v22)
      {
LABEL_12:
        if (v16) {
          uint64_t v23 = (uint64_t **)v18;
        }
        else {
          uint64_t v23 = (uint64_t **)(a1 + 168);
        }
        if (v16) {
          char v24 = (uint64_t **)(v18 + 1);
        }
        else {
          char v24 = (uint64_t **)(a1 + 168);
        }
        if (!*v24)
        {
LABEL_28:
          id v27 = operator new(0x50uLL);
          long long v28 = *((_OWORD *)v15 + 2);
          v27[6] = 0;
          *((_OWORD *)v27 + 2) = v28;
          v27[7] = 0;
          v27[8] = 0;
          std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27 + 6, (const void *)v15[6], v15[7], (uint64_t)(v15[7] - v15[6]) >> 4);
          v27[9] = v15[9];
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 160), (uint64_t)v23, v24, v27);
        }
      }
      else
      {
        char v24 = (uint64_t **)(a1 + 168);
        uint64_t v23 = (uint64_t **)(a1 + 168);
        if (!v16) {
          goto LABEL_28;
        }
        char v25 = v16;
        while (1)
        {
          while (1)
          {
            uint64_t v23 = (uint64_t **)v25;
            uint64_t v26 = v25[4];
            if (v26 <= v22) {
              break;
            }
            char v25 = *v23;
            char v24 = v23;
            if (!*v23) {
              goto LABEL_28;
            }
          }
          if (v26 >= v22) {
            break;
          }
          char v25 = v23[1];
          if (!v25)
          {
            char v24 = v23 + 1;
            goto LABEL_28;
          }
        }
      }
      uint64_t v29 = (void *)v15[1];
      if (v29)
      {
        do
        {
          char v30 = v29;
          uint64_t v29 = (void *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          char v30 = (void *)v15[2];
          BOOL v21 = *v30 == (void)v15;
          uint64_t v15 = v30;
        }
        while (!v21);
      }
      if (v30 == (void *)(a2 + 168)) {
        break;
      }
      unint64_t v16 = (void *)*v14;
      unint64_t v17 = *(void **)(a1 + 160);
      uint64_t v15 = v30;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 184, a2 + 184);
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 224), *(const void **)(a2 + 224), *(void *)(a2 + 232), (uint64_t)(*(void *)(a2 + 232) - *(void *)(a2 + 224)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 248, a2 + 248);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 288, a2 + 288);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 328, a2 + 328);
  return a1;
}

void sub_1BD0DFD44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, id *location, void **a12)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v17);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  unint64_t v19 = *v15;
  if (*v15)
  {
    *(void *)(v13 + 232) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
  std::__tree<std::__value_type<long long,HDStatisticsTimeInterval>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTimeInterval>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTimeInterval>>>::destroy(*v12);
  unint64_t v20 = *a9;
  if (*a9)
  {
    *(void *)(v13 + 136) = v20;
    operator delete(v20);
  }
  BOOL v21 = *a10;
  if (*a10)
  {
    *(void *)(v13 + 104) = v21;
    operator delete(v21);
  }
  objc_destroyWeak(location);
  uint64_t v22 = *a12;
  if (*a12)
  {
    *(void *)(v13 + 72) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsTimeInterval>::operator=(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  long long v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v5;

  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  id WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  uint64_t v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(void *)(a1 + 104) = v9;
    operator delete(v9);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a1 + 120) = v10;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 128, (__n128 *)(a2 + 128));
  uint64_t v12 = a1 + 168;
  uint64_t v11 = *(void **)(a1 + 168);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  std::__tree<std::__value_type<long long,HDStatisticsTimeInterval>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTimeInterval>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTimeInterval>>>::destroy(v11);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  uint64_t v13 = (void *)(a2 + 168);
  uint64_t v14 = *(void *)(a2 + 168);
  *(void *)(a1 + 168) = v14;
  uint64_t v15 = *(void *)(a2 + 176);
  *(void *)(a1 + 176) = v15;
  if (v15)
  {
    *(void *)(v14 + 16) = v12;
    *(void *)(a2 + 160) = v13;
    *uint64_t v13 = 0;
    *(void *)(a2 + 176) = 0;
  }
  else
  {
    *(void *)(a1 + 160) = v12;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 184, (uint64_t *)(a2 + 184));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 224, (__n128 *)(a2 + 224));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 248, (uint64_t *)(a2 + 248));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 288, (uint64_t *)(a2 + 288));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 328, (uint64_t *)(a2 + 328));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  double v4 = *(double *)a2;
  id v5 = objc_alloc(MEMORY[0x1E4F1C9C8]);
  long long v6 = (double *)(a2 + 40);
  if (v4 != -1.79769313e308) {
    long long v6 = (double *)a2;
  }
  id v84 = (id)[v5 initWithTimeIntervalSinceReferenceDate:*v6];
  uint64_t v86 = a2;
  if (*(double *)(a2 + 8) == 1.79769313e308) {
    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 48)];
  }
  else {
    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 8)];
  }
  uint64_t v8 = (void *)v7;
  id v9 = *(id *)(a1 + 16);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v10 = *(id *)(a1 + 16);
    if ([v10 shouldUseUnderlyingTypeForStatistics])
    {
      uint64_t v11 = [v10 underlyingSampleType];

      id v9 = (id)v11;
    }
  }
  uint64_t v12 = [objc_alloc(MEMORY[0x1E4F2B5B0]) initWithDataType:v9 startDate:v84 endDate:v8];
  if (*(unsigned char *)(a1 + 24))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      id v14 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      uint64_t v15 = *(uint64_t **)(a2 + 224);
      uint64_t v16 = *(uint64_t **)(a2 + 232);
      while (v15 != v16)
      {
        uint64_t v17 = *v15;
        id v18 = objc_loadWeakRetained((id *)(a1 + 48));
        unint64_t v19 = [v18 sourceForSourceID:v17];

        if (v19)
        {
          if (([v14 containsObject:v19] & 1) == 0) {
            [v14 addObject:v19];
          }
        }

        ++v15;
      }
      unint64_t v20 = (void *)[v14 copy];
      [(id)v12 _setSources:v20];
    }
  }

  v92[0] = &unk_1F1724590;
  uint64_t v93 = v92;
  id v85 = (id)v12;
  BOOL v21 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v22 = [MEMORY[0x1E4F2B618] secondUnit];
  uint64_t v23 = *(const void **)(v86 + 128);
  __p[0] = *(void **)(v86 + 120);
  __p[1] = 0;
  long long v88 = 0uLL;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p[1], v23, *(void *)(v86 + 136), (uint64_t)(*(void *)(v86 + 136) - (void)v23) >> 4);
  uint64_t v89 = *(void *)(v86 + 152);
  if (!v93) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v24 = (*(uint64_t (**)(void *, void **))(*v93 + 48))(v93, __p);
  char v25 = *(double **)(v24 + 8);
  double v26 = 0.0;
  while (v25 != *(double **)(v24 + 16))
  {
    double v28 = *v25;
    double v27 = v25[1];
    v25 += 2;
    double v26 = v26 + v27 - v28;
  }
  uint64_t v29 = [v21 quantityWithUnit:v22 doubleValue:v26 + *(double *)(v24 + 32)];
  [v85 setDuration:v29];

  if (__p[1])
  {
    *(void **)&long long v88 = __p[1];
    operator delete(__p[1]);
  }

  char v30 = *(const void **)(v86 + 128);
  __p[0] = *(void **)(v86 + 120);
  __p[1] = 0;
  long long v88 = 0uLL;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p[1], v30, *(void *)(v86 + 136), (uint64_t)(*(void *)(v86 + 136) - (void)v30) >> 4);
  uint64_t v89 = *(void *)(v86 + 152);
  if (!v93) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  objc_msgSend(v85, "setDataCount:", *(void *)(*(uint64_t (**)(void *, void **))(*v93 + 48))(v93, __p));
  if (__p[1])
  {
    *(void **)&long long v88 = __p[1];
    operator delete(__p[1]);
  }
  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    goto LABEL_133;
  }
  id v83 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v82 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  *(_OWORD *)long long __p = 0u;
  long long v88 = 0u;
  LODWORD(v89) = 1065353216;
  uint64_t v31 = *(void **)(v86 + 160);
  if (v31 == (void *)(v86 + 168)) {
    goto LABEL_132;
  }
  do
  {
    int v32 = HDStatisticsBucket<HDStatisticsTimeInterval>::_bundleIdentifierForSourceID(v86, v31[4]);
    double v33 = v32;
    if (!v32) {
      goto LABEL_108;
    }
    unint64_t v34 = [v32 hash];
    unint64_t v35 = v34;
    unint64_t v36 = (unint64_t)__p[1];
    if (!__p[1]) {
      goto LABEL_49;
    }
    uint8x8_t v37 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v37.i16[0] = vaddlv_u8(v37);
    unint64_t v38 = v37.u32[0];
    if (v37.u32[0] > 1uLL)
    {
      uint64_t v12 = v34;
      if ((void *)v34 >= __p[1]) {
        uint64_t v12 = v34 % (unint64_t)__p[1];
      }
    }
    else
    {
      uint64_t v12 = ((unint64_t)__p[1] - 1) & v34;
    }
    double v39 = (char **)*((void *)__p[0] + v12);
    if (!v39 || (uint64_t v40 = *v39) == 0)
    {
LABEL_49:
      uint64_t v46 = (char *)operator new(0x40uLL);
      v90[0] = v46;
      v90[1] = &v88;
      *(void *)uint64_t v46 = 0;
      *((void *)v46 + 1) = v35;
      *((void *)v46 + 2) = v33;
      *(_OWORD *)(v46 + 24) = 0u;
      *(_OWORD *)(v46 + 40) = 0u;
      *((void *)v46 + 7) = 0;
      char v91 = 1;
      float v47 = (float)(unint64_t)(*((void *)&v88 + 1) + 1);
      if (v36 && (float)(*(float *)&v89 * (float)v36) >= v47)
      {
LABEL_95:
        long long v63 = (char **)*((void *)__p[0] + v12);
        uint64_t v40 = (char *)v90[0];
        if (v63)
        {
          *(void *)v90[0] = *v63;
        }
        else
        {
          *(void *)v90[0] = v88;
          *(void *)&long long v88 = v40;
          *((void *)__p[0] + v12) = &v88;
          if (!*(void *)v40)
          {
LABEL_104:
            v90[0] = 0;
            ++*((void *)&v88 + 1);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsTimeInterval>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsTimeInterval>,void *>>>>::reset[abi:ne180100]((uint64_t)v90);
            goto LABEL_105;
          }
          unint64_t v64 = *(void *)(*(void *)v40 + 8);
          if ((v36 & (v36 - 1)) != 0)
          {
            if (v64 >= v36) {
              v64 %= v36;
            }
          }
          else
          {
            v64 &= v36 - 1;
          }
          long long v63 = (char **)((char *)__p[0] + 8 * v64);
        }
        *long long v63 = v40;
        goto LABEL_104;
      }
      BOOL v48 = (v36 & (v36 - 1)) != 0;
      if (v36 < 3) {
        BOOL v48 = 1;
      }
      unint64_t v49 = v48 | (2 * v36);
      unint64_t v50 = vcvtps_u32_f32(v47 / *(float *)&v89);
      if (v49 <= v50) {
        int8x8_t prime = (int8x8_t)v50;
      }
      else {
        int8x8_t prime = (int8x8_t)v49;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v36 = (unint64_t)__p[1];
      if ((void *)*(void *)&prime > __p[1]) {
        goto LABEL_61;
      }
      if ((void *)*(void *)&prime < __p[1])
      {
        unint64_t v58 = vcvtps_u32_f32((float)*((unint64_t *)&v88 + 1) / *(float *)&v89);
        if (__p[1] < (void *)3
          || (uint8x8_t v59 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v59.i16[0] = vaddlv_u8(v59), v59.u32[0] > 1uLL))
        {
          unint64_t v58 = std::__next_prime(v58);
        }
        else
        {
          uint64_t v60 = 1 << -(char)__clz(v58 - 1);
          if (v58 >= 2) {
            unint64_t v58 = v60;
          }
        }
        if (*(void *)&prime <= v58) {
          int8x8_t prime = (int8x8_t)v58;
        }
        if (*(void *)&prime >= v36)
        {
          unint64_t v36 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_61:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v52 = operator new(8 * *(void *)&prime);
            unint64_t v53 = __p[0];
            __p[0] = v52;
            if (v53) {
              operator delete(v53);
            }
            uint64_t v54 = 0;
            __p[1] = (void *)prime;
            do
              *((void *)__p[0] + v54++) = 0;
            while (*(void *)&prime != v54);
            long long v55 = (void **)v88;
            if ((void)v88)
            {
              unint64_t v56 = *(void *)(v88 + 8);
              uint8x8_t v57 = (uint8x8_t)vcnt_s8(prime);
              v57.i16[0] = vaddlv_u8(v57);
              if (v57.u32[0] > 1uLL)
              {
                if (v56 >= *(void *)&prime) {
                  v56 %= *(void *)&prime;
                }
              }
              else
              {
                v56 &= *(void *)&prime - 1;
              }
              *((void *)__p[0] + v56) = &v88;
              for (i = *v55; i; unint64_t v56 = v62)
              {
                unint64_t v62 = i[1];
                if (v57.u32[0] > 1uLL)
                {
                  if (v62 >= *(void *)&prime) {
                    v62 %= *(void *)&prime;
                  }
                }
                else
                {
                  v62 &= *(void *)&prime - 1;
                }
                if (v62 != v56)
                {
                  if (!*((void *)__p[0] + v62))
                  {
                    *((void *)__p[0] + v62) = v55;
                    goto LABEL_86;
                  }
                  char *v55 = (void *)*i;
                  void *i = **((void **)__p[0] + v62);
                  **((void **)__p[0] + v62) = i;
                  uint64_t i = v55;
                }
                unint64_t v62 = v56;
LABEL_86:
                long long v55 = (void **)i;
                uint64_t i = (void *)*i;
              }
            }
            unint64_t v36 = (unint64_t)prime;
            goto LABEL_90;
          }
          int8x16_t v68 = __p[0];
          __p[0] = 0;
          if (v68) {
            operator delete(v68);
          }
          unint64_t v36 = 0;
          __p[1] = 0;
        }
      }
LABEL_90:
      if ((v36 & (v36 - 1)) != 0)
      {
        if (v35 >= v36) {
          uint64_t v12 = v35 % v36;
        }
        else {
          uint64_t v12 = v35;
        }
      }
      else
      {
        uint64_t v12 = (v36 - 1) & v35;
      }
      goto LABEL_95;
    }
    unint64_t v81 = (unint64_t)__p[1] - 1;
    while (1)
    {
      unint64_t v41 = *((void *)v40 + 1);
      if (v41 == v35) {
        break;
      }
      if (v38 > 1)
      {
        if (v41 >= v36) {
          v41 %= v36;
        }
      }
      else
      {
        v41 &= v81;
      }
      if (v41 != v12) {
        goto LABEL_49;
      }
LABEL_48:
      uint64_t v40 = *(char **)v40;
      if (!v40) {
        goto LABEL_49;
      }
    }
    id v42 = *((id *)v40 + 2);
    id v43 = v33;
    uint64_t v44 = v43;
    if (v42 != v43)
    {
      char v45 = [v42 isEqualToString:v43];

      if (v45) {
        goto LABEL_105;
      }
      goto LABEL_48;
    }

LABEL_105:
    *((void *)v40 + 3) = v31[5];
    if (v40 + 16 != (char *)(v31 + 4)) {
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v40 + 32, (char *)v31[6], v31[7], (uint64_t)(v31[7] - v31[6]) >> 4);
    }
    *((void *)v40 + 7) = v31[9];

LABEL_108:
    uint64_t v65 = (void *)v31[1];
    if (v65)
    {
      do
      {
        __int16 v66 = v65;
        uint64_t v65 = (void *)*v65;
      }
      while (v65);
    }
    else
    {
      do
      {
        __int16 v66 = (void *)v31[2];
        BOOL v67 = *v66 == (void)v31;
        uint64_t v31 = v66;
      }
      while (!v67);
    }
    uint64_t v31 = v66;
  }
  while (v66 != (void *)(v86 + 168));
  for (uint64_t j = (uint64_t **)v88; j; uint64_t j = (uint64_t **)*j)
  {
    long long v70 = j[2];
    long long v71 = (void *)MEMORY[0x1E4F2B370];
    long long v72 = [MEMORY[0x1E4F2B618] secondUnit];
    if (!v93) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v73 = (*(uint64_t (**)(void *, uint64_t *))(*v93 + 48))(v93, (uint64_t *)j + 3);
    long long v74 = *(double **)(v73 + 8);
    double v75 = 0.0;
    while (v74 != *(double **)(v73 + 16))
    {
      double v77 = *v74;
      double v76 = v74[1];
      v74 += 2;
      double v75 = v75 + v76 - v77;
    }
    long long v78 = [v71 quantityWithUnit:v72 doubleValue:v75 + *(double *)(v73 + 32)];
    [v83 setObject:v78 forKeyedSubscript:v70];

    if (!v93) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    long long v79 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)(*(uint64_t (**)(void *, uint64_t *))(*v93 + 48))(v93, (uint64_t *)j + 3));
    [v82 setObject:v79 forKeyedSubscript:v70];
  }
LABEL_132:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsTimeInterval>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsTimeInterval>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsTimeInterval>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsTimeInterval>>>::~__hash_table((uint64_t)__p);
  [v85 setDurationBySource:v83];
  [v85 setDataCountBySource:v82];

LABEL_133:
  std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsTimeInterval const&)>::~__value_func[abi:ne180100](v92);

  return v85;
}

void sub_1BD0E09B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsTimeInterval>::_updateSourceOrder(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 224);
  uint64_t v1 = *(void *)(a1 + 224);
  unint64_t v3 = *(void *)(a1 + 208);
  if (v3 != (*(void *)(a1 + 232) - v1) >> 3)
  {
    *(void *)(a1 + 232) = v1;
    std::vector<long long>::reserve((void **)(a1 + 224), v3);
    id v5 = *(void **)(a1 + 200);
    if (v5)
    {
      long long v6 = *(char **)(a1 + 232);
      do
      {
        uint64_t v7 = v5[2];
        unint64_t v8 = *(void *)(a1 + 240);
        if ((unint64_t)v6 >= v8)
        {
          id v10 = (char *)*v2;
          uint64_t v11 = (v6 - (unsigned char *)*v2) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            id v10 = *(char **)(a1 + 224);
            long long v6 = *(char **)(a1 + 232);
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v16 = (void *)(v14 + 8 * v11);
          void *v16 = v7;
          id v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            uint64_t v17 = *((void *)v6 - 1);
            v6 -= 8;
            *--uint64_t v16 = v17;
          }
          *(void *)(a1 + 224) = v16;
          *(void *)(a1 + 232) = v9;
          *(void *)(a1 + 240) = v14 + 8 * v15;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)long long v6 = v7;
          id v9 = v6 + 8;
        }
        *(void *)(a1 + 232) = v9;
        id v5 = (void *)*v5;
        long long v6 = v9;
      }
      while (v5);
    }
    id v18 = (id *)(a1 + 88);
    id WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      id v20 = objc_loadWeakRetained(v18);
      [v20 orderSourceIDs:v2];
    }
  }
}

void sub_1BD0E0CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2) {
    a2 = v4 * floor(a2 / v4);
  }
  double v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    uint64_t v125 = (void **)(a1 + 96);
    long long v121 = (double **)(a1 + 64);
    long long v119 = (uint64_t *)(a1 + 120);
    location = (id *)(a1 + 88);
    long long v115 = (double **)(a1 + 128);
    long long v114 = (void *)(a1 + 168);
    while (1)
    {
      unint64_t v6 = *(void *)(a1 + 96);
      uint64_t v7 = *(long long **)(a1 + 104);
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v7 - v6) >> 4);
      if (v8) {
        break;
      }
LABEL_124:
      *(double *)(a1 + 56) = a2;
LABEL_125:
      double v111 = *(double *)(a1 + 56);
      if (v111 == v5)
      {
        long long v112 = [MEMORY[0x1E4F28B00] currentHandler];
        long long v113 = [NSString stringWithUTF8String:"void HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeThroughTime(double) [Statistics = HDStatisticsTimeInterval]"];
        [v112 handleFailureInFunction:v113 file:@"HDStatisticsBucket.hpp" lineNumber:234 description:@"Failed to make forward progress during statistics merge."];

        double v111 = *(double *)(a1 + 56);
      }
      double v5 = v111;
      if (v111 >= a2) {
        return;
      }
    }
    if (v8 != 1)
    {
      double v20 = a2;
      double v21 = a2;
      double v22 = v5;
      uint64_t v23 = *(void *)(a1 + 96);
      if ((long long *)v6 != v7)
      {
        do
        {
          double v24 = *(double *)(v23 + 8);
          double v25 = *(double *)(v23 + 16);
          if (v24 > v22 && v24 < v21) {
            double v21 = *(double *)(v23 + 8);
          }
          if (v25 > v5) {
            double v27 = *(double *)(v23 + 16);
          }
          else {
            double v27 = v20;
          }
          if (v25 < v20)
          {
            double v22 = v5;
            double v20 = v27;
          }
          v23 += 48;
        }
        while ((long long *)v23 != v7);
      }
      if (v20 >= v21) {
        double v28 = v21;
      }
      else {
        double v28 = v20;
      }
      double v29 = *(double *)(a1 + 16);
      if (v29 > 0.0)
      {
        double v30 = v29 * floor(v28 / v29);
        double v31 = v29 * floor((v29 + v5) / v29);
        if (v30 >= v31) {
          double v28 = v30;
        }
        else {
          double v28 = v31;
        }
      }
      *uint64_t v125 = 0;
      v125[1] = 0;
      v125[2] = 0;
      if ((long long *)v6 != v7)
      {
        if (v8 > 0x555555555555555) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        int v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v8);
        unint64_t v35 = *(char **)(a1 + 96);
        unint64_t v34 = *(char **)(a1 + 104);
        unint64_t v36 = v32;
        if (v34 != v35)
        {
          do
          {
            long long v37 = *((_OWORD *)v34 - 3);
            long long v38 = *((_OWORD *)v34 - 2);
            *(_OWORD *)(v36 - 21) = *(_OWORD *)(v34 - 21);
            *((_OWORD *)v36 - 3) = v37;
            *((_OWORD *)v36 - 2) = v38;
            v36 -= 48;
            v34 -= 48;
          }
          while (v34 != v35);
          unint64_t v34 = (char *)*v125;
        }
        *(void *)(a1 + 96) = v36;
        *(void *)(a1 + 104) = v32;
        *(void *)(a1 + 112) = &v32[48 * v33];
        if (v34) {
          operator delete(v34);
        }
      }
      HDStatisticsBucket<HDStatisticsTimeInterval>::_updateSourceOrder(a1);
      id WeakRetained = objc_loadWeakRetained(location);

      if (WeakRetained)
      {
        *(void *)&v127.var0 = a1;
        unint64_t v40 = 126 - 2 * __clz(v8);
        if ((long long *)v6 == v7) {
          uint64_t v41 = 0;
        }
        else {
          uint64_t v41 = v40;
        }
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder*,false>(v6, v7, (uint64_t)&v127, v41, 1);
      }
      if (*(unsigned char *)(a1 + 25)) {
        id v118 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      }
      else {
        id v118 = 0;
      }
      long long v117 = (void *)v6;
      if ((long long *)v6 == v7)
      {
LABEL_106:
        *(double *)(a1 + 152) = HKIntervalMask<double>::removeIntervalsBefore(v115, v28) + *(double *)(a1 + 152);
        uint64_t v96 = *(void **)(a1 + 160);
        if (v96 != v114)
        {
          do
          {
            *((double *)v96 + 9) = HKIntervalMask<double>::removeIntervalsBefore((double **)v96 + 6, v28)
                                 + *((double *)v96 + 9);
            uint64_t v97 = (void *)v96[1];
            if (v97)
            {
              do
              {
                int v98 = v97;
                uint64_t v97 = (void *)*v97;
              }
              while (v97);
            }
            else
            {
              do
              {
                int v98 = (void *)v96[2];
                BOOL v99 = *v98 == (void)v96;
                uint64_t v96 = v98;
              }
              while (!v99);
            }
            uint64_t v96 = v98;
          }
          while (v98 != v114);
        }
        *(double *)(a1 + 56) = v28;

        if (v117) {
          operator delete(v117);
        }
        goto LABEL_125;
      }
      int64_t v120 = 0;
      char v44 = 0;
      unint64_t v45 = v6;
      while (2)
      {
        long long v46 = *(_OWORD *)(v45 + 16);
        *(_OWORD *)&v127.var0 = *(_OWORD *)v45;
        *(_OWORD *)&v127.var2 = v46;
        *(void *)&v127.BOOL var4 = *(void *)(v45 + 32);
        uint64_t v47 = v46;
        double v48 = v28 - v127.var1;
        double v49 = *(double *)&v46 - v127.var1;
        if (v49 - (v28 - v127.var1) < 0.01)
        {
          int64_t v50 = 0;
          BOOL var4 = 0;
          BOOL var5 = 0;
          double v53 = 0.0;
          uint64_t v47 = 0;
          double v54 = 0.0;
          if (!v127.var4) {
            goto LABEL_59;
          }
LABEL_54:
          BOOL v123 = var5;
          int64_t v124 = v50;
          HDRawQuantitySample::applyMask((uint64_t)&v127, v121);
          int v56 = *(unsigned __int8 *)(v45 + 42);
          int v57 = *(unsigned __int8 *)(v45 + 41);
          char v122 = *(unsigned char *)(v45 + 40);
          if (!v127.var4) {
            goto LABEL_87;
          }
          if (v44)
          {
            unint64_t var3 = v127.var3;
            if (v120 == v127.var3 || *(unsigned char *)(a1 + 24))
            {
              HDStatisticsTimeInterval::addSample(v119, &v127, v56 == 0);
              int v56 = 1;
            }
          }
          else
          {
            HDStatisticsTimeInterval::addSample(v119, &v127, v56 == 0);
            int v56 = 1;
            unint64_t var3 = v127.var3;
            int64_t v120 = v127.var3;
          }
          if (!*(unsigned char *)(a1 + 25)) {
            goto LABEL_86;
          }
          uint64_t v69 = HDStatisticsBucket<HDStatisticsTimeInterval>::_bundleIdentifierForSourceID(a1, var3);
          if (!v69) {
            goto LABEL_85;
          }
          long long v70 = [v118 objectForKeyedSubscript:v69];
          long long v71 = v70;
          if (v70)
          {
            if ([v70 longLongValue] != var3 && !*(unsigned char *)(a1 + 24))
            {
LABEL_84:

LABEL_85:
LABEL_86:
              char v44 = 1;
LABEL_87:
              if (var4)
              {
                BOOL v84 = v56 != 0;
                uint64_t v86 = *(char **)(a1 + 104);
                unint64_t v85 = *(void *)(a1 + 112);
                if ((unint64_t)v86 < v85)
                {
                  *(double *)uint64_t v86 = v54;
                  *((double *)v86 + 1) = v53;
                  *((void *)v86 + 2) = v47;
                  *((void *)v86 + 3) = v124;
                  v86[32] = var4;
                  v86[33] = v123;
                  v86[40] = v122;
                  v86[41] = v57;
                  long long v63 = v86 + 48;
                  v86[42] = v84;
                  goto LABEL_104;
                }
                int v80 = (char *)*v125;
                unint64_t v87 = 0xAAAAAAAAAAAAAAABLL * ((v86 - (unsigned char *)*v125) >> 4);
                unint64_t v88 = v87 + 1;
                if (v87 + 1 > 0x555555555555555) {
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v89 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v85 - (void)v80) >> 4);
                if (2 * v89 > v88) {
                  unint64_t v88 = 2 * v89;
                }
                if (v89 >= 0x2AAAAAAAAAAAAAALL) {
                  unint64_t v90 = 0x555555555555555;
                }
                else {
                  unint64_t v90 = v88;
                }
                if (v90)
                {
                  unint64_t v90 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v90);
                  int v80 = *(char **)(a1 + 96);
                  uint64_t v86 = *(char **)(a1 + 104);
                }
                else
                {
                  uint64_t v91 = 0;
                }
                unint64_t v92 = v90 + 48 * v87;
                *(double *)unint64_t v92 = v54;
                *(double *)(v92 + 8) = v53;
                *(void *)(v92 + 16) = v47;
                *(void *)(v92 + 24) = v124;
                *(unsigned char *)(v92 + 32) = var4;
                *(unsigned char *)(v92 + 33) = v123;
                *(unsigned char *)(v92 + 40) = v122;
                *(unsigned char *)(v92 + 41) = v57;
                *(unsigned char *)(v92 + 42) = v84;
                unint64_t v93 = v92;
                if (v86 != v80)
                {
                  do
                  {
                    long long v94 = *((_OWORD *)v86 - 3);
                    long long v95 = *((_OWORD *)v86 - 2);
                    *(_OWORD *)(v93 - 21) = *(_OWORD *)(v86 - 21);
                    *(_OWORD *)(v93 - 48) = v94;
                    *(_OWORD *)(v93 - 32) = v95;
                    v93 -= 48;
                    v86 -= 48;
                  }
                  while (v86 != v80);
                  int v80 = (char *)*v125;
                }
                long long v63 = (_OWORD *)(v92 + 48);
                *(void *)(a1 + 96) = v93;
                *(void *)(a1 + 104) = v92 + 48;
                *(void *)(a1 + 112) = v90 + 48 * v91;
                if (v80) {
LABEL_103:
                }
                  operator delete(v80);
                goto LABEL_104;
              }
              goto LABEL_105;
            }
          }
          else
          {
            unint64_t v81 = [NSNumber numberWithLongLong:var3];
            [v118 setObject:v81 forKeyedSubscript:v69];
          }
          unint64_t v82 = HDStatisticsBucket<HDStatisticsTimeInterval>::_canonicalSourceIDForSourceID(a1, var3);
          id v83 = (uint64_t *)HDStatisticsBucket<HDStatisticsTimeInterval>::_statisticsForSource(a1, v82);
          HDStatisticsTimeInterval::addSample(v83, &v127, v57 == 0);
          LOBYTE(v57) = 1;
          goto LABEL_84;
        }
        if (v48 < 0.01)
        {
          v127.BOOL var4 = 0;
          goto LABEL_59;
        }
        double v55 = v48 / v49 * v127.var0;
        int64_t v50 = v127.var3;
        BOOL var5 = v127.var5;
        double v54 = v127.var0 - v55;
        v127.var0 = v55;
        v127.var2 = v28;
        double v53 = v28;
        BOOL var4 = v127.var4;
        if (v127.var4) {
          goto LABEL_54;
        }
LABEL_59:
        uint8x8_t v59 = *(_OWORD **)(a1 + 104);
        unint64_t v60 = *(void *)(a1 + 112);
        if ((unint64_t)v59 < v60)
        {
          long long v61 = *(_OWORD *)v45;
          long long v62 = *(_OWORD *)(v45 + 32);
          v59[1] = *(_OWORD *)(v45 + 16);
          v59[2] = v62;
          _OWORD *v59 = v61;
          long long v63 = v59 + 3;
          goto LABEL_104;
        }
        unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * (((char *)v59 - (unsigned char *)*v125) >> 4);
        unint64_t v65 = v64 + 1;
        if (v64 + 1 > 0x555555555555555) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - (void)*v125) >> 4);
        if (2 * v66 > v65) {
          unint64_t v65 = 2 * v66;
        }
        if (v66 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v67 = 0x555555555555555;
        }
        else {
          unint64_t v67 = v65;
        }
        if (v67) {
          unint64_t v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v67);
        }
        else {
          uint64_t v68 = 0;
        }
        long long v72 = (_OWORD *)(v67 + 48 * v64);
        long long v73 = *(_OWORD *)v45;
        long long v74 = *(_OWORD *)(v45 + 32);
        v72[1] = *(_OWORD *)(v45 + 16);
        v72[2] = v74;
        _OWORD *v72 = v73;
        double v76 = *(char **)(a1 + 96);
        double v75 = *(char **)(a1 + 104);
        double v77 = v72;
        if (v75 != v76)
        {
          do
          {
            long long v78 = *((_OWORD *)v75 - 3);
            long long v79 = *((_OWORD *)v75 - 2);
            *(_OWORD *)((char *)v77 - 21) = *(_OWORD *)(v75 - 21);
            *(v77 - 3) = v78;
            *(v77 - 2) = v79;
            v77 -= 3;
            v75 -= 48;
          }
          while (v75 != v76);
          double v75 = (char *)*v125;
        }
        long long v63 = v72 + 3;
        *(void *)(a1 + 96) = v77;
        *(void *)(a1 + 104) = v72 + 3;
        *(void *)(a1 + 112) = v67 + 48 * v68;
        if (v75)
        {
          int v80 = v75;
          goto LABEL_103;
        }
LABEL_104:
        *(void *)(a1 + 104) = v63;
LABEL_105:
        v45 += 48;
        if ((long long *)v45 == v7) {
          goto LABEL_106;
        }
        continue;
      }
    }
    double v10 = *(double *)v6;
    double v9 = *(double *)(v6 + 8);
    double v11 = *(double *)(v6 + 16);
    int64_t v12 = *(void *)(v6 + 24);
    char v13 = *(unsigned char *)(v6 + 32);
    char v14 = *(unsigned char *)(v6 + 33);
    double v15 = a2 - v9;
    if (a2 - v9 >= 0.01)
    {
      if (v11 - v9 - v15 < 0.01)
      {
        uint64_t v42 = 0;
        char v43 = 0;
        double v18 = 0.0;
        double v17 = *(double *)(v6 + 16);
        char v16 = *(unsigned char *)(v6 + 32);
        double v19 = 0.0;
        double v11 = 0.0;
        char v13 = 0;
LABEL_117:
        int v101 = *(unsigned __int8 *)(v6 + 42);
        int v102 = *(unsigned __int8 *)(v6 + 41);
        int v103 = *(unsigned __int8 *)(v6 + 40);
        v127.var0 = v10;
        v127.var1 = v9;
        v127.var2 = v17;
        v127.unint64_t var3 = v12;
        v127.BOOL var4 = v16;
        v127.BOOL var5 = v14;
        *(_DWORD *)(&v127.var5 + 1) = *(_DWORD *)(v6 + 34);
        *(_WORD *)(&v127.var5 + 5) = *(_WORD *)(v6 + 38);
        *(double *)&long long v128 = v18;
        *((double *)&v128 + 1) = v19;
        *(double *)&long long v129 = v11;
        *((void *)&v129 + 1) = v42;
        LOBYTE(v130) = v13;
        HIBYTE(v130) = v43;
        HDRawQuantitySample::applyMask((uint64_t)&v127, v121);
        BOOL v104 = v103 != 0;
        BOOL v105 = v102 != 0;
        BOOL v106 = v101 != 0;
        if (v127.var4)
        {
          HDStatisticsTimeInterval::addSample(v119, &v127, v101 == 0);
          if (*(unsigned char *)(a1 + 25))
          {
            unint64_t v107 = HDStatisticsBucket<HDStatisticsTimeInterval>::_canonicalSourceIDForSourceID(a1, v127.var3);
            uint64_t v108 = (uint64_t *)HDStatisticsBucket<HDStatisticsTimeInterval>::_statisticsForSource(a1, v107);
            HDStatisticsTimeInterval::addSample(v108, &v127, v102 == 0);
          }
          BOOL v104 = 1;
          BOOL v105 = 1;
          BOOL v106 = 1;
        }
        if ((_BYTE)v130)
        {
          LOWORD(v126) = v130;
          long long v109 = v129;
          long long v110 = (char *)*v125;
          *(_OWORD *)long long v110 = v128;
          *((_OWORD *)v110 + 1) = v109;
          *((void *)v110 + 4) = v126;
          v110[40] = v104;
          v110[41] = v105;
          v110[42] = v106;
        }
        else
        {
          *(void *)(a1 + 104) = *(void *)(a1 + 96);
        }
        goto LABEL_124;
      }
      double v100 = v10 * (v15 / (v11 - v9));
      double v17 = a2;
      char v16 = *(unsigned char *)(v6 + 32);
      double v18 = v10 - v100;
      double v10 = v100;
      double v19 = a2;
    }
    else
    {
      char v16 = 0;
      double v17 = *(double *)(v6 + 16);
      double v18 = *(double *)v6;
      double v19 = *(double *)(v6 + 8);
    }
    uint64_t v42 = *(void *)(v6 + 24);
    char v43 = *(unsigned char *)(v6 + 33);
    goto LABEL_117;
  }
}

void sub_1BD0E1638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **HDStatisticsBucket<HDStatisticsTimeInterval>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = a2;
  double v5 = *(void **)(a1 + 168);
  unint64_t v3 = (uint64_t **)(a1 + 168);
  double v4 = v5;
  if (!v5) {
    goto LABEL_11;
  }
  unint64_t v6 = v3;
  do
  {
    uint64_t v7 = v4[4];
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      double v9 = v4;
    }
    else {
      double v9 = v4 + 1;
    }
    if (!v8) {
      unint64_t v6 = (uint64_t **)v4;
    }
    double v4 = (void *)*v9;
  }
  while (*v9);
  if (v6 == v3 || (uint64_t)v6[4] > a2)
  {
LABEL_11:
    double v10 = v3 - 1;
    std::__tree<std::__value_type<long long,HDStatisticsTimeInterval>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTimeInterval>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTimeInterval>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v3 - 1, a2, &v12);
    unint64_t v6 = std::__tree<std::__value_type<long long,HDStatisticsTimeInterval>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTimeInterval>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTimeInterval>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v10, a2, &v12);
  }
  return v6 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsTimeInterval>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    double v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((void *)(a1 + 248), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsTimeInterval>::_bundleIdentifierForSourceID(a1, a2);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      id v10 = v6;
      uint64_t v7 = (void *)(a1 + 288);
      BOOL v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        double v11 = &v10;
        *((void *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        id v6 = v10;
      }
    }
  }
  return a2;
}

void sub_1BD0E1818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsTimeInterval>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  double v4 = (id *)(a1 + 88);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    id v6 = (void *)(a1 + 328);
    uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
    if (v7)
    {
      id v8 = (id)v7[3];
    }
    else
    {
      id v9 = objc_loadWeakRetained(v4);
      id v8 = [v9 bundleIdentifierForSourceID:a2];

      if (v8)
      {
        id v10 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
        objc_storeStrong(v10 + 3, v8);
      }
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1BD0E18FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsTimeInterval>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTimeInterval>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTimeInterval>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, void *a3)
{
  id v6 = a1 + 1;
  double v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        uint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        double v5 = *v7;
        id v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      double v5 = v7[1];
      if (!v5)
      {
        id v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    id v9 = (char *)operator new(0x50uLL);
    *((void *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *((void *)v9 + 9) = 0;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v12 = a2 - 3;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 4);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v103 = *((void *)a2 - 3);
                uint64_t v104 = *(void *)(v13 + 24);
                if (v103 == v104) {
                  return;
                }
                BOOL v105 = *(char **)(*(void *)a3 + 224);
                BOOL v106 = *(char **)(*(void *)a3 + 232);
                unint64_t v107 = v105;
                uint64_t v108 = v105;
                if (v105 == v106) {
                  goto LABEL_171;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder*>((long long *)v13, (long long *)(v13 + 48), a2 - 3, a3);
                return;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, (uint64_t)(a2 - 3), a3);
                return;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, v13 + 144, (uint64_t)(a2 - 3), a3);
                return;
              default:
                JUMPOUT(0);
            }
            do
            {
              if (*(void *)v108 == v103) {
                goto LABEL_168;
              }
              v108 += 8;
            }
            while (v108 != v106);
            uint64_t v108 = *(char **)(*(void *)a3 + 232);
LABEL_168:
            while (*(void *)v107 != v104)
            {
              v107 += 8;
              if (v107 == v106)
              {
                unint64_t v107 = *(char **)(*(void *)a3 + 232);
                break;
              }
            }
LABEL_171:
            if (v108 - v105 < v107 - v105)
            {
              *(_OWORD *)v226 = *(_OWORD *)(v13 + 16);
              *(_OWORD *)&v226[16] = *(_OWORD *)(v13 + 32);
              long long v218 = *(_OWORD *)v13;
              long long v109 = *v12;
              long long v110 = *(a2 - 2);
              *(_OWORD *)(v13 + 27) = *(long long *)((char *)a2 - 21);
              *(_OWORD *)unint64_t v13 = v109;
              *(_OWORD *)(v13 + 16) = v110;
              *(long long *)((char *)a2 - 21) = *(_OWORD *)&v226[11];
              *unint64_t v12 = v218;
              *(a2 - 2) = *(_OWORD *)v226;
            }
            return;
          }
          if (v14 <= 1151)
          {
            double v111 = (long long *)(v13 + 48);
            BOOL v113 = (long long *)v13 == a2 || v111 == a2;
            if (a5)
            {
              if (!v113)
              {
                unint64_t v114 = v13;
                do
                {
                  unint64_t v115 = v114;
                  unint64_t v114 = (unint64_t)v111;
                  uint64_t v116 = *(void *)(v115 + 72);
                  uint64_t v117 = *(void *)(v115 + 24);
                  if (v116 != v117)
                  {
                    id v118 = *(char **)(*(void *)a3 + 224);
                    long long v119 = *(char **)(*(void *)a3 + 232);
                    int64_t v120 = v118;
                    long long v121 = v118;
                    if (v118 != v119)
                    {
                      do
                      {
                        if (*(void *)v121 == v116) {
                          goto LABEL_196;
                        }
                        v121 += 8;
                      }
                      while (v121 != v119);
                      long long v121 = *(char **)(*(void *)a3 + 232);
LABEL_196:
                      while (*(void *)v120 != v117)
                      {
                        v120 += 8;
                        if (v120 == v119)
                        {
                          int64_t v120 = *(char **)(*(void *)a3 + 232);
                          break;
                        }
                      }
                    }
                    if (v121 - v118 < v120 - v118)
                    {
                      uint64_t v227 = *(void *)(v114 + 16);
                      long long v219 = *(_OWORD *)v114;
                      long long v236 = *(_OWORD *)(v115 + 80);
                      unint64_t v122 = v114;
                      while (1)
                      {
                        long long v123 = *(_OWORD *)(v115 + 16);
                        *(_OWORD *)unint64_t v122 = *(_OWORD *)v115;
                        *(_OWORD *)(v122 + 16) = v123;
                        *(_OWORD *)(v122 + 27) = *(_OWORD *)(v115 + 27);
                        if (v115 == v13) {
                          break;
                        }
                        unint64_t v122 = v115;
                        uint64_t v124 = *(void *)(v115 - 24);
                        if (v116 != v124)
                        {
                          uint64_t v125 = *(char **)(*(void *)a3 + 224);
                          uint64_t v126 = *(char **)(*(void *)a3 + 232);
                          HDRawQuantitySample v127 = v125;
                          long long v128 = v125;
                          if (v125 != v126)
                          {
                            do
                            {
                              if (*(void *)v128 == v116) {
                                goto LABEL_208;
                              }
                              v128 += 8;
                            }
                            while (v128 != v126);
                            long long v128 = *(char **)(*(void *)a3 + 232);
LABEL_208:
                            while (*(void *)v127 != v124)
                            {
                              v127 += 8;
                              if (v127 == v126)
                              {
                                HDRawQuantitySample v127 = *(char **)(*(void *)a3 + 232);
                                break;
                              }
                            }
                          }
                          unint64_t v115 = v122 - 48;
                          if (v128 - v125 < v127 - v125) {
                            continue;
                          }
                        }
                        goto LABEL_212;
                      }
                      unint64_t v122 = v13;
LABEL_212:
                      *(_OWORD *)unint64_t v122 = v219;
                      *(void *)(v122 + 16) = v227;
                      *(void *)(v122 + 24) = v116;
                      *(void *)(v122 + 32) = v236;
                      *(_DWORD *)(v122 + 39) = *(_DWORD *)((char *)&v236 + 7);
                    }
                  }
                  double v111 = (long long *)(v114 + 48);
                }
                while ((long long *)(v114 + 48) != a2);
              }
            }
            else if (!v113)
            {
              do
              {
                unint64_t v201 = a1;
                a1 = (unint64_t)v111;
                uint64_t v202 = *(void *)(v201 + 72);
                uint64_t v203 = *(void *)(v201 + 24);
                if (v202 != v203)
                {
                  v204 = *(char **)(*(void *)a3 + 224);
                  v205 = *(char **)(*(void *)a3 + 232);
                  v206 = v204;
                  v207 = v204;
                  if (v204 != v205)
                  {
                    do
                    {
                      if (*(void *)v207 == v202) {
                        goto LABEL_312;
                      }
                      v207 += 8;
                    }
                    while (v207 != v205);
                    v207 = *(char **)(*(void *)a3 + 232);
LABEL_312:
                    while (*(void *)v206 != v203)
                    {
                      v206 += 8;
                      if (v206 == v205)
                      {
                        v206 = *(char **)(*(void *)a3 + 232);
                        break;
                      }
                    }
                  }
                  if (v207 - v204 < v206 - v204)
                  {
                    uint64_t v230 = *(void *)(a1 + 16);
                    long long v222 = *(_OWORD *)a1;
                    long long v239 = *(_OWORD *)(v201 + 80);
                    unint64_t v208 = a1;
                    do
                    {
                      v209 = (_OWORD *)v208;
                      unint64_t v208 = v201;
                      long long v210 = *(_OWORD *)(v201 + 16);
                      _OWORD *v209 = *(_OWORD *)v201;
                      v209[1] = v210;
                      *(_OWORD *)((char *)v209 + 27) = *(_OWORD *)(v201 + 27);
                      uint64_t v211 = *(void *)(v201 - 24);
                      if (v202 == v211) {
                        break;
                      }
                      v212 = *(char **)(*(void *)a3 + 224);
                      v213 = *(char **)(*(void *)a3 + 232);
                      v214 = v212;
                      v215 = v212;
                      if (v212 != v213)
                      {
                        do
                        {
                          if (*(void *)v215 == v202) {
                            goto LABEL_322;
                          }
                          v215 += 8;
                        }
                        while (v215 != v213);
                        v215 = *(char **)(*(void *)a3 + 232);
LABEL_322:
                        while (*(void *)v214 != v211)
                        {
                          v214 += 8;
                          if (v214 == v213)
                          {
                            v214 = *(char **)(*(void *)a3 + 232);
                            break;
                          }
                        }
                      }
                      unint64_t v201 = v208 - 48;
                    }
                    while (v215 - v212 < v214 - v212);
                    *(_OWORD *)unint64_t v208 = v222;
                    *(void *)(v208 + 16) = v230;
                    *(void *)(v208 + 24) = v202;
                    *(void *)(v208 + 32) = v239;
                    *(_DWORD *)(v208 + 39) = *(_DWORD *)((char *)&v239 + 7);
                  }
                }
                double v111 = (long long *)(a1 + 48);
              }
              while ((long long *)(a1 + 48) != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((long long *)v13 != a2)
            {
              int64_t v129 = (v15 - 2) >> 1;
              int64_t v130 = v129;
              do
              {
                int64_t v131 = v130;
                if (v129 >= v130)
                {
                  uint64_t v132 = (2 * v130) | 1;
                  unint64_t v133 = v13 + 48 * v132;
                  if (2 * v131 + 2 < (uint64_t)v15)
                  {
                    uint64_t v134 = *(void *)(v133 + 24);
                    uint64_t v135 = *(void *)(v133 + 72);
                    if (v134 != v135)
                    {
                      v137 = *(char **)(*(void *)a3 + 224);
                      v136 = *(char **)(*(void *)a3 + 232);
                      v138 = v137;
                      v139 = v137;
                      if (v137 != v136)
                      {
                        do
                        {
                          if (*(void *)v139 == v134) {
                            goto LABEL_224;
                          }
                          v139 += 8;
                        }
                        while (v139 != v136);
                        v139 = *(char **)(*(void *)a3 + 232);
LABEL_224:
                        while (*(void *)v138 != v135)
                        {
                          v138 += 8;
                          if (v138 == v136)
                          {
                            v138 = *(char **)(*(void *)a3 + 232);
                            break;
                          }
                        }
                      }
                      v133 += 48 * (v139 - v137 < v138 - v137);
                      if (v139 - v137 < v138 - v137) {
                        uint64_t v132 = 2 * v131 + 2;
                      }
                    }
                  }
                  unint64_t v140 = v13 + 48 * v131;
                  uint64_t v141 = *(void *)(v133 + 24);
                  uint64_t v142 = *(void *)(v140 + 24);
                  if (v141 == v142) {
                    goto LABEL_238;
                  }
                  v144 = *(char **)(*(void *)a3 + 224);
                  v143 = *(char **)(*(void *)a3 + 232);
                  v145 = v144;
                  v146 = v144;
                  if (v144 != v143)
                  {
                    do
                    {
                      if (*(void *)v146 == v141) {
                        goto LABEL_234;
                      }
                      v146 += 8;
                    }
                    while (v146 != v143);
                    v146 = *(char **)(*(void *)a3 + 232);
LABEL_234:
                    while (*(void *)v145 != v142)
                    {
                      v145 += 8;
                      if (v145 == v143)
                      {
                        v145 = *(char **)(*(void *)a3 + 232);
                        break;
                      }
                    }
                  }
                  if (v146 - v144 >= v145 - v144)
                  {
LABEL_238:
                    uint64_t v228 = *(void *)(v140 + 16);
                    long long v220 = *(_OWORD *)v140;
                    long long v237 = *(_OWORD *)(v140 + 32);
                    long long v147 = *(_OWORD *)v133;
                    long long v148 = *(_OWORD *)(v133 + 16);
                    *(_OWORD *)(v140 + 27) = *(_OWORD *)(v133 + 27);
                    *(_OWORD *)unint64_t v140 = v147;
                    *(_OWORD *)(v140 + 16) = v148;
                    if (v129 >= v132)
                    {
                      while (1)
                      {
                        uint64_t v150 = 2 * v132;
                        uint64_t v132 = (2 * v132) | 1;
                        unint64_t v149 = v13 + 48 * v132;
                        uint64_t v151 = v150 + 2;
                        if (v151 < (uint64_t)v15)
                        {
                          uint64_t v152 = *(void *)(v149 + 24);
                          uint64_t v153 = *(void *)(v149 + 72);
                          if (v152 != v153)
                          {
                            v154 = *(char **)(*(void *)a3 + 224);
                            v155 = *(char **)(*(void *)a3 + 232);
                            v156 = v154;
                            v157 = v154;
                            if (v154 != v155)
                            {
                              do
                              {
                                if (*(void *)v157 == v152) {
                                  goto LABEL_246;
                                }
                                v157 += 8;
                              }
                              while (v157 != v155);
                              v157 = *(char **)(*(void *)a3 + 232);
LABEL_246:
                              while (*(void *)v156 != v153)
                              {
                                v156 += 8;
                                if (v156 == v155)
                                {
                                  v156 = *(char **)(*(void *)a3 + 232);
                                  break;
                                }
                              }
                            }
                            v149 += 48 * (v157 - v154 < v156 - v154);
                            if (v157 - v154 < v156 - v154) {
                              uint64_t v132 = v151;
                            }
                          }
                        }
                        uint64_t v158 = *(void *)(v149 + 24);
                        if (v158 != v142)
                        {
                          v160 = *(char **)(*(void *)a3 + 224);
                          v159 = *(char **)(*(void *)a3 + 232);
                          v161 = v160;
                          v162 = v160;
                          if (v160 != v159)
                          {
                            do
                            {
                              if (*(void *)v162 == v158) {
                                goto LABEL_256;
                              }
                              v162 += 8;
                            }
                            while (v162 != v159);
                            v162 = *(char **)(*(void *)a3 + 232);
LABEL_256:
                            while (*(void *)v161 != v142)
                            {
                              v161 += 8;
                              if (v161 == v159)
                              {
                                v161 = *(char **)(*(void *)a3 + 232);
                                break;
                              }
                            }
                          }
                          if (v162 - v160 < v161 - v160) {
                            break;
                          }
                        }
                        long long v163 = *(_OWORD *)v149;
                        long long v164 = *(_OWORD *)(v149 + 16);
                        *(_OWORD *)(v133 + 27) = *(_OWORD *)(v149 + 27);
                        *(_OWORD *)unint64_t v133 = v163;
                        *(_OWORD *)(v133 + 16) = v164;
                        unint64_t v133 = v149;
                        if (v129 < v132) {
                          goto LABEL_261;
                        }
                      }
                    }
                    unint64_t v149 = v133;
LABEL_261:
                    *(_OWORD *)unint64_t v149 = v220;
                    *(void *)(v149 + 16) = v228;
                    *(void *)(v149 + 24) = v142;
                    *(void *)(v149 + 32) = v237;
                    *(_DWORD *)(v149 + 39) = *(_DWORD *)((char *)&v237 + 7);
                  }
                }
                int64_t v130 = v131 - 1;
              }
              while (v131);
              int64_t v165 = v14 / 0x30uLL;
              do
              {
                uint64_t v166 = 0;
                *(_OWORD *)v229 = *(_OWORD *)(v13 + 16);
                *(_OWORD *)&v229[16] = *(_OWORD *)(v13 + 32);
                long long v221 = *(_OWORD *)v13;
                uint64_t v167 = v165 - 2;
                if (v165 < 2) {
                  uint64_t v167 = v165 - 1;
                }
                uint64_t v168 = v167 >> 1;
                unint64_t v169 = v13;
                do
                {
                  v170 = (_OWORD *)v169;
                  v169 += 48 * v166 + 48;
                  uint64_t v171 = 2 * v166;
                  uint64_t v166 = (2 * v166) | 1;
                  uint64_t v172 = v171 + 2;
                  if (v171 + 2 < v165)
                  {
                    uint64_t v173 = *(void *)(v169 + 24);
                    uint64_t v174 = *(void *)(v169 + 72);
                    if (v173 != v174)
                    {
                      v176 = *(char **)(*(void *)a3 + 224);
                      v175 = *(char **)(*(void *)a3 + 232);
                      v177 = v176;
                      v178 = v176;
                      if (v176 != v175)
                      {
                        do
                        {
                          if (*(void *)v178 == v173) {
                            goto LABEL_273;
                          }
                          v178 += 8;
                        }
                        while (v178 != v175);
                        v178 = *(char **)(*(void *)a3 + 232);
LABEL_273:
                        while (*(void *)v177 != v174)
                        {
                          v177 += 8;
                          if (v177 == v175)
                          {
                            v177 = *(char **)(*(void *)a3 + 232);
                            break;
                          }
                        }
                      }
                      v169 += 48 * (v178 - v176 < v177 - v176);
                      if (v178 - v176 < v177 - v176) {
                        uint64_t v166 = v172;
                      }
                    }
                  }
                  long long v179 = *(_OWORD *)v169;
                  long long v180 = *(_OWORD *)(v169 + 16);
                  *(_OWORD *)((char *)v170 + 27) = *(_OWORD *)(v169 + 27);
                  _OWORD *v170 = v179;
                  v170[1] = v180;
                }
                while (v166 <= v168);
                a2 -= 3;
                if ((long long *)v169 == a2)
                {
                  *(_OWORD *)(v169 + 27) = *(_OWORD *)&v229[11];
                  *(_OWORD *)unint64_t v169 = v221;
                  *(_OWORD *)(v169 + 16) = *(_OWORD *)v229;
                }
                else
                {
                  long long v181 = *a2;
                  long long v182 = a2[1];
                  *(_OWORD *)(v169 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v169 = v181;
                  *(_OWORD *)(v169 + 16) = v182;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v229[11];
                  *a2 = v221;
                  a2[1] = *(_OWORD *)v229;
                  uint64_t v183 = v169 - v13 + 48;
                  if (v183 >= 49)
                  {
                    unint64_t v184 = (v183 / 0x30uLL - 2) >> 1;
                    unint64_t v185 = v13 + 48 * v184;
                    uint64_t v186 = *(void *)(v185 + 24);
                    uint64_t v187 = *(void *)(v169 + 24);
                    if (v186 != v187)
                    {
                      v189 = *(char **)(*(void *)a3 + 224);
                      v188 = *(char **)(*(void *)a3 + 232);
                      v190 = v189;
                      v191 = v189;
                      if (v189 != v188)
                      {
                        do
                        {
                          if (*(void *)v191 == v186) {
                            goto LABEL_286;
                          }
                          v191 += 8;
                        }
                        while (v191 != v188);
                        v191 = *(char **)(*(void *)a3 + 232);
LABEL_286:
                        while (*(void *)v190 != v187)
                        {
                          v190 += 8;
                          if (v190 == v188)
                          {
                            v190 = *(char **)(*(void *)a3 + 232);
                            break;
                          }
                        }
                      }
                      if (v191 - v189 < v190 - v189)
                      {
                        uint64_t v242 = *(void *)(v169 + 16);
                        long long v238 = *(_OWORD *)v169;
                        long long v233 = *(_OWORD *)(v169 + 32);
                        do
                        {
                          v192 = (_OWORD *)v169;
                          unint64_t v169 = v185;
                          long long v193 = *(_OWORD *)v185;
                          long long v194 = *(_OWORD *)(v185 + 16);
                          *(_OWORD *)((char *)v192 + 27) = *(_OWORD *)(v185 + 27);
                          _OWORD *v192 = v193;
                          v192[1] = v194;
                          if (!v184) {
                            break;
                          }
                          unint64_t v184 = (v184 - 1) >> 1;
                          unint64_t v185 = v13 + 48 * v184;
                          uint64_t v195 = *(void *)(v185 + 24);
                          if (v195 == v187) {
                            break;
                          }
                          v197 = *(char **)(*(void *)a3 + 224);
                          v196 = *(char **)(*(void *)a3 + 232);
                          v198 = v197;
                          v199 = v197;
                          if (v197 != v196)
                          {
                            do
                            {
                              if (*(void *)v199 == v195) {
                                goto LABEL_297;
                              }
                              v199 += 8;
                            }
                            while (v199 != v196);
                            v199 = *(char **)(*(void *)a3 + 232);
LABEL_297:
                            while (*(void *)v198 != v187)
                            {
                              v198 += 8;
                              if (v198 == v196)
                              {
                                v198 = *(char **)(*(void *)a3 + 232);
                                break;
                              }
                            }
                          }
                        }
                        while (v199 - v197 < v198 - v197);
                        *(_OWORD *)unint64_t v169 = v238;
                        *(void *)(v169 + 16) = v242;
                        *(void *)(v169 + 24) = v187;
                        *(void *)(v169 + 32) = v233;
                        *(_DWORD *)(v169 + 39) = *(_DWORD *)((char *)&v233 + 7);
                      }
                    }
                  }
                }
              }
              while (v165-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          double v17 = (long long *)(v13 + 48 * (v15 >> 1));
          if ((unint64_t)v14 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v15 >> 1)), a2 - 3, a3);
            uint64_t v18 = 3 * v16;
            double v19 = (long long *)(a1 + 48 * v16 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder*>((long long *)(a1 + 48), v19, a2 - 6, a3);
            double v20 = (long long *)(a1 + 48 + 16 * v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder*>((long long *)(a1 + 96), v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder*>(v19, v17, v20, a3);
            *(_OWORD *)v223 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v223[16] = *(_OWORD *)(a1 + 32);
            long long v216 = *(_OWORD *)a1;
            long long v21 = *(long long *)((char *)v17 + 27);
            long long v22 = v17[1];
            *(_OWORD *)a1 = *v17;
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(a1 + 27) = v21;
            *(long long *)((char *)v17 + 27) = *(_OWORD *)&v223[11];
            *double v17 = v216;
            v17[1] = *(_OWORD *)v223;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder*>((long long *)(a1 + 48 * (v15 >> 1)), (long long *)a1, a2 - 3, a3);
          }
          --a4;
          if (a5)
          {
            uint64_t v23 = *(void *)(a1 + 24);
            uint64_t v24 = *(void *)a3;
            break;
          }
          uint64_t v25 = *(void *)(a1 - 24);
          uint64_t v23 = *(void *)(a1 + 24);
          if (v25 != v23)
          {
            uint64_t v24 = *(void *)a3;
            double v26 = *(char **)(*(void *)a3 + 224);
            double v27 = *(char **)(*(void *)a3 + 232);
            double v28 = v26;
            double v29 = v26;
            if (v26 != v27)
            {
              do
              {
                if (*(void *)v29 == v25) {
                  goto LABEL_16;
                }
                v29 += 8;
              }
              while (v29 != v27);
              double v29 = *(char **)(*(void *)a3 + 232);
LABEL_16:
              while (*(void *)v28 != v23)
              {
                v28 += 8;
                if (v28 == v27)
                {
                  double v28 = *(char **)(*(void *)a3 + 232);
                  break;
                }
              }
            }
            if (v29 - v26 < v28 - v26) {
              break;
            }
          }
          uint64_t v241 = *(void *)(a1 + 16);
          long long v232 = *(_OWORD *)(a1 + 32);
          long long v235 = *(_OWORD *)a1;
          uint64_t v67 = *((void *)a2 - 3);
          if (v23 == v67) {
            goto LABEL_107;
          }
          uint64_t v68 = *(char **)(*(void *)a3 + 224);
          uint64_t v69 = *(char **)(*(void *)a3 + 232);
          if (v68 == v69)
          {
            long long v71 = *(char **)(*(void *)a3 + 224);
            long long v70 = v71;
          }
          else
          {
            long long v70 = *(char **)(*(void *)a3 + 224);
            while (*(void *)v70 != v23)
            {
              v70 += 8;
              if (v70 == v69)
              {
                long long v70 = *(char **)(*(void *)a3 + 232);
                break;
              }
            }
            long long v71 = *(char **)(*(void *)a3 + 224);
            while (*(void *)v71 != v67)
            {
              v71 += 8;
              if (v71 == v69)
              {
                long long v71 = *(char **)(*(void *)a3 + 232);
                break;
              }
            }
          }
          if (v70 - v68 >= v71 - v68)
          {
LABEL_107:
            unint64_t v13 = a1 + 48;
            if (a1 + 48 < (unint64_t)a2)
            {
              uint64_t v75 = *(void *)a3;
              unint64_t v76 = a1;
              do
              {
                uint64_t v77 = *(void *)(v76 + 72);
                unint64_t v76 = v13;
                if (v23 != v77)
                {
                  long long v78 = *(char **)(v75 + 224);
                  long long v79 = *(char **)(v75 + 232);
                  int v80 = v78;
                  unint64_t v81 = v78;
                  if (v78 != v79)
                  {
                    do
                    {
                      if (*(void *)v81 == v23) {
                        goto LABEL_114;
                      }
                      v81 += 8;
                    }
                    while (v81 != v79);
                    unint64_t v81 = *(char **)(v75 + 232);
LABEL_114:
                    while (*(void *)v80 != v77)
                    {
                      v80 += 8;
                      if (v80 == v79)
                      {
                        int v80 = *(char **)(v75 + 232);
                        break;
                      }
                    }
                  }
                  if (v81 - v78 < v80 - v78) {
                    break;
                  }
                }
                v13 += 48;
              }
              while (v76 + 48 < (unint64_t)a2);
            }
          }
          else
          {
            unint64_t v13 = a1;
            do
            {
              do
              {
                uint64_t v72 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v72);
              if (v68 == v69)
              {
                long long v74 = *(char **)(*(void *)a3 + 224);
                long long v73 = v74;
              }
              else
              {
                long long v73 = *(char **)(*(void *)a3 + 224);
                while (*(void *)v73 != v23)
                {
                  v73 += 8;
                  if (v73 == v69)
                  {
                    long long v73 = *(char **)(*(void *)a3 + 232);
                    break;
                  }
                }
                long long v74 = *(char **)(*(void *)a3 + 224);
                while (*(void *)v74 != v72)
                {
                  v74 += 8;
                  if (v74 == v69)
                  {
                    long long v74 = *(char **)(*(void *)a3 + 232);
                    break;
                  }
                }
              }
            }
            while (v73 - v68 >= v74 - v68);
          }
          unint64_t v82 = a2;
          if (v13 < (unint64_t)a2)
          {
            uint64_t v83 = *(void *)a3;
            unint64_t v82 = a2;
            do
            {
              uint64_t v84 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v84) {
                break;
              }
              unint64_t v85 = *(char **)(v83 + 224);
              uint64_t v86 = *(char **)(v83 + 232);
              unint64_t v87 = v85;
              unint64_t v88 = v85;
              if (v85 != v86)
              {
                do
                {
                  if (*(void *)v88 == v23) {
                    goto LABEL_126;
                  }
                  v88 += 8;
                }
                while (v88 != v86);
                unint64_t v88 = *(char **)(v83 + 232);
LABEL_126:
                while (*(void *)v87 != v84)
                {
                  v87 += 8;
                  if (v87 == v86)
                  {
                    unint64_t v87 = *(char **)(v83 + 232);
                    break;
                  }
                }
              }
            }
            while (v88 - v85 < v87 - v85);
          }
          while (v13 < (unint64_t)v82)
          {
            *(_OWORD *)v225 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v225[16] = *(_OWORD *)(v13 + 32);
            long long v217 = *(_OWORD *)v13;
            long long v89 = *v82;
            long long v90 = v82[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v82 + 27);
            *(_OWORD *)unint64_t v13 = v89;
            *(_OWORD *)(v13 + 16) = v90;
            *(long long *)((char *)v82 + 27) = *(_OWORD *)&v225[11];
            long long *v82 = v217;
            v82[1] = *(_OWORD *)v225;
            uint64_t v91 = *(void *)a3;
            do
            {
              do
              {
                uint64_t v92 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v92);
              unint64_t v93 = *(char **)(v91 + 224);
              long long v94 = *(char **)(v91 + 232);
              if (v93 == v94)
              {
                uint64_t v96 = *(char **)(v91 + 224);
                long long v95 = v96;
              }
              else
              {
                long long v95 = *(char **)(v91 + 224);
                while (*(void *)v95 != v23)
                {
                  v95 += 8;
                  if (v95 == v94)
                  {
                    long long v95 = *(char **)(v91 + 232);
                    break;
                  }
                }
                uint64_t v96 = *(char **)(v91 + 224);
                while (*(void *)v96 != v92)
                {
                  v96 += 8;
                  if (v96 == v94)
                  {
                    uint64_t v96 = *(char **)(v91 + 232);
                    break;
                  }
                }
              }
            }
            while (v95 - v93 >= v96 - v93);
            do
            {
              uint64_t v97 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v97) {
                break;
              }
              if (v93 == v94)
              {
                BOOL v99 = v93;
                int v98 = v93;
              }
              else
              {
                int v98 = v93;
                while (*(void *)v98 != v23)
                {
                  v98 += 8;
                  if (v98 == v94)
                  {
                    int v98 = v94;
                    break;
                  }
                }
                BOOL v99 = v93;
                while (*(void *)v99 != v97)
                {
                  v99 += 8;
                  if (v99 == v94)
                  {
                    BOOL v99 = v94;
                    break;
                  }
                }
              }
            }
            while (v98 - v93 < v99 - v93);
          }
          double v100 = (long long *)(v13 - 48);
          BOOL v5 = v13 - 48 >= a1;
          BOOL v6 = v13 - 48 == a1;
          if (v13 - 48 != a1)
          {
            long long v101 = *v100;
            long long v102 = *(_OWORD *)(v13 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
            *(_OWORD *)a1 = v101;
            *(_OWORD *)(a1 + 16) = v102;
          }
          a5 = 0;
          *double v100 = v235;
          *(void *)(v13 - 32) = v241;
          *(void *)(v13 - 24) = v23;
          *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v232 + 7);
          *(void *)(v13 - 16) = v232;
        }
        uint64_t v240 = *(void *)(a1 + 16);
        long long v231 = *(_OWORD *)(a1 + 32);
        long long v234 = *(_OWORD *)a1;
        unint64_t v30 = a1;
        do
        {
          unint64_t v31 = v30;
          v30 += 48;
          uint64_t v32 = *(void *)(v31 + 72);
          if (v32 == v23) {
            break;
          }
          uint64_t v33 = *(char **)(v24 + 224);
          unint64_t v34 = *(char **)(v24 + 232);
          unint64_t v35 = v33;
          unint64_t v36 = v33;
          if (v33 != v34)
          {
            do
            {
              if (*(void *)v36 == v32) {
                goto LABEL_26;
              }
              v36 += 8;
            }
            while (v36 != v34);
            unint64_t v36 = *(char **)(v24 + 232);
LABEL_26:
            while (*(void *)v35 != v23)
            {
              v35 += 8;
              if (v35 == v34)
              {
                unint64_t v35 = *(char **)(v24 + 232);
                break;
              }
            }
          }
        }
        while (v36 - v33 < v35 - v33);
        long long v37 = a2;
        if (v31 == a1)
        {
          long long v37 = a2;
          if (v30 < (unint64_t)a2)
          {
            long long v37 = a2;
            do
            {
              uint64_t v43 = *((void *)v37 - 3);
              v37 -= 3;
              if (v43 != v23)
              {
                char v44 = *(char **)(v24 + 224);
                unint64_t v45 = *(char **)(v24 + 232);
                long long v46 = v44;
                uint64_t v47 = v44;
                if (v44 != v45)
                {
                  do
                  {
                    if (*(void *)v47 == v43) {
                      goto LABEL_48;
                    }
                    v47 += 8;
                  }
                  while (v47 != v45);
                  uint64_t v47 = *(char **)(v24 + 232);
LABEL_48:
                  while (*(void *)v46 != v23)
                  {
                    v46 += 8;
                    if (v46 == v45)
                    {
                      long long v46 = *(char **)(v24 + 232);
                      break;
                    }
                  }
                }
                if (v47 - v44 < v46 - v44) {
                  break;
                }
              }
            }
            while (v30 < (unint64_t)v37);
          }
        }
        else
        {
          do
          {
            do
            {
              uint64_t v38 = *((void *)v37 - 3);
              v37 -= 3;
            }
            while (v38 == v23);
            double v39 = *(char **)(v24 + 224);
            unint64_t v40 = *(char **)(v24 + 232);
            uint64_t v41 = v39;
            uint64_t v42 = v39;
            if (v39 != v40)
            {
              do
              {
                if (*(void *)v42 == v38) {
                  goto LABEL_36;
                }
                v42 += 8;
              }
              while (v42 != v40);
              uint64_t v42 = *(char **)(v24 + 232);
LABEL_36:
              while (*(void *)v41 != v23)
              {
                v41 += 8;
                if (v41 == v40)
                {
                  uint64_t v41 = *(char **)(v24 + 232);
                  break;
                }
              }
            }
          }
          while (v42 - v39 >= v41 - v39);
        }
        unint64_t v13 = v30;
        if (v30 < (unint64_t)v37)
        {
          double v48 = v37;
          do
          {
            *(_OWORD *)v224 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v224[16] = *(_OWORD *)(v13 + 32);
            long long v49 = *(_OWORD *)v13;
            long long v51 = *v48;
            long long v50 = v48[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v48 + 27);
            *(_OWORD *)unint64_t v13 = v51;
            *(_OWORD *)(v13 + 16) = v50;
            *(long long *)((char *)v48 + 27) = *(_OWORD *)&v224[11];
            *double v48 = v49;
            v48[1] = *(_OWORD *)v224;
            uint64_t v52 = *(void *)a3;
            do
            {
              uint64_t v53 = *(void *)(v13 + 72);
              v13 += 48;
              if (v53 == v23) {
                break;
              }
              double v54 = *(char **)(v52 + 224);
              double v55 = *(char **)(v52 + 232);
              int v56 = v54;
              int v57 = v54;
              if (v54 != v55)
              {
                do
                {
                  if (*(void *)v57 == v53) {
                    goto LABEL_61;
                  }
                  v57 += 8;
                }
                while (v57 != v55);
                int v57 = *(char **)(v52 + 232);
LABEL_61:
                while (*(void *)v56 != v23)
                {
                  v56 += 8;
                  if (v56 == v55)
                  {
                    int v56 = *(char **)(v52 + 232);
                    break;
                  }
                }
              }
            }
            while (v57 - v54 < v56 - v54);
            do
            {
              do
              {
                uint64_t v58 = *((void *)v48 - 3);
                v48 -= 3;
              }
              while (v58 == v23);
              uint8x8_t v59 = *(char **)(v52 + 224);
              unint64_t v60 = *(char **)(v52 + 232);
              long long v61 = v59;
              long long v62 = v59;
              if (v59 != v60)
              {
                do
                {
                  if (*(void *)v62 == v58) {
                    goto LABEL_70;
                  }
                  v62 += 8;
                }
                while (v62 != v60);
                long long v62 = *(char **)(v52 + 232);
LABEL_70:
                while (*(void *)v61 != v23)
                {
                  v61 += 8;
                  if (v61 == v60)
                  {
                    long long v61 = *(char **)(v52 + 232);
                    break;
                  }
                }
              }
            }
            while (v62 - v59 >= v61 - v59);
          }
          while (v13 < (unint64_t)v48);
        }
        long long v63 = (long long *)(v13 - 48);
        if (v13 - 48 != a1)
        {
          long long v64 = *v63;
          long long v65 = *(_OWORD *)(v13 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
          *(_OWORD *)a1 = v64;
          *(_OWORD *)(a1 + 16) = v65;
        }
        *long long v63 = v234;
        *(void *)(v13 - 32) = v240;
        *(void *)(v13 - 24) = v23;
        *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v231 + 7);
        *(void *)(v13 - 16) = v231;
        if (v30 >= (unint64_t)v37) {
          break;
        }
LABEL_80:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder*,false>(a1, v13 - 48, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder*>(a1, v13 - 48, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder*>(v13, (uint64_t)a2, a3))
      {
        break;
      }
      if (!v66) {
        goto LABEL_80;
      }
    }
    a2 = (long long *)(v13 - 48);
    if (!v66) {
      continue;
    }
    break;
  }
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder*>(long long *a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = *((void *)a2 + 3);
  uint64_t v5 = *((void *)a1 + 3);
  if (v4 == v5) {
    goto LABEL_23;
  }
  BOOL v6 = *(char **)(*(void *)a4 + 224);
  uint64_t v7 = *(char **)(*(void *)a4 + 232);
  if (v6 == v7)
  {
    id v9 = *(char **)(*(void *)a4 + 224);
    uint64_t v8 = v9;
  }
  else
  {
    uint64_t v8 = *(char **)(*(void *)a4 + 224);
    while (*(void *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        uint64_t v8 = *(char **)(*(void *)a4 + 232);
        break;
      }
    }
    id v9 = *(char **)(*(void *)a4 + 224);
    while (*(void *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        id v9 = *(char **)(*(void *)a4 + 232);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    uint64_t v13 = *((void *)a3 + 3);
    if (v13 != v4)
    {
      uint64_t v14 = *(char **)(*(void *)a4 + 224);
      unint64_t v15 = *(char **)(*(void *)a4 + 232);
      unint64_t v16 = v14;
      double v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(void *)v17 == v13) {
            goto LABEL_28;
          }
          v17 += 8;
        }
        while (v17 != v15);
        double v17 = *(char **)(*(void *)a4 + 232);
LABEL_28:
        while (*(void *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            unint64_t v16 = *(char **)(*(void *)a4 + 232);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        long long v18 = *a2;
        *(_OWORD *)long long v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        long long v19 = *(long long *)((char *)a3 + 27);
        long long v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(long long *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        __n128 result = *(__n128 *)&v46[11];
        *(long long *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        uint64_t v22 = *((void *)a2 + 3);
        uint64_t v23 = *((void *)a1 + 3);
        if (v22 != v23)
        {
          uint64_t v24 = *(char **)(*(void *)a4 + 224);
          uint64_t v25 = *(char **)(*(void *)a4 + 232);
          double v26 = v24;
          double v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(void *)v27 == v22) {
                goto LABEL_37;
              }
              v27 += 8;
            }
            while (v27 != v25);
            double v27 = *(char **)(*(void *)a4 + 232);
LABEL_37:
            while (*(void *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                double v26 = *(char **)(*(void *)a4 + 232);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            long long v28 = *a1;
            *(_OWORD *)uint64_t v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            long long v29 = *(long long *)((char *)a2 + 27);
            long long v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(long long *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            __n128 result = *(__n128 *)&v47[11];
            *(long long *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    uint64_t v10 = *((void *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        unint64_t v12 = *(char **)(*(void *)a4 + 224);
        double v11 = v12;
      }
      else
      {
        double v11 = *(char **)(*(void *)a4 + 224);
        while (*(void *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            double v11 = *(char **)(*(void *)a4 + 232);
            break;
          }
        }
        unint64_t v12 = *(char **)(*(void *)a4 + 224);
        while (*(void *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            unint64_t v12 = *(char **)(*(void *)a4 + 232);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        long long v31 = a1[1];
        long long v32 = *a1;
        *(void *)long long v49 = *((void *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        long long v33 = *(long long *)((char *)a3 + 27);
        long long v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(long long *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        __n128 result = *(__n128 *)&v49[3];
        *(long long *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    long long v35 = *a1;
    *(_OWORD *)double v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    long long v36 = *(long long *)((char *)a2 + 27);
    long long v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(long long *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    __n128 result = *(__n128 *)&v48[11];
    *(long long *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    uint64_t v38 = *((void *)a3 + 3);
    uint64_t v39 = *((void *)a2 + 3);
    if (v38 != v39)
    {
      unint64_t v40 = *(char **)(*(void *)a4 + 224);
      uint64_t v41 = *(char **)(*(void *)a4 + 232);
      uint64_t v42 = v40;
      uint64_t v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(void *)v43 == v38) {
            goto LABEL_50;
          }
          v43 += 8;
        }
        while (v43 != v41);
        uint64_t v43 = *(char **)(*(void *)a4 + 232);
LABEL_50:
        while (*(void *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            uint64_t v42 = *(char **)(*(void *)a4 + 232);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        long long v31 = a2[1];
        long long v32 = *a2;
        *(void *)long long v49 = *((void *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        long long v44 = *(long long *)((char *)a3 + 27);
        long long v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(long long *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 - 24);
      uint64_t v9 = *(void *)(a1 + 24);
      if (v8 == v9) {
        return result;
      }
      uint64_t v10 = *(char **)(*(void *)a3 + 224);
      double v11 = *(char **)(*(void *)a3 + 232);
      unint64_t v12 = v10;
      uint64_t v13 = v10;
      if (v10 == v11) {
        goto LABEL_10;
      }
      do
      {
        if (*(void *)v13 == v8) {
          goto LABEL_7;
        }
        v13 += 8;
      }
      while (v13 != v11);
      uint64_t v13 = *(char **)(*(void *)a3 + 232);
      do
      {
LABEL_7:
        if (*(void *)v12 == v9) {
          goto LABEL_10;
        }
        v12 += 8;
      }
      while (v12 != v11);
      unint64_t v12 = *(char **)(*(void *)a3 + 232);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        uint64_t v14 = (long long *)(a2 - 48);
        long long v15 = *(_OWORD *)a1;
        *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        long long v16 = *(_OWORD *)(a2 - 21);
        long long v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *uint64_t v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(long long *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), a3);
      uint64_t v19 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      int v20 = 0;
      break;
  }
  while (1)
  {
    uint64_t v21 = *(void *)(v19 + 24);
    uint64_t v22 = *(void *)(v18 + 24);
    if (v21 != v22)
    {
      uint64_t v23 = *(char **)(*(void *)a3 + 224);
      uint64_t v24 = *(char **)(*(void *)a3 + 232);
      uint64_t v25 = v23;
      double v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(void *)v26 == v21) {
            goto LABEL_19;
          }
          v26 += 8;
        }
        while (v26 != v24);
        double v26 = *(char **)(*(void *)a3 + 232);
LABEL_19:
        while (*(void *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            uint64_t v25 = *(char **)(*(void *)a3 + 232);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        long long v34 = *(_OWORD *)v19;
        uint64_t v36 = *(void *)(v19 + 16);
        long long v37 = *(_OWORD *)(v19 + 32);
        uint64_t v27 = v19;
        while (1)
        {
          long long v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1) {
            break;
          }
          uint64_t v27 = v18;
          uint64_t v29 = *(void *)(v18 - 24);
          if (v21 != v29)
          {
            long long v30 = *(char **)(*(void *)a3 + 224);
            long long v31 = *(char **)(*(void *)a3 + 232);
            long long v32 = v30;
            long long v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(void *)v33 == v21) {
                  goto LABEL_30;
                }
                v33 += 8;
              }
              while (v33 != v31);
              long long v33 = *(char **)(*(void *)a3 + 232);
LABEL_30:
              while (*(void *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  long long v32 = *(char **)(*(void *)a3 + 232);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30) {
              continue;
            }
          }
          goto LABEL_36;
        }
        uint64_t v27 = a1;
LABEL_36:
        *(_OWORD *)uint64_t v27 = v34;
        *(void *)(v27 + 16) = v36;
        *(void *)(v27 + 24) = v21;
        *(void *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8) {
          return v19 + 48 == a2;
        }
      }
    }
    uint64_t v18 = v19;
    v19 += 48;
    if (v19 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder*>((long long *)a1, (long long *)a2, (long long *)a3, a5).n128_u64[0];
  uint64_t v11 = *(void *)(a4 + 24);
  uint64_t v12 = *(void *)(a3 + 24);
  if (v11 != v12)
  {
    uint64_t v13 = *(char **)(*(void *)a5 + 224);
    uint64_t v14 = *(char **)(*(void *)a5 + 232);
    long long v15 = v13;
    long long v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(void *)v16 == v11) {
          goto LABEL_6;
        }
        v16 += 8;
      }
      while (v16 != v14);
      long long v16 = *(char **)(*(void *)a5 + 232);
LABEL_6:
      while (*(void *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          long long v15 = *(char **)(*(void *)a5 + 232);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      long long v17 = *(_OWORD *)a3;
      *(_OWORD *)uint64_t v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      long long v18 = *(_OWORD *)(a4 + 27);
      long long v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v38;
      __n128 result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      uint64_t v20 = *(void *)(a3 + 24);
      uint64_t v21 = *(void *)(a2 + 24);
      if (v20 != v21)
      {
        uint64_t v22 = *(char **)(*(void *)a5 + 224);
        uint64_t v23 = *(char **)(*(void *)a5 + 232);
        uint64_t v24 = v22;
        uint64_t v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(void *)v25 == v20) {
              goto LABEL_15;
            }
            v25 += 8;
          }
          while (v25 != v23);
          uint64_t v25 = *(char **)(*(void *)a5 + 232);
LABEL_15:
          while (*(void *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              uint64_t v24 = *(char **)(*(void *)a5 + 232);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          long long v26 = *(_OWORD *)a2;
          *(_OWORD *)uint64_t v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          long long v27 = *(_OWORD *)(a3 + 27);
          long long v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 16) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)v39;
          __n128 result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          uint64_t v29 = *(void *)(a2 + 24);
          uint64_t v30 = *(void *)(a1 + 24);
          if (v29 != v30)
          {
            long long v31 = *(char **)(*(void *)a5 + 224);
            long long v32 = *(char **)(*(void *)a5 + 232);
            long long v33 = v31;
            long long v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(void *)v34 == v29) {
                  goto LABEL_24;
                }
                v34 += 8;
              }
              while (v34 != v32);
              long long v34 = *(char **)(*(void *)a5 + 232);
LABEL_24:
              while (*(void *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  long long v33 = *(char **)(*(void *)a5 + 232);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              long long v35 = *(_OWORD *)a1;
              *(_OWORD *)unint64_t v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              long long v36 = *(_OWORD *)(a2 + 27);
              long long v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 16) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 16) = *(_OWORD *)v40;
              __n128 result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  uint64_t v13 = *(void *)(a5 + 24);
  uint64_t v14 = *(void *)(a4 + 24);
  if (v13 != v14)
  {
    long long v15 = *(char **)(*(void *)a6 + 224);
    long long v16 = *(char **)(*(void *)a6 + 232);
    long long v17 = v15;
    long long v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(void *)v18 == v13) {
          goto LABEL_6;
        }
        v18 += 8;
      }
      while (v18 != v16);
      long long v18 = *(char **)(*(void *)a6 + 232);
LABEL_6:
      while (*(void *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          long long v17 = *(char **)(*(void *)a6 + 232);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      long long v19 = *(_OWORD *)a4;
      *(_OWORD *)long long v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      long long v20 = *(_OWORD *)(a5 + 27);
      long long v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 16) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v49;
      __n128 result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      uint64_t v22 = *(void *)(a4 + 24);
      uint64_t v23 = *(void *)(a3 + 24);
      if (v22 != v23)
      {
        uint64_t v24 = *(char **)(*(void *)a6 + 224);
        uint64_t v25 = *(char **)(*(void *)a6 + 232);
        long long v26 = v24;
        long long v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(void *)v27 == v22) {
              goto LABEL_15;
            }
            v27 += 8;
          }
          while (v27 != v25);
          long long v27 = *(char **)(*(void *)a6 + 232);
LABEL_15:
          while (*(void *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              long long v26 = *(char **)(*(void *)a6 + 232);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          long long v28 = *(_OWORD *)a3;
          *(_OWORD *)long long v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          long long v29 = *(_OWORD *)(a4 + 27);
          long long v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 16) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 16) = *(_OWORD *)v50;
          __n128 result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          uint64_t v31 = *(void *)(a3 + 24);
          uint64_t v32 = *(void *)(a2 + 24);
          if (v31 != v32)
          {
            long long v33 = *(char **)(*(void *)a6 + 224);
            long long v34 = *(char **)(*(void *)a6 + 232);
            long long v35 = v33;
            long long v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(void *)v36 == v31) {
                  goto LABEL_24;
                }
                v36 += 8;
              }
              while (v36 != v34);
              long long v36 = *(char **)(*(void *)a6 + 232);
LABEL_24:
              while (*(void *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  long long v35 = *(char **)(*(void *)a6 + 232);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              long long v37 = *(_OWORD *)a2;
              *(_OWORD *)long long v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              long long v38 = *(_OWORD *)(a3 + 27);
              long long v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 16) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 16) = *(_OWORD *)v51;
              __n128 result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              uint64_t v40 = *(void *)(a2 + 24);
              uint64_t v41 = *(void *)(a1 + 24);
              if (v40 != v41)
              {
                uint64_t v42 = *(char **)(*(void *)a6 + 224);
                uint64_t v43 = *(char **)(*(void *)a6 + 232);
                long long v44 = v42;
                long long v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(void *)v45 == v40) {
                      goto LABEL_33;
                    }
                    v45 += 8;
                  }
                  while (v45 != v43);
                  long long v45 = *(char **)(*(void *)a6 + 232);
LABEL_33:
                  while (*(void *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      long long v44 = *(char **)(*(void *)a6 + 232);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  long long v46 = *(_OWORD *)a1;
                  *(_OWORD *)uint64_t v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  long long v47 = *(_OWORD *)(a2 + 27);
                  long long v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 16) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 16) = *(_OWORD *)v52;
                  __n128 result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsTimeInterval>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsTimeInterval>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsTimeInterval>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsTimeInterval>,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(void *)(a1 + 24) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(void **)a1;
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsTimeInterval>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsTimeInterval>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsTimeInterval>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsTimeInterval>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsTimeInterval>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsTimeInterval> const&)::{lambda(HDStatisticsTimeInterval const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsTimeInterval> const&)::{lambda(HDStatisticsTimeInterval const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsTimeInterval const&)>::~__func()
{
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsTimeInterval> const&)::{lambda(HDStatisticsTimeInterval const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsTimeInterval> const&)::{lambda(HDStatisticsTimeInterval const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsTimeInterval const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F1724590;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsTimeInterval> const&)::{lambda(HDStatisticsTimeInterval const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsTimeInterval> const&)::{lambda(HDStatisticsTimeInterval const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsTimeInterval const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1724590;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsTimeInterval> const&)::{lambda(HDStatisticsTimeInterval const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsTimeInterval> const&)::{lambda(HDStatisticsTimeInterval const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsTimeInterval const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsTimeInterval> const&)::{lambda(HDStatisticsTimeInterval const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsTimeInterval> const&)::{lambda(HDStatisticsTimeInterval const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsTimeInterval const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsTimeInterval> const&)::{lambda(HDStatisticsTimeInterval const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsTimeInterval> const&)::{lambda(HDStatisticsTimeInterval const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsTimeInterval const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsTimeInterval const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 520))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a4, 3, @"Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date");
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_configureForStartTime(a1);
  }
  double v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(void *)(a1 + 40) && a3) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_advanceToTime(a1, v8);
    }
    HDStatisticsCollectionEngine<HDStatisticsTimeInterval>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    uint64_t v9 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    uint64_t v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v9, a4);
  }
  return v10;
}

void sub_1BD0E3B4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_earliestStartTimeWithoutInvalidation(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    if (!*(unsigned char *)(a1 + 520))
    {
      double v1 = *(double *)(a1 + 176);
      double result = *(double *)(a1 + 120);
      if (v1 <= result)
      {
        double v1 = -1.79769313e308;
      }
      else if (*(unsigned char *)(a1 + 144))
      {
        double v1 = -1.79769313e308;
      }
      if (v1 >= result) {
        return v1;
      }
      return result;
    }
    return -1.79769313e308;
  }
  double result = *(double *)(a1 + 176);
  if (result <= *(double *)(a1 + 120)) {
    return -1.79769313e308;
  }
  if (*(unsigned char *)(a1 + 144)) {
    return -1.79769313e308;
  }
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_advanceToTime(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 128) <= a2)
  {
    uint64_t v4 = a1 + 112;
    uint64_t v5 = a1 + 120;
    do
    {
      uint64_t v6 = *(void *)(a1 + 488);
      uint64_t v7 = *(void *)(a1 + 496);
      if (v7 == v6)
      {
        uint64_t v22 = 0;
        long long v15 = *(void **)(a1 + 40);
        long long v16 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a2];
        double v8 = [v15 dateIntervalContainingDate:v16 index:&v22];

        HDStatisticsBucket<HDStatisticsTimeInterval>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v17 = v22;
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v19 = v18;
        long long v20 = [v8 endDate];
        [v20 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsTimeInterval>::resetToBucket(v4, v17, v19, v21);
      }
      else
      {
        double v8 = [*(id *)(a1 + 40) dateIntervalAtIndex:*(void *)(a1 + 112) + 1];
        HDStatisticsBucket<HDStatisticsTimeInterval>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v12 = v11;
        uint64_t v13 = [v8 endDate];
        [v13 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsTimeInterval>::advanceBucket(v4, v12, v14);
      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_didChangeBucket(a1, v9);
      if (v7 != v6) {
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_notifyForCurrentBucket(a1);
      }
    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1BD0E3DD4(_Unwind_Exception *exception_object)
{
}

void HDStatisticsCollectionEngine<HDStatisticsTimeInterval>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a1 + 8;
  double v6 = *(double *)(a1 + 8);
  double v8 = *(double *)a2;
  double v7 = *(double *)(a2 + 8);
  double v9 = *(double *)(a2 + 16);
  unint64_t v10 = *(void *)(a2 + 24);
  int v11 = *(unsigned __int8 *)(a2 + 32);
  char v12 = *(unsigned char *)(a2 + 33);
  double v13 = v6 - v7;
  if (v6 - v7 >= 0.01)
  {
    double v14 = v9 - v7;
    if (v14 - v13 >= 0.01)
    {
      double v8 = v8 - v8 * (v13 / v14);
    }
    else
    {
      int v11 = 0;
      unint64_t v10 = 0;
      char v12 = 0;
      double v9 = 0.0;
      double v6 = 0.0;
      double v8 = 0.0;
    }
  }
  else
  {
    double v6 = *(double *)(a2 + 8);
  }
  double v15 = *(double *)(a1 + 16);
  double v16 = v15 - v6;
  double v17 = v9 - v6;
  double v18 = v9 - v6 - (v15 - v6);
  if (!*(_DWORD *)(a1 + 36))
  {
    if (v18 < 0.01)
    {
LABEL_11:
      unint64_t v19 = 0;
      int v20 = 0;
      char v21 = 0;
      double v22 = 0.0;
      double v15 = 0.0;
      double v23 = 0.0;
      if (!v11) {
        goto LABEL_52;
      }
      goto LABEL_16;
    }
    if (v16 >= 0.01) {
      goto LABEL_15;
    }
LABEL_14:
    char v21 = v12;
    int v20 = v11;
    unint64_t v19 = v10;
    double v23 = v9;
    double v15 = v6;
    double v22 = v8;
    goto LABEL_52;
  }
  if (v16 < 0.01) {
    goto LABEL_14;
  }
  if (v18 < 0.01) {
    goto LABEL_11;
  }
LABEL_15:
  double v23 = v9;
  unint64_t v19 = v10;
  double v22 = v8 - v8 * (v16 / v17);
  int v20 = v11;
  char v21 = v12;
  double v9 = *(double *)(a1 + 16);
  double v8 = v8 * (v16 / v17);
  if (!v11) {
    goto LABEL_52;
  }
LABEL_16:
  double v63 = v6;
  double v64 = v9;
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 192, v10, v10);
  unint64_t v24 = *(void *)(a1 + 112);
  if (v24 == *(void *)(a1 + 104) && *(uint64_t *)(a1 + 128) <= 0)
  {
    v29.f64[1] = *(float64_t *)(a1 + 16);
    double v26 = v63;
    double v25 = v64;
    v29.f64[0] = v63;
    v30.f64[0] = *(float64_t *)(a1 + 8);
    v30.f64[1] = v64;
    int8x16_t v31 = (int8x16_t)vcgtq_f64(v30, v29);
    v30.f64[0] = v63;
    *(int8x16_t *)(a1 + 48) = vbslq_s8(v31, *(int8x16_t *)(a1 + 8), (int8x16_t)v30);
  }
  else
  {
    double v26 = v63;
    double v25 = v64;
    if (v63 < *(double *)(a1 + 48))
    {
      double v27 = *(double *)(a1 + 8);
      if (v63 >= v27) {
        double v27 = v63;
      }
      *(double *)(a1 + 48) = v27;
    }
    if (v64 > *(double *)(a1 + 56))
    {
      double v28 = *(double *)(a1 + 16);
      if (v28 >= v64) {
        double v28 = v64;
      }
      *(double *)(a1 + 56) = v28;
    }
  }
  if (*(unsigned char *)(a1 + 32))
  {
    double v32 = *(double *)(a1 + 64);
    if (v26 < v32) {
      double v32 = v26;
    }
    *(double *)(a1 + 64) = v32;
  }
  if (a3 && v26 < *(double *)(a1 + 16))
  {
    HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeThroughTime(v5, v26);
    double v26 = v63;
    double v25 = v64;
    unint64_t v24 = *(void *)(a1 + 112);
  }
  unint64_t v33 = *(void *)(a1 + 120);
  if (v24 >= v33)
  {
    uint64_t v35 = *(void *)(a1 + 104);
    unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - v35) >> 4);
    unint64_t v37 = v36 + 1;
    if (v36 + 1 > 0x555555555555555) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - v35) >> 4);
    if (2 * v38 > v37) {
      unint64_t v37 = 2 * v38;
    }
    if (v38 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v39 = 0x555555555555555;
    }
    else {
      unint64_t v39 = v37;
    }
    if (v39)
    {
      unint64_t v39 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v39);
      double v26 = v63;
      double v25 = v64;
    }
    else
    {
      uint64_t v40 = 0;
    }
    unint64_t v41 = v39 + 48 * v36;
    unint64_t v42 = v39 + 48 * v40;
    *(double *)unint64_t v41 = v8;
    *(double *)(v41 + 8) = v26;
    *(double *)(v41 + 16) = v25;
    *(void *)(v41 + 24) = v10;
    *(unsigned char *)(v41 + 32) = v11;
    *(unsigned char *)(v41 + 33) = v12;
    *(_WORD *)(v41 + 40) = 0;
    *(unsigned char *)(v41 + 42) = 0;
    unint64_t v34 = v41 + 48;
    long long v44 = *(char **)(a1 + 104);
    uint64_t v43 = *(char **)(a1 + 112);
    if (v43 != v44)
    {
      do
      {
        long long v45 = *((_OWORD *)v43 - 3);
        long long v46 = *((_OWORD *)v43 - 2);
        *(_OWORD *)(v41 - 21) = *(_OWORD *)(v43 - 21);
        *(_OWORD *)(v41 - 48) = v45;
        *(_OWORD *)(v41 - 32) = v46;
        v41 -= 48;
        v43 -= 48;
      }
      while (v43 != v44);
      uint64_t v43 = *(char **)(a1 + 104);
    }
    *(void *)(a1 + 104) = v41;
    *(void *)(a1 + 112) = v34;
    *(void *)(a1 + 120) = v42;
    if (v43) {
      operator delete(v43);
    }
  }
  else
  {
    *(double *)unint64_t v24 = v8;
    *(double *)(v24 + 8) = v26;
    *(double *)(v24 + 16) = v25;
    *(void *)(v24 + 24) = v10;
    *(unsigned char *)(v24 + 32) = v11;
    *(unsigned char *)(v24 + 33) = v12;
    *(_WORD *)(v24 + 40) = 0;
    unint64_t v34 = v24 + 48;
    *(unsigned char *)(v24 + 42) = 0;
  }
  *(void *)(a1 + 112) = v34;
  if (*(unsigned char *)(a1 + 33))
  {
    unint64_t v47 = HDStatisticsBucket<HDStatisticsTimeInterval>::_canonicalSourceIDForSourceID(v5, v10);
    HDStatisticsBucket<HDStatisticsTimeInterval>::_statisticsForSource(v5, v47);
  }
LABEL_52:
  if (v20)
  {
    unint64_t v48 = *(void *)(a1 + 384);
    unint64_t v49 = *(void *)(a1 + 392);
    if (v48 >= v49)
    {
      uint64_t v51 = *(void *)(a1 + 376);
      unint64_t v52 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v48 - v51) >> 3);
      unint64_t v53 = v52 + 1;
      if (v52 + 1 > 0x666666666666666) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v54 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v49 - v51) >> 3);
      if (2 * v54 > v53) {
        unint64_t v53 = 2 * v54;
      }
      if (v54 >= 0x333333333333333) {
        unint64_t v55 = 0x666666666666666;
      }
      else {
        unint64_t v55 = v53;
      }
      if (v55) {
        unint64_t v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v55);
      }
      else {
        uint64_t v56 = 0;
      }
      unint64_t v57 = v55 + 40 * v52;
      unint64_t v58 = v55 + 40 * v56;
      *(double *)unint64_t v57 = v22;
      *(double *)(v57 + 8) = v15;
      *(double *)(v57 + 16) = v23;
      *(void *)(v57 + 24) = v19;
      *(unsigned char *)(v57 + 32) = v20;
      *(unsigned char *)(v57 + 33) = v21;
      unint64_t v50 = v57 + 40;
      unint64_t v60 = *(char **)(a1 + 376);
      uint8x8_t v59 = *(char **)(a1 + 384);
      if (v59 != v60)
      {
        do
        {
          long long v61 = *(_OWORD *)(v59 - 40);
          long long v62 = *(_OWORD *)(v59 - 24);
          *(_WORD *)(v57 - 8) = *((_WORD *)v59 - 4);
          *(_OWORD *)(v57 - 24) = v62;
          *(_OWORD *)(v57 - 40) = v61;
          v57 -= 40;
          v59 -= 40;
        }
        while (v59 != v60);
        uint8x8_t v59 = *(char **)(a1 + 376);
      }
      *(void *)(a1 + 376) = v57;
      *(void *)(a1 + 384) = v50;
      *(void *)(a1 + 392) = v58;
      if (v59) {
        operator delete(v59);
      }
    }
    else
    {
      *(double *)unint64_t v48 = v22;
      *(double *)(v48 + 8) = v15;
      *(double *)(v48 + 16) = v23;
      *(void *)(v48 + 24) = v19;
      *(unsigned char *)(v48 + 32) = v20;
      unint64_t v50 = v48 + 40;
      *(unsigned char *)(v48 + 33) = v21;
    }
    *(void *)(a1 + 384) = v50;
  }
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_notifyForCurrentBucket(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 522))
  {
    *(unsigned char *)(a1 + 524) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 524) = 0;
    uint64_t v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      uint64_t v4 = v2;
      unint64_t v3 = (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      if (v3) {
        v4[2](v4, v3);
      }

      uint64_t v2 = v4;
    }
  }
}

void sub_1BD0E4360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsTimeInterval>::advanceBucket(uint64_t a1, double a2, double a3)
{
  double v9 = 0;
  unint64_t v10 = 0;
  uint64_t v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 376), *(void *)(a1 + 384), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 384) - *(void *)(a1 + 376)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsTimeInterval>::resetToBucket(a1, *(void *)a1 + 1, a2, a3);
  double v6 = v9;
  double v7 = v10;
  if (v9 != v10)
  {
    uint64_t v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsTimeInterval>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BD0E445C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsTimeInterval>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8 = (id *)(a1 + 40);
  objc_storeStrong((id *)(a1 + 400), *(id *)(a1 + 40));
  double v9 = *(void **)(a1 + 136);
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  *(void *)(a1 + 128) = 0;
  if (v9)
  {
    *(void *)(a1 + 144) = v9;
    operator delete(v9);
  }
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  if (*(void *)(a1 + 184))
  {
    uint64_t v10 = *(void *)(a1 + 176);
    uint64_t v11 = *(void **)(a1 + 168);
    *(void *)(a1 + 168) = a1 + 176;
    *(void *)(v10 + 16) = 0;
    *(void *)(a1 + 176) = 0;
    *(void *)(a1 + 184) = 0;
    if (v11[1]) {
      char v12 = (void *)v11[1];
    }
    else {
      char v12 = v11;
    }
    if (v12)
    {
      double v13 = (void *)v12[2];
      if (v13)
      {
        double v14 = (void *)*v13;
        if ((void *)*v13 == v12)
        {
          *double v13 = 0;
          while (1)
          {
            double v16 = (void *)v13[1];
            if (!v16) {
              break;
            }
            do
            {
              double v13 = v16;
              double v16 = (void *)*v16;
            }
            while (v16);
          }
        }
        else
        {
          for (v13[1] = 0; v14; double v14 = (void *)v13[1])
          {
            do
            {
              double v13 = v14;
              double v14 = (void *)*v14;
            }
            while (v14);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsTimeInterval>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTimeInterval>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTimeInterval>>>::destroy(v12);
        for (uint64_t i = (void *)v13[2]; i; uint64_t i = (void *)i[2])
          double v13 = i;
        char v12 = v13;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsTimeInterval>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTimeInterval>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTimeInterval>>>::destroy(v12);
  }
  objc_storeStrong(v8, *(id *)(a1 + 400));
  *(void *)(a1 + 384) = *(void *)(a1 + 376);
  *(void *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 524))
  {
    if (v3)
    {
      id v6 = v3;
      uint64_t v4 = _Block_copy(*(const void **)(a1 + 96));
      uint64_t v5 = v4;
      if (v4) {
        (*((void (**)(void *, id))v4 + 2))(v4, v6);
      }

      id v3 = v6;
    }
    *(unsigned char *)(a1 + 524) = 0;
  }
}

void sub_1BD0E4620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_currentBucketInterval(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 520))
  {
    double v1 = 0;
  }
  else
  {
    double v1 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", *(double *)(a1 + 120), *(double *)(a1 + 128));
  }

  return v1;
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI24HDStatisticsTimeIntervalE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 startDate];
  id v6 = [v4 startDate];
  uint64_t v7 = [v5 compare:v6];

  return v7;
}

void sub_1BD0E46F4(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_primitiveInvalidateInterval(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 13);
  if (WeakRetained)
  {
    if (v5
      && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_currentBucketInterval((uint64_t)a1),
          (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v8 = [v5 endDate];
      double v9 = [v7 startDate];
      if (objc_msgSend(v8, "hk_isAfterDate:", v9))
      {
        uint64_t v10 = [v5 startDate];
        uint64_t v11 = [v7 endDate];
        char v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);
      }
      else
      {
        char v12 = 0;
      }

      double v13 = _Block_copy(a1[12]);
      if ((v12 & 1) == 0) {
        operator new();
      }
    }
    else
    {
      double v13 = _Block_copy(a1[12]);
    }
    *((unsigned char *)a1 + 520) = 1;
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI24HDStatisticsTimeIntervalE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
    v27[3] = &unk_1E6308FF8;
    id v15 = v5;
    id v28 = v15;
    id v16 = v13;
    id v29 = v16;
    (*((void (**)(id *, void *))*a1 + 9))(a1, v27);
    if (v5)
    {
      double v17 = [v15 startDate];
      [v17 timeIntervalSinceReferenceDate];
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_configureForStartTime((uint64_t)a1);
    }
    else
    {
      (*((void (**)(id *))*a1 + 4))(a1);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI24HDStatisticsTimeIntervalE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
    v21[3] = &unk_1E6309060;
    unint64_t v24 = a1;
    id v5 = v15;
    char v26 = 1;
    id v22 = v5;
    double v25 = a1;
    id v23 = WeakRetained;
    uint64_t v14 = (*((uint64_t (**)(id *, void *, uint64_t))*a1 + 14))(a1, v21, a3);
    double v18 = _Block_copy(v16);
    id v19 = a1[12];
    a1[12] = v18;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to invalidate interval: no data source available.");
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1BD0E4B44(_Unwind_Exception *a1)
{
  MEMORY[0x1C187B8A0](v4, 0x10F1C40258158D0);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI24HDStatisticsTimeIntervalE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_11;
  }
  id v3 = [v10 endDate];
  uint64_t v4 = [*(id *)(a1 + 32) startDate];
  char v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    id v6 = [v10 startDate];
    uint64_t v7 = [*(id *)(a1 + 32) endDate];
    char v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_11:
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9) {
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
      }
    }
  }
}

void sub_1BD0E4D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI24HDStatisticsTimeIntervalE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = [*(id *)(a1 + 32) startDate];
  [v5 timeIntervalSinceReferenceDate];
  uint64_t v7 = v6;

  char v8 = [*(id *)(a1 + 32) endDate];
  [v8 timeIntervalSinceReferenceDate];
  uint64_t v10 = v9;

  uint64_t v11 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  uint64_t v13 = *(void *)(a1 + 32);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI24HDStatisticsTimeIntervalE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  char v32 = *(unsigned char *)(a1 + 64);
  void v30[4] = v7;
  v30[5] = v10;
  uint64_t v31 = *(void *)(a1 + 56);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI24HDStatisticsTimeIntervalE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  void v29[4] = v31;
  uint64_t v14 = [v11 collectionCalculator:WeakRetained queryForInterval:v13 error:a2 sampleHandler:v30 mergeHandler:v29];

  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15 != v4)
    {
      id v16 = [*(id *)(a1 + 32) endDate];
      [v16 timeIntervalSinceReferenceDate];
      if (*(void *)(v15 + 40))
      {
        double v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          id v19 = [*(id *)(v15 + 40) dateIntervalAtIndex:*(void *)(v15 + 112) + 1];
          HDStatisticsBucket<HDStatisticsTimeInterval>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          int v20 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_statisticsFromFinishedBucket(v15, v15 + 120);
          char v21 = [v19 startDate];
          [v21 timeIntervalSinceReferenceDate];
          double v23 = v22;
          unint64_t v24 = [v19 endDate];
          [v24 timeIntervalSinceReferenceDate];
          HDStatisticsCollectionEngine<HDStatisticsTimeInterval>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            char v26 = _Block_copy(*(const void **)(v15 + 96));
            double v27 = v26;
            if (v26) {
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);
            }
          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_didChangeBucket(v15, 0);
        }
      }
    }
  }
  return v14;
}

void sub_1BD0E4FD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI24HDStatisticsTimeIntervalE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7 = *(double *)(a1 + 32) - a6;
  if (v7 >= 0.01)
  {
    double v9 = a7 - a6;
    if (v9 - v7 >= 0.01)
    {
      a5 = a5 - v7 / v9 * a5;
      int v8 = 1;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      int v8 = 0;
      a5 = 0.0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    int v8 = 1;
  }
  *(double *)uint64_t v13 = a5;
  *(double *)&v13[1] = a6;
  double v14 = a7;
  uint64_t v15 = a2;
  char v16 = v8;
  char v17 = 0;
  if (*(unsigned char *)(a1 + 56))
  {
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)v13, a3, a4);
    }
  }
  else
  {
    double v11 = *(double *)(a1 + 40) - a6;
    if (v11 >= 0.01)
    {
      double v12 = a7 - a6;
      if (v12 - v11 >= 0.01)
      {
        a5 = a5 * (v11 / v12);
        a7 = *(double *)(a1 + 40);
      }
    }
    else
    {
      int v8 = 0;
    }
    *(double *)uint64_t v13 = a5;
    double v14 = a7;
    char v16 = v8;
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)v13, a3, a4);
    }
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI24HDStatisticsTimeIntervalE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 520)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_configureForStartTime(a1);
  }
  if (*(void *)(a1 + 40)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_advanceToTime(a1, a2);
  }
  if (*(double *)(a1 + 128) > a2)
  {
    HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeThroughTime(a1 + 120, a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 32) < *(double *)(v10 + 8))
                {
                  uint64_t v129 = *(void *)(v10 + 32);
                  long long v113 = *(_OWORD *)v10;
                  long long v121 = *(_OWORD *)(v10 + 16);
                  long long v52 = *(_OWORD *)(a2 - 40);
                  long long v53 = *(_OWORD *)(a2 - 24);
                  *(_WORD *)(v10 + 32) = *(_WORD *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(_WORD *)(a2 - 8) = v129;
                  *(_OWORD *)(a2 - 24) = v121;
                  *(_OWORD *)(a2 - 40) = v113;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v10, (double *)(v10 + 40), (double *)(a2 - 40));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, v10 + 120, a2 - 40);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            unint64_t v54 = (void *)(v10 + 40);
            BOOL v56 = v10 == a2 || v54 == (void *)a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  uint8x8_t v59 = v54;
                  double v60 = *(double *)(v58 + 48);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *v54;
                    long long v114 = *(_OWORD *)(v58 + 56);
                    uint64_t v122 = *(void *)(v58 + 72);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      uint64_t v63 = v10 + v62;
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      *(_OWORD *)(v63 + 40) = *(_OWORD *)(v10 + v62);
                      *(_OWORD *)(v63 + 56) = v64;
                      *(_WORD *)(v63 + 72) = *(_WORD *)(v10 + v62 + 32);
                      if (!v62) {
                        break;
                      }
                      v62 -= 40;
                      if (v60 >= *(double *)(v63 - 32))
                      {
                        uint64_t v65 = v10 + v62 + 40;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = v114;
                    *(_WORD *)(v65 + 32) = v122;
                  }
                  unint64_t v54 = v59 + 5;
                  v57 += 40;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 5 != (void *)a2);
              }
            }
            else if (!v56)
            {
              do
              {
                int v98 = v54;
                double v99 = *(double *)(a1 + 48);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *v54;
                  long long v117 = *(_OWORD *)(a1 + 56);
                  uint64_t v125 = *(void *)(a1 + 72);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(_OWORD *)(v101 - 3);
                    *(_OWORD *)long long v101 = *(_OWORD *)(v101 - 5);
                    *((_OWORD *)v101 + 1) = v102;
                    *((_WORD *)v101 + 16) = *((_WORD *)v101 - 4);
                    double v103 = *((double *)v101 - 9);
                    v101 -= 5;
                  }
                  while (v99 < v103);
                  *long long v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *((_WORD *)v101 + 16) = v125;
                  *((_OWORD *)v101 + 1) = v117;
                }
                v54 += 5;
                a1 = (unint64_t)v98;
              }
              while (v98 + 5 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 40 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v10 + 40 * v69 + 8) < *(double *)(v70 + 48))
                  {
                    v70 += 40;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  double v71 = *(double *)(v10 + 40 * v68 + 8);
                  if (*(double *)(v70 + 8) >= v71)
                  {
                    unint64_t v72 = v10 + 40 * v68;
                    uint64_t v73 = *(void *)v72;
                    uint64_t v123 = *(void *)(v72 + 32);
                    long long v115 = *(_OWORD *)(v72 + 16);
                    do
                    {
                      unint64_t v74 = v72;
                      unint64_t v72 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_WORD *)(v74 + 32) = *(_WORD *)(v70 + 32);
                      *(_OWORD *)unint64_t v74 = v75;
                      *(_OWORD *)(v74 + 16) = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 40 * v77;
                      uint64_t v78 = 2 * v69 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v10 + 40 * v77 + 8) < *(double *)(v70 + 48))
                      {
                        v70 += 40;
                        uint64_t v77 = v78;
                      }
                      uint64_t v69 = v77;
                    }
                    while (*(double *)(v70 + 8) >= v71);
                    *(void *)unint64_t v72 = v73;
                    *(double *)(v72 + 8) = v71;
                    *(_OWORD *)(v72 + 16) = v115;
                    *(_WORD *)(v72 + 32) = v123;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x28uLL;
              do
              {
                uint64_t v80 = 0;
                uint64_t v130 = *(void *)(v10 + 32);
                long long v116 = *(_OWORD *)v10;
                long long v124 = *(_OWORD *)(v10 + 16);
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = v81;
                  uint64_t v83 = v80 + 1;
                  v81 += 40 * (v80 + 1);
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v85 = v84 + 2;
                  if (v85 < v79 && *(double *)(v82 + 40 * v83 + 8) < *(double *)(v81 + 48))
                  {
                    v81 += 40;
                    uint64_t v80 = v85;
                  }
                  long long v86 = *(_OWORD *)v81;
                  long long v87 = *(_OWORD *)(v81 + 16);
                  *(_WORD *)(v82 + 32) = *(_WORD *)(v81 + 32);
                  *(_OWORD *)unint64_t v82 = v86;
                  *(_OWORD *)(v82 + 16) = v87;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 40;
                if (v81 == a2)
                {
                  *(_WORD *)(v81 + 32) = v130;
                  *(_OWORD *)unint64_t v81 = v116;
                  *(_OWORD *)(v81 + 16) = v124;
                }
                else
                {
                  long long v88 = *(_OWORD *)a2;
                  long long v89 = *(_OWORD *)(a2 + 16);
                  *(_WORD *)(v81 + 32) = *(_WORD *)(a2 + 32);
                  *(_OWORD *)unint64_t v81 = v88;
                  *(_OWORD *)(v81 + 16) = v89;
                  *(_WORD *)(a2 + 32) = v130;
                  *(_OWORD *)a2 = v116;
                  *(_OWORD *)(a2 + 16) = v124;
                  uint64_t v90 = v81 - v10 + 40;
                  if (v90 >= 41)
                  {
                    unint64_t v91 = (v90 / 0x28uLL - 2) >> 1;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v10 + 40 * v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      uint64_t v109 = *(void *)(v81 + 32);
                      long long v106 = *(_OWORD *)(v81 + 16);
                      do
                      {
                        unint64_t v94 = v81;
                        unint64_t v81 = v10 + 40 * v91;
                        long long v95 = *(_OWORD *)v81;
                        long long v96 = *(_OWORD *)(v81 + 16);
                        *(_WORD *)(v94 + 32) = *(_WORD *)(v81 + 32);
                        *(_OWORD *)unint64_t v94 = v95;
                        *(_OWORD *)(v94 + 16) = v96;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 40 * v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_WORD *)(v81 + 32) = v109;
                      *(_OWORD *)(v81 + 16) = v106;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40 * (v12 >> 1)), (double *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            char v16 = (double *)(a1 + 40 * v13 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40), v16, (double *)(a2 - 80));
            char v17 = (double *)(a1 + 40 + 8 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 80), v17, (double *)(a2 - 120));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v16, (double *)v14, v17);
            uint64_t v126 = *(void *)(a1 + 32);
            long long v110 = *(_OWORD *)a1;
            long long v118 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 16) = v19;
            *(_WORD *)(v14 + 32) = v126;
            *(_OWORD *)unint64_t v14 = v110;
            *(_OWORD *)(v14 + 16) = v118;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40 * (v12 >> 1)), (double *)a1, (double *)(a2 - 40));
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 32) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          long long v105 = *(_OWORD *)(a1 + 16);
          uint64_t v108 = *(void *)(a1 + 32);
          if (v20 >= *(double *)(a2 - 32))
          {
            unint64_t v41 = a1 + 40;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 40;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 40;
              double v40 = *(double *)(v39 + 48);
              v39 += 40;
            }
            while (v20 >= v40);
          }
          unint64_t v43 = a2;
          if (v10 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              unint64_t v43 = v44 - 40;
              double v45 = *(double *)(v44 - 32);
              v44 -= 40;
            }
            while (v20 < v45);
          }
          while (v10 < v43)
          {
            uint64_t v128 = *(void *)(v10 + 32);
            long long v112 = *(_OWORD *)v10;
            long long v120 = *(_OWORD *)(v10 + 16);
            long long v46 = *(_OWORD *)v43;
            long long v47 = *(_OWORD *)(v43 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v43 + 32);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(_WORD *)(v43 + 32) = v128;
            *(_OWORD *)unint64_t v43 = v112;
            *(_OWORD *)(v43 + 16) = v120;
            do
            {
              double v48 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *(double *)(v43 - 32);
              v43 -= 40;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 40);
            long long v51 = *(_OWORD *)(v10 - 24);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 40) = v38;
          *(double *)(v10 - 32) = v20;
          *(_WORD *)(v10 - 8) = v108;
          *(_OWORD *)(v10 - 24) = v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        long long v104 = *(_OWORD *)(a1 + 16);
        uint64_t v107 = *(void *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 48);
          v21 += 40;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        unint64_t v25 = a2;
        if (v21 == 40)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 40;
            double v29 = *(double *)(v28 - 32);
            v28 -= 40;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 40;
            double v27 = *(double *)(v25 - 32);
            v25 -= 40;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v127 = *(void *)(v10 + 32);
            long long v111 = *(_OWORD *)v10;
            long long v119 = *(_OWORD *)(v10 + 16);
            long long v31 = *(_OWORD *)v30;
            long long v32 = *(_OWORD *)(v30 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v30 + 32);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(_WORD *)(v30 + 32) = v127;
            *(_OWORD *)unint64_t v30 = v111;
            *(_OWORD *)(v30 + 16) = v119;
            do
            {
              double v33 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v33 < v20);
            do
            {
              double v34 = *(double *)(v30 - 32);
              v30 -= 40;
            }
            while (v34 >= v20);
          }
          while (v10 < v30);
        }
        if (v10 - 40 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 40);
          long long v36 = *(_OWORD *)(v10 - 24);
          *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 40) = v22;
        *(double *)(v10 - 32) = v20;
        *(_WORD *)(v10 - 8) = v107;
        *(_OWORD *)(v10 - 24) = v104;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 40;
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        __int16 v9 = *(_WORD *)(a2 - 8);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      uint64_t v16 = *(void *)v12;
      long long v21 = *(_OWORD *)(v12 + 16);
      uint64_t v22 = *(void *)(v12 + 32);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(void *)uint64_t v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI24HDStatisticsTimeIntervalE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(void *a1, uint64_t a2)
{
  id v3 = (void *)a1[5];
  uint64_t v4 = a1[6];
  BOOL v5 = (void *)a1[4];
  uint64_t v6 = [v5 dateInterval];
  void v9[4] = v4;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI24HDStatisticsTimeIntervalE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI24HDStatisticsTimeIntervalE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  uint64_t v7 = [v3 collectionCalculator:v5 queryForInterval:v6 error:a2 sampleHandler:v10 mergeHandler:v9];

  return v7;
}

void sub_1BD0E5D74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI24HDStatisticsTimeIntervalE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10 = *(void *)(a1 + 32);
  *(double *)int v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  char v15 = 1;
  uint64_t v11 = [MEMORY[0x1E4F1C9C8] distantFuture];
  [v11 timeIntervalSinceReferenceDate];
  BOOL v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1BD0E5E18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI24HDStatisticsTimeIntervalE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6 = a3;
  uint64_t v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = &unk_1F1724640;
  double v9 = 900.0;
  if ((v6 & 0x10) == 0) {
    double v9 = 0.0;
  }
  *(double *)(v8 + 56) = v9;
  *(void *)(v8 + 104) = 0;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(void *)(v8 + 96) = 0;
  *(void *)(v8 + 112) = 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_WORD *)(a1 + 664) = 1;
  *(unsigned char *)(a1 + 666) = 0;
  *(unsigned char *)(a1 + 668) = 0;
  *(void *)(a1 + 672) = 0xFFEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 712) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  return a1;
}

void sub_1BD0E5EF8(_Unwind_Exception *a1)
{
  id v3 = v2;
  objc_destroyWeak(v3);

  BOOL v5 = *(void **)(v1 + 72);
  if (v5)
  {
    *(void *)(v1 + 80) = v5;
    operator delete(v5);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)v1);
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);

  JUMPOUT(0x1C187B8A0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1F1724640;
  uint64_t v2 = *(void **)(a1 + 696);
  if (v2)
  {
    *(void *)(a1 + 704) = v2;
    operator delete(v2);
  }

  id v3 = *(void **)(a1 + 632);
  if (v3)
  {
    *(void *)(a1 + 640) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(unsigned char *)(result + 664) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::setDateInterval(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 copy];
  uint64_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;

  BOOL v5 = [v6 startDate];
  [v5 timeIntervalSinceReferenceDate];
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
}

void sub_1BD0E6018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(void *)(a1 + 40))
  {
    id v5 = v3;
    [v3 timeIntervalSinceReferenceDate];
    *(void *)(a1 + 672) = v4;
    id v3 = v5;
  }
}

void sub_1BD0E608C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::setStatisticsConfiguration(id *a1, void *a2)
{
  objc_storeStrong(a1 + 85, a2);
  id v7 = a2;
  id v4 = a1[85];
  id v5 = a1[82];
  a1[82] = v4;
  id v6 = v4;

  objc_storeStrong(a1 + 19, a1[82]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (*(void *)(a1 + 40)) {
    return 1;
  }
  BOOL v7 = *(void *)(a1 + 224) == *(void *)(a1 + 216) && *(uint64_t *)(a1 + 280) < 1
    || HKIntervalMask<double>::firstDifference(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)a2, *(void *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (v7) {
    return 1;
  }
  double v9 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128);

  return v9(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 copy];
  id v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v3;
}

void sub_1BD0E6274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::dataSource(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));

  return WeakRetained;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::currentStatistics(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 664))
  {
    uint64_t v1 = 0;
  }
  else
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v4);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v4, v4[1]);
    uint64_t v1 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v4);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v4);
  }

  return v1;
}

void sub_1BD0E6344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(a1 + 64);
  BOOL v7 = v6;
  if (!v6) {
    goto LABEL_4;
  }
  uint64_t v8 = [v6 startDate];
  [v8 timeIntervalSinceReferenceDate];
  if (v9 > *(double *)(a2 + 16))
  {

    goto LABEL_10;
  }
  uint64_t v10 = [v7 endDate];
  [v10 timeIntervalSinceReferenceDate];
  double v12 = v11;
  double v13 = *(double *)(a2 + 8);

  if (v12 >= v13)
  {
LABEL_4:
    if (!*(unsigned char *)(a1 + 666)) {
      goto LABEL_21;
    }
    if (!*(unsigned char *)(a1 + 665))
    {
      if (*(void *)(a1 + 40))
      {
        if (*(unsigned char *)(a1 + 664))
        {
          double v14 = -1.79769313e308;
        }
        else
        {
          double v16 = *(double *)(a1 + 176);
          double v14 = *(double *)(a1 + 120);
          if (v16 <= v14) {
            double v16 = -1.79769313e308;
          }
          if (v16 >= v14) {
            double v14 = v16;
          }
        }
      }
      else
      {
        double v14 = -1.79769313e308;
        if (*(double *)(a1 + 176) > *(double *)(a1 + 120)) {
          double v14 = *(double *)(a1 + 176);
        }
      }
      if (v14 > *(double *)(a2 + 8))
      {
        uint64_t v17 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
        uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v17, a3);

        goto LABEL_22;
      }
      if (*(unsigned char *)(a1 + 667))
      {
LABEL_21:
        uint64_t v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_primitiveAddSample(a1, a2, 1, a3);
        goto LABEL_22;
      }
      unint64_t v19 = *(void *)(a1 + 704);
      unint64_t v20 = *(void *)(a1 + 712);
      if (v19 >= v20)
      {
        uint64_t v24 = *(void *)(a1 + 696);
        unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v24) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - v24) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x333333333333333) {
          unint64_t v28 = 0x666666666666666;
        }
        else {
          unint64_t v28 = v26;
        }
        if (v28) {
          unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v28);
        }
        else {
          uint64_t v29 = 0;
        }
        unint64_t v30 = v28 + 40 * v25;
        unint64_t v31 = v28 + 40 * v29;
        long long v32 = *(_OWORD *)a2;
        long long v33 = *(_OWORD *)(a2 + 16);
        *(void *)(v30 + 32) = *(void *)(a2 + 32);
        *(_OWORD *)unint64_t v30 = v32;
        *(_OWORD *)(v30 + 16) = v33;
        unint64_t v23 = v30 + 40;
        double v34 = *(char **)(a1 + 704);
        long long v35 = *(char **)(a1 + 696);
        if (v34 != v35)
        {
          do
          {
            long long v36 = *(_OWORD *)(v34 - 40);
            long long v37 = *(_OWORD *)(v34 - 24);
            *(_WORD *)(v30 - 8) = *((_WORD *)v34 - 4);
            *(_OWORD *)(v30 - 24) = v37;
            *(_OWORD *)(v30 - 40) = v36;
            v30 -= 40;
            v34 -= 40;
          }
          while (v34 != v35);
          double v34 = *(char **)(a1 + 696);
        }
        *(void *)(a1 + 696) = v30;
        *(void *)(a1 + 704) = v23;
        *(void *)(a1 + 712) = v31;
        if (v34) {
          operator delete(v34);
        }
      }
      else
      {
        long long v21 = *(_OWORD *)a2;
        long long v22 = *(_OWORD *)(a2 + 16);
        *(void *)(v19 + 32) = *(void *)(a2 + 32);
        *(_OWORD *)unint64_t v19 = v21;
        *(_OWORD *)(v19 + 16) = v22;
        unint64_t v23 = v19 + 40;
      }
      *(void *)(a1 + 704) = v23;
    }
  }
LABEL_10:
  uint64_t v15 = 1;
LABEL_22:

  return v15;
}

void sub_1BD0E6600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = v5;
  if (*(unsigned char *)(a1 + 666))
  {
    uint64_t v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 666) = 1;
  uint64_t v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    uint64_t v7 = 0;
    goto LABEL_82;
  }
  uint64_t v65 = v6;
  if (*(unsigned char *)(a1 + 665)) {
    goto LABEL_5;
  }
  double v9 = *(void **)(a1 + 688);
  if (!v9)
  {
    id v68 = 0;
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 40))
  {
LABEL_5:
    int v8 = 0;
    id v68 = 0;
    goto LABEL_29;
  }
  [v9 sortUsingComparator:&__block_literal_global_836];
  id v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v10 = *(id *)(a1 + 688);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  if (!v11)
  {

    id v12 = 0;
    goto LABEL_27;
  }
  id v12 = 0;
  uint64_t v13 = *(void *)v70;
  do
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (*(void *)v70 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(id *)(*((void *)&v69 + 1) + 8 * i);
      double v16 = v15;
      if (v12)
      {
        uint64_t v17 = [v15 startDate];
        uint64_t v18 = [v12 endDate];
        int v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          unint64_t v20 = [v16 endDate];
          long long v21 = [v12 endDate];
          int v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22) {
            goto LABEL_21;
          }
          id v23 = objc_alloc(MEMORY[0x1E4F28C18]);
          uint64_t v24 = [v12 startDate];
          unint64_t v25 = [v16 endDate];
          id v26 = (id)[v23 initWithStartDate:v24 endDate:v25];
        }
        else
        {
          [v68 addObject:v12];
          id v26 = v16;
        }
        id v12 = v26;
      }
      else
      {
        id v12 = v15;
      }
LABEL_21:
    }
    uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  }
  while (v11);

  if (v12) {
    [v68 addObject:v12];
  }
LABEL_27:

LABEL_28:
  int v8 = 1;
LABEL_29:
  unint64_t v27 = *(void **)(a1 + 688);
  *(void *)(a1 + 688) = 0;

  *(unsigned char *)(a1 + 665) = 0;
  if (!v8)
  {
    unint64_t v38 = *(void *)(a1 + 696);
    *(void *)(a1 + 712) = 0;
    *(void *)(a1 + 704) = 0;
    *(void *)(a1 + 696) = 0;
    unint64_t v39 = v38;
    goto LABEL_47;
  }
  unint64_t v28 = [v68 lastObject];
  if (v28)
  {
    uint64_t v29 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_currentBucketInterval(a1);
    unint64_t v30 = [v29 endDate];
    unint64_t v31 = [v28 endDate];
    int v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      long long v33 = [v28 endDate];
      [v33 timeIntervalSinceReferenceDate];
      double v35 = v34;

      uint64_t v36 = *(void *)(a1 + 696);
      long long v37 = *(long long **)(a1 + 704);
      while ((long long *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((long long *)v36 != v37)
          {
            double v40 = (long long *)(v36 + 40);
            if ((long long *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  long long v41 = *v40;
                  long long v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)uint64_t v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                double v40 = (long long *)((char *)v40 + 40);
              }
              while (v40 != v37);
              long long v37 = *(long long **)(a1 + 704);
            }
          }
          if ((long long *)v36 != v37) {
            *(void *)(a1 + 704) = v36;
          }
          break;
        }
        v36 += 40;
      }
    }
  }
  unint64_t v38 = *(void *)(a1 + 696);
  unint64_t v39 = *(void *)(a1 + 704);
  *(void *)(a1 + 712) = 0;
  *(void *)(a1 + 696) = 0;
  *(void *)(a1 + 704) = 0;
  if (![v68 count]) {
    goto LABEL_60;
  }
LABEL_47:
  id v43 = v68;
  long long __p = (void *)v38;
  if (v43)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v44 = v43;
    uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v70;
      while (2)
      {
        for (uint64_t j = 0; j != v45; ++j)
        {
          if (*(void *)v70 != v46) {
            objc_enumerationMutation(v44);
          }
          id v48 = *(id *)(*((void *)&v69 + 1) + 8 * j);
          int v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval((id *)a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
        if (v45) {
          continue;
        }
        break;
      }
    }

LABEL_59:
    unint64_t v38 = (unint64_t)__p;
LABEL_60:
    unint64_t v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v51;
    }
    int v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    long long __p = (void *)v38;
    if (v39 != v38)
    {
      uint64_t v54 = v38;
      uint64_t v50 = v67;
      do
      {
        int v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_primitiveAddSample(a1, v54, 1, v50);
        int v53 = v55;
        v54 += 40;
        if (v54 == v39) {
          char v56 = 0;
        }
        else {
          char v56 = v55;
        }
        uint64_t v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval((id *)a1, 0, v67))goto LABEL_59; {
LABEL_70:
    }
    int v53 = 0;
  }
  if (*(void *)(a1 + 40) && *(void *)(a1 + 640) != *(void *)(a1 + 632))
  {
    do
    {
      uint64_t v57 = objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(void *)(a1 + 112) + 1, v50, v65);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      unint64_t v58 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, (double *)(a1 + 120));
      uint8x8_t v59 = [v57 startDate];
      [v59 timeIntervalSinceReferenceDate];
      double v61 = v60;
      uint64_t v62 = [v57 endDate];
      [v62 timeIntervalSinceReferenceDate];
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
    }
    while (*(void *)(a1 + 640) != *(void *)(a1 + 632));
  }
  *(unsigned char *)(a1 + 666) = 0;
  if (__p) {
    operator delete(__p);
  }

  if (v53)
  {
    if (*(unsigned char *)(a1 + 668))
    {
      *(unsigned char *)(a1 + 668) = 0;
      id v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
      uint64_t v7 = 1;
      goto LABEL_82;
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v6 = v65;
LABEL_82:
  *(unsigned char *)(a1 + 666) = 0;
LABEL_83:

  return v7;
}

void sub_1BD0E6D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    *(unsigned char *)(v13 + 666) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(unsigned char *)(result + 667) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(unsigned char *)(a1 + 666)) {
      goto LABEL_12;
    }
    uint64_t v7 = 0;
LABEL_14:
    uint64_t v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval((id *)a1, v7, a3);
    goto LABEL_15;
  }
  uint64_t v7 = [v6 dateIntervalForIntervalsContainingInterval:v5];

  if (!*(unsigned char *)(a1 + 666)) {
    goto LABEL_14;
  }
  if (!v7)
  {
LABEL_12:
    id v12 = *(void **)(a1 + 688);
    *(void *)(a1 + 688) = 0;

    uint64_t v7 = 0;
    uint64_t v11 = 1;
    *(unsigned char *)(a1 + 665) = 1;
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 665))
  {
    int v8 = *(void **)(a1 + 688);
    if (!v8)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      id v10 = *(void **)(a1 + 688);
      *(void *)(a1 + 688) = v9;

      int v8 = *(void **)(a1 + 688);
    }
    [v8 addObject:v7];
  }
  uint64_t v11 = 1;
LABEL_15:

  return v11;
}

void sub_1BD0E7004(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    *(unsigned char *)(a1 + 664) = 1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v9[3] = &unk_1E63043E8;
    uint64_t v12 = a1;
    id v10 = v5;
    id v11 = WeakRetained;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 112))(a1, v9, a3);
    if (v7 && *(unsigned char *)(a1 + 664) && !*(void *)(a1 + 40)) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to query for initial statistics: no data source available.");
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1BD0E7158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::reset(uint64_t result)
{
  *(unsigned char *)(result + 664) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 encodeBool:*(unsigned __int8 *)(a1 + 664) forKey:@"needs_config"];
  id v12 = v3;
  int v32 = &unk_1F1726FA0;
  long long v33 = 0;
  int v38 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
  LOBYTE(v38) = 1;
  uint64_t v34 = v4;
  uint64_t v35 = 0;
  statistics::StatisticsEngine::makeCurrentBucket((uint64_t)&v32);
  uint64_t v13 = &unk_1F171B9C8;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  int v31 = 511;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 0;
  int8x16_t v14 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  uint64_t v5 = *(void *)(a1 + 136);
  char v29 = *(unsigned char *)(a1 + 144);
  char v30 = *(unsigned char *)(a1 + 145);
  BOOL v28 = *(_DWORD *)(a1 + 148) == 0;
  int8x16_t v15 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  uint64_t v7 = *(int8x16_t **)(a1 + 216);
  if (v7 != *(int8x16_t **)(a1 + 224))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v7, *v7, 8uLL);
    int8x16_t v40 = v7[1];
    char v43 = 0;
    HIBYTE(v42) = v7[2].i8[9];
    LOBYTE(v42) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>();
  }
  statistics::StatisticsBucket::makeStatistics((uint64_t)&v13);
  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::archive((uint64_t)&v39, (int8x16_t *)(a1 + 240));
  statistics::Statistics::operator=(*((statistics **)&v22 + 1), (uint64_t)&v39);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v39);
  uint64_t v8 = *(void *)(a1 + 424);
  if (v8 != a1 + 432)
  {
    HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::archive((uint64_t)&v39, (int8x16_t *)(v8 + 40));
    uint64_t v9 = *(void *)(v8 + 32);
    v46 |= 0x200u;
    uint64_t v45 = v9;
    PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>();
  }
  id v10 = *(int8x16_t **)(a1 + 184);
  if (v10 != *(int8x16_t **)(a1 + 192))
  {
    unint64_t v39 = (char *)&unk_1F1727540;
    v41.i32[0] = 3;
    int8x16_t v40 = vextq_s8(*v10, *v10, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>();
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v13);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v13);
  id v11 = *(int8x16_t **)(a1 + 632);
  if (v11 != *(int8x16_t **)(a1 + 640))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v11, *v11, 8uLL);
    int8x16_t v40 = v11[1];
    __int16 v42 = 0;
    char v43 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>();
  }
  PB::Writer::Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v39);
  [v12 encodeBytes:v40.i64[0] length:&v39[-v40.i64[0]] forKey:@"hdsce_archived_representation"];
  PB::Writer::~Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);
}

void sub_1BD0E7558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v66 = a2;
  *(unsigned char *)(a1 + 664) = [v66 decodeBoolForKey:@"needs_config"];
  id v65 = v66;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v70, 0, -1.79769313e308, 1.79769313e308);
  long long v71 = 0u;
  long long v72 = 0u;
  unint64_t v114 = 0;
  id v3 = v65;
  PB::Reader::Reader((PB::Reader *)v113, (const unsigned __int8 *)[v3 decodeBytesForKey:@"hdsce_archived_representation" returnedLength:&v114]);
  long long v106 = &unk_1F1726FA0;
  uint64_t v107 = 0;
  uint64_t v111 = 0;
  uint64_t v109 = 0;
  uint64_t v110 = 0;
  int v112 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v106, (PB::Reader *)v113);
  id v68 = v3;
  uint64_t v4 = v107;
  uint64_t v69 = v108;
  if (v107)
  {
    uint64_t v76 = 0;
    memset(v79, 0, sizeof(v79));
    long long __p = 0;
    long long v84 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    memset(v87, 0, 26);
    unint64_t v82 = 0;
    unint64_t v81 = 0;
    int v83 = 0;
    long long v88 = [[HDQuantitySampleOverlapProcessor alloc] initWithOverlapFunction:1];
    __int16 v89 = 257;
    memset(v90, 0, 74);
    uint64_t v93 = 0;
    double v92 = 0;
    unint64_t v91 = &v92;
    memset(v94, 0, sizeof(v94));
    long long v64 = v94;
    int v95 = 1065353216;
    long long v96 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    uint64_t v99 = 0;
    int v100 = 1065353216;
    long long v101 = 0u;
    long long v102 = 0u;
    int v103 = 1065353216;
    memset(v104, 0, sizeof(v104));
    double v63 = v104;
    int v105 = 1065353216;
    int8x16_t v73 = vextq_s8(*(int8x16_t *)(v4 + 8), *(int8x16_t *)(v4 + 8), 8uLL);
    uint64_t v5 = *(void *)(v4 + 72);
    uint64_t v74 = *(void *)(v4 + 64);
    __int16 v75 = *(_WORD *)(v4 + 185);
    int8x16_t v77 = vextq_s8(*(int8x16_t *)(v4 + 24), *(int8x16_t *)(v4 + 24), 8uLL);
    uint64_t v78 = v5;
    uint64_t v67 = (void *)v4;
    uint64_t v6 = *(void *)(v4 + 80);
    uint64_t v7 = *(void *)(v4 + 88);
    if (v6 != v7)
    {
      uint64_t v8 = v81;
      do
      {
        uint64_t v9 = *(void *)(*(void *)v6 + 24);
        uint64_t v10 = *(void *)(*(void *)v6 + 32);
        uint64_t v11 = *(void *)(*(void *)v6 + 8);
        uint64_t v12 = *(void *)(*(void *)v6 + 16);
        char v13 = *(unsigned char *)(*(void *)v6 + 41);
        char v14 = *(unsigned char *)(*(void *)v6 + 40);
        if ((unint64_t)v8 >= v82)
        {
          int8x16_t v15 = (char *)__p;
          unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (unsigned char *)__p) >> 4);
          unint64_t v17 = v16 + 1;
          if (v16 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v82 - (void)__p) >> 4) > v17) {
            unint64_t v17 = 0x5555555555555556 * ((uint64_t)(v82 - (void)__p) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v82 - (void)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v18 = 0x555555555555555;
          }
          else {
            unint64_t v18 = v17;
          }
          if (v18)
          {
            unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v18);
            uint64_t v8 = v81;
            int8x16_t v15 = (char *)__p;
          }
          else
          {
            uint64_t v19 = 0;
          }
          uint64_t v20 = (void *)(v18 + 48 * v16);
          *uint64_t v20 = v10;
          v20[1] = v9;
          v20[2] = v11;
          v20[3] = v12;
          *((_WORD *)v20 + 16) = 1;
          *((unsigned char *)v20 + 40) = 0;
          *((unsigned char *)v20 + 41) = v13;
          *((unsigned char *)v20 + 42) = v14;
          long long v21 = (char *)v20;
          if (v8 != v15)
          {
            do
            {
              long long v22 = *((_OWORD *)v8 - 3);
              long long v23 = *((_OWORD *)v8 - 2);
              *(_OWORD *)(v21 - 21) = *(_OWORD *)(v8 - 21);
              *((_OWORD *)v21 - 3) = v22;
              *((_OWORD *)v21 - 2) = v23;
              v21 -= 48;
              v8 -= 48;
            }
            while (v8 != v15);
            int8x16_t v15 = (char *)__p;
          }
          uint64_t v8 = (char *)(v20 + 6);
          long long __p = v21;
          unint64_t v81 = (char *)(v20 + 6);
          unint64_t v82 = v18 + 48 * v19;
          if (v15) {
            operator delete(v15);
          }
        }
        else
        {
          *(void *)uint64_t v8 = v10;
          *((void *)v8 + 1) = v9;
          *((void *)v8 + 2) = v11;
          *((void *)v8 + 3) = v12;
          *((_WORD *)v8 + 16) = 1;
          v8[40] = 0;
          v8[41] = v13;
          v8[42] = v14;
          v8 += 48;
        }
        unint64_t v81 = v8;
        v6 += 8;
      }
      while (v6 != v7);
    }
    long long v24 = (void *)v67[13];
    if (v24)
    {
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::unarchive((uint64_t)&v115, v24);
      int v83 = v115;
      long long v86 = v118;
      v87[0] = v119[0];
      *(_OWORD *)((char *)v87 + 10) = *(_OWORD *)((char *)v119 + 10);
      long long v84 = v116;
      long long v85 = v117;
      objc_storeStrong((id *)&v88, obj);
      __int16 v89 = v121;
      v90[0] = v122;
      if (v90[1])
      {
        void v90[2] = v90[1];
        operator delete((void *)v90[1]);
      }
      *(_OWORD *)&v90[1] = v123;
      v90[3] = v124;
      uint64_t v124 = 0;
      long long v123 = 0uLL;
      v90[4] = v125;
      *(_OWORD *)&v90[5] = v126;
      *(_OWORD *)&v90[7] = v127;
      LOWORD(v90[9]) = v128;
    }
    long long v26 = (void **)v67[17];
    for (uint64_t i = (void **)v67[18]; v26 != i; ++v26)
    {
      uint64_t v27 = (uint64_t)*v26;
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::unarchive((uint64_t)&v115, *v26);
      uint64_t v28 = *(void *)(v27 + 144);
      char v29 = v92;
      for (j = &v92; ; char v29 = *j)
      {
        int v31 = j;
        if (!v29) {
          break;
        }
        while (1)
        {
          uint64_t j = (uint64_t **)v29;
          uint64_t v32 = v29[4];
          if (v32 > v28) {
            break;
          }
          if (v32 >= v28)
          {
            long long v33 = (char *)j;
            goto LABEL_37;
          }
          char v29 = j[1];
          if (!v29)
          {
            int v31 = j + 1;
            goto LABEL_34;
          }
        }
      }
LABEL_34:
      long long v33 = (char *)operator new(0xE0uLL);
      v129[0] = v33;
      v129[1] = &v92;
      char v130 = 0;
      *((void *)v33 + 4) = v28;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *(_OWORD *)(v33 + 120) = 0u;
      *(_OWORD *)(v33 + 136) = 0u;
      *(_OWORD *)(v33 + 152) = 0u;
      *(_OWORD *)(v33 + 168) = 0u;
      *(_OWORD *)(v33 + 184) = 0u;
      *(_OWORD *)(v33 + 200) = 0u;
      *((void *)v33 + 27) = 0;
      *((void *)v33 + 16) = -[HDQuantitySampleOverlapProcessor initWithOverlapFunction:]([HDQuantitySampleOverlapProcessor alloc], "initWithOverlapFunction:", 1, v63, v64, v65);
      *((_WORD *)v33 + 68) = 257;
      *((_OWORD *)v33 + 9) = 0u;
      *((_OWORD *)v33 + 10) = 0u;
      *((_OWORD *)v33 + 11) = 0u;
      *((_OWORD *)v33 + 12) = 0u;
      *(_OWORD *)(v33 + 202) = 0u;
      char v130 = 1;
      *(void *)long long v33 = 0;
      *((void *)v33 + 1) = 0;
      *((void *)v33 + 2) = j;
      void *v31 = (uint64_t *)v33;
      uint64_t v34 = (uint64_t *)v33;
      if (*v91)
      {
        unint64_t v91 = (uint64_t **)*v91;
        uint64_t v34 = *v31;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v92, v34);
      ++v93;
      v129[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v129);
LABEL_37:
      *((_DWORD *)v33 + 10) = v115;
      long long v35 = v117;
      *((_OWORD *)v33 + 3) = v116;
      long long v36 = *(_OWORD *)((char *)v119 + 10);
      long long v38 = v118;
      long long v37 = v119[0];
      *((_OWORD *)v33 + 4) = v35;
      *((_OWORD *)v33 + 5) = v38;
      *((_OWORD *)v33 + 6) = v37;
      *(_OWORD *)(v33 + 106) = v36;
      objc_storeStrong((id *)v33 + 16, obj);
      unint64_t v39 = (void *)*((void *)v33 + 19);
      *((_WORD *)v33 + 68) = v121;
      *((void *)v33 + 18) = v122;
      if (v39)
      {
        *((void *)v33 + 20) = v39;
        operator delete(v39);
        *((void *)v33 + 19) = 0;
        *((void *)v33 + 20) = 0;
        *((void *)v33 + 21) = 0;
      }
      *(_OWORD *)(v33 + 152) = v123;
      id v40 = obj;
      *((void *)v33 + 21) = v124;
      *((void *)v33 + 22) = v125;
      long long v41 = v127;
      *(_OWORD *)(v33 + 184) = v126;
      *((_WORD *)v33 + 108) = v128;
      uint64_t v124 = 0;
      long long v123 = 0uLL;
      *(_OWORD *)(v33 + 200) = v41;
    }
    uint64_t v42 = v67[5];
    for (uint64_t k = v67[6]; v42 != k; v42 += 8)
    {
      double v45 = *(double *)(*(void *)v42 + 8);
      double v44 = *(double *)(*(void *)v42 + 16);
      if (v45 >= v44) {
        double v46 = *(double *)(*(void *)v42 + 16);
      }
      else {
        double v46 = *(double *)(*(void *)v42 + 8);
      }
      if (v44 < v45) {
        double v44 = *(double *)(*(void *)v42 + 8);
      }
      HKIntervalMask<double>::_insertInterval(v79, v46, v44);
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::operator=((uint64_t)v70, (uint64_t)&v73);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v73);
  }
  uint64_t v47 = v109;
  uint64_t v48 = v110;
  if (v109 != v110)
  {
    unint64_t v49 = *((void *)&v71 + 1);
    do
    {
      uint64_t v50 = *(void *)(*(void *)v47 + 24);
      uint64_t v51 = *(void *)(*(void *)v47 + 32);
      uint64_t v52 = *(void *)(*(void *)v47 + 8);
      uint64_t v53 = *(void *)(*(void *)v47 + 16);
      if (v49 >= (unint64_t)v72)
      {
        uint64_t v54 = (void *)v71;
        unint64_t v55 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v49 - v71) >> 3);
        unint64_t v56 = v55 + 1;
        if (v55 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(v72 - v71) >> 3) > v56) {
          unint64_t v56 = 0x999999999999999ALL * ((uint64_t)(v72 - v71) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v72 - v71) >> 3) >= 0x333333333333333) {
          unint64_t v57 = 0x666666666666666;
        }
        else {
          unint64_t v57 = v56;
        }
        if (v57)
        {
          unint64_t v57 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v57);
          unint64_t v49 = *((void *)&v71 + 1);
          uint64_t v54 = (void *)v71;
        }
        else
        {
          uint64_t v58 = 0;
        }
        unint64_t v59 = v57 + 40 * v55;
        *(void *)unint64_t v59 = v51;
        *(void *)(v59 + 8) = v50;
        *(void *)(v59 + 16) = v52;
        *(void *)(v59 + 24) = v53;
        *(_WORD *)(v59 + 32) = 1;
        unint64_t v60 = v59;
        if ((void *)v49 != v54)
        {
          do
          {
            long long v61 = *(_OWORD *)(v49 - 40);
            long long v62 = *(_OWORD *)(v49 - 24);
            *(_WORD *)(v60 - 8) = *(_WORD *)(v49 - 8);
            *(_OWORD *)(v60 - 24) = v62;
            *(_OWORD *)(v60 - 40) = v61;
            v60 -= 40;
            v49 -= 40;
          }
          while ((void *)v49 != v54);
          uint64_t v54 = (void *)v71;
        }
        *(void *)&long long v71 = v60;
        unint64_t v49 = v59 + 40;
        *((void *)&v71 + 1) = v59 + 40;
        *(void *)&long long v72 = v57 + 40 * v58;
        if (v54) {
          operator delete(v54);
        }
      }
      else
      {
        *(void *)unint64_t v49 = v51;
        *(void *)(v49 + 8) = v50;
        *(void *)(v49 + 16) = v52;
        *(void *)(v49 + 24) = v53;
        *(_WORD *)(v49 + 32) = 1;
        v49 += 40;
      }
      *((void *)&v71 + 1) = v49;
      v47 += 8;
    }
    while (v47 != v48);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v106);

  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::operator=((void *)(a1 + 112), (uint64_t)&v69);
  if ((void)v71)
  {
    *((void *)&v71 + 1) = v71;
    operator delete((void *)v71);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v70);
}

void sub_1BD0E7DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a2);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table((uint64_t)&STACK[0x420]);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x3F8]);
  uint64_t v11 = (void *)STACK[0x3E0];
  if (STACK[0x3E0])
  {
    STACK[0x3E8] = (unint64_t)v11;
    operator delete(v11);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a3);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>>::destroy((void *)STACK[0x3A8]);
  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::~HDStatisticsRelative((uint64_t)&STACK[0x2E8]);
  uint64_t v12 = (void *)STACK[0x2D0];
  if (STACK[0x2D0])
  {
    STACK[0x2D8] = (unint64_t)v12;
    operator delete(v12);
  }
  objc_destroyWeak((id *)&STACK[0x2C8]);
  char v13 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v13;
    operator delete(v13);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x470]);
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(double *)(a1 + 56) = a3;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 186) = 0u;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(void *)(a1 + 208) = [[HDQuantitySampleOverlapProcessor alloc] initWithOverlapFunction:1];
  *(_WORD *)(a1 + 216) = 257;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 282) = 0u;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 304) = a1 + 312;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_DWORD *)(a1 + 360) = 1065353216;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(void *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 424) = 1065353216;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_DWORD *)(a1 + 464) = 1065353216;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_DWORD *)(a1 + 504) = 1065353216;
  return a1;
}

void sub_1BD0E8010(_Unwind_Exception *a1)
{
  uint64_t v6 = v3;
  uint64_t v8 = *v6;
  if (*v6)
  {
    *(void *)(v1 + 104) = v8;
    operator delete(v8);
  }
  objc_destroyWeak(v2);
  uint64_t v9 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 72) = v9;
    operator delete(v9);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>::~HDStatisticsCombined(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(void *)(a1 + 112) = v2;
    operator delete(v2);
  }

  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 520);
  if (v2)
  {
    *(void *)(a1 + 528) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 472);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 432);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 392);
  uint64_t v2 = *(void **)(a1 + 368);
  if (v2)
  {
    *(void *)(a1 + 376) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 328);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>>::destroy(*(void **)(a1 + 312));
  id v3 = *(void **)(a1 + 232);
  if (v3)
  {
    *(void *)(a1 + 240) = v3;
    operator delete(v3);
  }

  uint64_t v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(void *)(a1 + 104) = v4;
    operator delete(v4);
  }
  objc_destroyWeak((id *)(a1 + 88));
  uint64_t v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(void *)(a1 + 72) = v5;
    operator delete(v5);
  }

  return a1;
}

uint64_t HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::~HDStatisticsRelative(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(void *)(a1 + 120) = v2;
    operator delete(v2);
  }

  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<long long const,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,0>(a1 + 4);
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<long long const,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,0>(void *a1)
{
  uint64_t v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  id v3 = (void *)a1[12];
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_configureForStartTime(uint64_t a1)
{
  uint64_t v29 = 0;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
    uint64_t v4 = [v2 dateIntervalContainingDate:v3 index:&v29];

    uint64_t v5 = [v4 startDate];
    [v5 timeIntervalSinceReferenceDate];
    double v7 = v6;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
LABEL_5:
    double v13 = v9;

    goto LABEL_6;
  }
  id v10 = *(id *)(a1 + 64);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v11 = [v10 startDate];
    [v11 timeIntervalSinceReferenceDate];
    double v7 = v12;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
    goto LABEL_5;
  }
  double v7 = -1.79769313e308;
  double v13 = 1.79769313e308;
LABEL_6:

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v22, WeakRetained, v7, v13);

  if (*(void *)(a1 + 32) == 1) {
    char v24 = 1;
  }
  uint64_t v23 = *(void *)(a1 + 56);
  char v25 = *(unsigned char *)(a1 + 24) & 1;
  if (v28 != (char *)(a1 + 72)) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v28, *(char **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4);
  }
  objc_storeStrong(&v27, *(id *)(a1 + 680));
  if (!*(void *)(a1 + 40)) {
    int v26 = 0;
  }
  uint64_t v15 = v29;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v22);
  uint64_t v18 = v15;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v19, (uint64_t)v17);
  long long __p = 0u;
  long long v21 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::operator=((void *)(a1 + 112), (uint64_t)&v18);

  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v19);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v17);
  *(unsigned char *)(a1 + 664) = 0;
  return HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v22);
}

void sub_1BD0E8500(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::operator=(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::operator=((uint64_t)(a1 + 1), a2 + 8);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 65), (__n128 *)(a2 + 520));
  uint64_t v4 = *(void *)(a2 + 544);
  *(void *)(a2 + 544) = 0;
  uint64_t v5 = (void *)a1[68];
  a1[68] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 96);
  double v7 = *(unsigned char **)(a2 + 104);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(void *)(a1 + 96) = v10;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(void *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)(a1 + 128), (const HDStatisticsNoiseLevel *)(a2 + 128));
  uint64_t v12 = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 224) = v12;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 232), *(const void **)(a2 + 232), *(void *)(a2 + 240), (uint64_t)(*(void *)(a2 + 240) - *(void *)(a2 + 232)) >> 4);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  long long v13 = *(_OWORD *)(a2 + 280);
  uint64_t v14 = *(void *)(a2 + 296);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v13;
  uint64_t v15 = (uint64_t **)(a1 + 312);
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 296) = v14;
  *(void *)(a1 + 304) = a1 + 312;
  unint64_t v16 = *(void **)(a2 + 304);
  if (v16 != (void *)(a2 + 312))
  {
    do
    {
      unint64_t v17 = *v15;
      uint64_t v18 = (uint64_t *)(a1 + 312);
      if (*(uint64_t ***)(a1 + 304) == v15) {
        goto LABEL_11;
      }
      uint64_t v19 = *v15;
      uint64_t v20 = (uint64_t *)(a1 + 312);
      if (v17)
      {
        do
        {
          uint64_t v18 = v19;
          uint64_t v19 = (uint64_t *)v19[1];
        }
        while (v19);
      }
      else
      {
        do
        {
          uint64_t v18 = (uint64_t *)v20[2];
          BOOL v21 = *v18 == (void)v20;
          uint64_t v20 = v18;
        }
        while (v21);
      }
      uint64_t v22 = v16[4];
      if (v18[4] < v22)
      {
LABEL_11:
        if (v17) {
          uint64_t v23 = (uint64_t **)v18;
        }
        else {
          uint64_t v23 = (uint64_t **)(a1 + 312);
        }
        if (v17) {
          char v24 = (uint64_t **)(v18 + 1);
        }
        else {
          char v24 = (uint64_t **)(a1 + 312);
        }
        if (*v24) {
          goto LABEL_28;
        }
      }
      else
      {
        char v24 = (uint64_t **)(a1 + 312);
        uint64_t v23 = (uint64_t **)(a1 + 312);
        if (v17)
        {
          char v25 = *v15;
          while (1)
          {
            while (1)
            {
              uint64_t v23 = (uint64_t **)v25;
              uint64_t v26 = v25[4];
              if (v26 <= v22) {
                break;
              }
              char v25 = *v23;
              char v24 = v23;
              if (!*v23) {
                goto LABEL_27;
              }
            }
            if (v26 >= v22) {
              goto LABEL_28;
            }
            char v25 = v23[1];
            if (!v25)
            {
              char v24 = v23 + 1;
              break;
            }
          }
        }
      }
LABEL_27:
      id v27 = (char *)operator new(0xE0uLL);
      v34[0] = v27;
      v34[1] = a1 + 312;
      char v35 = 0;
      *((void *)v27 + 4) = v16[4];
      *((_DWORD *)v27 + 10) = *((_DWORD *)v16 + 10);
      HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)(v27 + 48), (const HDStatisticsNoiseLevel *)(v16 + 6));
      uint64_t v28 = v16[18];
      *((void *)v27 + 19) = 0;
      *((void *)v27 + 18) = v28;
      *((void *)v27 + 20) = 0;
      *((void *)v27 + 21) = 0;
      std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)v27 + 19, (const void *)v16[19], v16[20], (uint64_t)(v16[20] - v16[19]) >> 4);
      *((void *)v27 + 22) = v16[22];
      long long v29 = *(_OWORD *)(v16 + 23);
      long long v30 = *(_OWORD *)(v16 + 25);
      *((void *)v27 + 27) = v16[27];
      *(_OWORD *)(v27 + 200) = v30;
      *(_OWORD *)(v27 + 184) = v29;
      char v35 = 1;
      std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 304), (uint64_t)v23, v24, (uint64_t *)v27);
      v34[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v34);
LABEL_28:
      int v31 = (void *)v16[1];
      if (v31)
      {
        do
        {
          uint64_t v32 = v31;
          int v31 = (void *)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          uint64_t v32 = (void *)v16[2];
          BOOL v21 = *v32 == (void)v16;
          unint64_t v16 = v32;
        }
        while (!v21);
      }
      unint64_t v16 = v32;
    }
    while (v32 != (void *)(a2 + 312));
  }
  std::unordered_set<long long>::unordered_set(a1 + 328, a2 + 328);
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 368), *(const void **)(a2 + 368), *(void *)(a2 + 376), (uint64_t)(*(void *)(a2 + 376) - *(void *)(a2 + 368)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 392, a2 + 392);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 432, a2 + 432);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 472, a2 + 472);
  return a1;
}

void sub_1BD0E892C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, id *location, void **a13, char a14)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v19);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v18);
  BOOL v21 = *v17;
  if (*v17)
  {
    *(void *)(v14 + 376) = v21;
    operator delete(v21);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>>::destroy(*v15);
  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::~HDStatisticsRelative(a10);
  uint64_t v22 = *a11;
  if (*a11)
  {
    *(void *)(v14 + 104) = v22;
    operator delete(v22);
  }
  objc_destroyWeak(location);
  uint64_t v23 = *a13;
  if (*a13)
  {
    *(void *)(v14 + 72) = v23;
    operator delete(v23);
  }

  _Unwind_Resume(a1);
}

void HDStatisticsNoiseLevel::HDStatisticsNoiseLevel(HDStatisticsNoiseLevel *this, const HDStatisticsNoiseLevel *a2)
{
  uint64_t v2 = MEMORY[0x1F4188790](this);
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  *(_OWORD *)(v2 + 58) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)uint64_t v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(void *)(v2 + 80) = [[HDQuantitySampleOverlapProcessor alloc] initWithOverlapFunction:1];
  *(_WORD *)(v5 + 88) = 257;
  *(_OWORD *)uint64_t v5 = *(_OWORD *)v4;
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(v4 + 16);
  *(void *)(v5 + 32) = *(void *)(v4 + 32);
  long long v6 = *(_OWORD *)(v4 + 40);
  long long v7 = *(_OWORD *)(v4 + 56);
  *(_WORD *)(v5 + 72) = *(_WORD *)(v4 + 72);
  *(_OWORD *)(v5 + 56) = v7;
  *(_OWORD *)(v5 + 40) = v6;
  *(unsigned char *)(v5 + 88) = *(unsigned char *)(v4 + 88);
  uint64_t v8 = [HDQuantitySampleOverlapProcessor alloc];
  uint64_t v9 = *(void **)(v4 + 80);
  if (v9) {
    [v9 exportCurrentState];
  }
  else {
    bzero(v12, 0x1420uLL);
  }
  uint64_t v10 = [(HDQuantitySampleOverlapProcessor *)v8 initWithState:v12];
  uint64_t v11 = *(void **)(v5 + 80);
  *(void *)(v5 + 80) = v10;
}

void sub_1BD0E8B18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<long long const,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,0>(v1 + 4);
    }
    operator delete(v1);
  }
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::operator=(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  long long v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v5;

  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  id WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  uint64_t v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(void *)(a1 + 104) = v9;
    operator delete(v9);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  int v10 = *(_DWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(_DWORD *)(a1 + 120) = v10;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  long long v11 = *(_OWORD *)(a2 + 144);
  long long v12 = *(_OWORD *)(a2 + 160);
  long long v13 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 186) = *(_OWORD *)(a2 + 186);
  *(_OWORD *)(a1 + 176) = v13;
  *(_OWORD *)(a1 + 160) = v12;
  *(_OWORD *)(a1 + 144) = v11;
  objc_storeStrong((id *)(a1 + 208), *(id *)(a2 + 208));
  *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 232, (__n128 *)(a2 + 232));
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  long long v14 = *(_OWORD *)(a2 + 264);
  long long v15 = *(_OWORD *)(a2 + 280);
  *(_WORD *)(a1 + 296) = *(_WORD *)(a2 + 296);
  *(_OWORD *)(a1 + 264) = v14;
  *(_OWORD *)(a1 + 280) = v15;
  uint64_t v16 = a1 + 312;
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>>::destroy(*(void **)(a1 + 312));
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  uint64_t v17 = *(void *)(a2 + 312);
  *(void *)(a1 + 312) = v17;
  uint64_t v18 = *(void *)(a2 + 320);
  *(void *)(a1 + 320) = v18;
  if (v18)
  {
    *(void *)(v17 + 16) = v16;
    *(void *)(a2 + 304) = a2 + 312;
    *(void *)(a2 + 312) = 0;
    *(void *)(a2 + 320) = 0;
  }
  else
  {
    *(void *)(a1 + 304) = v16;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 328, (uint64_t *)(a2 + 328));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 368, (__n128 *)(a2 + 368));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 392, (uint64_t *)(a2 + 392));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 432, (uint64_t *)(a2 + 432));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 472, (uint64_t *)(a2 + 472));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(uint64_t a1, double *a2)
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  double v3 = *a2;
  id v4 = objc_alloc(MEMORY[0x1E4F1C9C8]);
  uint64_t v5 = a2 + 5;
  if (v3 != -1.79769313e308) {
    uint64_t v5 = a2;
  }
  long long v6 = (void *)[v4 initWithTimeIntervalSinceReferenceDate:*v5];
  uint64_t v90 = (uint64_t)a2;
  if (a2[1] == 1.79769313e308) {
    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:a2[6]];
  }
  else {
    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:a2[1]];
  }
  uint64_t v8 = (void *)v7;
  id v9 = *(id *)(a1 + 16);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v10 = *(id *)(a1 + 16);
    if ([v10 shouldUseUnderlyingTypeForStatistics])
    {
      uint64_t v11 = [v10 underlyingSampleType];

      id v9 = (id)v11;
    }
  }
  long long v12 = (void *)[objc_alloc(MEMORY[0x1E4F2B5B0]) initWithDataType:v9 startDate:v6 endDate:v8];
  if (*(unsigned char *)(a1 + 24))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      id v14 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      long long v15 = *(uint64_t **)(v90 + 368);
      uint64_t v16 = *(uint64_t **)(v90 + 376);
      while (v15 != v16)
      {
        uint64_t v17 = *v15;
        id v18 = objc_loadWeakRetained((id *)(a1 + 48));
        uint64_t v19 = [v18 sourceForSourceID:v17];

        if (v19)
        {
          if (([v14 containsObject:v19] & 1) == 0) {
            [v14 addObject:v19];
          }
        }

        ++v15;
      }
      uint64_t v20 = (void *)[v14 copy];
      [v12 _setSources:v20];
    }
  }

  v107[0] = &unk_1F1724830;
  v107[3] = v107;
  id v85 = v12;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)v111, (uint64_t)v107);
  double v115 = 0.0;
  double v21 = COERCE_DOUBLE(operator new(0x28uLL));
  **(void **)&double v21 = &unk_1F1724710;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100](*(void *)&v21 + 8, (uint64_t)v111);
  double v115 = v21;
  id v92 = v85;
  uint64_t v22 = (void *)0x1E4F2B000;
  uint64_t v23 = (void *)MEMORY[0x1E4F2B370];
  char v24 = [MEMORY[0x1E4F2B618] secondUnit];
  __n128 v25 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)&v96, v90);
  if (v115 == 0.0) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v26 = (*(uint64_t (**)(double, double *, __n128))(**(void **)&v115 + 48))(COERCE_DOUBLE(*(void *)&v115), &v96, v25);
  id v27 = *(double **)(v26 + 8);
  double v28 = 0.0;
  while (v27 != *(double **)(v26 + 16))
  {
    double v30 = *v27;
    double v29 = v27[1];
    v27 += 2;
    double v28 = v28 + v29 - v30;
  }
  int v31 = [v23 quantityWithUnit:v24 doubleValue:v28 + *(double *)(v26 + 32)];
  [v92 setDuration:v31];

  if (__p)
  {
    long long v106 = __p;
    operator delete(__p);
  }

  __n128 v32 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)&v96, v90);
  if (v115 == 0.0) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  objc_msgSend(v92, "setDataCount:", *(void *)(*(uint64_t (**)(double, double *, __n128))(**(void **)&v115 + 48))(COERCE_DOUBLE(*(void *)&v115), &v96, v32));
  if (__p)
  {
    long long v106 = __p;
    operator delete(__p);
  }

  if (*(unsigned char *)(a1 + 24))
  {
    id v33 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v34 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier((uint64_t)&v96, v90);
    for (double i = v98; i != 0.0; double i = **(double **)&i)
    {
      id v36 = *(id *)(*(void *)&i + 16);
      long long v37 = (void *)MEMORY[0x1E4F2B370];
      long long v38 = [MEMORY[0x1E4F2B618] secondUnit];
      if (v115 == 0.0) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v39 = (*(uint64_t (**)(double, uint64_t))(**(void **)&v115 + 48))(COERCE_DOUBLE(*(void *)&v115), *(void *)&i + 24);
      id v40 = *(double **)(v39 + 8);
      double v41 = 0.0;
      while (v40 != *(double **)(v39 + 16))
      {
        double v43 = *v40;
        double v42 = v40[1];
        v40 += 2;
        double v41 = v41 + v42 - v43;
      }
      double v44 = [v37 quantityWithUnit:v38 doubleValue:v41 + *(double *)(v39 + 32)];
      [v33 setObject:v44 forKeyedSubscript:v36];

      if (v115 == 0.0) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      double v45 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)(*(uint64_t (**)(double, uint64_t))(**(void **)&v115 + 48))(COERCE_DOUBLE(*(void *)&v115), *(void *)&i + 24));
      [v34 setObject:v45 forKeyedSubscript:v36];
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>>::~__hash_table((uint64_t)&v96);
    [v92 setDurationBySource:v33];
    [v92 setDataCountBySource:v34];
  }
  std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](&v112);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v111);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)v108, (uint64_t)v107);
  uint64_t v110 = 0;
  double v46 = operator new(0x28uLL);
  *double v46 = &unk_1F17247A0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(v46 + 1), (uint64_t)v108);
  uint64_t v110 = v46;
  id v93 = v92;
  __n128 v47 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)&v96, v90);
  if (!v110) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v48 = (const HDStatisticsNoiseLevel *)(*(uint64_t (**)(void *, double *, __n128))(*v110 + 48))(v110, &v96, v47);
  HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)&v112, v48);
  if (__p)
  {
    long long v106 = __p;
    operator delete(__p);
  }

  HDStatisticsNoiseLevel::finalizeSamples((HDStatisticsNoiseLevel *)&v112);
  uint64_t v49 = *(void *)(a1 + 24);
  uint64_t v50 = _HKStatisticsOptionBaselineRelativeQuantities();
  uint64_t v51 = *(void **)(a1 + 16);
  if ((v50 & v49) != 0) {
    [v51 _unitForChangeInCanonicalUnit];
  }
  else {
  uint64_t v52 = [v51 canonicalUnit];
  }
  if ((v49 & 2) != 0)
  {
    double v53 = 0.0;
    if (v113 > 0.0 && v112 > 0.0) {
      double v53 = log10(v112 / v113) * 10.0;
    }
    uint64_t v54 = [MEMORY[0x1E4F2B370] quantityWithUnit:v52 doubleValue:v53];
    [v93 setAverageQuantity:v54];
  }
  if ((v49 & 4) != 0)
  {
    unint64_t v55 = [MEMORY[0x1E4F2B370] quantityWithUnit:v52 doubleValue:v115];
    [v93 setMinimumQuantity:v55];
  }
  if ((v49 & 8) != 0)
  {
    unint64_t v56 = [MEMORY[0x1E4F2B370] quantityWithUnit:v52 doubleValue:v114];
    [v93 setMaximumQuantity:v56];
  }
  if ((v49 & 0x20) != 0)
  {
    double v57 = v118;
    double v58 = v119;
    unint64_t v59 = [MEMORY[0x1E4F2B370] quantityWithUnit:v52 doubleValue:v117];
    [v93 setMostRecentQuantity:v59];

    unint64_t v60 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v57, v58);
    [v93 setMostRecentQuantityDateInterval:v60];
  }
  [v93 setDataCount:v116];
  if (*(unsigned char *)(a1 + 24))
  {
    if ((v49 & 2) != 0) {
      id v89 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    }
    else {
      id v89 = 0;
    }
    if ((v49 & 4) != 0) {
      id v88 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    }
    else {
      id v88 = 0;
    }
    if ((v49 & 8) != 0) {
      id v87 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    }
    else {
      id v87 = 0;
    }
    if ((v49 & 0x20) != 0)
    {
      id v86 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      id v61 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    }
    else
    {
      id v61 = 0;
      id v86 = 0;
    }
    id v62 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier((uint64_t)v94, v90);
    for (uint64_t j = v95; j; uint64_t j = (uint64_t **)*j)
    {
      long long v64 = j[2];
      if (!v110) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      id v65 = (const HDStatisticsNoiseLevel *)(*(uint64_t (**)(void *, uint64_t *))(*v110 + 48))(v110, (uint64_t *)j + 3);
      HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)&v96, v65);
      HDStatisticsNoiseLevel::finalizeSamples((HDStatisticsNoiseLevel *)&v96);
      if ((v49 & 2) != 0)
      {
        double v67 = v97;
        double v68 = 0.0;
        if (v97 > 0.0)
        {
          double v66 = v96;
          if (v96 > 0.0) {
            double v68 = log10(v96 / v97) * 10.0;
          }
        }
        uint64_t v69 = objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v52, v68, v67, v66);
        [v89 setObject:v69 forKeyedSubscript:v64];
      }
      if ((v49 & 4) != 0)
      {
        long long v70 = [MEMORY[0x1E4F2B370] quantityWithUnit:v52 doubleValue:v99];
        [v88 setObject:v70 forKeyedSubscript:v64];
      }
      if ((v49 & 8) != 0)
      {
        long long v71 = [MEMORY[0x1E4F2B370] quantityWithUnit:v52 doubleValue:v98];
        [v87 setObject:v71 forKeyedSubscript:v64];
      }
      if ((v49 & 0x20) != 0)
      {
        double v72 = v101;
        double v73 = v102;
        uint64_t v74 = [MEMORY[0x1E4F2B370] quantityWithUnit:v52 doubleValue:v100];
        [v86 setObject:v74 forKeyedSubscript:v64];

        __int16 v75 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v72, v73);
        [v61 setObject:v75 forKeyedSubscript:v64];
      }
      if (!v110) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v76 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)((*(uint64_t (**)(void *, uint64_t *))(*v110 + 48))(v110, (uint64_t *)j + 3) + 32));
      [v62 setObject:v76 forKeyedSubscript:v64];
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>>::~__hash_table((uint64_t)v94);
    if ((v49 & 2) != 0) {
      [v93 setAverageQuantityBySource:v89];
    }
    if ((v49 & 4) != 0) {
      [v93 setMinimumQuantityBySource:v88];
    }
    if ((v49 & 8) != 0) {
      [v93 setMaximumQuantityBySource:v87];
    }
    if ((v49 & 0x20) != 0)
    {
      [v93 setMostRecentQuantityBySource:v86];
      [v93 setMostRecentQuantityDateIntervalBySource:v61];
    }
    [v93 setDataCountBySource:v62];
  }
  std::__function::__value_func<HDStatisticsNoiseLevel const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v109);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v108);

  std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v107);
  int8x16_t v77 = [*(id *)(a1 + 16) _unitForChangeInCanonicalUnit];
  uint64_t v78 = [v93 averageQuantity];
  if (v78)
  {
    uint64_t v52 = [v93 averageQuantity];
    if (([v52 isCompatibleWithUnit:v77] & 1) == 0)
    {

LABEL_105:
      [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8], @"Expected compatibility with %@", v77 format];
      goto LABEL_106;
    }
  }
  int64_t v79 = [v93 minimumQuantity];
  if (v79)
  {
    uint64_t v22 = [v93 minimumQuantity];
    if (![v22 isCompatibleWithUnit:v77])
    {
      int v80 = 1;
      goto LABEL_99;
    }
  }
  unint64_t v81 = [v93 maximumQuantity];
  if (v81)
  {
    unint64_t v82 = [v93 maximumQuantity];
    int v83 = [v82 isCompatibleWithUnit:v77];

    int v80 = v83 ^ 1;
    if (v79) {
      goto LABEL_99;
    }
  }
  else
  {
    int v80 = 0;
    if (v79)
    {
LABEL_99:

      if (v78) {
        goto LABEL_100;
      }
LABEL_104:

      if (!v80) {
        goto LABEL_106;
      }
      goto LABEL_105;
    }
  }
  if (!v78) {
    goto LABEL_104;
  }
LABEL_100:

  if (v80) {
    goto LABEL_105;
  }
LABEL_106:

  return v93;
}

void sub_1BD0E998C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  std::__function::__value_func<HDStatisticsNoiseLevel const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](&a55);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](&a51);

  std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](&a47);
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 352);
  uint64_t v2 = *(void *)(a1 + 368);
  if (v1 != (*(void *)(a1 + 376) - v2) >> 3)
  {
    id v4 = (void **)(a1 + 368);
    *(void *)(a1 + 376) = v2;
    std::vector<long long>::reserve((void **)(a1 + 368), v1);
    uint64_t v5 = *(void **)(a1 + 344);
    if (v5)
    {
      long long v6 = *(char **)(a1 + 376);
      do
      {
        uint64_t v7 = v5[2];
        unint64_t v8 = *(void *)(a1 + 384);
        if ((unint64_t)v6 >= v8)
        {
          id v10 = (char *)*v4;
          uint64_t v11 = (v6 - (unsigned char *)*v4) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            id v10 = *(char **)(a1 + 368);
            long long v6 = *(char **)(a1 + 376);
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v16 = (void *)(v14 + 8 * v11);
          void *v16 = v7;
          id v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            uint64_t v17 = *((void *)v6 - 1);
            v6 -= 8;
            *--uint64_t v16 = v17;
          }
          *(void *)(a1 + 368) = v16;
          *(void *)(a1 + 376) = v9;
          *(void *)(a1 + 384) = v14 + 8 * v15;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)long long v6 = v7;
          id v9 = v6 + 8;
        }
        *(void *)(a1 + 376) = v9;
        uint64_t v5 = (void *)*v5;
        long long v6 = v9;
      }
      while (v5);
    }
    id v18 = (id *)(a1 + 88);
    id WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      id v20 = objc_loadWeakRetained(v18);
      [v20 orderSourceIDs:v4];
    }
  }
}

void sub_1BD0E9E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2) {
    a2 = v4 * floor(a2 / v4);
  }
  double v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    uint64_t v124 = (double **)(a1 + 96);
    double v119 = (void *)(a1 + 64);
    uint64_t v116 = (uint64_t *)(a1 + 120);
    double v114 = (double **)(a1 + 232);
    location = (id *)(a1 + 88);
    double v113 = (void *)(a1 + 312);
    do
    {
      long long v6 = *(double **)(a1 + 96);
      uint64_t v7 = *(long long **)(a1 + 104);
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v6) >> 4);
      if (v8)
      {
        if (v8 != 1)
        {
          double v27 = a2;
          double v28 = a2;
          double v29 = v5;
          uint64_t v30 = *(void *)(a1 + 96);
          if (v6 != (double *)v7)
          {
            do
            {
              double v31 = *(double *)(v30 + 8);
              double v32 = *(double *)(v30 + 16);
              if (v31 > v29 && v31 < v28) {
                double v28 = *(double *)(v30 + 8);
              }
              if (v32 > v5) {
                double v34 = *(double *)(v30 + 16);
              }
              else {
                double v34 = v27;
              }
              if (v32 < v27)
              {
                double v29 = v5;
                double v27 = v34;
              }
              v30 += 48;
            }
            while ((long long *)v30 != v7);
          }
          if (v27 >= v28) {
            double v35 = v28;
          }
          else {
            double v35 = v27;
          }
          double v36 = *(double *)(a1 + 16);
          if (v36 > 0.0)
          {
            double v37 = v36 * floor(v35 / v36);
            double v38 = v36 * floor((v36 + v5) / v36);
            if (v37 >= v38) {
              double v35 = v37;
            }
            else {
              double v35 = v38;
            }
          }
          *uint64_t v124 = 0;
          v124[1] = 0;
          v124[2] = 0;
          if (v6 != (double *)v7)
          {
            if (v8 > 0x555555555555555) {
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v8);
            double v42 = *(double **)(a1 + 96);
            double v41 = *(double **)(a1 + 104);
            double v43 = v39;
            if (v41 != v42)
            {
              do
              {
                long long v44 = *((_OWORD *)v41 - 3);
                long long v45 = *((_OWORD *)v41 - 2);
                *(_OWORD *)(v43 - 21) = *(_OWORD *)((char *)v41 - 21);
                *((_OWORD *)v43 - 3) = v44;
                *((_OWORD *)v43 - 2) = v45;
                v43 -= 48;
                v41 -= 6;
              }
              while (v41 != v42);
              double v41 = *v124;
            }
            *(void *)(a1 + 96) = v43;
            *(void *)(a1 + 104) = v39;
            *(void *)(a1 + 112) = &v39[48 * v40];
            if (v41) {
              operator delete(v41);
            }
          }
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_updateSourceOrder(a1);
          id WeakRetained = objc_loadWeakRetained(location);

          if (WeakRetained)
          {
            *(void *)&v126.double var0 = a1;
            unint64_t v47 = 126 - 2 * __clz(v8);
            if (v6 == (double *)v7) {
              uint64_t v48 = 0;
            }
            else {
              uint64_t v48 = v47;
            }
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>((unint64_t)v6, v7, (uint64_t)&v126, v48, 1);
          }
          else
          {
            unint64_t v59 = 126 - 2 * __clz(v8);
            if (v6 == (double *)v7) {
              uint64_t v48 = 0;
            }
            else {
              uint64_t v48 = v59;
            }
          }
          std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>((unint64_t)v6, v7, v48, 1);
          if (*(unsigned char *)(a1 + 25)) {
            id v118 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
          }
          else {
            id v118 = 0;
          }
          if (v6 == (double *)v7)
          {
LABEL_155:
            *(double *)(a1 + 256) = HKIntervalMask<double>::removeIntervalsBefore(v114, v35) + *(double *)(a1 + 256);
            long long v106 = *(void **)(a1 + 304);
            if (v106 != v113)
            {
              do
              {
                *((double *)v106 + 22) = HKIntervalMask<double>::removeIntervalsBefore((double **)v106 + 19, v35)
                                       + *((double *)v106 + 22);
                uint64_t v107 = (void *)v106[1];
                if (v107)
                {
                  do
                  {
                    uint64_t v108 = v107;
                    uint64_t v107 = (void *)*v107;
                  }
                  while (v107);
                }
                else
                {
                  do
                  {
                    uint64_t v108 = (void *)v106[2];
                    BOOL v109 = *v108 == (void)v106;
                    long long v106 = v108;
                  }
                  while (!v109);
                }
                long long v106 = v108;
              }
              while (v108 != v113);
            }
            *(double *)(a1 + 56) = v35;

            if (v6) {
              operator delete(v6);
            }
            goto LABEL_164;
          }
          int64_t v117 = 0;
          char v60 = 0;
          id v61 = v6;
          while (2)
          {
            long long v62 = *((_OWORD *)v61 + 1);
            *(_OWORD *)&v126.double var0 = *(_OWORD *)v61;
            *(_OWORD *)&v126.double var2 = v62;
            *(double *)&v126.BOOL var4 = v61[4];
            if (!v126.var4 || v126.var1 > v35)
            {
LABEL_96:
              double v63 = *(_OWORD **)(a1 + 104);
              unint64_t v64 = *(void *)(a1 + 112);
              if ((unint64_t)v63 < v64)
              {
                long long v65 = *(_OWORD *)v61;
                long long v66 = *((_OWORD *)v61 + 2);
                v63[1] = *((_OWORD *)v61 + 1);
                v63[2] = v66;
                *double v63 = v65;
                double v67 = v63 + 3;
                goto LABEL_116;
              }
              unint64_t v68 = 0xAAAAAAAAAAAAAAABLL * (((char *)v63 - (char *)*v124) >> 4);
              unint64_t v69 = v68 + 1;
              if (v68 + 1 > 0x555555555555555) {
                std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v70 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v64 - (void)*v124) >> 4);
              if (2 * v70 > v69) {
                unint64_t v69 = 2 * v70;
              }
              if (v70 >= 0x2AAAAAAAAAAAAAALL) {
                unint64_t v71 = 0x555555555555555;
              }
              else {
                unint64_t v71 = v69;
              }
              if (v71) {
                unint64_t v71 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v71);
              }
              else {
                uint64_t v72 = 0;
              }
              int8x16_t v77 = (_OWORD *)(v71 + 48 * v68);
              long long v78 = *(_OWORD *)v61;
              long long v79 = *((_OWORD *)v61 + 2);
              v77[1] = *((_OWORD *)v61 + 1);
              v77[2] = v79;
              _OWORD *v77 = v78;
              unint64_t v81 = *(double **)(a1 + 96);
              int v80 = *(double **)(a1 + 104);
              unint64_t v82 = v77;
              if (v80 != v81)
              {
                do
                {
                  long long v83 = *((_OWORD *)v80 - 3);
                  long long v84 = *((_OWORD *)v80 - 2);
                  *(_OWORD *)((char *)v82 - 21) = *(_OWORD *)((char *)v80 - 21);
                  *(v82 - 3) = v83;
                  *(v82 - 2) = v84;
                  v82 -= 3;
                  v80 -= 6;
                }
                while (v80 != v81);
                int v80 = *v124;
              }
              double v67 = v77 + 3;
              *(void *)(a1 + 96) = v82;
              *(void *)(a1 + 104) = v77 + 3;
              *(void *)(a1 + 112) = v71 + 48 * v72;
              if (v80)
              {
                id v85 = v80;
                goto LABEL_115;
              }
              goto LABEL_116;
            }
            double var2 = v126.var2;
            if (v126.var2 >= v35)
            {
              double var0 = v126.var0;
              v126.double var2 = v35;
              BOOL v74 = var2 > v35;
              v126.BOOL var4 = v126.var1 < v35;
              if (v126.var1 >= v35) {
                goto LABEL_96;
              }
              int64_t var3 = v126.var3;
              BOOL var5 = v126.var5;
              double v75 = v35;
            }
            else
            {
              v126.BOOL var4 = v126.var2 > v126.var1;
              if (v126.var2 <= v126.var1) {
                goto LABEL_96;
              }
              BOOL v74 = 0;
              int64_t var3 = 0;
              BOOL var5 = 0;
              double var2 = 0.0;
              double v75 = 0.0;
              double var0 = 0.0;
            }
            HDStatisticsNoiseLevel::applyMaskToSample((uint64_t)&v126, v119);
            int v86 = *((unsigned __int8 *)v61 + 42);
            int v123 = *((unsigned __int8 *)v61 + 41);
            char v120 = *((unsigned char *)v61 + 40);
            if (!v126.var4) {
              goto LABEL_138;
            }
            if (v60)
            {
              unint64_t v87 = v126.var3;
              if (v117 == v126.var3 || *(unsigned char *)(a1 + 24))
              {
                HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::addSample(v116, &v126, v86 == 0);
                int v86 = 1;
              }
            }
            else
            {
              HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::addSample(v116, &v126, v86 == 0);
              int v86 = 1;
              unint64_t v87 = v126.var3;
              int64_t v117 = v126.var3;
            }
            if (!*(unsigned char *)(a1 + 25)) {
              goto LABEL_137;
            }
            id v88 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a1, v87);
            if (!v88) {
              goto LABEL_136;
            }
            id v89 = [v118 objectForKeyedSubscript:v88];
            uint64_t v90 = v89;
            if (v89)
            {
              if ([v89 longLongValue] != v87 && !*(unsigned char *)(a1 + 24))
              {
LABEL_135:

LABEL_136:
LABEL_137:
                char v60 = 1;
LABEL_138:
                if (v74)
                {
                  BOOL v94 = v86 != 0;
                  double v96 = *(double **)(a1 + 104);
                  unint64_t v95 = *(void *)(a1 + 112);
                  if ((unint64_t)v96 >= v95)
                  {
                    id v85 = *v124;
                    unint64_t v97 = 0xAAAAAAAAAAAAAAABLL * (((char *)v96 - (char *)*v124) >> 4);
                    unint64_t v98 = v97 + 1;
                    if (v97 + 1 > 0x555555555555555) {
                      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                    }
                    unint64_t v99 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v95 - (void)v85) >> 4);
                    if (2 * v99 > v98) {
                      unint64_t v98 = 2 * v99;
                    }
                    if (v99 >= 0x2AAAAAAAAAAAAAALL) {
                      unint64_t v100 = 0x555555555555555;
                    }
                    else {
                      unint64_t v100 = v98;
                    }
                    if (v100)
                    {
                      unint64_t v100 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v100);
                      id v85 = *(double **)(a1 + 96);
                      double v96 = *(double **)(a1 + 104);
                    }
                    else
                    {
                      uint64_t v101 = 0;
                    }
                    unint64_t v102 = v100 + 48 * v97;
                    *(double *)unint64_t v102 = var0;
                    *(double *)(v102 + 8) = v75;
                    *(double *)(v102 + 16) = var2;
                    *(void *)(v102 + 24) = var3;
                    *(unsigned char *)(v102 + 32) = v74;
                    *(unsigned char *)(v102 + 33) = var5;
                    *(unsigned char *)(v102 + 40) = v120;
                    *(unsigned char *)(v102 + 41) = v123;
                    *(unsigned char *)(v102 + 42) = v94;
                    unint64_t v103 = v102;
                    if (v96 != v85)
                    {
                      do
                      {
                        long long v104 = *((_OWORD *)v96 - 3);
                        long long v105 = *((_OWORD *)v96 - 2);
                        *(_OWORD *)(v103 - 21) = *(_OWORD *)((char *)v96 - 21);
                        *(_OWORD *)(v103 - 48) = v104;
                        *(_OWORD *)(v103 - 32) = v105;
                        v103 -= 48;
                        v96 -= 6;
                      }
                      while (v96 != v85);
                      id v85 = *v124;
                    }
                    double v67 = (_OWORD *)(v102 + 48);
                    *(void *)(a1 + 96) = v103;
                    *(void *)(a1 + 104) = v102 + 48;
                    *(void *)(a1 + 112) = v100 + 48 * v101;
                    if (v85) {
LABEL_115:
                    }
                      operator delete(v85);
                  }
                  else
                  {
                    *double v96 = var0;
                    v96[1] = v75;
                    v96[2] = var2;
                    *((void *)v96 + 3) = var3;
                    *((unsigned char *)v96 + 32) = v74;
                    *((unsigned char *)v96 + 33) = var5;
                    *((unsigned char *)v96 + 40) = v120;
                    *((unsigned char *)v96 + 41) = v123;
                    double v67 = v96 + 6;
                    *((unsigned char *)v96 + 42) = v94;
                  }
LABEL_116:
                  *(void *)(a1 + 104) = v67;
                }
                v61 += 6;
                if (v61 == (double *)v7) {
                  goto LABEL_155;
                }
                continue;
              }
            }
            else
            {
              unint64_t v91 = [NSNumber numberWithLongLong:v87];
              [v118 setObject:v91 forKeyedSubscript:v88];
            }
            break;
          }
          unint64_t v92 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(a1, v87);
          id v93 = (uint64_t *)HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_statisticsForSource(a1, v92);
          HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::addSample(v93, &v126, v123 == 0);
          LOBYTE(v123) = 1;
          goto LABEL_135;
        }
        double v9 = v6[1];
        double v10 = v6[2];
        int64_t v11 = *((void *)v6 + 3);
        char v12 = *((unsigned char *)v6 + 32);
        char v13 = *((unsigned char *)v6 + 33);
        if (v12)
        {
          BOOL v14 = v9 < a2;
          BOOL v15 = v10 > a2;
          if (v10 < a2) {
            double v16 = v6[2];
          }
          else {
            double v16 = a2;
          }
          if (v10 >= a2)
          {
            char v17 = *((unsigned char *)v6 + 33);
          }
          else
          {
            BOOL v14 = v10 > v9;
            char v17 = 0;
          }
          if (v10 < a2) {
            double v18 = 0.0;
          }
          else {
            double v18 = *v6;
          }
          if (v10 < a2) {
            double v19 = 0.0;
          }
          else {
            double v19 = a2;
          }
          if (v10 < a2) {
            double v20 = 0.0;
          }
          else {
            double v20 = v6[2];
          }
          if (v10 < a2) {
            uint64_t v21 = 0;
          }
          else {
            uint64_t v21 = *((void *)v6 + 3);
          }
          if (v10 < a2) {
            BOOL v15 = 0;
          }
          BOOL v22 = v10 > v9;
          if (v9 <= a2)
          {
            double v10 = v16;
            BOOL v23 = v14;
          }
          else
          {
            double v20 = v6[2];
            BOOL v23 = 0;
          }
          if (v9 > a2) {
            char v12 = *((unsigned char *)v6 + 33);
          }
          else {
            char v12 = v17;
          }
          if (v9 > a2) {
            double v24 = *v6;
          }
          else {
            double v24 = v18;
          }
          if (v9 > a2) {
            double v25 = v6[1];
          }
          else {
            double v25 = v19;
          }
          if (v9 > a2) {
            uint64_t v26 = *((void *)v6 + 3);
          }
          else {
            uint64_t v26 = v21;
          }
          if (v9 > a2) {
            BOOL v15 = v22;
          }
        }
        else
        {
          BOOL v23 = 0;
          uint64_t v26 = 0;
          BOOL v15 = 0;
          double v24 = 0.0;
          double v25 = 0.0;
          double v20 = 0.0;
        }
        int v49 = *((unsigned __int8 *)v6 + 42);
        int v50 = *((unsigned __int8 *)v6 + 41);
        int v51 = *((unsigned __int8 *)v6 + 40);
        v126.double var0 = *v6;
        v126.var1 = v9;
        v126.double var2 = v10;
        v126.int64_t var3 = v11;
        v126.BOOL var4 = v23;
        v126.BOOL var5 = v13;
        *(_DWORD *)(&v126.var5 + 1) = *(_DWORD *)((char *)v6 + 34);
        *(_WORD *)(&v126.var5 + 5) = *((_WORD *)v6 + 19);
        *(double *)&long long v127 = v24;
        *((double *)&v127 + 1) = v25;
        *(double *)&long long v128 = v20;
        *((void *)&v128 + 1) = v26;
        LOBYTE(v129) = v15;
        HIBYTE(v129) = v12;
        HDStatisticsNoiseLevel::applyMaskToSample((uint64_t)&v126, v119);
        BOOL v52 = v51 != 0;
        BOOL v53 = v50 != 0;
        BOOL v54 = v49 != 0;
        if (v126.var4)
        {
          HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::addSample(v116, &v126, v49 == 0);
          if (*(unsigned char *)(a1 + 25))
          {
            unint64_t v55 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(a1, v126.var3);
            uint64_t v56 = (uint64_t *)HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_statisticsForSource(a1, v55);
            HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::addSample(v56, &v126, v50 == 0);
          }
          BOOL v52 = 1;
          BOOL v53 = 1;
          BOOL v54 = 1;
        }
        if ((_BYTE)v129)
        {
          LOWORD(v125) = v129;
          long long v57 = v128;
          double v58 = *v124;
          *(_OWORD *)double v58 = v127;
          *((_OWORD *)v58 + 1) = v57;
          *((void *)v58 + 4) = v125;
          *((unsigned char *)v58 + 40) = v52;
          *((unsigned char *)v58 + 41) = v53;
          *((unsigned char *)v58 + 42) = v54;
        }
        else
        {
          *(void *)(a1 + 104) = *(void *)(a1 + 96);
        }
      }
      *(double *)(a1 + 56) = a2;
LABEL_164:
      double v110 = *(double *)(a1 + 56);
      if (v110 == v5)
      {
        uint64_t v111 = [MEMORY[0x1E4F28B00] currentHandler];
        double v112 = objc_msgSend(NSString, "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel, HDStatisticsTimeInterval>>>::_mergeThroughTime(double) [Statistics = HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel, HDStatisticsTimeInterval>>]");
        [v111 handleFailureInFunction:v112 file:@"HDStatisticsBucket.hpp" lineNumber:234 description:@"Failed to make forward progress during statistics merge."];

        double v110 = *(double *)(a1 + 56);
      }
      double v5 = v110;
    }
    while (v110 < a2);
  }
}

void sub_1BD0EA860(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::addSample(uint64_t *result, HDRawQuantitySample *a2, int a3)
{
  double v5 = result;
  int v6 = 2 * (a2->var0 != -1.79769313e308);
  if (a2->var0 == 1.79769313e308) {
    int v6 = 1;
  }
  if (!v6)
  {
    if (*(_DWORD *)result || result[5]) {
      return result;
    }
    HDStatisticsNoiseLevel::addSample((HDStatisticsNoiseLevel *)(result + 1), a2, a3);
    uint64_t v7 = v5 + 13;
    goto LABEL_21;
  }
  if (v6 == 1)
  {
    if (*(_DWORD *)result) {
      return result;
    }
    *(_DWORD *)BOOL result = 1;
    goto LABEL_15;
  }
  if (v6 != 2) {
    return result;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)BOOL result = 2;
LABEL_15:
    double v10 = [[HDQuantitySampleOverlapProcessor alloc] initWithOverlapFunction:1];
    *(_OWORD *)(v5 + 1) = 0u;
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 5) = 0u;
    *(_OWORD *)(v5 + 7) = 0u;
    *(_OWORD *)((char *)v5 + 66) = 0u;
    int64_t v11 = (void *)v5[11];
    v5[11] = (uint64_t)v10;
    char v12 = v10;

    char v13 = (void *)v5[14];
    *((_WORD *)v5 + 48) = 257;
    v5[13] = 0;
    if (v13)
    {
      v5[15] = (uint64_t)v13;
      operator delete(v13);
    }
    *((_OWORD *)v5 + 7) = 0u;
    *((_OWORD *)v5 + 8) = 0u;

    if (!*((unsigned char *)v5 + 80) || *((double *)v5 + 7) <= *((double *)v5 + 19))
    {
      long long v14 = *((_OWORD *)v5 + 10);
      *((_OWORD *)v5 + 3) = *((_OWORD *)v5 + 9);
      *((_OWORD *)v5 + 4) = v14;
      *((_WORD *)v5 + 40) = *((_WORD *)v5 + 88);
    }
    HDStatisticsNoiseLevel::addSample((HDStatisticsNoiseLevel *)(v5 + 1), a2, a3);
    uint64_t v7 = v5 + 13;
LABEL_21:
    unint64_t v8 = a2;
    int v9 = a3;
    goto LABEL_22;
  }
  HDStatisticsNoiseLevel::addSample((HDStatisticsNoiseLevel *)(result + 1), a2, 1);
  uint64_t v7 = v5 + 13;
  unint64_t v8 = a2;
  int v9 = 1;
LABEL_22:

  return HDStatisticsTimeInterval::addSample(v7, v8, v9);
}

uint64_t **HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = a2;
  double v3 = *(void **)(a1 + 312);
  if (!v3) {
    goto LABEL_11;
  }
  double v4 = (uint64_t **)(a1 + 312);
  do
  {
    uint64_t v5 = v3[4];
    BOOL v6 = v5 < a2;
    if (v5 >= a2) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = v3 + 1;
    }
    if (!v6) {
      double v4 = (uint64_t **)v3;
    }
    double v3 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t **)(a1 + 312) || (uint64_t)v4[4] > a2)
  {
LABEL_11:
    unint64_t v8 = (uint64_t **)(a1 + 304);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 304), a2, &v10);
    double v4 = std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v8, a2, &v10);
  }
  return v4 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    uint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((void *)(a1 + 392), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a1, a2);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      id v10 = v6;
      uint64_t v7 = (void *)(a1 + 432);
      unint64_t v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        int64_t v11 = &v10;
        *((void *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        id v6 = v10;
      }
    }
  }
  return a2;
}

void sub_1BD0EAC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  double v4 = (id *)(a1 + 88);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    id v6 = (void *)(a1 + 472);
    uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
    if (v7)
    {
      id v8 = (id)v7[3];
    }
    else
    {
      id v9 = objc_loadWeakRetained(v4);
      id v8 = [v9 bundleIdentifierForSourceID:a2];

      if (v8)
      {
        id v10 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
        objc_storeStrong(v10 + 3, v8);
      }
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1BD0EACF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, void *a3)
{
  id v6 = a1 + 1;
  uint64_t v5 = a1[1];
  uint64_t v7 = a1 + 1;
  id v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        id v8 = (uint64_t **)v5;
        uint64_t v9 = v5[4];
        if (v9 <= a2) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v7 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a2) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    id v10 = (char *)operator new(0xE0uLL);
    v12[0] = v10;
    v12[1] = v6;
    char v13 = 0;
    *((void *)v10 + 4) = *a3;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    *(_OWORD *)(v10 + 120) = 0u;
    *(_OWORD *)(v10 + 136) = 0u;
    *(_OWORD *)(v10 + 152) = 0u;
    *(_OWORD *)(v10 + 168) = 0u;
    *(_OWORD *)(v10 + 184) = 0u;
    *(_OWORD *)(v10 + 200) = 0u;
    *((void *)v10 + 27) = 0;
    *((void *)v10 + 16) = [[HDQuantitySampleOverlapProcessor alloc] initWithOverlapFunction:1];
    *((_WORD *)v10 + 68) = 257;
    *((_OWORD *)v10 + 9) = 0u;
    *((_OWORD *)v10 + 10) = 0u;
    *((_OWORD *)v10 + 11) = 0u;
    *((_OWORD *)v10 + 12) = 0u;
    *(_OWORD *)(v10 + 202) = 0u;
    char v13 = 1;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v8, v7, (uint64_t *)v10);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
    return (uint64_t **)v10;
  }
  return v8;
}

void sub_1BD0EAE40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v12 = a2 - 3;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 4);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v103 = *((void *)a2 - 3);
                uint64_t v104 = *(void *)(v13 + 24);
                if (v103 == v104) {
                  return;
                }
                long long v105 = *(char **)(*(void *)a3 + 368);
                long long v106 = *(char **)(*(void *)a3 + 376);
                uint64_t v107 = v105;
                uint64_t v108 = v105;
                if (v105 == v106) {
                  goto LABEL_171;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>((long long *)v13, (long long *)(v13 + 48), a2 - 3, a3);
                return;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, (uint64_t)(a2 - 3), a3);
                return;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, v13 + 144, (uint64_t)(a2 - 3), a3);
                return;
              default:
                JUMPOUT(0);
            }
            do
            {
              if (*(void *)v108 == v103) {
                goto LABEL_168;
              }
              v108 += 8;
            }
            while (v108 != v106);
            uint64_t v108 = *(char **)(*(void *)a3 + 376);
LABEL_168:
            while (*(void *)v107 != v104)
            {
              v107 += 8;
              if (v107 == v106)
              {
                uint64_t v107 = *(char **)(*(void *)a3 + 376);
                break;
              }
            }
LABEL_171:
            if (v108 - v105 < v107 - v105)
            {
              *(_OWORD *)v226 = *(_OWORD *)(v13 + 16);
              *(_OWORD *)&v226[16] = *(_OWORD *)(v13 + 32);
              long long v218 = *(_OWORD *)v13;
              long long v109 = *v12;
              long long v110 = *(a2 - 2);
              *(_OWORD *)(v13 + 27) = *(long long *)((char *)a2 - 21);
              *(_OWORD *)unint64_t v13 = v109;
              *(_OWORD *)(v13 + 16) = v110;
              *(long long *)((char *)a2 - 21) = *(_OWORD *)&v226[11];
              *unint64_t v12 = v218;
              *(a2 - 2) = *(_OWORD *)v226;
            }
            return;
          }
          if (v14 <= 1151)
          {
            uint64_t v111 = (long long *)(v13 + 48);
            BOOL v113 = (long long *)v13 == a2 || v111 == a2;
            if (a5)
            {
              if (!v113)
              {
                unint64_t v114 = v13;
                do
                {
                  unint64_t v115 = v114;
                  unint64_t v114 = (unint64_t)v111;
                  uint64_t v116 = *(void *)(v115 + 72);
                  uint64_t v117 = *(void *)(v115 + 24);
                  if (v116 != v117)
                  {
                    id v118 = *(char **)(*(void *)a3 + 368);
                    double v119 = *(char **)(*(void *)a3 + 376);
                    char v120 = v118;
                    uint64_t v121 = v118;
                    if (v118 != v119)
                    {
                      do
                      {
                        if (*(void *)v121 == v116) {
                          goto LABEL_196;
                        }
                        v121 += 8;
                      }
                      while (v121 != v119);
                      uint64_t v121 = *(char **)(*(void *)a3 + 376);
LABEL_196:
                      while (*(void *)v120 != v117)
                      {
                        v120 += 8;
                        if (v120 == v119)
                        {
                          char v120 = *(char **)(*(void *)a3 + 376);
                          break;
                        }
                      }
                    }
                    if (v121 - v118 < v120 - v118)
                    {
                      uint64_t v227 = *(void *)(v114 + 16);
                      long long v219 = *(_OWORD *)v114;
                      long long v236 = *(_OWORD *)(v115 + 80);
                      unint64_t v122 = v114;
                      while (1)
                      {
                        long long v123 = *(_OWORD *)(v115 + 16);
                        *(_OWORD *)unint64_t v122 = *(_OWORD *)v115;
                        *(_OWORD *)(v122 + 16) = v123;
                        *(_OWORD *)(v122 + 27) = *(_OWORD *)(v115 + 27);
                        if (v115 == v13) {
                          break;
                        }
                        unint64_t v122 = v115;
                        uint64_t v124 = *(void *)(v115 - 24);
                        if (v116 != v124)
                        {
                          uint64_t v125 = *(char **)(*(void *)a3 + 368);
                          HDRawQuantitySample v126 = *(char **)(*(void *)a3 + 376);
                          long long v127 = v125;
                          long long v128 = v125;
                          if (v125 != v126)
                          {
                            do
                            {
                              if (*(void *)v128 == v116) {
                                goto LABEL_208;
                              }
                              v128 += 8;
                            }
                            while (v128 != v126);
                            long long v128 = *(char **)(*(void *)a3 + 376);
LABEL_208:
                            while (*(void *)v127 != v124)
                            {
                              v127 += 8;
                              if (v127 == v126)
                              {
                                long long v127 = *(char **)(*(void *)a3 + 376);
                                break;
                              }
                            }
                          }
                          unint64_t v115 = v122 - 48;
                          if (v128 - v125 < v127 - v125) {
                            continue;
                          }
                        }
                        goto LABEL_212;
                      }
                      unint64_t v122 = v13;
LABEL_212:
                      *(_OWORD *)unint64_t v122 = v219;
                      *(void *)(v122 + 16) = v227;
                      *(void *)(v122 + 24) = v116;
                      *(void *)(v122 + 32) = v236;
                      *(_DWORD *)(v122 + 39) = *(_DWORD *)((char *)&v236 + 7);
                    }
                  }
                  uint64_t v111 = (long long *)(v114 + 48);
                }
                while ((long long *)(v114 + 48) != a2);
              }
            }
            else if (!v113)
            {
              do
              {
                unint64_t v201 = a1;
                a1 = (unint64_t)v111;
                uint64_t v202 = *(void *)(v201 + 72);
                uint64_t v203 = *(void *)(v201 + 24);
                if (v202 != v203)
                {
                  v204 = *(char **)(*(void *)a3 + 368);
                  v205 = *(char **)(*(void *)a3 + 376);
                  v206 = v204;
                  v207 = v204;
                  if (v204 != v205)
                  {
                    do
                    {
                      if (*(void *)v207 == v202) {
                        goto LABEL_312;
                      }
                      v207 += 8;
                    }
                    while (v207 != v205);
                    v207 = *(char **)(*(void *)a3 + 376);
LABEL_312:
                    while (*(void *)v206 != v203)
                    {
                      v206 += 8;
                      if (v206 == v205)
                      {
                        v206 = *(char **)(*(void *)a3 + 376);
                        break;
                      }
                    }
                  }
                  if (v207 - v204 < v206 - v204)
                  {
                    uint64_t v230 = *(void *)(a1 + 16);
                    long long v222 = *(_OWORD *)a1;
                    long long v239 = *(_OWORD *)(v201 + 80);
                    unint64_t v208 = a1;
                    do
                    {
                      v209 = (_OWORD *)v208;
                      unint64_t v208 = v201;
                      long long v210 = *(_OWORD *)(v201 + 16);
                      _OWORD *v209 = *(_OWORD *)v201;
                      v209[1] = v210;
                      *(_OWORD *)((char *)v209 + 27) = *(_OWORD *)(v201 + 27);
                      uint64_t v211 = *(void *)(v201 - 24);
                      if (v202 == v211) {
                        break;
                      }
                      v212 = *(char **)(*(void *)a3 + 368);
                      v213 = *(char **)(*(void *)a3 + 376);
                      v214 = v212;
                      v215 = v212;
                      if (v212 != v213)
                      {
                        do
                        {
                          if (*(void *)v215 == v202) {
                            goto LABEL_322;
                          }
                          v215 += 8;
                        }
                        while (v215 != v213);
                        v215 = *(char **)(*(void *)a3 + 376);
LABEL_322:
                        while (*(void *)v214 != v211)
                        {
                          v214 += 8;
                          if (v214 == v213)
                          {
                            v214 = *(char **)(*(void *)a3 + 376);
                            break;
                          }
                        }
                      }
                      unint64_t v201 = v208 - 48;
                    }
                    while (v215 - v212 < v214 - v212);
                    *(_OWORD *)unint64_t v208 = v222;
                    *(void *)(v208 + 16) = v230;
                    *(void *)(v208 + 24) = v202;
                    *(void *)(v208 + 32) = v239;
                    *(_DWORD *)(v208 + 39) = *(_DWORD *)((char *)&v239 + 7);
                  }
                }
                uint64_t v111 = (long long *)(a1 + 48);
              }
              while ((long long *)(a1 + 48) != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((long long *)v13 != a2)
            {
              int64_t v129 = (v15 - 2) >> 1;
              int64_t v130 = v129;
              do
              {
                int64_t v131 = v130;
                if (v129 >= v130)
                {
                  uint64_t v132 = (2 * v130) | 1;
                  unint64_t v133 = v13 + 48 * v132;
                  if (2 * v131 + 2 < (uint64_t)v15)
                  {
                    uint64_t v134 = *(void *)(v133 + 24);
                    uint64_t v135 = *(void *)(v133 + 72);
                    if (v134 != v135)
                    {
                      v137 = *(char **)(*(void *)a3 + 368);
                      v136 = *(char **)(*(void *)a3 + 376);
                      v138 = v137;
                      v139 = v137;
                      if (v137 != v136)
                      {
                        do
                        {
                          if (*(void *)v139 == v134) {
                            goto LABEL_224;
                          }
                          v139 += 8;
                        }
                        while (v139 != v136);
                        v139 = *(char **)(*(void *)a3 + 376);
LABEL_224:
                        while (*(void *)v138 != v135)
                        {
                          v138 += 8;
                          if (v138 == v136)
                          {
                            v138 = *(char **)(*(void *)a3 + 376);
                            break;
                          }
                        }
                      }
                      v133 += 48 * (v139 - v137 < v138 - v137);
                      if (v139 - v137 < v138 - v137) {
                        uint64_t v132 = 2 * v131 + 2;
                      }
                    }
                  }
                  unint64_t v140 = v13 + 48 * v131;
                  uint64_t v141 = *(void *)(v133 + 24);
                  uint64_t v142 = *(void *)(v140 + 24);
                  if (v141 == v142) {
                    goto LABEL_238;
                  }
                  v144 = *(char **)(*(void *)a3 + 368);
                  v143 = *(char **)(*(void *)a3 + 376);
                  v145 = v144;
                  v146 = v144;
                  if (v144 != v143)
                  {
                    do
                    {
                      if (*(void *)v146 == v141) {
                        goto LABEL_234;
                      }
                      v146 += 8;
                    }
                    while (v146 != v143);
                    v146 = *(char **)(*(void *)a3 + 376);
LABEL_234:
                    while (*(void *)v145 != v142)
                    {
                      v145 += 8;
                      if (v145 == v143)
                      {
                        v145 = *(char **)(*(void *)a3 + 376);
                        break;
                      }
                    }
                  }
                  if (v146 - v144 >= v145 - v144)
                  {
LABEL_238:
                    uint64_t v228 = *(void *)(v140 + 16);
                    long long v220 = *(_OWORD *)v140;
                    long long v237 = *(_OWORD *)(v140 + 32);
                    long long v147 = *(_OWORD *)v133;
                    long long v148 = *(_OWORD *)(v133 + 16);
                    *(_OWORD *)(v140 + 27) = *(_OWORD *)(v133 + 27);
                    *(_OWORD *)unint64_t v140 = v147;
                    *(_OWORD *)(v140 + 16) = v148;
                    if (v129 >= v132)
                    {
                      while (1)
                      {
                        uint64_t v150 = 2 * v132;
                        uint64_t v132 = (2 * v132) | 1;
                        unint64_t v149 = v13 + 48 * v132;
                        uint64_t v151 = v150 + 2;
                        if (v151 < (uint64_t)v15)
                        {
                          uint64_t v152 = *(void *)(v149 + 24);
                          uint64_t v153 = *(void *)(v149 + 72);
                          if (v152 != v153)
                          {
                            v154 = *(char **)(*(void *)a3 + 368);
                            v155 = *(char **)(*(void *)a3 + 376);
                            v156 = v154;
                            v157 = v154;
                            if (v154 != v155)
                            {
                              do
                              {
                                if (*(void *)v157 == v152) {
                                  goto LABEL_246;
                                }
                                v157 += 8;
                              }
                              while (v157 != v155);
                              v157 = *(char **)(*(void *)a3 + 376);
LABEL_246:
                              while (*(void *)v156 != v153)
                              {
                                v156 += 8;
                                if (v156 == v155)
                                {
                                  v156 = *(char **)(*(void *)a3 + 376);
                                  break;
                                }
                              }
                            }
                            v149 += 48 * (v157 - v154 < v156 - v154);
                            if (v157 - v154 < v156 - v154) {
                              uint64_t v132 = v151;
                            }
                          }
                        }
                        uint64_t v158 = *(void *)(v149 + 24);
                        if (v158 != v142)
                        {
                          v160 = *(char **)(*(void *)a3 + 368);
                          v159 = *(char **)(*(void *)a3 + 376);
                          v161 = v160;
                          v162 = v160;
                          if (v160 != v159)
                          {
                            do
                            {
                              if (*(void *)v162 == v158) {
                                goto LABEL_256;
                              }
                              v162 += 8;
                            }
                            while (v162 != v159);
                            v162 = *(char **)(*(void *)a3 + 376);
LABEL_256:
                            while (*(void *)v161 != v142)
                            {
                              v161 += 8;
                              if (v161 == v159)
                              {
                                v161 = *(char **)(*(void *)a3 + 376);
                                break;
                              }
                            }
                          }
                          if (v162 - v160 < v161 - v160) {
                            break;
                          }
                        }
                        long long v163 = *(_OWORD *)v149;
                        long long v164 = *(_OWORD *)(v149 + 16);
                        *(_OWORD *)(v133 + 27) = *(_OWORD *)(v149 + 27);
                        *(_OWORD *)unint64_t v133 = v163;
                        *(_OWORD *)(v133 + 16) = v164;
                        unint64_t v133 = v149;
                        if (v129 < v132) {
                          goto LABEL_261;
                        }
                      }
                    }
                    unint64_t v149 = v133;
LABEL_261:
                    *(_OWORD *)unint64_t v149 = v220;
                    *(void *)(v149 + 16) = v228;
                    *(void *)(v149 + 24) = v142;
                    *(void *)(v149 + 32) = v237;
                    *(_DWORD *)(v149 + 39) = *(_DWORD *)((char *)&v237 + 7);
                  }
                }
                int64_t v130 = v131 - 1;
              }
              while (v131);
              int64_t v165 = v14 / 0x30uLL;
              do
              {
                uint64_t v166 = 0;
                *(_OWORD *)v229 = *(_OWORD *)(v13 + 16);
                *(_OWORD *)&v229[16] = *(_OWORD *)(v13 + 32);
                long long v221 = *(_OWORD *)v13;
                uint64_t v167 = v165 - 2;
                if (v165 < 2) {
                  uint64_t v167 = v165 - 1;
                }
                uint64_t v168 = v167 >> 1;
                unint64_t v169 = v13;
                do
                {
                  v170 = (_OWORD *)v169;
                  v169 += 48 * v166 + 48;
                  uint64_t v171 = 2 * v166;
                  uint64_t v166 = (2 * v166) | 1;
                  uint64_t v172 = v171 + 2;
                  if (v171 + 2 < v165)
                  {
                    uint64_t v173 = *(void *)(v169 + 24);
                    uint64_t v174 = *(void *)(v169 + 72);
                    if (v173 != v174)
                    {
                      v176 = *(char **)(*(void *)a3 + 368);
                      v175 = *(char **)(*(void *)a3 + 376);
                      v177 = v176;
                      v178 = v176;
                      if (v176 != v175)
                      {
                        do
                        {
                          if (*(void *)v178 == v173) {
                            goto LABEL_273;
                          }
                          v178 += 8;
                        }
                        while (v178 != v175);
                        v178 = *(char **)(*(void *)a3 + 376);
LABEL_273:
                        while (*(void *)v177 != v174)
                        {
                          v177 += 8;
                          if (v177 == v175)
                          {
                            v177 = *(char **)(*(void *)a3 + 376);
                            break;
                          }
                        }
                      }
                      v169 += 48 * (v178 - v176 < v177 - v176);
                      if (v178 - v176 < v177 - v176) {
                        uint64_t v166 = v172;
                      }
                    }
                  }
                  long long v179 = *(_OWORD *)v169;
                  long long v180 = *(_OWORD *)(v169 + 16);
                  *(_OWORD *)((char *)v170 + 27) = *(_OWORD *)(v169 + 27);
                  _OWORD *v170 = v179;
                  v170[1] = v180;
                }
                while (v166 <= v168);
                a2 -= 3;
                if ((long long *)v169 == a2)
                {
                  *(_OWORD *)(v169 + 27) = *(_OWORD *)&v229[11];
                  *(_OWORD *)unint64_t v169 = v221;
                  *(_OWORD *)(v169 + 16) = *(_OWORD *)v229;
                }
                else
                {
                  long long v181 = *a2;
                  long long v182 = a2[1];
                  *(_OWORD *)(v169 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v169 = v181;
                  *(_OWORD *)(v169 + 16) = v182;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v229[11];
                  *a2 = v221;
                  a2[1] = *(_OWORD *)v229;
                  uint64_t v183 = v169 - v13 + 48;
                  if (v183 >= 49)
                  {
                    unint64_t v184 = (v183 / 0x30uLL - 2) >> 1;
                    unint64_t v185 = v13 + 48 * v184;
                    uint64_t v186 = *(void *)(v185 + 24);
                    uint64_t v187 = *(void *)(v169 + 24);
                    if (v186 != v187)
                    {
                      v189 = *(char **)(*(void *)a3 + 368);
                      v188 = *(char **)(*(void *)a3 + 376);
                      v190 = v189;
                      v191 = v189;
                      if (v189 != v188)
                      {
                        do
                        {
                          if (*(void *)v191 == v186) {
                            goto LABEL_286;
                          }
                          v191 += 8;
                        }
                        while (v191 != v188);
                        v191 = *(char **)(*(void *)a3 + 376);
LABEL_286:
                        while (*(void *)v190 != v187)
                        {
                          v190 += 8;
                          if (v190 == v188)
                          {
                            v190 = *(char **)(*(void *)a3 + 376);
                            break;
                          }
                        }
                      }
                      if (v191 - v189 < v190 - v189)
                      {
                        uint64_t v242 = *(void *)(v169 + 16);
                        long long v238 = *(_OWORD *)v169;
                        long long v233 = *(_OWORD *)(v169 + 32);
                        do
                        {
                          v192 = (_OWORD *)v169;
                          unint64_t v169 = v185;
                          long long v193 = *(_OWORD *)v185;
                          long long v194 = *(_OWORD *)(v185 + 16);
                          *(_OWORD *)((char *)v192 + 27) = *(_OWORD *)(v185 + 27);
                          _OWORD *v192 = v193;
                          v192[1] = v194;
                          if (!v184) {
                            break;
                          }
                          unint64_t v184 = (v184 - 1) >> 1;
                          unint64_t v185 = v13 + 48 * v184;
                          uint64_t v195 = *(void *)(v185 + 24);
                          if (v195 == v187) {
                            break;
                          }
                          v197 = *(char **)(*(void *)a3 + 368);
                          v196 = *(char **)(*(void *)a3 + 376);
                          v198 = v197;
                          v199 = v197;
                          if (v197 != v196)
                          {
                            do
                            {
                              if (*(void *)v199 == v195) {
                                goto LABEL_297;
                              }
                              v199 += 8;
                            }
                            while (v199 != v196);
                            v199 = *(char **)(*(void *)a3 + 376);
LABEL_297:
                            while (*(void *)v198 != v187)
                            {
                              v198 += 8;
                              if (v198 == v196)
                              {
                                v198 = *(char **)(*(void *)a3 + 376);
                                break;
                              }
                            }
                          }
                        }
                        while (v199 - v197 < v198 - v197);
                        *(_OWORD *)unint64_t v169 = v238;
                        *(void *)(v169 + 16) = v242;
                        *(void *)(v169 + 24) = v187;
                        *(void *)(v169 + 32) = v233;
                        *(_DWORD *)(v169 + 39) = *(_DWORD *)((char *)&v233 + 7);
                      }
                    }
                  }
                }
              }
              while (v165-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          char v17 = (long long *)(v13 + 48 * (v15 >> 1));
          if ((unint64_t)v14 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v15 >> 1)), a2 - 3, a3);
            uint64_t v18 = 3 * v16;
            double v19 = (long long *)(a1 + 48 * v16 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>((long long *)(a1 + 48), v19, a2 - 6, a3);
            double v20 = (long long *)(a1 + 48 + 16 * v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>((long long *)(a1 + 96), v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>(v19, v17, v20, a3);
            *(_OWORD *)v223 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v223[16] = *(_OWORD *)(a1 + 32);
            long long v216 = *(_OWORD *)a1;
            long long v21 = *(long long *)((char *)v17 + 27);
            long long v22 = v17[1];
            *(_OWORD *)a1 = *v17;
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(a1 + 27) = v21;
            *(long long *)((char *)v17 + 27) = *(_OWORD *)&v223[11];
            *char v17 = v216;
            v17[1] = *(_OWORD *)v223;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>((long long *)(a1 + 48 * (v15 >> 1)), (long long *)a1, a2 - 3, a3);
          }
          --a4;
          if (a5)
          {
            uint64_t v23 = *(void *)(a1 + 24);
            uint64_t v24 = *(void *)a3;
            break;
          }
          uint64_t v25 = *(void *)(a1 - 24);
          uint64_t v23 = *(void *)(a1 + 24);
          if (v25 != v23)
          {
            uint64_t v24 = *(void *)a3;
            uint64_t v26 = *(char **)(*(void *)a3 + 368);
            double v27 = *(char **)(*(void *)a3 + 376);
            double v28 = v26;
            double v29 = v26;
            if (v26 != v27)
            {
              do
              {
                if (*(void *)v29 == v25) {
                  goto LABEL_16;
                }
                v29 += 8;
              }
              while (v29 != v27);
              double v29 = *(char **)(*(void *)a3 + 376);
LABEL_16:
              while (*(void *)v28 != v23)
              {
                v28 += 8;
                if (v28 == v27)
                {
                  double v28 = *(char **)(*(void *)a3 + 376);
                  break;
                }
              }
            }
            if (v29 - v26 < v28 - v26) {
              break;
            }
          }
          uint64_t v241 = *(void *)(a1 + 16);
          long long v232 = *(_OWORD *)(a1 + 32);
          long long v235 = *(_OWORD *)a1;
          uint64_t v67 = *((void *)a2 - 3);
          if (v23 == v67) {
            goto LABEL_107;
          }
          unint64_t v68 = *(char **)(*(void *)a3 + 368);
          unint64_t v69 = *(char **)(*(void *)a3 + 376);
          if (v68 == v69)
          {
            unint64_t v71 = *(char **)(*(void *)a3 + 368);
            unint64_t v70 = v71;
          }
          else
          {
            unint64_t v70 = *(char **)(*(void *)a3 + 368);
            while (*(void *)v70 != v23)
            {
              v70 += 8;
              if (v70 == v69)
              {
                unint64_t v70 = *(char **)(*(void *)a3 + 376);
                break;
              }
            }
            unint64_t v71 = *(char **)(*(void *)a3 + 368);
            while (*(void *)v71 != v67)
            {
              v71 += 8;
              if (v71 == v69)
              {
                unint64_t v71 = *(char **)(*(void *)a3 + 376);
                break;
              }
            }
          }
          if (v70 - v68 >= v71 - v68)
          {
LABEL_107:
            unint64_t v13 = a1 + 48;
            if (a1 + 48 < (unint64_t)a2)
            {
              uint64_t v75 = *(void *)a3;
              unint64_t v76 = a1;
              do
              {
                uint64_t v77 = *(void *)(v76 + 72);
                unint64_t v76 = v13;
                if (v23 != v77)
                {
                  long long v78 = *(char **)(v75 + 368);
                  long long v79 = *(char **)(v75 + 376);
                  int v80 = v78;
                  unint64_t v81 = v78;
                  if (v78 != v79)
                  {
                    do
                    {
                      if (*(void *)v81 == v23) {
                        goto LABEL_114;
                      }
                      v81 += 8;
                    }
                    while (v81 != v79);
                    unint64_t v81 = *(char **)(v75 + 376);
LABEL_114:
                    while (*(void *)v80 != v77)
                    {
                      v80 += 8;
                      if (v80 == v79)
                      {
                        int v80 = *(char **)(v75 + 376);
                        break;
                      }
                    }
                  }
                  if (v81 - v78 < v80 - v78) {
                    break;
                  }
                }
                v13 += 48;
              }
              while (v76 + 48 < (unint64_t)a2);
            }
          }
          else
          {
            unint64_t v13 = a1;
            do
            {
              do
              {
                uint64_t v72 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v72);
              if (v68 == v69)
              {
                BOOL v74 = *(char **)(*(void *)a3 + 368);
                double v73 = v74;
              }
              else
              {
                double v73 = *(char **)(*(void *)a3 + 368);
                while (*(void *)v73 != v23)
                {
                  v73 += 8;
                  if (v73 == v69)
                  {
                    double v73 = *(char **)(*(void *)a3 + 376);
                    break;
                  }
                }
                BOOL v74 = *(char **)(*(void *)a3 + 368);
                while (*(void *)v74 != v72)
                {
                  v74 += 8;
                  if (v74 == v69)
                  {
                    BOOL v74 = *(char **)(*(void *)a3 + 376);
                    break;
                  }
                }
              }
            }
            while (v73 - v68 >= v74 - v68);
          }
          unint64_t v82 = a2;
          if (v13 < (unint64_t)a2)
          {
            uint64_t v83 = *(void *)a3;
            unint64_t v82 = a2;
            do
            {
              uint64_t v84 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v84) {
                break;
              }
              id v85 = *(char **)(v83 + 368);
              int v86 = *(char **)(v83 + 376);
              unint64_t v87 = v85;
              id v88 = v85;
              if (v85 != v86)
              {
                do
                {
                  if (*(void *)v88 == v23) {
                    goto LABEL_126;
                  }
                  v88 += 8;
                }
                while (v88 != v86);
                id v88 = *(char **)(v83 + 376);
LABEL_126:
                while (*(void *)v87 != v84)
                {
                  v87 += 8;
                  if (v87 == v86)
                  {
                    unint64_t v87 = *(char **)(v83 + 376);
                    break;
                  }
                }
              }
            }
            while (v88 - v85 < v87 - v85);
          }
          while (v13 < (unint64_t)v82)
          {
            *(_OWORD *)v225 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v225[16] = *(_OWORD *)(v13 + 32);
            long long v217 = *(_OWORD *)v13;
            long long v89 = *v82;
            long long v90 = v82[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v82 + 27);
            *(_OWORD *)unint64_t v13 = v89;
            *(_OWORD *)(v13 + 16) = v90;
            *(long long *)((char *)v82 + 27) = *(_OWORD *)&v225[11];
            long long *v82 = v217;
            v82[1] = *(_OWORD *)v225;
            uint64_t v91 = *(void *)a3;
            do
            {
              do
              {
                uint64_t v92 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v92);
              id v93 = *(char **)(v91 + 368);
              BOOL v94 = *(char **)(v91 + 376);
              if (v93 == v94)
              {
                double v96 = *(char **)(v91 + 368);
                unint64_t v95 = v96;
              }
              else
              {
                unint64_t v95 = *(char **)(v91 + 368);
                while (*(void *)v95 != v23)
                {
                  v95 += 8;
                  if (v95 == v94)
                  {
                    unint64_t v95 = *(char **)(v91 + 376);
                    break;
                  }
                }
                double v96 = *(char **)(v91 + 368);
                while (*(void *)v96 != v92)
                {
                  v96 += 8;
                  if (v96 == v94)
                  {
                    double v96 = *(char **)(v91 + 376);
                    break;
                  }
                }
              }
            }
            while (v95 - v93 >= v96 - v93);
            do
            {
              uint64_t v97 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v97) {
                break;
              }
              if (v93 == v94)
              {
                unint64_t v99 = v93;
                unint64_t v98 = v93;
              }
              else
              {
                unint64_t v98 = v93;
                while (*(void *)v98 != v23)
                {
                  v98 += 8;
                  if (v98 == v94)
                  {
                    unint64_t v98 = v94;
                    break;
                  }
                }
                unint64_t v99 = v93;
                while (*(void *)v99 != v97)
                {
                  v99 += 8;
                  if (v99 == v94)
                  {
                    unint64_t v99 = v94;
                    break;
                  }
                }
              }
            }
            while (v98 - v93 < v99 - v93);
          }
          unint64_t v100 = (long long *)(v13 - 48);
          BOOL v5 = v13 - 48 >= a1;
          BOOL v6 = v13 - 48 == a1;
          if (v13 - 48 != a1)
          {
            long long v101 = *v100;
            long long v102 = *(_OWORD *)(v13 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
            *(_OWORD *)a1 = v101;
            *(_OWORD *)(a1 + 16) = v102;
          }
          a5 = 0;
          *unint64_t v100 = v235;
          *(void *)(v13 - 32) = v241;
          *(void *)(v13 - 24) = v23;
          *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v232 + 7);
          *(void *)(v13 - 16) = v232;
        }
        uint64_t v240 = *(void *)(a1 + 16);
        long long v231 = *(_OWORD *)(a1 + 32);
        long long v234 = *(_OWORD *)a1;
        unint64_t v30 = a1;
        do
        {
          unint64_t v31 = v30;
          v30 += 48;
          uint64_t v32 = *(void *)(v31 + 72);
          if (v32 == v23) {
            break;
          }
          id v33 = *(char **)(v24 + 368);
          double v34 = *(char **)(v24 + 376);
          double v35 = v33;
          double v36 = v33;
          if (v33 != v34)
          {
            do
            {
              if (*(void *)v36 == v32) {
                goto LABEL_26;
              }
              v36 += 8;
            }
            while (v36 != v34);
            double v36 = *(char **)(v24 + 376);
LABEL_26:
            while (*(void *)v35 != v23)
            {
              v35 += 8;
              if (v35 == v34)
              {
                double v35 = *(char **)(v24 + 376);
                break;
              }
            }
          }
        }
        while (v36 - v33 < v35 - v33);
        double v37 = a2;
        if (v31 == a1)
        {
          double v37 = a2;
          if (v30 < (unint64_t)a2)
          {
            double v37 = a2;
            do
            {
              uint64_t v43 = *((void *)v37 - 3);
              v37 -= 3;
              if (v43 != v23)
              {
                long long v44 = *(char **)(v24 + 368);
                long long v45 = *(char **)(v24 + 376);
                double v46 = v44;
                unint64_t v47 = v44;
                if (v44 != v45)
                {
                  do
                  {
                    if (*(void *)v47 == v43) {
                      goto LABEL_48;
                    }
                    v47 += 8;
                  }
                  while (v47 != v45);
                  unint64_t v47 = *(char **)(v24 + 376);
LABEL_48:
                  while (*(void *)v46 != v23)
                  {
                    v46 += 8;
                    if (v46 == v45)
                    {
                      double v46 = *(char **)(v24 + 376);
                      break;
                    }
                  }
                }
                if (v47 - v44 < v46 - v44) {
                  break;
                }
              }
            }
            while (v30 < (unint64_t)v37);
          }
        }
        else
        {
          do
          {
            do
            {
              uint64_t v38 = *((void *)v37 - 3);
              v37 -= 3;
            }
            while (v38 == v23);
            uint64_t v39 = *(char **)(v24 + 368);
            uint64_t v40 = *(char **)(v24 + 376);
            double v41 = v39;
            double v42 = v39;
            if (v39 != v40)
            {
              do
              {
                if (*(void *)v42 == v38) {
                  goto LABEL_36;
                }
                v42 += 8;
              }
              while (v42 != v40);
              double v42 = *(char **)(v24 + 376);
LABEL_36:
              while (*(void *)v41 != v23)
              {
                v41 += 8;
                if (v41 == v40)
                {
                  double v41 = *(char **)(v24 + 376);
                  break;
                }
              }
            }
          }
          while (v42 - v39 >= v41 - v39);
        }
        unint64_t v13 = v30;
        if (v30 < (unint64_t)v37)
        {
          uint64_t v48 = v37;
          do
          {
            *(_OWORD *)v224 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v224[16] = *(_OWORD *)(v13 + 32);
            long long v49 = *(_OWORD *)v13;
            long long v51 = *v48;
            long long v50 = v48[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v48 + 27);
            *(_OWORD *)unint64_t v13 = v51;
            *(_OWORD *)(v13 + 16) = v50;
            *(long long *)((char *)v48 + 27) = *(_OWORD *)&v224[11];
            *uint64_t v48 = v49;
            v48[1] = *(_OWORD *)v224;
            uint64_t v52 = *(void *)a3;
            do
            {
              uint64_t v53 = *(void *)(v13 + 72);
              v13 += 48;
              if (v53 == v23) {
                break;
              }
              BOOL v54 = *(char **)(v52 + 368);
              unint64_t v55 = *(char **)(v52 + 376);
              uint64_t v56 = v54;
              long long v57 = v54;
              if (v54 != v55)
              {
                do
                {
                  if (*(void *)v57 == v53) {
                    goto LABEL_61;
                  }
                  v57 += 8;
                }
                while (v57 != v55);
                long long v57 = *(char **)(v52 + 376);
LABEL_61:
                while (*(void *)v56 != v23)
                {
                  v56 += 8;
                  if (v56 == v55)
                  {
                    uint64_t v56 = *(char **)(v52 + 376);
                    break;
                  }
                }
              }
            }
            while (v57 - v54 < v56 - v54);
            do
            {
              do
              {
                uint64_t v58 = *((void *)v48 - 3);
                v48 -= 3;
              }
              while (v58 == v23);
              unint64_t v59 = *(char **)(v52 + 368);
              char v60 = *(char **)(v52 + 376);
              id v61 = v59;
              long long v62 = v59;
              if (v59 != v60)
              {
                do
                {
                  if (*(void *)v62 == v58) {
                    goto LABEL_70;
                  }
                  v62 += 8;
                }
                while (v62 != v60);
                long long v62 = *(char **)(v52 + 376);
LABEL_70:
                while (*(void *)v61 != v23)
                {
                  v61 += 8;
                  if (v61 == v60)
                  {
                    id v61 = *(char **)(v52 + 376);
                    break;
                  }
                }
              }
            }
            while (v62 - v59 >= v61 - v59);
          }
          while (v13 < (unint64_t)v48);
        }
        double v63 = (long long *)(v13 - 48);
        if (v13 - 48 != a1)
        {
          long long v64 = *v63;
          long long v65 = *(_OWORD *)(v13 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
          *(_OWORD *)a1 = v64;
          *(_OWORD *)(a1 + 16) = v65;
        }
        *double v63 = v234;
        *(void *)(v13 - 32) = v240;
        *(void *)(v13 - 24) = v23;
        *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v231 + 7);
        *(void *)(v13 - 16) = v231;
        if (v30 >= (unint64_t)v37) {
          break;
        }
LABEL_80:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(a1, v13 - 48, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, v13 - 48, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v13, (uint64_t)a2, a3))
      {
        break;
      }
      if (!v66) {
        goto LABEL_80;
      }
    }
    a2 = (long long *)(v13 - 48);
    if (!v66) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 - 24);
      uint64_t v9 = *(void *)(a1 + 24);
      if (v8 == v9) {
        return result;
      }
      id v10 = *(char **)(*(void *)a3 + 368);
      int64_t v11 = *(char **)(*(void *)a3 + 376);
      unint64_t v12 = v10;
      unint64_t v13 = v10;
      if (v10 == v11) {
        goto LABEL_10;
      }
      do
      {
        if (*(void *)v13 == v8) {
          goto LABEL_7;
        }
        v13 += 8;
      }
      while (v13 != v11);
      unint64_t v13 = *(char **)(*(void *)a3 + 376);
      do
      {
LABEL_7:
        if (*(void *)v12 == v9) {
          goto LABEL_10;
        }
        v12 += 8;
      }
      while (v12 != v11);
      unint64_t v12 = *(char **)(*(void *)a3 + 376);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        uint64_t v14 = (long long *)(a2 - 48);
        long long v15 = *(_OWORD *)a1;
        *(_OWORD *)double v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        long long v16 = *(_OWORD *)(a2 - 21);
        long long v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *uint64_t v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(long long *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), a3);
      uint64_t v19 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      int v20 = 0;
      break;
  }
  while (1)
  {
    uint64_t v21 = *(void *)(v19 + 24);
    uint64_t v22 = *(void *)(v18 + 24);
    if (v21 != v22)
    {
      uint64_t v23 = *(char **)(*(void *)a3 + 368);
      uint64_t v24 = *(char **)(*(void *)a3 + 376);
      uint64_t v25 = v23;
      uint64_t v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(void *)v26 == v21) {
            goto LABEL_19;
          }
          v26 += 8;
        }
        while (v26 != v24);
        uint64_t v26 = *(char **)(*(void *)a3 + 376);
LABEL_19:
        while (*(void *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            uint64_t v25 = *(char **)(*(void *)a3 + 376);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        long long v34 = *(_OWORD *)v19;
        uint64_t v36 = *(void *)(v19 + 16);
        long long v37 = *(_OWORD *)(v19 + 32);
        uint64_t v27 = v19;
        while (1)
        {
          long long v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1) {
            break;
          }
          uint64_t v27 = v18;
          uint64_t v29 = *(void *)(v18 - 24);
          if (v21 != v29)
          {
            unint64_t v30 = *(char **)(*(void *)a3 + 368);
            unint64_t v31 = *(char **)(*(void *)a3 + 376);
            uint64_t v32 = v30;
            id v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(void *)v33 == v21) {
                  goto LABEL_30;
                }
                v33 += 8;
              }
              while (v33 != v31);
              id v33 = *(char **)(*(void *)a3 + 376);
LABEL_30:
              while (*(void *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  uint64_t v32 = *(char **)(*(void *)a3 + 376);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30) {
              continue;
            }
          }
          goto LABEL_36;
        }
        uint64_t v27 = a1;
LABEL_36:
        *(_OWORD *)uint64_t v27 = v34;
        *(void *)(v27 + 16) = v36;
        *(void *)(v27 + 24) = v21;
        *(void *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8) {
          return v19 + 48 == a2;
        }
      }
    }
    uint64_t v18 = v19;
    v19 += 48;
    if (v19 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v10) >> 4);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*((double *)a2 - 5) < *(double *)(v10 + 8))
                {
                  *(_OWORD *)id v118 = *(_OWORD *)(v10 + 16);
                  *(_OWORD *)&v118[16] = *(_OWORD *)(v10 + 32);
                  long long v110 = *(_OWORD *)v10;
                  long long v52 = *(a2 - 3);
                  long long v53 = *(a2 - 2);
                  *(_OWORD *)(v10 + 27) = *(long long *)((char *)a2 - 21);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(long long *)((char *)a2 - 21) = *(_OWORD *)&v118[11];
                  *(a2 - 3) = v110;
                  *(a2 - 2) = *(_OWORD *)v118;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)v10, (long long *)(v10 + 48), a2 - 3);
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v10, v10 + 48, v10 + 96, (uint64_t)(a2 - 3));
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v10, v10 + 48, v10 + 96, v10 + 144, (uint64_t)(a2 - 3));
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 1151)
          {
            BOOL v54 = (long long *)(v10 + 48);
            BOOL v56 = (long long *)v10 == a2 || v54 == a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  unint64_t v59 = v54;
                  double v60 = *(double *)(v58 + 56);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *(void *)v54;
                    *(_OWORD *)uint64_t v111 = *(_OWORD *)(v58 + 64);
                    *(_OWORD *)&v111[16] = *(_OWORD *)(v58 + 80);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      double v63 = (_OWORD *)(v10 + v62);
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      v63[3] = *(_OWORD *)(v10 + v62);
                      v63[4] = v64;
                      *(_OWORD *)((char *)v63 + 75) = *(_OWORD *)(v10 + v62 + 27);
                      if (!v62) {
                        break;
                      }
                      v62 -= 48;
                      if (v60 >= *((double *)v63 - 5))
                      {
                        uint64_t v65 = v10 + v62 + 48;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = *(_OWORD *)v111;
                    *(_OWORD *)(v65 + 27) = *(_OWORD *)&v111[11];
                  }
                  BOOL v54 = v59 + 3;
                  v57 += 48;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 3 != a2);
              }
            }
            else if (!v56)
            {
              do
              {
                unint64_t v98 = v54;
                double v99 = *(double *)(a1 + 56);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *(void *)v54;
                  *(_OWORD *)unint64_t v114 = *(_OWORD *)(a1 + 64);
                  *(_OWORD *)&v114[16] = *(_OWORD *)(a1 + 80);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(v101 - 2);
                    *long long v101 = *(v101 - 3);
                    v101[1] = v102;
                    *(long long *)((char *)v101 + 27) = *(long long *)((char *)v101 - 21);
                    double v103 = *((double *)v101 - 11);
                    v101 -= 3;
                  }
                  while (v99 < v103);
                  *(void *)long long v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *(long long *)((char *)v101 + 27) = *(_OWORD *)&v114[11];
                  v101[1] = *(_OWORD *)v114;
                }
                v54 += 3;
                a1 = (unint64_t)v98;
              }
              while (v98 + 3 != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((long long *)v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 48 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v70 + 8) < *(double *)(v70 + 56))
                  {
                    v70 += 48;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  unint64_t v71 = v10 + 48 * v68;
                  double v72 = *(double *)(v71 + 8);
                  if (*(double *)(v70 + 8) >= v72)
                  {
                    uint64_t v73 = *(void *)v71;
                    *(_OWORD *)double v112 = *(_OWORD *)(v71 + 16);
                    *(_OWORD *)&v112[16] = *(_OWORD *)(v71 + 32);
                    do
                    {
                      BOOL v74 = (_OWORD *)v71;
                      unint64_t v71 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_OWORD *)((char *)v74 + 27) = *(_OWORD *)(v70 + 27);
                      *BOOL v74 = v75;
                      v74[1] = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = 2 * v69;
                      uint64_t v69 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 48 * v69;
                      uint64_t v78 = v77 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v70 + 8) < *(double *)(v70 + 56))
                      {
                        v70 += 48;
                        uint64_t v69 = v78;
                      }
                    }
                    while (*(double *)(v70 + 8) >= v72);
                    *(void *)unint64_t v71 = v73;
                    *(double *)(v71 + 8) = v72;
                    *(_OWORD *)(v71 + 16) = *(_OWORD *)v112;
                    *(_OWORD *)(v71 + 27) = *(_OWORD *)&v112[11];
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x30uLL;
              do
              {
                uint64_t v80 = 0;
                *(_OWORD *)double v119 = *(_OWORD *)(v10 + 16);
                *(_OWORD *)&v119[16] = *(_OWORD *)(v10 + 32);
                long long v113 = *(_OWORD *)v10;
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = (_OWORD *)v81;
                  v81 += 48 * v80 + 48;
                  uint64_t v83 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v84 = v83 + 2;
                  if (v84 < v79 && *(double *)(v81 + 8) < *(double *)(v81 + 56))
                  {
                    v81 += 48;
                    uint64_t v80 = v84;
                  }
                  long long v85 = *(_OWORD *)v81;
                  long long v86 = *(_OWORD *)(v81 + 16);
                  *(_OWORD *)((char *)v82 + 27) = *(_OWORD *)(v81 + 27);
                  _OWORD *v82 = v85;
                  v82[1] = v86;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 3;
                if ((long long *)v81 == a2)
                {
                  *(_OWORD *)(v81 + 27) = *(_OWORD *)&v119[11];
                  *(_OWORD *)unint64_t v81 = v113;
                  *(_OWORD *)(v81 + 16) = *(_OWORD *)v119;
                }
                else
                {
                  long long v87 = *a2;
                  long long v88 = a2[1];
                  *(_OWORD *)(v81 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v81 = v87;
                  *(_OWORD *)(v81 + 16) = v88;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v119[11];
                  *a2 = v113;
                  a2[1] = *(_OWORD *)v119;
                  uint64_t v89 = v81 - v10 + 48;
                  if (v89 >= 49)
                  {
                    unint64_t v90 = (v89 / 0x30uLL - 2) >> 1;
                    unint64_t v91 = v10 + 48 * v90;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      *(_OWORD *)long long v106 = *(_OWORD *)(v81 + 16);
                      *(_OWORD *)&v106[16] = *(_OWORD *)(v81 + 32);
                      do
                      {
                        BOOL v94 = (_OWORD *)v81;
                        unint64_t v81 = v91;
                        long long v95 = *(_OWORD *)v91;
                        long long v96 = *(_OWORD *)(v91 + 16);
                        *(_OWORD *)((char *)v94 + 27) = *(_OWORD *)(v91 + 27);
                        _OWORD *v94 = v95;
                        v94[1] = v96;
                        if (!v90) {
                          break;
                        }
                        unint64_t v90 = (v90 - 1) >> 1;
                        unint64_t v91 = v10 + 48 * v90;
                      }
                      while (*(double *)(v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_OWORD *)(v81 + 16) = *(_OWORD *)v106;
                      *(_OWORD *)(v81 + 27) = *(_OWORD *)&v106[11];
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (long long *)(v10 + 48 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v12 >> 1)), a2 - 3);
            uint64_t v15 = 3 * v13;
            long long v16 = (long long *)(a1 + 48 * v13 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48), v16, a2 - 6);
            long long v17 = (long long *)(a1 + 48 + 16 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 96), v17, a2 - 9);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v16, v14, v17);
            *(_OWORD *)unint64_t v115 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v115[16] = *(_OWORD *)(a1 + 32);
            long long v107 = *(_OWORD *)a1;
            long long v18 = *(long long *)((char *)v14 + 27);
            long long v19 = v14[1];
            *(_OWORD *)a1 = *v14;
            *(_OWORD *)(a1 + 16) = v19;
            *(_OWORD *)(a1 + 27) = v18;
            *(long long *)((char *)v14 + 27) = *(_OWORD *)&v115[11];
            *uint64_t v14 = v107;
            v14[1] = *(_OWORD *)v115;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48 * (v12 >> 1)), (long long *)a1, a2 - 3);
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 40) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          *(_OWORD *)long long v105 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)&v105[16] = *(_OWORD *)(a1 + 32);
          if (v20 >= *((double *)a2 - 5))
          {
            unint64_t v41 = a1 + 48;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= (unint64_t)a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 48;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 48;
              double v40 = *(double *)(v39 + 56);
              v39 += 48;
            }
            while (v20 >= v40);
          }
          uint64_t v43 = a2;
          if (v10 < (unint64_t)a2)
          {
            long long v44 = a2;
            do
            {
              uint64_t v43 = v44 - 3;
              double v45 = *((double *)v44 - 5);
              v44 -= 3;
            }
            while (v20 < v45);
          }
          while (v10 < (unint64_t)v43)
          {
            *(_OWORD *)uint64_t v117 = *(_OWORD *)(v10 + 16);
            *(_OWORD *)&v117[16] = *(_OWORD *)(v10 + 32);
            long long v109 = *(_OWORD *)v10;
            long long v46 = *v43;
            long long v47 = v43[1];
            *(_OWORD *)(v10 + 27) = *(long long *)((char *)v43 + 27);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(long long *)((char *)v43 + 27) = *(_OWORD *)&v117[11];
            *uint64_t v43 = v109;
            v43[1] = *(_OWORD *)v117;
            do
            {
              double v48 = *(double *)(v10 + 56);
              v10 += 48;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *((double *)v43 - 5);
              v43 -= 3;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 48 >= a1;
          BOOL v5 = v10 - 48 == a1;
          if (v10 - 48 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 48);
            long long v51 = *(_OWORD *)(v10 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v10 - 21);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 48) = v38;
          *(double *)(v10 - 40) = v20;
          *(_OWORD *)(v10 - 21) = *(_OWORD *)&v105[11];
          *(_OWORD *)(v10 - 32) = *(_OWORD *)v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        *(_OWORD *)uint64_t v104 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v104[16] = *(_OWORD *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 56);
          v21 += 48;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        uint64_t v25 = a2;
        if (v21 == 48)
        {
          long long v28 = a2;
          while (v24 < (unint64_t)v28)
          {
            uint64_t v26 = v28 - 3;
            double v29 = *((double *)v28 - 5);
            v28 -= 3;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          uint64_t v26 = v28;
        }
        else
        {
          do
          {
            uint64_t v26 = v25 - 3;
            double v27 = *((double *)v25 - 5);
            v25 -= 3;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < (unint64_t)v26)
        {
          unint64_t v30 = v26;
          do
          {
            *(_OWORD *)uint64_t v116 = *(_OWORD *)(v10 + 16);
            *(_OWORD *)&v116[16] = *(_OWORD *)(v10 + 32);
            long long v108 = *(_OWORD *)v10;
            long long v31 = *v30;
            long long v32 = v30[1];
            *(_OWORD *)(v10 + 27) = *(long long *)((char *)v30 + 27);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(long long *)((char *)v30 + 27) = *(_OWORD *)&v116[11];
            *unint64_t v30 = v108;
            v30[1] = *(_OWORD *)v116;
            do
            {
              double v33 = *(double *)(v10 + 56);
              v10 += 48;
            }
            while (v33 < v20);
            do
            {
              double v34 = *((double *)v30 - 5);
              v30 -= 3;
            }
            while (v34 >= v20);
          }
          while (v10 < (unint64_t)v30);
        }
        if (v10 - 48 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 48);
          long long v36 = *(_OWORD *)(v10 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v10 - 21);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 48) = v22;
        *(double *)(v10 - 40) = v20;
        *(_OWORD *)(v10 - 21) = *(_OWORD *)&v104[11];
        *(_OWORD *)(v10 - 32) = *(_OWORD *)v104;
        if (v24 >= (unint64_t)v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(a1, v10 - 48, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, v10 - 48);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v10, (uint64_t)a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = (long long *)(v10 - 48);
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 40) < *(double *)(a1 + 8))
      {
        long long v6 = *(_OWORD *)a1;
        *(_OWORD *)double v20 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v20[16] = *(_OWORD *)(a1 + 32);
        long long v7 = *(_OWORD *)(a2 - 21);
        long long v8 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 27) = v7;
        *(_OWORD *)(a2 - 48) = v6;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v20;
        *(_OWORD *)(a2 - 21) = *(_OWORD *)&v20[11];
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48);
      return 1;
    default:
      uint64_t v9 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96));
      uint64_t v10 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    double v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      uint64_t v14 = *(void *)v10;
      *(_OWORD *)long long v19 = *(_OWORD *)(v10 + 16);
      *(_OWORD *)&v19[16] = *(_OWORD *)(v10 + 32);
      uint64_t v15 = v11;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        long long v17 = *(_OWORD *)(a1 + v15 + 112);
        *(_OWORD *)(v16 + 144) = *(_OWORD *)(a1 + v15 + 96);
        *(_OWORD *)(v16 + 160) = v17;
        *(_OWORD *)(v16 + 171) = *(_OWORD *)(a1 + v15 + 123);
        if (v15 == -96) {
          break;
        }
        v15 -= 48;
        if (v13 >= *(double *)(v16 + 56))
        {
          uint64_t v18 = a1 + v15 + 144;
          goto LABEL_12;
        }
      }
      uint64_t v18 = a1;
LABEL_12:
      *(void *)uint64_t v18 = v14;
      *(double *)(v18 + 8) = v13;
      *(_OWORD *)(v18 + 16) = *(_OWORD *)v19;
      *(_OWORD *)(v18 + 27) = *(_OWORD *)&v19[11];
      if (++v12 == 8) {
        return v10 + 48 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 48;
    v10 += 48;
    if (v10 == a2) {
      return 1;
    }
  }
}

__n128 HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::overallStatistics(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 120);
  HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)(a1 + 8), (const HDStatisticsNoiseLevel *)(a2 + 128));
  *(void *)(a1 + 112) = 0;
  uint64_t v4 = *(const void **)(a2 + 232);
  *(void *)(a1 + 104) = *(void *)(a2 + 224);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 112), v4, *(void *)(a2 + 240), (uint64_t)(*(void *)(a2 + 240) - (void)v4) >> 4);
  *(void *)(a1 + 136) = *(void *)(a2 + 256);
  *(void *)(a1 + 176) = *(void *)(a2 + 296);
  __n128 result = *(__n128 *)(a2 + 264);
  long long v6 = *(_OWORD *)(a2 + 280);
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v6;
  return result;
}

void sub_1BD0ED010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  double v3 = *(void **)(a2 + 304);
  double v48 = (void *)(a2 + 312);
  if (v3 == (void *)(a2 + 312)) {
    return;
  }
  long long v50 = (void *)(a1 + 16);
  do
  {
    BOOL v5 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a2, v3[4]);
    long long v6 = v5;
    if (!v5) {
      goto LABEL_81;
    }
    unint64_t v7 = [v5 hash];
    unint64_t v8 = v7;
    unint64_t v9 = *(void *)(a1 + 8);
    if (!v9) {
      goto LABEL_21;
    }
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v51 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v2 = v7;
      if (v7 >= v9) {
        unint64_t v2 = v7 % v9;
      }
    }
    else
    {
      unint64_t v2 = (v9 - 1) & v7;
    }
    uint64_t v11 = *(uint64_t ***)(*(void *)a1 + 8 * v2);
    if (!v11 || (int v12 = *v11) == 0)
    {
LABEL_21:
      long long v19 = (char *)operator new(0xD0uLL);
      v52[0] = v19;
      v52[1] = v50;
      char v53 = 0;
      *(void *)long long v19 = 0;
      *((void *)v19 + 1) = v8;
      *((void *)v19 + 2) = v6;
      *(_OWORD *)(v19 + 24) = 0u;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      *(_OWORD *)(v19 + 104) = 0u;
      *(_OWORD *)(v19 + 120) = 0u;
      *(_OWORD *)(v19 + 136) = 0u;
      *(_OWORD *)(v19 + 152) = 0u;
      *(_OWORD *)(v19 + 168) = 0u;
      *(_OWORD *)(v19 + 184) = 0u;
      *((void *)v19 + 25) = 0;
      *((void *)v19 + 14) = [[HDQuantitySampleOverlapProcessor alloc] initWithOverlapFunction:1];
      *((_WORD *)v19 + 60) = 257;
      *((_OWORD *)v19 + 8) = 0u;
      *((_OWORD *)v19 + 9) = 0u;
      *((_OWORD *)v19 + 10) = 0u;
      *((_OWORD *)v19 + 11) = 0u;
      *(_OWORD *)(v19 + 186) = 0u;
      char v53 = 1;
      float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v21 = *(float *)(a1 + 32);
      if (v9 && (float)(v21 * (float)v9) >= v20)
      {
LABEL_68:
        BOOL v37 = *(void **)(*(void *)a1 + 8 * v2);
        int v12 = (uint64_t *)v52[0];
        if (v37)
        {
          *(void *)v52[0] = *v37;
        }
        else
        {
          *(void *)v52[0] = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = v12;
          *(void *)(*(void *)a1 + 8 * v2) = v50;
          if (!*v12)
          {
LABEL_77:
            v52[0] = 0;
            ++*(void *)(a1 + 24);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v52);
            goto LABEL_78;
          }
          unint64_t v38 = *(void *)(*v12 + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v38 >= v9) {
              v38 %= v9;
            }
          }
          else
          {
            v38 &= v9 - 1;
          }
          BOOL v37 = (void *)(*(void *)a1 + 8 * v38);
        }
        *BOOL v37 = v12;
        goto LABEL_77;
      }
      BOOL v22 = v9 < 3 || (v9 & (v9 - 1)) != 0;
      unint64_t v23 = v22 | (2 * v9);
      unint64_t v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      else {
        int8x8_t prime = (int8x8_t)v23;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v9 = *(void *)(a1 + 8);
      if (*(void *)&prime > v9) {
        goto LABEL_34;
      }
      if (*(void *)&prime < v9)
      {
        unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          unint64_t v32 = std::__next_prime(v32);
        }
        else
        {
          uint64_t v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2) {
            unint64_t v32 = v34;
          }
        }
        if (*(void *)&prime <= v32) {
          int8x8_t prime = (int8x8_t)v32;
        }
        if (*(void *)&prime >= v9)
        {
          unint64_t v9 = *(void *)(a1 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_34:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v26 = operator new(8 * *(void *)&prime);
            double v27 = *(void **)a1;
            *(void *)a1 = v26;
            if (v27) {
              operator delete(v27);
            }
            uint64_t v28 = 0;
            *(int8x8_t *)(a1 + 8) = prime;
            do
              *(void *)(*(void *)a1 + 8 * v28++) = 0;
            while (*(void *)&prime != v28);
            double v29 = (void *)*v50;
            if (*v50)
            {
              unint64_t v30 = v29[1];
              uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(void *)&prime) {
                  v30 %= *(void *)&prime;
                }
              }
              else
              {
                v30 &= *(void *)&prime - 1;
              }
              *(void *)(*(void *)a1 + 8 * v30) = v50;
              long long v35 = (void *)*v29;
              if (*v29)
              {
                do
                {
                  unint64_t v36 = v35[1];
                  if (v31.u32[0] > 1uLL)
                  {
                    if (v36 >= *(void *)&prime) {
                      v36 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v36 &= *(void *)&prime - 1;
                  }
                  if (v36 != v30)
                  {
                    if (!*(void *)(*(void *)a1 + 8 * v36))
                    {
                      *(void *)(*(void *)a1 + 8 * v36) = v29;
                      goto LABEL_59;
                    }
                    void *v29 = *v35;
                    *long long v35 = **(void **)(*(void *)a1 + 8 * v36);
                    **(void **)(*(void *)a1 + 8 * v36) = v35;
                    long long v35 = v29;
                  }
                  unint64_t v36 = v30;
LABEL_59:
                  double v29 = v35;
                  long long v35 = (void *)*v35;
                  unint64_t v30 = v36;
                }
                while (v35);
              }
            }
            unint64_t v9 = (unint64_t)prime;
            goto LABEL_63;
          }
          long long v47 = *(void **)a1;
          *(void *)a1 = 0;
          if (v47) {
            operator delete(v47);
          }
          unint64_t v9 = 0;
          *(void *)(a1 + 8) = 0;
        }
      }
LABEL_63:
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v8 >= v9) {
          unint64_t v2 = v8 % v9;
        }
        else {
          unint64_t v2 = v8;
        }
      }
      else
      {
        unint64_t v2 = (v9 - 1) & v8;
      }
      goto LABEL_68;
    }
    while (1)
    {
      unint64_t v13 = v12[1];
      if (v13 == v8) {
        break;
      }
      if (v51 > 1)
      {
        if (v13 >= v9) {
          v13 %= v9;
        }
      }
      else
      {
        v13 &= v9 - 1;
      }
      if (v13 != v2) {
        goto LABEL_21;
      }
LABEL_20:
      int v12 = (uint64_t *)*v12;
      if (!v12) {
        goto LABEL_21;
      }
    }
    unint64_t v14 = v8;
    id v15 = (id)v12[2];
    id v16 = v6;
    long long v17 = v16;
    if (v15 != v16)
    {
      char v18 = [v15 isEqualToString:v16];

      unint64_t v8 = v14;
      if (v18) {
        goto LABEL_78;
      }
      goto LABEL_20;
    }

LABEL_78:
    unint64_t v2 = (unint64_t)(v12 + 2);
    *((_DWORD *)v12 + 6) = *((_DWORD *)v3 + 10);
    *((_OWORD *)v12 + 2) = *((_OWORD *)v3 + 3);
    long long v39 = *((_OWORD *)v3 + 4);
    long long v40 = *((_OWORD *)v3 + 5);
    long long v41 = *((_OWORD *)v3 + 6);
    *(_OWORD *)((char *)v12 + 90) = *(_OWORD *)((char *)v3 + 106);
    *((_OWORD *)v12 + 4) = v40;
    *((_OWORD *)v12 + 5) = v41;
    *((_OWORD *)v12 + 3) = v39;
    objc_storeStrong((id *)v12 + 14, (id)v3[16]);
    *((_WORD *)v12 + 60) = *((_WORD *)v3 + 68);
    v12[16] = v3[18];
    if (v12 + 2 != v3 + 4) {
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)v12 + 136, (char *)v3[19], v3[20], (uint64_t)(v3[20] - v3[19]) >> 4);
    }
    v12[20] = v3[22];
    long long v42 = *(_OWORD *)(v3 + 23);
    long long v43 = *(_OWORD *)(v3 + 25);
    *((_WORD *)v12 + 100) = *((_WORD *)v3 + 108);
    *(_OWORD *)(v12 + 23) = v43;
    *(_OWORD *)(v12 + 21) = v42;

LABEL_81:
    long long v44 = (void *)v3[1];
    if (v44)
    {
      do
      {
        double v45 = v44;
        long long v44 = (void *)*v44;
      }
      while (v44);
    }
    else
    {
      do
      {
        double v45 = (void *)v3[2];
        BOOL v46 = *v45 == (void)v3;
        double v3 = v45;
      }
      while (!v46);
    }
    double v3 = v45;
  }
  while (v45 != v48);
}

void sub_1BD0ED604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);

  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>>::~__hash_table(v6);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,0>(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(void *)(a1 + 128) = v2;
    operator delete(v2);
  }

  double v3 = *(void **)a1;
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      double v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1724710;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1724710;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C187B8A0);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0x28uLL);
  *unint64_t v2 = &unk_1F1724710;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BD0ED8F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1724710;
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48))(v1) + 96;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsNoiseLevel const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F17247A0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsNoiseLevel const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F17247A0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C187B8A0);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsNoiseLevel const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0x28uLL);
  *unint64_t v2 = &unk_1F17247A0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BD0EDB88(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsNoiseLevel const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F17247A0;
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsNoiseLevel const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsNoiseLevel const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsNoiseLevel const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  unint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsNoiseLevel const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsNoiseLevel const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsNoiseLevel const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::~__func()
{
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F1724830;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1724830;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 664))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a4, 3, @"Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date");
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
  }
  double v8 = *(double *)(a2 + 8);
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9)
  {
    if (*(unsigned char *)(a1 + 664))
    {
      double v10 = -1.79769313e308;
    }
    else
    {
      double v10 = *(double *)(a1 + 176);
      double v12 = *(double *)(a1 + 120);
      if (v10 <= v12) {
        double v10 = -1.79769313e308;
      }
      if (v10 < v12) {
        double v10 = *(double *)(a1 + 120);
      }
    }
  }
  else
  {
    double v10 = *(double *)(a1 + 176);
    if (v10 <= *(double *)(a1 + 120)) {
      double v10 = -1.79769313e308;
    }
  }
  if (v10 <= v8)
  {
    if (v9 && a3) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_advanceToTime(a1, v8);
    }
    HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    unint64_t v13 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
    uint64_t v11 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v13, a4);
  }
  return v11;
}

void sub_1BD0EDFD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_advanceToTime(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 128) <= a2)
  {
    uint64_t v4 = a1 + 112;
    BOOL v5 = (double *)(a1 + 120);
    do
    {
      uint64_t v6 = *(void *)(a1 + 640);
      uint64_t v7 = *(void *)(a1 + 632);
      if (v6 == v7)
      {
        uint64_t v22 = 0;
        id v15 = *(void **)(a1 + 40);
        id v16 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a2];
        double v8 = [v15 dateIntervalContainingDate:v16 index:&v22];

        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v17 = v22;
        double v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v19 = v18;
        float v20 = [v8 endDate];
        [v20 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::resetToBucket(v4, v17, v19, v21);
      }
      else
      {
        double v8 = [*(id *)(a1 + 40) dateIntervalAtIndex:*(void *)(a1 + 112) + 1];
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v5);
        double v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v12 = v11;
        unint64_t v13 = [v8 endDate];
        [v13 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::advanceBucket(v4, v12, v14);
      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_didChangeBucket(a1, v9);
      if (v6 != v7) {
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
      }
    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1BD0EE1E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  char v3 = *(unsigned char *)(a2 + 32);
  if (!v3) {
    return;
  }
  uint64_t v6 = a1 + 8;
  double v7 = *(double *)(a1 + 8);
  double v8 = *(uint64_t **)a2;
  double v9 = *(double *)(a2 + 8);
  double v10 = *(double *)(a2 + 16);
  unint64_t v11 = *(void *)(a2 + 24);
  char v12 = *(unsigned char *)(a2 + 33);
  double v13 = v9;
  if (v9 <= v7)
  {
    double v13 = *(double *)(a1 + 8);
    if (v10 < v7) {
      return;
    }
  }
  if (v10 <= v13) {
    return;
  }
  double v14 = *(double *)(a1 + 16);
  if (v13 <= v14)
  {
    if (v10 >= v14)
    {
      BOOL v15 = v10 > v14;
      unint64_t v16 = *(void *)(a2 + 24);
      double v18 = *(double *)(a2 + 16);
      double v19 = *(double *)(a1 + 16);
      float v20 = *(uint64_t **)a2;
      char v17 = *(unsigned char *)(a2 + 33);
      if (v13 >= v14)
      {
        unint64_t v16 = *(void *)(a2 + 24);
        double v18 = *(double *)(a2 + 16);
        double v19 = *(double *)(a1 + 16);
        float v20 = *(uint64_t **)a2;
        char v17 = *(unsigned char *)(a2 + 33);
        goto LABEL_52;
      }
    }
    else
    {
      BOOL v15 = 0;
      unint64_t v16 = 0;
      char v17 = 0;
      double v18 = 0.0;
      double v14 = *(double *)(a2 + 16);
      double v19 = 0.0;
      float v20 = 0;
    }
    double v60 = v14;
    double v61 = v13;
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 336, v11, v11);
    unint64_t v21 = *(void *)(a1 + 112);
    if (v21 == *(void *)(a1 + 104) && *(uint64_t *)(a1 + 168) <= 0)
    {
      v26.f64[1] = *(float64_t *)(a1 + 16);
      double v23 = v60;
      double v22 = v61;
      v26.f64[0] = v61;
      v27.f64[0] = *(float64_t *)(a1 + 8);
      v27.f64[1] = v60;
      int8x16_t v28 = (int8x16_t)vcgtq_f64(v27, v26);
      v27.f64[0] = v61;
      *(int8x16_t *)(a1 + 48) = vbslq_s8(v28, *(int8x16_t *)(a1 + 8), (int8x16_t)v27);
      if (!a3)
      {
LABEL_25:
        unint64_t v29 = *(void *)(a1 + 120);
        if (v21 >= v29)
        {
          uint64_t v31 = *(void *)(a1 + 104);
          unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - v31) >> 4);
          unint64_t v33 = v32 + 1;
          if (v32 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - v31) >> 4);
          if (2 * v34 > v33) {
            unint64_t v33 = 2 * v34;
          }
          if (v34 >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v35 = 0x555555555555555;
          }
          else {
            unint64_t v35 = v33;
          }
          if (v35)
          {
            unint64_t v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v35);
            double v23 = v60;
            double v22 = v61;
          }
          else
          {
            uint64_t v36 = 0;
          }
          unint64_t v37 = v35 + 48 * v32;
          unint64_t v38 = v35 + 48 * v36;
          *(void *)unint64_t v37 = v8;
          *(double *)(v37 + 8) = v22;
          *(double *)(v37 + 16) = v23;
          *(void *)(v37 + 24) = v11;
          *(unsigned char *)(v37 + 32) = 1;
          *(unsigned char *)(v37 + 33) = v12;
          *(_WORD *)(v37 + 40) = 0;
          *(unsigned char *)(v37 + 42) = 0;
          unint64_t v30 = v37 + 48;
          long long v40 = *(char **)(a1 + 104);
          long long v39 = *(char **)(a1 + 112);
          if (v39 != v40)
          {
            do
            {
              long long v41 = *((_OWORD *)v39 - 3);
              long long v42 = *((_OWORD *)v39 - 2);
              *(_OWORD *)(v37 - 21) = *(_OWORD *)(v39 - 21);
              *(_OWORD *)(v37 - 48) = v41;
              *(_OWORD *)(v37 - 32) = v42;
              v37 -= 48;
              v39 -= 48;
            }
            while (v39 != v40);
            long long v39 = *(char **)(a1 + 104);
          }
          *(void *)(a1 + 104) = v37;
          *(void *)(a1 + 112) = v30;
          *(void *)(a1 + 120) = v38;
          if (v39) {
            operator delete(v39);
          }
        }
        else
        {
          *(void *)unint64_t v21 = v8;
          *(double *)(v21 + 8) = v22;
          *(double *)(v21 + 16) = v23;
          *(void *)(v21 + 24) = v11;
          *(unsigned char *)(v21 + 32) = 1;
          *(unsigned char *)(v21 + 33) = v12;
          *(_WORD *)(v21 + 40) = 0;
          unint64_t v30 = v21 + 48;
          *(unsigned char *)(v21 + 42) = 0;
        }
        *(void *)(a1 + 112) = v30;
        if (!*(unsigned char *)(a1 + 304) || *(double *)(a1 + 280) <= v9)
        {
          *(void *)(a1 + 272) = v8;
          *(double *)(a1 + 280) = v9;
          *(double *)(a1 + 288) = v10;
          *(void *)(a1 + 296) = v11;
          *(unsigned char *)(a1 + 304) = v3;
          *(unsigned char *)(a1 + 305) = v12;
          if (!*(unsigned char *)(a1 + 208) || *(double *)(a1 + 184) <= v9)
          {
            *(void *)(a1 + 176) = v8;
            *(double *)(a1 + 184) = v9;
            *(double *)(a1 + 192) = v10;
            *(void *)(a1 + 200) = v11;
            *(unsigned char *)(a1 + 208) = v3;
            *(unsigned char *)(a1 + 209) = v12;
          }
        }
        if (*(unsigned char *)(a1 + 33))
        {
          unint64_t v43 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(v6, v11);
          long long v44 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_statisticsForSource(v6, v43);
          if (!*((unsigned char *)v44 + 176) || *((double *)v44 + 19) <= v9)
          {
            v44[18] = v8;
            *((double *)v44 + 19) = v9;
            *((double *)v44 + 20) = v10;
            v44[21] = (uint64_t *)v11;
            *((unsigned char *)v44 + 176) = v3;
            *((unsigned char *)v44 + 177) = v12;
            if (!*((unsigned char *)v44 + 80) || *((double *)v44 + 7) <= v9)
            {
              v44[6] = v8;
              *((double *)v44 + 7) = v9;
              *((double *)v44 + 8) = v10;
              v44[9] = (uint64_t *)v11;
              *((unsigned char *)v44 + 80) = v3;
              *((unsigned char *)v44 + 81) = v12;
            }
          }
        }
LABEL_52:
        char v12 = v17;
        double v8 = v20;
        double v13 = v19;
        double v10 = v18;
        unint64_t v11 = v16;
        if (!v15) {
          return;
        }
        goto LABEL_53;
      }
    }
    else
    {
      double v23 = v60;
      double v22 = v61;
      if (v61 < *(double *)(a1 + 48))
      {
        double v24 = *(double *)(a1 + 8);
        if (v61 >= v24) {
          double v24 = v61;
        }
        *(double *)(a1 + 48) = v24;
      }
      if (v60 > *(double *)(a1 + 56))
      {
        double v25 = *(double *)(a1 + 16);
        if (v25 >= v60) {
          double v25 = v60;
        }
        *(double *)(a1 + 56) = v25;
      }
      if (!a3) {
        goto LABEL_25;
      }
    }
    if (v22 < *(double *)(a1 + 16))
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_mergeThroughTime(v6, v22);
      double v23 = v60;
      double v22 = v61;
      unint64_t v21 = *(void *)(a1 + 112);
    }
    goto LABEL_25;
  }
  LOBYTE(v15) = 1;
LABEL_53:
  unint64_t v45 = *(void *)(a1 + 528);
  unint64_t v46 = *(void *)(a1 + 536);
  if (v45 >= v46)
  {
    uint64_t v48 = *(void *)(a1 + 520);
    unint64_t v49 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v45 - v48) >> 3);
    unint64_t v50 = v49 + 1;
    if (v49 + 1 > 0x666666666666666) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v51 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v46 - v48) >> 3);
    if (2 * v51 > v50) {
      unint64_t v50 = 2 * v51;
    }
    if (v51 >= 0x333333333333333) {
      unint64_t v52 = 0x666666666666666;
    }
    else {
      unint64_t v52 = v50;
    }
    if (v52)
    {
      double v62 = v13;
      unint64_t v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v52);
      double v13 = v62;
    }
    else
    {
      uint64_t v53 = 0;
    }
    unint64_t v54 = v52 + 40 * v49;
    unint64_t v55 = v52 + 40 * v53;
    *(void *)unint64_t v54 = v8;
    *(double *)(v54 + 8) = v13;
    *(double *)(v54 + 16) = v10;
    *(void *)(v54 + 24) = v11;
    *(unsigned char *)(v54 + 32) = v15;
    *(unsigned char *)(v54 + 33) = v12;
    unint64_t v47 = v54 + 40;
    BOOL v56 = *(char **)(a1 + 528);
    uint64_t v57 = *(char **)(a1 + 520);
    if (v56 != v57)
    {
      do
      {
        long long v58 = *(_OWORD *)(v56 - 40);
        long long v59 = *(_OWORD *)(v56 - 24);
        *(_WORD *)(v54 - 8) = *((_WORD *)v56 - 4);
        *(_OWORD *)(v54 - 24) = v59;
        *(_OWORD *)(v54 - 40) = v58;
        v54 -= 40;
        v56 -= 40;
      }
      while (v56 != v57);
      BOOL v56 = *(char **)(a1 + 520);
    }
    *(void *)(a1 + 520) = v54;
    *(void *)(a1 + 528) = v47;
    *(void *)(a1 + 536) = v55;
    if (v56) {
      operator delete(v56);
    }
  }
  else
  {
    *(void *)unint64_t v45 = v8;
    *(double *)(v45 + 8) = v13;
    *(double *)(v45 + 16) = v10;
    *(void *)(v45 + 24) = v11;
    *(unsigned char *)(v45 + 32) = v15;
    unint64_t v47 = v45 + 40;
    *(unsigned char *)(v45 + 33) = v12;
  }
  *(void *)(a1 + 528) = v47;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 666))
  {
    *(unsigned char *)(a1 + 668) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 668) = 0;
    unint64_t v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      uint64_t v4 = v2;
      char v3 = (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      if (v3) {
        v4[2](v4, v3);
      }

      unint64_t v2 = v4;
    }
  }
}

void sub_1BD0EE7D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  double v9 = 0;
  double v10 = 0;
  uint64_t v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 520), *(void *)(a1 + 528), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 528) - *(void *)(a1 + 520)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::resetToBucket(a1, *(void *)a1 + 1, a2, a3);
  uint64_t v6 = v9;
  double v7 = v10;
  if (v9 != v10)
  {
    uint64_t v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BD0EE8D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8 = (id *)(a1 + 40);
  objc_storeStrong((id *)(a1 + 544), *(id *)(a1 + 40));
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  double v9 = [[HDQuantitySampleOverlapProcessor alloc] initWithOverlapFunction:1];
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 194) = 0u;
  double v10 = *(void **)(a1 + 216);
  *(void *)(a1 + 216) = v9;
  uint64_t v11 = v9;

  char v12 = *(void **)(a1 + 240);
  *(_WORD *)(a1 + 224) = 257;
  *(void *)(a1 + 232) = 0;
  if (v12)
  {
    *(void *)(a1 + 248) = v12;
    operator delete(v12);
  }
  *(_WORD *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;

  if (*(void *)(a1 + 328))
  {
    double v13 = *(void **)(a1 + 312);
    uint64_t v14 = *(void *)(a1 + 320);
    *(void *)(a1 + 312) = a1 + 320;
    *(void *)(v14 + 16) = 0;
    *(void *)(a1 + 320) = 0;
    *(void *)(a1 + 328) = 0;
    if (v13[1]) {
      BOOL v15 = (void *)v13[1];
    }
    else {
      BOOL v15 = v13;
    }
    if (v15)
    {
      unint64_t v16 = (void *)v15[2];
      if (v16)
      {
        char v17 = (void *)*v16;
        if ((void *)*v16 == v15)
        {
          void *v16 = 0;
          while (1)
          {
            double v19 = (void *)v16[1];
            if (!v19) {
              break;
            }
            do
            {
              unint64_t v16 = v19;
              double v19 = (void *)*v19;
            }
            while (v19);
          }
        }
        else
        {
          for (v16[1] = 0; v17; char v17 = (void *)v16[1])
          {
            do
            {
              unint64_t v16 = v17;
              char v17 = (void *)*v17;
            }
            while (v17);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>>::destroy(v15);
        for (double i = (void *)v16[2]; i; double i = (void *)i[2])
          unint64_t v16 = i;
        BOOL v15 = v16;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>>::destroy(v15);
  }
  objc_storeStrong(v8, *(id *)(a1 + 544));
  *(void *)(a1 + 528) = *(void *)(a1 + 520);
  *(void *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 668))
  {
    if (v3)
    {
      id v6 = v3;
      uint64_t v4 = _Block_copy(*(const void **)(a1 + 96));
      BOOL v5 = v4;
      if (v4) {
        (*((void (**)(void *, id))v4 + 2))(v4, v6);
      }

      id v3 = v6;
    }
    *(unsigned char *)(a1 + 668) = 0;
  }
}

void sub_1BD0EEAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  BOOL v5 = [a2 startDate];
  id v6 = [v4 startDate];
  uint64_t v7 = [v5 compare:v6];

  return v7;
}

void sub_1BD0EEB84(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 13);
  if (WeakRetained)
  {
    if (v5
      && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_currentBucketInterval((uint64_t)a1),
          (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v8 = [v5 endDate];
      double v9 = [v7 startDate];
      if (objc_msgSend(v8, "hk_isAfterDate:", v9))
      {
        double v10 = [v5 startDate];
        uint64_t v11 = [v7 endDate];
        char v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);
      }
      else
      {
        char v12 = 0;
      }

      double v13 = _Block_copy(a1[12]);
      if ((v12 & 1) == 0) {
        operator new();
      }
    }
    else
    {
      double v13 = _Block_copy(a1[12]);
    }
    *((unsigned char *)a1 + 664) = 1;
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
    v27[3] = &unk_1E6308FF8;
    id v15 = v5;
    id v28 = v15;
    id v16 = v13;
    id v29 = v16;
    (*((void (**)(id *, void *))*a1 + 9))(a1, v27);
    if (v5)
    {
      char v17 = [v15 startDate];
      [v17 timeIntervalSinceReferenceDate];
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_configureForStartTime((uint64_t)a1);
    }
    else
    {
      (*((void (**)(id *))*a1 + 4))(a1);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
    v21[3] = &unk_1E6309060;
    double v24 = a1;
    id v5 = v15;
    char v26 = 1;
    id v22 = v5;
    double v25 = a1;
    id v23 = WeakRetained;
    uint64_t v14 = (*((uint64_t (**)(id *, void *, uint64_t))*a1 + 14))(a1, v21, a3);
    double v18 = _Block_copy(v16);
    id v19 = a1[12];
    a1[12] = v18;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to invalidate interval: no data source available.");
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1BD0EEFD4(_Unwind_Exception *a1)
{
  MEMORY[0x1C187B8A0](v4, 0x10F1C4035D4FF1CLL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_11;
  }
  id v3 = [v10 endDate];
  uint64_t v4 = [*(id *)(a1 + 32) startDate];
  char v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    id v6 = [v10 startDate];
    uint64_t v7 = [*(id *)(a1 + 32) endDate];
    char v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_11:
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9) {
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
      }
    }
  }
}

void sub_1BD0EF1B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = [*(id *)(a1 + 32) startDate];
  [v5 timeIntervalSinceReferenceDate];
  uint64_t v7 = v6;

  char v8 = [*(id *)(a1 + 32) endDate];
  [v8 timeIntervalSinceReferenceDate];
  uint64_t v10 = v9;

  uint64_t v11 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  uint64_t v13 = *(void *)(a1 + 32);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  char v32 = *(unsigned char *)(a1 + 64);
  void v30[4] = v7;
  v30[5] = v10;
  uint64_t v31 = *(void *)(a1 + 56);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  void v29[4] = v31;
  uint64_t v14 = [v11 collectionCalculator:WeakRetained queryForInterval:v13 error:a2 sampleHandler:v30 mergeHandler:v29];

  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15 != v4)
    {
      id v16 = [*(id *)(a1 + 32) endDate];
      [v16 timeIntervalSinceReferenceDate];
      if (*(void *)(v15 + 40))
      {
        double v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          id v19 = [*(id *)(v15 + 40) dateIntervalAtIndex:*(void *)(v15 + 112) + 1];
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          float v20 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(v15, (double *)(v15 + 120));
          unint64_t v21 = [v19 startDate];
          [v21 timeIntervalSinceReferenceDate];
          double v23 = v22;
          double v24 = [v19 endDate];
          [v24 timeIntervalSinceReferenceDate];
          HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            char v26 = _Block_copy(*(const void **)(v15 + 96));
            float64x2_t v27 = v26;
            if (v26) {
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);
            }
          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_didChangeBucket(v15, 0);
        }
      }
    }
  }
  return v14;
}

void sub_1BD0EF464(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7 = *(double *)(a1 + 32);
  if (v7 >= a6)
  {
    if (v7 <= a7)
    {
      BOOL v8 = v7 < a7;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      BOOL v8 = 0;
      a5 = 0.0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    BOOL v8 = a7 > a6;
  }
  double v12 = a5;
  double v13 = a6;
  double v14 = a7;
  uint64_t v15 = a2;
  BOOL v16 = v8;
  char v17 = 0;
  int v9 = *(unsigned __int8 *)(a1 + 56);
  if (*(unsigned char *)(a1 + 56))
  {
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v12, a3, a4);
    }
  }
  else
  {
    if (v8)
    {
      double v11 = *(double *)(a1 + 40);
      if (a6 <= v11)
      {
        if (a7 >= v11)
        {
          int v9 = a6 < v11;
          a7 = *(double *)(a1 + 40);
        }
        else
        {
          int v9 = a7 > a6;
        }
      }
    }
    double v13 = a6;
    double v14 = a7;
    BOOL v16 = v9;
    if (v9) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v12, a3, a4);
    }
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 664)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
  }
  if (*(void *)(a1 + 40)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_advanceToTime(a1, a2);
  }
  if (*(double *)(a1 + 128) > a2)
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_mergeThroughTime(a1 + 120, a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 32) < *(double *)(v10 + 8))
                {
                  uint64_t v129 = *(void *)(v10 + 32);
                  long long v113 = *(_OWORD *)v10;
                  long long v121 = *(_OWORD *)(v10 + 16);
                  long long v52 = *(_OWORD *)(a2 - 40);
                  long long v53 = *(_OWORD *)(a2 - 24);
                  *(_WORD *)(v10 + 32) = *(_WORD *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(_WORD *)(a2 - 8) = v129;
                  *(_OWORD *)(a2 - 24) = v121;
                  *(_OWORD *)(a2 - 40) = v113;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v10, (double *)(v10 + 40), (double *)(a2 - 40));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, v10 + 120, a2 - 40);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            unint64_t v54 = (void *)(v10 + 40);
            BOOL v56 = v10 == a2 || v54 == (void *)a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  long long v59 = v54;
                  double v60 = *(double *)(v58 + 48);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *v54;
                    long long v114 = *(_OWORD *)(v58 + 56);
                    uint64_t v122 = *(void *)(v58 + 72);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      uint64_t v63 = v10 + v62;
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      *(_OWORD *)(v63 + 40) = *(_OWORD *)(v10 + v62);
                      *(_OWORD *)(v63 + 56) = v64;
                      *(_WORD *)(v63 + 72) = *(_WORD *)(v10 + v62 + 32);
                      if (!v62) {
                        break;
                      }
                      v62 -= 40;
                      if (v60 >= *(double *)(v63 - 32))
                      {
                        uint64_t v65 = v10 + v62 + 40;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = v114;
                    *(_WORD *)(v65 + 32) = v122;
                  }
                  unint64_t v54 = v59 + 5;
                  v57 += 40;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 5 != (void *)a2);
              }
            }
            else if (!v56)
            {
              do
              {
                unint64_t v98 = v54;
                double v99 = *(double *)(a1 + 48);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *v54;
                  long long v117 = *(_OWORD *)(a1 + 56);
                  uint64_t v125 = *(void *)(a1 + 72);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(_OWORD *)(v101 - 3);
                    *(_OWORD *)long long v101 = *(_OWORD *)(v101 - 5);
                    *((_OWORD *)v101 + 1) = v102;
                    *((_WORD *)v101 + 16) = *((_WORD *)v101 - 4);
                    double v103 = *((double *)v101 - 9);
                    v101 -= 5;
                  }
                  while (v99 < v103);
                  *long long v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *((_WORD *)v101 + 16) = v125;
                  *((_OWORD *)v101 + 1) = v117;
                }
                v54 += 5;
                a1 = (unint64_t)v98;
              }
              while (v98 + 5 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 40 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v10 + 40 * v69 + 8) < *(double *)(v70 + 48))
                  {
                    v70 += 40;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  double v71 = *(double *)(v10 + 40 * v68 + 8);
                  if (*(double *)(v70 + 8) >= v71)
                  {
                    unint64_t v72 = v10 + 40 * v68;
                    uint64_t v73 = *(void *)v72;
                    uint64_t v123 = *(void *)(v72 + 32);
                    long long v115 = *(_OWORD *)(v72 + 16);
                    do
                    {
                      unint64_t v74 = v72;
                      unint64_t v72 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_WORD *)(v74 + 32) = *(_WORD *)(v70 + 32);
                      *(_OWORD *)unint64_t v74 = v75;
                      *(_OWORD *)(v74 + 16) = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 40 * v77;
                      uint64_t v78 = 2 * v69 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v10 + 40 * v77 + 8) < *(double *)(v70 + 48))
                      {
                        v70 += 40;
                        uint64_t v77 = v78;
                      }
                      uint64_t v69 = v77;
                    }
                    while (*(double *)(v70 + 8) >= v71);
                    *(void *)unint64_t v72 = v73;
                    *(double *)(v72 + 8) = v71;
                    *(_OWORD *)(v72 + 16) = v115;
                    *(_WORD *)(v72 + 32) = v123;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x28uLL;
              do
              {
                uint64_t v80 = 0;
                uint64_t v130 = *(void *)(v10 + 32);
                long long v116 = *(_OWORD *)v10;
                long long v124 = *(_OWORD *)(v10 + 16);
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = v81;
                  uint64_t v83 = v80 + 1;
                  v81 += 40 * (v80 + 1);
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v85 = v84 + 2;
                  if (v85 < v79 && *(double *)(v82 + 40 * v83 + 8) < *(double *)(v81 + 48))
                  {
                    v81 += 40;
                    uint64_t v80 = v85;
                  }
                  long long v86 = *(_OWORD *)v81;
                  long long v87 = *(_OWORD *)(v81 + 16);
                  *(_WORD *)(v82 + 32) = *(_WORD *)(v81 + 32);
                  *(_OWORD *)unint64_t v82 = v86;
                  *(_OWORD *)(v82 + 16) = v87;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 40;
                if (v81 == a2)
                {
                  *(_WORD *)(v81 + 32) = v130;
                  *(_OWORD *)unint64_t v81 = v116;
                  *(_OWORD *)(v81 + 16) = v124;
                }
                else
                {
                  long long v88 = *(_OWORD *)a2;
                  long long v89 = *(_OWORD *)(a2 + 16);
                  *(_WORD *)(v81 + 32) = *(_WORD *)(a2 + 32);
                  *(_OWORD *)unint64_t v81 = v88;
                  *(_OWORD *)(v81 + 16) = v89;
                  *(_WORD *)(a2 + 32) = v130;
                  *(_OWORD *)a2 = v116;
                  *(_OWORD *)(a2 + 16) = v124;
                  uint64_t v90 = v81 - v10 + 40;
                  if (v90 >= 41)
                  {
                    unint64_t v91 = (v90 / 0x28uLL - 2) >> 1;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v10 + 40 * v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      uint64_t v109 = *(void *)(v81 + 32);
                      long long v106 = *(_OWORD *)(v81 + 16);
                      do
                      {
                        unint64_t v94 = v81;
                        unint64_t v81 = v10 + 40 * v91;
                        long long v95 = *(_OWORD *)v81;
                        long long v96 = *(_OWORD *)(v81 + 16);
                        *(_WORD *)(v94 + 32) = *(_WORD *)(v81 + 32);
                        *(_OWORD *)unint64_t v94 = v95;
                        *(_OWORD *)(v94 + 16) = v96;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 40 * v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_WORD *)(v81 + 32) = v109;
                      *(_OWORD *)(v81 + 16) = v106;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40 * (v12 >> 1)), (double *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            BOOL v16 = (double *)(a1 + 40 * v13 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40), v16, (double *)(a2 - 80));
            char v17 = (double *)(a1 + 40 + 8 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 80), v17, (double *)(a2 - 120));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v16, (double *)v14, v17);
            uint64_t v126 = *(void *)(a1 + 32);
            long long v110 = *(_OWORD *)a1;
            long long v118 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 16) = v19;
            *(_WORD *)(v14 + 32) = v126;
            *(_OWORD *)unint64_t v14 = v110;
            *(_OWORD *)(v14 + 16) = v118;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40 * (v12 >> 1)), (double *)a1, (double *)(a2 - 40));
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 32) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          long long v105 = *(_OWORD *)(a1 + 16);
          uint64_t v108 = *(void *)(a1 + 32);
          if (v20 >= *(double *)(a2 - 32))
          {
            unint64_t v41 = a1 + 40;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 40;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 40;
              double v40 = *(double *)(v39 + 48);
              v39 += 40;
            }
            while (v20 >= v40);
          }
          unint64_t v43 = a2;
          if (v10 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              unint64_t v43 = v44 - 40;
              double v45 = *(double *)(v44 - 32);
              v44 -= 40;
            }
            while (v20 < v45);
          }
          while (v10 < v43)
          {
            uint64_t v128 = *(void *)(v10 + 32);
            long long v112 = *(_OWORD *)v10;
            long long v120 = *(_OWORD *)(v10 + 16);
            long long v46 = *(_OWORD *)v43;
            long long v47 = *(_OWORD *)(v43 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v43 + 32);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(_WORD *)(v43 + 32) = v128;
            *(_OWORD *)unint64_t v43 = v112;
            *(_OWORD *)(v43 + 16) = v120;
            do
            {
              double v48 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *(double *)(v43 - 32);
              v43 -= 40;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 40);
            long long v51 = *(_OWORD *)(v10 - 24);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 40) = v38;
          *(double *)(v10 - 32) = v20;
          *(_WORD *)(v10 - 8) = v108;
          *(_OWORD *)(v10 - 24) = v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        long long v104 = *(_OWORD *)(a1 + 16);
        uint64_t v107 = *(void *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 48);
          v21 += 40;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        unint64_t v25 = a2;
        if (v21 == 40)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 40;
            double v29 = *(double *)(v28 - 32);
            v28 -= 40;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 40;
            double v27 = *(double *)(v25 - 32);
            v25 -= 40;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v127 = *(void *)(v10 + 32);
            long long v111 = *(_OWORD *)v10;
            long long v119 = *(_OWORD *)(v10 + 16);
            long long v31 = *(_OWORD *)v30;
            long long v32 = *(_OWORD *)(v30 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v30 + 32);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(_WORD *)(v30 + 32) = v127;
            *(_OWORD *)unint64_t v30 = v111;
            *(_OWORD *)(v30 + 16) = v119;
            do
            {
              double v33 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v33 < v20);
            do
            {
              double v34 = *(double *)(v30 - 32);
              v30 -= 40;
            }
            while (v34 >= v20);
          }
          while (v10 < v30);
        }
        if (v10 - 40 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 40);
          long long v36 = *(_OWORD *)(v10 - 24);
          *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 40) = v22;
        *(double *)(v10 - 32) = v20;
        *(_WORD *)(v10 - 8) = v107;
        *(_OWORD *)(v10 - 24) = v104;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 40;
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        __int16 v9 = *(_WORD *)(a2 - 8);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      uint64_t v16 = *(void *)v12;
      long long v21 = *(_OWORD *)(v12 + 16);
      uint64_t v22 = *(void *)(v12 + 32);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(void *)uint64_t v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(void *a1, uint64_t a2)
{
  id v3 = (void *)a1[5];
  uint64_t v4 = a1[6];
  BOOL v5 = (void *)a1[4];
  uint64_t v6 = [v5 dateInterval];
  void v9[4] = v4;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  uint64_t v7 = [v3 collectionCalculator:v5 queryForInterval:v6 error:a2 sampleHandler:v10 mergeHandler:v9];

  return v7;
}

void sub_1BD0F01E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10 = *(void *)(a1 + 32);
  *(double *)int v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  char v15 = 1;
  uint64_t v11 = [MEMORY[0x1E4F1C9C8] distantFuture];
  [v11 timeIntervalSinceReferenceDate];
  BOOL v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1BD0F0288(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
}

void HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::archive(uint64_t a1, int8x16_t *a2)
{
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 112);
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F171B978;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  statistics::Statistics::makePrimaryStatistics(a1);
  HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>::archive((uint64_t)v6, (uint64_t)&a2->i64[1]);
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v6);
  statistics::Statistics::~Statistics((statistics::Statistics *)v6);
  uint64_t v5 = a2->i32[0];
  *(_DWORD *)(a1 + 204) |= 0x100u;
  *(void *)(a1 + 136) = v5;
  statistics::Statistics::makeMostRecentDatum(a1);
  v6[0] = &unk_1F17206F8;
  int v10 = 127;
  int8x16_t v7 = vextq_s8(a2[9], a2[9], 8uLL);
  v6[1] = a2[10].i64[0];
  v6[2] = a2[10].i64[1];
  __int16 v8 = 0;
  char v9 = 0;
  statistics::RawQuantitySample::operator=(*v4, (uint64_t)v6);
  PB::Base::~Base((PB::Base *)v6);
}

void sub_1BD0F03B8(_Unwind_Exception *a1)
{
  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

void HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>::archive(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F171B978;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (statistics **)(a1 + 8);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = 0;
  statistics::Statistics::makePrimaryStatistics(a1);
  HDStatisticsNoiseLevel::archive((HDStatisticsNoiseLevel *)a2, (uint64_t)v5);
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v5);
  statistics::Statistics::~Statistics((statistics::Statistics *)v5);
  statistics::Statistics::makeAuxiliaryStatistics(a1);
  HDStatisticsTimeInterval::archive((HDStatisticsTimeInterval *)(a2 + 96), (uint64_t)v5);
  statistics::Statistics::operator=(*v4, (uint64_t)v5);
  statistics::Statistics::~Statistics((statistics::Statistics *)v5);
}

void sub_1BD0F0490(_Unwind_Exception *a1)
{
  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::unarchive(uint64_t a1, void *a2)
{
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 66) = 0u;
  uint64_t v5 = [[HDQuantitySampleOverlapProcessor alloc] initWithOverlapFunction:1];
  *(void *)(a1 + 88) = v5;
  *(_WORD *)(a1 + 96) = 257;
  double result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 162) = 0u;
  uint64_t v7 = a2[16];
  if (v7)
  {
    __int16 v8 = v5;
    HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>::unarchive((uint64_t)v16, v7);
    long long v9 = v17[0];
    v4[2] = v16[2];
    v4[3] = v9;
    *(_OWORD *)((char *)v4 + 58) = *(_OWORD *)((char *)v17 + 10);
    long long v10 = v16[1];
    *uint64_t v4 = v16[0];
    v4[1] = v10;
    *(void *)(a1 + 88) = v18;

    *(_WORD *)(a1 + 96) = v19;
    *(void *)(a1 + 104) = v20;
    id v11 = v18;
    uint64_t v12 = v23;
    uint64_t v13 = v22;
    *(_OWORD *)(a1 + 112) = v21;
    *(void *)(a1 + 128) = v13;
    uint64_t v22 = 0;
    long long v21 = 0uLL;
    *(void *)(a1 + 136) = v12;
  }
  *(_DWORD *)a1 = a2[17];
  uint64_t v14 = a2[14];
  if (v14)
  {
    double result = *(double *)(v14 + 8);
    uint64_t v15 = *(void *)(v14 + 16);
    *(int8x16_t *)(a1 + 144) = vextq_s8(*(int8x16_t *)(v14 + 24), *(int8x16_t *)(v14 + 24), 8uLL);
    *(double *)(a1 + 160) = result;
    *(void *)(a1 + 168) = v15;
    *(_WORD *)(a1 + 176) = 1;
  }
  return result;
}

void sub_1BD0F05E8(_Unwind_Exception *a1)
{
  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::~HDStatisticsRelative(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>::unarchive(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 58) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v5 = [[HDQuantitySampleOverlapProcessor alloc] initWithOverlapFunction:1];
  *(void *)(a1 + 80) = v5;
  *(_WORD *)(a1 + 88) = 257;
  double result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 128) = 0;
  uint64_t v7 = *(HDStatisticsNoiseLevel **)(a2 + 128);
  if (v7)
  {
    HDStatisticsNoiseLevel::unarchive(v7, v4);
    long long v8 = v14[0];
    *(_OWORD *)(a1 + 32) = v13;
    *(_OWORD *)(a1 + 48) = v8;
    *(_OWORD *)(a1 + 58) = *(_OWORD *)((char *)v14 + 10);
    long long v9 = *(_OWORD *)&v12[16];
    *(_OWORD *)a1 = *(_OWORD *)v12;
    *(_OWORD *)(a1 + 16) = v9;
    *(void *)(a1 + 80) = v15;

    *(_WORD *)(a1 + 88) = v16;
  }
  long long v10 = *(HDStatisticsTimeInterval **)(a2 + 8);
  if (v10)
  {
    HDStatisticsTimeInterval::unarchive(v10, (uint64_t)v12);
    *(void *)(a1 + 96) = *(void *)v12;
    double result = *(double *)&v13;
    uint64_t v11 = *(void *)&v12[24];
    *(_OWORD *)(a1 + 104) = *(_OWORD *)&v12[8];
    *(void *)(a1 + 120) = v11;
    *(double *)(a1 + 128) = result;
  }
  return result;
}

void sub_1BD0F06E8(_Unwind_Exception *a1)
{
  HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>::~HDStatisticsCombined(v1);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6 = a3;
  uint64_t v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = &unk_1F17248E0;
  double v9 = 900.0;
  if ((v6 & 0x10) == 0) {
    double v9 = 0.0;
  }
  *(double *)(v8 + 56) = v9;
  *(void *)(v8 + 104) = 0;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(void *)(v8 + 96) = 0;
  *(void *)(v8 + 112) = 0;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_WORD *)(a1 + 616) = 1;
  *(unsigned char *)(a1 + 618) = 0;
  *(unsigned char *)(a1 + 620) = 0;
  *(void *)(a1 + 624) = 0xFFEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 664) = 0;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  return a1;
}

void sub_1BD0F07C8(_Unwind_Exception *a1)
{
  id v3 = v2;
  objc_destroyWeak(v3);

  uint64_t v5 = *(void **)(v1 + 72);
  if (v5)
  {
    *(void *)(v1 + 80) = v5;
    operator delete(v5);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)v1);
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);

  JUMPOUT(0x1C187B8A0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1F17248E0;
  unint64_t v2 = *(void **)(a1 + 648);
  if (v2)
  {
    *(void *)(a1 + 656) = v2;
    operator delete(v2);
  }

  id v3 = *(void **)(a1 + 584);
  if (v3)
  {
    *(void *)(a1 + 592) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(unsigned char *)(result + 616) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::setDateInterval(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 copy];
  uint64_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;

  uint64_t v5 = [v6 startDate];
  [v5 timeIntervalSinceReferenceDate];
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
}

void sub_1BD0F08E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(void *)(a1 + 40))
  {
    id v5 = v3;
    [v3 timeIntervalSinceReferenceDate];
    *(void *)(a1 + 624) = v4;
    id v3 = v5;
  }
}

void sub_1BD0F095C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::setStatisticsConfiguration(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(a1 + 632), a2);
  id v7 = a2;
  id v4 = *(id *)(a1 + 632);
  id v5 = *(void **)(a1 + 608);
  *(void *)(a1 + 608) = v4;
  id v6 = v4;

  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::setStatisticsConfiguration(a1 + 120, *(void **)(a1 + 608));
}

void sub_1BD0F09F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (*(void *)(a1 + 40)) {
    return 1;
  }
  BOOL v7 = *(void *)(a1 + 224) == *(void *)(a1 + 216) && *(uint64_t *)(a1 + 272) < 1
    || HKIntervalMask<double>::firstDifference(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)a2, *(void *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (v7) {
    return 1;
  }
  double v9 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128);

  return v9(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 copy];
  id v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v3;
}

void sub_1BD0F0B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::dataSource(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));

  return WeakRetained;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::currentStatistics(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 616))
  {
    uint64_t v1 = 0;
  }
  else
  {
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_updateSourceOrder((uint64_t)v4);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_mergeThroughTime((uint64_t)v4, v4[1]);
    uint64_t v1 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v4);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v4);
  }

  return v1;
}

void sub_1BD0F0C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(a1 + 64);
  BOOL v7 = v6;
  if (!v6) {
    goto LABEL_4;
  }
  uint64_t v8 = [v6 startDate];
  [v8 timeIntervalSinceReferenceDate];
  if (v9 > *(double *)(a2 + 16))
  {

    goto LABEL_10;
  }
  long long v10 = [v7 endDate];
  [v10 timeIntervalSinceReferenceDate];
  double v12 = v11;
  double v13 = *(double *)(a2 + 8);

  if (v12 >= v13)
  {
LABEL_4:
    if (!*(unsigned char *)(a1 + 618)) {
      goto LABEL_21;
    }
    if (!*(unsigned char *)(a1 + 617))
    {
      if (*(void *)(a1 + 40))
      {
        if (*(unsigned char *)(a1 + 616))
        {
          double v14 = -1.79769313e308;
        }
        else
        {
          double v16 = *(double *)(a1 + 176);
          double v14 = *(double *)(a1 + 120);
          if (v16 <= v14) {
            double v16 = -1.79769313e308;
          }
          if (v16 >= v14) {
            double v14 = v16;
          }
        }
      }
      else
      {
        double v14 = -1.79769313e308;
        if (*(double *)(a1 + 176) > *(double *)(a1 + 120)) {
          double v14 = *(double *)(a1 + 176);
        }
      }
      if (v14 > *(double *)(a2 + 8))
      {
        uint64_t v17 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
        uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v17, a3);

        goto LABEL_22;
      }
      if (*(unsigned char *)(a1 + 619))
      {
LABEL_21:
        uint64_t v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_primitiveAddSample(a1, a2, 1, a3);
        goto LABEL_22;
      }
      unint64_t v19 = *(void *)(a1 + 656);
      unint64_t v20 = *(void *)(a1 + 664);
      if (v19 >= v20)
      {
        uint64_t v24 = *(void *)(a1 + 648);
        unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v24) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - v24) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x333333333333333) {
          unint64_t v28 = 0x666666666666666;
        }
        else {
          unint64_t v28 = v26;
        }
        if (v28) {
          unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v28);
        }
        else {
          uint64_t v29 = 0;
        }
        unint64_t v30 = v28 + 40 * v25;
        unint64_t v31 = v28 + 40 * v29;
        long long v32 = *(_OWORD *)a2;
        long long v33 = *(_OWORD *)(a2 + 16);
        *(void *)(v30 + 32) = *(void *)(a2 + 32);
        *(_OWORD *)unint64_t v30 = v32;
        *(_OWORD *)(v30 + 16) = v33;
        unint64_t v23 = v30 + 40;
        double v34 = *(char **)(a1 + 656);
        long long v35 = *(char **)(a1 + 648);
        if (v34 != v35)
        {
          do
          {
            long long v36 = *(_OWORD *)(v34 - 40);
            long long v37 = *(_OWORD *)(v34 - 24);
            *(_WORD *)(v30 - 8) = *((_WORD *)v34 - 4);
            *(_OWORD *)(v30 - 24) = v37;
            *(_OWORD *)(v30 - 40) = v36;
            v30 -= 40;
            v34 -= 40;
          }
          while (v34 != v35);
          double v34 = *(char **)(a1 + 648);
        }
        *(void *)(a1 + 648) = v30;
        *(void *)(a1 + 656) = v23;
        *(void *)(a1 + 664) = v31;
        if (v34) {
          operator delete(v34);
        }
      }
      else
      {
        long long v21 = *(_OWORD *)a2;
        long long v22 = *(_OWORD *)(a2 + 16);
        *(void *)(v19 + 32) = *(void *)(a2 + 32);
        *(_OWORD *)unint64_t v19 = v21;
        *(_OWORD *)(v19 + 16) = v22;
        unint64_t v23 = v19 + 40;
      }
      *(void *)(a1 + 656) = v23;
    }
  }
LABEL_10:
  uint64_t v15 = 1;
LABEL_22:

  return v15;
}

void sub_1BD0F0EE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = v5;
  if (*(unsigned char *)(a1 + 618))
  {
    uint64_t v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 618) = 1;
  uint64_t v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    uint64_t v7 = 0;
    goto LABEL_82;
  }
  uint64_t v65 = v6;
  if (*(unsigned char *)(a1 + 617)) {
    goto LABEL_5;
  }
  double v9 = *(void **)(a1 + 640);
  if (!v9)
  {
    id v68 = 0;
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 40))
  {
LABEL_5:
    int v8 = 0;
    id v68 = 0;
    goto LABEL_29;
  }
  [v9 sortUsingComparator:&__block_literal_global_859];
  id v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v10 = *(id *)(a1 + 640);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  if (!v11)
  {

    id v12 = 0;
    goto LABEL_27;
  }
  id v12 = 0;
  uint64_t v13 = *(void *)v70;
  do
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (*(void *)v70 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(id *)(*((void *)&v69 + 1) + 8 * i);
      double v16 = v15;
      if (v12)
      {
        uint64_t v17 = [v15 startDate];
        id v18 = [v12 endDate];
        int v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          unint64_t v20 = [v16 endDate];
          long long v21 = [v12 endDate];
          int v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22) {
            goto LABEL_21;
          }
          id v23 = objc_alloc(MEMORY[0x1E4F28C18]);
          uint64_t v24 = [v12 startDate];
          unint64_t v25 = [v16 endDate];
          id v26 = (id)[v23 initWithStartDate:v24 endDate:v25];
        }
        else
        {
          [v68 addObject:v12];
          id v26 = v16;
        }
        id v12 = v26;
      }
      else
      {
        id v12 = v15;
      }
LABEL_21:
    }
    uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  }
  while (v11);

  if (v12) {
    [v68 addObject:v12];
  }
LABEL_27:

LABEL_28:
  int v8 = 1;
LABEL_29:
  unint64_t v27 = *(void **)(a1 + 640);
  *(void *)(a1 + 640) = 0;

  *(unsigned char *)(a1 + 617) = 0;
  if (!v8)
  {
    unint64_t v38 = *(void *)(a1 + 648);
    *(void *)(a1 + 664) = 0;
    *(void *)(a1 + 656) = 0;
    *(void *)(a1 + 648) = 0;
    unint64_t v39 = v38;
    goto LABEL_47;
  }
  unint64_t v28 = [v68 lastObject];
  if (v28)
  {
    uint64_t v29 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_currentBucketInterval(a1);
    unint64_t v30 = [v29 endDate];
    unint64_t v31 = [v28 endDate];
    int v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      long long v33 = [v28 endDate];
      [v33 timeIntervalSinceReferenceDate];
      double v35 = v34;

      uint64_t v36 = *(void *)(a1 + 648);
      long long v37 = *(long long **)(a1 + 656);
      while ((long long *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((long long *)v36 != v37)
          {
            double v40 = (long long *)(v36 + 40);
            if ((long long *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  long long v41 = *v40;
                  long long v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)uint64_t v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                double v40 = (long long *)((char *)v40 + 40);
              }
              while (v40 != v37);
              long long v37 = *(long long **)(a1 + 656);
            }
          }
          if ((long long *)v36 != v37) {
            *(void *)(a1 + 656) = v36;
          }
          break;
        }
        v36 += 40;
      }
    }
  }
  unint64_t v38 = *(void *)(a1 + 648);
  unint64_t v39 = *(void *)(a1 + 656);
  *(void *)(a1 + 664) = 0;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 656) = 0;
  if (![v68 count]) {
    goto LABEL_60;
  }
LABEL_47:
  id v43 = v68;
  long long __p = (void *)v38;
  if (v43)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v44 = v43;
    uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v70;
      while (2)
      {
        for (uint64_t j = 0; j != v45; ++j)
        {
          if (*(void *)v70 != v46) {
            objc_enumerationMutation(v44);
          }
          id v48 = *(id *)(*((void *)&v69 + 1) + 8 * j);
          int v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval((id *)a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
        if (v45) {
          continue;
        }
        break;
      }
    }

LABEL_59:
    unint64_t v38 = (unint64_t)__p;
LABEL_60:
    unint64_t v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v51;
    }
    int v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    long long __p = (void *)v38;
    if (v39 != v38)
    {
      uint64_t v54 = v38;
      uint64_t v50 = v67;
      do
      {
        int v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_primitiveAddSample(a1, v54, 1, v50);
        int v53 = v55;
        v54 += 40;
        if (v54 == v39) {
          char v56 = 0;
        }
        else {
          char v56 = v55;
        }
        uint64_t v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval((id *)a1, 0, v67))goto LABEL_59; {
LABEL_70:
    }
    int v53 = 0;
  }
  if (*(void *)(a1 + 40) && *(void *)(a1 + 592) != *(void *)(a1 + 584))
  {
    do
    {
      uint64_t v57 = objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(void *)(a1 + 112) + 1, v50, v65);
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      unint64_t v58 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, (double *)(a1 + 120));
      long long v59 = [v57 startDate];
      [v59 timeIntervalSinceReferenceDate];
      double v61 = v60;
      uint64_t v62 = [v57 endDate];
      [v62 timeIntervalSinceReferenceDate];
      HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
    }
    while (*(void *)(a1 + 592) != *(void *)(a1 + 584));
  }
  *(unsigned char *)(a1 + 618) = 0;
  if (__p) {
    operator delete(__p);
  }

  if (v53)
  {
    if (*(unsigned char *)(a1 + 620))
    {
      *(unsigned char *)(a1 + 620) = 0;
      id v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
      uint64_t v7 = 1;
      goto LABEL_82;
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v6 = v65;
LABEL_82:
  *(unsigned char *)(a1 + 618) = 0;
LABEL_83:

  return v7;
}

void sub_1BD0F15EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    *(unsigned char *)(v13 + 618) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(unsigned char *)(result + 619) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(unsigned char *)(a1 + 618)) {
      goto LABEL_12;
    }
    uint64_t v7 = 0;
LABEL_14:
    uint64_t v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval((id *)a1, v7, a3);
    goto LABEL_15;
  }
  uint64_t v7 = [v6 dateIntervalForIntervalsContainingInterval:v5];

  if (!*(unsigned char *)(a1 + 618)) {
    goto LABEL_14;
  }
  if (!v7)
  {
LABEL_12:
    id v12 = *(void **)(a1 + 640);
    *(void *)(a1 + 640) = 0;

    uint64_t v7 = 0;
    uint64_t v11 = 1;
    *(unsigned char *)(a1 + 617) = 1;
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 617))
  {
    int v8 = *(void **)(a1 + 640);
    if (!v8)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      id v10 = *(void **)(a1 + 640);
      *(void *)(a1 + 640) = v9;

      int v8 = *(void **)(a1 + 640);
    }
    [v8 addObject:v7];
  }
  uint64_t v11 = 1;
LABEL_15:

  return v11;
}

void sub_1BD0F18EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    *(unsigned char *)(a1 + 616) = 1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v9[3] = &unk_1E63043E8;
    uint64_t v12 = a1;
    id v10 = v5;
    id v11 = WeakRetained;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 112))(a1, v9, a3);
    if (v7 && *(unsigned char *)(a1 + 616) && !*(void *)(a1 + 40)) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to query for initial statistics: no data source available.");
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1BD0F1A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::reset(uint64_t result)
{
  *(unsigned char *)(result + 616) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 encodeBool:*(unsigned __int8 *)(a1 + 616) forKey:@"needs_config"];
  id v12 = v3;
  int v32 = &unk_1F1726FA0;
  long long v33 = 0;
  int v38 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
  LOBYTE(v38) = 1;
  uint64_t v34 = v4;
  uint64_t v35 = 0;
  statistics::StatisticsEngine::makeCurrentBucket((uint64_t)&v32);
  uint64_t v13 = &unk_1F171B9C8;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  int v31 = 511;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 0;
  int8x16_t v14 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  uint64_t v5 = *(void *)(a1 + 136);
  char v29 = *(unsigned char *)(a1 + 144);
  char v30 = *(unsigned char *)(a1 + 145);
  BOOL v28 = *(_DWORD *)(a1 + 148) == 0;
  int8x16_t v15 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  uint64_t v7 = *(int8x16_t **)(a1 + 216);
  if (v7 != *(int8x16_t **)(a1 + 224))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v7, *v7, 8uLL);
    int8x16_t v40 = v7[1];
    char v43 = 0;
    HIBYTE(v42) = v7[2].i8[9];
    LOBYTE(v42) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>();
  }
  statistics::StatisticsBucket::makeStatistics((uint64_t)&v13);
  HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>::archive((uint64_t)&v39, a1 + 240);
  statistics::Statistics::operator=(*((statistics **)&v22 + 1), (uint64_t)&v39);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v39);
  uint64_t v8 = *(void *)(a1 + 376);
  if (v8 != a1 + 384)
  {
    HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>::archive((uint64_t)&v39, v8 + 40);
    uint64_t v9 = *(void *)(v8 + 32);
    v46 |= 0x200u;
    uint64_t v45 = v9;
    PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>();
  }
  id v10 = *(int8x16_t **)(a1 + 184);
  if (v10 != *(int8x16_t **)(a1 + 192))
  {
    unint64_t v39 = (char *)&unk_1F1727540;
    v41.i32[0] = 3;
    int8x16_t v40 = vextq_s8(*v10, *v10, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>();
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v13);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v13);
  id v11 = *(int8x16_t **)(a1 + 584);
  if (v11 != *(int8x16_t **)(a1 + 592))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v11, *v11, 8uLL);
    int8x16_t v40 = v11[1];
    __int16 v42 = 0;
    char v43 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>();
  }
  PB::Writer::Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v39);
  [v12 encodeBytes:v40.i64[0] length:&v39[-v40.i64[0]] forKey:@"hdsce_archived_representation"];
  PB::Writer::~Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);
}

void sub_1BD0F1E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v65 = a2;
  *(unsigned char *)(a1 + 616) = [v65 decodeBoolForKey:@"needs_config"];
  id v64 = v65;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v70, 0, -1.79769313e308, 1.79769313e308);
  long long v71 = 0u;
  long long v72 = 0u;
  unint64_t v109 = 0;
  id v3 = v64;
  PB::Reader::Reader((PB::Reader *)v108, (const unsigned __int8 *)[v3 decodeBytesForKey:@"hdsce_archived_representation" returnedLength:&v109]);
  uint64_t v68 = a1;
  long long v101 = &unk_1F1726FA0;
  uint64_t v102 = 0;
  uint64_t v106 = 0;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  int v107 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v101, (PB::Reader *)v108);
  uint64_t v67 = v3;
  uint64_t v4 = v102;
  uint64_t v69 = v103;
  if (v102)
  {
    uint64_t v76 = 0;
    memset(v79, 0, sizeof(v79));
    long long __p = 0u;
    memset(v81, 0, 82);
    unint64_t v82 = [[HDQuantitySampleOverlapProcessor alloc] initWithOverlapFunction:1];
    __int16 v83 = 257;
    memset(v84, 0, sizeof(v84));
    uint64_t v88 = 0;
    long long v87 = 0;
    uint64_t v85 = 0;
    long long v86 = &v87;
    memset(v89, 0, sizeof(v89));
    double v63 = v89;
    int v90 = 1065353216;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v93 = 0u;
    uint64_t v94 = 0;
    int v95 = 1065353216;
    long long v96 = 0u;
    long long v97 = 0u;
    int v98 = 1065353216;
    memset(v99, 0, sizeof(v99));
    uint64_t v62 = v99;
    int v100 = 1065353216;
    int8x16_t v73 = vextq_s8(*(int8x16_t *)(v4 + 8), *(int8x16_t *)(v4 + 8), 8uLL);
    uint64_t v5 = *(void *)(v4 + 72);
    uint64_t v74 = *(void *)(v4 + 64);
    __int16 v75 = *(_WORD *)(v4 + 185);
    int8x16_t v77 = vextq_s8(*(int8x16_t *)(v4 + 24), *(int8x16_t *)(v4 + 24), 8uLL);
    int64_t v66 = (void *)v4;
    uint64_t v78 = v5;
    uint64_t v6 = *(void *)(v4 + 80);
    uint64_t v7 = *(void *)(v4 + 88);
    if (v6 != v7)
    {
      uint64_t v8 = (void *)*((void *)&__p + 1);
      do
      {
        uint64_t v9 = *(void *)(*(void *)v6 + 24);
        uint64_t v10 = *(void *)(*(void *)v6 + 32);
        uint64_t v11 = *(void *)(*(void *)v6 + 8);
        uint64_t v12 = *(void *)(*(void *)v6 + 16);
        char v13 = *(unsigned char *)(*(void *)v6 + 41);
        char v14 = *(unsigned char *)(*(void *)v6 + 40);
        if ((unint64_t)v8 >= v81[0])
        {
          int8x16_t v15 = (void *)__p;
          unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v8 - __p) >> 4);
          unint64_t v17 = v16 + 1;
          if (v16 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v81[0] - __p) >> 4) > v17) {
            unint64_t v17 = 0x5555555555555556 * ((uint64_t)(v81[0] - __p) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v81[0] - __p) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v18 = 0x555555555555555;
          }
          else {
            unint64_t v18 = v17;
          }
          if (v18)
          {
            unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v18);
            uint64_t v8 = (void *)*((void *)&__p + 1);
            int8x16_t v15 = (void *)__p;
          }
          else
          {
            uint64_t v19 = 0;
          }
          unint64_t v20 = v18 + 48 * v16;
          *(void *)unint64_t v20 = v10;
          *(void *)(v20 + 8) = v9;
          *(void *)(v20 + 16) = v11;
          *(void *)(v20 + 24) = v12;
          *(_WORD *)(v20 + 32) = 1;
          *(unsigned char *)(v20 + 40) = 0;
          *(unsigned char *)(v20 + 41) = v13;
          *(unsigned char *)(v20 + 42) = v14;
          unint64_t v21 = v20;
          if (v8 != v15)
          {
            do
            {
              long long v22 = *((_OWORD *)v8 - 3);
              long long v23 = *((_OWORD *)v8 - 2);
              *(_OWORD *)(v21 - 21) = *(_OWORD *)((char *)v8 - 21);
              *(_OWORD *)(v21 - 48) = v22;
              *(_OWORD *)(v21 - 32) = v23;
              v21 -= 48;
              v8 -= 6;
            }
            while (v8 != v15);
            int8x16_t v15 = (void *)__p;
          }
          uint64_t v8 = (void *)(v20 + 48);
          *(void *)&long long __p = v21;
          *((void *)&__p + 1) = v20 + 48;
          v81[0] = v18 + 48 * v19;
          if (v15) {
            operator delete(v15);
          }
        }
        else
        {
          *uint64_t v8 = v10;
          v8[1] = v9;
          v8[2] = v11;
          v8[3] = v12;
          *((_WORD *)v8 + 16) = 1;
          *((unsigned char *)v8 + 40) = 0;
          *((unsigned char *)v8 + 41) = v13;
          *((unsigned char *)v8 + 42) = v14;
          v8 += 6;
        }
        *((void *)&__p + 1) = v8;
        v6 += 8;
      }
      while (v6 != v7);
    }
    uint64_t v24 = v66[13];
    if (v24)
    {
      HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>::unarchive((uint64_t)&v110, v24);
      *(_OWORD *)&v81[5] = v112;
      *(_OWORD *)&v81[7] = v113[0];
      *(_OWORD *)((char *)&v81[8] + 2) = *(_OWORD *)((char *)v113 + 10);
      *(_OWORD *)&v81[1] = v110;
      *(_OWORD *)&v81[3] = v111;
      objc_storeStrong((id *)&v82, obj);
      __int16 v83 = v115;
      v84[0] = v116;
      if (v84[1])
      {
        v84[2] = v84[1];
        operator delete((void *)v84[1]);
      }
      *(_OWORD *)&v84[1] = v117;
      v84[3] = v118;
      uint64_t v118 = 0;
      long long v117 = 0uLL;
      uint64_t v85 = v119;
    }
    long long v26 = (uint64_t *)v66[17];
    for (uint64_t i = (uint64_t *)v66[18]; v26 != i; ++v26)
    {
      uint64_t v27 = *v26;
      HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>::unarchive((uint64_t)&v110, *v26);
      uint64_t v28 = *(void *)(v27 + 144);
      char v29 = v87;
      char v30 = &v87;
      int v31 = &v87;
      if (v87)
      {
        do
        {
          while (1)
          {
            int v31 = (uint64_t **)v29;
            uint64_t v32 = v29[4];
            if (v32 <= v28) {
              break;
            }
            char v29 = *v31;
            char v30 = v31;
            if (!*v31) {
              goto LABEL_34;
            }
          }
          if (v32 >= v28)
          {
            uint64_t v34 = (char *)v31;
            goto LABEL_37;
          }
          char v29 = v31[1];
        }
        while (v29);
        char v30 = v31 + 1;
      }
LABEL_34:
      uint64_t v34 = (char *)operator new(0xB0uLL);
      v120[0] = v34;
      v120[1] = &v87;
      char v121 = 0;
      *((void *)v34 + 4) = v28;
      *(_OWORD *)(v34 + 40) = 0u;
      *(_OWORD *)(v34 + 56) = 0u;
      *(_OWORD *)(v34 + 72) = 0u;
      *(_OWORD *)(v34 + 88) = 0u;
      *(_OWORD *)(v34 + 104) = 0u;
      *(_OWORD *)(v34 + 120) = 0u;
      *(_OWORD *)(v34 + 136) = 0u;
      *(_OWORD *)(v34 + 152) = 0u;
      *((void *)v34 + 21) = 0;
      *((void *)v34 + 15) = -[HDQuantitySampleOverlapProcessor initWithOverlapFunction:]([HDQuantitySampleOverlapProcessor alloc], "initWithOverlapFunction:", 1, v62, v63, v64);
      *((_WORD *)v34 + 64) = 257;
      *(_OWORD *)(v34 + 136) = 0u;
      *(_OWORD *)(v34 + 152) = 0u;
      *((void *)v34 + 21) = 0;
      char v121 = 1;
      *(void *)uint64_t v34 = 0;
      *((void *)v34 + 1) = 0;
      *((void *)v34 + 2) = v31;
      *char v30 = (uint64_t *)v34;
      long long v33 = (uint64_t *)v34;
      if (*v86)
      {
        long long v86 = (uint64_t **)*v86;
        long long v33 = *v30;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v87, v33);
      ++v88;
      v120[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v120);
LABEL_37:
      long long v35 = *(_OWORD *)((char *)v113 + 10);
      long long v37 = v112;
      long long v36 = v113[0];
      long long v38 = v110;
      *(_OWORD *)(v34 + 56) = v111;
      *(_OWORD *)(v34 + 72) = v37;
      *(_OWORD *)(v34 + 88) = v36;
      *(_OWORD *)(v34 + 98) = v35;
      *(_OWORD *)(v34 + 40) = v38;
      objc_storeStrong((id *)v34 + 15, obj);
      unint64_t v39 = (void *)*((void *)v34 + 18);
      *((_WORD *)v34 + 64) = v115;
      *((void *)v34 + 17) = v116;
      if (v39)
      {
        *((void *)v34 + 19) = v39;
        operator delete(v39);
        *((void *)v34 + 18) = 0;
        *((void *)v34 + 19) = 0;
        *((void *)v34 + 20) = 0;
      }
      *((_OWORD *)v34 + 9) = v117;
      id v40 = obj;
      *((void *)v34 + 20) = v118;
      uint64_t v118 = 0;
      long long v117 = 0uLL;
      *((void *)v34 + 21) = v119;
    }
    uint64_t v41 = v66[5];
    for (uint64_t j = v66[6]; v41 != j; v41 += 8)
    {
      double v44 = *(double *)(*(void *)v41 + 8);
      double v43 = *(double *)(*(void *)v41 + 16);
      if (v44 >= v43) {
        double v45 = *(double *)(*(void *)v41 + 16);
      }
      else {
        double v45 = *(double *)(*(void *)v41 + 8);
      }
      if (v43 < v44) {
        double v43 = *(double *)(*(void *)v41 + 8);
      }
      HKIntervalMask<double>::_insertInterval(v79, v45, v43);
    }
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::operator=((uint64_t)v70, (uint64_t)&v73);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v73);
  }
  uint64_t v46 = v104;
  uint64_t v47 = v105;
  if (v104 != v105)
  {
    unint64_t v48 = *((void *)&v71 + 1);
    do
    {
      uint64_t v49 = *(void *)(*(void *)v46 + 24);
      uint64_t v50 = *(void *)(*(void *)v46 + 32);
      uint64_t v51 = *(void *)(*(void *)v46 + 8);
      uint64_t v52 = *(void *)(*(void *)v46 + 16);
      if (v48 >= (unint64_t)v72)
      {
        int v53 = (void *)v71;
        unint64_t v54 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v48 - v71) >> 3);
        unint64_t v55 = v54 + 1;
        if (v54 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(v72 - v71) >> 3) > v55) {
          unint64_t v55 = 0x999999999999999ALL * ((uint64_t)(v72 - v71) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v72 - v71) >> 3) >= 0x333333333333333) {
          unint64_t v56 = 0x666666666666666;
        }
        else {
          unint64_t v56 = v55;
        }
        if (v56)
        {
          unint64_t v56 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v56);
          unint64_t v48 = *((void *)&v71 + 1);
          int v53 = (void *)v71;
        }
        else
        {
          uint64_t v57 = 0;
        }
        unint64_t v58 = v56 + 40 * v54;
        *(void *)unint64_t v58 = v50;
        *(void *)(v58 + 8) = v49;
        *(void *)(v58 + 16) = v51;
        *(void *)(v58 + 24) = v52;
        *(_WORD *)(v58 + 32) = 1;
        unint64_t v59 = v58;
        if ((void *)v48 != v53)
        {
          do
          {
            long long v60 = *(_OWORD *)(v48 - 40);
            long long v61 = *(_OWORD *)(v48 - 24);
            *(_WORD *)(v59 - 8) = *(_WORD *)(v48 - 8);
            *(_OWORD *)(v59 - 24) = v61;
            *(_OWORD *)(v59 - 40) = v60;
            v59 -= 40;
            v48 -= 40;
          }
          while ((void *)v48 != v53);
          int v53 = (void *)v71;
        }
        unint64_t v48 = v58 + 40;
        *(void *)&long long v71 = v59;
        *((void *)&v71 + 1) = v58 + 40;
        *(void *)&long long v72 = v56 + 40 * v57;
        if (v53) {
          operator delete(v53);
        }
      }
      else
      {
        *(void *)unint64_t v48 = v50;
        *(void *)(v48 + 8) = v49;
        *(void *)(v48 + 16) = v51;
        *(void *)(v48 + 24) = v52;
        *(_WORD *)(v48 + 32) = 1;
        v48 += 40;
      }
      *((void *)&v71 + 1) = v48;
      v46 += 8;
    }
    while (v46 != v47);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v101);

  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::operator=((void *)(v68 + 112), (uint64_t)&v69);
  if ((void)v71)
  {
    *((void *)&v71 + 1) = v71;
    operator delete((void *)v71);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v70);
}

void sub_1BD0F2678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a2);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table((uint64_t)&STACK[0x3C0]);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x398]);
  uint64_t v11 = (void *)STACK[0x380];
  if (STACK[0x380])
  {
    STACK[0x388] = (unint64_t)v11;
    operator delete(v11);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a3);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>::destroy((void *)STACK[0x348]);
  HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>::~HDStatisticsCombined(a6);
  uint64_t v12 = (void *)STACK[0x2A0];
  if (STACK[0x2A0])
  {
    STACK[0x2A8] = (unint64_t)v12;
    operator delete(v12);
  }
  objc_destroyWeak((id *)&STACK[0x298]);
  char v13 = (void *)STACK[0x280];
  if (STACK[0x280])
  {
    STACK[0x288] = (unint64_t)v13;
    operator delete(v13);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x410]);
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(double *)(a1 + 56) = a3;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_WORD *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = [[HDQuantitySampleOverlapProcessor alloc] initWithOverlapFunction:1];
  *(_WORD *)(a1 + 208) = 257;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = a1 + 264;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_DWORD *)(a1 + 312) = 1065353216;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(void *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 376) = 1065353216;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_DWORD *)(a1 + 416) = 1065353216;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_DWORD *)(a1 + 456) = 1065353216;
  return a1;
}

void sub_1BD0F2884(_Unwind_Exception *a1)
{
  uint64_t v6 = v3;
  uint64_t v8 = *v6;
  if (*v6)
  {
    *(void *)(v1 + 104) = v8;
    operator delete(v8);
  }
  objc_destroyWeak(v2);
  uint64_t v9 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 72) = v9;
    operator delete(v9);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 472);
  if (v2)
  {
    *(void *)(a1 + 480) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::~HDStatisticsBucket(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 424);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 384);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 344);
  unint64_t v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(void *)(a1 + 328) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 280);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>::destroy(*(void **)(a1 + 264));
  id v3 = *(void **)(a1 + 224);
  if (v3)
  {
    *(void *)(a1 + 232) = v3;
    operator delete(v3);
  }

  uint64_t v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(void *)(a1 + 104) = v4;
    operator delete(v4);
  }
  objc_destroyWeak((id *)(a1 + 88));
  uint64_t v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(void *)(a1 + 72) = v5;
    operator delete(v5);
  }

  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<long long const,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,0>(a1 + 4);
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<long long const,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,0>(void *a1)
{
  unint64_t v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  id v3 = (void *)a1[11];
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_configureForStartTime(uint64_t a1)
{
  uint64_t v28 = 0;
  unint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
    uint64_t v4 = [v2 dateIntervalContainingDate:v3 index:&v28];

    uint64_t v5 = [v4 startDate];
    [v5 timeIntervalSinceReferenceDate];
    double v7 = v6;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
LABEL_5:
    double v13 = v9;

    goto LABEL_6;
  }
  id v10 = *(id *)(a1 + 64);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v11 = [v10 startDate];
    [v11 timeIntervalSinceReferenceDate];
    double v7 = v12;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
    goto LABEL_5;
  }
  double v7 = -1.79769313e308;
  double v13 = 1.79769313e308;
LABEL_6:

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v22, WeakRetained, v7, v13);

  if (*(void *)(a1 + 32) == 1) {
    char v24 = 1;
  }
  uint64_t v23 = *(void *)(a1 + 56);
  char v25 = *(unsigned char *)(a1 + 24) & 1;
  if (v27 != (char *)(a1 + 72)) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27, *(char **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::setStatisticsConfiguration((uint64_t)v22, *(void **)(a1 + 632));
  if (!*(void *)(a1 + 40)) {
    int v26 = 0;
  }
  uint64_t v15 = v28;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v22);
  uint64_t v18 = v15;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v19, (uint64_t)v17);
  long long __p = 0u;
  long long v21 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::operator=((void *)(a1 + 112), (uint64_t)&v18);

  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v19);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v17);
  *(unsigned char *)(a1 + 616) = 0;
  return HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v22);
}

void sub_1BD0F2CFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::setStatisticsConfiguration(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(a1 + 32), a2);
  uint64_t v4 = a2;
  HDStatisticsNoiseLevel::configure((id *)(a1 + 120), v4);
}

void sub_1BD0F2DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::operator=(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::operator=((uint64_t)(a1 + 1), a2 + 8);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 59), (__n128 *)(a2 + 472));
  uint64_t v4 = *(void *)(a2 + 496);
  *(void *)(a2 + 496) = 0;
  uint64_t v5 = (void *)a1[62];
  a1[62] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 96);
  double v7 = *(unsigned char **)(a2 + 104);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(void *)(a1 + 96) = v10;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(void *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)(a1 + 120), (const HDStatisticsNoiseLevel *)(a2 + 120));
  uint64_t v12 = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 216) = v12;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 224), *(const void **)(a2 + 224), *(void *)(a2 + 232), (uint64_t)(*(void *)(a2 + 232) - *(void *)(a2 + 224)) >> 4);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  double v13 = (uint64_t **)(a1 + 264);
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 256) = a1 + 264;
  char v14 = *(void **)(a2 + 256);
  if (v14 != (void *)(a2 + 264))
  {
    do
    {
      uint64_t v15 = *v13;
      unint64_t v16 = (uint64_t *)(a1 + 264);
      if (*(uint64_t ***)(a1 + 256) == v13) {
        goto LABEL_11;
      }
      unint64_t v17 = *v13;
      uint64_t v18 = (uint64_t *)(a1 + 264);
      if (v15)
      {
        do
        {
          unint64_t v16 = v17;
          unint64_t v17 = (uint64_t *)v17[1];
        }
        while (v17);
      }
      else
      {
        do
        {
          unint64_t v16 = (uint64_t *)v18[2];
          BOOL v19 = *v16 == (void)v18;
          uint64_t v18 = v16;
        }
        while (v19);
      }
      uint64_t v20 = v14[4];
      if (v16[4] < v20)
      {
LABEL_11:
        if (v15) {
          long long v21 = (uint64_t **)v16;
        }
        else {
          long long v21 = (uint64_t **)(a1 + 264);
        }
        if (v15) {
          long long v22 = (uint64_t **)(v16 + 1);
        }
        else {
          long long v22 = (uint64_t **)(a1 + 264);
        }
        if (*v22) {
          goto LABEL_28;
        }
      }
      else
      {
        long long v22 = (uint64_t **)(a1 + 264);
        long long v21 = (uint64_t **)(a1 + 264);
        if (v15)
        {
          uint64_t v23 = *v13;
          while (1)
          {
            while (1)
            {
              long long v21 = (uint64_t **)v23;
              uint64_t v24 = v23[4];
              if (v24 <= v20) {
                break;
              }
              uint64_t v23 = *v21;
              long long v22 = v21;
              if (!*v21) {
                goto LABEL_27;
              }
            }
            if (v24 >= v20) {
              goto LABEL_28;
            }
            uint64_t v23 = v21[1];
            if (!v23)
            {
              long long v22 = v21 + 1;
              break;
            }
          }
        }
      }
LABEL_27:
      char v25 = (uint64_t *)operator new(0xB0uLL);
      v30[0] = v25;
      v30[1] = a1 + 264;
      char v31 = 0;
      v25[4] = v14[4];
      HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)(v25 + 5), (const HDStatisticsNoiseLevel *)(v14 + 5));
      uint64_t v26 = v14[17];
      v25[18] = 0;
      v25[17] = v26;
      v25[19] = 0;
      v25[20] = 0;
      std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v25 + 18, (const void *)v14[18], v14[19], (uint64_t)(v14[19] - v14[18]) >> 4);
      v25[21] = v14[21];
      char v31 = 1;
      std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 256), (uint64_t)v21, v22, v25);
      v30[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v30);
LABEL_28:
      uint64_t v27 = (void *)v14[1];
      if (v27)
      {
        do
        {
          uint64_t v28 = v27;
          uint64_t v27 = (void *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          uint64_t v28 = (void *)v14[2];
          BOOL v19 = *v28 == (void)v14;
          char v14 = v28;
        }
        while (!v19);
      }
      char v14 = v28;
    }
    while (v28 != (void *)(a2 + 264));
  }
  std::unordered_set<long long>::unordered_set(a1 + 280, a2 + 280);
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 320), *(const void **)(a2 + 320), *(void *)(a2 + 328), (uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 344, a2 + 344);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 384, a2 + 384);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 424, a2 + 424);
  return a1;
}

void sub_1BD0F3158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, id *location, void **a13, char a14)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v19);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v18);
  long long v21 = *v17;
  if (*v17)
  {
    *(void *)(v14 + 328) = v21;
    operator delete(v21);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>::destroy(*v15);
  HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>::~HDStatisticsCombined(a10);
  long long v22 = *a11;
  if (*a11)
  {
    *(void *)(v14 + 104) = v22;
    operator delete(v22);
  }
  objc_destroyWeak(location);
  uint64_t v23 = *a13;
  if (*a13)
  {
    *(void *)(v14 + 72) = v23;
    operator delete(v23);
  }

  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<long long const,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,0>(v1 + 4);
    }
    operator delete(v1);
  }
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::operator=(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  long long v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v5;

  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  id WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  uint64_t v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(void *)(a1 + 104) = v9;
    operator delete(v9);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 96) = 0;
  long long v10 = *(_OWORD *)(a2 + 152);
  long long v11 = *(_OWORD *)(a2 + 168);
  long long v12 = *(_OWORD *)(a2 + 178);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 178) = v12;
  *(_OWORD *)(a1 + 168) = v11;
  *(_OWORD *)(a1 + 152) = v10;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  objc_storeStrong((id *)(a1 + 200), *(id *)(a2 + 200));
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 224, (__n128 *)(a2 + 224));
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  uint64_t v13 = a1 + 264;
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>::destroy(*(void **)(a1 + 264));
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  uint64_t v14 = *(void *)(a2 + 264);
  *(void *)(a1 + 264) = v14;
  uint64_t v15 = *(void *)(a2 + 272);
  *(void *)(a1 + 272) = v15;
  if (v15)
  {
    *(void *)(v14 + 16) = v13;
    *(void *)(a2 + 256) = a2 + 264;
    *(void *)(a2 + 264) = 0;
    *(void *)(a2 + 272) = 0;
  }
  else
  {
    *(void *)(a1 + 256) = v13;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 280, (uint64_t *)(a2 + 280));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 320, (__n128 *)(a2 + 320));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 344, (uint64_t *)(a2 + 344));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 384, (uint64_t *)(a2 + 384));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 424, (uint64_t *)(a2 + 424));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(uint64_t a1, double *a2)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  double v3 = *a2;
  id v4 = objc_alloc(MEMORY[0x1E4F1C9C8]);
  uint64_t v5 = a2 + 5;
  if (v3 != -1.79769313e308) {
    uint64_t v5 = a2;
  }
  long long v6 = (void *)[v4 initWithTimeIntervalSinceReferenceDate:*v5];
  uint64_t v81 = (uint64_t)a2;
  if (a2[1] == 1.79769313e308) {
    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:a2[6]];
  }
  else {
    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:a2[1]];
  }
  uint64_t v8 = (void *)v7;
  id v9 = *(id *)(a1 + 16);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v10 = *(id *)(a1 + 16);
    if ([v10 shouldUseUnderlyingTypeForStatistics])
    {
      uint64_t v11 = [v10 underlyingSampleType];

      id v9 = (id)v11;
    }
  }
  long long v12 = (void *)[objc_alloc(MEMORY[0x1E4F2B5B0]) initWithDataType:v9 startDate:v6 endDate:v8];
  if (*(unsigned char *)(a1 + 24))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      id v14 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      uint64_t v15 = *(uint64_t **)(v81 + 320);
      uint64_t v16 = *(uint64_t **)(v81 + 328);
      while (v15 != v16)
      {
        uint64_t v17 = *v15;
        id v18 = objc_loadWeakRetained((id *)(a1 + 48));
        uint64_t v19 = [v18 sourceForSourceID:v17];

        if (v19)
        {
          if (([v14 containsObject:v19] & 1) == 0) {
            [v14 addObject:v19];
          }
        }

        ++v15;
      }
      uint64_t v20 = (void *)[v14 copy];
      [v12 _setSources:v20];
    }
  }

  v98[0] = &unk_1F1724AD0;
  v98[3] = v98;
  id v77 = v12;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)v102, (uint64_t)v98);
  double v106 = 0.0;
  double v21 = COERCE_DOUBLE(operator new(0x28uLL));
  **(void **)&double v21 = &unk_1F17249B0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100](*(void *)&v21 + 8, (uint64_t)v102);
  double v106 = v21;
  id v84 = v77;
  long long v22 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v23 = [MEMORY[0x1E4F2B618] secondUnit];
  double v24 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::overallStatistics(&v88, v81);
  if (v106 == 0.0) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v25 = (*(uint64_t (**)(double, double *, double))(**(void **)&v106 + 48))(COERCE_DOUBLE(*(void *)&v106), &v88, v24);
  uint64_t v26 = *(double **)(v25 + 8);
  double v27 = 0.0;
  while (v26 != *(double **)(v25 + 16))
  {
    double v29 = *v26;
    double v28 = v26[1];
    v26 += 2;
    double v27 = v27 + v28 - v29;
  }
  char v30 = [v22 quantityWithUnit:v23 doubleValue:v27 + *(double *)(v25 + 32)];
  [v84 setDuration:v30];

  if (__p)
  {
    long long v97 = __p;
    operator delete(__p);
  }

  double v31 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::overallStatistics(&v88, v81);
  if (v106 == 0.0) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  objc_msgSend(v84, "setDataCount:", *(void *)(*(uint64_t (**)(double, double *, double))(**(void **)&v106 + 48))(COERCE_DOUBLE(*(void *)&v106), &v88, v31));
  if (__p)
  {
    long long v97 = __p;
    operator delete(__p);
  }

  if (*(unsigned char *)(a1 + 24))
  {
    id v32 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v33 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier((uint64_t)&v88, v81);
    for (double i = v90; i != 0.0; double i = **(double **)&i)
    {
      id v35 = *(id *)(*(void *)&i + 16);
      long long v36 = (void *)MEMORY[0x1E4F2B370];
      long long v37 = [MEMORY[0x1E4F2B618] secondUnit];
      if (v106 == 0.0) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v38 = (*(uint64_t (**)(double, uint64_t))(**(void **)&v106 + 48))(COERCE_DOUBLE(*(void *)&v106), *(void *)&i + 24);
      unint64_t v39 = *(double **)(v38 + 8);
      double v40 = 0.0;
      while (v39 != *(double **)(v38 + 16))
      {
        double v42 = *v39;
        double v41 = v39[1];
        v39 += 2;
        double v40 = v40 + v41 - v42;
      }
      double v43 = [v36 quantityWithUnit:v37 doubleValue:v40 + *(double *)(v38 + 32)];
      [v32 setObject:v43 forKeyedSubscript:v35];

      if (v106 == 0.0) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      double v44 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)(*(uint64_t (**)(double, uint64_t))(**(void **)&v106 + 48))(COERCE_DOUBLE(*(void *)&v106), *(void *)&i + 24));
      [v33 setObject:v44 forKeyedSubscript:v35];
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)&v88);
    [v84 setDurationBySource:v32];
    [v84 setDataCountBySource:v33];
  }
  std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](&v103);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v102);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)v99, (uint64_t)v98);
  long long v101 = 0;
  double v45 = operator new(0x28uLL);
  *double v45 = &unk_1F1724A40;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(v45 + 1), (uint64_t)v99);
  long long v101 = v45;
  id v85 = v84;
  double v46 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::overallStatistics(&v88, v81);
  if (!v101) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v47 = (const HDStatisticsNoiseLevel *)(*(uint64_t (**)(void *, double *, double))(*v101 + 48))(v101, &v88, v46);
  HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)&v103, v47);
  if (__p)
  {
    long long v97 = __p;
    operator delete(__p);
  }

  HDStatisticsNoiseLevel::finalizeSamples((HDStatisticsNoiseLevel *)&v103);
  uint64_t v48 = *(void *)(a1 + 24);
  uint64_t v49 = _HKStatisticsOptionBaselineRelativeQuantities();
  uint64_t v50 = *(void **)(a1 + 16);
  if ((v49 & v48) != 0) {
    [v50 _unitForChangeInCanonicalUnit];
  }
  else {
  uint64_t v51 = [v50 canonicalUnit];
  }
  if ((v48 & 2) != 0)
  {
    double v52 = 0.0;
    if (v104 > 0.0 && v103 > 0.0) {
      double v52 = log10(v103 / v104) * 10.0;
    }
    int v53 = [MEMORY[0x1E4F2B370] quantityWithUnit:v51 doubleValue:v52];
    [v85 setAverageQuantity:v53];
  }
  if ((v48 & 4) != 0)
  {
    unint64_t v54 = [MEMORY[0x1E4F2B370] quantityWithUnit:v51 doubleValue:v106];
    [v85 setMinimumQuantity:v54];
  }
  if ((v48 & 8) != 0)
  {
    unint64_t v55 = [MEMORY[0x1E4F2B370] quantityWithUnit:v51 doubleValue:v105];
    [v85 setMaximumQuantity:v55];
  }
  if ((v48 & 0x20) != 0)
  {
    double v56 = v109;
    double v57 = v110;
    unint64_t v58 = [MEMORY[0x1E4F2B370] quantityWithUnit:v51 doubleValue:v108];
    [v85 setMostRecentQuantity:v58];

    unint64_t v59 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v56, v57);
    [v85 setMostRecentQuantityDateInterval:v59];
  }
  [v85 setDataCount:v107];
  if (*(unsigned char *)(a1 + 24))
  {
    if ((v48 & 2) != 0) {
      id v83 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    }
    else {
      id v83 = 0;
    }
    if ((v48 & 4) != 0) {
      id v80 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    }
    else {
      id v80 = 0;
    }
    if ((v48 & 8) != 0) {
      id v79 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    }
    else {
      id v79 = 0;
    }
    if ((v48 & 0x20) != 0)
    {
      id v78 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      id v60 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    }
    else
    {
      id v60 = 0;
      id v78 = 0;
    }
    id v61 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier((uint64_t)v86, v81);
    for (uint64_t j = v87; j; uint64_t j = (uint64_t **)*j)
    {
      double v63 = j[2];
      if (!v101) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      id v64 = (const HDStatisticsNoiseLevel *)(*(uint64_t (**)(void *, uint64_t *))(*v101 + 48))(v101, (uint64_t *)j + 3);
      HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)&v88, v64);
      HDStatisticsNoiseLevel::finalizeSamples((HDStatisticsNoiseLevel *)&v88);
      if ((v48 & 2) != 0)
      {
        double v66 = v89;
        double v67 = 0.0;
        if (v89 > 0.0)
        {
          double v65 = v88;
          if (v88 > 0.0) {
            double v67 = log10(v88 / v89) * 10.0;
          }
        }
        uint64_t v68 = objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v51, v67, v66, v65);
        [v83 setObject:v68 forKeyedSubscript:v63];
      }
      if ((v48 & 4) != 0)
      {
        uint64_t v69 = [MEMORY[0x1E4F2B370] quantityWithUnit:v51 doubleValue:v91];
        [v80 setObject:v69 forKeyedSubscript:v63];
      }
      if ((v48 & 8) != 0)
      {
        long long v70 = [MEMORY[0x1E4F2B370] quantityWithUnit:v51 doubleValue:v90];
        [v79 setObject:v70 forKeyedSubscript:v63];
      }
      if ((v48 & 0x20) != 0)
      {
        double v71 = v93;
        double v72 = v94;
        int8x16_t v73 = [MEMORY[0x1E4F2B370] quantityWithUnit:v51 doubleValue:v92];
        [v78 setObject:v73 forKeyedSubscript:v63];

        uint64_t v74 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v71, v72);
        [v60 setObject:v74 forKeyedSubscript:v63];
      }
      if (!v101) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      __int16 v75 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)((*(uint64_t (**)(void *, uint64_t *))(*v101 + 48))(v101, (uint64_t *)j + 3) + 32));
      [v61 setObject:v75 forKeyedSubscript:v63];
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)v86);
    if ((v48 & 2) != 0) {
      [v85 setAverageQuantityBySource:v83];
    }
    if ((v48 & 4) != 0) {
      [v85 setMinimumQuantityBySource:v80];
    }
    if ((v48 & 8) != 0) {
      [v85 setMaximumQuantityBySource:v79];
    }
    if ((v48 & 0x20) != 0)
    {
      [v85 setMostRecentQuantityBySource:v78];
      [v85 setMostRecentQuantityDateIntervalBySource:v60];
    }
    [v85 setDataCountBySource:v61];
  }
  std::__function::__value_func<HDStatisticsNoiseLevel const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v100);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v99);

  std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v98);

  return v85;
}

void sub_1BD0F3F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  std::__function::__value_func<HDStatisticsNoiseLevel const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](&a47);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](&a43);

  std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](&a39);
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 304);
  uint64_t v2 = *(void *)(a1 + 320);
  if (v1 != (*(void *)(a1 + 328) - v2) >> 3)
  {
    id v4 = (void **)(a1 + 320);
    *(void *)(a1 + 328) = v2;
    std::vector<long long>::reserve((void **)(a1 + 320), v1);
    uint64_t v5 = *(void **)(a1 + 296);
    if (v5)
    {
      long long v6 = *(char **)(a1 + 328);
      do
      {
        uint64_t v7 = v5[2];
        unint64_t v8 = *(void *)(a1 + 336);
        if ((unint64_t)v6 >= v8)
        {
          id v10 = (char *)*v4;
          uint64_t v11 = (v6 - (unsigned char *)*v4) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            id v10 = *(char **)(a1 + 320);
            long long v6 = *(char **)(a1 + 328);
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v16 = (void *)(v14 + 8 * v11);
          void *v16 = v7;
          id v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            uint64_t v17 = *((void *)v6 - 1);
            v6 -= 8;
            *--uint64_t v16 = v17;
          }
          *(void *)(a1 + 320) = v16;
          *(void *)(a1 + 328) = v9;
          *(void *)(a1 + 336) = v14 + 8 * v15;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)long long v6 = v7;
          id v9 = v6 + 8;
        }
        *(void *)(a1 + 328) = v9;
        uint64_t v5 = (void *)*v5;
        long long v6 = v9;
      }
      while (v5);
    }
    id v18 = (id *)(a1 + 88);
    id WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      id v20 = objc_loadWeakRetained(v18);
      [v20 orderSourceIDs:v4];
    }
  }
}

void sub_1BD0F43C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2) {
    a2 = v4 * floor(a2 / v4);
  }
  double v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    uint64_t v128 = (double **)(a1 + 96);
    uint64_t v123 = (void *)(a1 + 64);
    long long v120 = (HDStatisticsNoiseLevel *)(a1 + 120);
    uint64_t v119 = (uint64_t *)(a1 + 216);
    long long v117 = (double **)(a1 + 224);
    location = (id *)(a1 + 88);
    uint64_t v116 = (void *)(a1 + 264);
    do
    {
      long long v6 = *(double **)(a1 + 96);
      uint64_t v7 = *(long long **)(a1 + 104);
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v6) >> 4);
      if (v8)
      {
        if (v8 != 1)
        {
          double v27 = a2;
          double v28 = a2;
          double v29 = v5;
          uint64_t v30 = *(void *)(a1 + 96);
          if (v6 != (double *)v7)
          {
            do
            {
              double v31 = *(double *)(v30 + 8);
              double v32 = *(double *)(v30 + 16);
              if (v31 > v29 && v31 < v28) {
                double v28 = *(double *)(v30 + 8);
              }
              if (v32 > v5) {
                double v34 = *(double *)(v30 + 16);
              }
              else {
                double v34 = v27;
              }
              if (v32 < v27)
              {
                double v29 = v5;
                double v27 = v34;
              }
              v30 += 48;
            }
            while ((long long *)v30 != v7);
          }
          if (v27 >= v28) {
            double v35 = v28;
          }
          else {
            double v35 = v27;
          }
          double v36 = *(double *)(a1 + 16);
          if (v36 > 0.0)
          {
            double v37 = v36 * floor(v35 / v36);
            double v38 = v36 * floor((v36 + v5) / v36);
            if (v37 >= v38) {
              double v35 = v37;
            }
            else {
              double v35 = v38;
            }
          }
          *uint64_t v128 = 0;
          v128[1] = 0;
          v128[2] = 0;
          if (v6 != (double *)v7)
          {
            if (v8 > 0x555555555555555) {
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v8);
            double v42 = *(double **)(a1 + 96);
            double v41 = *(double **)(a1 + 104);
            double v43 = v39;
            if (v41 != v42)
            {
              do
              {
                long long v44 = *((_OWORD *)v41 - 3);
                long long v45 = *((_OWORD *)v41 - 2);
                *(_OWORD *)(v43 - 21) = *(_OWORD *)((char *)v41 - 21);
                *((_OWORD *)v43 - 3) = v44;
                *((_OWORD *)v43 - 2) = v45;
                v43 -= 48;
                v41 -= 6;
              }
              while (v41 != v42);
              double v41 = *v128;
            }
            *(void *)(a1 + 96) = v43;
            *(void *)(a1 + 104) = v39;
            *(void *)(a1 + 112) = &v39[48 * v40];
            if (v41) {
              operator delete(v41);
            }
          }
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_updateSourceOrder(a1);
          id WeakRetained = objc_loadWeakRetained(location);

          unint64_t v47 = __clz(v8);
          if (WeakRetained)
          {
            *(void *)&v130.double var0 = a1;
            uint64_t v48 = 126 - 2 * v47;
            if (v6 == (double *)v7) {
              uint64_t v49 = 0;
            }
            else {
              uint64_t v49 = v48;
            }
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder*,false>((unint64_t)v6, v7, (uint64_t)&v130, v49, 1);
          }
          else
          {
            uint64_t v61 = 126 - 2 * v47;
            if (v6 == (double *)v7) {
              uint64_t v49 = 0;
            }
            else {
              uint64_t v49 = v61;
            }
          }
          std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder*,false>((unint64_t)v6, v7, v49, 1);
          if (*(unsigned char *)(a1 + 25)) {
            id v122 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
          }
          else {
            id v122 = 0;
          }
          if (v6 == (double *)v7)
          {
LABEL_156:
            *(double *)(a1 + 248) = HKIntervalMask<double>::removeIntervalsBefore(v117, v35) + *(double *)(a1 + 248);
            double v109 = *(void **)(a1 + 256);
            if (v109 != v116)
            {
              do
              {
                *((double *)v109 + 21) = HKIntervalMask<double>::removeIntervalsBefore((double **)v109 + 18, v35)
                                       + *((double *)v109 + 21);
                double v110 = (void *)v109[1];
                if (v110)
                {
                  do
                  {
                    id v111 = v110;
                    double v110 = (void *)*v110;
                  }
                  while (v110);
                }
                else
                {
                  do
                  {
                    id v111 = (void *)v109[2];
                    BOOL v112 = *v111 == (void)v109;
                    double v109 = v111;
                  }
                  while (!v112);
                }
                double v109 = v111;
              }
              while (v111 != v116);
            }
            *(double *)(a1 + 56) = v35;

            if (v6) {
              operator delete(v6);
            }
            goto LABEL_165;
          }
          int64_t v121 = 0;
          char v62 = 0;
          double v63 = v6;
          while (2)
          {
            long long v64 = *((_OWORD *)v63 + 1);
            *(_OWORD *)&v130.double var0 = *(_OWORD *)v63;
            *(_OWORD *)&v130.double var2 = v64;
            *(double *)&v130.BOOL var4 = v63[4];
            if (!v130.var4 || v130.var1 > v35)
            {
LABEL_96:
              double v65 = *(_OWORD **)(a1 + 104);
              unint64_t v66 = *(void *)(a1 + 112);
              if ((unint64_t)v65 < v66)
              {
                long long v67 = *(_OWORD *)v63;
                long long v68 = *((_OWORD *)v63 + 2);
                v65[1] = *((_OWORD *)v63 + 1);
                v65[2] = v68;
                _OWORD *v65 = v67;
                uint64_t v69 = v65 + 3;
                goto LABEL_116;
              }
              unint64_t v70 = 0xAAAAAAAAAAAAAAABLL * (((char *)v65 - (char *)*v128) >> 4);
              unint64_t v71 = v70 + 1;
              if (v70 + 1 > 0x555555555555555) {
                std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v72 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - (void)*v128) >> 4);
              if (2 * v72 > v71) {
                unint64_t v71 = 2 * v72;
              }
              if (v72 >= 0x2AAAAAAAAAAAAAALL) {
                unint64_t v73 = 0x555555555555555;
              }
              else {
                unint64_t v73 = v71;
              }
              if (v73) {
                unint64_t v73 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v73);
              }
              else {
                uint64_t v74 = 0;
              }
              id v79 = (_OWORD *)(v73 + 48 * v70);
              long long v80 = *(_OWORD *)v63;
              long long v81 = *((_OWORD *)v63 + 2);
              v79[1] = *((_OWORD *)v63 + 1);
              v79[2] = v81;
              _OWORD *v79 = v80;
              id v83 = *(double **)(a1 + 96);
              unint64_t v82 = *(double **)(a1 + 104);
              id v84 = v79;
              if (v82 != v83)
              {
                do
                {
                  long long v85 = *((_OWORD *)v82 - 3);
                  long long v86 = *((_OWORD *)v82 - 2);
                  *(_OWORD *)((char *)v84 - 21) = *(_OWORD *)((char *)v82 - 21);
                  *(v84 - 3) = v85;
                  *(v84 - 2) = v86;
                  v84 -= 3;
                  v82 -= 6;
                }
                while (v82 != v83);
                unint64_t v82 = *v128;
              }
              uint64_t v69 = v79 + 3;
              *(void *)(a1 + 96) = v84;
              *(void *)(a1 + 104) = v79 + 3;
              *(void *)(a1 + 112) = v73 + 48 * v74;
              if (v82)
              {
                long long v87 = v82;
                goto LABEL_115;
              }
              goto LABEL_116;
            }
            double var2 = v130.var2;
            if (v130.var2 >= v35)
            {
              double var0 = v130.var0;
              int64_t var3 = v130.var3;
              v130.double var2 = v35;
              BOOL v76 = var2 > v35;
              v130.BOOL var4 = v130.var1 < v35;
              if (v130.var1 >= v35) {
                goto LABEL_96;
              }
              BOOL var5 = v130.var5;
              double v77 = v35;
            }
            else
            {
              v130.BOOL var4 = v130.var2 > v130.var1;
              if (v130.var2 <= v130.var1) {
                goto LABEL_96;
              }
              BOOL v76 = 0;
              int64_t var3 = 0;
              BOOL var5 = 0;
              double var2 = 0.0;
              double v77 = 0.0;
              double var0 = 0.0;
            }
            HDStatisticsNoiseLevel::applyMaskToSample((uint64_t)&v130, v123);
            int v88 = *((unsigned __int8 *)v63 + 42);
            int v127 = *((unsigned __int8 *)v63 + 41);
            char v124 = *((unsigned char *)v63 + 40);
            if (v130.var4)
            {
              if (v62)
              {
                unint64_t v89 = v130.var3;
                if (v121 == v130.var3 || *(unsigned char *)(a1 + 24))
                {
                  HDStatisticsNoiseLevel::addSample(v120, &v130, v88 == 0);
                  HDStatisticsTimeInterval::addSample(v119, &v130, v88 == 0);
                  int v88 = 1;
                }
              }
              else
              {
                HDStatisticsNoiseLevel::addSample(v120, &v130, v88 == 0);
                HDStatisticsTimeInterval::addSample(v119, &v130, v88 == 0);
                int v88 = 1;
                unint64_t v89 = v130.var3;
                int64_t v121 = v130.var3;
              }
              if (*(unsigned char *)(a1 + 25))
              {
                double v90 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, v89);
                if (v90)
                {
                  double v91 = [v122 objectForKeyedSubscript:v90];
                  double v92 = v91;
                  if (v91)
                  {
                    if ([v91 longLongValue] == v89 || *(unsigned char *)(a1 + 24))
                    {
                      unint64_t v93 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v89);
                      double v94 = (uint64_t *)HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v93);
                      HDStatisticsNoiseLevel::addSample((HDStatisticsNoiseLevel *)v94, &v130, v127 == 0);
                      goto LABEL_134;
                    }
                  }
                  else
                  {
                    id v95 = [NSNumber numberWithLongLong:v89];
                    [v122 setObject:v95 forKeyedSubscript:v90];

                    unint64_t v96 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v89);
                    double v94 = (uint64_t *)HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v96);
                    HDStatisticsNoiseLevel::addSample((HDStatisticsNoiseLevel *)v94, &v130, v127 == 0);
LABEL_134:
                    HDStatisticsTimeInterval::addSample(v94 + 12, &v130, v127 == 0);
                    LOBYTE(v127) = 1;
                  }
                }
              }
              char v62 = 1;
            }
            if (v76)
            {
              BOOL v97 = v88 != 0;
              double v99 = *(double **)(a1 + 104);
              unint64_t v98 = *(void *)(a1 + 112);
              if ((unint64_t)v99 >= v98)
              {
                long long v87 = *v128;
                unint64_t v100 = 0xAAAAAAAAAAAAAAABLL * (((char *)v99 - (char *)*v128) >> 4);
                unint64_t v101 = v100 + 1;
                if (v100 + 1 > 0x555555555555555) {
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v102 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v98 - (void)v87) >> 4);
                if (2 * v102 > v101) {
                  unint64_t v101 = 2 * v102;
                }
                if (v102 >= 0x2AAAAAAAAAAAAAALL) {
                  unint64_t v103 = 0x555555555555555;
                }
                else {
                  unint64_t v103 = v101;
                }
                if (v103)
                {
                  unint64_t v103 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v103);
                  long long v87 = *(double **)(a1 + 96);
                  double v99 = *(double **)(a1 + 104);
                }
                else
                {
                  uint64_t v104 = 0;
                }
                unint64_t v105 = v103 + 48 * v100;
                *(double *)unint64_t v105 = var0;
                *(double *)(v105 + 8) = v77;
                *(double *)(v105 + 16) = var2;
                *(void *)(v105 + 24) = var3;
                *(unsigned char *)(v105 + 32) = v76;
                *(unsigned char *)(v105 + 33) = var5;
                *(unsigned char *)(v105 + 40) = v124;
                *(unsigned char *)(v105 + 41) = v127;
                *(unsigned char *)(v105 + 42) = v97;
                unint64_t v106 = v105;
                if (v99 != v87)
                {
                  do
                  {
                    long long v107 = *((_OWORD *)v99 - 3);
                    long long v108 = *((_OWORD *)v99 - 2);
                    *(_OWORD *)(v106 - 21) = *(_OWORD *)((char *)v99 - 21);
                    *(_OWORD *)(v106 - 48) = v107;
                    *(_OWORD *)(v106 - 32) = v108;
                    v106 -= 48;
                    v99 -= 6;
                  }
                  while (v99 != v87);
                  long long v87 = *v128;
                }
                uint64_t v69 = (_OWORD *)(v105 + 48);
                *(void *)(a1 + 96) = v106;
                *(void *)(a1 + 104) = v105 + 48;
                *(void *)(a1 + 112) = v103 + 48 * v104;
                if (v87) {
LABEL_115:
                }
                  operator delete(v87);
              }
              else
              {
                *double v99 = var0;
                v99[1] = v77;
                v99[2] = var2;
                *((void *)v99 + 3) = var3;
                *((unsigned char *)v99 + 32) = v76;
                *((unsigned char *)v99 + 33) = var5;
                *((unsigned char *)v99 + 40) = v124;
                *((unsigned char *)v99 + 41) = v127;
                uint64_t v69 = v99 + 6;
                *((unsigned char *)v99 + 42) = v97;
              }
LABEL_116:
              *(void *)(a1 + 104) = v69;
            }
            v63 += 6;
            if (v63 == (double *)v7) {
              goto LABEL_156;
            }
            continue;
          }
        }
        double v9 = v6[1];
        double v10 = v6[2];
        int64_t v11 = *((void *)v6 + 3);
        char v12 = *((unsigned char *)v6 + 32);
        char v13 = *((unsigned char *)v6 + 33);
        if (v12)
        {
          BOOL v14 = v9 < a2;
          BOOL v15 = v10 > a2;
          if (v10 < a2) {
            double v16 = v6[2];
          }
          else {
            double v16 = a2;
          }
          if (v10 >= a2)
          {
            char v17 = *((unsigned char *)v6 + 33);
          }
          else
          {
            BOOL v14 = v10 > v9;
            char v17 = 0;
          }
          if (v10 < a2) {
            double v18 = 0.0;
          }
          else {
            double v18 = *v6;
          }
          if (v10 < a2) {
            double v19 = 0.0;
          }
          else {
            double v19 = a2;
          }
          if (v10 < a2) {
            double v20 = 0.0;
          }
          else {
            double v20 = v6[2];
          }
          if (v10 < a2) {
            uint64_t v21 = 0;
          }
          else {
            uint64_t v21 = *((void *)v6 + 3);
          }
          if (v10 < a2) {
            BOOL v15 = 0;
          }
          BOOL v22 = v10 > v9;
          if (v9 <= a2)
          {
            double v10 = v16;
            BOOL v23 = v14;
          }
          else
          {
            double v20 = v6[2];
            BOOL v23 = 0;
          }
          if (v9 > a2) {
            char v12 = *((unsigned char *)v6 + 33);
          }
          else {
            char v12 = v17;
          }
          if (v9 > a2) {
            double v24 = *v6;
          }
          else {
            double v24 = v18;
          }
          if (v9 > a2) {
            double v25 = v6[1];
          }
          else {
            double v25 = v19;
          }
          if (v9 > a2) {
            uint64_t v26 = *((void *)v6 + 3);
          }
          else {
            uint64_t v26 = v21;
          }
          if (v9 > a2) {
            BOOL v15 = v22;
          }
        }
        else
        {
          BOOL v23 = 0;
          uint64_t v26 = 0;
          BOOL v15 = 0;
          double v24 = 0.0;
          double v25 = 0.0;
          double v20 = 0.0;
        }
        int v50 = *((unsigned __int8 *)v6 + 42);
        int v51 = *((unsigned __int8 *)v6 + 41);
        int v52 = *((unsigned __int8 *)v6 + 40);
        v130.double var0 = *v6;
        v130.var1 = v9;
        v130.double var2 = v10;
        v130.int64_t var3 = v11;
        v130.BOOL var4 = v23;
        v130.BOOL var5 = v13;
        *(_DWORD *)(&v130.var5 + 1) = *(_DWORD *)((char *)v6 + 34);
        *(_WORD *)(&v130.var5 + 5) = *((_WORD *)v6 + 19);
        *(double *)&long long v131 = v24;
        *((double *)&v131 + 1) = v25;
        *(double *)&long long v132 = v20;
        *((void *)&v132 + 1) = v26;
        LOBYTE(v133) = v15;
        HIBYTE(v133) = v12;
        HDStatisticsNoiseLevel::applyMaskToSample((uint64_t)&v130, v123);
        BOOL v53 = v52 != 0;
        BOOL v54 = v51 != 0;
        BOOL v55 = v50 != 0;
        if (v130.var4)
        {
          BOOL v56 = v50 == 0;
          HDStatisticsNoiseLevel::addSample(v120, &v130, v56);
          HDStatisticsTimeInterval::addSample(v119, &v130, v56);
          if (*(unsigned char *)(a1 + 25))
          {
            unint64_t v57 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v130.var3);
            unint64_t v58 = (uint64_t *)HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v57);
            HDStatisticsNoiseLevel::addSample((HDStatisticsNoiseLevel *)v58, &v130, v51 == 0);
            HDStatisticsTimeInterval::addSample(v58 + 12, &v130, v51 == 0);
          }
          BOOL v53 = 1;
          BOOL v54 = 1;
          BOOL v55 = 1;
        }
        if ((_BYTE)v133)
        {
          LOWORD(v129) = v133;
          long long v59 = v132;
          id v60 = *v128;
          *(_OWORD *)id v60 = v131;
          *((_OWORD *)v60 + 1) = v59;
          *((void *)v60 + 4) = v129;
          *((unsigned char *)v60 + 40) = v53;
          *((unsigned char *)v60 + 41) = v54;
          *((unsigned char *)v60 + 42) = v55;
        }
        else
        {
          *(void *)(a1 + 104) = *(void *)(a1 + 96);
        }
      }
      *(double *)(a1 + 56) = a2;
LABEL_165:
      double v113 = *(double *)(a1 + 56);
      if (v113 == v5)
      {
        long long v114 = [MEMORY[0x1E4F28B00] currentHandler];
        __int16 v115 = objc_msgSend(NSString, "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel, HDStatisticsTimeInterval>>::_mergeThroughTime(double) [Statistics = HDStatisticsCombined<HDStatisticsNoiseLevel, HDStatisticsTimeInterval>]");
        [v114 handleFailureInFunction:v115 file:@"HDStatisticsBucket.hpp" lineNumber:234 description:@"Failed to make forward progress during statistics merge."];

        double v113 = *(double *)(a1 + 56);
      }
      double v5 = v113;
    }
    while (v113 < a2);
  }
}

void sub_1BD0F4E2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = a2;
  double v4 = *(void **)(a1 + 264);
  if (!v4) {
    goto LABEL_11;
  }
  double v5 = (uint64_t **)(a1 + 264);
  long long v6 = (uint64_t **)(a1 + 264);
  do
  {
    uint64_t v7 = v4[4];
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      double v9 = v4;
    }
    else {
      double v9 = v4 + 1;
    }
    if (!v8) {
      long long v6 = (uint64_t **)v4;
    }
    double v4 = (void *)*v9;
  }
  while (*v9);
  if (v6 == v5 || (uint64_t)v6[4] > a2)
  {
LABEL_11:
    double v10 = std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 256), a2, &v12);
    HDStatisticsNoiseLevel::configure((id *)v10 + 5, *(HDStatisticsNoiseLevelConfiguration **)(a1 + 32));
    long long v6 = std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 256), a2, &v12);
  }
  return v6 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    double v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((void *)(a1 + 344), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, a2);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      id v10 = v6;
      uint64_t v7 = (void *)(a1 + 384);
      BOOL v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        int64_t v11 = &v10;
        *((void *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        id v6 = v10;
      }
    }
  }
  return a2;
}

void sub_1BD0F501C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  double v4 = (id *)(a1 + 88);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    id v6 = (void *)(a1 + 424);
    uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
    if (v7)
    {
      id v8 = (id)v7[3];
    }
    else
    {
      id v9 = objc_loadWeakRetained(v4);
      id v8 = [v9 bundleIdentifierForSourceID:a2];

      if (v8)
      {
        id v10 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
        objc_storeStrong(v10 + 3, v8);
      }
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1BD0F5100(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, void *a3)
{
  id v6 = a1 + 1;
  double v5 = a1[1];
  uint64_t v7 = a1 + 1;
  id v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        id v8 = (uint64_t **)v5;
        uint64_t v9 = v5[4];
        if (v9 <= a2) {
          break;
        }
        double v5 = *v8;
        uint64_t v7 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a2) {
        break;
      }
      double v5 = v8[1];
      if (!v5)
      {
        uint64_t v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    id v10 = (char *)operator new(0xB0uLL);
    v12[0] = v10;
    v12[1] = v6;
    char v13 = 0;
    *((void *)v10 + 4) = *a3;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    *(_OWORD *)(v10 + 120) = 0u;
    *(_OWORD *)(v10 + 136) = 0u;
    *(_OWORD *)(v10 + 152) = 0u;
    *((void *)v10 + 21) = 0;
    *((void *)v10 + 15) = [[HDQuantitySampleOverlapProcessor alloc] initWithOverlapFunction:1];
    *((_WORD *)v10 + 64) = 257;
    *(_OWORD *)(v10 + 136) = 0u;
    *(_OWORD *)(v10 + 152) = 0u;
    *((void *)v10 + 21) = 0;
    char v13 = 1;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v8, v7, (uint64_t *)v10);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
    return (uint64_t **)v10;
  }
  return v8;
}

void sub_1BD0F5240(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v12 = a2 - 3;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 4);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v103 = *((void *)a2 - 3);
                uint64_t v104 = *(void *)(v13 + 24);
                if (v103 == v104) {
                  return;
                }
                unint64_t v105 = *(char **)(*(void *)a3 + 320);
                unint64_t v106 = *(char **)(*(void *)a3 + 328);
                long long v107 = v105;
                long long v108 = v105;
                if (v105 == v106) {
                  goto LABEL_171;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>((long long *)v13, (long long *)(v13 + 48), a2 - 3, a3);
                return;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, (uint64_t)(a2 - 3), a3);
                return;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, v13 + 144, (uint64_t)(a2 - 3), a3);
                return;
              default:
                JUMPOUT(0);
            }
            do
            {
              if (*(void *)v108 == v103) {
                goto LABEL_168;
              }
              v108 += 8;
            }
            while (v108 != v106);
            long long v108 = *(char **)(*(void *)a3 + 328);
LABEL_168:
            while (*(void *)v107 != v104)
            {
              v107 += 8;
              if (v107 == v106)
              {
                long long v107 = *(char **)(*(void *)a3 + 328);
                break;
              }
            }
LABEL_171:
            if (v108 - v105 < v107 - v105)
            {
              *(_OWORD *)v226 = *(_OWORD *)(v13 + 16);
              *(_OWORD *)&v226[16] = *(_OWORD *)(v13 + 32);
              long long v218 = *(_OWORD *)v13;
              long long v109 = *v12;
              long long v110 = *(a2 - 2);
              *(_OWORD *)(v13 + 27) = *(long long *)((char *)a2 - 21);
              *(_OWORD *)unint64_t v13 = v109;
              *(_OWORD *)(v13 + 16) = v110;
              *(long long *)((char *)a2 - 21) = *(_OWORD *)&v226[11];
              *unint64_t v12 = v218;
              *(a2 - 2) = *(_OWORD *)v226;
            }
            return;
          }
          if (v14 <= 1151)
          {
            id v111 = (long long *)(v13 + 48);
            BOOL v113 = (long long *)v13 == a2 || v111 == a2;
            if (a5)
            {
              if (!v113)
              {
                unint64_t v114 = v13;
                do
                {
                  unint64_t v115 = v114;
                  unint64_t v114 = (unint64_t)v111;
                  uint64_t v116 = *(void *)(v115 + 72);
                  uint64_t v117 = *(void *)(v115 + 24);
                  if (v116 != v117)
                  {
                    uint64_t v118 = *(char **)(*(void *)a3 + 320);
                    uint64_t v119 = *(char **)(*(void *)a3 + 328);
                    long long v120 = v118;
                    int64_t v121 = v118;
                    if (v118 != v119)
                    {
                      do
                      {
                        if (*(void *)v121 == v116) {
                          goto LABEL_196;
                        }
                        v121 += 8;
                      }
                      while (v121 != v119);
                      int64_t v121 = *(char **)(*(void *)a3 + 328);
LABEL_196:
                      while (*(void *)v120 != v117)
                      {
                        v120 += 8;
                        if (v120 == v119)
                        {
                          long long v120 = *(char **)(*(void *)a3 + 328);
                          break;
                        }
                      }
                    }
                    if (v121 - v118 < v120 - v118)
                    {
                      uint64_t v227 = *(void *)(v114 + 16);
                      long long v219 = *(_OWORD *)v114;
                      long long v236 = *(_OWORD *)(v115 + 80);
                      unint64_t v122 = v114;
                      while (1)
                      {
                        long long v123 = *(_OWORD *)(v115 + 16);
                        *(_OWORD *)unint64_t v122 = *(_OWORD *)v115;
                        *(_OWORD *)(v122 + 16) = v123;
                        *(_OWORD *)(v122 + 27) = *(_OWORD *)(v115 + 27);
                        if (v115 == v13) {
                          break;
                        }
                        unint64_t v122 = v115;
                        uint64_t v124 = *(void *)(v115 - 24);
                        if (v116 != v124)
                        {
                          uint64_t v125 = *(char **)(*(void *)a3 + 320);
                          uint64_t v126 = *(char **)(*(void *)a3 + 328);
                          int v127 = v125;
                          uint64_t v128 = v125;
                          if (v125 != v126)
                          {
                            do
                            {
                              if (*(void *)v128 == v116) {
                                goto LABEL_208;
                              }
                              v128 += 8;
                            }
                            while (v128 != v126);
                            uint64_t v128 = *(char **)(*(void *)a3 + 328);
LABEL_208:
                            while (*(void *)v127 != v124)
                            {
                              v127 += 8;
                              if (v127 == v126)
                              {
                                int v127 = *(char **)(*(void *)a3 + 328);
                                break;
                              }
                            }
                          }
                          unint64_t v115 = v122 - 48;
                          if (v128 - v125 < v127 - v125) {
                            continue;
                          }
                        }
                        goto LABEL_212;
                      }
                      unint64_t v122 = v13;
LABEL_212:
                      *(_OWORD *)unint64_t v122 = v219;
                      *(void *)(v122 + 16) = v227;
                      *(void *)(v122 + 24) = v116;
                      *(void *)(v122 + 32) = v236;
                      *(_DWORD *)(v122 + 39) = *(_DWORD *)((char *)&v236 + 7);
                    }
                  }
                  id v111 = (long long *)(v114 + 48);
                }
                while ((long long *)(v114 + 48) != a2);
              }
            }
            else if (!v113)
            {
              do
              {
                unint64_t v201 = a1;
                a1 = (unint64_t)v111;
                uint64_t v202 = *(void *)(v201 + 72);
                uint64_t v203 = *(void *)(v201 + 24);
                if (v202 != v203)
                {
                  v204 = *(char **)(*(void *)a3 + 320);
                  v205 = *(char **)(*(void *)a3 + 328);
                  v206 = v204;
                  v207 = v204;
                  if (v204 != v205)
                  {
                    do
                    {
                      if (*(void *)v207 == v202) {
                        goto LABEL_312;
                      }
                      v207 += 8;
                    }
                    while (v207 != v205);
                    v207 = *(char **)(*(void *)a3 + 328);
LABEL_312:
                    while (*(void *)v206 != v203)
                    {
                      v206 += 8;
                      if (v206 == v205)
                      {
                        v206 = *(char **)(*(void *)a3 + 328);
                        break;
                      }
                    }
                  }
                  if (v207 - v204 < v206 - v204)
                  {
                    uint64_t v230 = *(void *)(a1 + 16);
                    long long v222 = *(_OWORD *)a1;
                    long long v239 = *(_OWORD *)(v201 + 80);
                    unint64_t v208 = a1;
                    do
                    {
                      v209 = (_OWORD *)v208;
                      unint64_t v208 = v201;
                      long long v210 = *(_OWORD *)(v201 + 16);
                      _OWORD *v209 = *(_OWORD *)v201;
                      v209[1] = v210;
                      *(_OWORD *)((char *)v209 + 27) = *(_OWORD *)(v201 + 27);
                      uint64_t v211 = *(void *)(v201 - 24);
                      if (v202 == v211) {
                        break;
                      }
                      v212 = *(char **)(*(void *)a3 + 320);
                      v213 = *(char **)(*(void *)a3 + 328);
                      v214 = v212;
                      v215 = v212;
                      if (v212 != v213)
                      {
                        do
                        {
                          if (*(void *)v215 == v202) {
                            goto LABEL_322;
                          }
                          v215 += 8;
                        }
                        while (v215 != v213);
                        v215 = *(char **)(*(void *)a3 + 328);
LABEL_322:
                        while (*(void *)v214 != v211)
                        {
                          v214 += 8;
                          if (v214 == v213)
                          {
                            v214 = *(char **)(*(void *)a3 + 328);
                            break;
                          }
                        }
                      }
                      unint64_t v201 = v208 - 48;
                    }
                    while (v215 - v212 < v214 - v212);
                    *(_OWORD *)unint64_t v208 = v222;
                    *(void *)(v208 + 16) = v230;
                    *(void *)(v208 + 24) = v202;
                    *(void *)(v208 + 32) = v239;
                    *(_DWORD *)(v208 + 39) = *(_DWORD *)((char *)&v239 + 7);
                  }
                }
                id v111 = (long long *)(a1 + 48);
              }
              while ((long long *)(a1 + 48) != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((long long *)v13 != a2)
            {
              int64_t v129 = (v15 - 2) >> 1;
              int64_t v130 = v129;
              do
              {
                int64_t v131 = v130;
                if (v129 >= v130)
                {
                  uint64_t v132 = (2 * v130) | 1;
                  unint64_t v133 = v13 + 48 * v132;
                  if (2 * v131 + 2 < (uint64_t)v15)
                  {
                    uint64_t v134 = *(void *)(v133 + 24);
                    uint64_t v135 = *(void *)(v133 + 72);
                    if (v134 != v135)
                    {
                      v137 = *(char **)(*(void *)a3 + 320);
                      v136 = *(char **)(*(void *)a3 + 328);
                      v138 = v137;
                      v139 = v137;
                      if (v137 != v136)
                      {
                        do
                        {
                          if (*(void *)v139 == v134) {
                            goto LABEL_224;
                          }
                          v139 += 8;
                        }
                        while (v139 != v136);
                        v139 = *(char **)(*(void *)a3 + 328);
LABEL_224:
                        while (*(void *)v138 != v135)
                        {
                          v138 += 8;
                          if (v138 == v136)
                          {
                            v138 = *(char **)(*(void *)a3 + 328);
                            break;
                          }
                        }
                      }
                      v133 += 48 * (v139 - v137 < v138 - v137);
                      if (v139 - v137 < v138 - v137) {
                        uint64_t v132 = 2 * v131 + 2;
                      }
                    }
                  }
                  unint64_t v140 = v13 + 48 * v131;
                  uint64_t v141 = *(void *)(v133 + 24);
                  uint64_t v142 = *(void *)(v140 + 24);
                  if (v141 == v142) {
                    goto LABEL_238;
                  }
                  v144 = *(char **)(*(void *)a3 + 320);
                  v143 = *(char **)(*(void *)a3 + 328);
                  v145 = v144;
                  v146 = v144;
                  if (v144 != v143)
                  {
                    do
                    {
                      if (*(void *)v146 == v141) {
                        goto LABEL_234;
                      }
                      v146 += 8;
                    }
                    while (v146 != v143);
                    v146 = *(char **)(*(void *)a3 + 328);
LABEL_234:
                    while (*(void *)v145 != v142)
                    {
                      v145 += 8;
                      if (v145 == v143)
                      {
                        v145 = *(char **)(*(void *)a3 + 328);
                        break;
                      }
                    }
                  }
                  if (v146 - v144 >= v145 - v144)
                  {
LABEL_238:
                    uint64_t v228 = *(void *)(v140 + 16);
                    long long v220 = *(_OWORD *)v140;
                    long long v237 = *(_OWORD *)(v140 + 32);
                    long long v147 = *(_OWORD *)v133;
                    long long v148 = *(_OWORD *)(v133 + 16);
                    *(_OWORD *)(v140 + 27) = *(_OWORD *)(v133 + 27);
                    *(_OWORD *)unint64_t v140 = v147;
                    *(_OWORD *)(v140 + 16) = v148;
                    if (v129 >= v132)
                    {
                      while (1)
                      {
                        uint64_t v150 = 2 * v132;
                        uint64_t v132 = (2 * v132) | 1;
                        unint64_t v149 = v13 + 48 * v132;
                        uint64_t v151 = v150 + 2;
                        if (v151 < (uint64_t)v15)
                        {
                          uint64_t v152 = *(void *)(v149 + 24);
                          uint64_t v153 = *(void *)(v149 + 72);
                          if (v152 != v153)
                          {
                            v154 = *(char **)(*(void *)a3 + 320);
                            v155 = *(char **)(*(void *)a3 + 328);
                            v156 = v154;
                            v157 = v154;
                            if (v154 != v155)
                            {
                              do
                              {
                                if (*(void *)v157 == v152) {
                                  goto LABEL_246;
                                }
                                v157 += 8;
                              }
                              while (v157 != v155);
                              v157 = *(char **)(*(void *)a3 + 328);
LABEL_246:
                              while (*(void *)v156 != v153)
                              {
                                v156 += 8;
                                if (v156 == v155)
                                {
                                  v156 = *(char **)(*(void *)a3 + 328);
                                  break;
                                }
                              }
                            }
                            v149 += 48 * (v157 - v154 < v156 - v154);
                            if (v157 - v154 < v156 - v154) {
                              uint64_t v132 = v151;
                            }
                          }
                        }
                        uint64_t v158 = *(void *)(v149 + 24);
                        if (v158 != v142)
                        {
                          v160 = *(char **)(*(void *)a3 + 320);
                          v159 = *(char **)(*(void *)a3 + 328);
                          v161 = v160;
                          v162 = v160;
                          if (v160 != v159)
                          {
                            do
                            {
                              if (*(void *)v162 == v158) {
                                goto LABEL_256;
                              }
                              v162 += 8;
                            }
                            while (v162 != v159);
                            v162 = *(char **)(*(void *)a3 + 328);
LABEL_256:
                            while (*(void *)v161 != v142)
                            {
                              v161 += 8;
                              if (v161 == v159)
                              {
                                v161 = *(char **)(*(void *)a3 + 328);
                                break;
                              }
                            }
                          }
                          if (v162 - v160 < v161 - v160) {
                            break;
                          }
                        }
                        long long v163 = *(_OWORD *)v149;
                        long long v164 = *(_OWORD *)(v149 + 16);
                        *(_OWORD *)(v133 + 27) = *(_OWORD *)(v149 + 27);
                        *(_OWORD *)unint64_t v133 = v163;
                        *(_OWORD *)(v133 + 16) = v164;
                        unint64_t v133 = v149;
                        if (v129 < v132) {
                          goto LABEL_261;
                        }
                      }
                    }
                    unint64_t v149 = v133;
LABEL_261:
                    *(_OWORD *)unint64_t v149 = v220;
                    *(void *)(v149 + 16) = v228;
                    *(void *)(v149 + 24) = v142;
                    *(void *)(v149 + 32) = v237;
                    *(_DWORD *)(v149 + 39) = *(_DWORD *)((char *)&v237 + 7);
                  }
                }
                int64_t v130 = v131 - 1;
              }
              while (v131);
              int64_t v165 = v14 / 0x30uLL;
              do
              {
                uint64_t v166 = 0;
                *(_OWORD *)v229 = *(_OWORD *)(v13 + 16);
                *(_OWORD *)&v229[16] = *(_OWORD *)(v13 + 32);
                long long v221 = *(_OWORD *)v13;
                uint64_t v167 = v165 - 2;
                if (v165 < 2) {
                  uint64_t v167 = v165 - 1;
                }
                uint64_t v168 = v167 >> 1;
                unint64_t v169 = v13;
                do
                {
                  v170 = (_OWORD *)v169;
                  v169 += 48 * v166 + 48;
                  uint64_t v171 = 2 * v166;
                  uint64_t v166 = (2 * v166) | 1;
                  uint64_t v172 = v171 + 2;
                  if (v171 + 2 < v165)
                  {
                    uint64_t v173 = *(void *)(v169 + 24);
                    uint64_t v174 = *(void *)(v169 + 72);
                    if (v173 != v174)
                    {
                      v176 = *(char **)(*(void *)a3 + 320);
                      v175 = *(char **)(*(void *)a3 + 328);
                      v177 = v176;
                      v178 = v176;
                      if (v176 != v175)
                      {
                        do
                        {
                          if (*(void *)v178 == v173) {
                            goto LABEL_273;
                          }
                          v178 += 8;
                        }
                        while (v178 != v175);
                        v178 = *(char **)(*(void *)a3 + 328);
LABEL_273:
                        while (*(void *)v177 != v174)
                        {
                          v177 += 8;
                          if (v177 == v175)
                          {
                            v177 = *(char **)(*(void *)a3 + 328);
                            break;
                          }
                        }
                      }
                      v169 += 48 * (v178 - v176 < v177 - v176);
                      if (v178 - v176 < v177 - v176) {
                        uint64_t v166 = v172;
                      }
                    }
                  }
                  long long v179 = *(_OWORD *)v169;
                  long long v180 = *(_OWORD *)(v169 + 16);
                  *(_OWORD *)((char *)v170 + 27) = *(_OWORD *)(v169 + 27);
                  _OWORD *v170 = v179;
                  v170[1] = v180;
                }
                while (v166 <= v168);
                a2 -= 3;
                if ((long long *)v169 == a2)
                {
                  *(_OWORD *)(v169 + 27) = *(_OWORD *)&v229[11];
                  *(_OWORD *)unint64_t v169 = v221;
                  *(_OWORD *)(v169 + 16) = *(_OWORD *)v229;
                }
                else
                {
                  long long v181 = *a2;
                  long long v182 = a2[1];
                  *(_OWORD *)(v169 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v169 = v181;
                  *(_OWORD *)(v169 + 16) = v182;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v229[11];
                  *a2 = v221;
                  a2[1] = *(_OWORD *)v229;
                  uint64_t v183 = v169 - v13 + 48;
                  if (v183 >= 49)
                  {
                    unint64_t v184 = (v183 / 0x30uLL - 2) >> 1;
                    unint64_t v185 = v13 + 48 * v184;
                    uint64_t v186 = *(void *)(v185 + 24);
                    uint64_t v187 = *(void *)(v169 + 24);
                    if (v186 != v187)
                    {
                      v189 = *(char **)(*(void *)a3 + 320);
                      v188 = *(char **)(*(void *)a3 + 328);
                      v190 = v189;
                      v191 = v189;
                      if (v189 != v188)
                      {
                        do
                        {
                          if (*(void *)v191 == v186) {
                            goto LABEL_286;
                          }
                          v191 += 8;
                        }
                        while (v191 != v188);
                        v191 = *(char **)(*(void *)a3 + 328);
LABEL_286:
                        while (*(void *)v190 != v187)
                        {
                          v190 += 8;
                          if (v190 == v188)
                          {
                            v190 = *(char **)(*(void *)a3 + 328);
                            break;
                          }
                        }
                      }
                      if (v191 - v189 < v190 - v189)
                      {
                        uint64_t v242 = *(void *)(v169 + 16);
                        long long v238 = *(_OWORD *)v169;
                        long long v233 = *(_OWORD *)(v169 + 32);
                        do
                        {
                          v192 = (_OWORD *)v169;
                          unint64_t v169 = v185;
                          long long v193 = *(_OWORD *)v185;
                          long long v194 = *(_OWORD *)(v185 + 16);
                          *(_OWORD *)((char *)v192 + 27) = *(_OWORD *)(v185 + 27);
                          _OWORD *v192 = v193;
                          v192[1] = v194;
                          if (!v184) {
                            break;
                          }
                          unint64_t v184 = (v184 - 1) >> 1;
                          unint64_t v185 = v13 + 48 * v184;
                          uint64_t v195 = *(void *)(v185 + 24);
                          if (v195 == v187) {
                            break;
                          }
                          v197 = *(char **)(*(void *)a3 + 320);
                          v196 = *(char **)(*(void *)a3 + 328);
                          v198 = v197;
                          v199 = v197;
                          if (v197 != v196)
                          {
                            do
                            {
                              if (*(void *)v199 == v195) {
                                goto LABEL_297;
                              }
                              v199 += 8;
                            }
                            while (v199 != v196);
                            v199 = *(char **)(*(void *)a3 + 328);
LABEL_297:
                            while (*(void *)v198 != v187)
                            {
                              v198 += 8;
                              if (v198 == v196)
                              {
                                v198 = *(char **)(*(void *)a3 + 328);
                                break;
                              }
                            }
                          }
                        }
                        while (v199 - v197 < v198 - v197);
                        *(_OWORD *)unint64_t v169 = v238;
                        *(void *)(v169 + 16) = v242;
                        *(void *)(v169 + 24) = v187;
                        *(void *)(v169 + 32) = v233;
                        *(_DWORD *)(v169 + 39) = *(_DWORD *)((char *)&v233 + 7);
                      }
                    }
                  }
                }
              }
              while (v165-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          char v17 = (long long *)(v13 + 48 * (v15 >> 1));
          if ((unint64_t)v14 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v15 >> 1)), a2 - 3, a3);
            uint64_t v18 = 3 * v16;
            double v19 = (long long *)(a1 + 48 * v16 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>((long long *)(a1 + 48), v19, a2 - 6, a3);
            double v20 = (long long *)(a1 + 48 + 16 * v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>((long long *)(a1 + 96), v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>(v19, v17, v20, a3);
            *(_OWORD *)v223 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v223[16] = *(_OWORD *)(a1 + 32);
            long long v216 = *(_OWORD *)a1;
            long long v21 = *(long long *)((char *)v17 + 27);
            long long v22 = v17[1];
            *(_OWORD *)a1 = *v17;
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(a1 + 27) = v21;
            *(long long *)((char *)v17 + 27) = *(_OWORD *)&v223[11];
            *char v17 = v216;
            v17[1] = *(_OWORD *)v223;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>((long long *)(a1 + 48 * (v15 >> 1)), (long long *)a1, a2 - 3, a3);
          }
          --a4;
          if (a5)
          {
            uint64_t v23 = *(void *)(a1 + 24);
            uint64_t v24 = *(void *)a3;
            break;
          }
          uint64_t v25 = *(void *)(a1 - 24);
          uint64_t v23 = *(void *)(a1 + 24);
          if (v25 != v23)
          {
            uint64_t v24 = *(void *)a3;
            uint64_t v26 = *(char **)(*(void *)a3 + 320);
            double v27 = *(char **)(*(void *)a3 + 328);
            double v28 = v26;
            double v29 = v26;
            if (v26 != v27)
            {
              do
              {
                if (*(void *)v29 == v25) {
                  goto LABEL_16;
                }
                v29 += 8;
              }
              while (v29 != v27);
              double v29 = *(char **)(*(void *)a3 + 328);
LABEL_16:
              while (*(void *)v28 != v23)
              {
                v28 += 8;
                if (v28 == v27)
                {
                  double v28 = *(char **)(*(void *)a3 + 328);
                  break;
                }
              }
            }
            if (v29 - v26 < v28 - v26) {
              break;
            }
          }
          uint64_t v241 = *(void *)(a1 + 16);
          long long v232 = *(_OWORD *)(a1 + 32);
          long long v235 = *(_OWORD *)a1;
          uint64_t v67 = *((void *)a2 - 3);
          if (v23 == v67) {
            goto LABEL_107;
          }
          long long v68 = *(char **)(*(void *)a3 + 320);
          uint64_t v69 = *(char **)(*(void *)a3 + 328);
          if (v68 == v69)
          {
            unint64_t v71 = *(char **)(*(void *)a3 + 320);
            unint64_t v70 = v71;
          }
          else
          {
            unint64_t v70 = *(char **)(*(void *)a3 + 320);
            while (*(void *)v70 != v23)
            {
              v70 += 8;
              if (v70 == v69)
              {
                unint64_t v70 = *(char **)(*(void *)a3 + 328);
                break;
              }
            }
            unint64_t v71 = *(char **)(*(void *)a3 + 320);
            while (*(void *)v71 != v67)
            {
              v71 += 8;
              if (v71 == v69)
              {
                unint64_t v71 = *(char **)(*(void *)a3 + 328);
                break;
              }
            }
          }
          if (v70 - v68 >= v71 - v68)
          {
LABEL_107:
            unint64_t v13 = a1 + 48;
            if (a1 + 48 < (unint64_t)a2)
            {
              uint64_t v75 = *(void *)a3;
              unint64_t v76 = a1;
              do
              {
                uint64_t v77 = *(void *)(v76 + 72);
                unint64_t v76 = v13;
                if (v23 != v77)
                {
                  id v78 = *(char **)(v75 + 320);
                  id v79 = *(char **)(v75 + 328);
                  long long v80 = v78;
                  long long v81 = v78;
                  if (v78 != v79)
                  {
                    do
                    {
                      if (*(void *)v81 == v23) {
                        goto LABEL_114;
                      }
                      v81 += 8;
                    }
                    while (v81 != v79);
                    long long v81 = *(char **)(v75 + 328);
LABEL_114:
                    while (*(void *)v80 != v77)
                    {
                      v80 += 8;
                      if (v80 == v79)
                      {
                        long long v80 = *(char **)(v75 + 328);
                        break;
                      }
                    }
                  }
                  if (v81 - v78 < v80 - v78) {
                    break;
                  }
                }
                v13 += 48;
              }
              while (v76 + 48 < (unint64_t)a2);
            }
          }
          else
          {
            unint64_t v13 = a1;
            do
            {
              do
              {
                uint64_t v72 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v72);
              if (v68 == v69)
              {
                uint64_t v74 = *(char **)(*(void *)a3 + 320);
                unint64_t v73 = v74;
              }
              else
              {
                unint64_t v73 = *(char **)(*(void *)a3 + 320);
                while (*(void *)v73 != v23)
                {
                  v73 += 8;
                  if (v73 == v69)
                  {
                    unint64_t v73 = *(char **)(*(void *)a3 + 328);
                    break;
                  }
                }
                uint64_t v74 = *(char **)(*(void *)a3 + 320);
                while (*(void *)v74 != v72)
                {
                  v74 += 8;
                  if (v74 == v69)
                  {
                    uint64_t v74 = *(char **)(*(void *)a3 + 328);
                    break;
                  }
                }
              }
            }
            while (v73 - v68 >= v74 - v68);
          }
          unint64_t v82 = a2;
          if (v13 < (unint64_t)a2)
          {
            uint64_t v83 = *(void *)a3;
            unint64_t v82 = a2;
            do
            {
              uint64_t v84 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v84) {
                break;
              }
              long long v85 = *(char **)(v83 + 320);
              long long v86 = *(char **)(v83 + 328);
              long long v87 = v85;
              int v88 = v85;
              if (v85 != v86)
              {
                do
                {
                  if (*(void *)v88 == v23) {
                    goto LABEL_126;
                  }
                  v88 += 8;
                }
                while (v88 != v86);
                int v88 = *(char **)(v83 + 328);
LABEL_126:
                while (*(void *)v87 != v84)
                {
                  v87 += 8;
                  if (v87 == v86)
                  {
                    long long v87 = *(char **)(v83 + 328);
                    break;
                  }
                }
              }
            }
            while (v88 - v85 < v87 - v85);
          }
          while (v13 < (unint64_t)v82)
          {
            *(_OWORD *)v225 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v225[16] = *(_OWORD *)(v13 + 32);
            long long v217 = *(_OWORD *)v13;
            long long v89 = *v82;
            long long v90 = v82[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v82 + 27);
            *(_OWORD *)unint64_t v13 = v89;
            *(_OWORD *)(v13 + 16) = v90;
            *(long long *)((char *)v82 + 27) = *(_OWORD *)&v225[11];
            long long *v82 = v217;
            v82[1] = *(_OWORD *)v225;
            uint64_t v91 = *(void *)a3;
            do
            {
              do
              {
                uint64_t v92 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v92);
              unint64_t v93 = *(char **)(v91 + 320);
              double v94 = *(char **)(v91 + 328);
              if (v93 == v94)
              {
                unint64_t v96 = *(char **)(v91 + 320);
                id v95 = v96;
              }
              else
              {
                id v95 = *(char **)(v91 + 320);
                while (*(void *)v95 != v23)
                {
                  v95 += 8;
                  if (v95 == v94)
                  {
                    id v95 = *(char **)(v91 + 328);
                    break;
                  }
                }
                unint64_t v96 = *(char **)(v91 + 320);
                while (*(void *)v96 != v92)
                {
                  v96 += 8;
                  if (v96 == v94)
                  {
                    unint64_t v96 = *(char **)(v91 + 328);
                    break;
                  }
                }
              }
            }
            while (v95 - v93 >= v96 - v93);
            do
            {
              uint64_t v97 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v97) {
                break;
              }
              if (v93 == v94)
              {
                double v99 = v93;
                unint64_t v98 = v93;
              }
              else
              {
                unint64_t v98 = v93;
                while (*(void *)v98 != v23)
                {
                  v98 += 8;
                  if (v98 == v94)
                  {
                    unint64_t v98 = v94;
                    break;
                  }
                }
                double v99 = v93;
                while (*(void *)v99 != v97)
                {
                  v99 += 8;
                  if (v99 == v94)
                  {
                    double v99 = v94;
                    break;
                  }
                }
              }
            }
            while (v98 - v93 < v99 - v93);
          }
          unint64_t v100 = (long long *)(v13 - 48);
          BOOL v5 = v13 - 48 >= a1;
          BOOL v6 = v13 - 48 == a1;
          if (v13 - 48 != a1)
          {
            long long v101 = *v100;
            long long v102 = *(_OWORD *)(v13 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
            *(_OWORD *)a1 = v101;
            *(_OWORD *)(a1 + 16) = v102;
          }
          a5 = 0;
          *unint64_t v100 = v235;
          *(void *)(v13 - 32) = v241;
          *(void *)(v13 - 24) = v23;
          *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v232 + 7);
          *(void *)(v13 - 16) = v232;
        }
        uint64_t v240 = *(void *)(a1 + 16);
        long long v231 = *(_OWORD *)(a1 + 32);
        long long v234 = *(_OWORD *)a1;
        unint64_t v30 = a1;
        do
        {
          unint64_t v31 = v30;
          v30 += 48;
          uint64_t v32 = *(void *)(v31 + 72);
          if (v32 == v23) {
            break;
          }
          id v33 = *(char **)(v24 + 320);
          double v34 = *(char **)(v24 + 328);
          double v35 = v33;
          double v36 = v33;
          if (v33 != v34)
          {
            do
            {
              if (*(void *)v36 == v32) {
                goto LABEL_26;
              }
              v36 += 8;
            }
            while (v36 != v34);
            double v36 = *(char **)(v24 + 328);
LABEL_26:
            while (*(void *)v35 != v23)
            {
              v35 += 8;
              if (v35 == v34)
              {
                double v35 = *(char **)(v24 + 328);
                break;
              }
            }
          }
        }
        while (v36 - v33 < v35 - v33);
        double v37 = a2;
        if (v31 == a1)
        {
          double v37 = a2;
          if (v30 < (unint64_t)a2)
          {
            double v37 = a2;
            do
            {
              uint64_t v43 = *((void *)v37 - 3);
              v37 -= 3;
              if (v43 != v23)
              {
                long long v44 = *(char **)(v24 + 320);
                long long v45 = *(char **)(v24 + 328);
                double v46 = v44;
                unint64_t v47 = v44;
                if (v44 != v45)
                {
                  do
                  {
                    if (*(void *)v47 == v43) {
                      goto LABEL_48;
                    }
                    v47 += 8;
                  }
                  while (v47 != v45);
                  unint64_t v47 = *(char **)(v24 + 328);
LABEL_48:
                  while (*(void *)v46 != v23)
                  {
                    v46 += 8;
                    if (v46 == v45)
                    {
                      double v46 = *(char **)(v24 + 328);
                      break;
                    }
                  }
                }
                if (v47 - v44 < v46 - v44) {
                  break;
                }
              }
            }
            while (v30 < (unint64_t)v37);
          }
        }
        else
        {
          do
          {
            do
            {
              uint64_t v38 = *((void *)v37 - 3);
              v37 -= 3;
            }
            while (v38 == v23);
            unint64_t v39 = *(char **)(v24 + 320);
            uint64_t v40 = *(char **)(v24 + 328);
            double v41 = v39;
            double v42 = v39;
            if (v39 != v40)
            {
              do
              {
                if (*(void *)v42 == v38) {
                  goto LABEL_36;
                }
                v42 += 8;
              }
              while (v42 != v40);
              double v42 = *(char **)(v24 + 328);
LABEL_36:
              while (*(void *)v41 != v23)
              {
                v41 += 8;
                if (v41 == v40)
                {
                  double v41 = *(char **)(v24 + 328);
                  break;
                }
              }
            }
          }
          while (v42 - v39 >= v41 - v39);
        }
        unint64_t v13 = v30;
        if (v30 < (unint64_t)v37)
        {
          uint64_t v48 = v37;
          do
          {
            *(_OWORD *)v224 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v224[16] = *(_OWORD *)(v13 + 32);
            long long v49 = *(_OWORD *)v13;
            long long v51 = *v48;
            long long v50 = v48[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v48 + 27);
            *(_OWORD *)unint64_t v13 = v51;
            *(_OWORD *)(v13 + 16) = v50;
            *(long long *)((char *)v48 + 27) = *(_OWORD *)&v224[11];
            *uint64_t v48 = v49;
            v48[1] = *(_OWORD *)v224;
            uint64_t v52 = *(void *)a3;
            do
            {
              uint64_t v53 = *(void *)(v13 + 72);
              v13 += 48;
              if (v53 == v23) {
                break;
              }
              BOOL v54 = *(char **)(v52 + 320);
              BOOL v55 = *(char **)(v52 + 328);
              BOOL v56 = v54;
              unint64_t v57 = v54;
              if (v54 != v55)
              {
                do
                {
                  if (*(void *)v57 == v53) {
                    goto LABEL_61;
                  }
                  v57 += 8;
                }
                while (v57 != v55);
                unint64_t v57 = *(char **)(v52 + 328);
LABEL_61:
                while (*(void *)v56 != v23)
                {
                  v56 += 8;
                  if (v56 == v55)
                  {
                    BOOL v56 = *(char **)(v52 + 328);
                    break;
                  }
                }
              }
            }
            while (v57 - v54 < v56 - v54);
            do
            {
              do
              {
                uint64_t v58 = *((void *)v48 - 3);
                v48 -= 3;
              }
              while (v58 == v23);
              long long v59 = *(char **)(v52 + 320);
              id v60 = *(char **)(v52 + 328);
              uint64_t v61 = v59;
              char v62 = v59;
              if (v59 != v60)
              {
                do
                {
                  if (*(void *)v62 == v58) {
                    goto LABEL_70;
                  }
                  v62 += 8;
                }
                while (v62 != v60);
                char v62 = *(char **)(v52 + 328);
LABEL_70:
                while (*(void *)v61 != v23)
                {
                  v61 += 8;
                  if (v61 == v60)
                  {
                    uint64_t v61 = *(char **)(v52 + 328);
                    break;
                  }
                }
              }
            }
            while (v62 - v59 >= v61 - v59);
          }
          while (v13 < (unint64_t)v48);
        }
        double v63 = (long long *)(v13 - 48);
        if (v13 - 48 != a1)
        {
          long long v64 = *v63;
          long long v65 = *(_OWORD *)(v13 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
          *(_OWORD *)a1 = v64;
          *(_OWORD *)(a1 + 16) = v65;
        }
        *double v63 = v234;
        *(void *)(v13 - 32) = v240;
        *(void *)(v13 - 24) = v23;
        *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v231 + 7);
        *(void *)(v13 - 16) = v231;
        if (v30 >= (unint64_t)v37) {
          break;
        }
LABEL_80:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(a1, v13 - 48, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, v13 - 48, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder*>(v13, (uint64_t)a2, a3))
      {
        break;
      }
      if (!v66) {
        goto LABEL_80;
      }
    }
    a2 = (long long *)(v13 - 48);
    if (!v66) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 - 24);
      uint64_t v9 = *(void *)(a1 + 24);
      if (v8 == v9) {
        return result;
      }
      id v10 = *(char **)(*(void *)a3 + 320);
      int64_t v11 = *(char **)(*(void *)a3 + 328);
      unint64_t v12 = v10;
      unint64_t v13 = v10;
      if (v10 == v11) {
        goto LABEL_10;
      }
      do
      {
        if (*(void *)v13 == v8) {
          goto LABEL_7;
        }
        v13 += 8;
      }
      while (v13 != v11);
      unint64_t v13 = *(char **)(*(void *)a3 + 328);
      do
      {
LABEL_7:
        if (*(void *)v12 == v9) {
          goto LABEL_10;
        }
        v12 += 8;
      }
      while (v12 != v11);
      unint64_t v12 = *(char **)(*(void *)a3 + 328);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        uint64_t v14 = (long long *)(a2 - 48);
        long long v15 = *(_OWORD *)a1;
        *(_OWORD *)double v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        long long v16 = *(_OWORD *)(a2 - 21);
        long long v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *uint64_t v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(long long *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), a3);
      uint64_t v19 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      int v20 = 0;
      break;
  }
  while (1)
  {
    uint64_t v21 = *(void *)(v19 + 24);
    uint64_t v22 = *(void *)(v18 + 24);
    if (v21 != v22)
    {
      uint64_t v23 = *(char **)(*(void *)a3 + 320);
      uint64_t v24 = *(char **)(*(void *)a3 + 328);
      uint64_t v25 = v23;
      uint64_t v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(void *)v26 == v21) {
            goto LABEL_19;
          }
          v26 += 8;
        }
        while (v26 != v24);
        uint64_t v26 = *(char **)(*(void *)a3 + 328);
LABEL_19:
        while (*(void *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            uint64_t v25 = *(char **)(*(void *)a3 + 328);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        long long v34 = *(_OWORD *)v19;
        uint64_t v36 = *(void *)(v19 + 16);
        long long v37 = *(_OWORD *)(v19 + 32);
        uint64_t v27 = v19;
        while (1)
        {
          long long v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1) {
            break;
          }
          uint64_t v27 = v18;
          uint64_t v29 = *(void *)(v18 - 24);
          if (v21 != v29)
          {
            unint64_t v30 = *(char **)(*(void *)a3 + 320);
            unint64_t v31 = *(char **)(*(void *)a3 + 328);
            uint64_t v32 = v30;
            id v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(void *)v33 == v21) {
                  goto LABEL_30;
                }
                v33 += 8;
              }
              while (v33 != v31);
              id v33 = *(char **)(*(void *)a3 + 328);
LABEL_30:
              while (*(void *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  uint64_t v32 = *(char **)(*(void *)a3 + 328);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30) {
              continue;
            }
          }
          goto LABEL_36;
        }
        uint64_t v27 = a1;
LABEL_36:
        *(_OWORD *)uint64_t v27 = v34;
        *(void *)(v27 + 16) = v36;
        *(void *)(v27 + 24) = v21;
        *(void *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8) {
          return v19 + 48 == a2;
        }
      }
    }
    uint64_t v18 = v19;
    v19 += 48;
    if (v19 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v10) >> 4);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*((double *)a2 - 5) < *(double *)(v10 + 8))
                {
                  *(_OWORD *)uint64_t v118 = *(_OWORD *)(v10 + 16);
                  *(_OWORD *)&v118[16] = *(_OWORD *)(v10 + 32);
                  long long v110 = *(_OWORD *)v10;
                  long long v52 = *(a2 - 3);
                  long long v53 = *(a2 - 2);
                  *(_OWORD *)(v10 + 27) = *(long long *)((char *)a2 - 21);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(long long *)((char *)a2 - 21) = *(_OWORD *)&v118[11];
                  *(a2 - 3) = v110;
                  *(a2 - 2) = *(_OWORD *)v118;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)v10, (long long *)(v10 + 48), a2 - 3);
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v10, v10 + 48, v10 + 96, (uint64_t)(a2 - 3));
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v10, v10 + 48, v10 + 96, v10 + 144, (uint64_t)(a2 - 3));
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 1151)
          {
            BOOL v54 = (long long *)(v10 + 48);
            BOOL v56 = (long long *)v10 == a2 || v54 == a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  long long v59 = v54;
                  double v60 = *(double *)(v58 + 56);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *(void *)v54;
                    *(_OWORD *)id v111 = *(_OWORD *)(v58 + 64);
                    *(_OWORD *)&v111[16] = *(_OWORD *)(v58 + 80);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      double v63 = (_OWORD *)(v10 + v62);
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      v63[3] = *(_OWORD *)(v10 + v62);
                      v63[4] = v64;
                      *(_OWORD *)((char *)v63 + 75) = *(_OWORD *)(v10 + v62 + 27);
                      if (!v62) {
                        break;
                      }
                      v62 -= 48;
                      if (v60 >= *((double *)v63 - 5))
                      {
                        uint64_t v65 = v10 + v62 + 48;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = *(_OWORD *)v111;
                    *(_OWORD *)(v65 + 27) = *(_OWORD *)&v111[11];
                  }
                  BOOL v54 = v59 + 3;
                  v57 += 48;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 3 != a2);
              }
            }
            else if (!v56)
            {
              do
              {
                unint64_t v98 = v54;
                double v99 = *(double *)(a1 + 56);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *(void *)v54;
                  *(_OWORD *)unint64_t v114 = *(_OWORD *)(a1 + 64);
                  *(_OWORD *)&v114[16] = *(_OWORD *)(a1 + 80);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(v101 - 2);
                    *long long v101 = *(v101 - 3);
                    v101[1] = v102;
                    *(long long *)((char *)v101 + 27) = *(long long *)((char *)v101 - 21);
                    double v103 = *((double *)v101 - 11);
                    v101 -= 3;
                  }
                  while (v99 < v103);
                  *(void *)long long v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *(long long *)((char *)v101 + 27) = *(_OWORD *)&v114[11];
                  v101[1] = *(_OWORD *)v114;
                }
                v54 += 3;
                a1 = (unint64_t)v98;
              }
              while (v98 + 3 != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((long long *)v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 48 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v70 + 8) < *(double *)(v70 + 56))
                  {
                    v70 += 48;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  unint64_t v71 = v10 + 48 * v68;
                  double v72 = *(double *)(v71 + 8);
                  if (*(double *)(v70 + 8) >= v72)
                  {
                    uint64_t v73 = *(void *)v71;
                    *(_OWORD *)BOOL v112 = *(_OWORD *)(v71 + 16);
                    *(_OWORD *)&v112[16] = *(_OWORD *)(v71 + 32);
                    do
                    {
                      uint64_t v74 = (_OWORD *)v71;
                      unint64_t v71 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_OWORD *)((char *)v74 + 27) = *(_OWORD *)(v70 + 27);
                      *uint64_t v74 = v75;
                      v74[1] = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = 2 * v69;
                      uint64_t v69 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 48 * v69;
                      uint64_t v78 = v77 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v70 + 8) < *(double *)(v70 + 56))
                      {
                        v70 += 48;
                        uint64_t v69 = v78;
                      }
                    }
                    while (*(double *)(v70 + 8) >= v72);
                    *(void *)unint64_t v71 = v73;
                    *(double *)(v71 + 8) = v72;
                    *(_OWORD *)(v71 + 16) = *(_OWORD *)v112;
                    *(_OWORD *)(v71 + 27) = *(_OWORD *)&v112[11];
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x30uLL;
              do
              {
                uint64_t v80 = 0;
                *(_OWORD *)uint64_t v119 = *(_OWORD *)(v10 + 16);
                *(_OWORD *)&v119[16] = *(_OWORD *)(v10 + 32);
                long long v113 = *(_OWORD *)v10;
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = (_OWORD *)v81;
                  v81 += 48 * v80 + 48;
                  uint64_t v83 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v84 = v83 + 2;
                  if (v84 < v79 && *(double *)(v81 + 8) < *(double *)(v81 + 56))
                  {
                    v81 += 48;
                    uint64_t v80 = v84;
                  }
                  long long v85 = *(_OWORD *)v81;
                  long long v86 = *(_OWORD *)(v81 + 16);
                  *(_OWORD *)((char *)v82 + 27) = *(_OWORD *)(v81 + 27);
                  _OWORD *v82 = v85;
                  v82[1] = v86;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 3;
                if ((long long *)v81 == a2)
                {
                  *(_OWORD *)(v81 + 27) = *(_OWORD *)&v119[11];
                  *(_OWORD *)unint64_t v81 = v113;
                  *(_OWORD *)(v81 + 16) = *(_OWORD *)v119;
                }
                else
                {
                  long long v87 = *a2;
                  long long v88 = a2[1];
                  *(_OWORD *)(v81 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v81 = v87;
                  *(_OWORD *)(v81 + 16) = v88;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v119[11];
                  *a2 = v113;
                  a2[1] = *(_OWORD *)v119;
                  uint64_t v89 = v81 - v10 + 48;
                  if (v89 >= 49)
                  {
                    unint64_t v90 = (v89 / 0x30uLL - 2) >> 1;
                    unint64_t v91 = v10 + 48 * v90;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      *(_OWORD *)unint64_t v106 = *(_OWORD *)(v81 + 16);
                      *(_OWORD *)&v106[16] = *(_OWORD *)(v81 + 32);
                      do
                      {
                        double v94 = (_OWORD *)v81;
                        unint64_t v81 = v91;
                        long long v95 = *(_OWORD *)v91;
                        long long v96 = *(_OWORD *)(v91 + 16);
                        *(_OWORD *)((char *)v94 + 27) = *(_OWORD *)(v91 + 27);
                        _OWORD *v94 = v95;
                        v94[1] = v96;
                        if (!v90) {
                          break;
                        }
                        unint64_t v90 = (v90 - 1) >> 1;
                        unint64_t v91 = v10 + 48 * v90;
                      }
                      while (*(double *)(v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_OWORD *)(v81 + 16) = *(_OWORD *)v106;
                      *(_OWORD *)(v81 + 27) = *(_OWORD *)&v106[11];
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (long long *)(v10 + 48 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v12 >> 1)), a2 - 3);
            uint64_t v15 = 3 * v13;
            long long v16 = (long long *)(a1 + 48 * v13 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48), v16, a2 - 6);
            long long v17 = (long long *)(a1 + 48 + 16 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 96), v17, a2 - 9);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v16, v14, v17);
            *(_OWORD *)unint64_t v115 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v115[16] = *(_OWORD *)(a1 + 32);
            long long v107 = *(_OWORD *)a1;
            long long v18 = *(long long *)((char *)v14 + 27);
            long long v19 = v14[1];
            *(_OWORD *)a1 = *v14;
            *(_OWORD *)(a1 + 16) = v19;
            *(_OWORD *)(a1 + 27) = v18;
            *(long long *)((char *)v14 + 27) = *(_OWORD *)&v115[11];
            *uint64_t v14 = v107;
            v14[1] = *(_OWORD *)v115;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48 * (v12 >> 1)), (long long *)a1, a2 - 3);
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 40) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          *(_OWORD *)unint64_t v105 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)&v105[16] = *(_OWORD *)(a1 + 32);
          if (v20 >= *((double *)a2 - 5))
          {
            unint64_t v41 = a1 + 48;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= (unint64_t)a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 48;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 48;
              double v40 = *(double *)(v39 + 56);
              v39 += 48;
            }
            while (v20 >= v40);
          }
          uint64_t v43 = a2;
          if (v10 < (unint64_t)a2)
          {
            long long v44 = a2;
            do
            {
              uint64_t v43 = v44 - 3;
              double v45 = *((double *)v44 - 5);
              v44 -= 3;
            }
            while (v20 < v45);
          }
          while (v10 < (unint64_t)v43)
          {
            *(_OWORD *)uint64_t v117 = *(_OWORD *)(v10 + 16);
            *(_OWORD *)&v117[16] = *(_OWORD *)(v10 + 32);
            long long v109 = *(_OWORD *)v10;
            long long v46 = *v43;
            long long v47 = v43[1];
            *(_OWORD *)(v10 + 27) = *(long long *)((char *)v43 + 27);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(long long *)((char *)v43 + 27) = *(_OWORD *)&v117[11];
            *uint64_t v43 = v109;
            v43[1] = *(_OWORD *)v117;
            do
            {
              double v48 = *(double *)(v10 + 56);
              v10 += 48;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *((double *)v43 - 5);
              v43 -= 3;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 48 >= a1;
          BOOL v5 = v10 - 48 == a1;
          if (v10 - 48 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 48);
            long long v51 = *(_OWORD *)(v10 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v10 - 21);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 48) = v38;
          *(double *)(v10 - 40) = v20;
          *(_OWORD *)(v10 - 21) = *(_OWORD *)&v105[11];
          *(_OWORD *)(v10 - 32) = *(_OWORD *)v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        *(_OWORD *)uint64_t v104 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v104[16] = *(_OWORD *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 56);
          v21 += 48;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        uint64_t v25 = a2;
        if (v21 == 48)
        {
          long long v28 = a2;
          while (v24 < (unint64_t)v28)
          {
            uint64_t v26 = v28 - 3;
            double v29 = *((double *)v28 - 5);
            v28 -= 3;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          uint64_t v26 = v28;
        }
        else
        {
          do
          {
            uint64_t v26 = v25 - 3;
            double v27 = *((double *)v25 - 5);
            v25 -= 3;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < (unint64_t)v26)
        {
          unint64_t v30 = v26;
          do
          {
            *(_OWORD *)uint64_t v116 = *(_OWORD *)(v10 + 16);
            *(_OWORD *)&v116[16] = *(_OWORD *)(v10 + 32);
            long long v108 = *(_OWORD *)v10;
            long long v31 = *v30;
            long long v32 = v30[1];
            *(_OWORD *)(v10 + 27) = *(long long *)((char *)v30 + 27);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(long long *)((char *)v30 + 27) = *(_OWORD *)&v116[11];
            *unint64_t v30 = v108;
            v30[1] = *(_OWORD *)v116;
            do
            {
              double v33 = *(double *)(v10 + 56);
              v10 += 48;
            }
            while (v33 < v20);
            do
            {
              double v34 = *((double *)v30 - 5);
              v30 -= 3;
            }
            while (v34 >= v20);
          }
          while (v10 < (unint64_t)v30);
        }
        if (v10 - 48 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 48);
          long long v36 = *(_OWORD *)(v10 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v10 - 21);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 48) = v22;
        *(double *)(v10 - 40) = v20;
        *(_OWORD *)(v10 - 21) = *(_OWORD *)&v104[11];
        *(_OWORD *)(v10 - 32) = *(_OWORD *)v104;
        if (v24 >= (unint64_t)v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(a1, v10 - 48, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, v10 - 48);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder*>(v10, (uint64_t)a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = (long long *)(v10 - 48);
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 40) < *(double *)(a1 + 8))
      {
        long long v6 = *(_OWORD *)a1;
        *(_OWORD *)double v20 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v20[16] = *(_OWORD *)(a1 + 32);
        long long v7 = *(_OWORD *)(a2 - 21);
        long long v8 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 27) = v7;
        *(_OWORD *)(a2 - 48) = v6;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v20;
        *(_OWORD *)(a2 - 21) = *(_OWORD *)&v20[11];
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48);
      return 1;
    default:
      uint64_t v9 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96));
      uint64_t v10 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    double v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      uint64_t v14 = *(void *)v10;
      *(_OWORD *)long long v19 = *(_OWORD *)(v10 + 16);
      *(_OWORD *)&v19[16] = *(_OWORD *)(v10 + 32);
      uint64_t v15 = v11;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        long long v17 = *(_OWORD *)(a1 + v15 + 112);
        *(_OWORD *)(v16 + 144) = *(_OWORD *)(a1 + v15 + 96);
        *(_OWORD *)(v16 + 160) = v17;
        *(_OWORD *)(v16 + 171) = *(_OWORD *)(a1 + v15 + 123);
        if (v15 == -96) {
          break;
        }
        v15 -= 48;
        if (v13 >= *(double *)(v16 + 56))
        {
          uint64_t v18 = a1 + v15 + 144;
          goto LABEL_12;
        }
      }
      uint64_t v18 = a1;
LABEL_12:
      *(void *)uint64_t v18 = v14;
      *(double *)(v18 + 8) = v13;
      *(_OWORD *)(v18 + 16) = *(_OWORD *)v19;
      *(_OWORD *)(v18 + 27) = *(_OWORD *)&v19[11];
      if (++v12 == 8) {
        return v10 + 48 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 48;
    v10 += 48;
    if (v10 == a2) {
      return 1;
    }
  }
}

double HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::overallStatistics(double *a1, uint64_t a2)
{
  HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)a1, (const HDStatisticsNoiseLevel *)(a2 + 120));
  v4[13] = 0;
  v4 += 13;
  BOOL v5 = *(const void **)(a2 + 224);
  *(v4 - 1) = *(void *)(a2 + 216);
  v4[1] = 0;
  v4[2] = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v4, v5, *(void *)(a2 + 232), (uint64_t)(*(void *)(a2 + 232) - (void)v5) >> 4);
  double result = *(double *)(a2 + 248);
  a1[16] = result;
  return result;
}

void sub_1BD0F73F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  double v3 = *(void **)(a2 + 256);
  long long v46 = (void *)(a2 + 264);
  if (v3 == (void *)(a2 + 264)) {
    return;
  }
  double v48 = (void *)(a1 + 16);
  do
  {
    BOOL v5 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a2, v3[4]);
    long long v6 = v5;
    if (!v5) {
      goto LABEL_80;
    }
    unint64_t v7 = [v5 hash];
    unint64_t v8 = v7;
    unint64_t v9 = *(void *)(a1 + 8);
    if (!v9) {
      goto LABEL_21;
    }
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v49 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v2 = v7;
      if (v7 >= v9) {
        unint64_t v2 = v7 % v9;
      }
    }
    else
    {
      unint64_t v2 = (v9 - 1) & v7;
    }
    uint64_t v11 = *(uint64_t ***)(*(void *)a1 + 8 * v2);
    if (!v11 || (int v12 = *v11) == 0)
    {
LABEL_21:
      long long v19 = (char *)operator new(0xA0uLL);
      v50[0] = v19;
      v50[1] = v48;
      char v51 = 0;
      *(void *)long long v19 = 0;
      *((void *)v19 + 1) = v8;
      *((void *)v19 + 2) = v6;
      *(_OWORD *)(v19 + 24) = 0u;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      *(_OWORD *)(v19 + 104) = 0u;
      *(_OWORD *)(v19 + 120) = 0u;
      *(_OWORD *)(v19 + 136) = 0u;
      *((void *)v19 + 19) = 0;
      *((void *)v19 + 13) = [[HDQuantitySampleOverlapProcessor alloc] initWithOverlapFunction:1];
      *((_WORD *)v19 + 56) = 257;
      *(_OWORD *)(v19 + 120) = 0u;
      *(_OWORD *)(v19 + 136) = 0u;
      *((void *)v19 + 19) = 0;
      char v51 = 1;
      float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v21 = *(float *)(a1 + 32);
      if (v9 && (float)(v21 * (float)v9) >= v20)
      {
LABEL_67:
        BOOL v37 = *(void **)(*(void *)a1 + 8 * v2);
        int v12 = (uint64_t *)v50[0];
        if (v37)
        {
          *(void *)v50[0] = *v37;
        }
        else
        {
          *(void *)v50[0] = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = v12;
          *(void *)(*(void *)a1 + 8 * v2) = v48;
          if (!*v12)
          {
LABEL_76:
            v50[0] = 0;
            ++*(void *)(a1 + 24);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v50);
            goto LABEL_77;
          }
          unint64_t v38 = *(void *)(*v12 + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v38 >= v9) {
              v38 %= v9;
            }
          }
          else
          {
            v38 &= v9 - 1;
          }
          BOOL v37 = (void *)(*(void *)a1 + 8 * v38);
        }
        *BOOL v37 = v12;
        goto LABEL_76;
      }
      BOOL v22 = (v9 & (v9 - 1)) != 0;
      if (v9 < 3) {
        BOOL v22 = 1;
      }
      unint64_t v23 = v22 | (2 * v9);
      unint64_t v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      else {
        int8x8_t prime = (int8x8_t)v23;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v9 = *(void *)(a1 + 8);
      if (*(void *)&prime > v9) {
        goto LABEL_33;
      }
      if (*(void *)&prime < v9)
      {
        unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          unint64_t v32 = std::__next_prime(v32);
        }
        else
        {
          uint64_t v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2) {
            unint64_t v32 = v34;
          }
        }
        if (*(void *)&prime <= v32) {
          int8x8_t prime = (int8x8_t)v32;
        }
        if (*(void *)&prime >= v9)
        {
          unint64_t v9 = *(void *)(a1 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v26 = operator new(8 * *(void *)&prime);
            double v27 = *(void **)a1;
            *(void *)a1 = v26;
            if (v27) {
              operator delete(v27);
            }
            uint64_t v28 = 0;
            *(int8x8_t *)(a1 + 8) = prime;
            do
              *(void *)(*(void *)a1 + 8 * v28++) = 0;
            while (*(void *)&prime != v28);
            double v29 = (void *)*v48;
            if (*v48)
            {
              unint64_t v30 = v29[1];
              uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(void *)&prime) {
                  v30 %= *(void *)&prime;
                }
              }
              else
              {
                v30 &= *(void *)&prime - 1;
              }
              *(void *)(*(void *)a1 + 8 * v30) = v48;
              long long v35 = (void *)*v29;
              if (*v29)
              {
                do
                {
                  unint64_t v36 = v35[1];
                  if (v31.u32[0] > 1uLL)
                  {
                    if (v36 >= *(void *)&prime) {
                      v36 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v36 &= *(void *)&prime - 1;
                  }
                  if (v36 != v30)
                  {
                    if (!*(void *)(*(void *)a1 + 8 * v36))
                    {
                      *(void *)(*(void *)a1 + 8 * v36) = v29;
                      goto LABEL_58;
                    }
                    void *v29 = *v35;
                    *long long v35 = **(void **)(*(void *)a1 + 8 * v36);
                    **(void **)(*(void *)a1 + 8 * v36) = v35;
                    long long v35 = v29;
                  }
                  unint64_t v36 = v30;
LABEL_58:
                  double v29 = v35;
                  long long v35 = (void *)*v35;
                  unint64_t v30 = v36;
                }
                while (v35);
              }
            }
            unint64_t v9 = (unint64_t)prime;
            goto LABEL_62;
          }
          double v45 = *(void **)a1;
          *(void *)a1 = 0;
          if (v45) {
            operator delete(v45);
          }
          unint64_t v9 = 0;
          *(void *)(a1 + 8) = 0;
        }
      }
LABEL_62:
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v8 >= v9) {
          unint64_t v2 = v8 % v9;
        }
        else {
          unint64_t v2 = v8;
        }
      }
      else
      {
        unint64_t v2 = (v9 - 1) & v8;
      }
      goto LABEL_67;
    }
    while (1)
    {
      unint64_t v13 = v12[1];
      if (v13 == v8) {
        break;
      }
      if (v49 > 1)
      {
        if (v13 >= v9) {
          v13 %= v9;
        }
      }
      else
      {
        v13 &= v9 - 1;
      }
      if (v13 != v2) {
        goto LABEL_21;
      }
LABEL_20:
      int v12 = (uint64_t *)*v12;
      if (!v12) {
        goto LABEL_21;
      }
    }
    unint64_t v14 = v8;
    id v15 = (id)v12[2];
    id v16 = v6;
    long long v17 = v16;
    if (v15 != v16)
    {
      char v18 = [v15 isEqualToString:v16];

      unint64_t v8 = v14;
      if (v18) {
        goto LABEL_77;
      }
      goto LABEL_20;
    }

LABEL_77:
    unint64_t v2 = (unint64_t)(v12 + 2);
    *(_OWORD *)(v12 + 3) = *(_OWORD *)(v3 + 5);
    long long v39 = *(_OWORD *)(v3 + 7);
    long long v40 = *(_OWORD *)(v3 + 9);
    long long v41 = *(_OWORD *)(v3 + 11);
    *(_OWORD *)((char *)v12 + 82) = *(_OWORD *)((char *)v3 + 98);
    *(_OWORD *)(v12 + 9) = v41;
    *(_OWORD *)(v12 + 7) = v40;
    *(_OWORD *)(v12 + 5) = v39;
    objc_storeStrong((id *)v12 + 13, (id)v3[15]);
    *((_WORD *)v12 + 56) = *((_WORD *)v3 + 64);
    v12[15] = v3[17];
    if (v12 + 2 != v3 + 4) {
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)v12 + 128, (char *)v3[18], v3[19], (uint64_t)(v3[19] - v3[18]) >> 4);
    }
    v12[19] = v3[21];

LABEL_80:
    double v42 = (void *)v3[1];
    if (v42)
    {
      do
      {
        uint64_t v43 = v42;
        double v42 = (void *)*v42;
      }
      while (v42);
    }
    else
    {
      do
      {
        uint64_t v43 = (void *)v3[2];
        BOOL v44 = *v43 == (void)v3;
        double v3 = v43;
      }
      while (!v44);
    }
    double v3 = v43;
  }
  while (v43 != v46);
}

void sub_1BD0F79BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);

  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>::~__hash_table(v6);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,0>(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(void *)(a1 + 120) = v2;
    operator delete(v2);
  }

  double v3 = *(void **)a1;
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      double v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F17249B0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F17249B0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C187B8A0);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0x28uLL);
  *unint64_t v2 = &unk_1F17249B0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BD0F7CA8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F17249B0;
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48))(v1) + 96;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsNoiseLevel const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1724A40;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsNoiseLevel const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1724A40;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C187B8A0);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsNoiseLevel const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0x28uLL);
  *unint64_t v2 = &unk_1F1724A40;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BD0F7F40(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsNoiseLevel const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1724A40;
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsNoiseLevel const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsNoiseLevel const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsNoiseLevel const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  unint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsNoiseLevel const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsNoiseLevel const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsNoiseLevel const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::~__func()
{
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1F1724AD0;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1724AD0;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 616))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a4, 3, @"Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date");
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  }
  double v8 = *(double *)(a2 + 8);
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9)
  {
    if (*(unsigned char *)(a1 + 616))
    {
      double v10 = -1.79769313e308;
    }
    else
    {
      double v10 = *(double *)(a1 + 176);
      double v12 = *(double *)(a1 + 120);
      if (v10 <= v12) {
        double v10 = -1.79769313e308;
      }
      if (v10 < v12) {
        double v10 = *(double *)(a1 + 120);
      }
    }
  }
  else
  {
    double v10 = *(double *)(a1 + 176);
    if (v10 <= *(double *)(a1 + 120)) {
      double v10 = -1.79769313e308;
    }
  }
  if (v10 <= v8)
  {
    if (v9 && a3) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_advanceToTime(a1, v8);
    }
    HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    unint64_t v13 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
    uint64_t v11 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v13, a4);
  }
  return v11;
}

void sub_1BD0F838C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_advanceToTime(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 128) <= a2)
  {
    uint64_t v4 = a1 + 112;
    BOOL v5 = (double *)(a1 + 120);
    do
    {
      uint64_t v6 = *(void *)(a1 + 592);
      uint64_t v7 = *(void *)(a1 + 584);
      if (v6 == v7)
      {
        uint64_t v22 = 0;
        id v15 = *(void **)(a1 + 40);
        id v16 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a2];
        double v8 = [v15 dateIntervalContainingDate:v16 index:&v22];

        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v17 = v22;
        double v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v19 = v18;
        float v20 = [v8 endDate];
        [v20 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::resetToBucket(v4, v17, v19, v21);
      }
      else
      {
        double v8 = [*(id *)(a1 + 40) dateIntervalAtIndex:*(void *)(a1 + 112) + 1];
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        double v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v12 = v11;
        unint64_t v13 = [v8 endDate];
        [v13 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::advanceBucket(v4, v12, v14);
      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_didChangeBucket(a1, v9);
      if (v6 != v7) {
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
      }
    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1BD0F8598(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  char v3 = *(unsigned char *)(a2 + 32);
  if (!v3) {
    return;
  }
  uint64_t v6 = a1 + 8;
  double v7 = *(double *)(a1 + 8);
  double v8 = *(uint64_t **)a2;
  double v9 = *(double *)(a2 + 8);
  double v10 = *(double *)(a2 + 16);
  unint64_t v11 = *(void *)(a2 + 24);
  char v12 = *(unsigned char *)(a2 + 33);
  double v13 = v9;
  if (v9 <= v7)
  {
    double v13 = *(double *)(a1 + 8);
    if (v10 < v7) {
      return;
    }
  }
  if (v10 <= v13) {
    return;
  }
  double v14 = *(double *)(a1 + 16);
  if (v13 <= v14)
  {
    if (v10 >= v14)
    {
      BOOL v15 = v10 > v14;
      unint64_t v16 = *(void *)(a2 + 24);
      double v18 = *(double *)(a2 + 16);
      double v19 = *(double *)(a1 + 16);
      float v20 = *(uint64_t **)a2;
      char v17 = *(unsigned char *)(a2 + 33);
      if (v13 >= v14)
      {
        unint64_t v16 = *(void *)(a2 + 24);
        double v18 = *(double *)(a2 + 16);
        double v19 = *(double *)(a1 + 16);
        float v20 = *(uint64_t **)a2;
        char v17 = *(unsigned char *)(a2 + 33);
        goto LABEL_48;
      }
    }
    else
    {
      BOOL v15 = 0;
      unint64_t v16 = 0;
      char v17 = 0;
      double v18 = 0.0;
      double v14 = *(double *)(a2 + 16);
      double v19 = 0.0;
      float v20 = 0;
    }
    double v60 = v14;
    double v61 = v13;
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 288, v11, v11);
    unint64_t v21 = *(void *)(a1 + 112);
    if (v21 == *(void *)(a1 + 104) && *(uint64_t *)(a1 + 160) <= 0)
    {
      v26.f64[1] = *(float64_t *)(a1 + 16);
      double v23 = v60;
      double v22 = v61;
      v26.f64[0] = v61;
      v27.f64[0] = *(float64_t *)(a1 + 8);
      v27.f64[1] = v60;
      int8x16_t v28 = (int8x16_t)vcgtq_f64(v27, v26);
      v27.f64[0] = v61;
      *(int8x16_t *)(a1 + 48) = vbslq_s8(v28, *(int8x16_t *)(a1 + 8), (int8x16_t)v27);
      if (!a3)
      {
LABEL_25:
        unint64_t v29 = *(void *)(a1 + 120);
        if (v21 >= v29)
        {
          uint64_t v31 = *(void *)(a1 + 104);
          unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - v31) >> 4);
          unint64_t v33 = v32 + 1;
          if (v32 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - v31) >> 4);
          if (2 * v34 > v33) {
            unint64_t v33 = 2 * v34;
          }
          if (v34 >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v35 = 0x555555555555555;
          }
          else {
            unint64_t v35 = v33;
          }
          if (v35)
          {
            unint64_t v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v35);
            double v23 = v60;
            double v22 = v61;
          }
          else
          {
            uint64_t v36 = 0;
          }
          unint64_t v37 = v35 + 48 * v32;
          unint64_t v38 = v35 + 48 * v36;
          *(void *)unint64_t v37 = v8;
          *(double *)(v37 + 8) = v22;
          *(double *)(v37 + 16) = v23;
          *(void *)(v37 + 24) = v11;
          *(unsigned char *)(v37 + 32) = 1;
          *(unsigned char *)(v37 + 33) = v12;
          *(_WORD *)(v37 + 40) = 0;
          *(unsigned char *)(v37 + 42) = 0;
          unint64_t v30 = v37 + 48;
          long long v40 = *(char **)(a1 + 104);
          long long v39 = *(char **)(a1 + 112);
          if (v39 != v40)
          {
            do
            {
              long long v41 = *((_OWORD *)v39 - 3);
              long long v42 = *((_OWORD *)v39 - 2);
              *(_OWORD *)(v37 - 21) = *(_OWORD *)(v39 - 21);
              *(_OWORD *)(v37 - 48) = v41;
              *(_OWORD *)(v37 - 32) = v42;
              v37 -= 48;
              v39 -= 48;
            }
            while (v39 != v40);
            long long v39 = *(char **)(a1 + 104);
          }
          *(void *)(a1 + 104) = v37;
          *(void *)(a1 + 112) = v30;
          *(void *)(a1 + 120) = v38;
          if (v39) {
            operator delete(v39);
          }
        }
        else
        {
          *(void *)unint64_t v21 = v8;
          *(double *)(v21 + 8) = v22;
          *(double *)(v21 + 16) = v23;
          *(void *)(v21 + 24) = v11;
          *(unsigned char *)(v21 + 32) = 1;
          *(unsigned char *)(v21 + 33) = v12;
          *(_WORD *)(v21 + 40) = 0;
          unint64_t v30 = v21 + 48;
          *(unsigned char *)(v21 + 42) = 0;
        }
        *(void *)(a1 + 112) = v30;
        if (!*(unsigned char *)(a1 + 200) || *(double *)(a1 + 176) <= v9)
        {
          *(void *)(a1 + 168) = v8;
          *(double *)(a1 + 176) = v9;
          *(double *)(a1 + 184) = v10;
          *(void *)(a1 + 192) = v11;
          *(unsigned char *)(a1 + 200) = v3;
          *(unsigned char *)(a1 + 201) = v12;
        }
        if (*(unsigned char *)(a1 + 33))
        {
          unint64_t v43 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(v6, v11);
          BOOL v44 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_statisticsForSource(v6, v43);
          if (!*((unsigned char *)v44 + 72) || *((double *)v44 + 6) <= v9)
          {
            v44[5] = v8;
            *((double *)v44 + 6) = v9;
            *((double *)v44 + 7) = v10;
            v44[8] = (uint64_t *)v11;
            *((unsigned char *)v44 + 72) = v3;
            *((unsigned char *)v44 + 73) = v12;
          }
        }
LABEL_48:
        char v12 = v17;
        double v8 = v20;
        double v13 = v19;
        double v10 = v18;
        unint64_t v11 = v16;
        if (!v15) {
          return;
        }
        goto LABEL_49;
      }
    }
    else
    {
      double v23 = v60;
      double v22 = v61;
      if (v61 < *(double *)(a1 + 48))
      {
        double v24 = *(double *)(a1 + 8);
        if (v61 >= v24) {
          double v24 = v61;
        }
        *(double *)(a1 + 48) = v24;
      }
      if (v60 > *(double *)(a1 + 56))
      {
        double v25 = *(double *)(a1 + 16);
        if (v25 >= v60) {
          double v25 = v60;
        }
        *(double *)(a1 + 56) = v25;
      }
      if (!a3) {
        goto LABEL_25;
      }
    }
    if (v22 < *(double *)(a1 + 16))
    {
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_mergeThroughTime(v6, v22);
      double v23 = v60;
      double v22 = v61;
      unint64_t v21 = *(void *)(a1 + 112);
    }
    goto LABEL_25;
  }
  LOBYTE(v15) = 1;
LABEL_49:
  unint64_t v45 = *(void *)(a1 + 480);
  unint64_t v46 = *(void *)(a1 + 488);
  if (v45 >= v46)
  {
    uint64_t v48 = *(void *)(a1 + 472);
    unint64_t v49 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v45 - v48) >> 3);
    unint64_t v50 = v49 + 1;
    if (v49 + 1 > 0x666666666666666) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v51 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v46 - v48) >> 3);
    if (2 * v51 > v50) {
      unint64_t v50 = 2 * v51;
    }
    if (v51 >= 0x333333333333333) {
      unint64_t v52 = 0x666666666666666;
    }
    else {
      unint64_t v52 = v50;
    }
    if (v52)
    {
      double v62 = v13;
      unint64_t v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v52);
      double v13 = v62;
    }
    else
    {
      uint64_t v53 = 0;
    }
    unint64_t v54 = v52 + 40 * v49;
    unint64_t v55 = v52 + 40 * v53;
    *(void *)unint64_t v54 = v8;
    *(double *)(v54 + 8) = v13;
    *(double *)(v54 + 16) = v10;
    *(void *)(v54 + 24) = v11;
    *(unsigned char *)(v54 + 32) = v15;
    *(unsigned char *)(v54 + 33) = v12;
    unint64_t v47 = v54 + 40;
    uint64_t v57 = *(char **)(a1 + 472);
    BOOL v56 = *(char **)(a1 + 480);
    if (v56 != v57)
    {
      do
      {
        long long v58 = *(_OWORD *)(v56 - 40);
        long long v59 = *(_OWORD *)(v56 - 24);
        *(_WORD *)(v54 - 8) = *((_WORD *)v56 - 4);
        *(_OWORD *)(v54 - 24) = v59;
        *(_OWORD *)(v54 - 40) = v58;
        v54 -= 40;
        v56 -= 40;
      }
      while (v56 != v57);
      BOOL v56 = *(char **)(a1 + 472);
    }
    *(void *)(a1 + 472) = v54;
    *(void *)(a1 + 480) = v47;
    *(void *)(a1 + 488) = v55;
    if (v56) {
      operator delete(v56);
    }
  }
  else
  {
    *(void *)unint64_t v45 = v8;
    *(double *)(v45 + 8) = v13;
    *(double *)(v45 + 16) = v10;
    *(void *)(v45 + 24) = v11;
    *(unsigned char *)(v45 + 32) = v15;
    unint64_t v47 = v45 + 40;
    *(unsigned char *)(v45 + 33) = v12;
  }
  *(void *)(a1 + 480) = v47;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 618))
  {
    *(unsigned char *)(a1 + 620) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 620) = 0;
    unint64_t v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      uint64_t v4 = v2;
      char v3 = (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      if (v3) {
        v4[2](v4, v3);
      }

      unint64_t v2 = v4;
    }
  }
}

void sub_1BD0F8B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  double v9 = 0;
  double v10 = 0;
  uint64_t v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 472), *(void *)(a1 + 480), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 480) - *(void *)(a1 + 472)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::resetToBucket(a1, *(void *)a1 + 1, a2, a3);
  uint64_t v6 = v9;
  double v7 = v10;
  if (v9 != v10)
  {
    uint64_t v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BD0F8C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  objc_storeStrong((id *)(a1 + 496), *(id *)(a1 + 40));
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  uint64_t v8 = [[HDQuantitySampleOverlapProcessor alloc] initWithOverlapFunction:1];
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 186) = 0u;
  double v9 = *(void **)(a1 + 208);
  *(void *)(a1 + 208) = v8;
  double v10 = v8;

  uint64_t v11 = *(void **)(a1 + 232);
  *(_WORD *)(a1 + 216) = 257;
  *(void *)(a1 + 224) = 0;
  if (v11)
  {
    *(void *)(a1 + 240) = v11;
    operator delete(v11);
  }
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;

  if (*(void *)(a1 + 280))
  {
    char v12 = *(void **)(a1 + 264);
    uint64_t v13 = *(void *)(a1 + 272);
    *(void *)(a1 + 264) = a1 + 272;
    *(void *)(v13 + 16) = 0;
    *(void *)(a1 + 272) = 0;
    *(void *)(a1 + 280) = 0;
    if (v12[1]) {
      double v14 = (void *)v12[1];
    }
    else {
      double v14 = v12;
    }
    if (v14)
    {
      BOOL v15 = (void *)v14[2];
      if (v15)
      {
        unint64_t v16 = (void *)*v15;
        if ((void *)*v15 == v14)
        {
          *BOOL v15 = 0;
          while (1)
          {
            double v18 = (void *)v15[1];
            if (!v18) {
              break;
            }
            do
            {
              BOOL v15 = v18;
              double v18 = (void *)*v18;
            }
            while (v18);
          }
        }
        else
        {
          for (v15[1] = 0; v16; unint64_t v16 = (void *)v15[1])
          {
            do
            {
              BOOL v15 = v16;
              unint64_t v16 = (void *)*v16;
            }
            while (v16);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>::destroy(v14);
        for (double i = (void *)v15[2]; i; double i = (void *)i[2])
          BOOL v15 = i;
        double v14 = v15;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>::destroy(v14);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::setStatisticsConfiguration(a1 + 8, *(void **)(a1 + 496));
  *(void *)(a1 + 480) = *(void *)(a1 + 472);
  *(void *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 620))
  {
    if (v3)
    {
      id v6 = v3;
      uint64_t v4 = _Block_copy(*(const void **)(a1 + 96));
      BOOL v5 = v4;
      if (v4) {
        (*((void (**)(void *, id))v4 + 2))(v4, v6);
      }

      id v3 = v6;
    }
    *(unsigned char *)(a1 + 620) = 0;
  }
}

void sub_1BD0F8E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  BOOL v5 = [a2 startDate];
  id v6 = [v4 startDate];
  uint64_t v7 = [v5 compare:v6];

  return v7;
}

void sub_1BD0F8ECC(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 13);
  if (WeakRetained)
  {
    if (v5
      && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_currentBucketInterval((uint64_t)a1),
          (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v8 = [v5 endDate];
      double v9 = [v7 startDate];
      if (objc_msgSend(v8, "hk_isAfterDate:", v9))
      {
        double v10 = [v5 startDate];
        uint64_t v11 = [v7 endDate];
        char v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);
      }
      else
      {
        char v12 = 0;
      }

      uint64_t v13 = _Block_copy(a1[12]);
      if ((v12 & 1) == 0) {
        operator new();
      }
    }
    else
    {
      uint64_t v13 = _Block_copy(a1[12]);
    }
    *((unsigned char *)a1 + 616) = 1;
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
    v27[3] = &unk_1E6308FF8;
    id v15 = v5;
    id v28 = v15;
    id v16 = v13;
    id v29 = v16;
    (*((void (**)(id *, void *))*a1 + 9))(a1, v27);
    if (v5)
    {
      char v17 = [v15 startDate];
      [v17 timeIntervalSinceReferenceDate];
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_configureForStartTime((uint64_t)a1);
    }
    else
    {
      (*((void (**)(id *))*a1 + 4))(a1);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
    v21[3] = &unk_1E6309060;
    double v24 = a1;
    id v5 = v15;
    char v26 = 1;
    id v22 = v5;
    double v25 = a1;
    id v23 = WeakRetained;
    uint64_t v14 = (*((uint64_t (**)(id *, void *, uint64_t))*a1 + 14))(a1, v21, a3);
    double v18 = _Block_copy(v16);
    id v19 = a1[12];
    a1[12] = v18;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to invalidate interval: no data source available.");
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1BD0F931C(_Unwind_Exception *a1)
{
  MEMORY[0x1C187B8A0](v4, 0x10F1C40067036FCLL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_11;
  }
  id v3 = [v10 endDate];
  uint64_t v4 = [*(id *)(a1 + 32) startDate];
  char v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    id v6 = [v10 startDate];
    uint64_t v7 = [*(id *)(a1 + 32) endDate];
    char v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_11:
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9) {
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
      }
    }
  }
}

void sub_1BD0F9500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = [*(id *)(a1 + 32) startDate];
  [v5 timeIntervalSinceReferenceDate];
  uint64_t v7 = v6;

  char v8 = [*(id *)(a1 + 32) endDate];
  [v8 timeIntervalSinceReferenceDate];
  uint64_t v10 = v9;

  uint64_t v11 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  uint64_t v13 = *(void *)(a1 + 32);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  void v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  char v32 = *(unsigned char *)(a1 + 64);
  void v30[4] = v7;
  v30[5] = v10;
  uint64_t v31 = *(void *)(a1 + 56);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  void v29[4] = v31;
  uint64_t v14 = [v11 collectionCalculator:WeakRetained queryForInterval:v13 error:a2 sampleHandler:v30 mergeHandler:v29];

  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15 != v4)
    {
      id v16 = [*(id *)(a1 + 32) endDate];
      [v16 timeIntervalSinceReferenceDate];
      if (*(void *)(v15 + 40))
      {
        double v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          id v19 = [*(id *)(v15 + 40) dateIntervalAtIndex:*(void *)(v15 + 112) + 1];
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          float v20 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(v15, (double *)(v15 + 120));
          unint64_t v21 = [v19 startDate];
          [v21 timeIntervalSinceReferenceDate];
          double v23 = v22;
          double v24 = [v19 endDate];
          [v24 timeIntervalSinceReferenceDate];
          HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            char v26 = _Block_copy(*(const void **)(v15 + 96));
            float64x2_t v27 = v26;
            if (v26) {
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);
            }
          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_didChangeBucket(v15, 0);
        }
      }
    }
  }
  return v14;
}

void sub_1BD0F97AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7 = *(double *)(a1 + 32);
  if (v7 >= a6)
  {
    if (v7 <= a7)
    {
      BOOL v8 = v7 < a7;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      BOOL v8 = 0;
      a5 = 0.0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    BOOL v8 = a7 > a6;
  }
  double v12 = a5;
  double v13 = a6;
  double v14 = a7;
  uint64_t v15 = a2;
  BOOL v16 = v8;
  char v17 = 0;
  int v9 = *(unsigned __int8 *)(a1 + 56);
  if (*(unsigned char *)(a1 + 56))
  {
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v12, a3, a4);
    }
  }
  else
  {
    if (v8)
    {
      double v11 = *(double *)(a1 + 40);
      if (a6 <= v11)
      {
        if (a7 >= v11)
        {
          int v9 = a6 < v11;
          a7 = *(double *)(a1 + 40);
        }
        else
        {
          int v9 = a7 > a6;
        }
      }
    }
    double v13 = a6;
    double v14 = a7;
    BOOL v16 = v9;
    if (v9) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v12, a3, a4);
    }
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 616)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  }
  if (*(void *)(a1 + 40)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_advanceToTime(a1, a2);
  }
  if (*(double *)(a1 + 128) > a2)
  {
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 32) < *(double *)(v10 + 8))
                {
                  uint64_t v129 = *(void *)(v10 + 32);
                  long long v113 = *(_OWORD *)v10;
                  long long v121 = *(_OWORD *)(v10 + 16);
                  long long v52 = *(_OWORD *)(a2 - 40);
                  long long v53 = *(_OWORD *)(a2 - 24);
                  *(_WORD *)(v10 + 32) = *(_WORD *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(_WORD *)(a2 - 8) = v129;
                  *(_OWORD *)(a2 - 24) = v121;
                  *(_OWORD *)(a2 - 40) = v113;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v10, (double *)(v10 + 40), (double *)(a2 - 40));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, v10 + 120, a2 - 40);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            unint64_t v54 = (void *)(v10 + 40);
            BOOL v56 = v10 == a2 || v54 == (void *)a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  long long v59 = v54;
                  double v60 = *(double *)(v58 + 48);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *v54;
                    long long v114 = *(_OWORD *)(v58 + 56);
                    uint64_t v122 = *(void *)(v58 + 72);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      uint64_t v63 = v10 + v62;
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      *(_OWORD *)(v63 + 40) = *(_OWORD *)(v10 + v62);
                      *(_OWORD *)(v63 + 56) = v64;
                      *(_WORD *)(v63 + 72) = *(_WORD *)(v10 + v62 + 32);
                      if (!v62) {
                        break;
                      }
                      v62 -= 40;
                      if (v60 >= *(double *)(v63 - 32))
                      {
                        uint64_t v65 = v10 + v62 + 40;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = v114;
                    *(_WORD *)(v65 + 32) = v122;
                  }
                  unint64_t v54 = v59 + 5;
                  v57 += 40;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 5 != (void *)a2);
              }
            }
            else if (!v56)
            {
              do
              {
                unint64_t v98 = v54;
                double v99 = *(double *)(a1 + 48);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *v54;
                  long long v117 = *(_OWORD *)(a1 + 56);
                  uint64_t v125 = *(void *)(a1 + 72);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(_OWORD *)(v101 - 3);
                    *(_OWORD *)long long v101 = *(_OWORD *)(v101 - 5);
                    *((_OWORD *)v101 + 1) = v102;
                    *((_WORD *)v101 + 16) = *((_WORD *)v101 - 4);
                    double v103 = *((double *)v101 - 9);
                    v101 -= 5;
                  }
                  while (v99 < v103);
                  *long long v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *((_WORD *)v101 + 16) = v125;
                  *((_OWORD *)v101 + 1) = v117;
                }
                v54 += 5;
                a1 = (unint64_t)v98;
              }
              while (v98 + 5 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 40 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v10 + 40 * v69 + 8) < *(double *)(v70 + 48))
                  {
                    v70 += 40;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  double v71 = *(double *)(v10 + 40 * v68 + 8);
                  if (*(double *)(v70 + 8) >= v71)
                  {
                    unint64_t v72 = v10 + 40 * v68;
                    uint64_t v73 = *(void *)v72;
                    uint64_t v123 = *(void *)(v72 + 32);
                    long long v115 = *(_OWORD *)(v72 + 16);
                    do
                    {
                      unint64_t v74 = v72;
                      unint64_t v72 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_WORD *)(v74 + 32) = *(_WORD *)(v70 + 32);
                      *(_OWORD *)unint64_t v74 = v75;
                      *(_OWORD *)(v74 + 16) = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 40 * v77;
                      uint64_t v78 = 2 * v69 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v10 + 40 * v77 + 8) < *(double *)(v70 + 48))
                      {
                        v70 += 40;
                        uint64_t v77 = v78;
                      }
                      uint64_t v69 = v77;
                    }
                    while (*(double *)(v70 + 8) >= v71);
                    *(void *)unint64_t v72 = v73;
                    *(double *)(v72 + 8) = v71;
                    *(_OWORD *)(v72 + 16) = v115;
                    *(_WORD *)(v72 + 32) = v123;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x28uLL;
              do
              {
                uint64_t v80 = 0;
                uint64_t v130 = *(void *)(v10 + 32);
                long long v116 = *(_OWORD *)v10;
                long long v124 = *(_OWORD *)(v10 + 16);
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = v81;
                  uint64_t v83 = v80 + 1;
                  v81 += 40 * (v80 + 1);
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v85 = v84 + 2;
                  if (v85 < v79 && *(double *)(v82 + 40 * v83 + 8) < *(double *)(v81 + 48))
                  {
                    v81 += 40;
                    uint64_t v80 = v85;
                  }
                  long long v86 = *(_OWORD *)v81;
                  long long v87 = *(_OWORD *)(v81 + 16);
                  *(_WORD *)(v82 + 32) = *(_WORD *)(v81 + 32);
                  *(_OWORD *)unint64_t v82 = v86;
                  *(_OWORD *)(v82 + 16) = v87;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 40;
                if (v81 == a2)
                {
                  *(_WORD *)(v81 + 32) = v130;
                  *(_OWORD *)unint64_t v81 = v116;
                  *(_OWORD *)(v81 + 16) = v124;
                }
                else
                {
                  long long v88 = *(_OWORD *)a2;
                  long long v89 = *(_OWORD *)(a2 + 16);
                  *(_WORD *)(v81 + 32) = *(_WORD *)(a2 + 32);
                  *(_OWORD *)unint64_t v81 = v88;
                  *(_OWORD *)(v81 + 16) = v89;
                  *(_WORD *)(a2 + 32) = v130;
                  *(_OWORD *)a2 = v116;
                  *(_OWORD *)(a2 + 16) = v124;
                  uint64_t v90 = v81 - v10 + 40;
                  if (v90 >= 41)
                  {
                    unint64_t v91 = (v90 / 0x28uLL - 2) >> 1;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v10 + 40 * v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      uint64_t v109 = *(void *)(v81 + 32);
                      long long v106 = *(_OWORD *)(v81 + 16);
                      do
                      {
                        unint64_t v94 = v81;
                        unint64_t v81 = v10 + 40 * v91;
                        long long v95 = *(_OWORD *)v81;
                        long long v96 = *(_OWORD *)(v81 + 16);
                        *(_WORD *)(v94 + 32) = *(_WORD *)(v81 + 32);
                        *(_OWORD *)unint64_t v94 = v95;
                        *(_OWORD *)(v94 + 16) = v96;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 40 * v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_WORD *)(v81 + 32) = v109;
                      *(_OWORD *)(v81 + 16) = v106;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40 * (v12 >> 1)), (double *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            BOOL v16 = (double *)(a1 + 40 * v13 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40), v16, (double *)(a2 - 80));
            char v17 = (double *)(a1 + 40 + 8 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 80), v17, (double *)(a2 - 120));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v16, (double *)v14, v17);
            uint64_t v126 = *(void *)(a1 + 32);
            long long v110 = *(_OWORD *)a1;
            long long v118 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 16) = v19;
            *(_WORD *)(v14 + 32) = v126;
            *(_OWORD *)unint64_t v14 = v110;
            *(_OWORD *)(v14 + 16) = v118;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40 * (v12 >> 1)), (double *)a1, (double *)(a2 - 40));
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 32) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          long long v105 = *(_OWORD *)(a1 + 16);
          uint64_t v108 = *(void *)(a1 + 32);
          if (v20 >= *(double *)(a2 - 32))
          {
            unint64_t v41 = a1 + 40;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 40;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 40;
              double v40 = *(double *)(v39 + 48);
              v39 += 40;
            }
            while (v20 >= v40);
          }
          unint64_t v43 = a2;
          if (v10 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              unint64_t v43 = v44 - 40;
              double v45 = *(double *)(v44 - 32);
              v44 -= 40;
            }
            while (v20 < v45);
          }
          while (v10 < v43)
          {
            uint64_t v128 = *(void *)(v10 + 32);
            long long v112 = *(_OWORD *)v10;
            long long v120 = *(_OWORD *)(v10 + 16);
            long long v46 = *(_OWORD *)v43;
            long long v47 = *(_OWORD *)(v43 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v43 + 32);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(_WORD *)(v43 + 32) = v128;
            *(_OWORD *)unint64_t v43 = v112;
            *(_OWORD *)(v43 + 16) = v120;
            do
            {
              double v48 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *(double *)(v43 - 32);
              v43 -= 40;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 40);
            long long v51 = *(_OWORD *)(v10 - 24);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 40) = v38;
          *(double *)(v10 - 32) = v20;
          *(_WORD *)(v10 - 8) = v108;
          *(_OWORD *)(v10 - 24) = v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        long long v104 = *(_OWORD *)(a1 + 16);
        uint64_t v107 = *(void *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 48);
          v21 += 40;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        unint64_t v25 = a2;
        if (v21 == 40)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 40;
            double v29 = *(double *)(v28 - 32);
            v28 -= 40;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 40;
            double v27 = *(double *)(v25 - 32);
            v25 -= 40;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v127 = *(void *)(v10 + 32);
            long long v111 = *(_OWORD *)v10;
            long long v119 = *(_OWORD *)(v10 + 16);
            long long v31 = *(_OWORD *)v30;
            long long v32 = *(_OWORD *)(v30 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v30 + 32);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(_WORD *)(v30 + 32) = v127;
            *(_OWORD *)unint64_t v30 = v111;
            *(_OWORD *)(v30 + 16) = v119;
            do
            {
              double v33 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v33 < v20);
            do
            {
              double v34 = *(double *)(v30 - 32);
              v30 -= 40;
            }
            while (v34 >= v20);
          }
          while (v10 < v30);
        }
        if (v10 - 40 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 40);
          long long v36 = *(_OWORD *)(v10 - 24);
          *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 40) = v22;
        *(double *)(v10 - 32) = v20;
        *(_WORD *)(v10 - 8) = v107;
        *(_OWORD *)(v10 - 24) = v104;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 40;
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        __int16 v9 = *(_WORD *)(a2 - 8);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      uint64_t v16 = *(void *)v12;
      long long v21 = *(_OWORD *)(v12 + 16);
      uint64_t v22 = *(void *)(v12 + 32);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(void *)uint64_t v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(void *a1, uint64_t a2)
{
  id v3 = (void *)a1[5];
  uint64_t v4 = a1[6];
  BOOL v5 = (void *)a1[4];
  uint64_t v6 = [v5 dateInterval];
  void v9[4] = v4;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  uint64_t v7 = [v3 collectionCalculator:v5 queryForInterval:v6 error:a2 sampleHandler:v10 mergeHandler:v9];

  return v7;
}

void sub_1BD0FA52C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10 = *(void *)(a1 + 32);
  *(double *)int v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&_OWORD v14[2] = a7;
  v14[3] = a2;
  char v15 = 1;
  uint64_t v11 = [MEMORY[0x1E4F1C9C8] distantFuture];
  [v11 timeIntervalSinceReferenceDate];
  BOOL v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1BD0FA5D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6 = a3;
  uint64_t v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = &unk_1F1724B80;
  double v9 = 900.0;
  if ((v6 & 0x10) == 0) {
    double v9 = 0.0;
  }
  *(double *)(v8 + 56) = v9;
  *(void *)(v8 + 104) = 0;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(void *)(v8 + 96) = 0;
  *(void *)(v8 + 112) = 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_WORD *)(a1 + 624) = 1;
  *(unsigned char *)(a1 + 626) = 0;
  *(unsigned char *)(a1 + 628) = 0;
  *(void *)(a1 + 632) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(void *)(a1 + 672) = 0;
  return a1;
}

void sub_1BD0FA6A8(_Unwind_Exception *a1)
{
  id v3 = v2;
  objc_destroyWeak(v3);

  BOOL v5 = *(void **)(v1 + 72);
  if (v5)
  {
    *(void *)(v1 + 80) = v5;
    operator delete(v5);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)v1);
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);

  JUMPOUT(0x1C187B8A0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1F1724B80;
  unint64_t v2 = *(void **)(a1 + 656);
  if (v2)
  {
    *(void *)(a1 + 664) = v2;
    operator delete(v2);
  }

  id v3 = *(void **)(a1 + 592);
  if (v3)
  {
    *(void *)(a1 + 600) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(unsigned char *)(result + 624) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::setDateInterval(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 copy];
  uint64_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;

  BOOL v5 = [v6 startDate];
  [v5 timeIntervalSinceReferenceDate];
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_configureForStartTime(a1);
}

void sub_1BD0FA7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(void *)(a1 + 40))
  {
    id v5 = v3;
    [v3 timeIntervalSinceReferenceDate];
    *(void *)(a1 + 632) = v4;
    id v3 = v5;
  }
}

void sub_1BD0FA83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::setStatisticsConfiguration(id *a1, void *a2)
{
  objc_storeStrong(a1 + 80, a2);
  id v7 = a2;
  id v4 = a1[80];
  id v5 = a1[77];
  a1[77] = v4;
  id v6 = v4;

  objc_storeStrong(a1 + 19, a1[77]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (*(void *)(a1 + 40)) {
    return 1;
  }
  BOOL v7 = *(void *)(a1 + 224) == *(void *)(a1 + 216) && *(uint64_t *)(a1 + 280) < 1
    || HKIntervalMask<double>::firstDifference(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)a2, *(void *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (v7) {
    return 1;
  }
  double v9 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128);

  return v9(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 copy];
  id v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v3;
}

void sub_1BD0FAA24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::dataSource(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));

  return WeakRetained;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::currentStatistics(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 624))
  {
    uint64_t v1 = 0;
  }
  else
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_updateSourceOrder((uint64_t)v4);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeThroughTime((uint64_t)v4, v4[1]);
    uint64_t v1 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_statisticsFromFinishedBucket(a1, v4);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::~HDStatisticsBucket((uint64_t)v4);
  }

  return v1;
}

void sub_1BD0FAAF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::~HDStatisticsBucket((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(a1 + 64);
  BOOL v7 = v6;
  if (!v6) {
    goto LABEL_4;
  }
  uint64_t v8 = [v6 startDate];
  [v8 timeIntervalSinceReferenceDate];
  if (v9 > *(double *)(a2 + 16))
  {

    goto LABEL_10;
  }
  uint64_t v10 = [v7 endDate];
  [v10 timeIntervalSinceReferenceDate];
  double v12 = v11;
  double v13 = *(double *)(a2 + 8);

  if (v12 >= v13)
  {
LABEL_4:
    if (!*(unsigned char *)(a1 + 626)) {
      goto LABEL_21;
    }
    if (!*(unsigned char *)(a1 + 625))
    {
      if (*(void *)(a1 + 40))
      {
        if (*(unsigned char *)(a1 + 624))
        {
          double v14 = -1.79769313e308;
        }
        else
        {
          double v16 = *(double *)(a1 + 176);
          double v14 = *(double *)(a1 + 120);
          if (v16 <= v14) {
            double v16 = -1.79769313e308;
          }
          if (v16 >= v14) {
            double v14 = v16;
          }
        }
      }
      else
      {
        double v14 = -1.79769313e308;
        if (*(double *)(a1 + 176) > *(double *)(a1 + 120)) {
          double v14 = *(double *)(a1 + 176);
        }
      }
      if (v14 > *(double *)(a2 + 8))
      {
        uint64_t v17 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
        uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v17, a3);

        goto LABEL_22;
      }
      if (*(unsigned char *)(a1 + 627))
      {
LABEL_21:
        uint64_t v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_primitiveAddSample(a1, a2, 1, a3);
        goto LABEL_22;
      }
      unint64_t v19 = *(void *)(a1 + 664);
      unint64_t v20 = *(void *)(a1 + 672);
      if (v19 >= v20)
      {
        uint64_t v24 = *(void *)(a1 + 656);
        unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v24) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - v24) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x333333333333333) {
          unint64_t v28 = 0x666666666666666;
        }
        else {
          unint64_t v28 = v26;
        }
        if (v28) {
          unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v28);
        }
        else {
          uint64_t v29 = 0;
        }
        unint64_t v30 = v28 + 40 * v25;
        unint64_t v31 = v28 + 40 * v29;
        long long v32 = *(_OWORD *)a2;
        long long v33 = *(_OWORD *)(a2 + 16);
        *(void *)(v30 + 32) = *(void *)(a2 + 32);
        *(_OWORD *)unint64_t v30 = v32;
        *(_OWORD *)(v30 + 16) = v33;
        unint64_t v23 = v30 + 40;
        double v34 = *(char **)(a1 + 664);
        long long v35 = *(char **)(a1 + 656);
        if (v34 != v35)
        {
          do
          {
            long long v36 = *(_OWORD *)(v34 - 40);
            long long v37 = *(_OWORD *)(v34 - 24);
            *(_WORD *)(v30 - 8) = *((_WORD *)v34 - 4);
            *(_OWORD *)(v30 - 24) = v37;
            *(_OWORD *)(v30 - 40) = v36;
            v30 -= 40;
            v34 -= 40;
          }
          while (v34 != v35);
          double v34 = *(char **)(a1 + 656);
        }
        *(void *)(a1 + 656) = v30;
        *(void *)(a1 + 664) = v23;
        *(void *)(a1 + 672) = v31;
        if (v34) {
          operator delete(v34);
        }
      }
      else
      {
        long long v21 = *(_OWORD *)a2;
        long long v22 = *(_OWORD *)(a2 + 16);
        *(void *)(v19 + 32) = *(void *)(a2 + 32);
        *(_OWORD *)unint64_t v19 = v21;
        *(_OWORD *)(v19 + 16) = v22;
        unint64_t v23 = v19 + 40;
      }
      *(void *)(a1 + 664) = v23;
    }
  }
LABEL_10:
  uint64_t v15 = 1;
LABEL_22:

  return v15;
}

void sub_1BD0FADB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = v5;
  if (*(unsigned char *)(a1 + 626))
  {
    uint64_t v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 626) = 1;
  uint64_t v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    uint64_t v7 = 0;
    goto LABEL_82;
  }
  uint64_t v65 = v6;
  if (*(unsigned char *)(a1 + 625)) {
    goto LABEL_5;
  }
  double v9 = *(void **)(a1 + 648);
  if (!v9)
  {
    id v68 = 0;
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 40))
  {
LABEL_5:
    int v8 = 0;
    id v68 = 0;
    goto LABEL_29;
  }
  [v9 sortUsingComparator:&__block_literal_global_868];
  id v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v10 = *(id *)(a1 + 648);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  if (!v11)
  {

    id v12 = 0;
    goto LABEL_27;
  }
  id v12 = 0;
  uint64_t v13 = *(void *)v70;
  do
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (*(void *)v70 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(id *)(*((void *)&v69 + 1) + 8 * i);
      double v16 = v15;
      if (v12)
      {
        uint64_t v17 = [v15 startDate];
        uint64_t v18 = [v12 endDate];
        int v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          unint64_t v20 = [v16 endDate];
          long long v21 = [v12 endDate];
          int v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22) {
            goto LABEL_21;
          }
          id v23 = objc_alloc(MEMORY[0x1E4F28C18]);
          uint64_t v24 = [v12 startDate];
          unint64_t v25 = [v16 endDate];
          id v26 = (id)[v23 initWithStartDate:v24 endDate:v25];
        }
        else
        {
          [v68 addObject:v12];
          id v26 = v16;
        }
        id v12 = v26;
      }
      else
      {
        id v12 = v15;
      }
LABEL_21:
    }
    uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  }
  while (v11);

  if (v12) {
    [v68 addObject:v12];
  }
LABEL_27:

LABEL_28:
  int v8 = 1;
LABEL_29:
  unint64_t v27 = *(void **)(a1 + 648);
  *(void *)(a1 + 648) = 0;

  *(unsigned char *)(a1 + 625) = 0;
  if (!v8)
  {
    unint64_t v38 = *(void *)(a1 + 656);
    *(void *)(a1 + 672) = 0;
    *(void *)(a1 + 664) = 0;
    *(void *)(a1 + 656) = 0;
    unint64_t v39 = v38;
    goto LABEL_47;
  }
  unint64_t v28 = [v68 lastObject];
  if (v28)
  {
    uint64_t v29 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_currentBucketInterval(a1);
    unint64_t v30 = [v29 endDate];
    unint64_t v31 = [v28 endDate];
    int v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      long long v33 = [v28 endDate];
      [v33 timeIntervalSinceReferenceDate];
      double v35 = v34;

      uint64_t v36 = *(void *)(a1 + 656);
      long long v37 = *(long long **)(a1 + 664);
      while ((long long *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((long long *)v36 != v37)
          {
            double v40 = (long long *)(v36 + 40);
            if ((long long *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  long long v41 = *v40;
                  long long v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)uint64_t v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                double v40 = (long long *)((char *)v40 + 40);
              }
              while (v40 != v37);
              long long v37 = *(long long **)(a1 + 664);
            }
          }
          if ((long long *)v36 != v37) {
            *(void *)(a1 + 664) = v36;
          }
          break;
        }
        v36 += 40;
      }
    }
  }
  unint64_t v38 = *(void *)(a1 + 656);
  unint64_t v39 = *(void *)(a1 + 664);
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 664) = 0;
  if (![v68 count]) {
    goto LABEL_60;
  }
LABEL_47:
  id v43 = v68;
  long long __p = (void *)v38;
  if (v43)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v44 = v43;
    uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v70;
      while (2)
      {
        for (uint64_t j = 0; j != v45; ++j)
        {
          if (*(void *)v70 != v46) {
            objc_enumerationMutation(v44);
          }
          id v48 = *(id *)(*((void *)&v69 + 1) + 8 * j);
          int v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_primitiveInvalidateInterval((id *)a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
        if (v45) {
          continue;
        }
        break;
      }
    }

LABEL_59:
    unint64_t v38 = (unint64_t)__p;
LABEL_60:
    unint64_t v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v51;
    }
    int v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    long long __p = (void *)v38;
    if (v39 != v38)
    {
      uint64_t v54 = v38;
      uint64_t v50 = v67;
      do
      {
        int v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_primitiveAddSample(a1, v54, 1, v50);
        int v53 = v55;
        v54 += 40;
        if (v54 == v39) {
          char v56 = 0;
        }
        else {
          char v56 = v55;
        }
        uint64_t v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_primitiveInvalidateInterval((id *)a1, 0, v67))goto LABEL_59; {
LABEL_70:
    }
    int v53 = 0;
  }
  if (*(void *)(a1 + 40) && *(void *)(a1 + 600) != *(void *)(a1 + 592))
  {
    do
    {
      uint64_t v57 = objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(void *)(a1 + 112) + 1, v50, v65);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      unint64_t v58 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_statisticsFromFinishedBucket(a1, (double *)(a1 + 120));
      long long v59 = [v57 startDate];
      [v59 timeIntervalSinceReferenceDate];
      double v61 = v60;
      uint64_t v62 = [v57 endDate];
      [v62 timeIntervalSinceReferenceDate];
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsNoiseLevel>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_notifyForCurrentBucket(a1);
    }
    while (*(void *)(a1 + 600) != *(void *)(a1 + 592));
  }
  *(unsigned char *)(a1 + 626) = 0;
  if (__p) {
    operator delete(__p);
  }

  if (v53)
  {
    if (*(unsigned char *)(a1 + 628))
    {
      *(unsigned char *)(a1 + 628) = 0;
      id v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_notifyForCurrentBucket(a1);
      uint64_t v7 = 1;
      goto LABEL_82;
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v6 = v65;
LABEL_82:
  *(unsigned char *)(a1 + 626) = 0;
LABEL_83:

  return v7;
}

void sub_1BD0FB4B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    *(unsigned char *)(v13 + 626) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(unsigned char *)(result + 627) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(unsigned char *)(a1 + 626)) {
      goto LABEL_12;
    }
    uint64_t v7 = 0;
LABEL_14:
    uint64_t v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_primitiveInvalidateInterval((id *)a1, v7, a3);
    goto LABEL_15;
  }
  uint64_t v7 = [v6 dateIntervalForIntervalsContainingInterval:v5];

  if (!*(unsigned char *)(a1 + 626)) {
    goto LABEL_14;
  }
  if (!v7)
  {
LABEL_12:
    id v12 = *(void **)(a1 + 648);
    *(void *)(a1 + 648) = 0;

    uint64_t v7 = 0;
    uint64_t v11 = 1;
    *(unsigned char *)(a1 + 625) = 1;
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 625))
  {
    int v8 = *(void **)(a1 + 648);
    if (!v8)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      id v10 = *(void **)(a1 + 648);
      *(void *)(a1 + 648) = v9;

      int v8 = *(void **)(a1 + 648);
    }
    [v8 addObject:v7];
  }
  uint64_t v11 = 1;
LABEL_15:

  return v11;
}

void sub_1BD0FB7B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    *(unsigned char *)(a1 + 624) = 1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsNoiseLevelEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v9[3] = &unk_1E63043E8;
    uint64_t v12 = a1;
    id v10 = v5;
    id v11 = WeakRetained;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 112))(a1, v9, a3);
    if (v7 && *(unsigned char *)(a1 + 624) && !*(void *)(a1 + 40)) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_configureForStartTime(a1);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to query for initial statistics: no data source available.");
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1BD0FB908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::reset(uint64_t result)
{
  *(unsigned char *)(result + 624) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 encodeBool:*(unsigned __int8 *)(a1 + 624) forKey:@"needs_config"];
  id v12 = v3;
  int v32 = &unk_1F1726FA0;
  long long v33 = 0;
  int v38 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
  LOBYTE(v38) = 1;
  uint64_t v34 = v4;
  uint64_t v35 = 0;
  statistics::StatisticsEngine::makeCurrentBucket((uint64_t)&v32);
  uint64_t v13 = &unk_1F171B9C8;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  int v31 = 511;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 0;
  int8x16_t v14 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  uint64_t v5 = *(void *)(a1 + 136);
  char v29 = *(unsigned char *)(a1 + 144);
  char v30 = *(unsigned char *)(a1 + 145);
  BOOL v28 = *(_DWORD *)(a1 + 148) == 0;
  int8x16_t v15 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  uint64_t v7 = *(int8x16_t **)(a1 + 216);
  if (v7 != *(int8x16_t **)(a1 + 224))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v7, *v7, 8uLL);
    int8x16_t v40 = v7[1];
    char v43 = 0;
    HIBYTE(v42) = v7[2].i8[9];
    LOBYTE(v42) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>();
  }
  statistics::StatisticsBucket::makeStatistics((uint64_t)&v13);
  HDStatisticsRelative<HDStatisticsNoiseLevel>::archive((uint64_t)&v39, (int *)(a1 + 240));
  statistics::Statistics::operator=(*((statistics **)&v22 + 1), (uint64_t)&v39);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v39);
  uint64_t v8 = *(void *)(a1 + 384);
  if (v8 != a1 + 392)
  {
    HDStatisticsRelative<HDStatisticsNoiseLevel>::archive((uint64_t)&v39, (int *)(v8 + 40));
    uint64_t v9 = *(void *)(v8 + 32);
    v46 |= 0x200u;
    uint64_t v45 = v9;
    PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>();
  }
  id v10 = *(int8x16_t **)(a1 + 184);
  if (v10 != *(int8x16_t **)(a1 + 192))
  {
    unint64_t v39 = (char *)&unk_1F1727540;
    v41.i32[0] = 3;
    int8x16_t v40 = vextq_s8(*v10, *v10, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>();
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v13);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v13);
  id v11 = *(int8x16_t **)(a1 + 592);
  if (v11 != *(int8x16_t **)(a1 + 600))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v11, *v11, 8uLL);
    int8x16_t v40 = v11[1];
    __int16 v42 = 0;
    char v43 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>();
  }
  PB::Writer::Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v39);
  [v12 encodeBytes:v40.i64[0] length:&v39[-v40.i64[0]] forKey:@"hdsce_archived_representation"];
  PB::Writer::~Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);
}

void sub_1BD0FBD08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v64 = a2;
  *(unsigned char *)(a1 + 624) = [v64 decodeBoolForKey:@"needs_config"];
  id v63 = v64;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::HDStatisticsBucket((uint64_t)&v68.n128_i64[1], 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)long long v69 = 0u;
  long long v70 = 0u;
  unint64_t v116 = 0;
  id v3 = v63;
  PB::Reader::Reader((PB::Reader *)v115, (const unsigned __int8 *)[v3 decodeBytesForKey:@"hdsce_archived_representation" returnedLength:&v116]);
  int64_t v66 = v3;
  uint64_t v67 = a1;
  uint64_t v108 = &unk_1F1726FA0;
  uint64_t v109 = 0;
  uint64_t v113 = 0;
  uint64_t v111 = 0;
  uint64_t v112 = 0;
  int v114 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v108, (PB::Reader *)v115);
  uint64_t v4 = v109;
  v68.n128_u64[0] = v110;
  if (v109)
  {
    uint64_t v74 = 0;
    memset(v77, 0, sizeof(v77));
    long long __p = 0;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    memset(v85, 0, 26);
    unint64_t v80 = 0;
    int64_t v79 = 0;
    int v81 = 0;
    long long v86 = [[HDQuantitySampleOverlapProcessor alloc] initWithOverlapFunction:1];
    __int16 v87 = 257;
    long long v88 = 0u;
    long long v89 = 0u;
    __int16 v90 = 0;
    uint64_t v93 = 0;
    double v92 = 0;
    unint64_t v91 = &v92;
    long long v94 = 0u;
    long long v95 = 0u;
    int v96 = 1065353216;
    long long v97 = 0u;
    long long v98 = 0u;
    long long v99 = 0u;
    uint64_t v100 = 0;
    int v101 = 1065353216;
    long long v102 = 0u;
    long long v103 = 0u;
    int v104 = 1065353216;
    long long v105 = 0u;
    long long v106 = 0u;
    int v107 = 1065353216;
    int8x16_t v71 = vextq_s8(*(int8x16_t *)(v4 + 8), *(int8x16_t *)(v4 + 8), 8uLL);
    uint64_t v5 = *(void *)(v4 + 72);
    uint64_t v72 = *(void *)(v4 + 64);
    __int16 v73 = *(_WORD *)(v4 + 185);
    int8x16_t v75 = vextq_s8(*(int8x16_t *)(v4 + 24), *(int8x16_t *)(v4 + 24), 8uLL);
    uint64_t v76 = v5;
    uint64_t v6 = *(void *)(v4 + 80);
    uint64_t v7 = *(void *)(v4 + 88);
    uint64_t v65 = (void *)v4;
    if (v6 != v7)
    {
      uint64_t v8 = v79;
      do
      {
        uint64_t v9 = *(void *)(*(void *)v6 + 24);
        uint64_t v10 = *(void *)(*(void *)v6 + 32);
        uint64_t v11 = *(void *)(*(void *)v6 + 8);
        uint64_t v12 = *(void *)(*(void *)v6 + 16);
        char v13 = *(unsigned char *)(*(void *)v6 + 41);
        char v14 = *(unsigned char *)(*(void *)v6 + 40);
        if ((unint64_t)v8 >= v80)
        {
          int8x16_t v15 = (char *)__p;
          unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (unsigned char *)__p) >> 4);
          unint64_t v17 = v16 + 1;
          if (v16 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v80 - (void)__p) >> 4) > v17) {
            unint64_t v17 = 0x5555555555555556 * ((uint64_t)(v80 - (void)__p) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80 - (void)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v18 = 0x555555555555555;
          }
          else {
            unint64_t v18 = v17;
          }
          if (v18)
          {
            unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v18);
            uint64_t v8 = v79;
            int8x16_t v15 = (char *)__p;
          }
          else
          {
            uint64_t v19 = 0;
          }
          uint64_t v20 = (void *)(v18 + 48 * v16);
          *uint64_t v20 = v10;
          v20[1] = v9;
          v20[2] = v11;
          v20[3] = v12;
          *((_WORD *)v20 + 16) = 1;
          *((unsigned char *)v20 + 40) = 0;
          *((unsigned char *)v20 + 41) = v13;
          *((unsigned char *)v20 + 42) = v14;
          long long v21 = (char *)v20;
          if (v8 != v15)
          {
            do
            {
              long long v22 = *((_OWORD *)v8 - 3);
              long long v23 = *((_OWORD *)v8 - 2);
              *(_OWORD *)(v21 - 21) = *(_OWORD *)(v8 - 21);
              *((_OWORD *)v21 - 3) = v22;
              *((_OWORD *)v21 - 2) = v23;
              v21 -= 48;
              v8 -= 48;
            }
            while (v8 != v15);
            int8x16_t v15 = (char *)__p;
          }
          uint64_t v8 = (char *)(v20 + 6);
          long long __p = v21;
          int64_t v79 = (char *)(v20 + 6);
          unint64_t v80 = v18 + 48 * v19;
          if (v15) {
            operator delete(v15);
          }
        }
        else
        {
          *(void *)uint64_t v8 = v10;
          *((void *)v8 + 1) = v9;
          *((void *)v8 + 2) = v11;
          *((void *)v8 + 3) = v12;
          *((_WORD *)v8 + 16) = 1;
          v8[40] = 0;
          v8[41] = v13;
          v8[42] = v14;
          v8 += 48;
        }
        int64_t v79 = v8;
        v6 += 8;
      }
      while (v6 != v7);
    }
    long long v24 = (void *)v65[13];
    if (v24)
    {
      HDStatisticsRelative<HDStatisticsNoiseLevel>::unarchive((uint64_t)&v117, v24);
      int v81 = v117;
      long long v84 = v120;
      v85[0] = v121[0];
      *(_OWORD *)((char *)v85 + 10) = *(_OWORD *)((char *)v121 + 10);
      long long v82 = v118;
      long long v83 = v119;
      id v25 = obj;
      objc_storeStrong((id *)&v86, obj);
      __int16 v87 = v123;
      long long v88 = v124;
      long long v89 = v125;
      __int16 v90 = v126;
    }
    long long v26 = (void **)v65[17];
    for (uint64_t i = (void **)v65[18]; v26 != i; ++v26)
    {
      uint64_t v28 = (uint64_t)*v26;
      HDStatisticsRelative<HDStatisticsNoiseLevel>::unarchive((uint64_t)&v117, *v26);
      uint64_t v29 = *(void *)(v28 + 144);
      char v30 = v92;
      int v31 = &v92;
      int v32 = &v92;
      if (v92)
      {
        do
        {
          while (1)
          {
            int v32 = (uint64_t **)v30;
            uint64_t v33 = v30[4];
            if (v33 <= v29) {
              break;
            }
            char v30 = *v32;
            int v31 = v32;
            if (!*v32) {
              goto LABEL_32;
            }
          }
          if (v33 >= v29)
          {
            uint64_t v35 = (char *)v32;
            goto LABEL_35;
          }
          char v30 = v32[1];
        }
        while (v30);
        int v31 = v32 + 1;
      }
LABEL_32:
      uint64_t v35 = (char *)operator new(0xB8uLL);
      *((void *)v35 + 4) = v29;
      *(_OWORD *)(v35 + 40) = 0u;
      *(_OWORD *)(v35 + 56) = 0u;
      *(_OWORD *)(v35 + 72) = 0u;
      *(_OWORD *)(v35 + 88) = 0u;
      *(_OWORD *)(v35 + 104) = 0u;
      *(_OWORD *)(v35 + 120) = 0u;
      *(_OWORD *)(v35 + 136) = 0u;
      *(_OWORD *)(v35 + 152) = 0u;
      *(_OWORD *)(v35 + 168) = 0u;
      *((void *)v35 + 16) = [[HDQuantitySampleOverlapProcessor alloc] initWithOverlapFunction:1];
      *((_WORD *)v35 + 68) = 257;
      *((_OWORD *)v35 + 9) = 0u;
      *((_OWORD *)v35 + 10) = 0u;
      *((_WORD *)v35 + 88) = 0;
      *(void *)uint64_t v35 = 0;
      *((void *)v35 + 1) = 0;
      *((void *)v35 + 2) = v32;
      void *v31 = (uint64_t *)v35;
      uint64_t v34 = (uint64_t *)v35;
      if (*v91)
      {
        unint64_t v91 = (uint64_t **)*v91;
        uint64_t v34 = *v31;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v92, v34);
      ++v93;
LABEL_35:
      *((_DWORD *)v35 + 10) = v117;
      long long v36 = v119;
      *((_OWORD *)v35 + 3) = v118;
      long long v37 = *(_OWORD *)((char *)v121 + 10);
      long long v39 = v120;
      long long v38 = v121[0];
      *((_OWORD *)v35 + 4) = v36;
      *((_OWORD *)v35 + 5) = v39;
      *((_OWORD *)v35 + 6) = v38;
      *(_OWORD *)(v35 + 106) = v37;
      id v40 = obj;
      objc_storeStrong((id *)v35 + 16, obj);
      *((_WORD *)v35 + 68) = v123;
      long long v41 = v125;
      *((_OWORD *)v35 + 9) = v124;
      *((_OWORD *)v35 + 10) = v41;
      *((_WORD *)v35 + 88) = v126;
    }
    uint64_t v42 = v65[5];
    for (uint64_t j = v65[6]; v42 != j; v42 += 8)
    {
      double v45 = *(double *)(*(void *)v42 + 8);
      double v44 = *(double *)(*(void *)v42 + 16);
      if (v45 >= v44) {
        double v46 = *(double *)(*(void *)v42 + 16);
      }
      else {
        double v46 = *(double *)(*(void *)v42 + 8);
      }
      if (v44 < v45) {
        double v44 = *(double *)(*(void *)v42 + 8);
      }
      HKIntervalMask<double>::_insertInterval(v77, v46, v44);
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::operator=((uint64_t)&v68.n128_i64[1], (uint64_t)&v71);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::~HDStatisticsBucket((uint64_t)&v71);
  }
  uint64_t v47 = v111;
  uint64_t v48 = v112;
  if (v111 != v112)
  {
    int v49 = (char *)v69[1];
    do
    {
      uint64_t v50 = *(void *)(*(void *)v47 + 24);
      uint64_t v51 = *(void *)(*(void *)v47 + 32);
      uint64_t v52 = *(void *)(*(void *)v47 + 8);
      uint64_t v53 = *(void *)(*(void *)v47 + 16);
      if ((unint64_t)v49 >= (unint64_t)v70)
      {
        uint64_t v54 = (char *)v69[0];
        unint64_t v55 = 0xCCCCCCCCCCCCCCCDLL * ((v49 - (char *)v69[0]) >> 3);
        unint64_t v56 = v55 + 1;
        if (v55 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(v70 - (unint64_t)v69[0]) >> 3) > v56) {
          unint64_t v56 = 0x999999999999999ALL * ((uint64_t)(v70 - (unint64_t)v69[0]) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v70 - (unint64_t)v69[0]) >> 3) >= 0x333333333333333) {
          unint64_t v57 = 0x666666666666666;
        }
        else {
          unint64_t v57 = v56;
        }
        if (v57)
        {
          unint64_t v57 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v57);
          int v49 = (char *)v69[1];
          uint64_t v54 = (char *)v69[0];
        }
        else
        {
          uint64_t v58 = 0;
        }
        unint64_t v59 = v57 + 40 * v55;
        *(void *)unint64_t v59 = v51;
        *(void *)(v59 + 8) = v50;
        *(void *)(v59 + 16) = v52;
        *(void *)(v59 + 24) = v53;
        *(_WORD *)(v59 + 32) = 1;
        double v60 = (char *)v59;
        if (v49 != v54)
        {
          do
          {
            long long v61 = *(_OWORD *)(v49 - 40);
            long long v62 = *(_OWORD *)(v49 - 24);
            *((_WORD *)v60 - 4) = *((_WORD *)v49 - 4);
            *(_OWORD *)(v60 - 24) = v62;
            *(_OWORD *)(v60 - 40) = v61;
            v60 -= 40;
            v49 -= 40;
          }
          while (v49 != v54);
          uint64_t v54 = (char *)v69[0];
        }
        int v49 = (char *)(v59 + 40);
        v69[0] = v60;
        v69[1] = (void *)(v59 + 40);
        *(void *)&long long v70 = v57 + 40 * v58;
        if (v54) {
          operator delete(v54);
        }
      }
      else
      {
        *(void *)int v49 = v51;
        *((void *)v49 + 1) = v50;
        *((void *)v49 + 2) = v52;
        *((void *)v49 + 3) = v53;
        *((_WORD *)v49 + 16) = 1;
        v49 += 40;
      }
      v69[1] = v49;
      v47 += 8;
    }
    while (v47 != v48);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v108);

  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsNoiseLevel>>::operator=((void *)(v67 + 112), &v68);
  if (v69[0])
  {
    v69[1] = v69[0];
    operator delete(v69[0]);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::~HDStatisticsBucket((uint64_t)&v68.n128_i64[1]);
}

void sub_1BD0FC4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table((uint64_t)&STACK[0x3F0]);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a3);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x3A0]);
  uint64_t v10 = (void *)STACK[0x388];
  if (STACK[0x388])
  {
    STACK[0x390] = (unint64_t)v10;
    operator delete(v10);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x360]);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>>>::destroy((void *)STACK[0x350]);

  uint64_t v11 = (void *)STACK[0x2A0];
  if (STACK[0x2A0])
  {
    STACK[0x2A8] = (unint64_t)v11;
    operator delete(v11);
  }
  objc_destroyWeak((id *)&STACK[0x298]);
  uint64_t v12 = (void *)STACK[0x280];
  if (STACK[0x280])
  {
    STACK[0x288] = (unint64_t)v12;
    operator delete(v12);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x420]);
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsNoiseLevel>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(double *)(a1 + 56) = a3;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 186) = 0u;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(void *)(a1 + 208) = [[HDQuantitySampleOverlapProcessor alloc] initWithOverlapFunction:1];
  *(_WORD *)(a1 + 216) = 257;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_WORD *)(a1 + 256) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 264) = a1 + 272;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_DWORD *)(a1 + 320) = 1065353216;
  *(void *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 384) = 1065353216;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_DWORD *)(a1 + 424) = 1065353216;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_DWORD *)(a1 + 464) = 1065353216;
  return a1;
}

void sub_1BD0FC6E0(_Unwind_Exception *a1)
{
  uint64_t v6 = v3;
  uint64_t v8 = *v6;
  if (*v6)
  {
    *(void *)(v1 + 104) = v8;
    operator delete(v8);
  }
  objc_destroyWeak(v2);
  uint64_t v9 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 72) = v9;
    operator delete(v9);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsNoiseLevel>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 480);
  if (v2)
  {
    *(void *)(a1 + 488) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::~HDStatisticsBucket(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 432);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 392);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 352);
  unint64_t v2 = *(void **)(a1 + 328);
  if (v2)
  {
    *(void *)(a1 + 336) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 288);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>>>::destroy(*(void **)(a1 + 272));

  id v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(void *)(a1 + 104) = v3;
    operator delete(v3);
  }
  objc_destroyWeak((id *)(a1 + 88));
  uint64_t v4 = *(void **)(a1 + 64);
  if (v4)
  {
    *(void *)(a1 + 72) = v4;
    operator delete(v4);
  }

  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>>>::destroy(a1[1]);

    operator delete(a1);
  }
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_configureForStartTime(uint64_t a1)
{
  unint64_t v28 = 0;
  unint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
    uint64_t v4 = [v2 dateIntervalContainingDate:v3 index:&v28];

    uint64_t v5 = [v4 startDate];
    [v5 timeIntervalSinceReferenceDate];
    double v7 = v6;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
LABEL_5:
    double v13 = v9;

    goto LABEL_6;
  }
  id v10 = *(id *)(a1 + 64);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v11 = [v10 startDate];
    [v11 timeIntervalSinceReferenceDate];
    double v7 = v12;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
    goto LABEL_5;
  }
  double v7 = -1.79769313e308;
  double v13 = 1.79769313e308;
LABEL_6:

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::HDStatisticsBucket((uint64_t)v21, WeakRetained, v7, v13);

  if (*(void *)(a1 + 32) == 1) {
    char v23 = 1;
  }
  uint64_t v22 = *(void *)(a1 + 56);
  char v24 = *(unsigned char *)(a1 + 24) & 1;
  if (v27 != (char *)(a1 + 72)) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27, *(char **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4);
  }
  objc_storeStrong(&v26, *(id *)(a1 + 640));
  if (!*(void *)(a1 + 40)) {
    int v25 = 0;
  }
  unint64_t v15 = v28;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v21);
  v18.n128_u64[0] = v15;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::HDStatisticsBucket((uint64_t)&v18.n128_i64[1], (uint64_t)v17);
  long long __p = 0u;
  long long v20 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsNoiseLevel>>::operator=((void *)(a1 + 112), &v18);

  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::~HDStatisticsBucket((uint64_t)&v18.n128_i64[1]);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::~HDStatisticsBucket((uint64_t)v17);
  *(unsigned char *)(a1 + 624) = 0;
  return HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::~HDStatisticsBucket((uint64_t)v21);
}

void sub_1BD0FCB04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsNoiseLevel>>::operator=(void *a1, __n128 *a2)
{
  *a1 = a2->n128_u64[0];
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::operator=((uint64_t)(a1 + 1), (uint64_t)&a2->n128_i64[1]);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 60), a2 + 30);
  unint64_t v4 = a2[31].n128_u64[1];
  a2[31].n128_u64[1] = 0;
  uint64_t v5 = (void *)a1[63];
  a1[63] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 96);
  double v7 = *(unsigned char **)(a2 + 104);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(void *)(a1 + 96) = v10;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(void *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)(a1 + 128), (const HDStatisticsNoiseLevel *)(a2 + 128));
  long long v12 = *(_OWORD *)(a2 + 240);
  uint64_t v13 = *(void *)(a2 + 256);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v12;
  char v14 = (void *)(a1 + 272);
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 256) = v13;
  *(void *)(a1 + 264) = a1 + 272;
  unint64_t v15 = *(void **)(a2 + 264);
  if (v15 != (void *)(a2 + 272))
  {
    unint64_t v16 = 0;
    unint64_t v17 = (void *)(a1 + 272);
    while (1)
    {
      __n128 v18 = (void *)(a1 + 272);
      if (v17 == v14) {
        goto LABEL_12;
      }
      uint64_t v19 = v16;
      long long v20 = (void *)(a1 + 272);
      if (v16)
      {
        do
        {
          __n128 v18 = v19;
          uint64_t v19 = (void *)v19[1];
        }
        while (v19);
      }
      else
      {
        do
        {
          __n128 v18 = (void *)v20[2];
          BOOL v21 = *v18 == (void)v20;
          long long v20 = v18;
        }
        while (v21);
      }
      uint64_t v22 = v15[4];
      if (v18[4] < v22)
      {
LABEL_12:
        if (v16) {
          char v23 = (uint64_t **)v18;
        }
        else {
          char v23 = (uint64_t **)(a1 + 272);
        }
        if (v16) {
          char v24 = (uint64_t **)(v18 + 1);
        }
        else {
          char v24 = (uint64_t **)(a1 + 272);
        }
        if (!*v24)
        {
LABEL_28:
          uint64_t v27 = operator new(0xB8uLL);
          void v27[4] = v15[4];
          *((_DWORD *)v27 + 10) = *((_DWORD *)v15 + 10);
          HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)(v27 + 6), (const HDStatisticsNoiseLevel *)(v15 + 6));
          long long v28 = *((_OWORD *)v15 + 9);
          long long v29 = *((_OWORD *)v15 + 10);
          v27[22] = v15[22];
          *((_OWORD *)v27 + 9) = v28;
          *((_OWORD *)v27 + 10) = v29;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 264), (uint64_t)v23, v24, v27);
        }
      }
      else
      {
        char v24 = (uint64_t **)(a1 + 272);
        char v23 = (uint64_t **)(a1 + 272);
        if (!v16) {
          goto LABEL_28;
        }
        int v25 = v16;
        while (1)
        {
          while (1)
          {
            char v23 = (uint64_t **)v25;
            uint64_t v26 = v25[4];
            if (v26 <= v22) {
              break;
            }
            int v25 = *v23;
            char v24 = v23;
            if (!*v23) {
              goto LABEL_28;
            }
          }
          if (v26 >= v22) {
            break;
          }
          int v25 = v23[1];
          if (!v25)
          {
            char v24 = v23 + 1;
            goto LABEL_28;
          }
        }
      }
      char v30 = (void *)v15[1];
      if (v30)
      {
        do
        {
          int v31 = v30;
          char v30 = (void *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          int v31 = (void *)v15[2];
          BOOL v21 = *v31 == (void)v15;
          unint64_t v15 = v31;
        }
        while (!v21);
      }
      if (v31 == (void *)(a2 + 272)) {
        break;
      }
      unint64_t v16 = (void *)*v14;
      unint64_t v17 = *(void **)(a1 + 264);
      unint64_t v15 = v31;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 288, a2 + 288);
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 328), *(const void **)(a2 + 328), *(void *)(a2 + 336), (uint64_t)(*(void *)(a2 + 336) - *(void *)(a2 + 328)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 352, a2 + 352);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 392, a2 + 392);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 432, a2 + 432);
  return a1;
}

void sub_1BD0FCEB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, id *location, void **a12)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v17);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  uint64_t v19 = *v15;
  if (*v15)
  {
    *(void *)(v12 + 336) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>>>::destroy(*v13);

  long long v20 = *a10;
  if (*a10)
  {
    *(void *)(v12 + 104) = v20;
    operator delete(v20);
  }
  objc_destroyWeak(location);
  BOOL v21 = *a12;
  if (*a12)
  {
    *(void *)(v12 + 72) = v21;
    operator delete(v21);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::operator=(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  long long v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v5;

  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  id WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  uint64_t v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(void *)(a1 + 104) = v9;
    operator delete(v9);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  long long v10 = *(_OWORD *)(a2 + 144);
  long long v11 = *(_OWORD *)(a2 + 160);
  long long v12 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 186) = *(_OWORD *)(a2 + 186);
  *(_OWORD *)(a1 + 160) = v11;
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 144) = v10;
  objc_storeStrong((id *)(a1 + 208), *(id *)(a2 + 208));
  *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
  long long v13 = *(_OWORD *)(a2 + 224);
  long long v14 = *(_OWORD *)(a2 + 240);
  *(_WORD *)(a1 + 256) = *(_WORD *)(a2 + 256);
  *(_OWORD *)(a1 + 224) = v13;
  *(_OWORD *)(a1 + 240) = v14;
  uint64_t v15 = a1 + 272;
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>>>::destroy(*(void **)(a1 + 272));
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  uint64_t v16 = *(void *)(a2 + 272);
  *(void *)(a1 + 272) = v16;
  uint64_t v17 = *(void *)(a2 + 280);
  *(void *)(a1 + 280) = v17;
  if (v17)
  {
    *(void *)(v16 + 16) = v15;
    *(void *)(a2 + 264) = a2 + 272;
    *(void *)(a2 + 272) = 0;
    *(void *)(a2 + 280) = 0;
  }
  else
  {
    *(void *)(a1 + 264) = v15;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 288, (uint64_t *)(a2 + 288));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 328, (__n128 *)(a2 + 328));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 352, (uint64_t *)(a2 + 352));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 392, (uint64_t *)(a2 + 392));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 432, (uint64_t *)(a2 + 432));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_statisticsFromFinishedBucket(uint64_t a1, double *a2)
{
  uint64_t v125 = *MEMORY[0x1E4F143B8];
  double v5 = *a2;
  id v6 = objc_alloc(MEMORY[0x1E4F1C9C8]);
  long long v7 = a2 + 5;
  if (v5 != -1.79769313e308) {
    long long v7 = a2;
  }
  uint64_t v101 = (uint64_t)a2;
  id v102 = (id)[v6 initWithTimeIntervalSinceReferenceDate:*v7];
  if (a2[1] == 1.79769313e308) {
    uint64_t v8 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:a2[6]];
  }
  else {
    uint64_t v8 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:a2[1]];
  }
  uint64_t v9 = (void *)v8;
  id v10 = *(id *)(a1 + 16);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v11 = *(id *)(a1 + 16);
    if ([v11 shouldUseUnderlyingTypeForStatistics])
    {
      uint64_t v12 = [v11 underlyingSampleType];

      id v10 = (id)v12;
    }
  }
  uint64_t v13 = [objc_alloc(MEMORY[0x1E4F2B5B0]) initWithDataType:v10 startDate:v102 endDate:v9];
  if (*(unsigned char *)(a1 + 24))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      unint64_t v2 = (unint64_t)objc_alloc_init(MEMORY[0x1E4F1CA48]);
      uint64_t v15 = *(uint64_t **)(v101 + 328);
      unint64_t v3 = *(void *)(v101 + 336);
      while (v15 != (uint64_t *)v3)
      {
        uint64_t v16 = *v15;
        id v17 = objc_loadWeakRetained((id *)(a1 + 48));
        __n128 v18 = [v17 sourceForSourceID:v16];

        if (v18)
        {
          if (([(id)v2 containsObject:v18] & 1) == 0) {
            [(id)v2 addObject:v18];
          }
        }

        ++v15;
      }
      uint64_t v19 = (void *)[(id)v2 copy];
      [(id)v13 _setSources:v19];
    }
  }

  v123[0] = &unk_1F1724C50;
  long long v124 = v123;
  id v103 = (id)v13;
  LODWORD(v109) = *(_DWORD *)(v101 + 120);
  HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)v110, (const HDStatisticsNoiseLevel *)(v101 + 128));
  long long v20 = *(_OWORD *)(v101 + 240);
  long long v111 = *(_OWORD *)(v101 + 224);
  long long v112 = v20;
  uint64_t v113 = *(void *)(v101 + 256);
  if (!v124) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  BOOL v21 = (const HDStatisticsNoiseLevel *)(*(uint64_t (**)(void *, double *))(*v124 + 48))(v124, &v109);
  HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)&v114, v21);

  HDStatisticsNoiseLevel::finalizeSamples((HDStatisticsNoiseLevel *)&v114);
  uint64_t v105 = *(void *)(a1 + 24);
  uint64_t v22 = _HKStatisticsOptionBaselineRelativeQuantities();
  char v23 = *(void **)(a1 + 16);
  if ((v22 & v105) != 0) {
    [v23 _unitForChangeInCanonicalUnit];
  }
  else {
  int v104 = [v23 canonicalUnit];
  }
  if ((v105 & 2) != 0)
  {
    double v24 = 0.0;
    if (v115 > 0.0 && v114 > 0.0) {
      double v24 = log10(v114 / v115) * 10.0;
    }
    int v25 = [MEMORY[0x1E4F2B370] quantityWithUnit:v104 doubleValue:v24];
    [v103 setAverageQuantity:v25];
  }
  if ((v105 & 4) != 0)
  {
    uint64_t v26 = [MEMORY[0x1E4F2B370] quantityWithUnit:v104 doubleValue:v117];
    [v103 setMinimumQuantity:v26];
  }
  if ((v105 & 8) != 0)
  {
    uint64_t v27 = [MEMORY[0x1E4F2B370] quantityWithUnit:v104 doubleValue:v116];
    [v103 setMaximumQuantity:v27];
  }
  if ((v105 & 0x20) != 0)
  {
    double v28 = v120;
    double v29 = v121;
    char v30 = [MEMORY[0x1E4F2B370] quantityWithUnit:v104 doubleValue:v119];
    [v103 setMostRecentQuantity:v30];

    int v31 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v28, v29);
    [v103 setMostRecentQuantityDateInterval:v31];
  }
  [v103 setDataCount:v118];
  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    goto LABEL_165;
  }
  if ((v105 & 2) != 0) {
    id v98 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else {
    id v98 = 0;
  }
  if ((v105 & 4) != 0) {
    id v96 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else {
    id v96 = 0;
  }
  if ((v105 & 8) != 0) {
    id v94 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else {
    id v94 = 0;
  }
  if ((v105 & 0x20) != 0)
  {
    id v95 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v97 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else
  {
    id v97 = 0;
    id v95 = 0;
  }
  id v99 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  *(_OWORD *)long long __p = 0u;
  long long v107 = 0u;
  float v108 = 1.0;
  int v32 = *(void **)(v101 + 264);
  if (v32 == (void *)(v101 + 272)) {
    goto LABEL_156;
  }
  do
  {
    uint64_t v33 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_bundleIdentifierForSourceID(v101, v32[4]);
    uint64_t v34 = v33;
    if (!v33) {
      goto LABEL_123;
    }
    unint64_t v35 = [v33 hash];
    unint64_t v3 = v35;
    unint64_t v36 = (unint64_t)__p[1];
    if (!__p[1]) {
      goto LABEL_66;
    }
    uint8x8_t v37 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v37.i16[0] = vaddlv_u8(v37);
    unint64_t v38 = v37.u32[0];
    if (v37.u32[0] > 1uLL)
    {
      unint64_t v2 = v35;
      if ((void *)v35 >= __p[1]) {
        unint64_t v2 = v35 % (unint64_t)__p[1];
      }
    }
    else
    {
      unint64_t v2 = ((unint64_t)__p[1] - 1) & v35;
    }
    long long v39 = (uint64_t *)*((void *)__p[0] + v2);
    if (!v39 || (uint64_t v13 = *v39) == 0)
    {
LABEL_66:
      uint64_t v13 = (uint64_t)operator new(0xA8uLL);
      *(void *)uint64_t v13 = 0;
      *(void *)(v13 + 8) = v3;
      *(void *)(v13 + 16) = v34;
      *(_OWORD *)(v13 + 24) = 0u;
      *(_OWORD *)(v13 + 40) = 0u;
      *(_OWORD *)(v13 + 56) = 0u;
      *(_OWORD *)(v13 + 72) = 0u;
      *(_OWORD *)(v13 + 88) = 0u;
      *(_OWORD *)(v13 + 104) = 0u;
      *(_OWORD *)(v13 + 120) = 0u;
      *(_OWORD *)(v13 + 136) = 0u;
      *(_OWORD *)(v13 + 152) = 0u;
      *(void *)(v13 + 112) = [[HDQuantitySampleOverlapProcessor alloc] initWithOverlapFunction:1];
      *(_WORD *)(v13 + 120) = 257;
      *(_OWORD *)(v13 + 128) = 0u;
      *(_OWORD *)(v13 + 144) = 0u;
      *(_WORD *)(v13 + 160) = 0;
      float v45 = (float)(unint64_t)(*((void *)&v107 + 1) + 1);
      if (v36 && (float)(v108 * (float)v36) >= v45)
      {
LABEL_112:
        long long v61 = __p[0];
        long long v62 = (uint64_t *)*((void *)__p[0] + v2);
        if (v62)
        {
          *(void *)uint64_t v13 = *v62;
        }
        else
        {
          *(void *)uint64_t v13 = v107;
          *(void *)&long long v107 = v13;
          v61[v2] = &v107;
          if (!*(void *)v13)
          {
LABEL_121:
            ++*((void *)&v107 + 1);
            goto LABEL_122;
          }
          unint64_t v63 = *(void *)(*(void *)v13 + 8);
          if ((v36 & (v36 - 1)) != 0)
          {
            if (v63 >= v36) {
              v63 %= v36;
            }
          }
          else
          {
            v63 &= v36 - 1;
          }
          long long v62 = (uint64_t *)((char *)__p[0] + 8 * v63);
        }
        *long long v62 = v13;
        goto LABEL_121;
      }
      BOOL v46 = (v36 & (v36 - 1)) != 0;
      if (v36 < 3) {
        BOOL v46 = 1;
      }
      unint64_t v47 = v46 | (2 * v36);
      unint64_t v48 = vcvtps_u32_f32(v45 / v108);
      if (v47 <= v48) {
        int8x8_t prime = (int8x8_t)v48;
      }
      else {
        int8x8_t prime = (int8x8_t)v47;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v36 = (unint64_t)__p[1];
      if ((void *)*(void *)&prime > __p[1]) {
        goto LABEL_78;
      }
      if ((void *)*(void *)&prime < __p[1])
      {
        unint64_t v56 = vcvtps_u32_f32((float)*((unint64_t *)&v107 + 1) / v108);
        if (__p[1] < (void *)3
          || (uint8x8_t v57 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v57.i16[0] = vaddlv_u8(v57), v57.u32[0] > 1uLL))
        {
          unint64_t v56 = std::__next_prime(v56);
        }
        else
        {
          uint64_t v58 = 1 << -(char)__clz(v56 - 1);
          if (v56 >= 2) {
            unint64_t v56 = v58;
          }
        }
        if (*(void *)&prime <= v56) {
          int8x8_t prime = (int8x8_t)v56;
        }
        if ((void *)*(void *)&prime >= __p[1])
        {
          unint64_t v36 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_78:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v50 = operator new(8 * *(void *)&prime);
            uint64_t v51 = __p[0];
            __p[0] = v50;
            if (v51) {
              operator delete(v51);
            }
            uint64_t v52 = 0;
            __p[1] = (void *)prime;
            do
              *((void *)__p[0] + v52++) = 0;
            while (*(void *)&prime != v52);
            uint64_t v53 = (void **)v107;
            if ((void)v107)
            {
              unint64_t v54 = *(void *)(v107 + 8);
              uint8x8_t v55 = (uint8x8_t)vcnt_s8(prime);
              v55.i16[0] = vaddlv_u8(v55);
              if (v55.u32[0] > 1uLL)
              {
                if (v54 >= *(void *)&prime) {
                  v54 %= *(void *)&prime;
                }
              }
              else
              {
                v54 &= *(void *)&prime - 1;
              }
              *((void *)__p[0] + v54) = &v107;
              for (i = *v53; i; unint64_t v54 = v60)
              {
                unint64_t v60 = i[1];
                if (v55.u32[0] > 1uLL)
                {
                  if (v60 >= *(void *)&prime) {
                    v60 %= *(void *)&prime;
                  }
                }
                else
                {
                  v60 &= *(void *)&prime - 1;
                }
                if (v60 != v54)
                {
                  if (!*((void *)__p[0] + v60))
                  {
                    *((void *)__p[0] + v60) = v53;
                    goto LABEL_103;
                  }
                  *uint64_t v53 = (void *)*i;
                  void *i = **((void **)__p[0] + v60);
                  **((void **)__p[0] + v60) = i;
                  uint64_t i = v53;
                }
                unint64_t v60 = v54;
LABEL_103:
                uint64_t v53 = (void **)i;
                uint64_t i = (void *)*i;
              }
            }
            unint64_t v36 = (unint64_t)prime;
            goto LABEL_107;
          }
          uint64_t v72 = __p[0];
          __p[0] = 0;
          if (v72) {
            operator delete(v72);
          }
          unint64_t v36 = 0;
          __p[1] = 0;
        }
      }
LABEL_107:
      if ((v36 & (v36 - 1)) != 0)
      {
        if (v3 >= v36) {
          unint64_t v2 = v3 % v36;
        }
        else {
          unint64_t v2 = v3;
        }
      }
      else
      {
        unint64_t v2 = (v36 - 1) & v3;
      }
      goto LABEL_112;
    }
    while (1)
    {
      unint64_t v40 = *(void *)(v13 + 8);
      if (v40 == v3) {
        break;
      }
      if (v38 > 1)
      {
        if ((void *)v40 >= __p[1]) {
          v40 %= (unint64_t)__p[1];
        }
      }
      else
      {
        v40 &= (unint64_t)__p[1] - 1;
      }
      if (v40 != v2) {
        goto LABEL_66;
      }
LABEL_65:
      uint64_t v13 = *(void *)v13;
      if (!v13) {
        goto LABEL_66;
      }
    }
    id v41 = *(id *)(v13 + 16);
    id v42 = v34;
    char v43 = v42;
    if (v41 != v42)
    {
      char v44 = [v41 isEqualToString:v42];

      if (v44) {
        goto LABEL_122;
      }
      goto LABEL_65;
    }

LABEL_122:
    *(_DWORD *)(v13 + 24) = *((_DWORD *)v32 + 10);
    *(_OWORD *)(v13 + 32) = *((_OWORD *)v32 + 3);
    long long v64 = *((_OWORD *)v32 + 4);
    long long v65 = *((_OWORD *)v32 + 5);
    long long v66 = *((_OWORD *)v32 + 6);
    *(_OWORD *)(v13 + 90) = *(_OWORD *)((char *)v32 + 106);
    *(_OWORD *)(v13 + 64) = v65;
    *(_OWORD *)(v13 + 80) = v66;
    *(_OWORD *)(v13 + 48) = v64;
    objc_storeStrong((id *)(v13 + 112), (id)v32[16]);
    *(_WORD *)(v13 + 120) = *((_WORD *)v32 + 68);
    long long v67 = *((_OWORD *)v32 + 9);
    long long v68 = *((_OWORD *)v32 + 10);
    *(_WORD *)(v13 + 160) = *((_WORD *)v32 + 88);
    *(_OWORD *)(v13 + 128) = v67;
    *(_OWORD *)(v13 + 144) = v68;

LABEL_123:
    long long v69 = (void *)v32[1];
    if (v69)
    {
      do
      {
        long long v70 = v69;
        long long v69 = (void *)*v69;
      }
      while (v69);
    }
    else
    {
      do
      {
        long long v70 = (void *)v32[2];
        BOOL v71 = *v70 == (void)v32;
        int v32 = v70;
      }
      while (!v71);
    }
    int v32 = v70;
  }
  while (v70 != (void *)(v101 + 272));
  __int16 v73 = (uint64_t **)v107;
  if ((void)v107)
  {
    unint64_t v3 = 0x1E4F2B000uLL;
    do
    {
      uint64_t v74 = v73[2];
      if (!v124) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      int8x16_t v75 = (const HDStatisticsNoiseLevel *)(*(uint64_t (**)(void *, uint64_t *))(*v124 + 48))(v124, (uint64_t *)v73 + 3);
      HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)&v109, v75);
      HDStatisticsNoiseLevel::finalizeSamples((HDStatisticsNoiseLevel *)&v109);
      if ((v105 & 2) != 0)
      {
        double v77 = v110[0];
        double v78 = 0.0;
        if (v110[0] > 0.0)
        {
          double v76 = v109;
          if (v109 > 0.0) {
            double v78 = log10(v109 / v110[0]) * 10.0;
          }
        }
        int64_t v79 = objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v104, v78, v77, v76);
        [v98 setObject:v79 forKeyedSubscript:v74];
      }
      if ((v105 & 4) != 0)
      {
        unint64_t v80 = [MEMORY[0x1E4F2B370] quantityWithUnit:v104 doubleValue:v110[2]];
        [v96 setObject:v80 forKeyedSubscript:v74];
      }
      if ((v105 & 8) != 0)
      {
        int v81 = [MEMORY[0x1E4F2B370] quantityWithUnit:v104 doubleValue:v110[1]];
        [v94 setObject:v81 forKeyedSubscript:v74];
      }
      if ((v105 & 0x20) != 0)
      {
        double v82 = v110[5];
        double v83 = v110[6];
        long long v84 = [MEMORY[0x1E4F2B370] quantityWithUnit:v104 doubleValue:v110[4]];
        [v95 setObject:v84 forKeyedSubscript:v74];

        int64_t v85 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v82, v83);
        [v97 setObject:v85 forKeyedSubscript:v74];
      }
      if (!v124) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v13 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)((*(uint64_t (**)(void *, uint64_t *))(*v124 + 48))(v124, (uint64_t *)v73 + 3) + 32));
      [v99 setObject:v13 forKeyedSubscript:v74];

      __int16 v73 = (uint64_t **)*v73;
    }
    while (v73);
  }
LABEL_156:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsNoiseLevel>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsNoiseLevel>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsNoiseLevel>>>>::~__hash_table((uint64_t)__p);
  if ((v105 & 2) != 0) {
    [v103 setAverageQuantityBySource:v98];
  }
  if ((v105 & 4) != 0) {
    [v103 setMinimumQuantityBySource:v96];
  }
  if ((v105 & 8) != 0) {
    [v103 setMaximumQuantityBySource:v94];
  }
  if ((v105 & 0x20) != 0)
  {
    [v103 setMostRecentQuantityBySource:v95];
    [v103 setMostRecentQuantityDateIntervalBySource:v97];
  }
  [v103 setDataCountBySource:v99];

LABEL_165:
  std::__function::__value_func<HDStatisticsNoiseLevel const& ()(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)>::~__value_func[abi:ne180100](v123);
  long long v86 = [*(id *)(a1 + 16) _unitForChangeInCanonicalUnit];
  __int16 v87 = [v103 averageQuantity];
  if (v87)
  {
    uint64_t v13 = [v103 averageQuantity];
    if (([(id)v13 isCompatibleWithUnit:v86] & 1) == 0)
    {

      goto LABEL_179;
    }
  }
  long long v88 = [v103 minimumQuantity];
  if (v88)
  {
    unint64_t v3 = [v103 minimumQuantity];
    if (![(id)v3 isCompatibleWithUnit:v86])
    {
      int v89 = 1;
      goto LABEL_173;
    }
  }
  __int16 v90 = [v103 maximumQuantity];
  if (v90)
  {
    unint64_t v91 = [v103 maximumQuantity];
    int v92 = [v91 isCompatibleWithUnit:v86];

    int v89 = v92 ^ 1;
    if (v88) {
      goto LABEL_173;
    }
LABEL_177:
    if (!v87) {
      goto LABEL_178;
    }
LABEL_174:

    if ((v89 & 1) == 0) {
      goto LABEL_180;
    }
LABEL_179:
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8], @"Expected compatibility with %@", v86 format];
    goto LABEL_180;
  }
  int v89 = 0;
  if (!v88) {
    goto LABEL_177;
  }
LABEL_173:

  if (v87) {
    goto LABEL_174;
  }
LABEL_178:

  if (v89) {
    goto LABEL_179;
  }
LABEL_180:

  return v103;
}

void sub_1BD0FDF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58)
{
  std::__function::__value_func<HDStatisticsNoiseLevel const& ()(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)>::~__value_func[abi:ne180100]((void *)(v58 - 168));
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 312);
  uint64_t v2 = *(void *)(a1 + 328);
  if (v1 != (*(void *)(a1 + 336) - v2) >> 3)
  {
    long long v4 = (void **)(a1 + 328);
    *(void *)(a1 + 336) = v2;
    std::vector<long long>::reserve((void **)(a1 + 328), v1);
    double v5 = *(void **)(a1 + 304);
    if (v5)
    {
      id v6 = *(char **)(a1 + 336);
      do
      {
        uint64_t v7 = v5[2];
        unint64_t v8 = *(void *)(a1 + 344);
        if ((unint64_t)v6 >= v8)
        {
          id v10 = (char *)*v4;
          uint64_t v11 = (v6 - (unsigned char *)*v4) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            id v10 = *(char **)(a1 + 328);
            id v6 = *(char **)(a1 + 336);
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v16 = (void *)(v14 + 8 * v11);
          void *v16 = v7;
          uint64_t v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            uint64_t v17 = *((void *)v6 - 1);
            v6 -= 8;
            *--uint64_t v16 = v17;
          }
          *(void *)(a1 + 328) = v16;
          *(void *)(a1 + 336) = v9;
          *(void *)(a1 + 344) = v14 + 8 * v15;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)id v6 = v7;
          uint64_t v9 = v6 + 8;
        }
        *(void *)(a1 + 336) = v9;
        double v5 = (void *)*v5;
        id v6 = v9;
      }
      while (v5);
    }
    __n128 v18 = (id *)(a1 + 88);
    id WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      id v20 = objc_loadWeakRetained(v18);
      [v20 orderSourceIDs:v4];
    }
  }
}

void sub_1BD0FE39C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2) {
    a2 = v4 * floor(a2 / v4);
  }
  double v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    __int16 v123 = (double **)(a1 + 96);
    uint64_t v118 = (void *)(a1 + 64);
    uint64_t v115 = a1 + 120;
    location = (id *)(a1 + 88);
    uint64_t v113 = (void *)(a1 + 272);
    do
    {
      id v6 = *(double **)(a1 + 96);
      uint64_t v7 = *(long long **)(a1 + 104);
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v6) >> 4);
      if (v8)
      {
        if (v8 != 1)
        {
          double v27 = a2;
          double v28 = a2;
          double v29 = v5;
          uint64_t v30 = *(void *)(a1 + 96);
          if (v6 != (double *)v7)
          {
            do
            {
              double v31 = *(double *)(v30 + 8);
              double v32 = *(double *)(v30 + 16);
              if (v31 > v29 && v31 < v28) {
                double v28 = *(double *)(v30 + 8);
              }
              if (v32 > v5) {
                double v34 = *(double *)(v30 + 16);
              }
              else {
                double v34 = v27;
              }
              if (v32 < v27)
              {
                double v29 = v5;
                double v27 = v34;
              }
              v30 += 48;
            }
            while ((long long *)v30 != v7);
          }
          if (v27 >= v28) {
            double v35 = v28;
          }
          else {
            double v35 = v27;
          }
          double v36 = *(double *)(a1 + 16);
          if (v36 > 0.0)
          {
            double v37 = v36 * floor(v35 / v36);
            double v38 = v36 * floor((v36 + v5) / v36);
            if (v37 >= v38) {
              double v35 = v37;
            }
            else {
              double v35 = v38;
            }
          }
          *__int16 v123 = 0;
          v123[1] = 0;
          v123[2] = 0;
          if (v6 != (double *)v7)
          {
            if (v8 > 0x555555555555555) {
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            }
            long long v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v8);
            id v42 = *(double **)(a1 + 96);
            id v41 = *(double **)(a1 + 104);
            char v43 = v39;
            if (v41 != v42)
            {
              do
              {
                long long v44 = *((_OWORD *)v41 - 3);
                long long v45 = *((_OWORD *)v41 - 2);
                *(_OWORD *)(v43 - 21) = *(_OWORD *)((char *)v41 - 21);
                *((_OWORD *)v43 - 3) = v44;
                *((_OWORD *)v43 - 2) = v45;
                v43 -= 48;
                v41 -= 6;
              }
              while (v41 != v42);
              id v41 = *v123;
            }
            *(void *)(a1 + 96) = v43;
            *(void *)(a1 + 104) = v39;
            *(void *)(a1 + 112) = &v39[48 * v40];
            if (v41) {
              operator delete(v41);
            }
          }
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_updateSourceOrder(a1);
          id WeakRetained = objc_loadWeakRetained(location);

          if (WeakRetained)
          {
            *(void *)&v125.double var0 = a1;
            unint64_t v47 = 126 - 2 * __clz(v8);
            if (v6 == (double *)v7) {
              uint64_t v48 = 0;
            }
            else {
              uint64_t v48 = v47;
            }
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder*,false>((unint64_t)v6, v7, (uint64_t)&v125, v48, 1);
          }
          else
          {
            unint64_t v59 = 126 - 2 * __clz(v8);
            if (v6 == (double *)v7) {
              uint64_t v48 = 0;
            }
            else {
              uint64_t v48 = v59;
            }
          }
          std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder*,false>((unint64_t)v6, v7, v48, 1);
          if (*(unsigned char *)(a1 + 25)) {
            id v117 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
          }
          else {
            id v117 = 0;
          }
          if (v6 == (double *)v7)
          {
LABEL_155:
            long long v106 = *(void **)(a1 + 264);
            if (v106 != v113)
            {
              do
              {
                long long v107 = (void *)v106[1];
                if (v107)
                {
                  do
                  {
                    float v108 = v107;
                    long long v107 = (void *)*v107;
                  }
                  while (v107);
                }
                else
                {
                  do
                  {
                    float v108 = (void *)v106[2];
                    BOOL v109 = *v108 == (void)v106;
                    long long v106 = v108;
                  }
                  while (!v109);
                }
                long long v106 = v108;
              }
              while (v108 != v113);
            }
            *(double *)(a1 + 56) = v35;

            if (v6) {
              operator delete(v6);
            }
            goto LABEL_164;
          }
          int64_t v116 = 0;
          char v60 = 0;
          long long v61 = v6;
          while (2)
          {
            long long v62 = *((_OWORD *)v61 + 1);
            *(_OWORD *)&v125.double var0 = *(_OWORD *)v61;
            *(_OWORD *)&v125.double var2 = v62;
            *(double *)&v125.BOOL var4 = v61[4];
            if (!v125.var4 || v125.var1 > v35)
            {
LABEL_96:
              unint64_t v63 = *(_OWORD **)(a1 + 104);
              unint64_t v64 = *(void *)(a1 + 112);
              if ((unint64_t)v63 < v64)
              {
                long long v65 = *(_OWORD *)v61;
                long long v66 = *((_OWORD *)v61 + 2);
                v63[1] = *((_OWORD *)v61 + 1);
                v63[2] = v66;
                *unint64_t v63 = v65;
                long long v67 = v63 + 3;
                goto LABEL_116;
              }
              unint64_t v68 = 0xAAAAAAAAAAAAAAABLL * (((char *)v63 - (char *)*v123) >> 4);
              unint64_t v69 = v68 + 1;
              if (v68 + 1 > 0x555555555555555) {
                std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v70 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v64 - (void)*v123) >> 4);
              if (2 * v70 > v69) {
                unint64_t v69 = 2 * v70;
              }
              if (v70 >= 0x2AAAAAAAAAAAAAALL) {
                unint64_t v71 = 0x555555555555555;
              }
              else {
                unint64_t v71 = v69;
              }
              if (v71) {
                unint64_t v71 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v71);
              }
              else {
                uint64_t v72 = 0;
              }
              double v77 = (_OWORD *)(v71 + 48 * v68);
              long long v78 = *(_OWORD *)v61;
              long long v79 = *((_OWORD *)v61 + 2);
              v77[1] = *((_OWORD *)v61 + 1);
              v77[2] = v79;
              _OWORD *v77 = v78;
              int v81 = *(double **)(a1 + 96);
              unint64_t v80 = *(double **)(a1 + 104);
              double v82 = v77;
              if (v80 != v81)
              {
                do
                {
                  long long v83 = *((_OWORD *)v80 - 3);
                  long long v84 = *((_OWORD *)v80 - 2);
                  *(_OWORD *)((char *)v82 - 21) = *(_OWORD *)((char *)v80 - 21);
                  *(v82 - 3) = v83;
                  *(v82 - 2) = v84;
                  v82 -= 3;
                  v80 -= 6;
                }
                while (v80 != v81);
                unint64_t v80 = *v123;
              }
              long long v67 = v77 + 3;
              *(void *)(a1 + 96) = v82;
              *(void *)(a1 + 104) = v77 + 3;
              *(void *)(a1 + 112) = v71 + 48 * v72;
              if (v80)
              {
                int64_t v85 = v80;
                goto LABEL_115;
              }
              goto LABEL_116;
            }
            double var2 = v125.var2;
            if (v125.var2 >= v35)
            {
              double var0 = v125.var0;
              v125.double var2 = v35;
              BOOL v74 = var2 > v35;
              v125.BOOL var4 = v125.var1 < v35;
              if (v125.var1 >= v35) {
                goto LABEL_96;
              }
              int64_t var3 = v125.var3;
              BOOL var5 = v125.var5;
              double v75 = v35;
            }
            else
            {
              v125.BOOL var4 = v125.var2 > v125.var1;
              if (v125.var2 <= v125.var1) {
                goto LABEL_96;
              }
              BOOL v74 = 0;
              int64_t var3 = 0;
              BOOL var5 = 0;
              double var2 = 0.0;
              double v75 = 0.0;
              double var0 = 0.0;
            }
            HDStatisticsNoiseLevel::applyMaskToSample((uint64_t)&v125, v118);
            int v86 = *((unsigned __int8 *)v61 + 42);
            int v122 = *((unsigned __int8 *)v61 + 41);
            char v119 = *((unsigned char *)v61 + 40);
            if (!v125.var4) {
              goto LABEL_138;
            }
            if (v60)
            {
              unint64_t v87 = v125.var3;
              if (v116 == v125.var3 || *(unsigned char *)(a1 + 24))
              {
                HDStatisticsRelative<HDStatisticsNoiseLevel>::addSample(v115, &v125, v86 == 0);
                int v86 = 1;
              }
            }
            else
            {
              HDStatisticsRelative<HDStatisticsNoiseLevel>::addSample(v115, &v125, v86 == 0);
              int v86 = 1;
              unint64_t v87 = v125.var3;
              int64_t v116 = v125.var3;
            }
            if (!*(unsigned char *)(a1 + 25)) {
              goto LABEL_137;
            }
            long long v88 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_bundleIdentifierForSourceID(a1, v87);
            if (!v88) {
              goto LABEL_136;
            }
            int v89 = [v117 objectForKeyedSubscript:v88];
            __int16 v90 = v89;
            if (v89)
            {
              if ([v89 longLongValue] != v87 && !*(unsigned char *)(a1 + 24))
              {
LABEL_135:

LABEL_136:
LABEL_137:
                char v60 = 1;
LABEL_138:
                if (v74)
                {
                  BOOL v94 = v86 != 0;
                  id v96 = *(double **)(a1 + 104);
                  unint64_t v95 = *(void *)(a1 + 112);
                  if ((unint64_t)v96 >= v95)
                  {
                    int64_t v85 = *v123;
                    unint64_t v97 = 0xAAAAAAAAAAAAAAABLL * (((char *)v96 - (char *)*v123) >> 4);
                    unint64_t v98 = v97 + 1;
                    if (v97 + 1 > 0x555555555555555) {
                      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                    }
                    unint64_t v99 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v95 - (void)v85) >> 4);
                    if (2 * v99 > v98) {
                      unint64_t v98 = 2 * v99;
                    }
                    if (v99 >= 0x2AAAAAAAAAAAAAALL) {
                      unint64_t v100 = 0x555555555555555;
                    }
                    else {
                      unint64_t v100 = v98;
                    }
                    if (v100)
                    {
                      unint64_t v100 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v100);
                      int64_t v85 = *(double **)(a1 + 96);
                      id v96 = *(double **)(a1 + 104);
                    }
                    else
                    {
                      uint64_t v101 = 0;
                    }
                    unint64_t v102 = v100 + 48 * v97;
                    *(double *)unint64_t v102 = var0;
                    *(double *)(v102 + 8) = v75;
                    *(double *)(v102 + 16) = var2;
                    *(void *)(v102 + 24) = var3;
                    *(unsigned char *)(v102 + 32) = v74;
                    *(unsigned char *)(v102 + 33) = var5;
                    *(unsigned char *)(v102 + 40) = v119;
                    *(unsigned char *)(v102 + 41) = v122;
                    *(unsigned char *)(v102 + 42) = v94;
                    unint64_t v103 = v102;
                    if (v96 != v85)
                    {
                      do
                      {
                        long long v104 = *((_OWORD *)v96 - 3);
                        long long v105 = *((_OWORD *)v96 - 2);
                        *(_OWORD *)(v103 - 21) = *(_OWORD *)((char *)v96 - 21);
                        *(_OWORD *)(v103 - 48) = v104;
                        *(_OWORD *)(v103 - 32) = v105;
                        v103 -= 48;
                        v96 -= 6;
                      }
                      while (v96 != v85);
                      int64_t v85 = *v123;
                    }
                    long long v67 = (_OWORD *)(v102 + 48);
                    *(void *)(a1 + 96) = v103;
                    *(void *)(a1 + 104) = v102 + 48;
                    *(void *)(a1 + 112) = v100 + 48 * v101;
                    if (v85) {
LABEL_115:
                    }
                      operator delete(v85);
                  }
                  else
                  {
                    *id v96 = var0;
                    v96[1] = v75;
                    v96[2] = var2;
                    *((void *)v96 + 3) = var3;
                    *((unsigned char *)v96 + 32) = v74;
                    *((unsigned char *)v96 + 33) = var5;
                    *((unsigned char *)v96 + 40) = v119;
                    *((unsigned char *)v96 + 41) = v122;
                    long long v67 = v96 + 6;
                    *((unsigned char *)v96 + 42) = v94;
                  }
LABEL_116:
                  *(void *)(a1 + 104) = v67;
                }
                v61 += 6;
                if (v61 == (double *)v7) {
                  goto LABEL_155;
                }
                continue;
              }
            }
            else
            {
              unint64_t v91 = [NSNumber numberWithLongLong:v87];
              [v117 setObject:v91 forKeyedSubscript:v88];
            }
            break;
          }
          unint64_t v92 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_canonicalSourceIDForSourceID(a1, v87);
          uint64_t v93 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_statisticsForSource(a1, v92);
          HDStatisticsRelative<HDStatisticsNoiseLevel>::addSample((uint64_t)v93, &v125, v122 == 0);
          LOBYTE(v122) = 1;
          goto LABEL_135;
        }
        double v9 = v6[1];
        double v10 = v6[2];
        int64_t v11 = *((void *)v6 + 3);
        char v12 = *((unsigned char *)v6 + 32);
        char v13 = *((unsigned char *)v6 + 33);
        if (v12)
        {
          BOOL v14 = v9 < a2;
          BOOL v15 = v10 > a2;
          if (v10 < a2) {
            double v16 = v6[2];
          }
          else {
            double v16 = a2;
          }
          if (v10 >= a2)
          {
            char v17 = *((unsigned char *)v6 + 33);
          }
          else
          {
            BOOL v14 = v10 > v9;
            char v17 = 0;
          }
          if (v10 < a2) {
            double v18 = 0.0;
          }
          else {
            double v18 = *v6;
          }
          if (v10 < a2) {
            double v19 = 0.0;
          }
          else {
            double v19 = a2;
          }
          if (v10 < a2) {
            double v20 = 0.0;
          }
          else {
            double v20 = v6[2];
          }
          if (v10 < a2) {
            uint64_t v21 = 0;
          }
          else {
            uint64_t v21 = *((void *)v6 + 3);
          }
          if (v10 < a2) {
            BOOL v15 = 0;
          }
          BOOL v22 = v10 > v9;
          if (v9 <= a2)
          {
            double v10 = v16;
            BOOL v23 = v14;
          }
          else
          {
            double v20 = v6[2];
            BOOL v23 = 0;
          }
          if (v9 > a2) {
            char v12 = *((unsigned char *)v6 + 33);
          }
          else {
            char v12 = v17;
          }
          if (v9 > a2) {
            double v24 = *v6;
          }
          else {
            double v24 = v18;
          }
          if (v9 > a2) {
            double v25 = v6[1];
          }
          else {
            double v25 = v19;
          }
          if (v9 > a2) {
            uint64_t v26 = *((void *)v6 + 3);
          }
          else {
            uint64_t v26 = v21;
          }
          if (v9 > a2) {
            BOOL v15 = v22;
          }
        }
        else
        {
          BOOL v23 = 0;
          uint64_t v26 = 0;
          BOOL v15 = 0;
          double v24 = 0.0;
          double v25 = 0.0;
          double v20 = 0.0;
        }
        int v49 = *((unsigned __int8 *)v6 + 42);
        int v50 = *((unsigned __int8 *)v6 + 41);
        int v51 = *((unsigned __int8 *)v6 + 40);
        v125.double var0 = *v6;
        v125.var1 = v9;
        v125.double var2 = v10;
        v125.int64_t var3 = v11;
        v125.BOOL var4 = v23;
        v125.BOOL var5 = v13;
        *(_DWORD *)(&v125.var5 + 1) = *(_DWORD *)((char *)v6 + 34);
        *(_WORD *)(&v125.var5 + 5) = *((_WORD *)v6 + 19);
        *(double *)&long long v126 = v24;
        *((double *)&v126 + 1) = v25;
        *(double *)&long long v127 = v20;
        *((void *)&v127 + 1) = v26;
        LOBYTE(v128) = v15;
        HIBYTE(v128) = v12;
        HDStatisticsNoiseLevel::applyMaskToSample((uint64_t)&v125, v118);
        BOOL v52 = v51 != 0;
        BOOL v53 = v50 != 0;
        BOOL v54 = v49 != 0;
        if (v125.var4)
        {
          HDStatisticsRelative<HDStatisticsNoiseLevel>::addSample(v115, &v125, v49 == 0);
          if (*(unsigned char *)(a1 + 25))
          {
            unint64_t v55 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_canonicalSourceIDForSourceID(a1, v125.var3);
            unint64_t v56 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_statisticsForSource(a1, v55);
            HDStatisticsRelative<HDStatisticsNoiseLevel>::addSample((uint64_t)v56, &v125, v50 == 0);
          }
          BOOL v52 = 1;
          BOOL v53 = 1;
          BOOL v54 = 1;
        }
        if ((_BYTE)v128)
        {
          LOWORD(v124) = v128;
          long long v57 = v127;
          uint64_t v58 = *v123;
          *(_OWORD *)uint64_t v58 = v126;
          *((_OWORD *)v58 + 1) = v57;
          *((void *)v58 + 4) = v124;
          *((unsigned char *)v58 + 40) = v52;
          *((unsigned char *)v58 + 41) = v53;
          *((unsigned char *)v58 + 42) = v54;
        }
        else
        {
          *(void *)(a1 + 104) = *(void *)(a1 + 96);
        }
      }
      *(double *)(a1 + 56) = a2;
LABEL_164:
      double v110 = *(double *)(a1 + 56);
      if (v110 == v5)
      {
        long long v111 = [MEMORY[0x1E4F28B00] currentHandler];
        long long v112 = [NSString stringWithUTF8String:"void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeThroughTime(double) [Statistics = HDStatisticsRelative<HDStatisticsNoiseLevel>]"];
        [v111 handleFailureInFunction:v112 file:@"HDStatisticsBucket.hpp" lineNumber:234 description:@"Failed to make forward progress during statistics merge."];

        double v110 = *(double *)(a1 + 56);
      }
      double v5 = v110;
    }
    while (v110 < a2);
  }
}

void sub_1BD0FED30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void HDStatisticsRelative<HDStatisticsNoiseLevel>::addSample(uint64_t a1, HDRawQuantitySample *a2, char a3)
{
  double v4 = a2;
  int v6 = 2 * (a2->var0 != -1.79769313e308);
  if (a2->var0 == 1.79769313e308) {
    int v6 = 1;
  }
  if (!v6)
  {
    if (*(_DWORD *)a1 || *(void *)(a1 + 40)) {
      return;
    }
    uint64_t v7 = (HDStatisticsNoiseLevel *)(a1 + 8);
    goto LABEL_19;
  }
  if (v6 == 1)
  {
    if (*(_DWORD *)a1) {
      return;
    }
    *(_DWORD *)a1 = 1;
    goto LABEL_15;
  }
  if (v6 != 2) {
    return;
  }
  if (*(_DWORD *)a1 != 2)
  {
    *(_DWORD *)a1 = 2;
LABEL_15:
    double v9 = [[HDQuantitySampleOverlapProcessor alloc] initWithOverlapFunction:1];
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 66) = 0u;
    double v10 = *(void **)(a1 + 88);
    *(void *)(a1 + 88) = v9;
    int64_t v11 = v9;

    *(_WORD *)(a1 + 96) = 257;
    if (!*(unsigned char *)(a1 + 80) || *(double *)(a1 + 56) <= *(double *)(a1 + 112))
    {
      long long v12 = *(_OWORD *)(a1 + 120);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a1 + 104);
      *(_OWORD *)(a1 + 64) = v12;
      *(_WORD *)(a1 + 80) = *(_WORD *)(a1 + 136);
    }
    uint64_t v7 = (HDStatisticsNoiseLevel *)(a1 + 8);
LABEL_19:
    a2 = v4;
    char v8 = a3;
    goto LABEL_20;
  }
  uint64_t v7 = (HDStatisticsNoiseLevel *)(a1 + 8);
  char v8 = 1;
LABEL_20:

  HDStatisticsNoiseLevel::addSample(v7, a2, v8);
}

uint64_t **HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = a2;
  unint64_t v3 = *(void **)(a1 + 272);
  if (!v3) {
    goto LABEL_11;
  }
  double v4 = (uint64_t **)(a1 + 272);
  do
  {
    uint64_t v5 = v3[4];
    BOOL v6 = v5 < a2;
    if (v5 >= a2) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = v3 + 1;
    }
    if (!v6) {
      double v4 = (uint64_t **)v3;
    }
    unint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t **)(a1 + 272) || (uint64_t)v4[4] > a2)
  {
LABEL_11:
    char v8 = (uint64_t **)(a1 + 264);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 264), a2, &v10);
    double v4 = std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v8, a2, &v10);
  }
  return v4 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    uint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((void *)(a1 + 352), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_bundleIdentifierForSourceID(a1, a2);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      id v10 = v6;
      uint64_t v7 = (void *)(a1 + 392);
      char v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        int64_t v11 = &v10;
        *((void *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        id v6 = v10;
      }
    }
  }
  return a2;
}

void sub_1BD0FF074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  double v4 = (id *)(a1 + 88);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    id v6 = (void *)(a1 + 432);
    uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
    if (v7)
    {
      id v8 = (id)v7[3];
    }
    else
    {
      id v9 = objc_loadWeakRetained(v4);
      id v8 = [v9 bundleIdentifierForSourceID:a2];

      if (v8)
      {
        id v10 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
        objc_storeStrong(v10 + 3, v8);
      }
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1BD0FF158(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, void *a3)
{
  id v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        uint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        id v6 = v7;
        if (!*v7) {
          goto LABEL_10;
        }
      }
      if (v8 >= a2) {
        return v7;
      }
      uint64_t v5 = v7[1];
    }
    while (v5);
    id v6 = v7 + 1;
  }
  else
  {
    uint64_t v7 = a1 + 1;
  }
LABEL_10:
  id v9 = (char *)operator new(0xB8uLL);
  *((void *)v9 + 4) = *a3;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  *(_OWORD *)(v9 + 104) = 0u;
  *(_OWORD *)(v9 + 120) = 0u;
  *(_OWORD *)(v9 + 136) = 0u;
  *(_OWORD *)(v9 + 152) = 0u;
  *(_OWORD *)(v9 + 168) = 0u;
  *((void *)v9 + 16) = [[HDQuantitySampleOverlapProcessor alloc] initWithOverlapFunction:1];
  *((_WORD *)v9 + 68) = 257;
  *((_OWORD *)v9 + 9) = 0u;
  *((_OWORD *)v9 + 10) = 0u;
  *((_WORD *)v9 + 88) = 0;
  std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
  return (uint64_t **)v9;
}

void sub_1BD0FF274(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v12 = a2 - 3;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 4);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v103 = *((void *)a2 - 3);
                uint64_t v104 = *(void *)(v13 + 24);
                if (v103 == v104) {
                  return;
                }
                long long v105 = *(char **)(*(void *)a3 + 328);
                long long v106 = *(char **)(*(void *)a3 + 336);
                long long v107 = v105;
                float v108 = v105;
                if (v105 == v106) {
                  goto LABEL_171;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)v13, (long long *)(v13 + 48), a2 - 3, a3);
                return;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, (uint64_t)(a2 - 3), a3);
                return;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, v13 + 144, (uint64_t)(a2 - 3), a3);
                return;
              default:
                JUMPOUT(0);
            }
            do
            {
              if (*(void *)v108 == v103) {
                goto LABEL_168;
              }
              v108 += 8;
            }
            while (v108 != v106);
            float v108 = *(char **)(*(void *)a3 + 336);
LABEL_168:
            while (*(void *)v107 != v104)
            {
              v107 += 8;
              if (v107 == v106)
              {
                long long v107 = *(char **)(*(void *)a3 + 336);
                break;
              }
            }
LABEL_171:
            if (v108 - v105 < v107 - v105)
            {
              *(_OWORD *)v226 = *(_OWORD *)(v13 + 16);
              *(_OWORD *)&v226[16] = *(_OWORD *)(v13 + 32);
              long long v218 = *(_OWORD *)v13;
              long long v109 = *v12;
              long long v110 = *(a2 - 2);
              *(_OWORD *)(v13 + 27) = *(long long *)((char *)a2 - 21);
              *(_OWORD *)unint64_t v13 = v109;
              *(_OWORD *)(v13 + 16) = v110;
              *(long long *)((char *)a2 - 21) = *(_OWORD *)&v226[11];
              *unint64_t v12 = v218;
              *(a2 - 2) = *(_OWORD *)v226;
            }
            return;
          }
          if (v14 <= 1151)
          {
            long long v111 = (long long *)(v13 + 48);
            BOOL v113 = (long long *)v13 == a2 || v111 == a2;
            if (a5)
            {
              if (!v113)
              {
                unint64_t v114 = v13;
                do
                {
                  unint64_t v115 = v114;
                  unint64_t v114 = (unint64_t)v111;
                  uint64_t v116 = *(void *)(v115 + 72);
                  uint64_t v117 = *(void *)(v115 + 24);
                  if (v116 != v117)
                  {
                    uint64_t v118 = *(char **)(*(void *)a3 + 328);
                    char v119 = *(char **)(*(void *)a3 + 336);
                    double v120 = v118;
                    double v121 = v118;
                    if (v118 != v119)
                    {
                      do
                      {
                        if (*(void *)v121 == v116) {
                          goto LABEL_196;
                        }
                        v121 += 8;
                      }
                      while (v121 != v119);
                      double v121 = *(char **)(*(void *)a3 + 336);
LABEL_196:
                      while (*(void *)v120 != v117)
                      {
                        v120 += 8;
                        if (v120 == v119)
                        {
                          double v120 = *(char **)(*(void *)a3 + 336);
                          break;
                        }
                      }
                    }
                    if (v121 - v118 < v120 - v118)
                    {
                      uint64_t v227 = *(void *)(v114 + 16);
                      long long v219 = *(_OWORD *)v114;
                      long long v236 = *(_OWORD *)(v115 + 80);
                      unint64_t v122 = v114;
                      while (1)
                      {
                        long long v123 = *(_OWORD *)(v115 + 16);
                        *(_OWORD *)unint64_t v122 = *(_OWORD *)v115;
                        *(_OWORD *)(v122 + 16) = v123;
                        *(_OWORD *)(v122 + 27) = *(_OWORD *)(v115 + 27);
                        if (v115 == v13) {
                          break;
                        }
                        unint64_t v122 = v115;
                        uint64_t v124 = *(void *)(v115 - 24);
                        if (v116 != v124)
                        {
                          HDRawQuantitySample v125 = *(char **)(*(void *)a3 + 328);
                          long long v126 = *(char **)(*(void *)a3 + 336);
                          long long v127 = v125;
                          __int16 v128 = v125;
                          if (v125 != v126)
                          {
                            do
                            {
                              if (*(void *)v128 == v116) {
                                goto LABEL_208;
                              }
                              v128 += 8;
                            }
                            while (v128 != v126);
                            __int16 v128 = *(char **)(*(void *)a3 + 336);
LABEL_208:
                            while (*(void *)v127 != v124)
                            {
                              v127 += 8;
                              if (v127 == v126)
                              {
                                long long v127 = *(char **)(*(void *)a3 + 336);
                                break;
                              }
                            }
                          }
                          unint64_t v115 = v122 - 48;
                          if (v128 - v125 < v127 - v125) {
                            continue;
                          }
                        }
                        goto LABEL_212;
                      }
                      unint64_t v122 = v13;
LABEL_212:
                      *(_OWORD *)unint64_t v122 = v219;
                      *(void *)(v122 + 16) = v227;
                      *(void *)(v122 + 24) = v116;
                      *(void *)(v122 + 32) = v236;
                      *(_DWORD *)(v122 + 39) = *(_DWORD *)((char *)&v236 + 7);
                    }
                  }
                  long long v111 = (long long *)(v114 + 48);
                }
                while ((long long *)(v114 + 48) != a2);
              }
            }
            else if (!v113)
            {
              do
              {
                unint64_t v201 = a1;
                a1 = (unint64_t)v111;
                uint64_t v202 = *(void *)(v201 + 72);
                uint64_t v203 = *(void *)(v201 + 24);
                if (v202 != v203)
                {
                  v204 = *(char **)(*(void *)a3 + 328);
                  v205 = *(char **)(*(void *)a3 + 336);
                  v206 = v204;
                  v207 = v204;
                  if (v204 != v205)
                  {
                    do
                    {
                      if (*(void *)v207 == v202) {
                        goto LABEL_312;
                      }
                      v207 += 8;
                    }
                    while (v207 != v205);
                    v207 = *(char **)(*(void *)a3 + 336);
LABEL_312:
                    while (*(void *)v206 != v203)
                    {
                      v206 += 8;
                      if (v206 == v205)
                      {
                        v206 = *(char **)(*(void *)a3 + 336);
                        break;
                      }
                    }
                  }
                  if (v207 - v204 < v206 - v204)
                  {
                    uint64_t v230 = *(void *)(a1 + 16);
                    long long v222 = *(_OWORD *)a1;
                    long long v239 = *(_OWORD *)(v201 + 80);
                    unint64_t v208 = a1;
                    do
                    {
                      v209 = (_OWORD *)v208;
                      unint64_t v208 = v201;
                      long long v210 = *(_OWORD *)(v201 + 16);
                      _OWORD *v209 = *(_OWORD *)v201;
                      v209[1] = v210;
                      *(_OWORD *)((char *)v209 + 27) = *(_OWORD *)(v201 + 27);
                      uint64_t v211 = *(void *)(v201 - 24);
                      if (v202 == v211) {
                        break;
                      }
                      v212 = *(char **)(*(void *)a3 + 328);
                      v213 = *(char **)(*(void *)a3 + 336);
                      v214 = v212;
                      v215 = v212;
                      if (v212 != v213)
                      {
                        do
                        {
                          if (*(void *)v215 == v202) {
                            goto LABEL_322;
                          }
                          v215 += 8;
                        }
                        while (v215 != v213);
                        v215 = *(char **)(*(void *)a3 + 336);
LABEL_322:
                        while (*(void *)v214 != v211)
                        {
                          v214 += 8;
                          if (v214 == v213)
                          {
                            v214 = *(char **)(*(void *)a3 + 336);
                            break;
                          }
                        }
                      }
                      unint64_t v201 = v208 - 48;
                    }
                    while (v215 - v212 < v214 - v212);
                    *(_OWORD *)unint64_t v208 = v222;
                    *(void *)(v208 + 16) = v230;
                    *(void *)(v208 + 24) = v202;
                    *(void *)(v208 + 32) = v239;
                    *(_DWORD *)(v208 + 39) = *(_DWORD *)((char *)&v239 + 7);
                  }
                }
                long long v111 = (long long *)(a1 + 48);
              }
              while ((long long *)(a1 + 48) != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((long long *)v13 != a2)
            {
              int64_t v129 = (v15 - 2) >> 1;
              int64_t v130 = v129;
              do
              {
                int64_t v131 = v130;
                if (v129 >= v130)
                {
                  uint64_t v132 = (2 * v130) | 1;
                  unint64_t v133 = v13 + 48 * v132;
                  if (2 * v131 + 2 < (uint64_t)v15)
                  {
                    uint64_t v134 = *(void *)(v133 + 24);
                    uint64_t v135 = *(void *)(v133 + 72);
                    if (v134 != v135)
                    {
                      v137 = *(char **)(*(void *)a3 + 328);
                      v136 = *(char **)(*(void *)a3 + 336);
                      v138 = v137;
                      v139 = v137;
                      if (v137 != v136)
                      {
                        do
                        {
                          if (*(void *)v139 == v134) {
                            goto LABEL_224;
                          }
                          v139 += 8;
                        }
                        while (v139 != v136);
                        v139 = *(char **)(*(void *)a3 + 336);
LABEL_224:
                        while (*(void *)v138 != v135)
                        {
                          v138 += 8;
                          if (v138 == v136)
                          {
                            v138 = *(char **)(*(void *)a3 + 336);
                            break;
                          }
                        }
                      }
                      v133 += 48 * (v139 - v137 < v138 - v137);
                      if (v139 - v137 < v138 - v137) {
                        uint64_t v132 = 2 * v131 + 2;
                      }
                    }
                  }
                  unint64_t v140 = v13 + 48 * v131;
                  uint64_t v141 = *(void *)(v133 + 24);
                  uint64_t v142 = *(void *)(v140 + 24);
                  if (v141 == v142) {
                    goto LABEL_238;
                  }
                  v144 = *(char **)(*(void *)a3 + 328);
                  v143 = *(char **)(*(void *)a3 + 336);
                  v145 = v144;
                  v146 = v144;
                  if (v144 != v143)
                  {
                    do
                    {
                      if (*(void *)v146 == v141) {
                        goto LABEL_234;
                      }
                      v146 += 8;
                    }
                    while (v146 != v143);
                    v146 = *(char **)(*(void *)a3 + 336);
LABEL_234:
                    while (*(void *)v145 != v142)
                    {
                      v145 += 8;
                      if (v145 == v143)
                      {
                        v145 = *(char **)(*(void *)a3 + 336);
                        break;
                      }
                    }
                  }
                  if (v146 - v144 >= v145 - v144)
                  {
LABEL_238:
                    uint64_t v228 = *(void *)(v140 + 16);
                    long long v220 = *(_OWORD *)v140;
                    long long v237 = *(_OWORD *)(v140 + 32);
                    long long v147 = *(_OWORD *)v133;
                    long long v148 = *(_OWORD *)(v133 + 16);
                    *(_OWORD *)(v140 + 27) = *(_OWORD *)(v133 + 27);
                    *(_OWORD *)unint64_t v140 = v147;
                    *(_OWORD *)(v140 + 16) = v148;
                    if (v129 >= v132)
                    {
                      while (1)
                      {
                        uint64_t v150 = 2 * v132;
                        uint64_t v132 = (2 * v132) | 1;
                        unint64_t v149 = v13 + 48 * v132;
                        uint64_t v151 = v150 + 2;
                        if (v151 < (uint64_t)v15)
                        {
                          uint64_t v152 = *(void *)(v149 + 24);
                          uint64_t v153 = *(void *)(v149 + 72);
                          if (v152 != v153)
                          {
                            v154 = *(char **)(*(void *)a3 + 328);
                            v155 = *(char **)(*(void *)a3 + 336);
                            v156 = v154;
                            v157 = v154;
                            if (v154 != v155)
                            {
                              do
                              {
                                if (*(void *)v157 == v152) {
                                  goto LABEL_246;
                                }
                                v157 += 8;
                              }
                              while (v157 != v155);
                              v157 = *(char **)(*(void *)a3 + 336);
LABEL_246:
                              while (*(void *)v156 != v153)
                              {
                                v156 += 8;
                                if (v156 == v155)
                                {
                                  v156 = *(char **)(*(void *)a3 + 336);
                                  break;
                                }
                              }
                            }
                            v149 += 48 * (v157 - v154 < v156 - v154);
                            if (v157 - v154 < v156 - v154) {
                              uint64_t v132 = v151;
                            }
                          }
                        }
                        uint64_t v158 = *(void *)(v149 + 24);
                        if (v158 != v142)
                        {
                          v160 = *(char **)(*(void *)a3 + 328);
                          v159 = *(char **)(*(void *)a3 + 336);
                          v161 = v160;
                          v162 = v160;
                          if (v160 != v159)
                          {
                            do
                            {
                              if (*(void *)v162 == v158) {
                                goto LABEL_256;
                              }
                              v162 += 8;
                            }
                            while (v162 != v159);
                            v162 = *(char **)(*(void *)a3 + 336);
LABEL_256:
                            while (*(void *)v161 != v142)
                            {
                              v161 += 8;
                              if (v161 == v159)
                              {
                                v161 = *(char **)(*(void *)a3 + 336);
                                break;
                              }
                            }
                          }
                          if (v162 - v160 < v161 - v160) {
                            break;
                          }
                        }
                        long long v163 = *(_OWORD *)v149;
                        long long v164 = *(_OWORD *)(v149 + 16);
                        *(_OWORD *)(v133 + 27) = *(_OWORD *)(v149 + 27);
                        *(_OWORD *)unint64_t v133 = v163;
                        *(_OWORD *)(v133 + 16) = v164;
                        unint64_t v133 = v149;
                        if (v129 < v132) {
                          goto LABEL_261;
                        }
                      }
                    }
                    unint64_t v149 = v133;
LABEL_261:
                    *(_OWORD *)unint64_t v149 = v220;
                    *(void *)(v149 + 16) = v228;
                    *(void *)(v149 + 24) = v142;
                    *(void *)(v149 + 32) = v237;
                    *(_DWORD *)(v149 + 39) = *(_DWORD *)((char *)&v237 + 7);
                  }
                }
                int64_t v130 = v131 - 1;
              }
              while (v131);
              int64_t v165 = v14 / 0x30uLL;
              do
              {
                uint64_t v166 = 0;
                *(_OWORD *)v229 = *(_OWORD *)(v13 + 16);
                *(_OWORD *)&v229[16] = *(_OWORD *)(v13 + 32);
                long long v221 = *(_OWORD *)v13;
                uint64_t v167 = v165 - 2;
                if (v165 < 2) {
                  uint64_t v167 = v165 - 1;
                }
                uint64_t v168 = v167 >> 1;
                unint64_t v169 = v13;
                do
                {
                  v170 = (_OWORD *)v169;
                  v169 += 48 * v166 + 48;
                  uint64_t v171 = 2 * v166;
                  uint64_t v166 = (2 * v166) | 1;
                  uint64_t v172 = v171 + 2;
                  if (v171 + 2 < v165)
                  {
                    uint64_t v173 = *(void *)(v169 + 24);
                    uint64_t v174 = *(void *)(v169 + 72);
                    if (v173 != v174)
                    {
                      v176 = *(char **)(*(void *)a3 + 328);
                      v175 = *(char **)(*(void *)a3 + 336);
                      v177 = v176;
                      v178 = v176;
                      if (v176 != v175)
                      {
                        do
                        {
                          if (*(void *)v178 == v173) {
                            goto LABEL_273;
                          }
                          v178 += 8;
                        }
                        while (v178 != v175);
                        v178 = *(char **)(*(void *)a3 + 336);
LABEL_273:
                        while (*(void *)v177 != v174)
                        {
                          v177 += 8;
                          if (v177 == v175)
                          {
                            v177 = *(char **)(*(void *)a3 + 336);
                            break;
                          }
                        }
                      }
                      v169 += 48 * (v178 - v176 < v177 - v176);
                      if (v178 - v176 < v177 - v176) {
                        uint64_t v166 = v172;
                      }
                    }
                  }
                  long long v179 = *(_OWORD *)v169;
                  long long v180 = *(_OWORD *)(v169 + 16);
                  *(_OWORD *)((char *)v170 + 27) = *(_OWORD *)(v169 + 27);
                  _OWORD *v170 = v179;
                  v170[1] = v180;
                }
                while (v166 <= v168);
                a2 -= 3;
                if ((long long *)v169 == a2)
                {
                  *(_OWORD *)(v169 + 27) = *(_OWORD *)&v229[11];
                  *(_OWORD *)unint64_t v169 = v221;
                  *(_OWORD *)(v169 + 16) = *(_OWORD *)v229;
                }
                else
                {
                  long long v181 = *a2;
                  long long v182 = a2[1];
                  *(_OWORD *)(v169 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v169 = v181;
                  *(_OWORD *)(v169 + 16) = v182;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v229[11];
                  *a2 = v221;
                  a2[1] = *(_OWORD *)v229;
                  uint64_t v183 = v169 - v13 + 48;
                  if (v183 >= 49)
                  {
                    unint64_t v184 = (v183 / 0x30uLL - 2) >> 1;
                    unint64_t v185 = v13 + 48 * v184;
                    uint64_t v186 = *(void *)(v185 + 24);
                    uint64_t v187 = *(void *)(v169 + 24);
                    if (v186 != v187)
                    {
                      v189 = *(char **)(*(void *)a3 + 328);
                      v188 = *(char **)(*(void *)a3 + 336);
                      v190 = v189;
                      v191 = v189;
                      if (v189 != v188)
                      {
                        do
                        {
                          if (*(void *)v191 == v186) {
                            goto LABEL_286;
                          }
                          v191 += 8;
                        }
                        while (v191 != v188);
                        v191 = *(char **)(*(void *)a3 + 336);
LABEL_286:
                        while (*(void *)v190 != v187)
                        {
                          v190 += 8;
                          if (v190 == v188)
                          {
                            v190 = *(char **)(*(void *)a3 + 336);
                            break;
                          }
                        }
                      }
                      if (v191 - v189 < v190 - v189)
                      {
                        uint64_t v242 = *(void *)(v169 + 16);
                        long long v238 = *(_OWORD *)v169;
                        long long v233 = *(_OWORD *)(v169 + 32);
                        do
                        {
                          v192 = (_OWORD *)v169;
                          unint64_t v169 = v185;
                          long long v193 = *(_OWORD *)v185;
                          long long v194 = *(_OWORD *)(v185 + 16);
                          *(_OWORD *)((char *)v192 + 27) = *(_OWORD *)(v185 + 27);
                          _OWORD *v192 = v193;
                          v192[1] = v194;
                          if (!v184) {
                            break;
                          }
                          unint64_t v184 = (v184 - 1) >> 1;
                          unint64_t v185 = v13 + 48 * v184;
                          uint64_t v195 = *(void *)(v185 + 24);
                          if (v195 == v187) {
                            break;
                          }
                          v197 = *(char **)(*(void *)a3 + 328);
                          v196 = *(char **)(*(void *)a3 + 336);
                          v198 = v197;
                          v199 = v197;
                          if (v197 != v196)
                          {
                            do
                            {
                              if (*(void *)v199 == v195) {
                                goto LABEL_297;
                              }
                              v199 += 8;
                            }
                            while (v199 != v196);
                            v199 = *(char **)(*(void *)a3 + 336);
LABEL_297:
                            while (*(void *)v198 != v187)
                            {
                              v198 += 8;
                              if (v198 == v196)
                              {
                                v198 = *(char **)(*(void *)a3 + 336);
                                break;
                              }
                            }
                          }
                        }
                        while (v199 - v197 < v198 - v197);
                        *(_OWORD *)unint64_t v169 = v238;
                        *(void *)(v169 + 16) = v242;
                        *(void *)(v169 + 24) = v187;
                        *(void *)(v169 + 32) = v233;
                        *(_DWORD *)(v169 + 39) = *(_DWORD *)((char *)&v233 + 7);
                      }
                    }
                  }
                }
              }
              while (v165-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          char v17 = (long long *)(v13 + 48 * (v15 >> 1));
          if ((unint64_t)v14 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v15 >> 1)), a2 - 3, a3);
            uint64_t v18 = 3 * v16;
            double v19 = (long long *)(a1 + 48 * v16 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48), v19, a2 - 6, a3);
            double v20 = (long long *)(a1 + 48 + 16 * v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 96), v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v19, v17, v20, a3);
            *(_OWORD *)v223 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v223[16] = *(_OWORD *)(a1 + 32);
            long long v216 = *(_OWORD *)a1;
            long long v21 = *(long long *)((char *)v17 + 27);
            long long v22 = v17[1];
            *(_OWORD *)a1 = *v17;
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(a1 + 27) = v21;
            *(long long *)((char *)v17 + 27) = *(_OWORD *)&v223[11];
            *char v17 = v216;
            v17[1] = *(_OWORD *)v223;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48 * (v15 >> 1)), (long long *)a1, a2 - 3, a3);
          }
          --a4;
          if (a5)
          {
            uint64_t v23 = *(void *)(a1 + 24);
            uint64_t v24 = *(void *)a3;
            break;
          }
          uint64_t v25 = *(void *)(a1 - 24);
          uint64_t v23 = *(void *)(a1 + 24);
          if (v25 != v23)
          {
            uint64_t v24 = *(void *)a3;
            uint64_t v26 = *(char **)(*(void *)a3 + 328);
            double v27 = *(char **)(*(void *)a3 + 336);
            double v28 = v26;
            double v29 = v26;
            if (v26 != v27)
            {
              do
              {
                if (*(void *)v29 == v25) {
                  goto LABEL_16;
                }
                v29 += 8;
              }
              while (v29 != v27);
              double v29 = *(char **)(*(void *)a3 + 336);
LABEL_16:
              while (*(void *)v28 != v23)
              {
                v28 += 8;
                if (v28 == v27)
                {
                  double v28 = *(char **)(*(void *)a3 + 336);
                  break;
                }
              }
            }
            if (v29 - v26 < v28 - v26) {
              break;
            }
          }
          uint64_t v241 = *(void *)(a1 + 16);
          long long v232 = *(_OWORD *)(a1 + 32);
          long long v235 = *(_OWORD *)a1;
          uint64_t v67 = *((void *)a2 - 3);
          if (v23 == v67) {
            goto LABEL_107;
          }
          unint64_t v68 = *(char **)(*(void *)a3 + 328);
          unint64_t v69 = *(char **)(*(void *)a3 + 336);
          if (v68 == v69)
          {
            unint64_t v71 = *(char **)(*(void *)a3 + 328);
            unint64_t v70 = v71;
          }
          else
          {
            unint64_t v70 = *(char **)(*(void *)a3 + 328);
            while (*(void *)v70 != v23)
            {
              v70 += 8;
              if (v70 == v69)
              {
                unint64_t v70 = *(char **)(*(void *)a3 + 336);
                break;
              }
            }
            unint64_t v71 = *(char **)(*(void *)a3 + 328);
            while (*(void *)v71 != v67)
            {
              v71 += 8;
              if (v71 == v69)
              {
                unint64_t v71 = *(char **)(*(void *)a3 + 336);
                break;
              }
            }
          }
          if (v70 - v68 >= v71 - v68)
          {
LABEL_107:
            unint64_t v13 = a1 + 48;
            if (a1 + 48 < (unint64_t)a2)
            {
              uint64_t v75 = *(void *)a3;
              unint64_t v76 = a1;
              do
              {
                uint64_t v77 = *(void *)(v76 + 72);
                unint64_t v76 = v13;
                if (v23 != v77)
                {
                  long long v78 = *(char **)(v75 + 328);
                  long long v79 = *(char **)(v75 + 336);
                  unint64_t v80 = v78;
                  int v81 = v78;
                  if (v78 != v79)
                  {
                    do
                    {
                      if (*(void *)v81 == v23) {
                        goto LABEL_114;
                      }
                      v81 += 8;
                    }
                    while (v81 != v79);
                    int v81 = *(char **)(v75 + 336);
LABEL_114:
                    while (*(void *)v80 != v77)
                    {
                      v80 += 8;
                      if (v80 == v79)
                      {
                        unint64_t v80 = *(char **)(v75 + 336);
                        break;
                      }
                    }
                  }
                  if (v81 - v78 < v80 - v78) {
                    break;
                  }
                }
                v13 += 48;
              }
              while (v76 + 48 < (unint64_t)a2);
            }
          }
          else
          {
            unint64_t v13 = a1;
            do
            {
              do
              {
                uint64_t v72 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v72);
              if (v68 == v69)
              {
                BOOL v74 = *(char **)(*(void *)a3 + 328);
                __int16 v73 = v74;
              }
              else
              {
                __int16 v73 = *(char **)(*(void *)a3 + 328);
                while (*(void *)v73 != v23)
                {
                  v73 += 8;
                  if (v73 == v69)
                  {
                    __int16 v73 = *(char **)(*(void *)a3 + 336);
                    break;
                  }
                }
                BOOL v74 = *(char **)(*(void *)a3 + 328);
                while (*(void *)v74 != v72)
                {
                  v74 += 8;
                  if (v74 == v69)
                  {
                    BOOL v74 = *(char **)(*(void *)a3 + 336);
                    break;
                  }
                }
              }
            }
            while (v73 - v68 >= v74 - v68);
          }
          double v82 = a2;
          if (v13 < (unint64_t)a2)
          {
            uint64_t v83 = *(void *)a3;
            double v82 = a2;
            do
            {
              uint64_t v84 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v84) {
                break;
              }
              int64_t v85 = *(char **)(v83 + 328);
              int v86 = *(char **)(v83 + 336);
              unint64_t v87 = v85;
              long long v88 = v85;
              if (v85 != v86)
              {
                do
                {
                  if (*(void *)v88 == v23) {
                    goto LABEL_126;
                  }
                  v88 += 8;
                }
                while (v88 != v86);
                long long v88 = *(char **)(v83 + 336);
LABEL_126:
                while (*(void *)v87 != v84)
                {
                  v87 += 8;
                  if (v87 == v86)
                  {
                    unint64_t v87 = *(char **)(v83 + 336);
                    break;
                  }
                }
              }
            }
            while (v88 - v85 < v87 - v85);
          }
          while (v13 < (unint64_t)v82)
          {
            *(_OWORD *)v225 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v225[16] = *(_OWORD *)(v13 + 32);
            long long v217 = *(_OWORD *)v13;
            long long v89 = *v82;
            long long v90 = v82[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v82 + 27);
            *(_OWORD *)unint64_t v13 = v89;
            *(_OWORD *)(v13 + 16) = v90;
            *(long long *)((char *)v82 + 27) = *(_OWORD *)&v225[11];
            long long *v82 = v217;
            v82[1] = *(_OWORD *)v225;
            uint64_t v91 = *(void *)a3;
            do
            {
              do
              {
                uint64_t v92 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v92);
              uint64_t v93 = *(char **)(v91 + 328);
              BOOL v94 = *(char **)(v91 + 336);
              if (v93 == v94)
              {
                id v96 = *(char **)(v91 + 328);
                unint64_t v95 = v96;
              }
              else
              {
                unint64_t v95 = *(char **)(v91 + 328);
                while (*(void *)v95 != v23)
                {
                  v95 += 8;
                  if (v95 == v94)
                  {
                    unint64_t v95 = *(char **)(v91 + 336);
                    break;
                  }
                }
                id v96 = *(char **)(v91 + 328);
                while (*(void *)v96 != v92)
                {
                  v96 += 8;
                  if (v96 == v94)
                  {
                    id v96 = *(char **)(v91 + 336);
                    break;
                  }
                }
              }
            }
            while (v95 - v93 >= v96 - v93);
            do
            {
              uint64_t v97 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v97) {
                break;
              }
              if (v93 == v94)
              {
                unint64_t v99 = v93;
                unint64_t v98 = v93;
              }
              else
              {
                unint64_t v98 = v93;
                while (*(void *)v98 != v23)
                {
                  v98 += 8;
                  if (v98 == v94)
                  {
                    unint64_t v98 = v94;
                    break;
                  }
                }
                unint64_t v99 = v93;
                while (*(void *)v99 != v97)
                {
                  v99 += 8;
                  if (v99 == v94)
                  {
                    unint64_t v99 = v94;
                    break;
                  }
                }
              }
            }
            while (v98 - v93 < v99 - v93);
          }
          unint64_t v100 = (long long *)(v13 - 48);
          BOOL v5 = v13 - 48 >= a1;
          BOOL v6 = v13 - 48 == a1;
          if (v13 - 48 != a1)
          {
            long long v101 = *v100;
            long long v102 = *(_OWORD *)(v13 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
            *(_OWORD *)a1 = v101;
            *(_OWORD *)(a1 + 16) = v102;
          }
          a5 = 0;
          *unint64_t v100 = v235;
          *(void *)(v13 - 32) = v241;
          *(void *)(v13 - 24) = v23;
          *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v232 + 7);
          *(void *)(v13 - 16) = v232;
        }
        uint64_t v240 = *(void *)(a1 + 16);
        long long v231 = *(_OWORD *)(a1 + 32);
        long long v234 = *(_OWORD *)a1;
        unint64_t v30 = a1;
        do
        {
          unint64_t v31 = v30;
          v30 += 48;
          uint64_t v32 = *(void *)(v31 + 72);
          if (v32 == v23) {
            break;
          }
          uint64_t v33 = *(char **)(v24 + 328);
          double v34 = *(char **)(v24 + 336);
          double v35 = v33;
          double v36 = v33;
          if (v33 != v34)
          {
            do
            {
              if (*(void *)v36 == v32) {
                goto LABEL_26;
              }
              v36 += 8;
            }
            while (v36 != v34);
            double v36 = *(char **)(v24 + 336);
LABEL_26:
            while (*(void *)v35 != v23)
            {
              v35 += 8;
              if (v35 == v34)
              {
                double v35 = *(char **)(v24 + 336);
                break;
              }
            }
          }
        }
        while (v36 - v33 < v35 - v33);
        double v37 = a2;
        if (v31 == a1)
        {
          double v37 = a2;
          if (v30 < (unint64_t)a2)
          {
            double v37 = a2;
            do
            {
              uint64_t v43 = *((void *)v37 - 3);
              v37 -= 3;
              if (v43 != v23)
              {
                long long v44 = *(char **)(v24 + 328);
                long long v45 = *(char **)(v24 + 336);
                BOOL v46 = v44;
                unint64_t v47 = v44;
                if (v44 != v45)
                {
                  do
                  {
                    if (*(void *)v47 == v43) {
                      goto LABEL_48;
                    }
                    v47 += 8;
                  }
                  while (v47 != v45);
                  unint64_t v47 = *(char **)(v24 + 336);
LABEL_48:
                  while (*(void *)v46 != v23)
                  {
                    v46 += 8;
                    if (v46 == v45)
                    {
                      BOOL v46 = *(char **)(v24 + 336);
                      break;
                    }
                  }
                }
                if (v47 - v44 < v46 - v44) {
                  break;
                }
              }
            }
            while (v30 < (unint64_t)v37);
          }
        }
        else
        {
          do
          {
            do
            {
              uint64_t v38 = *((void *)v37 - 3);
              v37 -= 3;
            }
            while (v38 == v23);
            long long v39 = *(char **)(v24 + 328);
            uint64_t v40 = *(char **)(v24 + 336);
            id v41 = v39;
            id v42 = v39;
            if (v39 != v40)
            {
              do
              {
                if (*(void *)v42 == v38) {
                  goto LABEL_36;
                }
                v42 += 8;
              }
              while (v42 != v40);
              id v42 = *(char **)(v24 + 336);
LABEL_36:
              while (*(void *)v41 != v23)
              {
                v41 += 8;
                if (v41 == v40)
                {
                  id v41 = *(char **)(v24 + 336);
                  break;
                }
              }
            }
          }
          while (v42 - v39 >= v41 - v39);
        }
        unint64_t v13 = v30;
        if (v30 < (unint64_t)v37)
        {
          uint64_t v48 = v37;
          do
          {
            *(_OWORD *)v224 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v224[16] = *(_OWORD *)(v13 + 32);
            long long v49 = *(_OWORD *)v13;
            long long v51 = *v48;
            long long v50 = v48[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v48 + 27);
            *(_OWORD *)unint64_t v13 = v51;
            *(_OWORD *)(v13 + 16) = v50;
            *(long long *)((char *)v48 + 27) = *(_OWORD *)&v224[11];
            *uint64_t v48 = v49;
            v48[1] = *(_OWORD *)v224;
            uint64_t v52 = *(void *)a3;
            do
            {
              uint64_t v53 = *(void *)(v13 + 72);
              v13 += 48;
              if (v53 == v23) {
                break;
              }
              BOOL v54 = *(char **)(v52 + 328);
              unint64_t v55 = *(char **)(v52 + 336);
              unint64_t v56 = v54;
              long long v57 = v54;
              if (v54 != v55)
              {
                do
                {
                  if (*(void *)v57 == v53) {
                    goto LABEL_61;
                  }
                  v57 += 8;
                }
                while (v57 != v55);
                long long v57 = *(char **)(v52 + 336);
LABEL_61:
                while (*(void *)v56 != v23)
                {
                  v56 += 8;
                  if (v56 == v55)
                  {
                    unint64_t v56 = *(char **)(v52 + 336);
                    break;
                  }
                }
              }
            }
            while (v57 - v54 < v56 - v54);
            do
            {
              do
              {
                uint64_t v58 = *((void *)v48 - 3);
                v48 -= 3;
              }
              while (v58 == v23);
              unint64_t v59 = *(char **)(v52 + 328);
              char v60 = *(char **)(v52 + 336);
              long long v61 = v59;
              long long v62 = v59;
              if (v59 != v60)
              {
                do
                {
                  if (*(void *)v62 == v58) {
                    goto LABEL_70;
                  }
                  v62 += 8;
                }
                while (v62 != v60);
                long long v62 = *(char **)(v52 + 336);
LABEL_70:
                while (*(void *)v61 != v23)
                {
                  v61 += 8;
                  if (v61 == v60)
                  {
                    long long v61 = *(char **)(v52 + 336);
                    break;
                  }
                }
              }
            }
            while (v62 - v59 >= v61 - v59);
          }
          while (v13 < (unint64_t)v48);
        }
        unint64_t v63 = (long long *)(v13 - 48);
        if (v13 - 48 != a1)
        {
          long long v64 = *v63;
          long long v65 = *(_OWORD *)(v13 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
          *(_OWORD *)a1 = v64;
          *(_OWORD *)(a1 + 16) = v65;
        }
        *unint64_t v63 = v234;
        *(void *)(v13 - 32) = v240;
        *(void *)(v13 - 24) = v23;
        *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v231 + 7);
        *(void *)(v13 - 16) = v231;
        if (v30 >= (unint64_t)v37) {
          break;
        }
LABEL_80:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder*,false>(a1, v13 - 48, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder*>(a1, v13 - 48, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder*>(v13, (uint64_t)a2, a3))
      {
        break;
      }
      if (!v66) {
        goto LABEL_80;
      }
    }
    a2 = (long long *)(v13 - 48);
    if (!v66) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 - 24);
      uint64_t v9 = *(void *)(a1 + 24);
      if (v8 == v9) {
        return result;
      }
      id v10 = *(char **)(*(void *)a3 + 328);
      int64_t v11 = *(char **)(*(void *)a3 + 336);
      unint64_t v12 = v10;
      unint64_t v13 = v10;
      if (v10 == v11) {
        goto LABEL_10;
      }
      do
      {
        if (*(void *)v13 == v8) {
          goto LABEL_7;
        }
        v13 += 8;
      }
      while (v13 != v11);
      unint64_t v13 = *(char **)(*(void *)a3 + 336);
      do
      {
LABEL_7:
        if (*(void *)v12 == v9) {
          goto LABEL_10;
        }
        v12 += 8;
      }
      while (v12 != v11);
      unint64_t v12 = *(char **)(*(void *)a3 + 336);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        uint64_t v14 = (long long *)(a2 - 48);
        long long v15 = *(_OWORD *)a1;
        *(_OWORD *)double v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        long long v16 = *(_OWORD *)(a2 - 21);
        long long v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *uint64_t v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(long long *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), a3);
      uint64_t v19 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      int v20 = 0;
      break;
  }
  while (1)
  {
    uint64_t v21 = *(void *)(v19 + 24);
    uint64_t v22 = *(void *)(v18 + 24);
    if (v21 != v22)
    {
      uint64_t v23 = *(char **)(*(void *)a3 + 328);
      uint64_t v24 = *(char **)(*(void *)a3 + 336);
      uint64_t v25 = v23;
      uint64_t v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(void *)v26 == v21) {
            goto LABEL_19;
          }
          v26 += 8;
        }
        while (v26 != v24);
        uint64_t v26 = *(char **)(*(void *)a3 + 336);
LABEL_19:
        while (*(void *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            uint64_t v25 = *(char **)(*(void *)a3 + 336);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        long long v34 = *(_OWORD *)v19;
        uint64_t v36 = *(void *)(v19 + 16);
        long long v37 = *(_OWORD *)(v19 + 32);
        uint64_t v27 = v19;
        while (1)
        {
          long long v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1) {
            break;
          }
          uint64_t v27 = v18;
          uint64_t v29 = *(void *)(v18 - 24);
          if (v21 != v29)
          {
            unint64_t v30 = *(char **)(*(void *)a3 + 328);
            unint64_t v31 = *(char **)(*(void *)a3 + 336);
            uint64_t v32 = v30;
            uint64_t v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(void *)v33 == v21) {
                  goto LABEL_30;
                }
                v33 += 8;
              }
              while (v33 != v31);
              uint64_t v33 = *(char **)(*(void *)a3 + 336);
LABEL_30:
              while (*(void *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  uint64_t v32 = *(char **)(*(void *)a3 + 336);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30) {
              continue;
            }
          }
          goto LABEL_36;
        }
        uint64_t v27 = a1;
LABEL_36:
        *(_OWORD *)uint64_t v27 = v34;
        *(void *)(v27 + 16) = v36;
        *(void *)(v27 + 24) = v21;
        *(void *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8) {
          return v19 + 48 == a2;
        }
      }
    }
    uint64_t v18 = v19;
    v19 += 48;
    if (v19 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v10) >> 4);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*((double *)a2 - 5) < *(double *)(v10 + 8))
                {
                  *(_OWORD *)uint64_t v118 = *(_OWORD *)(v10 + 16);
                  *(_OWORD *)&v118[16] = *(_OWORD *)(v10 + 32);
                  long long v110 = *(_OWORD *)v10;
                  long long v52 = *(a2 - 3);
                  long long v53 = *(a2 - 2);
                  *(_OWORD *)(v10 + 27) = *(long long *)((char *)a2 - 21);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(long long *)((char *)a2 - 21) = *(_OWORD *)&v118[11];
                  *(a2 - 3) = v110;
                  *(a2 - 2) = *(_OWORD *)v118;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)v10, (long long *)(v10 + 48), a2 - 3);
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v10, v10 + 48, v10 + 96, (uint64_t)(a2 - 3));
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v10, v10 + 48, v10 + 96, v10 + 144, (uint64_t)(a2 - 3));
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 1151)
          {
            BOOL v54 = (long long *)(v10 + 48);
            BOOL v56 = (long long *)v10 == a2 || v54 == a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  unint64_t v59 = v54;
                  double v60 = *(double *)(v58 + 56);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *(void *)v54;
                    *(_OWORD *)long long v111 = *(_OWORD *)(v58 + 64);
                    *(_OWORD *)&v111[16] = *(_OWORD *)(v58 + 80);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      unint64_t v63 = (_OWORD *)(v10 + v62);
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      v63[3] = *(_OWORD *)(v10 + v62);
                      v63[4] = v64;
                      *(_OWORD *)((char *)v63 + 75) = *(_OWORD *)(v10 + v62 + 27);
                      if (!v62) {
                        break;
                      }
                      v62 -= 48;
                      if (v60 >= *((double *)v63 - 5))
                      {
                        uint64_t v65 = v10 + v62 + 48;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = *(_OWORD *)v111;
                    *(_OWORD *)(v65 + 27) = *(_OWORD *)&v111[11];
                  }
                  BOOL v54 = v59 + 3;
                  v57 += 48;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 3 != a2);
              }
            }
            else if (!v56)
            {
              do
              {
                unint64_t v98 = v54;
                double v99 = *(double *)(a1 + 56);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *(void *)v54;
                  *(_OWORD *)unint64_t v114 = *(_OWORD *)(a1 + 64);
                  *(_OWORD *)&v114[16] = *(_OWORD *)(a1 + 80);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(v101 - 2);
                    *long long v101 = *(v101 - 3);
                    v101[1] = v102;
                    *(long long *)((char *)v101 + 27) = *(long long *)((char *)v101 - 21);
                    double v103 = *((double *)v101 - 11);
                    v101 -= 3;
                  }
                  while (v99 < v103);
                  *(void *)long long v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *(long long *)((char *)v101 + 27) = *(_OWORD *)&v114[11];
                  v101[1] = *(_OWORD *)v114;
                }
                v54 += 3;
                a1 = (unint64_t)v98;
              }
              while (v98 + 3 != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((long long *)v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 48 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v70 + 8) < *(double *)(v70 + 56))
                  {
                    v70 += 48;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  unint64_t v71 = v10 + 48 * v68;
                  double v72 = *(double *)(v71 + 8);
                  if (*(double *)(v70 + 8) >= v72)
                  {
                    uint64_t v73 = *(void *)v71;
                    *(_OWORD *)long long v112 = *(_OWORD *)(v71 + 16);
                    *(_OWORD *)&v112[16] = *(_OWORD *)(v71 + 32);
                    do
                    {
                      BOOL v74 = (_OWORD *)v71;
                      unint64_t v71 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_OWORD *)((char *)v74 + 27) = *(_OWORD *)(v70 + 27);
                      *BOOL v74 = v75;
                      v74[1] = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = 2 * v69;
                      uint64_t v69 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 48 * v69;
                      uint64_t v78 = v77 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v70 + 8) < *(double *)(v70 + 56))
                      {
                        v70 += 48;
                        uint64_t v69 = v78;
                      }
                    }
                    while (*(double *)(v70 + 8) >= v72);
                    *(void *)unint64_t v71 = v73;
                    *(double *)(v71 + 8) = v72;
                    *(_OWORD *)(v71 + 16) = *(_OWORD *)v112;
                    *(_OWORD *)(v71 + 27) = *(_OWORD *)&v112[11];
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x30uLL;
              do
              {
                uint64_t v80 = 0;
                *(_OWORD *)char v119 = *(_OWORD *)(v10 + 16);
                *(_OWORD *)&v119[16] = *(_OWORD *)(v10 + 32);
                long long v113 = *(_OWORD *)v10;
                unint64_t v81 = v10;
                do
                {
                  double v82 = (_OWORD *)v81;
                  v81 += 48 * v80 + 48;
                  uint64_t v83 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v84 = v83 + 2;
                  if (v84 < v79 && *(double *)(v81 + 8) < *(double *)(v81 + 56))
                  {
                    v81 += 48;
                    uint64_t v80 = v84;
                  }
                  long long v85 = *(_OWORD *)v81;
                  long long v86 = *(_OWORD *)(v81 + 16);
                  *(_OWORD *)((char *)v82 + 27) = *(_OWORD *)(v81 + 27);
                  _OWORD *v82 = v85;
                  v82[1] = v86;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 3;
                if ((long long *)v81 == a2)
                {
                  *(_OWORD *)(v81 + 27) = *(_OWORD *)&v119[11];
                  *(_OWORD *)unint64_t v81 = v113;
                  *(_OWORD *)(v81 + 16) = *(_OWORD *)v119;
                }
                else
                {
                  long long v87 = *a2;
                  long long v88 = a2[1];
                  *(_OWORD *)(v81 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v81 = v87;
                  *(_OWORD *)(v81 + 16) = v88;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v119[11];
                  *a2 = v113;
                  a2[1] = *(_OWORD *)v119;
                  uint64_t v89 = v81 - v10 + 48;
                  if (v89 >= 49)
                  {
                    unint64_t v90 = (v89 / 0x30uLL - 2) >> 1;
                    unint64_t v91 = v10 + 48 * v90;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      *(_OWORD *)long long v106 = *(_OWORD *)(v81 + 16);
                      *(_OWORD *)&v106[16] = *(_OWORD *)(v81 + 32);
                      do
                      {
                        BOOL v94 = (_OWORD *)v81;
                        unint64_t v81 = v91;
                        long long v95 = *(_OWORD *)v91;
                        long long v96 = *(_OWORD *)(v91 + 16);
                        *(_OWORD *)((char *)v94 + 27) = *(_OWORD *)(v91 + 27);
                        _OWORD *v94 = v95;
                        v94[1] = v96;
                        if (!v90) {
                          break;
                        }
                        unint64_t v90 = (v90 - 1) >> 1;
                        unint64_t v91 = v10 + 48 * v90;
                      }
                      while (*(double *)(v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_OWORD *)(v81 + 16) = *(_OWORD *)v106;
                      *(_OWORD *)(v81 + 27) = *(_OWORD *)&v106[11];
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (long long *)(v10 + 48 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v12 >> 1)), a2 - 3);
            uint64_t v15 = 3 * v13;
            long long v16 = (long long *)(a1 + 48 * v13 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48), v16, a2 - 6);
            long long v17 = (long long *)(a1 + 48 + 16 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 96), v17, a2 - 9);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v16, v14, v17);
            *(_OWORD *)unint64_t v115 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v115[16] = *(_OWORD *)(a1 + 32);
            long long v107 = *(_OWORD *)a1;
            long long v18 = *(long long *)((char *)v14 + 27);
            long long v19 = v14[1];
            *(_OWORD *)a1 = *v14;
            *(_OWORD *)(a1 + 16) = v19;
            *(_OWORD *)(a1 + 27) = v18;
            *(long long *)((char *)v14 + 27) = *(_OWORD *)&v115[11];
            *uint64_t v14 = v107;
            v14[1] = *(_OWORD *)v115;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48 * (v12 >> 1)), (long long *)a1, a2 - 3);
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 40) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          *(_OWORD *)long long v105 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)&v105[16] = *(_OWORD *)(a1 + 32);
          if (v20 >= *((double *)a2 - 5))
          {
            unint64_t v41 = a1 + 48;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= (unint64_t)a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 48;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 48;
              double v40 = *(double *)(v39 + 56);
              v39 += 48;
            }
            while (v20 >= v40);
          }
          uint64_t v43 = a2;
          if (v10 < (unint64_t)a2)
          {
            long long v44 = a2;
            do
            {
              uint64_t v43 = v44 - 3;
              double v45 = *((double *)v44 - 5);
              v44 -= 3;
            }
            while (v20 < v45);
          }
          while (v10 < (unint64_t)v43)
          {
            *(_OWORD *)uint64_t v117 = *(_OWORD *)(v10 + 16);
            *(_OWORD *)&v117[16] = *(_OWORD *)(v10 + 32);
            long long v109 = *(_OWORD *)v10;
            long long v46 = *v43;
            long long v47 = v43[1];
            *(_OWORD *)(v10 + 27) = *(long long *)((char *)v43 + 27);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(long long *)((char *)v43 + 27) = *(_OWORD *)&v117[11];
            *uint64_t v43 = v109;
            v43[1] = *(_OWORD *)v117;
            do
            {
              double v48 = *(double *)(v10 + 56);
              v10 += 48;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *((double *)v43 - 5);
              v43 -= 3;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 48 >= a1;
          BOOL v5 = v10 - 48 == a1;
          if (v10 - 48 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 48);
            long long v51 = *(_OWORD *)(v10 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v10 - 21);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 48) = v38;
          *(double *)(v10 - 40) = v20;
          *(_OWORD *)(v10 - 21) = *(_OWORD *)&v105[11];
          *(_OWORD *)(v10 - 32) = *(_OWORD *)v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        *(_OWORD *)uint64_t v104 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v104[16] = *(_OWORD *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 56);
          v21 += 48;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        uint64_t v25 = a2;
        if (v21 == 48)
        {
          long long v28 = a2;
          while (v24 < (unint64_t)v28)
          {
            uint64_t v26 = v28 - 3;
            double v29 = *((double *)v28 - 5);
            v28 -= 3;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          uint64_t v26 = v28;
        }
        else
        {
          do
          {
            uint64_t v26 = v25 - 3;
            double v27 = *((double *)v25 - 5);
            v25 -= 3;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < (unint64_t)v26)
        {
          unint64_t v30 = v26;
          do
          {
            *(_OWORD *)uint64_t v116 = *(_OWORD *)(v10 + 16);
            *(_OWORD *)&v116[16] = *(_OWORD *)(v10 + 32);
            long long v108 = *(_OWORD *)v10;
            long long v31 = *v30;
            long long v32 = v30[1];
            *(_OWORD *)(v10 + 27) = *(long long *)((char *)v30 + 27);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(long long *)((char *)v30 + 27) = *(_OWORD *)&v116[11];
            *unint64_t v30 = v108;
            v30[1] = *(_OWORD *)v116;
            do
            {
              double v33 = *(double *)(v10 + 56);
              v10 += 48;
            }
            while (v33 < v20);
            do
            {
              double v34 = *((double *)v30 - 5);
              v30 -= 3;
            }
            while (v34 >= v20);
          }
          while (v10 < (unint64_t)v30);
        }
        if (v10 - 48 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 48);
          long long v36 = *(_OWORD *)(v10 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v10 - 21);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 48) = v22;
        *(double *)(v10 - 40) = v20;
        *(_OWORD *)(v10 - 21) = *(_OWORD *)&v104[11];
        *(_OWORD *)(v10 - 32) = *(_OWORD *)v104;
        if (v24 >= (unint64_t)v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder*,false>(a1, v10 - 48, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder*>(a1, v10 - 48);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder*>(v10, (uint64_t)a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = (long long *)(v10 - 48);
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 40) < *(double *)(a1 + 8))
      {
        long long v6 = *(_OWORD *)a1;
        *(_OWORD *)double v20 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v20[16] = *(_OWORD *)(a1 + 32);
        long long v7 = *(_OWORD *)(a2 - 21);
        long long v8 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 27) = v7;
        *(_OWORD *)(a2 - 48) = v6;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v20;
        *(_OWORD *)(a2 - 21) = *(_OWORD *)&v20[11];
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48);
      return 1;
    default:
      uint64_t v9 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96));
      uint64_t v10 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    double v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      uint64_t v14 = *(void *)v10;
      *(_OWORD *)long long v19 = *(_OWORD *)(v10 + 16);
      *(_OWORD *)&v19[16] = *(_OWORD *)(v10 + 32);
      uint64_t v15 = v11;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        long long v17 = *(_OWORD *)(a1 + v15 + 112);
        *(_OWORD *)(v16 + 144) = *(_OWORD *)(a1 + v15 + 96);
        *(_OWORD *)(v16 + 160) = v17;
        *(_OWORD *)(v16 + 171) = *(_OWORD *)(a1 + v15 + 123);
        if (v15 == -96) {
          break;
        }
        v15 -= 48;
        if (v13 >= *(double *)(v16 + 56))
        {
          uint64_t v18 = a1 + v15 + 144;
          goto LABEL_12;
        }
      }
      uint64_t v18 = a1;
LABEL_12:
      *(void *)uint64_t v18 = v14;
      *(double *)(v18 + 8) = v13;
      *(_OWORD *)(v18 + 16) = *(_OWORD *)v19;
      *(_OWORD *)(v18 + 27) = *(_OWORD *)&v19[11];
      if (++v12 == 8) {
        return v10 + 48 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 48;
    v10 += 48;
    if (v10 == a2) {
      return 1;
    }
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsNoiseLevel>>,void *>>>::operator()[abi:ne180100](char a1, id *a2)
{
  if (a1)
  {
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsNoiseLevel>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsNoiseLevel>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsNoiseLevel>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(id **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (id *)*v2;

      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>> const&)::{lambda(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>> const&)::{lambda(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)#1}>,HDStatisticsNoiseLevel const& ()(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)>::~__func()
{
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>> const&)::{lambda(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>> const&)::{lambda(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)#1}>,HDStatisticsNoiseLevel const& ()(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F1724C50;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>> const&)::{lambda(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>> const&)::{lambda(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)#1}>,HDStatisticsNoiseLevel const& ()(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1724C50;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>> const&)::{lambda(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>> const&)::{lambda(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)#1}>,HDStatisticsNoiseLevel const& ()(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>> const&)::{lambda(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>> const&)::{lambda(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)#1}>,HDStatisticsNoiseLevel const& ()(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>> const&)::{lambda(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>> const&)::{lambda(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)#1}>,HDStatisticsNoiseLevel const& ()(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsNoiseLevel const& ()(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 624))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a4, 3, @"Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date");
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_configureForStartTime(a1);
  }
  double v8 = *(double *)(a2 + 8);
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9)
  {
    if (*(unsigned char *)(a1 + 624))
    {
      double v10 = -1.79769313e308;
    }
    else
    {
      double v10 = *(double *)(a1 + 176);
      double v12 = *(double *)(a1 + 120);
      if (v10 <= v12) {
        double v10 = -1.79769313e308;
      }
      if (v10 < v12) {
        double v10 = *(double *)(a1 + 120);
      }
    }
  }
  else
  {
    double v10 = *(double *)(a1 + 176);
    if (v10 <= *(double *)(a1 + 120)) {
      double v10 = -1.79769313e308;
    }
  }
  if (v10 <= v8)
  {
    if (v9 && a3) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_advanceToTime(a1, v8);
    }
    HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsNoiseLevel>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    double v13 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
    uint64_t v11 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v13, a4);
  }
  return v11;
}

void sub_1BD101740(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_advanceToTime(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 128) <= a2)
  {
    uint64_t v4 = a1 + 112;
    BOOL v5 = (double *)(a1 + 120);
    do
    {
      uint64_t v6 = *(void *)(a1 + 600);
      uint64_t v7 = *(void *)(a1 + 592);
      if (v6 == v7)
      {
        uint64_t v22 = 0;
        uint64_t v15 = *(void **)(a1 + 40);
        uint64_t v16 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a2];
        double v8 = [v15 dateIntervalContainingDate:v16 index:&v22];

        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v17 = v22;
        double v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v19 = v18;
        double v20 = [v8 endDate];
        [v20 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsNoiseLevel>>::resetToBucket(v4, v17, v19, v21);
      }
      else
      {
        double v8 = [*(id *)(a1 + 40) dateIntervalAtIndex:*(void *)(a1 + 112) + 1];
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_statisticsFromFinishedBucket(a1, v5);
        double v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v12 = v11;
        double v13 = [v8 endDate];
        [v13 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsNoiseLevel>>::advanceBucket(v4, v12, v14);
      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_didChangeBucket(a1, v9);
      if (v6 != v7) {
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_notifyForCurrentBucket(a1);
      }
    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1BD10194C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsNoiseLevel>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  char v3 = *(unsigned char *)(a2 + 32);
  if (!v3) {
    return;
  }
  uint64_t v6 = a1 + 8;
  double v7 = *(double *)(a1 + 8);
  double v8 = *(uint64_t **)a2;
  double v9 = *(double *)(a2 + 8);
  double v10 = *(double *)(a2 + 16);
  unint64_t v11 = *(void *)(a2 + 24);
  char v12 = *(unsigned char *)(a2 + 33);
  double v13 = v9;
  if (v9 <= v7)
  {
    double v13 = *(double *)(a1 + 8);
    if (v10 < v7) {
      return;
    }
  }
  if (v10 <= v13) {
    return;
  }
  double v14 = *(double *)(a1 + 16);
  if (v13 <= v14)
  {
    if (v10 >= v14)
    {
      BOOL v15 = v10 > v14;
      unint64_t v16 = *(void *)(a2 + 24);
      double v18 = *(double *)(a2 + 16);
      double v19 = *(double *)(a1 + 16);
      double v20 = *(uint64_t **)a2;
      char v17 = *(unsigned char *)(a2 + 33);
      if (v13 >= v14)
      {
        unint64_t v16 = *(void *)(a2 + 24);
        double v18 = *(double *)(a2 + 16);
        double v19 = *(double *)(a1 + 16);
        double v20 = *(uint64_t **)a2;
        char v17 = *(unsigned char *)(a2 + 33);
        goto LABEL_52;
      }
    }
    else
    {
      BOOL v15 = 0;
      unint64_t v16 = 0;
      char v17 = 0;
      double v18 = 0.0;
      double v14 = *(double *)(a2 + 16);
      double v19 = 0.0;
      double v20 = 0;
    }
    double v60 = v14;
    double v61 = v13;
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 296, v11, v11);
    unint64_t v21 = *(void *)(a1 + 112);
    if (v21 == *(void *)(a1 + 104) && *(uint64_t *)(a1 + 168) <= 0)
    {
      v26.f64[1] = *(float64_t *)(a1 + 16);
      double v23 = v60;
      double v22 = v61;
      v26.f64[0] = v61;
      v27.f64[0] = *(float64_t *)(a1 + 8);
      v27.f64[1] = v60;
      int8x16_t v28 = (int8x16_t)vcgtq_f64(v27, v26);
      v27.f64[0] = v61;
      *(int8x16_t *)(a1 + 48) = vbslq_s8(v28, *(int8x16_t *)(a1 + 8), (int8x16_t)v27);
      if (!a3)
      {
LABEL_25:
        unint64_t v29 = *(void *)(a1 + 120);
        if (v21 >= v29)
        {
          uint64_t v31 = *(void *)(a1 + 104);
          unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - v31) >> 4);
          unint64_t v33 = v32 + 1;
          if (v32 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - v31) >> 4);
          if (2 * v34 > v33) {
            unint64_t v33 = 2 * v34;
          }
          if (v34 >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v35 = 0x555555555555555;
          }
          else {
            unint64_t v35 = v33;
          }
          if (v35)
          {
            unint64_t v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v35);
            double v23 = v60;
            double v22 = v61;
          }
          else
          {
            uint64_t v36 = 0;
          }
          unint64_t v37 = v35 + 48 * v32;
          unint64_t v38 = v35 + 48 * v36;
          *(void *)unint64_t v37 = v8;
          *(double *)(v37 + 8) = v22;
          *(double *)(v37 + 16) = v23;
          *(void *)(v37 + 24) = v11;
          *(unsigned char *)(v37 + 32) = 1;
          *(unsigned char *)(v37 + 33) = v12;
          *(_WORD *)(v37 + 40) = 0;
          *(unsigned char *)(v37 + 42) = 0;
          unint64_t v30 = v37 + 48;
          double v40 = *(char **)(a1 + 104);
          unint64_t v39 = *(char **)(a1 + 112);
          if (v39 != v40)
          {
            do
            {
              long long v41 = *((_OWORD *)v39 - 3);
              long long v42 = *((_OWORD *)v39 - 2);
              *(_OWORD *)(v37 - 21) = *(_OWORD *)(v39 - 21);
              *(_OWORD *)(v37 - 48) = v41;
              *(_OWORD *)(v37 - 32) = v42;
              v37 -= 48;
              v39 -= 48;
            }
            while (v39 != v40);
            unint64_t v39 = *(char **)(a1 + 104);
          }
          *(void *)(a1 + 104) = v37;
          *(void *)(a1 + 112) = v30;
          *(void *)(a1 + 120) = v38;
          if (v39) {
            operator delete(v39);
          }
        }
        else
        {
          *(void *)unint64_t v21 = v8;
          *(double *)(v21 + 8) = v22;
          *(double *)(v21 + 16) = v23;
          *(void *)(v21 + 24) = v11;
          *(unsigned char *)(v21 + 32) = 1;
          *(unsigned char *)(v21 + 33) = v12;
          *(_WORD *)(v21 + 40) = 0;
          unint64_t v30 = v21 + 48;
          *(unsigned char *)(v21 + 42) = 0;
        }
        *(void *)(a1 + 112) = v30;
        if (!*(unsigned char *)(a1 + 264) || *(double *)(a1 + 240) <= v9)
        {
          *(void *)(a1 + 232) = v8;
          *(double *)(a1 + 240) = v9;
          *(double *)(a1 + 248) = v10;
          *(void *)(a1 + 256) = v11;
          *(unsigned char *)(a1 + 264) = v3;
          *(unsigned char *)(a1 + 265) = v12;
          if (!*(unsigned char *)(a1 + 208) || *(double *)(a1 + 184) <= v9)
          {
            *(void *)(a1 + 176) = v8;
            *(double *)(a1 + 184) = v9;
            *(double *)(a1 + 192) = v10;
            *(void *)(a1 + 200) = v11;
            *(unsigned char *)(a1 + 208) = v3;
            *(unsigned char *)(a1 + 209) = v12;
          }
        }
        if (*(unsigned char *)(a1 + 33))
        {
          unint64_t v43 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_canonicalSourceIDForSourceID(v6, v11);
          long long v44 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_statisticsForSource(v6, v43);
          if (!*((unsigned char *)v44 + 136) || *((double *)v44 + 14) <= v9)
          {
            v44[13] = v8;
            *((double *)v44 + 14) = v9;
            *((double *)v44 + 15) = v10;
            v44[16] = (uint64_t *)v11;
            *((unsigned char *)v44 + 136) = v3;
            *((unsigned char *)v44 + 137) = v12;
            if (!*((unsigned char *)v44 + 80) || *((double *)v44 + 7) <= v9)
            {
              v44[6] = v8;
              *((double *)v44 + 7) = v9;
              *((double *)v44 + 8) = v10;
              v44[9] = (uint64_t *)v11;
              *((unsigned char *)v44 + 80) = v3;
              *((unsigned char *)v44 + 81) = v12;
            }
          }
        }
LABEL_52:
        char v12 = v17;
        double v8 = v20;
        double v13 = v19;
        double v10 = v18;
        unint64_t v11 = v16;
        if (!v15) {
          return;
        }
        goto LABEL_53;
      }
    }
    else
    {
      double v23 = v60;
      double v22 = v61;
      if (v61 < *(double *)(a1 + 48))
      {
        double v24 = *(double *)(a1 + 8);
        if (v61 >= v24) {
          double v24 = v61;
        }
        *(double *)(a1 + 48) = v24;
      }
      if (v60 > *(double *)(a1 + 56))
      {
        double v25 = *(double *)(a1 + 16);
        if (v25 >= v60) {
          double v25 = v60;
        }
        *(double *)(a1 + 56) = v25;
      }
      if (!a3) {
        goto LABEL_25;
      }
    }
    if (v22 < *(double *)(a1 + 16))
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeThroughTime(v6, v22);
      double v23 = v60;
      double v22 = v61;
      unint64_t v21 = *(void *)(a1 + 112);
    }
    goto LABEL_25;
  }
  LOBYTE(v15) = 1;
LABEL_53:
  unint64_t v45 = *(void *)(a1 + 488);
  unint64_t v46 = *(void *)(a1 + 496);
  if (v45 >= v46)
  {
    uint64_t v48 = *(void *)(a1 + 480);
    unint64_t v49 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v45 - v48) >> 3);
    unint64_t v50 = v49 + 1;
    if (v49 + 1 > 0x666666666666666) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v51 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v46 - v48) >> 3);
    if (2 * v51 > v50) {
      unint64_t v50 = 2 * v51;
    }
    if (v51 >= 0x333333333333333) {
      unint64_t v52 = 0x666666666666666;
    }
    else {
      unint64_t v52 = v50;
    }
    if (v52)
    {
      double v62 = v13;
      unint64_t v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v52);
      double v13 = v62;
    }
    else
    {
      uint64_t v53 = 0;
    }
    unint64_t v54 = v52 + 40 * v49;
    unint64_t v55 = v52 + 40 * v53;
    *(void *)unint64_t v54 = v8;
    *(double *)(v54 + 8) = v13;
    *(double *)(v54 + 16) = v10;
    *(void *)(v54 + 24) = v11;
    *(unsigned char *)(v54 + 32) = v15;
    *(unsigned char *)(v54 + 33) = v12;
    unint64_t v47 = v54 + 40;
    uint64_t v57 = *(char **)(a1 + 480);
    BOOL v56 = *(char **)(a1 + 488);
    if (v56 != v57)
    {
      do
      {
        long long v58 = *(_OWORD *)(v56 - 40);
        long long v59 = *(_OWORD *)(v56 - 24);
        *(_WORD *)(v54 - 8) = *((_WORD *)v56 - 4);
        *(_OWORD *)(v54 - 24) = v59;
        *(_OWORD *)(v54 - 40) = v58;
        v54 -= 40;
        v56 -= 40;
      }
      while (v56 != v57);
      BOOL v56 = *(char **)(a1 + 480);
    }
    *(void *)(a1 + 480) = v54;
    *(void *)(a1 + 488) = v47;
    *(void *)(a1 + 496) = v55;
    if (v56) {
      operator delete(v56);
    }
  }
  else
  {
    *(void *)unint64_t v45 = v8;
    *(double *)(v45 + 8) = v13;
    *(double *)(v45 + 16) = v10;
    *(void *)(v45 + 24) = v11;
    *(unsigned char *)(v45 + 32) = v15;
    unint64_t v47 = v45 + 40;
    *(unsigned char *)(v45 + 33) = v12;
  }
  *(void *)(a1 + 488) = v47;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_notifyForCurrentBucket(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 626))
  {
    *(unsigned char *)(a1 + 628) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 628) = 0;
    uint64_t v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      uint64_t v4 = v2;
      char v3 = (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      if (v3) {
        v4[2](v4, v3);
      }

      uint64_t v2 = v4;
    }
  }
}

void sub_1BD101F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsNoiseLevel>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  double v9 = 0;
  double v10 = 0;
  uint64_t v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 480), *(void *)(a1 + 488), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 488) - *(void *)(a1 + 480)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsNoiseLevel>>::resetToBucket(a1, *(void *)a1 + 1, a2, a3);
  uint64_t v6 = v9;
  double v7 = v10;
  if (v9 != v10)
  {
    uint64_t v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsNoiseLevel>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BD10202C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsNoiseLevel>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8 = a1 + 40;
  objc_storeStrong((id *)(a1 + 504), *(id *)(a1 + 40));
  *(double *)(v8 - 32) = a3;
  *(double *)(v8 - 24) = a4;
  *(double *)(v8 + 24) = a3;
  *(void *)(v8 + 72) = *(void *)(v8 + 64);
  double v9 = [[HDQuantitySampleOverlapProcessor alloc] initWithOverlapFunction:1];
  *(_DWORD *)(v8 + 88) = 0;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 154) = 0u;
  double v10 = *(void **)(v8 + 176);
  *(void *)(v8 + 176) = v9;
  uint64_t v11 = v9;

  *(_WORD *)(v8 + 184) = 257;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_OWORD *)(v8 + 208) = 0u;
  *(_WORD *)(v8 + 224) = 0;

  if (*(void *)(v8 + 248))
  {
    char v12 = *(void **)(a1 + 272);
    uint64_t v13 = *(void *)(a1 + 280);
    *(void *)(a1 + 272) = a1 + 280;
    *(void *)(v13 + 16) = 0;
    *(void *)(a1 + 280) = 0;
    *(void *)(a1 + 288) = 0;
    if (v12[1]) {
      double v14 = (void *)v12[1];
    }
    else {
      double v14 = v12;
    }
    if (v14)
    {
      BOOL v15 = (void *)v14[2];
      if (v15)
      {
        unint64_t v16 = (void *)*v15;
        if ((void *)*v15 == v14)
        {
          *BOOL v15 = 0;
          while (1)
          {
            double v18 = (void *)v15[1];
            if (!v18) {
              break;
            }
            do
            {
              BOOL v15 = v18;
              double v18 = (void *)*v18;
            }
            while (v18);
          }
        }
        else
        {
          for (v15[1] = 0; v16; unint64_t v16 = (void *)v15[1])
          {
            do
            {
              BOOL v15 = v16;
              unint64_t v16 = (void *)*v16;
            }
            while (v16);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>>>::destroy(v14);
        for (uint64_t i = (void *)v15[2]; i; uint64_t i = (void *)i[2])
          BOOL v15 = i;
        double v14 = v15;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>>>::destroy(v14);
  }
  objc_storeStrong((id *)v8, *(id *)(a1 + 504));
  *(void *)(a1 + 488) = *(void *)(a1 + 480);
  *(void *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 628))
  {
    if (v3)
    {
      id v6 = v3;
      uint64_t v4 = _Block_copy(*(const void **)(a1 + 96));
      BOOL v5 = v4;
      if (v4) {
        (*((void (**)(void *, id))v4 + 2))(v4, v6);
      }

      id v3 = v6;
    }
    *(unsigned char *)(a1 + 628) = 0;
  }
}

void sub_1BD102234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsNoiseLevelEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  BOOL v5 = [a2 startDate];
  id v6 = [v4 startDate];
  uint64_t v7 = [v5 compare:v6];

  return v7;
}

void sub_1BD1022BC(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_primitiveInvalidateInterval(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 13);
  if (WeakRetained)
  {
    if (v5
      && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_currentBucketInterval((uint64_t)a1),
          (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v8 = [v5 endDate];
      double v9 = [v7 startDate];
      if (objc_msgSend(v8, "hk_isAfterDate:", v9))
      {
        double v10 = [v5 startDate];
        uint64_t v11 = [v7 endDate];
        char v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);
      }
      else
      {
        char v12 = 0;
      }

      uint64_t v13 = _Block_copy(a1[12]);
      if ((v12 & 1) == 0) {
        operator new();
      }
    }
    else
    {
      uint64_t v13 = _Block_copy(a1[12]);
    }
    *((unsigned char *)a1 + 624) = 1;
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsNoiseLevelEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
    v27[3] = &unk_1E6308FF8;
    id v15 = v5;
    id v28 = v15;
    id v16 = v13;
    id v29 = v16;
    (*((void (**)(id *, void *))*a1 + 9))(a1, v27);
    if (v5)
    {
      char v17 = [v15 startDate];
      [v17 timeIntervalSinceReferenceDate];
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_configureForStartTime((uint64_t)a1);
    }
    else
    {
      (*((void (**)(id *))*a1 + 4))(a1);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsNoiseLevelEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
    v21[3] = &unk_1E6309060;
    double v24 = a1;
    id v5 = v15;
    char v26 = 1;
    id v22 = v5;
    double v25 = a1;
    id v23 = WeakRetained;
    uint64_t v14 = (*((uint64_t (**)(id *, void *, uint64_t))*a1 + 14))(a1, v21, a3);
    double v18 = _Block_copy(v16);
    id v19 = a1[12];
    a1[12] = v18;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to invalidate interval: no data source available.");
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1BD10270C(_Unwind_Exception *a1)
{
  MEMORY[0x1C187B8A0](v4, 0x10F1C40A217D420);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsNoiseLevelEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_11;
  }
  id v3 = [v10 endDate];
  uint64_t v4 = [*(id *)(a1 + 32) startDate];
  char v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    id v6 = [v10 startDate];
    uint64_t v7 = [*(id *)(a1 + 32) endDate];
    char v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_11:
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9) {
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
      }
    }
  }
}

void sub_1BD1028F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsNoiseLevelEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = [*(id *)(a1 + 32) startDate];
  [v5 timeIntervalSinceReferenceDate];
  uint64_t v7 = v6;

  char v8 = [*(id *)(a1 + 32) endDate];
  [v8 timeIntervalSinceReferenceDate];
  uint64_t v10 = v9;

  uint64_t v11 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  uint64_t v13 = *(void *)(a1 + 32);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  void v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsNoiseLevelEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  char v32 = *(unsigned char *)(a1 + 64);
  void v30[4] = v7;
  v30[5] = v10;
  uint64_t v31 = *(void *)(a1 + 56);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsNoiseLevelEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  void v29[4] = v31;
  uint64_t v14 = [v11 collectionCalculator:WeakRetained queryForInterval:v13 error:a2 sampleHandler:v30 mergeHandler:v29];

  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15 != v4)
    {
      id v16 = [*(id *)(a1 + 32) endDate];
      [v16 timeIntervalSinceReferenceDate];
      if (*(void *)(v15 + 40))
      {
        double v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          id v19 = [*(id *)(v15 + 40) dateIntervalAtIndex:*(void *)(v15 + 112) + 1];
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          double v20 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_statisticsFromFinishedBucket(v15, (double *)(v15 + 120));
          unint64_t v21 = [v19 startDate];
          [v21 timeIntervalSinceReferenceDate];
          double v23 = v22;
          double v24 = [v19 endDate];
          [v24 timeIntervalSinceReferenceDate];
          HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsNoiseLevel>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            char v26 = _Block_copy(*(const void **)(v15 + 96));
            float64x2_t v27 = v26;
            if (v26) {
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);
            }
          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_didChangeBucket(v15, 0);
        }
      }
    }
  }
  return v14;
}

void sub_1BD102B9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsNoiseLevelEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7 = *(double *)(a1 + 32);
  if (v7 >= a6)
  {
    if (v7 <= a7)
    {
      BOOL v8 = v7 < a7;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      BOOL v8 = 0;
      a5 = 0.0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    BOOL v8 = a7 > a6;
  }
  double v12 = a5;
  double v13 = a6;
  double v14 = a7;
  uint64_t v15 = a2;
  BOOL v16 = v8;
  char v17 = 0;
  int v9 = *(unsigned __int8 *)(a1 + 56);
  if (*(unsigned char *)(a1 + 56))
  {
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v12, a3, a4);
    }
  }
  else
  {
    if (v8)
    {
      double v11 = *(double *)(a1 + 40);
      if (a6 <= v11)
      {
        if (a7 >= v11)
        {
          int v9 = a6 < v11;
          a7 = *(double *)(a1 + 40);
        }
        else
        {
          int v9 = a7 > a6;
        }
      }
    }
    double v13 = a6;
    double v14 = a7;
    BOOL v16 = v9;
    if (v9) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v12, a3, a4);
    }
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsNoiseLevelEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 624)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_configureForStartTime(a1);
  }
  if (*(void *)(a1 + 40)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_advanceToTime(a1, a2);
  }
  if (*(double *)(a1 + 128) > a2)
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeThroughTime(a1 + 120, a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 32) < *(double *)(v10 + 8))
                {
                  uint64_t v129 = *(void *)(v10 + 32);
                  long long v113 = *(_OWORD *)v10;
                  long long v121 = *(_OWORD *)(v10 + 16);
                  long long v52 = *(_OWORD *)(a2 - 40);
                  long long v53 = *(_OWORD *)(a2 - 24);
                  *(_WORD *)(v10 + 32) = *(_WORD *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(_WORD *)(a2 - 8) = v129;
                  *(_OWORD *)(a2 - 24) = v121;
                  *(_OWORD *)(a2 - 40) = v113;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v10, (double *)(v10 + 40), (double *)(a2 - 40));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, v10 + 120, a2 - 40);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            unint64_t v54 = (void *)(v10 + 40);
            BOOL v56 = v10 == a2 || v54 == (void *)a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  long long v59 = v54;
                  double v60 = *(double *)(v58 + 48);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *v54;
                    long long v114 = *(_OWORD *)(v58 + 56);
                    uint64_t v122 = *(void *)(v58 + 72);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      uint64_t v63 = v10 + v62;
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      *(_OWORD *)(v63 + 40) = *(_OWORD *)(v10 + v62);
                      *(_OWORD *)(v63 + 56) = v64;
                      *(_WORD *)(v63 + 72) = *(_WORD *)(v10 + v62 + 32);
                      if (!v62) {
                        break;
                      }
                      v62 -= 40;
                      if (v60 >= *(double *)(v63 - 32))
                      {
                        uint64_t v65 = v10 + v62 + 40;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = v114;
                    *(_WORD *)(v65 + 32) = v122;
                  }
                  unint64_t v54 = v59 + 5;
                  v57 += 40;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 5 != (void *)a2);
              }
            }
            else if (!v56)
            {
              do
              {
                unint64_t v98 = v54;
                double v99 = *(double *)(a1 + 48);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *v54;
                  long long v117 = *(_OWORD *)(a1 + 56);
                  uint64_t v125 = *(void *)(a1 + 72);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(_OWORD *)(v101 - 3);
                    *(_OWORD *)long long v101 = *(_OWORD *)(v101 - 5);
                    *((_OWORD *)v101 + 1) = v102;
                    *((_WORD *)v101 + 16) = *((_WORD *)v101 - 4);
                    double v103 = *((double *)v101 - 9);
                    v101 -= 5;
                  }
                  while (v99 < v103);
                  *long long v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *((_WORD *)v101 + 16) = v125;
                  *((_OWORD *)v101 + 1) = v117;
                }
                v54 += 5;
                a1 = (unint64_t)v98;
              }
              while (v98 + 5 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 40 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v10 + 40 * v69 + 8) < *(double *)(v70 + 48))
                  {
                    v70 += 40;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  double v71 = *(double *)(v10 + 40 * v68 + 8);
                  if (*(double *)(v70 + 8) >= v71)
                  {
                    unint64_t v72 = v10 + 40 * v68;
                    uint64_t v73 = *(void *)v72;
                    uint64_t v123 = *(void *)(v72 + 32);
                    long long v115 = *(_OWORD *)(v72 + 16);
                    do
                    {
                      unint64_t v74 = v72;
                      unint64_t v72 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_WORD *)(v74 + 32) = *(_WORD *)(v70 + 32);
                      *(_OWORD *)unint64_t v74 = v75;
                      *(_OWORD *)(v74 + 16) = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 40 * v77;
                      uint64_t v78 = 2 * v69 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v10 + 40 * v77 + 8) < *(double *)(v70 + 48))
                      {
                        v70 += 40;
                        uint64_t v77 = v78;
                      }
                      uint64_t v69 = v77;
                    }
                    while (*(double *)(v70 + 8) >= v71);
                    *(void *)unint64_t v72 = v73;
                    *(double *)(v72 + 8) = v71;
                    *(_OWORD *)(v72 + 16) = v115;
                    *(_WORD *)(v72 + 32) = v123;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x28uLL;
              do
              {
                uint64_t v80 = 0;
                uint64_t v130 = *(void *)(v10 + 32);
                long long v116 = *(_OWORD *)v10;
                long long v124 = *(_OWORD *)(v10 + 16);
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = v81;
                  uint64_t v83 = v80 + 1;
                  v81 += 40 * (v80 + 1);
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v85 = v84 + 2;
                  if (v85 < v79 && *(double *)(v82 + 40 * v83 + 8) < *(double *)(v81 + 48))
                  {
                    v81 += 40;
                    uint64_t v80 = v85;
                  }
                  long long v86 = *(_OWORD *)v81;
                  long long v87 = *(_OWORD *)(v81 + 16);
                  *(_WORD *)(v82 + 32) = *(_WORD *)(v81 + 32);
                  *(_OWORD *)unint64_t v82 = v86;
                  *(_OWORD *)(v82 + 16) = v87;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 40;
                if (v81 == a2)
                {
                  *(_WORD *)(v81 + 32) = v130;
                  *(_OWORD *)unint64_t v81 = v116;
                  *(_OWORD *)(v81 + 16) = v124;
                }
                else
                {
                  long long v88 = *(_OWORD *)a2;
                  long long v89 = *(_OWORD *)(a2 + 16);
                  *(_WORD *)(v81 + 32) = *(_WORD *)(a2 + 32);
                  *(_OWORD *)unint64_t v81 = v88;
                  *(_OWORD *)(v81 + 16) = v89;
                  *(_WORD *)(a2 + 32) = v130;
                  *(_OWORD *)a2 = v116;
                  *(_OWORD *)(a2 + 16) = v124;
                  uint64_t v90 = v81 - v10 + 40;
                  if (v90 >= 41)
                  {
                    unint64_t v91 = (v90 / 0x28uLL - 2) >> 1;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v10 + 40 * v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      uint64_t v109 = *(void *)(v81 + 32);
                      long long v106 = *(_OWORD *)(v81 + 16);
                      do
                      {
                        unint64_t v94 = v81;
                        unint64_t v81 = v10 + 40 * v91;
                        long long v95 = *(_OWORD *)v81;
                        long long v96 = *(_OWORD *)(v81 + 16);
                        *(_WORD *)(v94 + 32) = *(_WORD *)(v81 + 32);
                        *(_OWORD *)unint64_t v94 = v95;
                        *(_OWORD *)(v94 + 16) = v96;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 40 * v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_WORD *)(v81 + 32) = v109;
                      *(_OWORD *)(v81 + 16) = v106;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40 * (v12 >> 1)), (double *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            BOOL v16 = (double *)(a1 + 40 * v13 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40), v16, (double *)(a2 - 80));
            char v17 = (double *)(a1 + 40 + 8 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 80), v17, (double *)(a2 - 120));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v16, (double *)v14, v17);
            uint64_t v126 = *(void *)(a1 + 32);
            long long v110 = *(_OWORD *)a1;
            long long v118 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 16) = v19;
            *(_WORD *)(v14 + 32) = v126;
            *(_OWORD *)unint64_t v14 = v110;
            *(_OWORD *)(v14 + 16) = v118;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40 * (v12 >> 1)), (double *)a1, (double *)(a2 - 40));
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 32) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          long long v105 = *(_OWORD *)(a1 + 16);
          uint64_t v108 = *(void *)(a1 + 32);
          if (v20 >= *(double *)(a2 - 32))
          {
            unint64_t v41 = a1 + 40;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 40;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 40;
              double v40 = *(double *)(v39 + 48);
              v39 += 40;
            }
            while (v20 >= v40);
          }
          unint64_t v43 = a2;
          if (v10 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              unint64_t v43 = v44 - 40;
              double v45 = *(double *)(v44 - 32);
              v44 -= 40;
            }
            while (v20 < v45);
          }
          while (v10 < v43)
          {
            uint64_t v128 = *(void *)(v10 + 32);
            long long v112 = *(_OWORD *)v10;
            long long v120 = *(_OWORD *)(v10 + 16);
            long long v46 = *(_OWORD *)v43;
            long long v47 = *(_OWORD *)(v43 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v43 + 32);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(_WORD *)(v43 + 32) = v128;
            *(_OWORD *)unint64_t v43 = v112;
            *(_OWORD *)(v43 + 16) = v120;
            do
            {
              double v48 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *(double *)(v43 - 32);
              v43 -= 40;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 40);
            long long v51 = *(_OWORD *)(v10 - 24);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 40) = v38;
          *(double *)(v10 - 32) = v20;
          *(_WORD *)(v10 - 8) = v108;
          *(_OWORD *)(v10 - 24) = v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        long long v104 = *(_OWORD *)(a1 + 16);
        uint64_t v107 = *(void *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 48);
          v21 += 40;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        unint64_t v25 = a2;
        if (v21 == 40)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 40;
            double v29 = *(double *)(v28 - 32);
            v28 -= 40;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 40;
            double v27 = *(double *)(v25 - 32);
            v25 -= 40;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v127 = *(void *)(v10 + 32);
            long long v111 = *(_OWORD *)v10;
            long long v119 = *(_OWORD *)(v10 + 16);
            long long v31 = *(_OWORD *)v30;
            long long v32 = *(_OWORD *)(v30 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v30 + 32);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(_WORD *)(v30 + 32) = v127;
            *(_OWORD *)unint64_t v30 = v111;
            *(_OWORD *)(v30 + 16) = v119;
            do
            {
              double v33 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v33 < v20);
            do
            {
              double v34 = *(double *)(v30 - 32);
              v30 -= 40;
            }
            while (v34 >= v20);
          }
          while (v10 < v30);
        }
        if (v10 - 40 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 40);
          long long v36 = *(_OWORD *)(v10 - 24);
          *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 40) = v22;
        *(double *)(v10 - 32) = v20;
        *(_WORD *)(v10 - 8) = v107;
        *(_OWORD *)(v10 - 24) = v104;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 40;
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        __int16 v9 = *(_WORD *)(a2 - 8);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      uint64_t v16 = *(void *)v12;
      long long v21 = *(_OWORD *)(v12 + 16);
      uint64_t v22 = *(void *)(v12 + 32);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(void *)uint64_t v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsNoiseLevelEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(void *a1, uint64_t a2)
{
  id v3 = (void *)a1[5];
  uint64_t v4 = a1[6];
  BOOL v5 = (void *)a1[4];
  uint64_t v6 = [v5 dateInterval];
  void v9[4] = v4;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsNoiseLevelEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsNoiseLevelEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  uint64_t v7 = [v3 collectionCalculator:v5 queryForInterval:v6 error:a2 sampleHandler:v10 mergeHandler:v9];

  return v7;
}

void sub_1BD10391C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsNoiseLevelEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10 = *(void *)(a1 + 32);
  *(double *)int v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&_OWORD v14[2] = a7;
  v14[3] = a2;
  char v15 = 1;
  uint64_t v11 = [MEMORY[0x1E4F1C9C8] distantFuture];
  [v11 timeIntervalSinceReferenceDate];
  BOOL v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1BD1039C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsNoiseLevelEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
}

void HDStatisticsRelative<HDStatisticsNoiseLevel>::archive(uint64_t a1, int *a2)
{
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 112);
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F171B978;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  statistics::Statistics::makePrimaryStatistics(a1);
  HDStatisticsNoiseLevel::archive((HDStatisticsNoiseLevel *)(a2 + 2), (uint64_t)v6);
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v6);
  statistics::Statistics::~Statistics((statistics::Statistics *)v6);
  uint64_t v5 = *a2;
  *(_DWORD *)(a1 + 204) |= 0x100u;
  *(void *)(a1 + 136) = v5;
  statistics::Statistics::makeMostRecentDatum(a1);
  v6[0] = &unk_1F17206F8;
  int v10 = 127;
  int8x16_t v7 = vextq_s8(*(int8x16_t *)(a2 + 26), *(int8x16_t *)(a2 + 26), 8uLL);
  v6[1] = *((void *)a2 + 15);
  v6[2] = *((void *)a2 + 16);
  __int16 v8 = 0;
  char v9 = 0;
  statistics::RawQuantitySample::operator=(*v4, (uint64_t)v6);
  PB::Base::~Base((PB::Base *)v6);
}

void sub_1BD103AF0(_Unwind_Exception *a1)
{
  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsNoiseLevel>::unarchive(uint64_t a1, void *a2)
{
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 66) = 0u;
  uint64_t v6 = [[HDQuantitySampleOverlapProcessor alloc] initWithOverlapFunction:1];
  *(void *)(a1 + 88) = v6;
  *(_WORD *)(a1 + 96) = 257;
  double result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_WORD *)(a1 + 136) = 0;
  __int16 v8 = (HDStatisticsNoiseLevel *)a2[16];
  if (v8)
  {
    HDStatisticsNoiseLevel::unarchive(v8, v5);
    v4[2] = v13;
    v4[3] = *(_OWORD *)v14;
    *(_OWORD *)((char *)v4 + 58) = *(_OWORD *)&v14[10];
    *uint64_t v4 = v11;
    v4[1] = v12;
    *(void *)(a1 + 88) = v15;

    *(_WORD *)(a1 + 96) = v16;
  }
  *(_DWORD *)a1 = a2[17];
  uint64_t v9 = a2[14];
  if (v9)
  {
    double result = *(double *)(v9 + 8);
    uint64_t v10 = *(void *)(v9 + 16);
    *(int8x16_t *)(a1 + 104) = vextq_s8(*(int8x16_t *)(v9 + 24), *(int8x16_t *)(v9 + 24), 8uLL);
    *(double *)(a1 + 120) = result;
    *(void *)(a1 + 128) = v10;
    *(_WORD *)(a1 + 136) = 1;
  }
  return result;
}

void sub_1BD103C0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6 = a3;
  uint64_t v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = &unk_1F1724D00;
  double v9 = 900.0;
  if ((v6 & 0x10) == 0) {
    double v9 = 0.0;
  }
  *(double *)(v8 + 56) = v9;
  *(void *)(v8 + 104) = 0;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(void *)(v8 + 96) = 0;
  *(void *)(v8 + 112) = 0;
  HDStatisticsBucket<HDStatisticsNoiseLevel>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_WORD *)(a1 + 576) = 1;
  *(unsigned char *)(a1 + 578) = 0;
  *(unsigned char *)(a1 + 580) = 0;
  *(void *)(a1 + 584) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(void *)(a1 + 624) = 0;
  return a1;
}

void sub_1BD103CDC(_Unwind_Exception *a1)
{
  id v3 = v2;
  objc_destroyWeak(v3);

  uint64_t v5 = *(void **)(v1 + 72);
  if (v5)
  {
    *(void *)(v1 + 80) = v5;
    operator delete(v5);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)v1);
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);

  JUMPOUT(0x1C187B8A0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1F1724D00;
  uint64_t v2 = *(void **)(a1 + 608);
  if (v2)
  {
    *(void *)(a1 + 616) = v2;
    operator delete(v2);
  }

  id v3 = *(void **)(a1 + 544);
  if (v3)
  {
    *(void *)(a1 + 552) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsNoiseLevel>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(unsigned char *)(result + 576) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::setDateInterval(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 copy];
  uint64_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;

  uint64_t v5 = [v6 startDate];
  [v5 timeIntervalSinceReferenceDate];
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_configureForStartTime(a1);
}

void sub_1BD103DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(void *)(a1 + 40))
  {
    id v5 = v3;
    [v3 timeIntervalSinceReferenceDate];
    *(void *)(a1 + 584) = v4;
    id v3 = v5;
  }
}

void sub_1BD103E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::setStatisticsConfiguration(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(a1 + 592), a2);
  id v7 = a2;
  id v4 = *(id *)(a1 + 592);
  id v5 = *(void **)(a1 + 568);
  *(void *)(a1 + 568) = v4;
  id v6 = v4;

  HDStatisticsBucket<HDStatisticsNoiseLevel>::setStatisticsConfiguration(a1 + 120, *(void **)(a1 + 568));
}

void sub_1BD103F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (*(void *)(a1 + 40)) {
    return 1;
  }
  BOOL v7 = *(void *)(a1 + 224) == *(void *)(a1 + 216) && *(uint64_t *)(a1 + 272) < 1
    || HKIntervalMask<double>::firstDifference(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)a2, *(void *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (v7) {
    return 1;
  }
  double v9 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128);

  return v9(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::setStatisticsHandler(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 copy];
  id v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v3;
}

void sub_1BD104070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::dataSource(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));

  return WeakRetained;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::currentStatistics(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 576))
  {
    uint64_t v1 = 0;
  }
  else
  {
    HDStatisticsBucket<HDStatisticsNoiseLevel>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
    HDStatisticsBucket<HDStatisticsNoiseLevel>::_updateSourceOrder((uint64_t)v4);
    HDStatisticsBucket<HDStatisticsNoiseLevel>::_mergeThroughTime((uint64_t)v4, v4[1]);
    uint64_t v1 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_statisticsFromFinishedBucket(a1, v4);
    HDStatisticsBucket<HDStatisticsNoiseLevel>::~HDStatisticsBucket((uint64_t)v4);
  }

  return v1;
}

void sub_1BD104140(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HDStatisticsBucket<HDStatisticsNoiseLevel>::~HDStatisticsBucket((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(a1 + 64);
  BOOL v7 = v6;
  if (!v6) {
    goto LABEL_4;
  }
  uint64_t v8 = [v6 startDate];
  [v8 timeIntervalSinceReferenceDate];
  if (v9 > *(double *)(a2 + 16))
  {

    goto LABEL_10;
  }
  uint64_t v10 = [v7 endDate];
  [v10 timeIntervalSinceReferenceDate];
  double v12 = v11;
  double v13 = *(double *)(a2 + 8);

  if (v12 >= v13)
  {
LABEL_4:
    if (!*(unsigned char *)(a1 + 578)) {
      goto LABEL_21;
    }
    if (!*(unsigned char *)(a1 + 577))
    {
      if (*(void *)(a1 + 40))
      {
        if (*(unsigned char *)(a1 + 576))
        {
          double v14 = -1.79769313e308;
        }
        else
        {
          double v16 = *(double *)(a1 + 176);
          double v14 = *(double *)(a1 + 120);
          if (v16 <= v14) {
            double v16 = -1.79769313e308;
          }
          if (v16 >= v14) {
            double v14 = v16;
          }
        }
      }
      else
      {
        double v14 = -1.79769313e308;
        if (*(double *)(a1 + 176) > *(double *)(a1 + 120)) {
          double v14 = *(double *)(a1 + 176);
        }
      }
      if (v14 > *(double *)(a2 + 8))
      {
        uint64_t v17 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
        uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v17, a3);

        goto LABEL_22;
      }
      if (*(unsigned char *)(a1 + 579))
      {
LABEL_21:
        uint64_t v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_primitiveAddSample(a1, a2, 1, a3);
        goto LABEL_22;
      }
      unint64_t v19 = *(void *)(a1 + 616);
      unint64_t v20 = *(void *)(a1 + 624);
      if (v19 >= v20)
      {
        uint64_t v24 = *(void *)(a1 + 608);
        unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v24) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - v24) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x333333333333333) {
          unint64_t v28 = 0x666666666666666;
        }
        else {
          unint64_t v28 = v26;
        }
        if (v28) {
          unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v28);
        }
        else {
          uint64_t v29 = 0;
        }
        unint64_t v30 = v28 + 40 * v25;
        unint64_t v31 = v28 + 40 * v29;
        long long v32 = *(_OWORD *)a2;
        long long v33 = *(_OWORD *)(a2 + 16);
        *(void *)(v30 + 32) = *(void *)(a2 + 32);
        *(_OWORD *)unint64_t v30 = v32;
        *(_OWORD *)(v30 + 16) = v33;
        unint64_t v23 = v30 + 40;
        double v34 = *(char **)(a1 + 616);
        long long v35 = *(char **)(a1 + 608);
        if (v34 != v35)
        {
          do
          {
            long long v36 = *(_OWORD *)(v34 - 40);
            long long v37 = *(_OWORD *)(v34 - 24);
            *(_WORD *)(v30 - 8) = *((_WORD *)v34 - 4);
            *(_OWORD *)(v30 - 24) = v37;
            *(_OWORD *)(v30 - 40) = v36;
            v30 -= 40;
            v34 -= 40;
          }
          while (v34 != v35);
          double v34 = *(char **)(a1 + 608);
        }
        *(void *)(a1 + 608) = v30;
        *(void *)(a1 + 616) = v23;
        *(void *)(a1 + 624) = v31;
        if (v34) {
          operator delete(v34);
        }
      }
      else
      {
        long long v21 = *(_OWORD *)a2;
        long long v22 = *(_OWORD *)(a2 + 16);
        *(void *)(v19 + 32) = *(void *)(a2 + 32);
        *(_OWORD *)unint64_t v19 = v21;
        *(_OWORD *)(v19 + 16) = v22;
        unint64_t v23 = v19 + 40;
      }
      *(void *)(a1 + 616) = v23;
    }
  }
LABEL_10:
  uint64_t v15 = 1;
LABEL_22:

  return v15;
}

void sub_1BD1043FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = v5;
  if (*(unsigned char *)(a1 + 578))
  {
    uint64_t v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 578) = 1;
  uint64_t v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    uint64_t v7 = 0;
    goto LABEL_82;
  }
  uint64_t v65 = v6;
  if (*(unsigned char *)(a1 + 577)) {
    goto LABEL_5;
  }
  double v9 = *(void **)(a1 + 600);
  if (!v9)
  {
    id v68 = 0;
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 40))
  {
LABEL_5:
    int v8 = 0;
    id v68 = 0;
    goto LABEL_29;
  }
  [v9 sortUsingComparator:&__block_literal_global_877];
  id v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v10 = *(id *)(a1 + 600);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  if (!v11)
  {

    id v12 = 0;
    goto LABEL_27;
  }
  id v12 = 0;
  uint64_t v13 = *(void *)v70;
  do
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (*(void *)v70 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(id *)(*((void *)&v69 + 1) + 8 * i);
      double v16 = v15;
      if (v12)
      {
        uint64_t v17 = [v15 startDate];
        uint64_t v18 = [v12 endDate];
        int v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          unint64_t v20 = [v16 endDate];
          long long v21 = [v12 endDate];
          int v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22) {
            goto LABEL_21;
          }
          id v23 = objc_alloc(MEMORY[0x1E4F28C18]);
          uint64_t v24 = [v12 startDate];
          unint64_t v25 = [v16 endDate];
          id v26 = (id)[v23 initWithStartDate:v24 endDate:v25];
        }
        else
        {
          [v68 addObject:v12];
          id v26 = v16;
        }
        id v12 = v26;
      }
      else
      {
        id v12 = v15;
      }
LABEL_21:
    }
    uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  }
  while (v11);

  if (v12) {
    [v68 addObject:v12];
  }
LABEL_27:

LABEL_28:
  int v8 = 1;
LABEL_29:
  unint64_t v27 = *(void **)(a1 + 600);
  *(void *)(a1 + 600) = 0;

  *(unsigned char *)(a1 + 577) = 0;
  if (!v8)
  {
    unint64_t v38 = *(void *)(a1 + 608);
    *(void *)(a1 + 624) = 0;
    *(void *)(a1 + 616) = 0;
    *(void *)(a1 + 608) = 0;
    unint64_t v39 = v38;
    goto LABEL_47;
  }
  unint64_t v28 = [v68 lastObject];
  if (v28)
  {
    uint64_t v29 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_currentBucketInterval(a1);
    unint64_t v30 = [v29 endDate];
    unint64_t v31 = [v28 endDate];
    int v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      long long v33 = [v28 endDate];
      [v33 timeIntervalSinceReferenceDate];
      double v35 = v34;

      uint64_t v36 = *(void *)(a1 + 608);
      long long v37 = *(long long **)(a1 + 616);
      while ((long long *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((long long *)v36 != v37)
          {
            double v40 = (long long *)(v36 + 40);
            if ((long long *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  long long v41 = *v40;
                  long long v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)uint64_t v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                double v40 = (long long *)((char *)v40 + 40);
              }
              while (v40 != v37);
              long long v37 = *(long long **)(a1 + 616);
            }
          }
          if ((long long *)v36 != v37) {
            *(void *)(a1 + 616) = v36;
          }
          break;
        }
        v36 += 40;
      }
    }
  }
  unint64_t v38 = *(void *)(a1 + 608);
  unint64_t v39 = *(void *)(a1 + 616);
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 616) = 0;
  if (![v68 count]) {
    goto LABEL_60;
  }
LABEL_47:
  id v43 = v68;
  long long __p = (void *)v38;
  if (v43)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v44 = v43;
    uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v70;
      while (2)
      {
        for (uint64_t j = 0; j != v45; ++j)
        {
          if (*(void *)v70 != v46) {
            objc_enumerationMutation(v44);
          }
          id v48 = *(id *)(*((void *)&v69 + 1) + 8 * j);
          int v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_primitiveInvalidateInterval((id *)a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
        if (v45) {
          continue;
        }
        break;
      }
    }

LABEL_59:
    unint64_t v38 = (unint64_t)__p;
LABEL_60:
    unint64_t v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v51;
    }
    int v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    long long __p = (void *)v38;
    if (v39 != v38)
    {
      uint64_t v54 = v38;
      uint64_t v50 = v67;
      do
      {
        int v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_primitiveAddSample(a1, v54, 1, v50);
        int v53 = v55;
        v54 += 40;
        if (v54 == v39) {
          char v56 = 0;
        }
        else {
          char v56 = v55;
        }
        uint64_t v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_primitiveInvalidateInterval((id *)a1, 0, v67))goto LABEL_59; {
LABEL_70:
    }
    int v53 = 0;
  }
  if (*(void *)(a1 + 40) && *(void *)(a1 + 552) != *(void *)(a1 + 544))
  {
    do
    {
      uint64_t v57 = objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(void *)(a1 + 112) + 1, v50, v65);
      HDStatisticsBucket<HDStatisticsNoiseLevel>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsNoiseLevel>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      unint64_t v58 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_statisticsFromFinishedBucket(a1, (double *)(a1 + 120));
      long long v59 = [v57 startDate];
      [v59 timeIntervalSinceReferenceDate];
      double v61 = v60;
      uint64_t v62 = [v57 endDate];
      [v62 timeIntervalSinceReferenceDate];
      HDStatisticsCollectionEngine<HDStatisticsNoiseLevel>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_notifyForCurrentBucket(a1);
    }
    while (*(void *)(a1 + 552) != *(void *)(a1 + 544));
  }
  *(unsigned char *)(a1 + 578) = 0;
  if (__p) {
    operator delete(__p);
  }

  if (v53)
  {
    if (*(unsigned char *)(a1 + 580))
    {
      *(unsigned char *)(a1 + 580) = 0;
      id v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_notifyForCurrentBucket(a1);
      uint64_t v7 = 1;
      goto LABEL_82;
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v6 = v65;
LABEL_82:
  *(unsigned char *)(a1 + 578) = 0;
LABEL_83:

  return v7;
}

void sub_1BD104B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    *(unsigned char *)(v13 + 578) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::enableImmediateSampleInsertion(uint64_t result)
{
  *(unsigned char *)(result + 579) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(unsigned char *)(a1 + 578)) {
      goto LABEL_12;
    }
    uint64_t v7 = 0;
LABEL_14:
    uint64_t v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_primitiveInvalidateInterval((id *)a1, v7, a3);
    goto LABEL_15;
  }
  uint64_t v7 = [v6 dateIntervalForIntervalsContainingInterval:v5];

  if (!*(unsigned char *)(a1 + 578)) {
    goto LABEL_14;
  }
  if (!v7)
  {
LABEL_12:
    id v12 = *(void **)(a1 + 600);
    *(void *)(a1 + 600) = 0;

    uint64_t v7 = 0;
    uint64_t v11 = 1;
    *(unsigned char *)(a1 + 577) = 1;
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 577))
  {
    int v8 = *(void **)(a1 + 600);
    if (!v8)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      id v10 = *(void **)(a1 + 600);
      *(void *)(a1 + 600) = v9;

      int v8 = *(void **)(a1 + 600);
    }
    [v8 addObject:v7];
  }
  uint64_t v11 = 1;
LABEL_15:

  return v11;
}

void sub_1BD104E00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    *(unsigned char *)(a1 + 576) = 1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsNoiseLevelE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v9[3] = &unk_1E63043E8;
    uint64_t v12 = a1;
    id v10 = v5;
    id v11 = WeakRetained;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 112))(a1, v9, a3);
    if (v7 && *(unsigned char *)(a1 + 576) && !*(void *)(a1 + 40)) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_configureForStartTime(a1);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to query for initial statistics: no data source available.");
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1BD104F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::reset(uint64_t result)
{
  *(unsigned char *)(result + 576) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 encodeBool:*(unsigned __int8 *)(a1 + 576) forKey:@"needs_config"];
  id v12 = v3;
  int v32 = &unk_1F1726FA0;
  long long v33 = 0;
  int v38 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
  LOBYTE(v38) = 1;
  uint64_t v34 = v4;
  uint64_t v35 = 0;
  statistics::StatisticsEngine::makeCurrentBucket((uint64_t)&v32);
  uint64_t v13 = &unk_1F171B9C8;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  int v31 = 511;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 0;
  int8x16_t v14 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  uint64_t v5 = *(void *)(a1 + 136);
  char v29 = *(unsigned char *)(a1 + 144);
  char v30 = *(unsigned char *)(a1 + 145);
  BOOL v28 = *(_DWORD *)(a1 + 148) == 0;
  int8x16_t v15 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  uint64_t v7 = *(int8x16_t **)(a1 + 216);
  if (v7 != *(int8x16_t **)(a1 + 224))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v7, *v7, 8uLL);
    int8x16_t v40 = v7[1];
    char v43 = 0;
    HIBYTE(v42) = v7[2].i8[9];
    LOBYTE(v42) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>();
  }
  statistics::StatisticsBucket::makeStatistics((uint64_t)&v13);
  HDStatisticsNoiseLevel::archive((HDStatisticsNoiseLevel *)(a1 + 240), (uint64_t)&v39);
  statistics::Statistics::operator=(*((statistics **)&v22 + 1), (uint64_t)&v39);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v39);
  uint64_t v8 = *(void *)(a1 + 336);
  if (v8 != a1 + 344)
  {
    HDStatisticsNoiseLevel::archive((HDStatisticsNoiseLevel *)(v8 + 40), (uint64_t)&v39);
    uint64_t v9 = *(void *)(v8 + 32);
    v46 |= 0x200u;
    uint64_t v45 = v9;
    PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>();
  }
  id v10 = *(int8x16_t **)(a1 + 184);
  if (v10 != *(int8x16_t **)(a1 + 192))
  {
    unint64_t v39 = (char *)&unk_1F1727540;
    v41.i32[0] = 3;
    int8x16_t v40 = vextq_s8(*v10, *v10, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>();
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v13);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v13);
  id v11 = *(int8x16_t **)(a1 + 544);
  if (v11 != *(int8x16_t **)(a1 + 552))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v11, *v11, 8uLL);
    int8x16_t v40 = v11[1];
    __int16 v42 = 0;
    char v43 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>();
  }
  PB::Writer::Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v39);
  [v12 encodeBytes:v40.i64[0] length:&v39[-v40.i64[0]] forKey:@"hdsce_archived_representation"];
  PB::Writer::~Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);
}

void sub_1BD105354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v61 = a2;
  *(unsigned char *)(a1 + 576) = [v61 decodeBoolForKey:@"needs_config"];
  id v60 = v61;
  HDStatisticsBucket<HDStatisticsNoiseLevel>::HDStatisticsBucket((uint64_t)&v64.n128_i64[1], 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)uint64_t v65 = 0u;
  long long v66 = 0u;
  uint64_t v104 = 0;
  id v3 = v60;
  PB::Reader::Reader((PB::Reader *)v103, (const unsigned __int8 *)[v3 decodeBytesForKey:@"hdsce_archived_representation" returnedLength:&v104]);
  uint64_t v62 = v3;
  uint64_t v63 = a1;
  long long v96 = &unk_1F1726FA0;
  uint64_t v97 = 0;
  uint64_t v101 = 0;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  int v102 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v96, (PB::Reader *)v103);
  uint64_t v4 = v97;
  v64.n128_u64[0] = v98;
  if (v97)
  {
    uint64_t v71 = 0;
    memset(v74, 0, sizeof(v74));
    *(_OWORD *)long long __p = 0u;
    memset(v76, 0, sizeof(v76));
    uint64_t v77 = [[HDQuantitySampleOverlapProcessor alloc] initWithOverlapFunction:1];
    __int16 v78 = 257;
    uint64_t v81 = 0;
    uint64_t v80 = 0;
    int64_t v79 = &v80;
    long long v82 = 0u;
    long long v83 = 0u;
    int v84 = 1065353216;
    long long v85 = 0u;
    long long v86 = 0u;
    long long v87 = 0u;
    uint64_t v88 = 0;
    int v89 = 1065353216;
    long long v90 = 0u;
    long long v91 = 0u;
    int v92 = 1065353216;
    long long v93 = 0u;
    long long v94 = 0u;
    int v95 = 1065353216;
    int8x16_t v67 = vextq_s8(*(int8x16_t *)(v4 + 8), *(int8x16_t *)(v4 + 8), 8uLL);
    uint64_t v6 = *(void *)(v4 + 72);
    uint64_t v68 = *(void *)(v4 + 64);
    char v69 = *(unsigned char *)(v4 + 185);
    char v70 = *(unsigned char *)(v4 + 186);
    int8x16_t v72 = vextq_s8(*(int8x16_t *)(v4 + 24), *(int8x16_t *)(v4 + 24), 8uLL);
    uint64_t v73 = v6;
    uint64_t v7 = *(void *)(v4 + 80);
    uint64_t v8 = *(void *)(v4 + 88);
    if (v7 != v8)
    {
      uint64_t v9 = (char *)__p[1];
      do
      {
        uint64_t v10 = *(void *)(*(void *)v7 + 24);
        uint64_t v11 = *(void *)(*(void *)v7 + 32);
        uint64_t v12 = *(void *)(*(void *)v7 + 8);
        uint64_t v13 = *(void *)(*(void *)v7 + 16);
        char v14 = *(unsigned char *)(*(void *)v7 + 41);
        char v15 = *(unsigned char *)(*(void *)v7 + 40);
        if ((unint64_t)v9 >= *(void *)v76)
        {
          uint64_t v16 = (char *)__p[0];
          unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v9 - (char *)__p[0]) >> 4);
          unint64_t v18 = v17 + 1;
          if (v17 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(*(void *)v76 - (unint64_t)__p[0]) >> 4) > v18) {
            unint64_t v18 = 0x5555555555555556 * ((uint64_t)(*(void *)v76 - (unint64_t)__p[0]) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v76 - (unint64_t)__p[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v19 = 0x555555555555555;
          }
          else {
            unint64_t v19 = v18;
          }
          if (v19)
          {
            unint64_t v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v19);
            uint64_t v9 = (char *)__p[1];
            uint64_t v16 = (char *)__p[0];
          }
          else
          {
            uint64_t v5 = 0;
          }
          unint64_t v20 = v19 + 48 * v17;
          *(void *)unint64_t v20 = v11;
          *(void *)(v20 + 8) = v10;
          *(void *)(v20 + 16) = v12;
          *(void *)(v20 + 24) = v13;
          *(_WORD *)(v20 + 32) = 1;
          *(unsigned char *)(v20 + 40) = 0;
          *(unsigned char *)(v20 + 41) = v14;
          *(unsigned char *)(v20 + 42) = v15;
          long long v21 = (char *)v20;
          if (v9 != v16)
          {
            do
            {
              long long v22 = *((_OWORD *)v9 - 3);
              long long v23 = *((_OWORD *)v9 - 2);
              *(_OWORD *)(v21 - 21) = *(_OWORD *)(v9 - 21);
              *((_OWORD *)v21 - 3) = v22;
              *((_OWORD *)v21 - 2) = v23;
              v21 -= 48;
              v9 -= 48;
            }
            while (v9 != v16);
            uint64_t v16 = (char *)__p[0];
          }
          uint64_t v9 = (char *)(v20 + 48);
          __p[0] = v21;
          __p[1] = (void *)(v20 + 48);
          *(void *)long long v76 = v19 + 48 * (void)v5;
          if (v16) {
            operator delete(v16);
          }
        }
        else
        {
          *(void *)uint64_t v9 = v11;
          *((void *)v9 + 1) = v10;
          *((void *)v9 + 2) = v12;
          *((void *)v9 + 3) = v13;
          *((_WORD *)v9 + 16) = 1;
          v9[40] = 0;
          v9[41] = v14;
          v9[42] = v15;
          v9 += 48;
        }
        __p[1] = v9;
        v7 += 8;
      }
      while (v7 != v8);
    }
    long long v24 = *(HDStatisticsNoiseLevel **)(v4 + 104);
    if (v24)
    {
      HDStatisticsNoiseLevel::unarchive(v24, v5);
      *(_OWORD *)&v76[40] = v107;
      *(_OWORD *)&v76[56] = v108[0];
      *(_OWORD *)&v76[66] = *(_OWORD *)((char *)v108 + 10);
      *(_OWORD *)&v76[8] = v105;
      *(_OWORD *)&v76[24] = v106;
      objc_storeStrong((id *)&v77, v109);
      __int16 v78 = v110;
    }
    long long v25 = *(HDStatisticsNoiseLevel ***)(v4 + 136);
    for (uint64_t i = *(HDStatisticsNoiseLevel ***)(v4 + 144); v25 != i; ++v25)
    {
      uint64_t v27 = *v25;
      HDStatisticsNoiseLevel::unarchive(*v25, v5);
      uint64_t v28 = *((void *)v27 + 18);
      char v29 = v80;
      char v30 = &v80;
      int v31 = &v80;
      if (v80)
      {
        do
        {
          while (1)
          {
            int v31 = (uint64_t **)v29;
            uint64_t v32 = v29[4];
            if (v32 <= v28) {
              break;
            }
            char v29 = *v31;
            char v30 = v31;
            if (!*v31) {
              goto LABEL_32;
            }
          }
          if (v32 >= v28)
          {
            uint64_t v34 = (char *)v31;
            goto LABEL_35;
          }
          char v29 = v31[1];
        }
        while (v29);
        char v30 = v31 + 1;
      }
LABEL_32:
      uint64_t v34 = (char *)operator new(0x88uLL);
      *((void *)v34 + 4) = v28;
      *(_OWORD *)(v34 + 40) = 0u;
      *(_OWORD *)(v34 + 56) = 0u;
      *(_OWORD *)(v34 + 72) = 0u;
      *(_OWORD *)(v34 + 88) = 0u;
      *(_OWORD *)(v34 + 104) = 0u;
      *(_OWORD *)(v34 + 120) = 0u;
      *((void *)v34 + 15) = [[HDQuantitySampleOverlapProcessor alloc] initWithOverlapFunction:1];
      *((_WORD *)v34 + 64) = 257;
      *(void *)uint64_t v34 = 0;
      *((void *)v34 + 1) = 0;
      *((void *)v34 + 2) = v31;
      *char v30 = (uint64_t *)v34;
      long long v33 = (uint64_t *)v34;
      if (*v79)
      {
        int64_t v79 = (uint64_t **)*v79;
        long long v33 = *v30;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v80, v33);
      ++v81;
LABEL_35:
      long long v35 = *(_OWORD *)((char *)v108 + 10);
      long long v37 = v107;
      long long v36 = v108[0];
      long long v38 = v105;
      *(_OWORD *)(v34 + 56) = v106;
      *(_OWORD *)(v34 + 72) = v37;
      *(_OWORD *)(v34 + 88) = v36;
      *(_OWORD *)(v34 + 98) = v35;
      *(_OWORD *)(v34 + 40) = v38;
      objc_storeStrong((id *)v34 + 15, v109);
      *((_WORD *)v34 + 64) = v110;
    }
    uint64_t v39 = *(void *)(v4 + 40);
    for (uint64_t j = *(void *)(v4 + 48); v39 != j; v39 += 8)
    {
      double v42 = *(double *)(*(void *)v39 + 8);
      double v41 = *(double *)(*(void *)v39 + 16);
      if (v42 >= v41) {
        double v43 = *(double *)(*(void *)v39 + 16);
      }
      else {
        double v43 = *(double *)(*(void *)v39 + 8);
      }
      if (v41 < v42) {
        double v41 = *(double *)(*(void *)v39 + 8);
      }
      HKIntervalMask<double>::_insertInterval(v74, v43, v41);
    }
    HDStatisticsBucket<HDStatisticsNoiseLevel>::operator=((uint64_t)&v64.n128_i64[1], (uint64_t)&v67);
    HDStatisticsBucket<HDStatisticsNoiseLevel>::~HDStatisticsBucket((uint64_t)&v67);
  }
  uint64_t v44 = v99;
  uint64_t v45 = v100;
  if (v99 != v100)
  {
    int v46 = (char *)v65[1];
    do
    {
      uint64_t v47 = *(void *)(*(void *)v44 + 24);
      uint64_t v48 = *(void *)(*(void *)v44 + 32);
      uint64_t v49 = *(void *)(*(void *)v44 + 8);
      uint64_t v50 = *(void *)(*(void *)v44 + 16);
      if ((unint64_t)v46 >= (unint64_t)v66)
      {
        unint64_t v51 = (char *)v65[0];
        unint64_t v52 = 0xCCCCCCCCCCCCCCCDLL * ((v46 - (char *)v65[0]) >> 3);
        unint64_t v53 = v52 + 1;
        if (v52 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(v66 - (unint64_t)v65[0]) >> 3) > v53) {
          unint64_t v53 = 0x999999999999999ALL * ((uint64_t)(v66 - (unint64_t)v65[0]) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v66 - (unint64_t)v65[0]) >> 3) >= 0x333333333333333) {
          unint64_t v54 = 0x666666666666666;
        }
        else {
          unint64_t v54 = v53;
        }
        if (v54)
        {
          unint64_t v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v54);
          unint64_t v51 = (char *)v65[0];
          int v46 = (char *)v65[1];
        }
        else
        {
          uint64_t v55 = 0;
        }
        unint64_t v56 = v54 + 40 * v52;
        *(void *)unint64_t v56 = v48;
        *(void *)(v56 + 8) = v47;
        *(void *)(v56 + 16) = v49;
        *(void *)(v56 + 24) = v50;
        *(_WORD *)(v56 + 32) = 1;
        uint64_t v57 = (char *)v56;
        if (v46 != v51)
        {
          do
          {
            long long v58 = *(_OWORD *)(v46 - 40);
            long long v59 = *(_OWORD *)(v46 - 24);
            *((_WORD *)v57 - 4) = *((_WORD *)v46 - 4);
            *(_OWORD *)(v57 - 24) = v59;
            *(_OWORD *)(v57 - 40) = v58;
            v57 -= 40;
            v46 -= 40;
          }
          while (v46 != v51);
          unint64_t v51 = (char *)v65[0];
        }
        int v46 = (char *)(v56 + 40);
        v65[0] = v57;
        v65[1] = (void *)(v56 + 40);
        *(void *)&long long v66 = v54 + 40 * v55;
        if (v51) {
          operator delete(v51);
        }
      }
      else
      {
        *(void *)int v46 = v48;
        *((void *)v46 + 1) = v47;
        *((void *)v46 + 2) = v49;
        *((void *)v46 + 3) = v50;
        *((_WORD *)v46 + 16) = 1;
        v46 += 40;
      }
      v65[1] = v46;
      v44 += 8;
    }
    while (v44 != v45);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v96);

  HDStatisticsCollectionEngine<HDStatisticsNoiseLevel>::operator=((void *)(v63 + 112), &v64);
  if (v65[0])
  {
    v65[1] = v65[0];
    operator delete(v65[0]);
  }
  HDStatisticsBucket<HDStatisticsNoiseLevel>::~HDStatisticsBucket((uint64_t)&v64.n128_i64[1]);
}

void sub_1BD105AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table((uint64_t)&STACK[0x390]);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a3);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x340]);
  uint64_t v10 = (void *)STACK[0x328];
  if (STACK[0x328])
  {
    STACK[0x330] = (unint64_t)v10;
    operator delete(v10);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x300]);
  std::__tree<std::__value_type<long long,HDStatisticsNoiseLevel>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsNoiseLevel>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsNoiseLevel>>>::destroy((void *)STACK[0x2F0]);

  uint64_t v11 = (void *)STACK[0x270];
  if (STACK[0x270])
  {
    STACK[0x278] = (unint64_t)v11;
    operator delete(v11);
  }
  objc_destroyWeak((id *)&STACK[0x268]);
  uint64_t v12 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v12;
    operator delete(v12);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x3C0]);
  HDStatisticsCollectionEngine<HDStatisticsNoiseLevel>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsNoiseLevel>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(double *)(a1 + 56) = a3;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_WORD *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = [[HDQuantitySampleOverlapProcessor alloc] initWithOverlapFunction:1];
  *(_WORD *)(a1 + 208) = 257;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 216) = a1 + 224;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 272) = 1065353216;
  *(void *)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 376) = 1065353216;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_DWORD *)(a1 + 416) = 1065353216;
  return a1;
}

void sub_1BD105CA8(_Unwind_Exception *a1)
{
  uint64_t v6 = v3;
  uint64_t v8 = *v6;
  if (*v6)
  {
    *(void *)(v1 + 104) = v8;
    operator delete(v8);
  }
  objc_destroyWeak(v2);
  uint64_t v9 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 72) = v9;
    operator delete(v9);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsNoiseLevel>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 432);
  if (v2)
  {
    *(void *)(a1 + 440) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsNoiseLevel>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsNoiseLevel>::~HDStatisticsBucket(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 384);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 344);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 304);
  uint64_t v2 = *(void **)(a1 + 280);
  if (v2)
  {
    *(void *)(a1 + 288) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 240);
  std::__tree<std::__value_type<long long,HDStatisticsNoiseLevel>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsNoiseLevel>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsNoiseLevel>>>::destroy(*(void **)(a1 + 224));

  id v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(void *)(a1 + 104) = v3;
    operator delete(v3);
  }
  objc_destroyWeak((id *)(a1 + 88));
  uint64_t v4 = *(void **)(a1 + 64);
  if (v4)
  {
    *(void *)(a1 + 72) = v4;
    operator delete(v4);
  }

  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsNoiseLevel>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsNoiseLevel>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsNoiseLevel>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsNoiseLevel>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsNoiseLevel>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsNoiseLevel>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsNoiseLevel>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsNoiseLevel>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsNoiseLevel>>>::destroy(a1[1]);

    operator delete(a1);
  }
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_configureForStartTime(uint64_t a1)
{
  unint64_t v27 = 0;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
    uint64_t v4 = [v2 dateIntervalContainingDate:v3 index:&v27];

    uint64_t v5 = [v4 startDate];
    [v5 timeIntervalSinceReferenceDate];
    double v7 = v6;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
LABEL_5:
    double v13 = v9;

    goto LABEL_6;
  }
  id v10 = *(id *)(a1 + 64);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v11 = [v10 startDate];
    [v11 timeIntervalSinceReferenceDate];
    double v7 = v12;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
    goto LABEL_5;
  }
  double v7 = -1.79769313e308;
  double v13 = 1.79769313e308;
LABEL_6:

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsNoiseLevel>::HDStatisticsBucket((uint64_t)v21, WeakRetained, v7, v13);

  if (*(void *)(a1 + 32) == 1) {
    char v23 = 1;
  }
  uint64_t v22 = *(void *)(a1 + 56);
  char v24 = *(unsigned char *)(a1 + 24) & 1;
  if (v26 != (char *)(a1 + 72)) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v26, *(char **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4);
  }
  HDStatisticsBucket<HDStatisticsNoiseLevel>::setStatisticsConfiguration((uint64_t)v21, *(void **)(a1 + 592));
  if (!*(void *)(a1 + 40)) {
    int v25 = 0;
  }
  unint64_t v15 = v27;
  HDStatisticsBucket<HDStatisticsNoiseLevel>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v21);
  v18.n128_u64[0] = v15;
  HDStatisticsBucket<HDStatisticsNoiseLevel>::HDStatisticsBucket((uint64_t)&v18.n128_i64[1], (uint64_t)v17);
  long long __p = 0u;
  long long v20 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsNoiseLevel>::operator=((void *)(a1 + 112), &v18);

  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsNoiseLevel>::~HDStatisticsBucket((uint64_t)&v18.n128_i64[1]);
  HDStatisticsBucket<HDStatisticsNoiseLevel>::~HDStatisticsBucket((uint64_t)v17);
  *(unsigned char *)(a1 + 576) = 0;
  return HDStatisticsBucket<HDStatisticsNoiseLevel>::~HDStatisticsBucket((uint64_t)v21);
}

void sub_1BD1060CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsNoiseLevel>::setStatisticsConfiguration(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(a1 + 32), a2);
  uint64_t v4 = a2;
  HDStatisticsNoiseLevel::configure((id *)(a1 + 120), v4);
}

void sub_1BD106188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *HDStatisticsCollectionEngine<HDStatisticsNoiseLevel>::operator=(void *a1, __n128 *a2)
{
  *a1 = a2->n128_u64[0];
  HDStatisticsBucket<HDStatisticsNoiseLevel>::operator=((uint64_t)(a1 + 1), (uint64_t)&a2->n128_i64[1]);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 54), a2 + 27);
  unint64_t v4 = a2[28].n128_u64[1];
  a2[28].n128_u64[1] = 0;
  uint64_t v5 = (void *)a1[57];
  a1[57] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsNoiseLevel>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 96);
  double v7 = *(unsigned char **)(a2 + 104);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(void *)(a1 + 96) = v10;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(void *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)(a1 + 120), (const HDStatisticsNoiseLevel *)(a2 + 120));
  *(void *)(a1 + 224) = 0;
  double v12 = (void *)(a1 + 224);
  *(void *)(a1 + 216) = a1 + 224;
  *(void *)(a1 + 232) = 0;
  double v13 = *(void **)(a2 + 216);
  if (v13 != (void *)(a2 + 224))
  {
    char v14 = 0;
    unint64_t v15 = (void *)(a1 + 224);
    while (1)
    {
      uint64_t v16 = (void *)(a1 + 224);
      if (v15 == v12) {
        goto LABEL_12;
      }
      unint64_t v17 = v14;
      __n128 v18 = (void *)(a1 + 224);
      if (v14)
      {
        do
        {
          uint64_t v16 = v17;
          unint64_t v17 = (void *)v17[1];
        }
        while (v17);
      }
      else
      {
        do
        {
          uint64_t v16 = (void *)v18[2];
          BOOL v19 = *v16 == (void)v18;
          __n128 v18 = v16;
        }
        while (v19);
      }
      uint64_t v20 = v13[4];
      if (v16[4] < v20)
      {
LABEL_12:
        if (v14) {
          long long v21 = (uint64_t **)v16;
        }
        else {
          long long v21 = (uint64_t **)(a1 + 224);
        }
        if (v14) {
          uint64_t v22 = (uint64_t **)(v16 + 1);
        }
        else {
          uint64_t v22 = (uint64_t **)(a1 + 224);
        }
        if (!*v22)
        {
LABEL_28:
          int v25 = (uint64_t *)operator new(0x88uLL);
          v25[4] = v13[4];
          HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)(v25 + 5), (const HDStatisticsNoiseLevel *)(v13 + 5));
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 216), (uint64_t)v21, v22, v25);
        }
      }
      else
      {
        uint64_t v22 = (uint64_t **)(a1 + 224);
        long long v21 = (uint64_t **)(a1 + 224);
        if (!v14) {
          goto LABEL_28;
        }
        char v23 = v14;
        while (1)
        {
          while (1)
          {
            long long v21 = (uint64_t **)v23;
            uint64_t v24 = v23[4];
            if (v24 <= v20) {
              break;
            }
            char v23 = *v21;
            uint64_t v22 = v21;
            if (!*v21) {
              goto LABEL_28;
            }
          }
          if (v24 >= v20) {
            break;
          }
          char v23 = v21[1];
          if (!v23)
          {
            uint64_t v22 = v21 + 1;
            goto LABEL_28;
          }
        }
      }
      long long v26 = (void *)v13[1];
      if (v26)
      {
        do
        {
          unint64_t v27 = v26;
          long long v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          unint64_t v27 = (void *)v13[2];
          BOOL v19 = *v27 == (void)v13;
          double v13 = v27;
        }
        while (!v19);
      }
      if (v27 == (void *)(a2 + 224)) {
        break;
      }
      char v14 = (void *)*v12;
      unint64_t v15 = *(void **)(a1 + 216);
      double v13 = v27;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 240, a2 + 240);
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 280), *(const void **)(a2 + 280), *(void *)(a2 + 288), (uint64_t)(*(void *)(a2 + 288) - *(void *)(a2 + 280)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 304, a2 + 304);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 344, a2 + 344);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 384, a2 + 384);
  return a1;
}

void sub_1BD1064C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, id *location, void **a12)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v17);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  BOOL v19 = *v15;
  if (*v15)
  {
    *(void *)(v13 + 288) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
  std::__tree<std::__value_type<long long,HDStatisticsNoiseLevel>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsNoiseLevel>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsNoiseLevel>>>::destroy(*v12);

  uint64_t v20 = *a10;
  if (*a10)
  {
    *(void *)(v13 + 104) = v20;
    operator delete(v20);
  }
  objc_destroyWeak(location);
  long long v21 = *a12;
  if (*a12)
  {
    *(void *)(v13 + 72) = v21;
    operator delete(v21);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsNoiseLevel>::operator=(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  long long v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v5;

  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  id WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  uint64_t v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(void *)(a1 + 104) = v9;
    operator delete(v9);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 96) = 0;
  long long v10 = *(_OWORD *)(a2 + 152);
  long long v11 = *(_OWORD *)(a2 + 168);
  long long v12 = *(_OWORD *)(a2 + 178);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 178) = v12;
  *(_OWORD *)(a1 + 168) = v11;
  *(_OWORD *)(a1 + 152) = v10;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  objc_storeStrong((id *)(a1 + 200), *(id *)(a2 + 200));
  uint64_t v14 = a1 + 224;
  uint64_t v13 = *(void **)(a1 + 224);
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  std::__tree<std::__value_type<long long,HDStatisticsNoiseLevel>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsNoiseLevel>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsNoiseLevel>>>::destroy(v13);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  unint64_t v15 = (void *)(a2 + 224);
  uint64_t v16 = *(void *)(a2 + 224);
  *(void *)(a1 + 224) = v16;
  uint64_t v17 = *(void *)(a2 + 232);
  *(void *)(a1 + 232) = v17;
  if (v17)
  {
    *(void *)(v16 + 16) = v14;
    *(void *)(a2 + 216) = v15;
    *unint64_t v15 = 0;
    *(void *)(a2 + 232) = 0;
  }
  else
  {
    *(void *)(a1 + 216) = v14;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 240, (uint64_t *)(a2 + 240));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 280, (__n128 *)(a2 + 280));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 304, (uint64_t *)(a2 + 304));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 344, (uint64_t *)(a2 + 344));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 384, (uint64_t *)(a2 + 384));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_statisticsFromFinishedBucket(uint64_t a1, double *a2)
{
  uint64_t v117 = *MEMORY[0x1E4F143B8];
  double v4 = *a2;
  id v5 = objc_alloc(MEMORY[0x1E4F1C9C8]);
  long long v6 = a2 + 5;
  if (v4 != -1.79769313e308) {
    long long v6 = a2;
  }
  id v90 = (id)[v5 initWithTimeIntervalSinceReferenceDate:*v6];
  int v92 = a2;
  if (a2[1] == 1.79769313e308) {
    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:a2[6]];
  }
  else {
    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:a2[1]];
  }
  uint64_t v8 = (void *)v7;
  unint64_t v9 = (unint64_t)*(id *)(a1 + 16);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v10 = *(id *)(a1 + 16);
    if ([v10 shouldUseUnderlyingTypeForStatistics])
    {
      uint64_t v11 = [v10 underlyingSampleType];

      unint64_t v9 = v11;
    }
  }
  long long v12 = (void *)[objc_alloc(MEMORY[0x1E4F2B5B0]) initWithDataType:v9 startDate:v90 endDate:v8];
  if (*(unsigned char *)(a1 + 24))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      id v14 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      unint64_t v15 = (uint64_t *)*((void *)v92 + 35);
      uint64_t v16 = (uint64_t *)*((void *)v92 + 36);
      while (v15 != v16)
      {
        uint64_t v17 = *v15;
        id v18 = objc_loadWeakRetained((id *)(a1 + 48));
        BOOL v19 = [v18 sourceForSourceID:v17];

        if (v19)
        {
          if (([v14 containsObject:v19] & 1) == 0) {
            [v14 addObject:v19];
          }
        }

        ++v15;
      }
      uint64_t v20 = (void *)[v14 copy];
      [v12 _setSources:v20];
    }
  }

  v115[0] = &unk_1F1724DD0;
  long long v116 = v115;
  id v91 = v12;
  HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)&v98, (const HDStatisticsNoiseLevel *)(v92 + 15));
  if (!v116) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  long long v21 = (const HDStatisticsNoiseLevel *)(*(uint64_t (**)(void *, double *))(*v116 + 48))(v116, &v98);
  HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)&v106, v21);

  HDStatisticsNoiseLevel::finalizeSamples((HDStatisticsNoiseLevel *)&v106);
  uint64_t v94 = *(void *)(a1 + 24);
  uint64_t v22 = _HKStatisticsOptionBaselineRelativeQuantities();
  char v23 = *(void **)(a1 + 16);
  if ((v22 & v94) != 0) {
    [v23 _unitForChangeInCanonicalUnit];
  }
  else {
  long long v93 = [v23 canonicalUnit];
  }
  if ((v94 & 2) != 0)
  {
    double v24 = 0.0;
    if (v107 > 0.0 && v106 > 0.0) {
      double v24 = log10(v106 / v107) * 10.0;
    }
    unint64_t v9 = [MEMORY[0x1E4F2B370] quantityWithUnit:v93 doubleValue:v24];
    [v91 setAverageQuantity:v9];
  }
  if ((v94 & 4) != 0)
  {
    unint64_t v9 = [MEMORY[0x1E4F2B370] quantityWithUnit:v93 doubleValue:v109];
    [v91 setMinimumQuantity:v9];
  }
  if ((v94 & 8) != 0)
  {
    unint64_t v9 = [MEMORY[0x1E4F2B370] quantityWithUnit:v93 doubleValue:v108];
    [v91 setMaximumQuantity:v9];
  }
  if ((v94 & 0x20) != 0)
  {
    double v25 = v112;
    double v26 = v113;
    unint64_t v27 = [MEMORY[0x1E4F2B370] quantityWithUnit:v93 doubleValue:v111];
    [v91 setMostRecentQuantity:v27];

    unint64_t v9 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v25, v26);
    [v91 setMostRecentQuantityDateInterval:v9];
  }
  [v91 setDataCount:v110];
  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    goto LABEL_164;
  }
  if ((v94 & 2) != 0) {
    id v88 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else {
    id v88 = 0;
  }
  if ((v94 & 4) != 0) {
    id v86 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else {
    id v86 = 0;
  }
  if ((v94 & 8) != 0) {
    id v84 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else {
    id v84 = 0;
  }
  if ((v94 & 0x20) != 0)
  {
    id v85 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v87 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else
  {
    id v87 = 0;
    id v85 = 0;
  }
  id v89 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  *(_OWORD *)long long __p = 0u;
  long long v96 = 0u;
  float v97 = 1.0;
  uint64_t v28 = (double *)*((void *)v92 + 27);
  if (v28 == v92 + 28) {
    goto LABEL_155;
  }
  do
  {
    char v29 = HDStatisticsBucket<HDStatisticsNoiseLevel>::_bundleIdentifierForSourceID((uint64_t)v92, *((void *)v28 + 4));
    char v30 = v29;
    if (!v29) {
      goto LABEL_123;
    }
    unint64_t v31 = [v29 hash];
    unint64_t v32 = v31;
    unint64_t v33 = (unint64_t)__p[1];
    if (!__p[1]) {
      goto LABEL_66;
    }
    uint8x8_t v34 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v34.i16[0] = vaddlv_u8(v34);
    unint64_t v35 = v34.u32[0];
    if (v34.u32[0] > 1uLL)
    {
      unint64_t v9 = v31;
      if ((void *)v31 >= __p[1]) {
        unint64_t v9 = v31 % (unint64_t)__p[1];
      }
    }
    else
    {
      unint64_t v9 = ((unint64_t)__p[1] - 1) & v31;
    }
    long long v36 = (void **)*((void *)__p[0] + v9);
    if (!v36 || (long long v37 = (char *)*v36) == 0)
    {
LABEL_66:
      long long v37 = (char *)operator new(0x78uLL);
      *(void *)long long v37 = 0;
      *((void *)v37 + 1) = v32;
      *((void *)v37 + 2) = v30;
      *(_OWORD *)(v37 + 24) = 0u;
      *(_OWORD *)(v37 + 40) = 0u;
      *(_OWORD *)(v37 + 56) = 0u;
      *(_OWORD *)(v37 + 72) = 0u;
      *(_OWORD *)(v37 + 88) = 0u;
      *(_OWORD *)(v37 + 104) = 0u;
      *((void *)v37 + 13) = [[HDQuantitySampleOverlapProcessor alloc] initWithOverlapFunction:1];
      *((_WORD *)v37 + 56) = 257;
      float v43 = (float)(unint64_t)(*((void *)&v96 + 1) + 1);
      if (v33 && (float)(v97 * (float)v33) >= v43)
      {
LABEL_112:
        long long v59 = __p[0];
        id v60 = (void *)*((void *)__p[0] + v9);
        if (v60)
        {
          *(void *)long long v37 = *v60;
        }
        else
        {
          *(void *)long long v37 = v96;
          *(void *)&long long v96 = v37;
          v59[v9] = &v96;
          if (!*(void *)v37)
          {
LABEL_121:
            ++*((void *)&v96 + 1);
            goto LABEL_122;
          }
          unint64_t v61 = *(void *)(*(void *)v37 + 8);
          if ((v33 & (v33 - 1)) != 0)
          {
            if (v61 >= v33) {
              v61 %= v33;
            }
          }
          else
          {
            v61 &= v33 - 1;
          }
          id v60 = (char *)__p[0] + 8 * v61;
        }
        *id v60 = v37;
        goto LABEL_121;
      }
      BOOL v44 = (v33 & (v33 - 1)) != 0;
      if (v33 < 3) {
        BOOL v44 = 1;
      }
      unint64_t v45 = v44 | (2 * v33);
      unint64_t v46 = vcvtps_u32_f32(v43 / v97);
      if (v45 <= v46) {
        int8x8_t prime = (int8x8_t)v46;
      }
      else {
        int8x8_t prime = (int8x8_t)v45;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v33 = (unint64_t)__p[1];
      if ((void *)*(void *)&prime > __p[1]) {
        goto LABEL_78;
      }
      if ((void *)*(void *)&prime < __p[1])
      {
        unint64_t v54 = vcvtps_u32_f32((float)*((unint64_t *)&v96 + 1) / v97);
        if (__p[1] < (void *)3
          || (uint8x8_t v55 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v55.i16[0] = vaddlv_u8(v55), v55.u32[0] > 1uLL))
        {
          unint64_t v54 = std::__next_prime(v54);
        }
        else
        {
          uint64_t v56 = 1 << -(char)__clz(v54 - 1);
          if (v54 >= 2) {
            unint64_t v54 = v56;
          }
        }
        if (*(void *)&prime <= v54) {
          int8x8_t prime = (int8x8_t)v54;
        }
        if ((void *)*(void *)&prime >= __p[1])
        {
          unint64_t v33 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_78:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v48 = operator new(8 * *(void *)&prime);
            uint64_t v49 = __p[0];
            __p[0] = v48;
            if (v49) {
              operator delete(v49);
            }
            uint64_t v50 = 0;
            __p[1] = (void *)prime;
            do
              *((void *)__p[0] + v50++) = 0;
            while (*(void *)&prime != v50);
            unint64_t v51 = (void **)v96;
            if ((void)v96)
            {
              unint64_t v52 = *(void *)(v96 + 8);
              uint8x8_t v53 = (uint8x8_t)vcnt_s8(prime);
              v53.i16[0] = vaddlv_u8(v53);
              if (v53.u32[0] > 1uLL)
              {
                if (v52 >= *(void *)&prime) {
                  v52 %= *(void *)&prime;
                }
              }
              else
              {
                v52 &= *(void *)&prime - 1;
              }
              *((void *)__p[0] + v52) = &v96;
              for (i = *v51; i; unint64_t v52 = v58)
              {
                unint64_t v58 = i[1];
                if (v53.u32[0] > 1uLL)
                {
                  if (v58 >= *(void *)&prime) {
                    v58 %= *(void *)&prime;
                  }
                }
                else
                {
                  v58 &= *(void *)&prime - 1;
                }
                if (v58 != v52)
                {
                  if (!*((void *)__p[0] + v58))
                  {
                    *((void *)__p[0] + v58) = v51;
                    goto LABEL_103;
                  }
                  *unint64_t v51 = (void *)*i;
                  void *i = **((void **)__p[0] + v58);
                  **((void **)__p[0] + v58) = i;
                  uint64_t i = v51;
                }
                unint64_t v58 = v52;
LABEL_103:
                unint64_t v51 = (void **)i;
                uint64_t i = (void *)*i;
              }
            }
            unint64_t v33 = (unint64_t)prime;
            goto LABEL_107;
          }
          uint64_t v68 = __p[0];
          __p[0] = 0;
          if (v68) {
            operator delete(v68);
          }
          unint64_t v33 = 0;
          __p[1] = 0;
        }
      }
LABEL_107:
      if ((v33 & (v33 - 1)) != 0)
      {
        if (v32 >= v33) {
          unint64_t v9 = v32 % v33;
        }
        else {
          unint64_t v9 = v32;
        }
      }
      else
      {
        unint64_t v9 = (v33 - 1) & v32;
      }
      goto LABEL_112;
    }
    while (1)
    {
      unint64_t v38 = *((void *)v37 + 1);
      if (v38 == v32) {
        break;
      }
      if (v35 > 1)
      {
        if ((void *)v38 >= __p[1]) {
          v38 %= (unint64_t)__p[1];
        }
      }
      else
      {
        v38 &= (unint64_t)__p[1] - 1;
      }
      if (v38 != v9) {
        goto LABEL_66;
      }
LABEL_65:
      long long v37 = *(char **)v37;
      if (!v37) {
        goto LABEL_66;
      }
    }
    id v39 = *((id *)v37 + 2);
    id v40 = v30;
    double v41 = v40;
    if (v39 != v40)
    {
      char v42 = [v39 isEqualToString:v40];

      if (v42) {
        goto LABEL_122;
      }
      goto LABEL_65;
    }

LABEL_122:
    *(_OWORD *)(v37 + 24) = *(_OWORD *)(v28 + 5);
    long long v62 = *(_OWORD *)(v28 + 7);
    long long v63 = *(_OWORD *)(v28 + 9);
    long long v64 = *(_OWORD *)(v28 + 11);
    *(_OWORD *)(v37 + 82) = *(_OWORD *)((char *)v28 + 98);
    *(_OWORD *)(v37 + 72) = v64;
    *(_OWORD *)(v37 + 56) = v63;
    *(_OWORD *)(v37 + 40) = v62;
    objc_storeStrong((id *)v37 + 13, *((id *)v28 + 15));
    *((_WORD *)v37 + 56) = *((_WORD *)v28 + 64);

LABEL_123:
    uint64_t v65 = (double *)*((void *)v28 + 1);
    if (v65)
    {
      do
      {
        long long v66 = v65;
        uint64_t v65 = *(double **)v65;
      }
      while (v65);
    }
    else
    {
      do
      {
        long long v66 = (double *)*((void *)v28 + 2);
        BOOL v67 = *(void *)v66 == (void)v28;
        uint64_t v28 = v66;
      }
      while (!v67);
    }
    uint64_t v28 = v66;
  }
  while (v66 != v92 + 28);
  for (uint64_t j = (uint64_t **)v96; j; uint64_t j = (uint64_t **)*j)
  {
    char v70 = j[2];
    if (!v116) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v71 = (const HDStatisticsNoiseLevel *)(*(uint64_t (**)(void *, uint64_t *))(*v116 + 48))(v116, (uint64_t *)j + 3);
    HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)&v98, v71);
    HDStatisticsNoiseLevel::finalizeSamples((HDStatisticsNoiseLevel *)&v98);
    if ((v94 & 2) != 0)
    {
      double v73 = v99;
      double v74 = 0.0;
      if (v99 > 0.0)
      {
        double v72 = v98;
        if (v98 > 0.0) {
          double v74 = log10(v98 / v99) * 10.0;
        }
      }
      long long v75 = objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v93, v74, v73, v72);
      [v88 setObject:v75 forKeyedSubscript:v70];
    }
    if ((v94 & 4) != 0)
    {
      long long v76 = [MEMORY[0x1E4F2B370] quantityWithUnit:v93 doubleValue:v101];
      [v86 setObject:v76 forKeyedSubscript:v70];
    }
    if ((v94 & 8) != 0)
    {
      uint64_t v77 = [MEMORY[0x1E4F2B370] quantityWithUnit:v93 doubleValue:v100];
      [v84 setObject:v77 forKeyedSubscript:v70];
    }
    if ((v94 & 0x20) != 0)
    {
      double v78 = v103;
      double v79 = v104;
      uint64_t v80 = [MEMORY[0x1E4F2B370] quantityWithUnit:v93 doubleValue:v102];
      [v85 setObject:v80 forKeyedSubscript:v70];

      uint64_t v81 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v78, v79);
      [v87 setObject:v81 forKeyedSubscript:v70];
    }
    if (!v116) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    long long v82 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)((*(uint64_t (**)(void *, uint64_t *))(*v116 + 48))(v116, (uint64_t *)j + 3) + 32));
    [v89 setObject:v82 forKeyedSubscript:v70];
  }
LABEL_155:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsNoiseLevel>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsNoiseLevel>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsNoiseLevel>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsNoiseLevel>>>::~__hash_table((uint64_t)__p);
  if ((v94 & 2) != 0) {
    [v91 setAverageQuantityBySource:v88];
  }
  if ((v94 & 4) != 0) {
    [v91 setMinimumQuantityBySource:v86];
  }
  if ((v94 & 8) != 0) {
    [v91 setMaximumQuantityBySource:v84];
  }
  if ((v94 & 0x20) != 0)
  {
    [v91 setMostRecentQuantityBySource:v85];
    [v91 setMostRecentQuantityDateIntervalBySource:v87];
  }
  [v91 setDataCountBySource:v89];

LABEL_164:
  std::__function::__value_func<HDStatisticsNoiseLevel const& ()(HDStatisticsNoiseLevel const&)>::~__value_func[abi:ne180100](v115);

  return v91;
}

void sub_1BD1073AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51)
{
  std::__function::__value_func<HDStatisticsNoiseLevel const& ()(HDStatisticsNoiseLevel const&)>::~__value_func[abi:ne180100]((void *)(v51 - 160));
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsNoiseLevel>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 264);
  uint64_t v2 = *(void *)(a1 + 280);
  if (v1 != (*(void *)(a1 + 288) - v2) >> 3)
  {
    double v4 = (void **)(a1 + 280);
    *(void *)(a1 + 288) = v2;
    std::vector<long long>::reserve((void **)(a1 + 280), v1);
    id v5 = *(void **)(a1 + 256);
    if (v5)
    {
      long long v6 = *(char **)(a1 + 288);
      do
      {
        uint64_t v7 = v5[2];
        unint64_t v8 = *(void *)(a1 + 296);
        if ((unint64_t)v6 >= v8)
        {
          id v10 = (char *)*v4;
          uint64_t v11 = (v6 - (unsigned char *)*v4) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            id v10 = *(char **)(a1 + 280);
            long long v6 = *(char **)(a1 + 288);
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v16 = (void *)(v14 + 8 * v11);
          void *v16 = v7;
          unint64_t v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            uint64_t v17 = *((void *)v6 - 1);
            v6 -= 8;
            *--uint64_t v16 = v17;
          }
          *(void *)(a1 + 280) = v16;
          *(void *)(a1 + 288) = v9;
          *(void *)(a1 + 296) = v14 + 8 * v15;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)long long v6 = v7;
          unint64_t v9 = v6 + 8;
        }
        *(void *)(a1 + 288) = v9;
        id v5 = (void *)*v5;
        long long v6 = v9;
      }
      while (v5);
    }
    id v18 = (id *)(a1 + 88);
    id WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      id v20 = objc_loadWeakRetained(v18);
      [v20 orderSourceIDs:v4];
    }
  }
}

void sub_1BD107764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsNoiseLevel>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2) {
    a2 = v4 * floor(a2 / v4);
  }
  double v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    uint64_t v123 = (double **)(a1 + 96);
    long long v118 = (void *)(a1 + 64);
    long long v115 = (HDStatisticsNoiseLevel *)(a1 + 120);
    location = (id *)(a1 + 88);
    double v113 = (void *)(a1 + 224);
    do
    {
      long long v6 = *(double **)(a1 + 96);
      uint64_t v7 = *(long long **)(a1 + 104);
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v6) >> 4);
      if (v8)
      {
        if (v8 != 1)
        {
          double v27 = a2;
          double v28 = a2;
          double v29 = v5;
          uint64_t v30 = *(void *)(a1 + 96);
          if (v6 != (double *)v7)
          {
            do
            {
              double v31 = *(double *)(v30 + 8);
              double v32 = *(double *)(v30 + 16);
              if (v31 > v29 && v31 < v28) {
                double v28 = *(double *)(v30 + 8);
              }
              if (v32 > v5) {
                double v34 = *(double *)(v30 + 16);
              }
              else {
                double v34 = v27;
              }
              if (v32 < v27)
              {
                double v29 = v5;
                double v27 = v34;
              }
              v30 += 48;
            }
            while ((long long *)v30 != v7);
          }
          if (v27 >= v28) {
            double v35 = v28;
          }
          else {
            double v35 = v27;
          }
          double v36 = *(double *)(a1 + 16);
          if (v36 > 0.0)
          {
            double v37 = v36 * floor(v35 / v36);
            double v38 = v36 * floor((v36 + v5) / v36);
            if (v37 >= v38) {
              double v35 = v37;
            }
            else {
              double v35 = v38;
            }
          }
          *uint64_t v123 = 0;
          v123[1] = 0;
          v123[2] = 0;
          if (v6 != (double *)v7)
          {
            if (v8 > 0x555555555555555) {
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            }
            id v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v8);
            char v42 = *(double **)(a1 + 96);
            double v41 = *(double **)(a1 + 104);
            float v43 = v39;
            if (v41 != v42)
            {
              do
              {
                long long v44 = *((_OWORD *)v41 - 3);
                long long v45 = *((_OWORD *)v41 - 2);
                *(_OWORD *)(v43 - 21) = *(_OWORD *)((char *)v41 - 21);
                *((_OWORD *)v43 - 3) = v44;
                *((_OWORD *)v43 - 2) = v45;
                v43 -= 48;
                v41 -= 6;
              }
              while (v41 != v42);
              double v41 = *v123;
            }
            *(void *)(a1 + 96) = v43;
            *(void *)(a1 + 104) = v39;
            *(void *)(a1 + 112) = &v39[48 * v40];
            if (v41) {
              operator delete(v41);
            }
          }
          HDStatisticsBucket<HDStatisticsNoiseLevel>::_updateSourceOrder(a1);
          id WeakRetained = objc_loadWeakRetained(location);

          if (WeakRetained)
          {
            *(void *)&v125.double var0 = a1;
            unint64_t v47 = 126 - 2 * __clz(v8);
            if (v6 == (double *)v7) {
              uint64_t v48 = 0;
            }
            else {
              uint64_t v48 = v47;
            }
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsNoiseLevel>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder*,false>((unint64_t)v6, v7, (uint64_t)&v125, v48, 1);
          }
          else
          {
            unint64_t v59 = 126 - 2 * __clz(v8);
            if (v6 == (double *)v7) {
              uint64_t v48 = 0;
            }
            else {
              uint64_t v48 = v59;
            }
          }
          std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsNoiseLevel>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder*,false>((unint64_t)v6, v7, v48, 1);
          if (*(unsigned char *)(a1 + 25)) {
            id v117 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
          }
          else {
            id v117 = 0;
          }
          if (v6 == (double *)v7)
          {
LABEL_155:
            double v106 = *(void **)(a1 + 216);
            if (v106 != v113)
            {
              do
              {
                double v107 = (void *)v106[1];
                if (v107)
                {
                  do
                  {
                    double v108 = v107;
                    double v107 = (void *)*v107;
                  }
                  while (v107);
                }
                else
                {
                  do
                  {
                    double v108 = (void *)v106[2];
                    BOOL v109 = *v108 == (void)v106;
                    double v106 = v108;
                  }
                  while (!v109);
                }
                double v106 = v108;
              }
              while (v108 != v113);
            }
            *(double *)(a1 + 56) = v35;

            if (v6) {
              operator delete(v6);
            }
            goto LABEL_164;
          }
          int64_t v116 = 0;
          char v60 = 0;
          unint64_t v61 = v6;
          while (2)
          {
            long long v62 = *((_OWORD *)v61 + 1);
            *(_OWORD *)&v125.double var0 = *(_OWORD *)v61;
            *(_OWORD *)&v125.double var2 = v62;
            *(double *)&v125.BOOL var4 = v61[4];
            if (!v125.var4 || v125.var1 > v35)
            {
LABEL_96:
              long long v63 = *(_OWORD **)(a1 + 104);
              unint64_t v64 = *(void *)(a1 + 112);
              if ((unint64_t)v63 < v64)
              {
                long long v65 = *(_OWORD *)v61;
                long long v66 = *((_OWORD *)v61 + 2);
                v63[1] = *((_OWORD *)v61 + 1);
                v63[2] = v66;
                *long long v63 = v65;
                BOOL v67 = v63 + 3;
                goto LABEL_116;
              }
              unint64_t v68 = 0xAAAAAAAAAAAAAAABLL * (((char *)v63 - (char *)*v123) >> 4);
              unint64_t v69 = v68 + 1;
              if (v68 + 1 > 0x555555555555555) {
                std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v70 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v64 - (void)*v123) >> 4);
              if (2 * v70 > v69) {
                unint64_t v69 = 2 * v70;
              }
              if (v70 >= 0x2AAAAAAAAAAAAAALL) {
                unint64_t v71 = 0x555555555555555;
              }
              else {
                unint64_t v71 = v69;
              }
              if (v71) {
                unint64_t v71 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v71);
              }
              else {
                uint64_t v72 = 0;
              }
              uint64_t v77 = (_OWORD *)(v71 + 48 * v68);
              long long v78 = *(_OWORD *)v61;
              long long v79 = *((_OWORD *)v61 + 2);
              v77[1] = *((_OWORD *)v61 + 1);
              v77[2] = v79;
              _OWORD *v77 = v78;
              uint64_t v81 = *(double **)(a1 + 96);
              uint64_t v80 = *(double **)(a1 + 104);
              long long v82 = v77;
              if (v80 != v81)
              {
                do
                {
                  long long v83 = *((_OWORD *)v80 - 3);
                  long long v84 = *((_OWORD *)v80 - 2);
                  *(_OWORD *)((char *)v82 - 21) = *(_OWORD *)((char *)v80 - 21);
                  *(v82 - 3) = v83;
                  *(v82 - 2) = v84;
                  v82 -= 3;
                  v80 -= 6;
                }
                while (v80 != v81);
                uint64_t v80 = *v123;
              }
              BOOL v67 = v77 + 3;
              *(void *)(a1 + 96) = v82;
              *(void *)(a1 + 104) = v77 + 3;
              *(void *)(a1 + 112) = v71 + 48 * v72;
              if (v80)
              {
                id v85 = v80;
                goto LABEL_115;
              }
              goto LABEL_116;
            }
            double var2 = v125.var2;
            if (v125.var2 >= v35)
            {
              double var0 = v125.var0;
              v125.double var2 = v35;
              BOOL v74 = var2 > v35;
              v125.BOOL var4 = v125.var1 < v35;
              if (v125.var1 >= v35) {
                goto LABEL_96;
              }
              int64_t var3 = v125.var3;
              BOOL var5 = v125.var5;
              double v75 = v35;
            }
            else
            {
              v125.BOOL var4 = v125.var2 > v125.var1;
              if (v125.var2 <= v125.var1) {
                goto LABEL_96;
              }
              BOOL v74 = 0;
              int64_t var3 = 0;
              BOOL var5 = 0;
              double var2 = 0.0;
              double v75 = 0.0;
              double var0 = 0.0;
            }
            HDStatisticsNoiseLevel::applyMaskToSample((uint64_t)&v125, v118);
            int v86 = *((unsigned __int8 *)v61 + 42);
            int v122 = *((unsigned __int8 *)v61 + 41);
            char v119 = *((unsigned char *)v61 + 40);
            if (!v125.var4) {
              goto LABEL_138;
            }
            if (v60)
            {
              unint64_t v87 = v125.var3;
              if (v116 == v125.var3 || *(unsigned char *)(a1 + 24))
              {
                HDStatisticsNoiseLevel::addSample(v115, &v125, v86 == 0);
                int v86 = 1;
              }
            }
            else
            {
              HDStatisticsNoiseLevel::addSample(v115, &v125, v86 == 0);
              int v86 = 1;
              unint64_t v87 = v125.var3;
              int64_t v116 = v125.var3;
            }
            if (!*(unsigned char *)(a1 + 25)) {
              goto LABEL_137;
            }
            id v88 = HDStatisticsBucket<HDStatisticsNoiseLevel>::_bundleIdentifierForSourceID(a1, v87);
            if (!v88) {
              goto LABEL_136;
            }
            id v89 = [v117 objectForKeyedSubscript:v88];
            id v90 = v89;
            if (v89)
            {
              if ([v89 longLongValue] != v87 && !*(unsigned char *)(a1 + 24))
              {
LABEL_135:

LABEL_136:
LABEL_137:
                char v60 = 1;
LABEL_138:
                if (v74)
                {
                  BOOL v94 = v86 != 0;
                  long long v96 = *(double **)(a1 + 104);
                  unint64_t v95 = *(void *)(a1 + 112);
                  if ((unint64_t)v96 >= v95)
                  {
                    id v85 = *v123;
                    unint64_t v97 = 0xAAAAAAAAAAAAAAABLL * (((char *)v96 - (char *)*v123) >> 4);
                    unint64_t v98 = v97 + 1;
                    if (v97 + 1 > 0x555555555555555) {
                      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                    }
                    unint64_t v99 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v95 - (void)v85) >> 4);
                    if (2 * v99 > v98) {
                      unint64_t v98 = 2 * v99;
                    }
                    if (v99 >= 0x2AAAAAAAAAAAAAALL) {
                      unint64_t v100 = 0x555555555555555;
                    }
                    else {
                      unint64_t v100 = v98;
                    }
                    if (v100)
                    {
                      unint64_t v100 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v100);
                      id v85 = *(double **)(a1 + 96);
                      long long v96 = *(double **)(a1 + 104);
                    }
                    else
                    {
                      uint64_t v101 = 0;
                    }
                    unint64_t v102 = v100 + 48 * v97;
                    *(double *)unint64_t v102 = var0;
                    *(double *)(v102 + 8) = v75;
                    *(double *)(v102 + 16) = var2;
                    *(void *)(v102 + 24) = var3;
                    *(unsigned char *)(v102 + 32) = v74;
                    *(unsigned char *)(v102 + 33) = var5;
                    *(unsigned char *)(v102 + 40) = v119;
                    *(unsigned char *)(v102 + 41) = v122;
                    *(unsigned char *)(v102 + 42) = v94;
                    unint64_t v103 = v102;
                    if (v96 != v85)
                    {
                      do
                      {
                        long long v104 = *((_OWORD *)v96 - 3);
                        long long v105 = *((_OWORD *)v96 - 2);
                        *(_OWORD *)(v103 - 21) = *(_OWORD *)((char *)v96 - 21);
                        *(_OWORD *)(v103 - 48) = v104;
                        *(_OWORD *)(v103 - 32) = v105;
                        v103 -= 48;
                        v96 -= 6;
                      }
                      while (v96 != v85);
                      id v85 = *v123;
                    }
                    BOOL v67 = (_OWORD *)(v102 + 48);
                    *(void *)(a1 + 96) = v103;
                    *(void *)(a1 + 104) = v102 + 48;
                    *(void *)(a1 + 112) = v100 + 48 * v101;
                    if (v85) {
LABEL_115:
                    }
                      operator delete(v85);
                  }
                  else
                  {
                    *long long v96 = var0;
                    v96[1] = v75;
                    v96[2] = var2;
                    *((void *)v96 + 3) = var3;
                    *((unsigned char *)v96 + 32) = v74;
                    *((unsigned char *)v96 + 33) = var5;
                    *((unsigned char *)v96 + 40) = v119;
                    *((unsigned char *)v96 + 41) = v122;
                    BOOL v67 = v96 + 6;
                    *((unsigned char *)v96 + 42) = v94;
                  }
LABEL_116:
                  *(void *)(a1 + 104) = v67;
                }
                v61 += 6;
                if (v61 == (double *)v7) {
                  goto LABEL_155;
                }
                continue;
              }
            }
            else
            {
              id v91 = [NSNumber numberWithLongLong:v87];
              [v117 setObject:v91 forKeyedSubscript:v88];
            }
            break;
          }
          unint64_t v92 = HDStatisticsBucket<HDStatisticsNoiseLevel>::_canonicalSourceIDForSourceID(a1, v87);
          long long v93 = HDStatisticsBucket<HDStatisticsNoiseLevel>::_statisticsForSource(a1, v92);
          HDStatisticsNoiseLevel::addSample((HDStatisticsNoiseLevel *)v93, &v125, v122 == 0);
          LOBYTE(v122) = 1;
          goto LABEL_135;
        }
        double v9 = v6[1];
        double v10 = v6[2];
        int64_t v11 = *((void *)v6 + 3);
        char v12 = *((unsigned char *)v6 + 32);
        char v13 = *((unsigned char *)v6 + 33);
        if (v12)
        {
          BOOL v14 = v9 < a2;
          BOOL v15 = v10 > a2;
          if (v10 < a2) {
            double v16 = v6[2];
          }
          else {
            double v16 = a2;
          }
          if (v10 >= a2)
          {
            char v17 = *((unsigned char *)v6 + 33);
          }
          else
          {
            BOOL v14 = v10 > v9;
            char v17 = 0;
          }
          if (v10 < a2) {
            double v18 = 0.0;
          }
          else {
            double v18 = *v6;
          }
          if (v10 < a2) {
            double v19 = 0.0;
          }
          else {
            double v19 = a2;
          }
          if (v10 < a2) {
            double v20 = 0.0;
          }
          else {
            double v20 = v6[2];
          }
          if (v10 < a2) {
            uint64_t v21 = 0;
          }
          else {
            uint64_t v21 = *((void *)v6 + 3);
          }
          if (v10 < a2) {
            BOOL v15 = 0;
          }
          BOOL v22 = v10 > v9;
          if (v9 <= a2)
          {
            double v10 = v16;
            BOOL v23 = v14;
          }
          else
          {
            double v20 = v6[2];
            BOOL v23 = 0;
          }
          if (v9 > a2) {
            char v12 = *((unsigned char *)v6 + 33);
          }
          else {
            char v12 = v17;
          }
          if (v9 > a2) {
            double v24 = *v6;
          }
          else {
            double v24 = v18;
          }
          if (v9 > a2) {
            double v25 = v6[1];
          }
          else {
            double v25 = v19;
          }
          if (v9 > a2) {
            uint64_t v26 = *((void *)v6 + 3);
          }
          else {
            uint64_t v26 = v21;
          }
          if (v9 > a2) {
            BOOL v15 = v22;
          }
        }
        else
        {
          BOOL v23 = 0;
          uint64_t v26 = 0;
          BOOL v15 = 0;
          double v24 = 0.0;
          double v25 = 0.0;
          double v20 = 0.0;
        }
        int v49 = *((unsigned __int8 *)v6 + 42);
        int v50 = *((unsigned __int8 *)v6 + 41);
        int v51 = *((unsigned __int8 *)v6 + 40);
        v125.double var0 = *v6;
        v125.var1 = v9;
        v125.double var2 = v10;
        v125.int64_t var3 = v11;
        v125.BOOL var4 = v23;
        v125.BOOL var5 = v13;
        *(_DWORD *)(&v125.var5 + 1) = *(_DWORD *)((char *)v6 + 34);
        *(_WORD *)(&v125.var5 + 5) = *((_WORD *)v6 + 19);
        *(double *)&long long v126 = v24;
        *((double *)&v126 + 1) = v25;
        *(double *)&long long v127 = v20;
        *((void *)&v127 + 1) = v26;
        LOBYTE(v128) = v15;
        HIBYTE(v128) = v12;
        HDStatisticsNoiseLevel::applyMaskToSample((uint64_t)&v125, v118);
        BOOL v52 = v51 != 0;
        BOOL v53 = v50 != 0;
        BOOL v54 = v49 != 0;
        if (v125.var4)
        {
          HDStatisticsNoiseLevel::addSample(v115, &v125, v49 == 0);
          if (*(unsigned char *)(a1 + 25))
          {
            unint64_t v55 = HDStatisticsBucket<HDStatisticsNoiseLevel>::_canonicalSourceIDForSourceID(a1, v125.var3);
            uint64_t v56 = HDStatisticsBucket<HDStatisticsNoiseLevel>::_statisticsForSource(a1, v55);
            HDStatisticsNoiseLevel::addSample((HDStatisticsNoiseLevel *)v56, &v125, v50 == 0);
          }
          BOOL v52 = 1;
          BOOL v53 = 1;
          BOOL v54 = 1;
        }
        if ((_BYTE)v128)
        {
          LOWORD(v124) = v128;
          long long v57 = v127;
          unint64_t v58 = *v123;
          *(_OWORD *)unint64_t v58 = v126;
          *((_OWORD *)v58 + 1) = v57;
          *((void *)v58 + 4) = v124;
          *((unsigned char *)v58 + 40) = v52;
          *((unsigned char *)v58 + 41) = v53;
          *((unsigned char *)v58 + 42) = v54;
        }
        else
        {
          *(void *)(a1 + 104) = *(void *)(a1 + 96);
        }
      }
      *(double *)(a1 + 56) = a2;
LABEL_164:
      double v110 = *(double *)(a1 + 56);
      if (v110 == v5)
      {
        double v111 = [MEMORY[0x1E4F28B00] currentHandler];
        double v112 = [NSString stringWithUTF8String:"void HDStatisticsBucket<HDStatisticsNoiseLevel>::_mergeThroughTime(double) [Statistics = HDStatisticsNoiseLevel]"];
        [v111 handleFailureInFunction:v112 file:@"HDStatisticsBucket.hpp" lineNumber:234 description:@"Failed to make forward progress during statistics merge."];

        double v110 = *(double *)(a1 + 56);
      }
      double v5 = v110;
    }
    while (v110 < a2);
  }
}

void sub_1BD1080F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **HDStatisticsBucket<HDStatisticsNoiseLevel>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = a2;
  double v4 = (uint64_t **)(a1 + 224);
  double v5 = *(void **)(a1 + 224);
  if (!v5) {
    goto LABEL_11;
  }
  long long v6 = (uint64_t **)(a1 + 224);
  do
  {
    uint64_t v7 = v5[4];
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      double v9 = v5;
    }
    else {
      double v9 = v5 + 1;
    }
    if (!v8) {
      long long v6 = (uint64_t **)v5;
    }
    double v5 = (void *)*v9;
  }
  while (*v9);
  if (v6 == v4 || (uint64_t)v6[4] > a2)
  {
LABEL_11:
    double v10 = v4 - 1;
    int64_t v11 = std::__tree<std::__value_type<long long,HDStatisticsNoiseLevel>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsNoiseLevel>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsNoiseLevel>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v4 - 1, a2, &v13);
    HDStatisticsNoiseLevel::configure((id *)v11 + 5, *(HDStatisticsNoiseLevelConfiguration **)(a1 + 32));
    long long v6 = std::__tree<std::__value_type<long long,HDStatisticsNoiseLevel>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsNoiseLevel>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsNoiseLevel>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v10, a2, &v13);
  }
  return v6 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsNoiseLevel>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    double v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((void *)(a1 + 304), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsNoiseLevel>::_bundleIdentifierForSourceID(a1, a2);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      id v10 = v6;
      uint64_t v7 = (void *)(a1 + 344);
      BOOL v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        int64_t v11 = &v10;
        *((void *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        id v6 = v10;
      }
    }
  }
  return a2;
}

void sub_1BD1082E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsNoiseLevel>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  double v4 = (id *)(a1 + 88);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    id v6 = (void *)(a1 + 384);
    uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
    if (v7)
    {
      id v8 = (id)v7[3];
    }
    else
    {
      id v9 = objc_loadWeakRetained(v4);
      id v8 = [v9 bundleIdentifierForSourceID:a2];

      if (v8)
      {
        id v10 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
        objc_storeStrong(v10 + 3, v8);
      }
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1BD1083C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsNoiseLevel>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsNoiseLevel>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsNoiseLevel>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, void *a3)
{
  id v6 = a1 + 1;
  double v5 = a1[1];
  if (v5)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        uint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        double v5 = *v7;
        id v6 = v7;
        if (!*v7) {
          goto LABEL_10;
        }
      }
      if (v8 >= a2) {
        return v7;
      }
      double v5 = v7[1];
    }
    while (v5);
    id v6 = v7 + 1;
  }
  else
  {
    uint64_t v7 = a1 + 1;
  }
LABEL_10:
  id v9 = (char *)operator new(0x88uLL);
  *((void *)v9 + 4) = *a3;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  *(_OWORD *)(v9 + 104) = 0u;
  *(_OWORD *)(v9 + 120) = 0u;
  *((void *)v9 + 15) = [[HDQuantitySampleOverlapProcessor alloc] initWithOverlapFunction:1];
  *((_WORD *)v9 + 64) = 257;
  std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
  return (uint64_t **)v9;
}

void sub_1BD1084C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsNoiseLevel>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v12 = a2 - 3;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 4);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v103 = *((void *)a2 - 3);
                uint64_t v104 = *(void *)(v13 + 24);
                if (v103 == v104) {
                  return;
                }
                long long v105 = *(char **)(*(void *)a3 + 280);
                double v106 = *(char **)(*(void *)a3 + 288);
                double v107 = v105;
                double v108 = v105;
                if (v105 == v106) {
                  goto LABEL_171;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)v13, (long long *)(v13 + 48), a2 - 3, a3);
                return;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, (uint64_t)(a2 - 3), a3);
                return;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, v13 + 144, (uint64_t)(a2 - 3), a3);
                return;
              default:
                JUMPOUT(0);
            }
            do
            {
              if (*(void *)v108 == v103) {
                goto LABEL_168;
              }
              v108 += 8;
            }
            while (v108 != v106);
            double v108 = *(char **)(*(void *)a3 + 288);
LABEL_168:
            while (*(void *)v107 != v104)
            {
              v107 += 8;
              if (v107 == v106)
              {
                double v107 = *(char **)(*(void *)a3 + 288);
                break;
              }
            }
LABEL_171:
            if (v108 - v105 < v107 - v105)
            {
              *(_OWORD *)v226 = *(_OWORD *)(v13 + 16);
              *(_OWORD *)&v226[16] = *(_OWORD *)(v13 + 32);
              long long v218 = *(_OWORD *)v13;
              long long v109 = *v12;
              long long v110 = *(a2 - 2);
              *(_OWORD *)(v13 + 27) = *(long long *)((char *)a2 - 21);
              *(_OWORD *)unint64_t v13 = v109;
              *(_OWORD *)(v13 + 16) = v110;
              *(long long *)((char *)a2 - 21) = *(_OWORD *)&v226[11];
              *unint64_t v12 = v218;
              *(a2 - 2) = *(_OWORD *)v226;
            }
            return;
          }
          if (v14 <= 1151)
          {
            double v111 = (long long *)(v13 + 48);
            BOOL v113 = (long long *)v13 == a2 || v111 == a2;
            if (a5)
            {
              if (!v113)
              {
                unint64_t v114 = v13;
                do
                {
                  unint64_t v115 = v114;
                  unint64_t v114 = (unint64_t)v111;
                  uint64_t v116 = *(void *)(v115 + 72);
                  uint64_t v117 = *(void *)(v115 + 24);
                  if (v116 != v117)
                  {
                    long long v118 = *(char **)(*(void *)a3 + 280);
                    char v119 = *(char **)(*(void *)a3 + 288);
                    long long v120 = v118;
                    long long v121 = v118;
                    if (v118 != v119)
                    {
                      do
                      {
                        if (*(void *)v121 == v116) {
                          goto LABEL_196;
                        }
                        v121 += 8;
                      }
                      while (v121 != v119);
                      long long v121 = *(char **)(*(void *)a3 + 288);
LABEL_196:
                      while (*(void *)v120 != v117)
                      {
                        v120 += 8;
                        if (v120 == v119)
                        {
                          long long v120 = *(char **)(*(void *)a3 + 288);
                          break;
                        }
                      }
                    }
                    if (v121 - v118 < v120 - v118)
                    {
                      uint64_t v227 = *(void *)(v114 + 16);
                      long long v219 = *(_OWORD *)v114;
                      long long v236 = *(_OWORD *)(v115 + 80);
                      unint64_t v122 = v114;
                      while (1)
                      {
                        long long v123 = *(_OWORD *)(v115 + 16);
                        *(_OWORD *)unint64_t v122 = *(_OWORD *)v115;
                        *(_OWORD *)(v122 + 16) = v123;
                        *(_OWORD *)(v122 + 27) = *(_OWORD *)(v115 + 27);
                        if (v115 == v13) {
                          break;
                        }
                        unint64_t v122 = v115;
                        uint64_t v124 = *(void *)(v115 - 24);
                        if (v116 != v124)
                        {
                          HDRawQuantitySample v125 = *(char **)(*(void *)a3 + 280);
                          long long v126 = *(char **)(*(void *)a3 + 288);
                          long long v127 = v125;
                          __int16 v128 = v125;
                          if (v125 != v126)
                          {
                            do
                            {
                              if (*(void *)v128 == v116) {
                                goto LABEL_208;
                              }
                              v128 += 8;
                            }
                            while (v128 != v126);
                            __int16 v128 = *(char **)(*(void *)a3 + 288);
LABEL_208:
                            while (*(void *)v127 != v124)
                            {
                              v127 += 8;
                              if (v127 == v126)
                              {
                                long long v127 = *(char **)(*(void *)a3 + 288);
                                break;
                              }
                            }
                          }
                          unint64_t v115 = v122 - 48;
                          if (v128 - v125 < v127 - v125) {
                            continue;
                          }
                        }
                        goto LABEL_212;
                      }
                      unint64_t v122 = v13;
LABEL_212:
                      *(_OWORD *)unint64_t v122 = v219;
                      *(void *)(v122 + 16) = v227;
                      *(void *)(v122 + 24) = v116;
                      *(void *)(v122 + 32) = v236;
                      *(_DWORD *)(v122 + 39) = *(_DWORD *)((char *)&v236 + 7);
                    }
                  }
                  double v111 = (long long *)(v114 + 48);
                }
                while ((long long *)(v114 + 48) != a2);
              }
            }
            else if (!v113)
            {
              do
              {
                unint64_t v201 = a1;
                a1 = (unint64_t)v111;
                uint64_t v202 = *(void *)(v201 + 72);
                uint64_t v203 = *(void *)(v201 + 24);
                if (v202 != v203)
                {
                  v204 = *(char **)(*(void *)a3 + 280);
                  v205 = *(char **)(*(void *)a3 + 288);
                  v206 = v204;
                  v207 = v204;
                  if (v204 != v205)
                  {
                    do
                    {
                      if (*(void *)v207 == v202) {
                        goto LABEL_312;
                      }
                      v207 += 8;
                    }
                    while (v207 != v205);
                    v207 = *(char **)(*(void *)a3 + 288);
LABEL_312:
                    while (*(void *)v206 != v203)
                    {
                      v206 += 8;
                      if (v206 == v205)
                      {
                        v206 = *(char **)(*(void *)a3 + 288);
                        break;
                      }
                    }
                  }
                  if (v207 - v204 < v206 - v204)
                  {
                    uint64_t v230 = *(void *)(a1 + 16);
                    long long v222 = *(_OWORD *)a1;
                    long long v239 = *(_OWORD *)(v201 + 80);
                    unint64_t v208 = a1;
                    do
                    {
                      v209 = (_OWORD *)v208;
                      unint64_t v208 = v201;
                      long long v210 = *(_OWORD *)(v201 + 16);
                      _OWORD *v209 = *(_OWORD *)v201;
                      v209[1] = v210;
                      *(_OWORD *)((char *)v209 + 27) = *(_OWORD *)(v201 + 27);
                      uint64_t v211 = *(void *)(v201 - 24);
                      if (v202 == v211) {
                        break;
                      }
                      v212 = *(char **)(*(void *)a3 + 280);
                      v213 = *(char **)(*(void *)a3 + 288);
                      v214 = v212;
                      v215 = v212;
                      if (v212 != v213)
                      {
                        do
                        {
                          if (*(void *)v215 == v202) {
                            goto LABEL_322;
                          }
                          v215 += 8;
                        }
                        while (v215 != v213);
                        v215 = *(char **)(*(void *)a3 + 288);
LABEL_322:
                        while (*(void *)v214 != v211)
                        {
                          v214 += 8;
                          if (v214 == v213)
                          {
                            v214 = *(char **)(*(void *)a3 + 288);
                            break;
                          }
                        }
                      }
                      unint64_t v201 = v208 - 48;
                    }
                    while (v215 - v212 < v214 - v212);
                    *(_OWORD *)unint64_t v208 = v222;
                    *(void *)(v208 + 16) = v230;
                    *(void *)(v208 + 24) = v202;
                    *(void *)(v208 + 32) = v239;
                    *(_DWORD *)(v208 + 39) = *(_DWORD *)((char *)&v239 + 7);
                  }
                }
                double v111 = (long long *)(a1 + 48);
              }
              while ((long long *)(a1 + 48) != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((long long *)v13 != a2)
            {
              int64_t v129 = (v15 - 2) >> 1;
              int64_t v130 = v129;
              do
              {
                int64_t v131 = v130;
                if (v129 >= v130)
                {
                  uint64_t v132 = (2 * v130) | 1;
                  unint64_t v133 = v13 + 48 * v132;
                  if (2 * v131 + 2 < (uint64_t)v15)
                  {
                    uint64_t v134 = *(void *)(v133 + 24);
                    uint64_t v135 = *(void *)(v133 + 72);
                    if (v134 != v135)
                    {
                      v137 = *(char **)(*(void *)a3 + 280);
                      v136 = *(char **)(*(void *)a3 + 288);
                      v138 = v137;
                      v139 = v137;
                      if (v137 != v136)
                      {
                        do
                        {
                          if (*(void *)v139 == v134) {
                            goto LABEL_224;
                          }
                          v139 += 8;
                        }
                        while (v139 != v136);
                        v139 = *(char **)(*(void *)a3 + 288);
LABEL_224:
                        while (*(void *)v138 != v135)
                        {
                          v138 += 8;
                          if (v138 == v136)
                          {
                            v138 = *(char **)(*(void *)a3 + 288);
                            break;
                          }
                        }
                      }
                      v133 += 48 * (v139 - v137 < v138 - v137);
                      if (v139 - v137 < v138 - v137) {
                        uint64_t v132 = 2 * v131 + 2;
                      }
                    }
                  }
                  unint64_t v140 = v13 + 48 * v131;
                  uint64_t v141 = *(void *)(v133 + 24);
                  uint64_t v142 = *(void *)(v140 + 24);
                  if (v141 == v142) {
                    goto LABEL_238;
                  }
                  v144 = *(char **)(*(void *)a3 + 280);
                  v143 = *(char **)(*(void *)a3 + 288);
                  v145 = v144;
                  v146 = v144;
                  if (v144 != v143)
                  {
                    do
                    {
                      if (*(void *)v146 == v141) {
                        goto LABEL_234;
                      }
                      v146 += 8;
                    }
                    while (v146 != v143);
                    v146 = *(char **)(*(void *)a3 + 288);
LABEL_234:
                    while (*(void *)v145 != v142)
                    {
                      v145 += 8;
                      if (v145 == v143)
                      {
                        v145 = *(char **)(*(void *)a3 + 288);
                        break;
                      }
                    }
                  }
                  if (v146 - v144 >= v145 - v144)
                  {
LABEL_238:
                    uint64_t v228 = *(void *)(v140 + 16);
                    long long v220 = *(_OWORD *)v140;
                    long long v237 = *(_OWORD *)(v140 + 32);
                    long long v147 = *(_OWORD *)v133;
                    long long v148 = *(_OWORD *)(v133 + 16);
                    *(_OWORD *)(v140 + 27) = *(_OWORD *)(v133 + 27);
                    *(_OWORD *)unint64_t v140 = v147;
                    *(_OWORD *)(v140 + 16) = v148;
                    if (v129 >= v132)
                    {
                      while (1)
                      {
                        uint64_t v150 = 2 * v132;
                        uint64_t v132 = (2 * v132) | 1;
                        unint64_t v149 = v13 + 48 * v132;
                        uint64_t v151 = v150 + 2;
                        if (v151 < (uint64_t)v15)
                        {
                          uint64_t v152 = *(void *)(v149 + 24);
                          uint64_t v153 = *(void *)(v149 + 72);
                          if (v152 != v153)
                          {
                            v154 = *(char **)(*(void *)a3 + 280);
                            v155 = *(char **)(*(void *)a3 + 288);
                            v156 = v154;
                            v157 = v154;
                            if (v154 != v155)
                            {
                              do
                              {
                                if (*(void *)v157 == v152) {
                                  goto LABEL_246;
                                }
                                v157 += 8;
                              }
                              while (v157 != v155);
                              v157 = *(char **)(*(void *)a3 + 288);
LABEL_246:
                              while (*(void *)v156 != v153)
                              {
                                v156 += 8;
                                if (v156 == v155)
                                {
                                  v156 = *(char **)(*(void *)a3 + 288);
                                  break;
                                }
                              }
                            }
                            v149 += 48 * (v157 - v154 < v156 - v154);
                            if (v157 - v154 < v156 - v154) {
                              uint64_t v132 = v151;
                            }
                          }
                        }
                        uint64_t v158 = *(void *)(v149 + 24);
                        if (v158 != v142)
                        {
                          v160 = *(char **)(*(void *)a3 + 280);
                          v159 = *(char **)(*(void *)a3 + 288);
                          v161 = v160;
                          v162 = v160;
                          if (v160 != v159)
                          {
                            do
                            {
                              if (*(void *)v162 == v158) {
                                goto LABEL_256;
                              }
                              v162 += 8;
                            }
                            while (v162 != v159);
                            v162 = *(char **)(*(void *)a3 + 288);
LABEL_256:
                            while (*(void *)v161 != v142)
                            {
                              v161 += 8;
                              if (v161 == v159)
                              {
                                v161 = *(char **)(*(void *)a3 + 288);
                                break;
                              }
                            }
                          }
                          if (v162 - v160 < v161 - v160) {
                            break;
                          }
                        }
                        long long v163 = *(_OWORD *)v149;
                        long long v164 = *(_OWORD *)(v149 + 16);
                        *(_OWORD *)(v133 + 27) = *(_OWORD *)(v149 + 27);
                        *(_OWORD *)unint64_t v133 = v163;
                        *(_OWORD *)(v133 + 16) = v164;
                        unint64_t v133 = v149;
                        if (v129 < v132) {
                          goto LABEL_261;
                        }
                      }
                    }
                    unint64_t v149 = v133;
LABEL_261:
                    *(_OWORD *)unint64_t v149 = v220;
                    *(void *)(v149 + 16) = v228;
                    *(void *)(v149 + 24) = v142;
                    *(void *)(v149 + 32) = v237;
                    *(_DWORD *)(v149 + 39) = *(_DWORD *)((char *)&v237 + 7);
                  }
                }
                int64_t v130 = v131 - 1;
              }
              while (v131);
              int64_t v165 = v14 / 0x30uLL;
              do
              {
                uint64_t v166 = 0;
                *(_OWORD *)v229 = *(_OWORD *)(v13 + 16);
                *(_OWORD *)&v229[16] = *(_OWORD *)(v13 + 32);
                long long v221 = *(_OWORD *)v13;
                uint64_t v167 = v165 - 2;
                if (v165 < 2) {
                  uint64_t v167 = v165 - 1;
                }
                uint64_t v168 = v167 >> 1;
                unint64_t v169 = v13;
                do
                {
                  v170 = (_OWORD *)v169;
                  v169 += 48 * v166 + 48;
                  uint64_t v171 = 2 * v166;
                  uint64_t v166 = (2 * v166) | 1;
                  uint64_t v172 = v171 + 2;
                  if (v171 + 2 < v165)
                  {
                    uint64_t v173 = *(void *)(v169 + 24);
                    uint64_t v174 = *(void *)(v169 + 72);
                    if (v173 != v174)
                    {
                      v176 = *(char **)(*(void *)a3 + 280);
                      v175 = *(char **)(*(void *)a3 + 288);
                      v177 = v176;
                      v178 = v176;
                      if (v176 != v175)
                      {
                        do
                        {
                          if (*(void *)v178 == v173) {
                            goto LABEL_273;
                          }
                          v178 += 8;
                        }
                        while (v178 != v175);
                        v178 = *(char **)(*(void *)a3 + 288);
LABEL_273:
                        while (*(void *)v177 != v174)
                        {
                          v177 += 8;
                          if (v177 == v175)
                          {
                            v177 = *(char **)(*(void *)a3 + 288);
                            break;
                          }
                        }
                      }
                      v169 += 48 * (v178 - v176 < v177 - v176);
                      if (v178 - v176 < v177 - v176) {
                        uint64_t v166 = v172;
                      }
                    }
                  }
                  long long v179 = *(_OWORD *)v169;
                  long long v180 = *(_OWORD *)(v169 + 16);
                  *(_OWORD *)((char *)v170 + 27) = *(_OWORD *)(v169 + 27);
                  _OWORD *v170 = v179;
                  v170[1] = v180;
                }
                while (v166 <= v168);
                a2 -= 3;
                if ((long long *)v169 == a2)
                {
                  *(_OWORD *)(v169 + 27) = *(_OWORD *)&v229[11];
                  *(_OWORD *)unint64_t v169 = v221;
                  *(_OWORD *)(v169 + 16) = *(_OWORD *)v229;
                }
                else
                {
                  long long v181 = *a2;
                  long long v182 = a2[1];
                  *(_OWORD *)(v169 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v169 = v181;
                  *(_OWORD *)(v169 + 16) = v182;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v229[11];
                  *a2 = v221;
                  a2[1] = *(_OWORD *)v229;
                  uint64_t v183 = v169 - v13 + 48;
                  if (v183 >= 49)
                  {
                    unint64_t v184 = (v183 / 0x30uLL - 2) >> 1;
                    unint64_t v185 = v13 + 48 * v184;
                    uint64_t v186 = *(void *)(v185 + 24);
                    uint64_t v187 = *(void *)(v169 + 24);
                    if (v186 != v187)
                    {
                      v189 = *(char **)(*(void *)a3 + 280);
                      v188 = *(char **)(*(void *)a3 + 288);
                      v190 = v189;
                      v191 = v189;
                      if (v189 != v188)
                      {
                        do
                        {
                          if (*(void *)v191 == v186) {
                            goto LABEL_286;
                          }
                          v191 += 8;
                        }
                        while (v191 != v188);
                        v191 = *(char **)(*(void *)a3 + 288);
LABEL_286:
                        while (*(void *)v190 != v187)
                        {
                          v190 += 8;
                          if (v190 == v188)
                          {
                            v190 = *(char **)(*(void *)a3 + 288);
                            break;
                          }
                        }
                      }
                      if (v191 - v189 < v190 - v189)
                      {
                        uint64_t v242 = *(void *)(v169 + 16);
                        long long v238 = *(_OWORD *)v169;
                        long long v233 = *(_OWORD *)(v169 + 32);
                        do
                        {
                          v192 = (_OWORD *)v169;
                          unint64_t v169 = v185;
                          long long v193 = *(_OWORD *)v185;
                          long long v194 = *(_OWORD *)(v185 + 16);
                          *(_OWORD *)((char *)v192 + 27) = *(_OWORD *)(v185 + 27);
                          _OWORD *v192 = v193;
                          v192[1] = v194;
                          if (!v184) {
                            break;
                          }
                          unint64_t v184 = (v184 - 1) >> 1;
                          unint64_t v185 = v13 + 48 * v184;
                          uint64_t v195 = *(void *)(v185 + 24);
                          if (v195 == v187) {
                            break;
                          }
                          v197 = *(char **)(*(void *)a3 + 280);
                          v196 = *(char **)(*(void *)a3 + 288);
                          v198 = v197;
                          v199 = v197;
                          if (v197 != v196)
                          {
                            do
                            {
                              if (*(void *)v199 == v195) {
                                goto LABEL_297;
                              }
                              v199 += 8;
                            }
                            while (v199 != v196);
                            v199 = *(char **)(*(void *)a3 + 288);
LABEL_297:
                            while (*(void *)v198 != v187)
                            {
                              v198 += 8;
                              if (v198 == v196)
                              {
                                v198 = *(char **)(*(void *)a3 + 288);
                                break;
                              }
                            }
                          }
                        }
                        while (v199 - v197 < v198 - v197);
                        *(_OWORD *)unint64_t v169 = v238;
                        *(void *)(v169 + 16) = v242;
                        *(void *)(v169 + 24) = v187;
                        *(void *)(v169 + 32) = v233;
                        *(_DWORD *)(v169 + 39) = *(_DWORD *)((char *)&v233 + 7);
                      }
                    }
                  }
                }
              }
              while (v165-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          char v17 = (long long *)(v13 + 48 * (v15 >> 1));
          if ((unint64_t)v14 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v15 >> 1)), a2 - 3, a3);
            uint64_t v18 = 3 * v16;
            double v19 = (long long *)(a1 + 48 * v16 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)(a1 + 48), v19, a2 - 6, a3);
            double v20 = (long long *)(a1 + 48 + 16 * v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)(a1 + 96), v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(v19, v17, v20, a3);
            *(_OWORD *)v223 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v223[16] = *(_OWORD *)(a1 + 32);
            long long v216 = *(_OWORD *)a1;
            long long v21 = *(long long *)((char *)v17 + 27);
            long long v22 = v17[1];
            *(_OWORD *)a1 = *v17;
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(a1 + 27) = v21;
            *(long long *)((char *)v17 + 27) = *(_OWORD *)&v223[11];
            *char v17 = v216;
            v17[1] = *(_OWORD *)v223;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)(a1 + 48 * (v15 >> 1)), (long long *)a1, a2 - 3, a3);
          }
          --a4;
          if (a5)
          {
            uint64_t v23 = *(void *)(a1 + 24);
            uint64_t v24 = *(void *)a3;
            break;
          }
          uint64_t v25 = *(void *)(a1 - 24);
          uint64_t v23 = *(void *)(a1 + 24);
          if (v25 != v23)
          {
            uint64_t v24 = *(void *)a3;
            uint64_t v26 = *(char **)(*(void *)a3 + 280);
            double v27 = *(char **)(*(void *)a3 + 288);
            double v28 = v26;
            double v29 = v26;
            if (v26 != v27)
            {
              do
              {
                if (*(void *)v29 == v25) {
                  goto LABEL_16;
                }
                v29 += 8;
              }
              while (v29 != v27);
              double v29 = *(char **)(*(void *)a3 + 288);
LABEL_16:
              while (*(void *)v28 != v23)
              {
                v28 += 8;
                if (v28 == v27)
                {
                  double v28 = *(char **)(*(void *)a3 + 288);
                  break;
                }
              }
            }
            if (v29 - v26 < v28 - v26) {
              break;
            }
          }
          uint64_t v241 = *(void *)(a1 + 16);
          long long v232 = *(_OWORD *)(a1 + 32);
          long long v235 = *(_OWORD *)a1;
          uint64_t v67 = *((void *)a2 - 3);
          if (v23 == v67) {
            goto LABEL_107;
          }
          unint64_t v68 = *(char **)(*(void *)a3 + 280);
          unint64_t v69 = *(char **)(*(void *)a3 + 288);
          if (v68 == v69)
          {
            unint64_t v71 = *(char **)(*(void *)a3 + 280);
            unint64_t v70 = v71;
          }
          else
          {
            unint64_t v70 = *(char **)(*(void *)a3 + 280);
            while (*(void *)v70 != v23)
            {
              v70 += 8;
              if (v70 == v69)
              {
                unint64_t v70 = *(char **)(*(void *)a3 + 288);
                break;
              }
            }
            unint64_t v71 = *(char **)(*(void *)a3 + 280);
            while (*(void *)v71 != v67)
            {
              v71 += 8;
              if (v71 == v69)
              {
                unint64_t v71 = *(char **)(*(void *)a3 + 288);
                break;
              }
            }
          }
          if (v70 - v68 >= v71 - v68)
          {
LABEL_107:
            unint64_t v13 = a1 + 48;
            if (a1 + 48 < (unint64_t)a2)
            {
              uint64_t v75 = *(void *)a3;
              unint64_t v76 = a1;
              do
              {
                uint64_t v77 = *(void *)(v76 + 72);
                unint64_t v76 = v13;
                if (v23 != v77)
                {
                  long long v78 = *(char **)(v75 + 280);
                  long long v79 = *(char **)(v75 + 288);
                  uint64_t v80 = v78;
                  uint64_t v81 = v78;
                  if (v78 != v79)
                  {
                    do
                    {
                      if (*(void *)v81 == v23) {
                        goto LABEL_114;
                      }
                      v81 += 8;
                    }
                    while (v81 != v79);
                    uint64_t v81 = *(char **)(v75 + 288);
LABEL_114:
                    while (*(void *)v80 != v77)
                    {
                      v80 += 8;
                      if (v80 == v79)
                      {
                        uint64_t v80 = *(char **)(v75 + 288);
                        break;
                      }
                    }
                  }
                  if (v81 - v78 < v80 - v78) {
                    break;
                  }
                }
                v13 += 48;
              }
              while (v76 + 48 < (unint64_t)a2);
            }
          }
          else
          {
            unint64_t v13 = a1;
            do
            {
              do
              {
                uint64_t v72 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v72);
              if (v68 == v69)
              {
                BOOL v74 = *(char **)(*(void *)a3 + 280);
                double v73 = v74;
              }
              else
              {
                double v73 = *(char **)(*(void *)a3 + 280);
                while (*(void *)v73 != v23)
                {
                  v73 += 8;
                  if (v73 == v69)
                  {
                    double v73 = *(char **)(*(void *)a3 + 288);
                    break;
                  }
                }
                BOOL v74 = *(char **)(*(void *)a3 + 280);
                while (*(void *)v74 != v72)
                {
                  v74 += 8;
                  if (v74 == v69)
                  {
                    BOOL v74 = *(char **)(*(void *)a3 + 288);
                    break;
                  }
                }
              }
            }
            while (v73 - v68 >= v74 - v68);
          }
          long long v82 = a2;
          if (v13 < (unint64_t)a2)
          {
            uint64_t v83 = *(void *)a3;
            long long v82 = a2;
            do
            {
              uint64_t v84 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v84) {
                break;
              }
              id v85 = *(char **)(v83 + 280);
              int v86 = *(char **)(v83 + 288);
              unint64_t v87 = v85;
              id v88 = v85;
              if (v85 != v86)
              {
                do
                {
                  if (*(void *)v88 == v23) {
                    goto LABEL_126;
                  }
                  v88 += 8;
                }
                while (v88 != v86);
                id v88 = *(char **)(v83 + 288);
LABEL_126:
                while (*(void *)v87 != v84)
                {
                  v87 += 8;
                  if (v87 == v86)
                  {
                    unint64_t v87 = *(char **)(v83 + 288);
                    break;
                  }
                }
              }
            }
            while (v88 - v85 < v87 - v85);
          }
          while (v13 < (unint64_t)v82)
          {
            *(_OWORD *)v225 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v225[16] = *(_OWORD *)(v13 + 32);
            long long v217 = *(_OWORD *)v13;
            long long v89 = *v82;
            long long v90 = v82[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v82 + 27);
            *(_OWORD *)unint64_t v13 = v89;
            *(_OWORD *)(v13 + 16) = v90;
            *(long long *)((char *)v82 + 27) = *(_OWORD *)&v225[11];
            long long *v82 = v217;
            v82[1] = *(_OWORD *)v225;
            uint64_t v91 = *(void *)a3;
            do
            {
              do
              {
                uint64_t v92 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v92);
              long long v93 = *(char **)(v91 + 280);
              BOOL v94 = *(char **)(v91 + 288);
              if (v93 == v94)
              {
                long long v96 = *(char **)(v91 + 280);
                unint64_t v95 = v96;
              }
              else
              {
                unint64_t v95 = *(char **)(v91 + 280);
                while (*(void *)v95 != v23)
                {
                  v95 += 8;
                  if (v95 == v94)
                  {
                    unint64_t v95 = *(char **)(v91 + 288);
                    break;
                  }
                }
                long long v96 = *(char **)(v91 + 280);
                while (*(void *)v96 != v92)
                {
                  v96 += 8;
                  if (v96 == v94)
                  {
                    long long v96 = *(char **)(v91 + 288);
                    break;
                  }
                }
              }
            }
            while (v95 - v93 >= v96 - v93);
            do
            {
              uint64_t v97 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v97) {
                break;
              }
              if (v93 == v94)
              {
                unint64_t v99 = v93;
                unint64_t v98 = v93;
              }
              else
              {
                unint64_t v98 = v93;
                while (*(void *)v98 != v23)
                {
                  v98 += 8;
                  if (v98 == v94)
                  {
                    unint64_t v98 = v94;
                    break;
                  }
                }
                unint64_t v99 = v93;
                while (*(void *)v99 != v97)
                {
                  v99 += 8;
                  if (v99 == v94)
                  {
                    unint64_t v99 = v94;
                    break;
                  }
                }
              }
            }
            while (v98 - v93 < v99 - v93);
          }
          unint64_t v100 = (long long *)(v13 - 48);
          BOOL v5 = v13 - 48 >= a1;
          BOOL v6 = v13 - 48 == a1;
          if (v13 - 48 != a1)
          {
            long long v101 = *v100;
            long long v102 = *(_OWORD *)(v13 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
            *(_OWORD *)a1 = v101;
            *(_OWORD *)(a1 + 16) = v102;
          }
          a5 = 0;
          *unint64_t v100 = v235;
          *(void *)(v13 - 32) = v241;
          *(void *)(v13 - 24) = v23;
          *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v232 + 7);
          *(void *)(v13 - 16) = v232;
        }
        uint64_t v240 = *(void *)(a1 + 16);
        long long v231 = *(_OWORD *)(a1 + 32);
        long long v234 = *(_OWORD *)a1;
        unint64_t v30 = a1;
        do
        {
          unint64_t v31 = v30;
          v30 += 48;
          uint64_t v32 = *(void *)(v31 + 72);
          if (v32 == v23) {
            break;
          }
          unint64_t v33 = *(char **)(v24 + 280);
          double v34 = *(char **)(v24 + 288);
          double v35 = v33;
          double v36 = v33;
          if (v33 != v34)
          {
            do
            {
              if (*(void *)v36 == v32) {
                goto LABEL_26;
              }
              v36 += 8;
            }
            while (v36 != v34);
            double v36 = *(char **)(v24 + 288);
LABEL_26:
            while (*(void *)v35 != v23)
            {
              v35 += 8;
              if (v35 == v34)
              {
                double v35 = *(char **)(v24 + 288);
                break;
              }
            }
          }
        }
        while (v36 - v33 < v35 - v33);
        double v37 = a2;
        if (v31 == a1)
        {
          double v37 = a2;
          if (v30 < (unint64_t)a2)
          {
            double v37 = a2;
            do
            {
              uint64_t v43 = *((void *)v37 - 3);
              v37 -= 3;
              if (v43 != v23)
              {
                long long v44 = *(char **)(v24 + 280);
                long long v45 = *(char **)(v24 + 288);
                unint64_t v46 = v44;
                unint64_t v47 = v44;
                if (v44 != v45)
                {
                  do
                  {
                    if (*(void *)v47 == v43) {
                      goto LABEL_48;
                    }
                    v47 += 8;
                  }
                  while (v47 != v45);
                  unint64_t v47 = *(char **)(v24 + 288);
LABEL_48:
                  while (*(void *)v46 != v23)
                  {
                    v46 += 8;
                    if (v46 == v45)
                    {
                      unint64_t v46 = *(char **)(v24 + 288);
                      break;
                    }
                  }
                }
                if (v47 - v44 < v46 - v44) {
                  break;
                }
              }
            }
            while (v30 < (unint64_t)v37);
          }
        }
        else
        {
          do
          {
            do
            {
              uint64_t v38 = *((void *)v37 - 3);
              v37 -= 3;
            }
            while (v38 == v23);
            id v39 = *(char **)(v24 + 280);
            uint64_t v40 = *(char **)(v24 + 288);
            double v41 = v39;
            char v42 = v39;
            if (v39 != v40)
            {
              do
              {
                if (*(void *)v42 == v38) {
                  goto LABEL_36;
                }
                v42 += 8;
              }
              while (v42 != v40);
              char v42 = *(char **)(v24 + 288);
LABEL_36:
              while (*(void *)v41 != v23)
              {
                v41 += 8;
                if (v41 == v40)
                {
                  double v41 = *(char **)(v24 + 288);
                  break;
                }
              }
            }
          }
          while (v42 - v39 >= v41 - v39);
        }
        unint64_t v13 = v30;
        if (v30 < (unint64_t)v37)
        {
          uint64_t v48 = v37;
          do
          {
            *(_OWORD *)v224 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v224[16] = *(_OWORD *)(v13 + 32);
            long long v49 = *(_OWORD *)v13;
            long long v51 = *v48;
            long long v50 = v48[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v48 + 27);
            *(_OWORD *)unint64_t v13 = v51;
            *(_OWORD *)(v13 + 16) = v50;
            *(long long *)((char *)v48 + 27) = *(_OWORD *)&v224[11];
            *uint64_t v48 = v49;
            v48[1] = *(_OWORD *)v224;
            uint64_t v52 = *(void *)a3;
            do
            {
              uint64_t v53 = *(void *)(v13 + 72);
              v13 += 48;
              if (v53 == v23) {
                break;
              }
              BOOL v54 = *(char **)(v52 + 280);
              unint64_t v55 = *(char **)(v52 + 288);
              uint64_t v56 = v54;
              long long v57 = v54;
              if (v54 != v55)
              {
                do
                {
                  if (*(void *)v57 == v53) {
                    goto LABEL_61;
                  }
                  v57 += 8;
                }
                while (v57 != v55);
                long long v57 = *(char **)(v52 + 288);
LABEL_61:
                while (*(void *)v56 != v23)
                {
                  v56 += 8;
                  if (v56 == v55)
                  {
                    uint64_t v56 = *(char **)(v52 + 288);
                    break;
                  }
                }
              }
            }
            while (v57 - v54 < v56 - v54);
            do
            {
              do
              {
                uint64_t v58 = *((void *)v48 - 3);
                v48 -= 3;
              }
              while (v58 == v23);
              unint64_t v59 = *(char **)(v52 + 280);
              char v60 = *(char **)(v52 + 288);
              unint64_t v61 = v59;
              long long v62 = v59;
              if (v59 != v60)
              {
                do
                {
                  if (*(void *)v62 == v58) {
                    goto LABEL_70;
                  }
                  v62 += 8;
                }
                while (v62 != v60);
                long long v62 = *(char **)(v52 + 288);
LABEL_70:
                while (*(void *)v61 != v23)
                {
                  v61 += 8;
                  if (v61 == v60)
                  {
                    unint64_t v61 = *(char **)(v52 + 288);
                    break;
                  }
                }
              }
            }
            while (v62 - v59 >= v61 - v59);
          }
          while (v13 < (unint64_t)v48);
        }
        long long v63 = (long long *)(v13 - 48);
        if (v13 - 48 != a1)
        {
          long long v64 = *v63;
          long long v65 = *(_OWORD *)(v13 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
          *(_OWORD *)a1 = v64;
          *(_OWORD *)(a1 + 16) = v65;
        }
        *long long v63 = v234;
        *(void *)(v13 - 32) = v240;
        *(void *)(v13 - 24) = v23;
        *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v231 + 7);
        *(void *)(v13 - 16) = v231;
        if (v30 >= (unint64_t)v37) {
          break;
        }
LABEL_80:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsNoiseLevel>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder*,false>(a1, v13 - 48, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsNoiseLevel>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder*>(a1, v13 - 48, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsNoiseLevel>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder*>(v13, (uint64_t)a2, a3))
      {
        break;
      }
      if (!v66) {
        goto LABEL_80;
      }
    }
    a2 = (long long *)(v13 - 48);
    if (!v66) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsNoiseLevel>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 - 24);
      uint64_t v9 = *(void *)(a1 + 24);
      if (v8 == v9) {
        return result;
      }
      id v10 = *(char **)(*(void *)a3 + 280);
      int64_t v11 = *(char **)(*(void *)a3 + 288);
      unint64_t v12 = v10;
      unint64_t v13 = v10;
      if (v10 == v11) {
        goto LABEL_10;
      }
      do
      {
        if (*(void *)v13 == v8) {
          goto LABEL_7;
        }
        v13 += 8;
      }
      while (v13 != v11);
      unint64_t v13 = *(char **)(*(void *)a3 + 288);
      do
      {
LABEL_7:
        if (*(void *)v12 == v9) {
          goto LABEL_10;
        }
        v12 += 8;
      }
      while (v12 != v11);
      unint64_t v12 = *(char **)(*(void *)a3 + 288);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        uint64_t v14 = (long long *)(a2 - 48);
        long long v15 = *(_OWORD *)a1;
        *(_OWORD *)double v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        long long v16 = *(_OWORD *)(a2 - 21);
        long long v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *uint64_t v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(long long *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), a3);
      uint64_t v19 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      int v20 = 0;
      break;
  }
  while (1)
  {
    uint64_t v21 = *(void *)(v19 + 24);
    uint64_t v22 = *(void *)(v18 + 24);
    if (v21 != v22)
    {
      uint64_t v23 = *(char **)(*(void *)a3 + 280);
      uint64_t v24 = *(char **)(*(void *)a3 + 288);
      uint64_t v25 = v23;
      uint64_t v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(void *)v26 == v21) {
            goto LABEL_19;
          }
          v26 += 8;
        }
        while (v26 != v24);
        uint64_t v26 = *(char **)(*(void *)a3 + 288);
LABEL_19:
        while (*(void *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            uint64_t v25 = *(char **)(*(void *)a3 + 288);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        long long v34 = *(_OWORD *)v19;
        uint64_t v36 = *(void *)(v19 + 16);
        long long v37 = *(_OWORD *)(v19 + 32);
        uint64_t v27 = v19;
        while (1)
        {
          long long v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1) {
            break;
          }
          uint64_t v27 = v18;
          uint64_t v29 = *(void *)(v18 - 24);
          if (v21 != v29)
          {
            unint64_t v30 = *(char **)(*(void *)a3 + 280);
            unint64_t v31 = *(char **)(*(void *)a3 + 288);
            uint64_t v32 = v30;
            unint64_t v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(void *)v33 == v21) {
                  goto LABEL_30;
                }
                v33 += 8;
              }
              while (v33 != v31);
              unint64_t v33 = *(char **)(*(void *)a3 + 288);
LABEL_30:
              while (*(void *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  uint64_t v32 = *(char **)(*(void *)a3 + 288);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30) {
              continue;
            }
          }
          goto LABEL_36;
        }
        uint64_t v27 = a1;
LABEL_36:
        *(_OWORD *)uint64_t v27 = v34;
        *(void *)(v27 + 16) = v36;
        *(void *)(v27 + 24) = v21;
        *(void *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8) {
          return v19 + 48 == a2;
        }
      }
    }
    uint64_t v18 = v19;
    v19 += 48;
    if (v19 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsNoiseLevel>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v10) >> 4);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*((double *)a2 - 5) < *(double *)(v10 + 8))
                {
                  *(_OWORD *)long long v118 = *(_OWORD *)(v10 + 16);
                  *(_OWORD *)&v118[16] = *(_OWORD *)(v10 + 32);
                  long long v110 = *(_OWORD *)v10;
                  long long v52 = *(a2 - 3);
                  long long v53 = *(a2 - 2);
                  *(_OWORD *)(v10 + 27) = *(long long *)((char *)a2 - 21);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(long long *)((char *)a2 - 21) = *(_OWORD *)&v118[11];
                  *(a2 - 3) = v110;
                  *(a2 - 2) = *(_OWORD *)v118;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)v10, (long long *)(v10 + 48), a2 - 3);
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v10, v10 + 48, v10 + 96, (uint64_t)(a2 - 3));
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v10, v10 + 48, v10 + 96, v10 + 144, (uint64_t)(a2 - 3));
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 1151)
          {
            BOOL v54 = (long long *)(v10 + 48);
            BOOL v56 = (long long *)v10 == a2 || v54 == a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  unint64_t v59 = v54;
                  double v60 = *(double *)(v58 + 56);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *(void *)v54;
                    *(_OWORD *)double v111 = *(_OWORD *)(v58 + 64);
                    *(_OWORD *)&v111[16] = *(_OWORD *)(v58 + 80);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      long long v63 = (_OWORD *)(v10 + v62);
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      v63[3] = *(_OWORD *)(v10 + v62);
                      v63[4] = v64;
                      *(_OWORD *)((char *)v63 + 75) = *(_OWORD *)(v10 + v62 + 27);
                      if (!v62) {
                        break;
                      }
                      v62 -= 48;
                      if (v60 >= *((double *)v63 - 5))
                      {
                        uint64_t v65 = v10 + v62 + 48;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = *(_OWORD *)v111;
                    *(_OWORD *)(v65 + 27) = *(_OWORD *)&v111[11];
                  }
                  BOOL v54 = v59 + 3;
                  v57 += 48;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 3 != a2);
              }
            }
            else if (!v56)
            {
              do
              {
                unint64_t v98 = v54;
                double v99 = *(double *)(a1 + 56);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *(void *)v54;
                  *(_OWORD *)unint64_t v114 = *(_OWORD *)(a1 + 64);
                  *(_OWORD *)&v114[16] = *(_OWORD *)(a1 + 80);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(v101 - 2);
                    *long long v101 = *(v101 - 3);
                    v101[1] = v102;
                    *(long long *)((char *)v101 + 27) = *(long long *)((char *)v101 - 21);
                    double v103 = *((double *)v101 - 11);
                    v101 -= 3;
                  }
                  while (v99 < v103);
                  *(void *)long long v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *(long long *)((char *)v101 + 27) = *(_OWORD *)&v114[11];
                  v101[1] = *(_OWORD *)v114;
                }
                v54 += 3;
                a1 = (unint64_t)v98;
              }
              while (v98 + 3 != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((long long *)v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 48 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v70 + 8) < *(double *)(v70 + 56))
                  {
                    v70 += 48;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  unint64_t v71 = v10 + 48 * v68;
                  double v72 = *(double *)(v71 + 8);
                  if (*(double *)(v70 + 8) >= v72)
                  {
                    uint64_t v73 = *(void *)v71;
                    *(_OWORD *)double v112 = *(_OWORD *)(v71 + 16);
                    *(_OWORD *)&v112[16] = *(_OWORD *)(v71 + 32);
                    do
                    {
                      BOOL v74 = (_OWORD *)v71;
                      unint64_t v71 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_OWORD *)((char *)v74 + 27) = *(_OWORD *)(v70 + 27);
                      *BOOL v74 = v75;
                      v74[1] = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = 2 * v69;
                      uint64_t v69 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 48 * v69;
                      uint64_t v78 = v77 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v70 + 8) < *(double *)(v70 + 56))
                      {
                        v70 += 48;
                        uint64_t v69 = v78;
                      }
                    }
                    while (*(double *)(v70 + 8) >= v72);
                    *(void *)unint64_t v71 = v73;
                    *(double *)(v71 + 8) = v72;
                    *(_OWORD *)(v71 + 16) = *(_OWORD *)v112;
                    *(_OWORD *)(v71 + 27) = *(_OWORD *)&v112[11];
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x30uLL;
              do
              {
                uint64_t v80 = 0;
                *(_OWORD *)char v119 = *(_OWORD *)(v10 + 16);
                *(_OWORD *)&v119[16] = *(_OWORD *)(v10 + 32);
                long long v113 = *(_OWORD *)v10;
                unint64_t v81 = v10;
                do
                {
                  long long v82 = (_OWORD *)v81;
                  v81 += 48 * v80 + 48;
                  uint64_t v83 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v84 = v83 + 2;
                  if (v84 < v79 && *(double *)(v81 + 8) < *(double *)(v81 + 56))
                  {
                    v81 += 48;
                    uint64_t v80 = v84;
                  }
                  long long v85 = *(_OWORD *)v81;
                  long long v86 = *(_OWORD *)(v81 + 16);
                  *(_OWORD *)((char *)v82 + 27) = *(_OWORD *)(v81 + 27);
                  _OWORD *v82 = v85;
                  v82[1] = v86;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 3;
                if ((long long *)v81 == a2)
                {
                  *(_OWORD *)(v81 + 27) = *(_OWORD *)&v119[11];
                  *(_OWORD *)unint64_t v81 = v113;
                  *(_OWORD *)(v81 + 16) = *(_OWORD *)v119;
                }
                else
                {
                  long long v87 = *a2;
                  long long v88 = a2[1];
                  *(_OWORD *)(v81 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v81 = v87;
                  *(_OWORD *)(v81 + 16) = v88;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v119[11];
                  *a2 = v113;
                  a2[1] = *(_OWORD *)v119;
                  uint64_t v89 = v81 - v10 + 48;
                  if (v89 >= 49)
                  {
                    unint64_t v90 = (v89 / 0x30uLL - 2) >> 1;
                    unint64_t v91 = v10 + 48 * v90;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      *(_OWORD *)double v106 = *(_OWORD *)(v81 + 16);
                      *(_OWORD *)&v106[16] = *(_OWORD *)(v81 + 32);
                      do
                      {
                        BOOL v94 = (_OWORD *)v81;
                        unint64_t v81 = v91;
                        long long v95 = *(_OWORD *)v91;
                        long long v96 = *(_OWORD *)(v91 + 16);
                        *(_OWORD *)((char *)v94 + 27) = *(_OWORD *)(v91 + 27);
                        _OWORD *v94 = v95;
                        v94[1] = v96;
                        if (!v90) {
                          break;
                        }
                        unint64_t v90 = (v90 - 1) >> 1;
                        unint64_t v91 = v10 + 48 * v90;
                      }
                      while (*(double *)(v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_OWORD *)(v81 + 16) = *(_OWORD *)v106;
                      *(_OWORD *)(v81 + 27) = *(_OWORD *)&v106[11];
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (long long *)(v10 + 48 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v12 >> 1)), a2 - 3);
            uint64_t v15 = 3 * v13;
            long long v16 = (long long *)(a1 + 48 * v13 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48), v16, a2 - 6);
            long long v17 = (long long *)(a1 + 48 + 16 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 96), v17, a2 - 9);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v16, v14, v17);
            *(_OWORD *)unint64_t v115 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v115[16] = *(_OWORD *)(a1 + 32);
            long long v107 = *(_OWORD *)a1;
            long long v18 = *(long long *)((char *)v14 + 27);
            long long v19 = v14[1];
            *(_OWORD *)a1 = *v14;
            *(_OWORD *)(a1 + 16) = v19;
            *(_OWORD *)(a1 + 27) = v18;
            *(long long *)((char *)v14 + 27) = *(_OWORD *)&v115[11];
            *uint64_t v14 = v107;
            v14[1] = *(_OWORD *)v115;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48 * (v12 >> 1)), (long long *)a1, a2 - 3);
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 40) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          *(_OWORD *)long long v105 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)&v105[16] = *(_OWORD *)(a1 + 32);
          if (v20 >= *((double *)a2 - 5))
          {
            unint64_t v41 = a1 + 48;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= (unint64_t)a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 48;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 48;
              double v40 = *(double *)(v39 + 56);
              v39 += 48;
            }
            while (v20 >= v40);
          }
          uint64_t v43 = a2;
          if (v10 < (unint64_t)a2)
          {
            long long v44 = a2;
            do
            {
              uint64_t v43 = v44 - 3;
              double v45 = *((double *)v44 - 5);
              v44 -= 3;
            }
            while (v20 < v45);
          }
          while (v10 < (unint64_t)v43)
          {
            *(_OWORD *)uint64_t v117 = *(_OWORD *)(v10 + 16);
            *(_OWORD *)&v117[16] = *(_OWORD *)(v10 + 32);
            long long v109 = *(_OWORD *)v10;
            long long v46 = *v43;
            long long v47 = v43[1];
            *(_OWORD *)(v10 + 27) = *(long long *)((char *)v43 + 27);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(long long *)((char *)v43 + 27) = *(_OWORD *)&v117[11];
            *uint64_t v43 = v109;
            v43[1] = *(_OWORD *)v117;
            do
            {
              double v48 = *(double *)(v10 + 56);
              v10 += 48;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *((double *)v43 - 5);
              v43 -= 3;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 48 >= a1;
          BOOL v5 = v10 - 48 == a1;
          if (v10 - 48 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 48);
            long long v51 = *(_OWORD *)(v10 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v10 - 21);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 48) = v38;
          *(double *)(v10 - 40) = v20;
          *(_OWORD *)(v10 - 21) = *(_OWORD *)&v105[11];
          *(_OWORD *)(v10 - 32) = *(_OWORD *)v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        *(_OWORD *)uint64_t v104 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v104[16] = *(_OWORD *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 56);
          v21 += 48;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        uint64_t v25 = a2;
        if (v21 == 48)
        {
          long long v28 = a2;
          while (v24 < (unint64_t)v28)
          {
            uint64_t v26 = v28 - 3;
            double v29 = *((double *)v28 - 5);
            v28 -= 3;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          uint64_t v26 = v28;
        }
        else
        {
          do
          {
            uint64_t v26 = v25 - 3;
            double v27 = *((double *)v25 - 5);
            v25 -= 3;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < (unint64_t)v26)
        {
          unint64_t v30 = v26;
          do
          {
            *(_OWORD *)uint64_t v116 = *(_OWORD *)(v10 + 16);
            *(_OWORD *)&v116[16] = *(_OWORD *)(v10 + 32);
            long long v108 = *(_OWORD *)v10;
            long long v31 = *v30;
            long long v32 = v30[1];
            *(_OWORD *)(v10 + 27) = *(long long *)((char *)v30 + 27);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(long long *)((char *)v30 + 27) = *(_OWORD *)&v116[11];
            *unint64_t v30 = v108;
            v30[1] = *(_OWORD *)v116;
            do
            {
              double v33 = *(double *)(v10 + 56);
              v10 += 48;
            }
            while (v33 < v20);
            do
            {
              double v34 = *((double *)v30 - 5);
              v30 -= 3;
            }
            while (v34 >= v20);
          }
          while (v10 < (unint64_t)v30);
        }
        if (v10 - 48 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 48);
          long long v36 = *(_OWORD *)(v10 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v10 - 21);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 48) = v22;
        *(double *)(v10 - 40) = v20;
        *(_OWORD *)(v10 - 21) = *(_OWORD *)&v104[11];
        *(_OWORD *)(v10 - 32) = *(_OWORD *)v104;
        if (v24 >= (unint64_t)v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsNoiseLevel>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder*,false>(a1, v10 - 48, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsNoiseLevel>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder*>(a1, v10 - 48);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsNoiseLevel>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder*>(v10, (uint64_t)a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = (long long *)(v10 - 48);
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsNoiseLevel>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 40) < *(double *)(a1 + 8))
      {
        long long v6 = *(_OWORD *)a1;
        *(_OWORD *)double v20 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v20[16] = *(_OWORD *)(a1 + 32);
        long long v7 = *(_OWORD *)(a2 - 21);
        long long v8 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 27) = v7;
        *(_OWORD *)(a2 - 48) = v6;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v20;
        *(_OWORD *)(a2 - 21) = *(_OWORD *)&v20[11];
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48);
      return 1;
    default:
      uint64_t v9 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96));
      uint64_t v10 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    double v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      uint64_t v14 = *(void *)v10;
      *(_OWORD *)long long v19 = *(_OWORD *)(v10 + 16);
      *(_OWORD *)&v19[16] = *(_OWORD *)(v10 + 32);
      uint64_t v15 = v11;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        long long v17 = *(_OWORD *)(a1 + v15 + 112);
        *(_OWORD *)(v16 + 144) = *(_OWORD *)(a1 + v15 + 96);
        *(_OWORD *)(v16 + 160) = v17;
        *(_OWORD *)(v16 + 171) = *(_OWORD *)(a1 + v15 + 123);
        if (v15 == -96) {
          break;
        }
        v15 -= 48;
        if (v13 >= *(double *)(v16 + 56))
        {
          uint64_t v18 = a1 + v15 + 144;
          goto LABEL_12;
        }
      }
      uint64_t v18 = a1;
LABEL_12:
      *(void *)uint64_t v18 = v14;
      *(double *)(v18 + 8) = v13;
      *(_OWORD *)(v18 + 16) = *(_OWORD *)v19;
      *(_OWORD *)(v18 + 27) = *(_OWORD *)&v19[11];
      if (++v12 == 8) {
        return v10 + 48 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 48;
    v10 += 48;
    if (v10 == a2) {
      return 1;
    }
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsNoiseLevel>,void *>>>::operator()[abi:ne180100](char a1, id *a2)
{
  if (a1)
  {
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsNoiseLevel>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsNoiseLevel>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsNoiseLevel>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsNoiseLevel>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(id **)(a1 + 16);
  if (v2)
  {
    do
    {
      id v3 = (id *)*v2;

      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsNoiseLevel> const&)::{lambda(HDStatisticsNoiseLevel const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsNoiseLevel> const&)::{lambda(HDStatisticsNoiseLevel const&)#1}>,HDStatisticsNoiseLevel const& ()(HDStatisticsNoiseLevel const&)>::~__func()
{
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsNoiseLevel> const&)::{lambda(HDStatisticsNoiseLevel const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsNoiseLevel> const&)::{lambda(HDStatisticsNoiseLevel const&)#1}>,HDStatisticsNoiseLevel const& ()(HDStatisticsNoiseLevel const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F1724DD0;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsNoiseLevel> const&)::{lambda(HDStatisticsNoiseLevel const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsNoiseLevel> const&)::{lambda(HDStatisticsNoiseLevel const&)#1}>,HDStatisticsNoiseLevel const& ()(HDStatisticsNoiseLevel const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1724DD0;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsNoiseLevel> const&)::{lambda(HDStatisticsNoiseLevel const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsNoiseLevel> const&)::{lambda(HDStatisticsNoiseLevel const&)#1}>,HDStatisticsNoiseLevel const& ()(HDStatisticsNoiseLevel const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsNoiseLevel> const&)::{lambda(HDStatisticsNoiseLevel const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsNoiseLevel> const&)::{lambda(HDStatisticsNoiseLevel const&)#1}>,HDStatisticsNoiseLevel const& ()(HDStatisticsNoiseLevel const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsNoiseLevel> const&)::{lambda(HDStatisticsNoiseLevel const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsNoiseLevel> const&)::{lambda(HDStatisticsNoiseLevel const&)#1}>,HDStatisticsNoiseLevel const& ()(HDStatisticsNoiseLevel const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsNoiseLevel const& ()(HDStatisticsNoiseLevel const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 576))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a4, 3, @"Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date");
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_configureForStartTime(a1);
  }
  double v8 = *(double *)(a2 + 8);
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9)
  {
    if (*(unsigned char *)(a1 + 576))
    {
      double v10 = -1.79769313e308;
    }
    else
    {
      double v10 = *(double *)(a1 + 176);
      double v12 = *(double *)(a1 + 120);
      if (v10 <= v12) {
        double v10 = -1.79769313e308;
      }
      if (v10 < v12) {
        double v10 = *(double *)(a1 + 120);
      }
    }
  }
  else
  {
    double v10 = *(double *)(a1 + 176);
    if (v10 <= *(double *)(a1 + 120)) {
      double v10 = -1.79769313e308;
    }
  }
  if (v10 <= v8)
  {
    if (v9 && a3) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_advanceToTime(a1, v8);
    }
    HDStatisticsCollectionEngine<HDStatisticsNoiseLevel>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    double v13 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
    uint64_t v11 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v13, a4);
  }
  return v11;
}

void sub_1BD10A994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_advanceToTime(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 128) <= a2)
  {
    uint64_t v4 = a1 + 112;
    BOOL v5 = (double *)(a1 + 120);
    do
    {
      uint64_t v6 = *(void *)(a1 + 552);
      uint64_t v7 = *(void *)(a1 + 544);
      if (v6 == v7)
      {
        uint64_t v22 = 0;
        uint64_t v15 = *(void **)(a1 + 40);
        uint64_t v16 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a2];
        double v8 = [v15 dateIntervalContainingDate:v16 index:&v22];

        HDStatisticsBucket<HDStatisticsNoiseLevel>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsNoiseLevel>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v17 = v22;
        double v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v19 = v18;
        double v20 = [v8 endDate];
        [v20 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsNoiseLevel>::resetToBucket(v4, v17, v19, v21);
      }
      else
      {
        double v8 = [*(id *)(a1 + 40) dateIntervalAtIndex:*(void *)(a1 + 112) + 1];
        HDStatisticsBucket<HDStatisticsNoiseLevel>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsNoiseLevel>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_statisticsFromFinishedBucket(a1, v5);
        double v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v12 = v11;
        double v13 = [v8 endDate];
        [v13 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsNoiseLevel>::advanceBucket(v4, v12, v14);
      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_didChangeBucket(a1, v9);
      if (v6 != v7) {
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_notifyForCurrentBucket(a1);
      }
    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1BD10ABA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsNoiseLevel>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  char v3 = *(unsigned char *)(a2 + 32);
  if (!v3) {
    return;
  }
  uint64_t v6 = a1 + 8;
  double v7 = *(double *)(a1 + 8);
  double v8 = *(uint64_t **)a2;
  double v9 = *(double *)(a2 + 8);
  double v10 = *(double *)(a2 + 16);
  unint64_t v11 = *(void *)(a2 + 24);
  char v12 = *(unsigned char *)(a2 + 33);
  double v13 = v9;
  if (v9 <= v7)
  {
    double v13 = *(double *)(a1 + 8);
    if (v10 < v7) {
      return;
    }
  }
  if (v10 <= v13) {
    return;
  }
  double v14 = *(double *)(a1 + 16);
  if (v13 <= v14)
  {
    if (v10 >= v14)
    {
      BOOL v15 = v10 > v14;
      unint64_t v16 = *(void *)(a2 + 24);
      double v18 = *(double *)(a2 + 16);
      double v19 = *(double *)(a1 + 16);
      double v20 = *(uint64_t **)a2;
      char v17 = *(unsigned char *)(a2 + 33);
      if (v13 >= v14)
      {
        unint64_t v16 = *(void *)(a2 + 24);
        double v18 = *(double *)(a2 + 16);
        double v19 = *(double *)(a1 + 16);
        double v20 = *(uint64_t **)a2;
        char v17 = *(unsigned char *)(a2 + 33);
        goto LABEL_48;
      }
    }
    else
    {
      BOOL v15 = 0;
      unint64_t v16 = 0;
      char v17 = 0;
      double v18 = 0.0;
      double v14 = *(double *)(a2 + 16);
      double v19 = 0.0;
      double v20 = 0;
    }
    double v60 = v14;
    double v61 = v13;
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 248, v11, v11);
    unint64_t v21 = *(void *)(a1 + 112);
    if (v21 == *(void *)(a1 + 104) && *(uint64_t *)(a1 + 160) <= 0)
    {
      v26.f64[1] = *(float64_t *)(a1 + 16);
      double v23 = v60;
      double v22 = v61;
      v26.f64[0] = v61;
      v27.f64[0] = *(float64_t *)(a1 + 8);
      v27.f64[1] = v60;
      int8x16_t v28 = (int8x16_t)vcgtq_f64(v27, v26);
      v27.f64[0] = v61;
      *(int8x16_t *)(a1 + 48) = vbslq_s8(v28, *(int8x16_t *)(a1 + 8), (int8x16_t)v27);
      if (!a3)
      {
LABEL_25:
        unint64_t v29 = *(void *)(a1 + 120);
        if (v21 >= v29)
        {
          uint64_t v31 = *(void *)(a1 + 104);
          unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - v31) >> 4);
          unint64_t v33 = v32 + 1;
          if (v32 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - v31) >> 4);
          if (2 * v34 > v33) {
            unint64_t v33 = 2 * v34;
          }
          if (v34 >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v35 = 0x555555555555555;
          }
          else {
            unint64_t v35 = v33;
          }
          if (v35)
          {
            unint64_t v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v35);
            double v23 = v60;
            double v22 = v61;
          }
          else
          {
            uint64_t v36 = 0;
          }
          unint64_t v37 = v35 + 48 * v32;
          unint64_t v38 = v35 + 48 * v36;
          *(void *)unint64_t v37 = v8;
          *(double *)(v37 + 8) = v22;
          *(double *)(v37 + 16) = v23;
          *(void *)(v37 + 24) = v11;
          *(unsigned char *)(v37 + 32) = 1;
          *(unsigned char *)(v37 + 33) = v12;
          *(_WORD *)(v37 + 40) = 0;
          *(unsigned char *)(v37 + 42) = 0;
          unint64_t v30 = v37 + 48;
          double v40 = *(char **)(a1 + 104);
          unint64_t v39 = *(char **)(a1 + 112);
          if (v39 != v40)
          {
            do
            {
              long long v41 = *((_OWORD *)v39 - 3);
              long long v42 = *((_OWORD *)v39 - 2);
              *(_OWORD *)(v37 - 21) = *(_OWORD *)(v39 - 21);
              *(_OWORD *)(v37 - 48) = v41;
              *(_OWORD *)(v37 - 32) = v42;
              v37 -= 48;
              v39 -= 48;
            }
            while (v39 != v40);
            unint64_t v39 = *(char **)(a1 + 104);
          }
          *(void *)(a1 + 104) = v37;
          *(void *)(a1 + 112) = v30;
          *(void *)(a1 + 120) = v38;
          if (v39) {
            operator delete(v39);
          }
        }
        else
        {
          *(void *)unint64_t v21 = v8;
          *(double *)(v21 + 8) = v22;
          *(double *)(v21 + 16) = v23;
          *(void *)(v21 + 24) = v11;
          *(unsigned char *)(v21 + 32) = 1;
          *(unsigned char *)(v21 + 33) = v12;
          *(_WORD *)(v21 + 40) = 0;
          unint64_t v30 = v21 + 48;
          *(unsigned char *)(v21 + 42) = 0;
        }
        *(void *)(a1 + 112) = v30;
        if (!*(unsigned char *)(a1 + 200) || *(double *)(a1 + 176) <= v9)
        {
          *(void *)(a1 + 168) = v8;
          *(double *)(a1 + 176) = v9;
          *(double *)(a1 + 184) = v10;
          *(void *)(a1 + 192) = v11;
          *(unsigned char *)(a1 + 200) = v3;
          *(unsigned char *)(a1 + 201) = v12;
        }
        if (*(unsigned char *)(a1 + 33))
        {
          unint64_t v43 = HDStatisticsBucket<HDStatisticsNoiseLevel>::_canonicalSourceIDForSourceID(v6, v11);
          long long v44 = HDStatisticsBucket<HDStatisticsNoiseLevel>::_statisticsForSource(v6, v43);
          if (!*((unsigned char *)v44 + 72) || *((double *)v44 + 6) <= v9)
          {
            v44[5] = v8;
            *((double *)v44 + 6) = v9;
            *((double *)v44 + 7) = v10;
            v44[8] = (uint64_t *)v11;
            *((unsigned char *)v44 + 72) = v3;
            *((unsigned char *)v44 + 73) = v12;
          }
        }
LABEL_48:
        char v12 = v17;
        double v8 = v20;
        double v13 = v19;
        double v10 = v18;
        unint64_t v11 = v16;
        if (!v15) {
          return;
        }
        goto LABEL_49;
      }
    }
    else
    {
      double v23 = v60;
      double v22 = v61;
      if (v61 < *(double *)(a1 + 48))
      {
        double v24 = *(double *)(a1 + 8);
        if (v61 >= v24) {
          double v24 = v61;
        }
        *(double *)(a1 + 48) = v24;
      }
      if (v60 > *(double *)(a1 + 56))
      {
        double v25 = *(double *)(a1 + 16);
        if (v25 >= v60) {
          double v25 = v60;
        }
        *(double *)(a1 + 56) = v25;
      }
      if (!a3) {
        goto LABEL_25;
      }
    }
    if (v22 < *(double *)(a1 + 16))
    {
      HDStatisticsBucket<HDStatisticsNoiseLevel>::_mergeThroughTime(v6, v22);
      double v23 = v60;
      double v22 = v61;
      unint64_t v21 = *(void *)(a1 + 112);
    }
    goto LABEL_25;
  }
  LOBYTE(v15) = 1;
LABEL_49:
  unint64_t v45 = *(void *)(a1 + 440);
  unint64_t v46 = *(void *)(a1 + 448);
  if (v45 >= v46)
  {
    uint64_t v48 = *(void *)(a1 + 432);
    unint64_t v49 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v45 - v48) >> 3);
    unint64_t v50 = v49 + 1;
    if (v49 + 1 > 0x666666666666666) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v51 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v46 - v48) >> 3);
    if (2 * v51 > v50) {
      unint64_t v50 = 2 * v51;
    }
    if (v51 >= 0x333333333333333) {
      unint64_t v52 = 0x666666666666666;
    }
    else {
      unint64_t v52 = v50;
    }
    if (v52)
    {
      double v62 = v13;
      unint64_t v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v52);
      double v13 = v62;
    }
    else
    {
      uint64_t v53 = 0;
    }
    unint64_t v54 = v52 + 40 * v49;
    unint64_t v55 = v52 + 40 * v53;
    *(void *)unint64_t v54 = v8;
    *(double *)(v54 + 8) = v13;
    *(double *)(v54 + 16) = v10;
    *(void *)(v54 + 24) = v11;
    *(unsigned char *)(v54 + 32) = v15;
    *(unsigned char *)(v54 + 33) = v12;
    unint64_t v47 = v54 + 40;
    uint64_t v57 = *(char **)(a1 + 432);
    BOOL v56 = *(char **)(a1 + 440);
    if (v56 != v57)
    {
      do
      {
        long long v58 = *(_OWORD *)(v56 - 40);
        long long v59 = *(_OWORD *)(v56 - 24);
        *(_WORD *)(v54 - 8) = *((_WORD *)v56 - 4);
        *(_OWORD *)(v54 - 24) = v59;
        *(_OWORD *)(v54 - 40) = v58;
        v54 -= 40;
        v56 -= 40;
      }
      while (v56 != v57);
      BOOL v56 = *(char **)(a1 + 432);
    }
    *(void *)(a1 + 432) = v54;
    *(void *)(a1 + 440) = v47;
    *(void *)(a1 + 448) = v55;
    if (v56) {
      operator delete(v56);
    }
  }
  else
  {
    *(void *)unint64_t v45 = v8;
    *(double *)(v45 + 8) = v13;
    *(double *)(v45 + 16) = v10;
    *(void *)(v45 + 24) = v11;
    *(unsigned char *)(v45 + 32) = v15;
    unint64_t v47 = v45 + 40;
    *(unsigned char *)(v45 + 33) = v12;
  }
  *(void *)(a1 + 440) = v47;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_notifyForCurrentBucket(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 578))
  {
    *(unsigned char *)(a1 + 580) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 580) = 0;
    uint64_t v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      uint64_t v4 = v2;
      char v3 = (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      if (v3) {
        v4[2](v4, v3);
      }

      uint64_t v2 = v4;
    }
  }
}

void sub_1BD10B134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsNoiseLevel>::advanceBucket(uint64_t a1, double a2, double a3)
{
  double v9 = 0;
  double v10 = 0;
  uint64_t v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 432), *(void *)(a1 + 440), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 440) - *(void *)(a1 + 432)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsNoiseLevel>::resetToBucket(a1, *(void *)a1 + 1, a2, a3);
  uint64_t v6 = v9;
  double v7 = v10;
  if (v9 != v10)
  {
    uint64_t v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsNoiseLevel>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BD10B230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsNoiseLevel>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  objc_storeStrong((id *)(a1 + 456), *(id *)(a1 + 40));
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  uint64_t v8 = [[HDQuantitySampleOverlapProcessor alloc] initWithOverlapFunction:1];
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 186) = 0u;
  double v9 = *(void **)(a1 + 208);
  *(void *)(a1 + 208) = v8;
  double v10 = v8;

  *(_WORD *)(a1 + 216) = 257;
  if (*(void *)(a1 + 240))
  {
    uint64_t v11 = *(void *)(a1 + 232);
    char v12 = *(void **)(a1 + 224);
    *(void *)(a1 + 224) = a1 + 232;
    *(void *)(v11 + 16) = 0;
    *(void *)(a1 + 232) = 0;
    *(void *)(a1 + 240) = 0;
    if (v12[1]) {
      double v13 = (void *)v12[1];
    }
    else {
      double v13 = v12;
    }
    if (v13)
    {
      double v14 = (void *)v13[2];
      if (v14)
      {
        BOOL v15 = (void *)*v14;
        if ((void *)*v14 == v13)
        {
          *double v14 = 0;
          while (1)
          {
            char v17 = (void *)v14[1];
            if (!v17) {
              break;
            }
            do
            {
              double v14 = v17;
              char v17 = (void *)*v17;
            }
            while (v17);
          }
        }
        else
        {
          for (v14[1] = 0; v15; BOOL v15 = (void *)v14[1])
          {
            do
            {
              double v14 = v15;
              BOOL v15 = (void *)*v15;
            }
            while (v15);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsNoiseLevel>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsNoiseLevel>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsNoiseLevel>>>::destroy(v13);
        for (uint64_t i = (void *)v14[2]; i; uint64_t i = (void *)i[2])
          double v14 = i;
        double v13 = v14;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsNoiseLevel>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsNoiseLevel>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsNoiseLevel>>>::destroy(v13);
  }
  HDStatisticsBucket<HDStatisticsNoiseLevel>::setStatisticsConfiguration(a1 + 8, *(void **)(a1 + 456));
  *(void *)(a1 + 440) = *(void *)(a1 + 432);
  *(void *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 580))
  {
    if (v3)
    {
      id v6 = v3;
      uint64_t v4 = _Block_copy(*(const void **)(a1 + 96));
      BOOL v5 = v4;
      if (v4) {
        (*((void (**)(void *, id))v4 + 2))(v4, v6);
      }

      id v3 = v6;
    }
    *(unsigned char *)(a1 + 580) = 0;
  }
}

void sub_1BD10B434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsNoiseLevelE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  BOOL v5 = [a2 startDate];
  id v6 = [v4 startDate];
  uint64_t v7 = [v5 compare:v6];

  return v7;
}

void sub_1BD10B4BC(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_primitiveInvalidateInterval(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 13);
  if (WeakRetained)
  {
    if (v5
      && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_currentBucketInterval((uint64_t)a1),
          (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v8 = [v5 endDate];
      double v9 = [v7 startDate];
      if (objc_msgSend(v8, "hk_isAfterDate:", v9))
      {
        double v10 = [v5 startDate];
        uint64_t v11 = [v7 endDate];
        char v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);
      }
      else
      {
        char v12 = 0;
      }

      double v13 = _Block_copy(a1[12]);
      if ((v12 & 1) == 0) {
        operator new();
      }
    }
    else
    {
      double v13 = _Block_copy(a1[12]);
    }
    *((unsigned char *)a1 + 576) = 1;
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsNoiseLevelE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
    v27[3] = &unk_1E6308FF8;
    id v15 = v5;
    id v28 = v15;
    id v16 = v13;
    id v29 = v16;
    (*((void (**)(id *, void *))*a1 + 9))(a1, v27);
    if (v5)
    {
      char v17 = [v15 startDate];
      [v17 timeIntervalSinceReferenceDate];
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_configureForStartTime((uint64_t)a1);
    }
    else
    {
      (*((void (**)(id *))*a1 + 4))(a1);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsNoiseLevelE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
    v21[3] = &unk_1E6309060;
    double v24 = a1;
    id v5 = v15;
    char v26 = 1;
    id v22 = v5;
    double v25 = a1;
    id v23 = WeakRetained;
    uint64_t v14 = (*((uint64_t (**)(id *, void *, uint64_t))*a1 + 14))(a1, v21, a3);
    double v18 = _Block_copy(v16);
    id v19 = a1[12];
    a1[12] = v18;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to invalidate interval: no data source available.");
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1BD10B90C(_Unwind_Exception *a1)
{
  MEMORY[0x1C187B8A0](v4, 0x10F1C40F1163A8CLL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsNoiseLevelE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_11;
  }
  id v3 = [v10 endDate];
  uint64_t v4 = [*(id *)(a1 + 32) startDate];
  char v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    id v6 = [v10 startDate];
    uint64_t v7 = [*(id *)(a1 + 32) endDate];
    char v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_11:
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9) {
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
      }
    }
  }
}

void sub_1BD10BAF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsNoiseLevelE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = [*(id *)(a1 + 32) startDate];
  [v5 timeIntervalSinceReferenceDate];
  uint64_t v7 = v6;

  char v8 = [*(id *)(a1 + 32) endDate];
  [v8 timeIntervalSinceReferenceDate];
  uint64_t v10 = v9;

  uint64_t v11 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  uint64_t v13 = *(void *)(a1 + 32);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  void v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsNoiseLevelE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  char v32 = *(unsigned char *)(a1 + 64);
  void v30[4] = v7;
  v30[5] = v10;
  uint64_t v31 = *(void *)(a1 + 56);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsNoiseLevelE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  void v29[4] = v31;
  uint64_t v14 = [v11 collectionCalculator:WeakRetained queryForInterval:v13 error:a2 sampleHandler:v30 mergeHandler:v29];

  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15 != v4)
    {
      id v16 = [*(id *)(a1 + 32) endDate];
      [v16 timeIntervalSinceReferenceDate];
      if (*(void *)(v15 + 40))
      {
        double v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          id v19 = [*(id *)(v15 + 40) dateIntervalAtIndex:*(void *)(v15 + 112) + 1];
          HDStatisticsBucket<HDStatisticsNoiseLevel>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsNoiseLevel>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          double v20 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_statisticsFromFinishedBucket(v15, (double *)(v15 + 120));
          unint64_t v21 = [v19 startDate];
          [v21 timeIntervalSinceReferenceDate];
          double v23 = v22;
          double v24 = [v19 endDate];
          [v24 timeIntervalSinceReferenceDate];
          HDStatisticsCollectionEngine<HDStatisticsNoiseLevel>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            char v26 = _Block_copy(*(const void **)(v15 + 96));
            float64x2_t v27 = v26;
            if (v26) {
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);
            }
          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_didChangeBucket(v15, 0);
        }
      }
    }
  }
  return v14;
}

void sub_1BD10BD9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsNoiseLevelE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7 = *(double *)(a1 + 32);
  if (v7 >= a6)
  {
    if (v7 <= a7)
    {
      BOOL v8 = v7 < a7;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      BOOL v8 = 0;
      a5 = 0.0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    BOOL v8 = a7 > a6;
  }
  double v12 = a5;
  double v13 = a6;
  double v14 = a7;
  uint64_t v15 = a2;
  BOOL v16 = v8;
  char v17 = 0;
  int v9 = *(unsigned __int8 *)(a1 + 56);
  if (*(unsigned char *)(a1 + 56))
  {
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v12, a3, a4);
    }
  }
  else
  {
    if (v8)
    {
      double v11 = *(double *)(a1 + 40);
      if (a6 <= v11)
      {
        if (a7 >= v11)
        {
          int v9 = a6 < v11;
          a7 = *(double *)(a1 + 40);
        }
        else
        {
          int v9 = a7 > a6;
        }
      }
    }
    double v13 = a6;
    double v14 = a7;
    BOOL v16 = v9;
    if (v9) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v12, a3, a4);
    }
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsNoiseLevelE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 576)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_configureForStartTime(a1);
  }
  if (*(void *)(a1 + 40)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_advanceToTime(a1, a2);
  }
  if (*(double *)(a1 + 128) > a2)
  {
    HDStatisticsBucket<HDStatisticsNoiseLevel>::_mergeThroughTime(a1 + 120, a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 32) < *(double *)(v10 + 8))
                {
                  uint64_t v129 = *(void *)(v10 + 32);
                  long long v113 = *(_OWORD *)v10;
                  long long v121 = *(_OWORD *)(v10 + 16);
                  long long v52 = *(_OWORD *)(a2 - 40);
                  long long v53 = *(_OWORD *)(a2 - 24);
                  *(_WORD *)(v10 + 32) = *(_WORD *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(_WORD *)(a2 - 8) = v129;
                  *(_OWORD *)(a2 - 24) = v121;
                  *(_OWORD *)(a2 - 40) = v113;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v10, (double *)(v10 + 40), (double *)(a2 - 40));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, v10 + 120, a2 - 40);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            unint64_t v54 = (void *)(v10 + 40);
            BOOL v56 = v10 == a2 || v54 == (void *)a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  long long v59 = v54;
                  double v60 = *(double *)(v58 + 48);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *v54;
                    long long v114 = *(_OWORD *)(v58 + 56);
                    uint64_t v122 = *(void *)(v58 + 72);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      uint64_t v63 = v10 + v62;
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      *(_OWORD *)(v63 + 40) = *(_OWORD *)(v10 + v62);
                      *(_OWORD *)(v63 + 56) = v64;
                      *(_WORD *)(v63 + 72) = *(_WORD *)(v10 + v62 + 32);
                      if (!v62) {
                        break;
                      }
                      v62 -= 40;
                      if (v60 >= *(double *)(v63 - 32))
                      {
                        uint64_t v65 = v10 + v62 + 40;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + 8) = v60;
                    *(_OWORD *)(v65 + 16) = v114;
                    *(_WORD *)(v65 + 32) = v122;
                  }
                  unint64_t v54 = v59 + 5;
                  v57 += 40;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 5 != (void *)a2);
              }
            }
            else if (!v56)
            {
              do
              {
                unint64_t v98 = v54;
                double v99 = *(double *)(a1 + 48);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *v54;
                  long long v117 = *(_OWORD *)(a1 + 56);
                  uint64_t v125 = *(void *)(a1 + 72);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(_OWORD *)(v101 - 3);
                    *(_OWORD *)long long v101 = *(_OWORD *)(v101 - 5);
                    *((_OWORD *)v101 + 1) = v102;
                    *((_WORD *)v101 + 16) = *((_WORD *)v101 - 4);
                    double v103 = *((double *)v101 - 9);
                    v101 -= 5;
                  }
                  while (v99 < v103);
                  *long long v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *((_WORD *)v101 + 16) = v125;
                  *((_OWORD *)v101 + 1) = v117;
                }
                v54 += 5;
                a1 = (unint64_t)v98;
              }
              while (v98 + 5 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 40 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v10 + 40 * v69 + 8) < *(double *)(v70 + 48))
                  {
                    v70 += 40;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  double v71 = *(double *)(v10 + 40 * v68 + 8);
                  if (*(double *)(v70 + 8) >= v71)
                  {
                    unint64_t v72 = v10 + 40 * v68;
                    uint64_t v73 = *(void *)v72;
                    uint64_t v123 = *(void *)(v72 + 32);
                    long long v115 = *(_OWORD *)(v72 + 16);
                    do
                    {
                      unint64_t v74 = v72;
                      unint64_t v72 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_WORD *)(v74 + 32) = *(_WORD *)(v70 + 32);
                      *(_OWORD *)unint64_t v74 = v75;
                      *(_OWORD *)(v74 + 16) = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 40 * v77;
                      uint64_t v78 = 2 * v69 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v10 + 40 * v77 + 8) < *(double *)(v70 + 48))
                      {
                        v70 += 40;
                        uint64_t v77 = v78;
                      }
                      uint64_t v69 = v77;
                    }
                    while (*(double *)(v70 + 8) >= v71);
                    *(void *)unint64_t v72 = v73;
                    *(double *)(v72 + 8) = v71;
                    *(_OWORD *)(v72 + 16) = v115;
                    *(_WORD *)(v72 + 32) = v123;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x28uLL;
              do
              {
                uint64_t v80 = 0;
                uint64_t v130 = *(void *)(v10 + 32);
                long long v116 = *(_OWORD *)v10;
                long long v124 = *(_OWORD *)(v10 + 16);
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = v81;
                  uint64_t v83 = v80 + 1;
                  v81 += 40 * (v80 + 1);
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v85 = v84 + 2;
                  if (v85 < v79 && *(double *)(v82 + 40 * v83 + 8) < *(double *)(v81 + 48))
                  {
                    v81 += 40;
                    uint64_t v80 = v85;
                  }
                  long long v86 = *(_OWORD *)v81;
                  long long v87 = *(_OWORD *)(v81 + 16);
                  *(_WORD *)(v82 + 32) = *(_WORD *)(v81 + 32);
                  *(_OWORD *)unint64_t v82 = v86;
                  *(_OWORD *)(v82 + 16) = v87;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 40;
                if (v81 == a2)
                {
                  *(_WORD *)(v81 + 32) = v130;
                  *(_OWORD *)unint64_t v81 = v116;
                  *(_OWORD *)(v81 + 16) = v124;
                }
                else
                {
                  long long v88 = *(_OWORD *)a2;
                  long long v89 = *(_OWORD *)(a2 + 16);
                  *(_WORD *)(v81 + 32) = *(_WORD *)(a2 + 32);
                  *(_OWORD *)unint64_t v81 = v88;
                  *(_OWORD *)(v81 + 16) = v89;
                  *(_WORD *)(a2 + 32) = v130;
                  *(_OWORD *)a2 = v116;
                  *(_OWORD *)(a2 + 16) = v124;
                  uint64_t v90 = v81 - v10 + 40;
                  if (v90 >= 41)
                  {
                    unint64_t v91 = (v90 / 0x28uLL - 2) >> 1;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v10 + 40 * v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      uint64_t v109 = *(void *)(v81 + 32);
                      long long v106 = *(_OWORD *)(v81 + 16);
                      do
                      {
                        unint64_t v94 = v81;
                        unint64_t v81 = v10 + 40 * v91;
                        long long v95 = *(_OWORD *)v81;
                        long long v96 = *(_OWORD *)(v81 + 16);
                        *(_WORD *)(v94 + 32) = *(_WORD *)(v81 + 32);
                        *(_OWORD *)unint64_t v94 = v95;
                        *(_OWORD *)(v94 + 16) = v96;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 40 * v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + 8) = v92;
                      *(_WORD *)(v81 + 32) = v109;
                      *(_OWORD *)(v81 + 16) = v106;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40 * (v12 >> 1)), (double *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            BOOL v16 = (double *)(a1 + 40 * v13 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40), v16, (double *)(a2 - 80));
            char v17 = (double *)(a1 + 40 + 8 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 80), v17, (double *)(a2 - 120));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v16, (double *)v14, v17);
            uint64_t v126 = *(void *)(a1 + 32);
            long long v110 = *(_OWORD *)a1;
            long long v118 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 16) = v19;
            *(_WORD *)(v14 + 32) = v126;
            *(_OWORD *)unint64_t v14 = v110;
            *(_OWORD *)(v14 + 16) = v118;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40 * (v12 >> 1)), (double *)a1, (double *)(a2 - 40));
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 32) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          long long v105 = *(_OWORD *)(a1 + 16);
          uint64_t v108 = *(void *)(a1 + 32);
          if (v20 >= *(double *)(a2 - 32))
          {
            unint64_t v41 = a1 + 40;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 40;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 40;
              double v40 = *(double *)(v39 + 48);
              v39 += 40;
            }
            while (v20 >= v40);
          }
          unint64_t v43 = a2;
          if (v10 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              unint64_t v43 = v44 - 40;
              double v45 = *(double *)(v44 - 32);
              v44 -= 40;
            }
            while (v20 < v45);
          }
          while (v10 < v43)
          {
            uint64_t v128 = *(void *)(v10 + 32);
            long long v112 = *(_OWORD *)v10;
            long long v120 = *(_OWORD *)(v10 + 16);
            long long v46 = *(_OWORD *)v43;
            long long v47 = *(_OWORD *)(v43 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v43 + 32);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(_WORD *)(v43 + 32) = v128;
            *(_OWORD *)unint64_t v43 = v112;
            *(_OWORD *)(v43 + 16) = v120;
            do
            {
              double v48 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *(double *)(v43 - 32);
              v43 -= 40;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 40);
            long long v51 = *(_OWORD *)(v10 - 24);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 40) = v38;
          *(double *)(v10 - 32) = v20;
          *(_WORD *)(v10 - 8) = v108;
          *(_OWORD *)(v10 - 24) = v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        long long v104 = *(_OWORD *)(a1 + 16);
        uint64_t v107 = *(void *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 48);
          v21 += 40;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        unint64_t v25 = a2;
        if (v21 == 40)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 40;
            double v29 = *(double *)(v28 - 32);
            v28 -= 40;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 40;
            double v27 = *(double *)(v25 - 32);
            v25 -= 40;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v127 = *(void *)(v10 + 32);
            long long v111 = *(_OWORD *)v10;
            long long v119 = *(_OWORD *)(v10 + 16);
            long long v31 = *(_OWORD *)v30;
            long long v32 = *(_OWORD *)(v30 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v30 + 32);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(_WORD *)(v30 + 32) = v127;
            *(_OWORD *)unint64_t v30 = v111;
            *(_OWORD *)(v30 + 16) = v119;
            do
            {
              double v33 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v33 < v20);
            do
            {
              double v34 = *(double *)(v30 - 32);
              v30 -= 40;
            }
            while (v34 >= v20);
          }
          while (v10 < v30);
        }
        if (v10 - 40 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 40);
          long long v36 = *(_OWORD *)(v10 - 24);
          *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 40) = v22;
        *(double *)(v10 - 32) = v20;
        *(_WORD *)(v10 - 8) = v107;
        *(_OWORD *)(v10 - 24) = v104;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 40;
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        __int16 v9 = *(_WORD *)(a2 - 8);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      uint64_t v16 = *(void *)v12;
      long long v21 = *(_OWORD *)(v12 + 16);
      uint64_t v22 = *(void *)(v12 + 32);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(void *)uint64_t v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsNoiseLevelE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(void *a1, uint64_t a2)
{
  id v3 = (void *)a1[5];
  uint64_t v4 = a1[6];
  BOOL v5 = (void *)a1[4];
  uint64_t v6 = [v5 dateInterval];
  void v9[4] = v4;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsNoiseLevelE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsNoiseLevelE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  uint64_t v7 = [v3 collectionCalculator:v5 queryForInterval:v6 error:a2 sampleHandler:v10 mergeHandler:v9];

  return v7;
}

void sub_1BD10CB1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsNoiseLevelE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10 = *(void *)(a1 + 32);
  *(double *)int v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&_OWORD v14[2] = a7;
  v14[3] = a2;
  char v15 = 1;
  uint64_t v11 = [MEMORY[0x1E4F1C9C8] distantFuture];
  [v11 timeIntervalSinceReferenceDate];
  BOOL v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1BD10CBC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsNoiseLevelE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6 = a3;
  uint64_t v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = &unk_1F1724E80;
  double v9 = 900.0;
  if ((v6 & 0x10) == 0) {
    double v9 = 0.0;
  }
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(void *)(v8 + 104) = 0;
  *(void *)(v8 + 112) = 0;
  *(void *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_WORD *)(a1 + 624) = 1;
  *(unsigned char *)(a1 + 626) = 0;
  *(unsigned char *)(a1 + 628) = 0;
  *(void *)(a1 + 632) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(void *)(a1 + 672) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);

  JUMPOUT(0x1C187B8A0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1F1724E80;
  uint64_t v2 = *(void **)(a1 + 656);
  if (v2)
  {
    *(void *)(a1 + 664) = v2;
    operator delete(v2);
  }

  id v3 = *(void **)(a1 + 592);
  if (v3)
  {
    *(void *)(a1 + 600) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(unsigned char *)(result + 624) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::setDateInterval(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 copy];
  uint64_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;

  BOOL v5 = [v6 startDate];
  [v5 timeIntervalSinceReferenceDate];
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
}

void sub_1BD10CD68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(void *)(a1 + 40))
  {
    id v5 = v3;
    [v3 timeIntervalSinceReferenceDate];
    *(void *)(a1 + 632) = v4;
    id v3 = v5;
  }
}

void sub_1BD10CDDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::setStatisticsConfiguration(id *a1, void *a2)
{
  objc_storeStrong(a1 + 80, a2);
  id v7 = a2;
  id v4 = a1[80];
  id v5 = a1[77];
  a1[77] = v4;
  id v6 = v4;

  objc_storeStrong(a1 + 19, a1[77]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (*(void *)(a1 + 40)) {
    return 1;
  }
  BOOL v7 = *(void *)(a1 + 224) == *(void *)(a1 + 216) && *(uint64_t *)(a1 + 256) < 1
    || HKIntervalMask<double>::firstDifference(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)a2, *(void *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (v7) {
    return 1;
  }
  double v9 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128);

  return v9(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 copy];
  id v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v3;
}

void sub_1BD10CFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::dataSource(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));

  return WeakRetained;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::currentStatistics(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 624))
  {
    unint64_t v1 = 0;
  }
  else
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v4);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v4, v5);
    unint64_t v1 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v4);
  }

  return v1;
}

void sub_1BD10D094(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(a1 + 64);
  BOOL v7 = v6;
  if (v6)
  {
    uint64_t v8 = [v6 startDate];
    [v8 timeIntervalSinceReferenceDate];
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    uint64_t v10 = [v7 endDate];
    [v10 timeIntervalSinceReferenceDate];
    double v12 = v11;
    double v13 = *(double *)(a2 + 8);

    if (v12 < v13) {
      goto LABEL_9;
    }
  }
  if (!*(unsigned char *)(a1 + 626))
  {
LABEL_11:
    uint64_t v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 625))
  {
LABEL_9:
    uint64_t v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(unsigned char *)(a1 + 627)) {
      goto LABEL_11;
    }
    unint64_t v17 = *(void *)(a1 + 664);
    unint64_t v18 = *(void *)(a1 + 672);
    if (v17 >= v18)
    {
      uint64_t v22 = *(void *)(a1 + 656);
      unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      unint64_t v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24) {
        unint64_t v24 = 2 * v25;
      }
      if (v25 >= 0x333333333333333) {
        unint64_t v26 = 0x666666666666666;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26) {
        unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      }
      else {
        uint64_t v27 = 0;
      }
      unint64_t v28 = v26 + 40 * v23;
      unint64_t v29 = v26 + 40 * v27;
      long long v30 = *(_OWORD *)a2;
      long long v31 = *(_OWORD *)(a2 + 16);
      *(void *)(v28 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      unint64_t v21 = v28 + 40;
      long long v32 = *(char **)(a1 + 664);
      double v33 = *(char **)(a1 + 656);
      if (v32 != v33)
      {
        do
        {
          long long v34 = *(_OWORD *)(v32 - 40);
          long long v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        long long v32 = *(char **)(a1 + 656);
      }
      *(void *)(a1 + 656) = v28;
      *(void *)(a1 + 664) = v21;
      *(void *)(a1 + 672) = v29;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      long long v19 = *(_OWORD *)a2;
      long long v20 = *(_OWORD *)(a2 + 16);
      *(void *)(v17 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      unint64_t v21 = v17 + 40;
    }
    *(void *)(a1 + 664) = v21;
    goto LABEL_9;
  }
  int v14 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
  uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1BD10D304(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = v5;
  if (*(unsigned char *)(a1 + 626))
  {
    uint64_t v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 626) = 1;
  uint64_t v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    uint64_t v7 = 0;
    goto LABEL_82;
  }
  uint64_t v65 = v6;
  if (*(unsigned char *)(a1 + 625)) {
    goto LABEL_5;
  }
  double v9 = *(void **)(a1 + 648);
  if (!v9)
  {
    id v68 = 0;
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 40))
  {
LABEL_5:
    int v8 = 0;
    id v68 = 0;
    goto LABEL_29;
  }
  [v9 sortUsingComparator:&__block_literal_global_900];
  id v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v10 = *(id *)(a1 + 648);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  if (!v11)
  {

    id v12 = 0;
    goto LABEL_27;
  }
  id v12 = 0;
  uint64_t v13 = *(void *)v70;
  do
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (*(void *)v70 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(id *)(*((void *)&v69 + 1) + 8 * i);
      BOOL v16 = v15;
      if (v12)
      {
        unint64_t v17 = [v15 startDate];
        unint64_t v18 = [v12 endDate];
        int v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          long long v20 = [v16 endDate];
          unint64_t v21 = [v12 endDate];
          int v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22) {
            goto LABEL_21;
          }
          id v23 = objc_alloc(MEMORY[0x1E4F28C18]);
          unint64_t v24 = [v12 startDate];
          unint64_t v25 = [v16 endDate];
          id v26 = (id)[v23 initWithStartDate:v24 endDate:v25];
        }
        else
        {
          [v68 addObject:v12];
          id v26 = v16;
        }
        id v12 = v26;
      }
      else
      {
        id v12 = v15;
      }
LABEL_21:
    }
    uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  }
  while (v11);

  if (v12) {
    [v68 addObject:v12];
  }
LABEL_27:

LABEL_28:
  int v8 = 1;
LABEL_29:
  uint64_t v27 = *(void **)(a1 + 648);
  *(void *)(a1 + 648) = 0;

  *(unsigned char *)(a1 + 625) = 0;
  if (!v8)
  {
    unint64_t v38 = *(void *)(a1 + 656);
    *(void *)(a1 + 672) = 0;
    *(void *)(a1 + 664) = 0;
    *(void *)(a1 + 656) = 0;
    unint64_t v39 = v38;
    goto LABEL_47;
  }
  unint64_t v28 = [v68 lastObject];
  if (v28)
  {
    unint64_t v29 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_currentBucketInterval(a1);
    long long v30 = [v29 endDate];
    long long v31 = [v28 endDate];
    int v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      double v33 = [v28 endDate];
      [v33 timeIntervalSinceReferenceDate];
      double v35 = v34;

      uint64_t v36 = *(void *)(a1 + 656);
      BOOL v37 = *(long long **)(a1 + 664);
      while ((long long *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((long long *)v36 != v37)
          {
            double v40 = (long long *)(v36 + 40);
            if ((long long *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  long long v41 = *v40;
                  long long v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)uint64_t v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                double v40 = (long long *)((char *)v40 + 40);
              }
              while (v40 != v37);
              BOOL v37 = *(long long **)(a1 + 664);
            }
          }
          if ((long long *)v36 != v37) {
            *(void *)(a1 + 664) = v36;
          }
          break;
        }
        v36 += 40;
      }
    }
  }
  unint64_t v38 = *(void *)(a1 + 656);
  unint64_t v39 = *(void *)(a1 + 664);
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 664) = 0;
  if (![v68 count]) {
    goto LABEL_60;
  }
LABEL_47:
  id v43 = v68;
  long long __p = (void *)v38;
  if (v43)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v44 = v43;
    uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v70;
      while (2)
      {
        for (uint64_t j = 0; j != v45; ++j)
        {
          if (*(void *)v70 != v46) {
            objc_enumerationMutation(v44);
          }
          id v48 = *(id *)(*((void *)&v69 + 1) + 8 * j);
          int v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval((id *)a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
        if (v45) {
          continue;
        }
        break;
      }
    }

LABEL_59:
    unint64_t v38 = (unint64_t)__p;
LABEL_60:
    unint64_t v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v51;
    }
    int v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    long long __p = (void *)v38;
    if (v39 != v38)
    {
      uint64_t v54 = v38;
      uint64_t v50 = v67;
      do
      {
        int v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_primitiveAddSample(a1, v54, 1, v50);
        int v53 = v55;
        v54 += 40;
        if (v54 == v39) {
          char v56 = 0;
        }
        else {
          char v56 = v55;
        }
        uint64_t v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval((id *)a1, 0, v67))goto LABEL_59; {
LABEL_70:
    }
    int v53 = 0;
  }
  if (*(void *)(a1 + 40) && *(void *)(a1 + 600) != *(void *)(a1 + 592))
  {
    do
    {
      uint64_t v57 = objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(void *)(a1 + 112) + 1, v50, v65);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      unint64_t v58 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, a1 + 120);
      long long v59 = [v57 startDate];
      [v59 timeIntervalSinceReferenceDate];
      double v61 = v60;
      uint64_t v62 = [v57 endDate];
      [v62 timeIntervalSinceReferenceDate];
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
    }
    while (*(void *)(a1 + 600) != *(void *)(a1 + 592));
  }
  *(unsigned char *)(a1 + 626) = 0;
  if (__p) {
    operator delete(__p);
  }

  if (v53)
  {
    if (*(unsigned char *)(a1 + 628))
    {
      *(unsigned char *)(a1 + 628) = 0;
      id v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
      uint64_t v7 = 1;
      goto LABEL_82;
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v6 = v65;
LABEL_82:
  *(unsigned char *)(a1 + 626) = 0;
LABEL_83:

  return v7;
}